'Ignores a twitter account from showing up in the AoA tool.'
'Unignores a twitter account from showing up in the AoA tool.'
'Return the dict needed for tweets.html to render a tweet + replies.'
'Fetch a list of tweets. DCNL Args: DCNL limit: the maximum number of tweets returned DCNL max_id: Return tweets with tweet_id less than this. DCNL reply_to: Return only tweets that are replies to the given Tweet. If DCNL None, return only top-level (non-reply) tweets. DCNL filter: One of the keys from FILTERS'
'AJAX view returning a list of tweets.'
'Customer Care Landing page.'
'Moderate banned AoA twitter handles.'
'Post a tweet, and return a rendering of it (and any replies).'
'Hide the tweet with a given ID. Only hides tweets that are not replies DCNL and do not have replies. DCNL Returns proper HTTP status codes.'
'Handle the reply save signal. DCNL * We award the Army of Awesome badge on 50 tweets.'
'The moderation queue.'
'Update the status of a flagged object.'
'Build and send the announcement emails to a group.'
'An ajax view to create a new announcement for the current locale.'
'An ajax view to delete an announcement.'
'Sends the award notification email DCNL :arg award: the django-badger Award instance'
'Get or create a badge. DCNL The badge_template is a dict and must have a slug key. All DCNL the values in the dict will be formatted with year, if one DCNL is specified. For example: DCNL badge_template[\'slug\'].format(year=year) DCNL If a badge with the specified slug doesn\'t exist, we create DCNL the badge with the specified slug and the rest of the items DCNL in the dict.'
'Notifies award recipient that he/she has an award!'
'Get new visitor data from Google Analytics and save.'
'Calculate new l10n coverage numbers and save. DCNL L10n coverage is a measure of the amount of translations that are DCNL up to date, weighted by the number of visits for each locale. DCNL The "algorithm" (see Bug 727084): DCNL SUMO visits = Total SUMO visits for the last 30 days; DCNL Total translated = 0; DCNL For each locale { DCNL Total up to date = Total up to date + DCNL ((Number of up to date articles in the en-US top 50 visited)/50 ) * DCNL (Visitors for that locale / SUMO visits)); DCNL An up to date article is any of the following: DCNL * An en-US article (by definition it is always up to date) DCNL * The latest en-US revision has been translated DCNL * There are only new revisions with TYPO_SIGNIFICANCE not translated DCNL * There is only one revision of MEDIUM_SIGNIFICANCE not translated'
'Calculate and save contributor metrics.'
'Calculate and save the support forum contributor counts. DCNL An support forum contributor is a user that has replied 10 times DCNL in the past 30 days to questions that aren\'t his/her own.'
'Calculate and save the KB (en-US and L10n) contributor counts. DCNL A KB contributor is a user that has edited or reviewed a Revision DCNL in the last 30 days.'
'Calculate and save the AoA contributor counts. DCNL An AoA contributor is a user that has replied in the last 30 days.'
'Get new search CTR data from Google Analytics and save.'
'Returns the date of the latest metric value.'
'Get the top documents by visits.'
'Exit survey handling. DCNL * Collect new exit survey results. DCNL * Save results to our metrics table. DCNL * Add new emails collected to the exit survey.'
'Collect and save new exit survey results.'
'Add question askers to a surveygizmo campaign to get surveyed.'
'Of the group ``users``, count how many made a contribution in ``date_range``.'
'Get the email addresses collected between startdate and enddate.'
'Add email to the exit survey campaign.'
'Collect and aggregate the exit survey results for the date.'
'Return the daily grouped queryset we need for model_cls.'
'Return the monthly grouped queryset we need for model_cls.'
'The date from which we start querying monthly data.'
'Remap the query result. DCNL kwargs = { DCNL <label>=[ DCNL {\'count\': 45, \'month\': 2L, \'year\': 2010L}, DCNL {\'count\': 6, \'month\': 2L, \'year\': 2010L},   # Note duplicate date DCNL {\'count\': 12, \'month\': 1L, \'year\': 2010L}, DCNL {\'count\': 1, \'month\': 12L, \'year\': 2009L}, DCNL <label>=[{...},...], DCNL returns [ DCNL datetime.date(2009, 12, 1): {\'<label>\': 1}, DCNL datetime.date(2010, 1, 1): {\'<label>\': 12}, DCNL datetime.date(2010, 2, 1): {\'<label>\': 51}  # Note summed counts'
'Merge query results arrays into one array. DCNL From: DCNL [{"date": "2011-10-01", "votes": 3},...] DCNL and DCNL [{"date": "2011-10-01", "helpful": 7},...] DCNL To: DCNL [{"date": "2011-10-01", "votes": 3, "helpful": 7},...]'
'Return a DB cursor for reading.'
'Parse a text date like ``"2004-08-30`` into a triple of numbers. DCNL May fling ValueErrors or TypeErrors around if the input or date is invalid. DCNL It should at least be a string--I mean, come on.'
'Check if the user has a permission on a specific object. DCNL Returns boolean.'
'Check if the user has a permission or owns the object. DCNL Ownership is determined by comparing perm_obj.field_name to the user in DCNL context.'
'Given a user, a permission, an object (obj) and another object to check DCNL permissions against (perm_obj), return True if the user has perm on DCNL obj.'
'Return whether a user has a permission globally or on a given object.'
'Return whether an object has an authority permission that references it. DCNL If it doesn\'t, we sometimes treat that permission as free to everyone, DCNL since the auth backends we currently use have no concept of granting a DCNL permission to the world. DCNL Considers only approved permissions to exist.'
'Helper function that returns a decorator. DCNL * redirect func ----- If truthy, a redirect will occur DCNL * deny_func --------- If truthy, HttpResponseForbidden is returned. DCNL * redirect_url_func - Evaluated at view time, returns the redirect URL DCNL i.e. where to go if redirect_func is truthy. DCNL * redirect_field ---- What field to set in the url, defaults to Django\'s. DCNL Set this to None to exclude it from the URL.'
'Requires that the user *not* be logged in.'
'Requires that the user is logged in.'
'A replacement for django.contrib.auth.decorators.permission_required DCNL that doesn\'t ask authenticated users to log in.'
'Act like permission_required_or_403 but also grant permission to owners. DCNL Arguments: DCNL perm: authority permission to check, e.g. \'forums_forum.edit_forum\' DCNL owner_attr: Attr of model object that references the owner DCNL obj_lookup: Triple that specifies a lookup to the object on which DCNL ownership should be compared. Items in the tuple are... DCNL (model class or import path thereof, DCNL kwarg name specifying field and comparator (e.g. \'id__exact\'), DCNL name of kwarg containing the value to which to compare) DCNL perm_obj_lookup: Triple that specifies a lookup to the object on which DCNL to check for permission. Elements of the tuple are as in DCNL obj_lookup.'
'Return the object indicated by the lookup triple and the kwargs passed DCNL to the view.'
'Given an uploaded file, a user, and other data, it creates an Image'
'Uploads an image from the request.'
'Checks the permissions for user on media (image or video). DCNL Pass in: * media object (Image or Video) DCNL * (logged in) user DCNL * perm_type = \'delete\', \'change\', \'add\' DCNL Raises PermissionDenied if not allowed. Owner is always allowed.'
'Save a media form, add user to updated_by. DCNL Warning: this assumes you\'re calling it from a subclass of MediaForm.'
'The media gallery. DCNL Filter can be set to \'images\' or \'videos\'.'
'Finalizes an uploaded draft.'
'Delete an existing draft for the user.'
'AJAX endpoint to media gallery. DCNL Returns an HTML list representation of the media.'
'Search the media gallery.'
'Delete media and redirect to gallery view.'
'Edit media means only changing the description, for now.'
'The media page.'
'Upload images or videos from request.FILES.'
'Returns an image or video along with media format for the image.'
'Get video and image drafts for a given user.'
'Initializes the media form with an Image/Video instance and POSTed data. DCNL form_cls is a django ModelForm DCNL Request method must be POST for POST data to be bound. DCNL exclude_fields contains the list of fields to default to their current DCNL value from the Image/Video object.'
'Send a welcome email to first time contributors. DCNL Anyone who has made a contribution more than 24 hours ago and has not DCNL already gotten a welcome email should get a welcome email.'
'Get the top Support Forum contributors.'
'Get the top KB editors (locale=\'en-US\').'
'Get the top l10n contributors for the KB.'
'Get the top Army of Awesome contributors.'
'Apply the date and locale filters to the EU query.'
'Community hub landing page.'
'Find users by username and displayname. DCNL Uses the ES user\'s index.'
'Top contributors list view.'
'Make sure the locale is enabled on SUMO.'
'Return a URL to the group\'s avatar.'
'Edit group avatar.'
'Delete group avatar.'
'Add a member to the group.'
'Remove a member from the group.'
'Add a leader to the group.'
'Remove a leader from the group.'
'Join the Contributors group.'
'Can the given user edit the given group profile?'
'Can the given user add and remove leaders?'
'Return the most recent post in the given set, excluding the given post. DCNL If there are none, return None.'
'When a user\'s username is changed, we must reindex the threads DCNL they participated in.'
'View all the forums.'
'View all the threads in a forum.'
'View all the posts in a thread.'
'Reply to a thread.'
'Start a new thread.'
'Lock/Unlock a thread.'
'Mark/unmark a thread sticky.'
'Edit a thread.'
'Delete a thread.'
'Move a thread.'
'Edit a post.'
'Delete a post.'
'Watch/unwatch a thread (based on \'watch\' POST param).'
'Watch/unwatch a forum (based on \'watch\' POST param).'
'Ajax preview of posts.'
'Return an interable of EmailMessages to send when a new post is DCNL created.'
'Return an interable of EmailMessages to send when a new thread is DCNL created.'
'Return True if `user` is watching the discussion for `locale` and DCNL False, otherwise.'
'Return the most recent post in the given set, excluding the given post. DCNL If there are none, return None.'
'Given a slug and a request, get the document or 404.'
'View all the threads in a discussion forum.'
'View all the posts in a thread.'
'Ratelimiting helper for kbforum threads and replies. DCNL They are ratelimited together with the same key.'
'Reply to a thread.'
'Start a new thread.'
'Lock/Unlock a thread.'
'Mark/unmark a thread sticky.'
'Edit a thread.'
'Delete a thread.'
'Edit a post.'
'Delete a post.'
'Watch/unwatch a thread (based on \'watch\' POST param).'
'Watch/unwatch a locale.'
'Watch/unwatch a document (based on \'watch\' POST param).'
'Ajax preview of posts.'
'The product picker page.'
'The product landing page.'
'The document listing page for a product + topic.'
'Build a query that matches objects with a content type that matches an action.'
'Hit a simple push endpoint to send a notification to a user. DCNL Handles and record any HTTP errors. May retry up to ``max_retries`` DCNL times by recursing. DCNL This function tries hard to handle any potential errors, so it may DCNL be used in a loop that iterates over many actions to send, without DCNL the loop needing to contain error handling logic. DCNL @param endpoint: The url to PUT to. DCNL @param version: The version to include in the push. Should be an integer DCNL greater than the version used every other time this endpoint has DCNL been called. Timestamps and DB auto increment fields work well. DCNL @param max_retries: The maximum number of times to try again.'
'Call every notification handler for a notification.'
'Send simple push notifications to users that have opted in to them. DCNL This will be called as a part of a celery task.'
'When an Action is created, notify every user following something in the Action.'
'Register a function to be called via Celery for every notification. DCNL This may be used as a decorator or as a simple function.'
'Send notification of a new private message.'
'Send a private message. DCNL :arg to: a list of Users to send the message to DCNL :arg sender: the User who is sending the message DCNL :arg text: the message text'
'Returns the number of unread messages for the specified user.'
'Adds the unread private messages count to the context. DCNL * Returns 0 for anonymous users. DCNL * Returns 0 if waffle flag is off.'
'Send a new private message.'
'Apply action to selected messages.'
'Ajax preview of posts.'
'Print timeline block.'
'Make a compatible version of pip importable. Raise a RuntimeError if we DCNL couldn\'t.'
'Return a short, 7-bit-safe representation of a hash. DCNL If you pass a sha256, this results in the hash algorithm that the Wheel DCNL format (PEP 427) uses, except here it\'s intended to be run across the DCNL downloaded archive before unpacking.'
'Return the path and line number of the file from which an DCNL InstallRequirement came.'
'Yield hashes from contiguous comment lines before line ``line_number``.'
'Delegate to pip the given args (starting with the subcommand), and raise DCNL ``PipException`` if something goes wrong.'
'Return the hash of a downloaded file.'
'Return whether this is probably a git sha'
'Return an iterable of filtered arguments. DCNL :arg argv: Arguments, starting after the subcommand DCNL :arg want_paths: If True, the returned iterable includes the paths to any DCNL requirements files following a ``-r`` or ``--requirement`` option. DCNL :arg want_other: If True, the returned iterable includes the args that are DCNL not a requirement-file path or a ``-r`` or ``--requirement`` flag.'
'Return the peep hash of one or more files, returning a shell status code DCNL or raising a PipException. DCNL :arg argv: The commandline args, starting after the subcommand'
'Memoize a method that should return the same result every time on a DCNL given instance.'
'Return a PackageFinder respecting command-line options. DCNL :arg argv: Everything after the subcommand'
'Return a map of key -> list of things.'
'Execute something before the first item of iter, something else for each DCNL item, and a third thing after the last. DCNL If there are no items in the iterable, don\'t execute anything.'
'Return a list of DownloadedReqs representing the requirements parsed DCNL out of a given requirements file. DCNL :arg path: The path to the requirements file DCNL :arg argv: The commandline args, starting after the subcommand'
'Perform the ``peep install`` subcommand, returning a shell status code DCNL or raising a PipException. DCNL :arg argv: The commandline args, starting after the subcommand'
'Convert a peep requirements file to one compatble with pip-8 hashing. DCNL Loses comments and tromps on URLs, so the result will need a little manual DCNL massaging, but the hard part--the hash conversion--is done for you.'
'Be the top-level entrypoint. Return a shell status code.'
'Do typical sumo update'
'Of the group ``users``, count how many made a contribution in ``date_range``.'
'This function provides functionality for the \'ifhasperm\' template tag DCNL Syntax:: DCNL {% ifhasperm PERMISSION_LABEL.CHECK_NAME USER *OBJS %} DCNL lalala DCNL {% else %} DCNL meh DCNL {% endifhasperm %} DCNL {% ifhasperm "poll_permission.change_poll" request.user %} DCNL lalala DCNL {% else %} DCNL meh DCNL {% endifhasperm %}'
'Renders an "add permissions" form for the given object. If no object DCNL is given it will render a select box to choose from. DCNL Syntax:: DCNL {% permission_form for OBJ using PERMISSION_LABEL.CHECK_NAME [with TEMPLATE] %} DCNL {% permission_form for lesson using "lesson_permission.add_lesson" %}'
'Renders an "add permissions" form for the given object. If no object DCNL is given it will render a select box to choose from. DCNL Syntax:: DCNL {% permission_request_form for OBJ and PERMISSION_LABEL.CHECK_NAME [with TEMPLATE] %} DCNL {% permission_request_form for lesson using "lesson_permission.add_lesson" DCNL with "authority/permission_request_form.html" %}'
'Retrieves all permissions associated with the given obj and user DCNL and assigns the result to a context variable. DCNL Syntax:: DCNL {% get_permissions obj %} DCNL {% for perm in permissions %} DCNL {{ perm }} DCNL {% endfor %} DCNL {% get_permissions obj as "my_permissions" %} DCNL {% get_permissions obj for request.user as "my_permissions" %}'
'Retrieves all permissions requests associated with the given obj and user DCNL and assigns the result to a context variable. DCNL Syntax:: DCNL {% get_permission_requests obj %} DCNL {% for perm in permissions %} DCNL {{ perm }} DCNL {% endfor %} DCNL {% get_permission_requests obj as "my_permissions" %} DCNL {% get_permission_requests obj for request.user as "my_permissions" %}'
'Performs a permission check with the given signature, user and objects DCNL and assigns the result to a context variable. DCNL Syntax:: DCNL {% get_permission PERMISSION_LABEL.CHECK_NAME for USER and *OBJS [as VARNAME] %} DCNL {% get_permission "poll_permission.change_poll" DCNL for request.user and poll as "is_allowed" %} DCNL {% get_permission "poll_permission.change_poll" DCNL for request.user and poll,second_poll as "is_allowed" %} DCNL {% if is_allowed %} DCNL I\'ve got ze power to change ze pollllllzzz. Muahahaa. DCNL {% else %} DCNL Meh. No power for meeeee. DCNL {% endif %}'
'Performs a permission request check with the given signature, user and objects DCNL and assigns the result to a context variable. DCNL Syntax:: DCNL {% get_permission_request PERMISSION_LABEL.CHECK_NAME for USER and *OBJS [as VARNAME] %} DCNL {% get_permission_request "poll_permission.change_poll" DCNL for request.user and poll as "asked_for_permissio" %} DCNL {% get_permission_request "poll_permission.change_poll" DCNL for request.user and poll,second_poll as "asked_for_permissio" %} DCNL {% if asked_for_permissio %} DCNL Dude, you already asked for permission! DCNL {% else %} DCNL Oh, please fill out this 20 page form and sign here. DCNL {% endif %}'
'Renders a html link to the delete view of the given permission. Returns DCNL no content if the request-user has no permission to delete foreign DCNL permissions.'
'Renders a html link to the delete view of the given permission request. DCNL Returns no content if the request-user has no permission to delete foreign DCNL permissions.'
'Renders a html link to the approve view of the given permission request. DCNL Returns no content if the request-user has no permission to delete foreign DCNL permissions.'
'Goes and imports the permissions submodule of every app in INSTALLED_APPS DCNL to make sure the permission set classes are registered correctly.'
'Decorator for views that checks whether a user has a particular permission DCNL enabled, redirecting to the log-in page if necessary.'
'Decorator that wraps the permission_required decorator and returns a DCNL permission denied (403) page instead of redirecting to the login URL.'
'Default 403 handler. DCNL Templates: `403.html` DCNL Context: DCNL request_path DCNL The path of the requested URL (e.g., \'/app/pages/bad_page/\')'
'Fetch and store a webpay product icon. DCNL Parameters: DCNL **url** DCNL Absolute URL of icon DCNL **ext_size** DCNL The height/width size that the developer claims it to be DCNL **size** DCNL The height/width webpay wants us to resize it to DCNL The icon will be resized if its ext_size is larger than size. DCNL See webpay for details on how this is used for in-app payments.'
'Generates a webpay/solitude external ID given an addon\'s primary key.'
'Prepare a JWT describing the item about to be purchased when DCNL working with navigator.mozPay(). DCNL See the MDN docs for details on the JWT fields: DCNL https://developer.mozilla.org/en-US/Marketplace/Monetization DCNL /In-app_payments_section/mozPay_iap'
'Returns a signed JWT to use for signature checking. DCNL This is for Nagios checks to ensure that Marketplace\'s DCNL signed tokens are valid when processed by Webpay.'
'Task intended to run via command line to update all apps\' supported locales DCNL based on the current version.'
'Clean out apps signed for reviewers.'
'Calculate popularity of app for all regions and per region. DCNL Returns value in the format of:: DCNL {\'all\': <global installs>, DCNL <region_slug>: <regional installs>,'
'Update app install counts for all published apps. DCNL We break these into chunks so we can bulk index them. Each chunk will DCNL process the apps in it and reindex them in bulk. After all the chunks are DCNL processed we find records that haven\'t been updated and purge/reindex those DCNL so we nullify their values.'
'Calculate trending for app for all regions and per region. DCNL a = installs from 8 days ago to 1 day ago DCNL b = installs from 29 days ago to 9 days ago, averaged per week DCNL trending = (a - b) / b if a > 100 and b > 1 else 0 DCNL Returns value in the format of:: DCNL {\'all\': <global trending score>, DCNL <region_slug>: <regional trending score>,'
'Update trending for all published apps. DCNL We break these into chunks so we can bulk index them. Each chunk will DCNL process the apps in it and reindex them in bulk. After all the chunks are DCNL processed we find records that haven\'t been updated and purge/reindex those DCNL so we nullify their values.'
'Sets up tasks to do user install dumps.'
'Site-wide garbage collections.'
'Returns a list of locales found in the "locales" property of the manifest. DCNL This will convert locales found in the SHORTER_LANGUAGES setting to their DCNL full locale. It will also remove locales not found in AMO_LANGUAGES. DCNL Note: The default_locale is not included.'
'{body.id, rating.id} to translated rating.label.'
'Dehydrate an object of content ratings from rating IDs to dict.'
'Create a "mini" manifest for a packaged app or langpack and cache it (Call DCNL with `force=True` to bypass existing cache). DCNL Note that platform expects name/developer/locales to match the data from DCNL the real manifest in the package, so it needs to be read from the zip file. DCNL Returns a tuple with the minifest contents and the corresponding etag.'
'Cleans a model instance slug. DCNL This strives to be as generic as possible as it\'s used by Webapps DCNL and maybe less in the future. :-D'
'Put all translations into a translations dict.'
'The try/except AttributeError allows this to be used where the input is DCNL ambiguous, and could be either an already-reversed URL or a Version object.'
'Set nomination date when app is pending review.'
'Pre-generate an Android APK for a public app.'
'Return IDs of Webapp objects excluded from a particular region or excluded DCNL due to Geodata flags.'
'If the addon is premium, require a purchase. DCNL Must be called after addon_view decorator.'
'Check that the addon can become premium.'
'Don\'t evaluate qs or the locale will get stuck on whatever the server DCNL starts with. The app_view() decorator will call qs with no arguments before DCNL doing anything, so lambdas are ok. DCNL GOOD: Webapp.objects.valid DCNL GOOD: lambda: Webapp.objects.valid().filter(...) DCNL BAD: Webapp.objects.valid()'
'The try/except AttributeError allows this to be used where the input is DCNL ambiguous, and could be either an already-reversed URL or a Version object.'
'Returns a user object. This user is suitable for assigning to DCNL cron jobs or long running tasks.'
'Create an user if he doesn\'t exist already, assign him to a group and DCNL create a token for him. DCNL if ``overwrite=True`` then existing OAuth credentials for this user will be DCNL deleted, if any. DCNL If OAuth credentials are not specified, random key and secret will be DCNL generated.'
'Query for a user matching a given email.'
'Verify a BrowserID login attempt. If the BrowserID assertion is DCNL good, but no account exists, create one.'
'A pre-configured wrapper around the app validator.'
'Resizes addon/websites icons.'
'Resizes webapp/website promo imgs.'
'Optimizes a PNG image by running it through Pngcrush. Returns hash. DCNL src -- filesystem image path DCNL hash_field -- field name to save the new hash on instance if passing DCNL instance through set_modified_on'
'Resizes preview images and stores the sizes on the preview.'
'Saves the icon for `obj` to its final destination. `obj` can be an app or a DCNL website.'
'Saves the promo image for `obj` to its final destination. DCNL `obj` can be an app or a website.'
'Downloads a webapp icon from the location specified in the manifest. DCNL Returns False if icon was not able to be retrieved DCNL If `file_pk` is not provided it will use the file from the app\'s DCNL `current_version`.'
'Return a validation object that looks like the add-on validator.'
'Email app developers notifying them of new regions added.'
'Update blocked regions based on a list of regions to exclude.'
'Flag app for rereview if it receives an Adult content rating.'
'Convert a resource URI to the primary key of the resource.'
'Escalate the app if it uses prerelease permissions.'
'Restore an incomplete app to its former status. The app will be marked DCNL as its previous status or PENDING if it was never reviewed.'
'Image should be shrunk so that the longest side is 32px.'
'Image stays the same, since the new size is bigger than both sides.'
'Image stays the same, since the new size is the same.'
'Resize multiple images at once.'
'Resize promo image.'
'A function that mocks `storage.open` and throws an IOError if you try to DCNL open a 128x128px icon.'
'Return a uuid for use in the payment flow. In debugging it prefixes DCNL the value of the uuid so its easier to spot in logs and such.'
'Use this decorator on Provider methods to ensure that the account DCNL being passed into the method belongs to that provider.'
'Get a provider implementation instance by name or id.'
'Wrapper for developer page titles.'
'Wrapper function for ``breadcrumbs``. Prepends \'Developers\' breadcrumb. DCNL **items** DCNL list of [(url, label)] to be inserted after Add-on. DCNL **addon** DCNL Adds the Add-on name to the end of the trail.  If items are DCNL specified then the Add-on will be linked. DCNL **add_default** DCNL Prepends trail back to home when True.  Default is False.'
'Requires user to be add-on owner or admin. DCNL When allow_editors is True, an editor can view the page. DCNL When `staff` is True, users in the Staff or Support Staff groups are DCNL allowed. Users in the Developers group are allowed read-only.'
'Set up the queryset and filtering for addon listing for Dashboard.'
'Ratings can be created via IARC pinging our API. DCNL Thus we can\'t display a success message via the standard POST/req/res. DCNL To workaround, we stored app\'s rating\'s `modified` from edit page. DCNL When hitting back to the ratings summary page, calc what msg to show. DCNL old_status -- app status during ratings edit page. DCNL old_modified -- rating modified datetime during ratings edit page.'
'Wrapper function for `_upload_manifest` so we can keep the DCNL standalone validator separate from the manifest upload stuff.'
'Safe wrapper around JSON dict containing a validation result.'
'Blocklists the app by creating a new version/file.'
'Handle search filters and queries for transactions.'
'Same as the rest framework reverse, except does not get the base URL.'
'Custom exception handler for DRF, which doesn\'t provide one for HTTP DCNL responses like tastypie does.'
'Returns an include statement containing URL patterns for the passed API DCNL version. Adds a namespace if that version does not match DCNL `settings.API_CURRENT_VERSION`, to ensure that reversed URLs always use the DCNL current version.'
'A resource that is designed to be exposed externally and contains DCNL settings or waffle flags that might be relevant to the client app.'
'"Two-legged" OAuth authorization isn\'t standard and so not DCNL supported by current versions of oauthlib. The implementation DCNL here is sufficient for simple developer tools and testing. Real DCNL usage of OAuth will always require directing the user to the DCNL authorization page so that a resource-owner token can be DCNL generated.'
'Get a hash identifying an user. DCNL It\'s a hash of session key, ip and user agent'
'Create a new record in the database with the given values. DCNL :param key: DCNL The type of stats you\'re sending, e.g. "app.install". DCNL :param request: DCNL The request associated with this call. It will be used to define who DCNL the user is. DCNL :para: data: DCNL The data you want to store. You can pass the data to this function as DCNL named arguments.'
'Helper function for building Fireplace URLs. `path` is the URL route, DCNL and `name` (if specified) is the name given to the route.'
'Serves the frontend single-page apps.'
'A page to mimic commonplace\'s fxa-authorize page to handle login.'
'If we are hitting the Fireplace detail page, get the app for Open Graph DCNL tags.'
'Will remove all validation results.  Used when the validator is DCNL upgraded and results may no longer be relevant.'
'Get the actual file path of fileorpath if it\'s a FileUpload object.'
'Get a file-like object, whether given a FileUpload object or an DCNL UploadedFile.'
'Extracts the zip file.'
'Copies from the source to the destination, removing the destination DCNL if it exists and is a directory.'
'pkg is a filepath or a django.core.files.UploadedFile DCNL or files.models.FileUpload.'
'Returns an MD5 hash for a filename.'
'On delete of the file object from the database, unlink the file from DCNL the file system'
'Uses NFD to normalize unicode strings.'
'This is to serve files off of st.a.m.o, not standard a.m.o. For this we DCNL use token based authentication.'
'Adds a `feature_profile` on the request object if one is present and the DCNL dev parameter is either firefoxos or android. DCNL Does nothing if one was already set.'
'Updates the prices and price currency objects based on the tiers. DCNL Tiers should be a list containing a dictionary of currency / value pairs. DCNL The value of US is required so that we can look up the price tier. If the DCNL price tier for US isn\'t found, we skip whole tier. If the currency isn\'t DCNL found but the tier is, we create the currency. DCNL This is intended to be called via a migration or other command.'
'Returns a list of the default providers from the settings as the DCNL appropriate constants.'
'Ensure that when PriceCurrencies are updated, all the apps that use them DCNL are re-indexed into ES so that the region information will be correct.'
'When the contribution table is updated with the data from PayPal, DCNL update the addon purchase table. Will figure out if we need to add to or DCNL delete from the AddonPurchase table.'
'Sends an email to the purchaser of the app.'
'Return JSON dict of {status: complete|incomplete}. DCNL The status of the payment is only complete when it exists by uuid, DCNL was purchased by the logged in user, and has been marked paid by the DCNL JWT postback. After that the UI is free to call app/purchase/record DCNL to generate a receipt.'
'Verify signature and set contribution to paid.'
'Verify signature from and create a refund contribution tied DCNL to the original transaction.'
'Check that the webapp can become premium.'
'Check if it can be purchased, returns False if not premium. DCNL Must be called after the app_view decorator.'
'If the addon is premium, require a purchase. DCNL Must be called after app_view decorator.'
'Handles empty and invalid values for sort and sort order. DCNL \'created\' by ascending is the default ordering.'
'Handles empty and invalid values for sort and sort order. DCNL \'created\' by ascending is the default ordering.'
'Generate table header sort links. DCNL pretty_name -- name displayed on table header DCNL sort_field -- name of the sort_type GET parameter for the column DCNL get_params -- additional get_params to include in the sort_link DCNL sort -- the current sort type DCNL order -- the current sort order'
'Wrapper function for ``breadcrumbs``. Prepends \'Editor Tools\' DCNL breadcrumbs. DCNL **queue** DCNL Explicit queue type to set. DCNL **items** DCNL list of [(url, label)] to be inserted after Add-on.'
'Returns tuple of tab navigation for the queue pages. DCNL Each tuple contains three elements: (url, tab_code, tab_text)'
'Returns tuple of tab navigation for the log pages. DCNL Each tuple contains three elements: (named url, tab_code, tab_text)'
'Get table header sort links. DCNL pretty_name -- name displayed on table header DCNL sort_field -- name of get parameter, referenced to in views'
'Returns the rolling average from the past 30 days of the time taken for a DCNL pending app to become public.'
'Returns a datetime given an Elasticsearch date/datetime field.'
'Requires the user to be logged in as a reviewer or admin, or allows DCNL someone with rule \'ReviewerTools:View\' for GET requests. DCNL Reviewer is someone who is in one of the groups with the following DCNL permissions: DCNL Apps:Review DCNL moderator=True extends this to users in groups who have the permssion: DCNL Apps:ModerateReview'
'Redirect to apps home page if app reviewer.'
'Returns unreviewed apps progress. DCNL Return the number of apps still unreviewed for a given period of time and DCNL the percentage.'
'Queue for reviewing app reviews.'
'Queue for reviewing abuse reports for apps.'
'Queue for reviewing abuse reports for websites.'
'Queue a translation that needs to be saved for a particular object. To DCNL generate the key, call make_key.'
'Removes all translations in the queue.'
'Returns a key for this object.'
'For a given key, save all the translations. The key is used to ensure that DCNL we only save the translations for the given object (and not all of them). DCNL Once saved, they will be deleted.'
'Return as many characters as possible without going over the limit. DCNL Return the truncated text and the characters left before the limit, if any.'
'Truncate the text of an html5lib tree.'
'Find the length of the text content, excluding markup.'
'Return a slice of ``html`` <= length chars. DCNL killwords and end are currently ignored. DCNL ONLY USE FOR KNOWN-SAFE HTML.'
'For forms, compares initial data against cleaned_data for TransFields. DCNL Returns True if data is the same. Returns False if data is different. DCNL Arguments: DCNL field -- name of the form field as-is. DCNL initial -- data in the form of {\'description_en-us\': \'x\', DCNL \'description_en-br\': \'y\'} DCNL data -- cleaned data in the form of {\'description\': {\'init\': \'\', DCNL \'en-us\': \'x\', DCNL \'en-br\': \'y\'}'
'Like django\'s to_language, but en_us or en-us comes out as en-US.'
'Pass in a language (u\'en-US\') get back a Locale object courtesy of DCNL Babel.  Use this to figure out currencies, bidi, names, etc.'
'Activate the settings lang, or lang provided, while in context.'
'Return a locale we support, or None.'
'This will clean up newlines so that nl2br can properly be called on the DCNL cleaned text.'
'Switch between Translation and Purified/Linkified Translations.'
'Connect signals so the translation gets saved during obj.save().'
'Use this signal on a model to iterate through all the translations added DCNL to the hold queue and save them all. Hook this up to the pre_save signal DCNL on the model.'
'Test HTML attributes for languages different than the site language'
'Test for nastiness-removal in the transfield\'s locale'
'locale_html must still work if field is None.'
'Truncating should not introduce xss issues.'
'Put all translations into a translations dict.'
'Order the QuerySet by the translated field, honoring the current and DCNL fallback locales.  Returns a new QuerySet. DCNL The model being sorted needs a get_fallback() classmethod that describes DCNL the fallback locale.  get_fallback() can return a string or a Field.'
'HTML attributes for languages different than the site language'
'Wrapper for jinja\'s truncate that checks if the object has a DCNL __truncate__ attribute first. DCNL Altering the jinja2 default of killwords=False because of DCNL https://bugzilla.mozilla.org/show_bug.cgi?id=624642, which could occur DCNL elsewhere.'
'Generates the locale menu for zamboni l10n.'
'Get obj\'s default locale.'
'Blocked tags are not allowed. DCNL Restricted tags can only be edited by Reviewers and Curators.'
'Fetch tags from `objs` in one query and then attach them to a property on DCNL each instance. DCNL Assumes every instance in `objs` uses the same model.'
'Admin, or someone with AdminTools:View, required. DCNL If reviewers=True        ReviewerAdminTools:View is allowed also.'
'Takes a bunch of (addon, user) pairs and sets the denormalized fields for DCNL all reviews matching that pair.'
'Does email for yesterday\'s ratings (right after the day has passed). DCNL Sends an email containing all reviews for that day for certain app.'
'Return whether or not the request.user can delete reviews. DCNL People who can delete reviews: DCNL * The original review author. DCNL * Reviewers, but only if they aren\'t listed as an author of the add-on. DCNL * Users in a group with "Users:Edit" privileges. DCNL * Users in a group with "Apps:ModerateReview" privileges.'
'Returns the name of the current carrier (or None) for the DCNL request lifecycle. DCNL Example: telefonica'
'Returns the carrier ID for the request lifecycle.'
'Sets the name of the carrier for the current request lifecycle.'
'Returns a region class definition given a slug, id, or class definition.'
'Remove accents from input.'
'Get the region for the current request lifecycle.'
'Set the region for the current request lifecycle.'
'Returns popularity value for the given obj to use in Elasticsearch. DCNL If no region, uses global value. DCNL If region and region is not mature, uses global value. DCNL Otherwise uses regional popularity value.'
'Returns trending value for the given obj to use in Elasticsearch. DCNL If no region, uses global value. DCNL If region and region is not mature, uses global value. DCNL Otherwise uses regional popularity value.'
'Returns the boost used in Elasticsearch for this app. DCNL The boost is based on a few factors, the most important is number of DCNL installs. We use log10 so the boost doesn\'t completely overshadow any DCNL other boosting we do at query time.'
'Returns a datetime given an Elasticsearch date/datetime field.'
'Given a list of IDs and an indexer, index into ES. DCNL If an reindexation is currently occurring, index on both the old and new.'
'Return a dict of Monolith based statistics queries. DCNL The dict is of the form:: DCNL {\'<metric_name>\': [{\'count\': <callable>, \'dimensions\': <dimensions>}]} DCNL Where `dimensions` is an optional dict of dimensions we expect to filter on DCNL via Monolith. DCNL If a date is specified and applies to the job it will be used.  Otherwise DCNL the date will default to today().'
'Update monolith statistics.'
'Migrate deprecated background color (hex) to color (name).'
'Generate random string.'
'Downloads a website icon from the location passed to the task. DCNL Returns False if icon was not able to be retrieved'
'Downloads a promo image from the location passed to the task. DCNL Returns False if promo image was not able to be retrieved'
'Generate random string for websites.'
'Regions that have ratings bodies.'
'Regions without ratings bodies and fallback to the GENERIC rating body.'
'Return a map of region slugs to ratings body labels for use in DCNL serializers and to send to Fireplace. DCNL e.g. {\'us\': \'esrb\', \'mx\': \'esrb\', \'es\': \'pegi\', \'br\': \'classind\'}.'
'Get the region list and sort by name. DCNL Requires a function due to localisation.'
'Get the region choices and sort by name. DCNL Requires a function due to localisation.'
'Maps ActivityLog action ids to Commbadge note types.'
'List of all ratings with waffled bodies.'
'Create a list of tuples (choices) after we know the locale since this DCNL attempts to concatenate two lazy translations in constants file.'
'Converts ratings body\'s or rating\'s iarc_name to a slug-like label DCNL (e.g. "USK" to "usk").'
'Returns a rating with translated fields attached and with fields that are DCNL easily created dynamically.'
'Returns a rating body with translated fields attached.'
'Prepends root icon path to path.'
'Take an extension pk and extract 128x128 icon from its zip file, build DCNL resized PNG copies of it at the dimensions we use, optimize those and store DCNL them in our public storage. DCNL When done, `icon_hash` property should be set on the extension.'
'Reset the locale field for all translations on existing Extensions. This DCNL is done to fix bug 1215094: some translations were created with the wrong DCNL language - the one from the request, instead of the one from the DCNL default_language field.'
'Update extension status as well as fields for which the manifest is the DCNL source of truth when an ExtensionVersion is made public or was public and DCNL is deleted.'
'Download the signed archive for a given public extension/version.'
'Download an archive for a given extension/version, signed on-the-fly DCNL with reviewers certificate. DCNL Only reviewers can access this.'
'Download the unsigned archive for a given extension/version. DCNL Only reviewers and developers can do this.'
'Delete a tuple from a list of tuples based on its first item.'
'Passed a string, returns a two-tuple indicating the language of that DCNL string, and the confidence on a 0-1.0 scale. DCNL If the confidence is below 0.7, or below 0.9 in a string of 3 words or DCNL less, will return None.'
'Passed a string, will return a dict mapping \'language\': string, suitable to DCNL be assigned to the value of a TranslatedField. If the language can not be DCNL determined with confidence, will assume English.'
'Wraps the function with a decorator that bounces to the right step.'
'Decorator that checks if the user has read the dev agreement, redirecting DCNL if not.'
'Determine which step to redirect user to.'
'This is a fake "Terms" view that we overlay the login. DCNL We link here from the Developer Hub landing page.'
'Generate the file names in a stored directory tree by walking the tree DCNL top-down. DCNL For each directory in the tree rooted at the directory top (including top DCNL itself), it yields a 3-tuple (dirpath, dirnames, filenames). DCNL This is intended for use with an implementation of the Django storage API. DCNL You can specify something other than the private storage instance with DCNL the storage keyword argument.'
'Copy a path (src_path) from a storage (src_storage) to a path (dst_path) DCNL on a different storage (dst_storage). DCNL Defaults to copying from and to private storage.'
'Move a path (src_path) from a storage (src_storage) to a path (dst_path) DCNL on a different storage (dst_storage), by copying and then deleting the DCNL source. DCNL Defaults to moving from and to private storage.'
'e.g. mkt.log(mkt.LOG.CREATE_ADDON, []), DCNL mkt.log(mkt.LOG.ADD_FILE_TO_VERSION, file, version)'
'Sets modified on one object at a time.'
'A wrapper around django.core.mail.EmailMessage. DCNL Adds blocked emails checking and error logging.'
'Sends mail using a Jinja template with autoescaping turned off. DCNL Jinja is especially useful for sending email since it has whitespace DCNL control.'
'Sends HTML mail using a Jinja template with autoescaping turned off.'
'Try to import ``helpers.py`` from each app in INSTALLED_APPS.'
'Date/Time converted to seconds since epoch'
'Given a sequence, we sort it and group it by a key. DCNL key should be a string (used with attrgetter) or a function.'
'Get a Paginator, abstracting some common paging actions. DCNL If you pass ``count``, that value will be used instead of calling DCNL ``.count()`` on the queryset.  This can be good if the queryset would DCNL produce an expensive count query.'
'Yield successive n-sized chunks from seq. DCNL >>> for group in chunked(range(8), 3): DCNL ...     print group DCNL [0, 1, 2] DCNL [3, 4, 5] DCNL [6, 7]'
'A Unicode-safe URLencoder.'
'Raise an error if the string has any punctuation characters. DCNL Regexes don\'t work here because they won\'t check alnums in the right DCNL locale.'
'Resizes and image from src, to dst. Returns width and height.'
'Returns a key with namespace value appended. If increment is True, the DCNL namespace will be incremented effectively invalidating the cache. DCNL Memcache doesn\'t have namespaces, but we can simulate them by storing a DCNL "%(key)s_namespace" value. Invalidating the namespace simply requires DCNL editing that key. Your application will no longer request the old keys, DCNL and they will eventually fall off the end of the LRU and be reclaimed.'
'Returns a string you can pass to path.path safely.'
'Simply wraps the cef_log function so we don\'t need to pass in the config DCNL dictionary every time.  See bug 707060.  env can be either a request DCNL object or just the request.META dictionary'
'Escape html in JSON value, including nested items.'
'Strip the BOM (byte order mark) from byte string `data`. DCNL Returns a new byte string.'
'Guess the encoding of a string and decode it.'
'Remove a local temp directory. DCNL This is just a wrapper around shutil.rmtree(). Use it to indicate you are DCNL certain that your executing code is operating on a local temp dir, not a DCNL directory managed by the Django Storage API.'
'Returns index-YYYYMMDDHHMMSS with the current time.'
'Returns a datetime. DCNL If `created` is "now", it returns `datetime.datetime.now()`. If `created` DCNL is set use that. Otherwise generate a random datetime in the year 2011.'
'Create an app. DCNL complete -- fills out app details + creates content ratings. DCNL rated -- creates content ratings'
'Returns either the icon URL for a given (`obj`, `size`). base_url_format` DCNL is a string that will be used for url formatting if we are not using a DCNL remote storage, see ADDON_ICON_URL for an example. DCNL If no icon type if set on the `obj`, then the url for the DCNL appropriate default icon for the given `size` will be returned. DCNL `obj` needs to implement `icon_type` and `icon_hash` properties for this DCNL function to work. DCNL Note: does not check size, so it can return 404 URLs if you specify an DCNL invalid size.'
'Returns either the promo img URL for a given (`obj`, `size`). DCNL base_url_format` is a string that will be used for url formatting, see DCNL WEBAPP_PROMO_IMG_URL for an example. DCNL If no promo img type if set on the `obj`, then the url for the DCNL appropriate default icon for the given `size` will be returned. DCNL `obj` needs to implement `promo_img_hash` properties for this function to DCNL work.'
'Build up a formset-happy POST. DCNL *args is a sequence of forms going into the formset. DCNL prefix and initial_count can be set in **kw.'
'Gather initial data from the form into a dict.'
'Useful for comparing an `expected` list of links against PyQuery DCNL `elements`. Expected format of links is a list of tuples, like so: DCNL (\'Home\', \'/\'), DCNL (\'Extensions\', reverse(\'browse.extensions\')), DCNL If you\'d like to check if a particular item in the list is selected, DCNL pass as `selected` the title of the link. DCNL Links are verified by default.'
'Assert that the validation (JSON) does not contain a traceback. DCNL Note that this does not test whether the addon passed DCNL validation or not.'
'Returns a datetime. DCNL If `created` is "now", it returns `datetime.datetime.now()`. If `created` DCNL is set use that. Otherwise generate a random datetime in the year 2011.'
'Creates a request factory, logged in with the user.'
'If not provided, email will be \'factoryuser<number>@mozilla.com\'. DCNL If email has no \'@\' it will be corrected to \'email@mozilla.com\''
'We load gettext catalogs in this order: DCNL django/locale/django.po DCNL locale/django.po DCNL If Django doesn\'t have a locale, it returns the en-us catalog as a DCNL fallback.  But then we take that catalog and merge in our messages.po. DCNL That\'s no good because we just mixed some other locale into en-us. DCNL This test will be invalid once Django gets an mn locale.'
'Given a specific set of primary keys, assure that we return addons DCNL in that order.'
'We want None to show up as \'\'.  We do this in JINJA_CONFIG.'
'Turns a Python object into a response.'
'Normal responses get passed through.'
'json_view.error returns 400 responses.'
'Within this context, all queries go to the master.'
'Given a query set and a list of primary keys, return a set of objects from DCNL the query set in that exact order.'
'Store global Marketplace-wide info. used in the header.'
'Wrapper function for ``breadcrumbs``. DCNL **items** DCNL list of [(url, label)] to be inserted after Add-on. DCNL **product** DCNL Adds the App/Add-on name to the end of the trail.  If items are DCNL specified then the App/Add-on will be linked. DCNL **add_default** DCNL Prepends trail back to home when True.  Default is True.'
'Gets the path to a localizable document in the current language with DCNL fallback to en-US.'
'Takes a URL and prepends the SITE_URL'
'Helper for Django\'s ``reverse`` in templates.'
'Get a MEDIA_URL link with a cache buster querystring.'
'Get a STATIC_URL link with a cache buster querystring.'
'This overrides jingo.helpers.f to convert input to unicode if needed. DCNL This is needed because of DCNL https://github.com/jbalogh/jingo/pull/54#issuecomment-36728948'
'Strips control characters from a string.'
'Date/Time format according to ISO 8601'
'Like Django\'s login_required, but with to= instead of next=. DCNL If redirect=False then we return 401 instead of redirecting to the DCNL login page.  That\'s nice for ajax views.'
'Pairs of (app, action). If any permission passes, call the function. DCNL Otherwise raise 403.'
'Return a response as JSON. If you are just wrapping a view, DCNL then use the json_view decorator.'
'Will update the modified timestamp on the provided objects when the wrapped DCNL function exits sucessfully (returns a truthy value). If the function DCNL returns a dict, it will also use that dict as additional keyword arguments DCNL to update on the provided objects. DCNL Looks up objects defined in the set_modified_on kwarg.'
'Allow other sites to access this resource, see DCNL https://developer.mozilla.org/en/HTTP_access_control.'
'Sets the user to be the task user, then unsets it.'
'Serve mini manifest ("minifest") for Yulelog\'s packaged `.zip`.'
'Serve mini manifest ("minifest") for Yogafire\'s packaged `.zip`.'
'Generate a `robots.txt`.'
'Accept CSP reports and log them.'
'Turn the QUERY_STRING into a unicode- and ascii-safe string. DCNL We need unicode so it can be combined with a reversed URL, but it has to be DCNL ascii to go in a Location header.  iri_to_uri seems like a good compromise.'
'Get transaction details from Solitude API.'
'Shows the app activity age for single app.'
'Shows the purchase page for another user.'
'Shows the user activity page for another user.'
'Get a list of dicts describing the payment portals for this app or user. DCNL Either app or user is required.'
'Update supported_locales for an individual app. Set latest=True to use the DCNL latest current version instead of the most recent public version.'
'Inherit nomination date for new packaged app versions.'
'On delete of the version object call the file delete and signals.'
'Parse emails and save notes.'
'Creates a note on an obj version\'s thread. DCNL Creates a thread if a thread doesn\'t already exist. DCNL CC\'s app\'s Mozilla contacts to auto-join thread. DCNL obj -- app or extension. DCNL version -- obj version. DCNL author -- UserProfile for the note\'s author. DCNL body -- string/text for note comment. DCNL note_type -- integer for note_type (mkt constant), defaults to 0/NO_ACTION DCNL (e.g. comm.APPROVAL, comm.REJECTION, comm.NO_ACTION). DCNL perms -- object of groups to grant permission to, will set flags on Thread. DCNL (e.g. {\'developer\': False, \'staff\': True}). DCNL attachments -- formset of attachment files'
'Stuff to do after creating note, also used in comm api\'s post_save.'
'Create attachments from CommAttachmentFormSet onto note.'
'Saves an attachment and returns the filename.'
'Check ACLs.'
'Cross-reference ACLs and Note/Thread permissions.'
'It\'s named `app` for historical reasons, but it `obj` can be either a DCNL Webapp or Extension. DCNL Check if user has any app-level ACLs. DCNL (Mozilla contact, admin, review, senior reviewer, developer).'
'Check if the user has read/write permissions on the given thread. DCNL Developers of the add-on used in the thread, users in the CC list, DCNL and users who post to the thread are allowed to access the object. DCNL Moreover, other object permissions are also checked against the ACLs DCNL of the user.'
'Check if the user has read/write permissions on the given note. DCNL Developers of the add-on used in the note, users in the CC list, DCNL and users who post to the thread are allowed to access the object. DCNL Moreover, other object permissions are also checked against the ACLs DCNL of the user.'
'Email utility used globally by the Communication Dashboard to send emails. DCNL Given a note (its actions and permissions), recipients are determined and DCNL emails are sent to appropriate people.'
'Determine email recipients mainly based on CommunicationThreadCC. DCNL Returns user_id/user_email tuples.'
'[(user_id, user_email)] -> [(user_email, token)].'
'Given a list of tuple of user_id/user_email, email bunch of people. DCNL note -- commbadge note, the note type determines which email to use. DCNL template -- override which template we use.'
'Get context data for comm emails, specifically for review action emails.'
'Returns the "mini" manifest for a langpack.'
'Returns a users uuid suitable for use in the receipt, by looking up DCNL the purchase table. Otherwise it just returns \'none\'. DCNL :params app: the app record. DCNL :params user: the UserProfile record.'
'Returns a signed receipt. If the seperate signing server is present then DCNL it will use that. Otherwise just uses JWT. DCNL :params receipt: the receipt to be signed.'
'Creates receipt data for use in payments. DCNL :params app: the app record. DCNL :params user: the UserProfile record. DCNL :params uuid: a uuid placed in the user field for this purchase. DCNL :params flavour: None, developer, inapp, or reviewer - the flavour DCNL of receipt. DCNL :param: contrib: the Contribution object for the purchase.'
'Creates a receipt for an in-app purchase. DCNL :params contrib: the Contribution object for the purchase.'
'Reissues and existing receipt by updating the timestamps and resigning DCNL the receipt. This requires a well formatted receipt, but does not verify DCNL the receipt contents. DCNL :params receipt: an existing receipt'
'Return a key for using with encode.'
'Reissues an existing receipt, provided from the client. Will only do DCNL so if the receipt is a full receipt and expired.'
'This will match rules found in Group.'
'Determines if the request user has permission to do a certain action DCNL \'Admin:%\' is true if the user has any of: DCNL (\'Admin:*\', \'Admin:%s\'%whatever, \'*:*\',) as rules.'
'Similar to action_allowed, but takes user instead of request.'
'A convenience function.  Check if request.user has permissions DCNL for the object.'
'Check request.user\'s permissions for the addon. DCNL If user is an admin they can do anything. DCNL If the app is disabled only admins have permission. DCNL If they\'re an app owner they can do anything. DCNL dev=True checks that the user has an owner or developer role. DCNL viewer=True checks that the user has an owner, developer, or viewer role. DCNL support=True checks that the user has a support role.'
'Developer Hub landing page.'
'Landing page for support.'
'Landing page for partners.'
'Landing page for installation.'
'Publish - Marketplace badges.'
'Returns the "mini" manifest for packaged apps. DCNL If not a packaged app, returns a 404.'
'A hack way to find the local IP without using any Python libraries.'
'This sets up everything needed before indexing: DCNL * Flags the database. DCNL * Creates the new index.'
'Perform post-indexing tasks: DCNL * Optimize (which also does a refresh and a flush by default). DCNL * Update settings to reset number of replicas. DCNL * Point the alias to this new index. DCNL * Unflag the database. DCNL * Remove the old index. DCNL * Output the current alias configuration.'
'Index the objects. DCNL - index: name of the index DCNL Note: `ignore_result=False` is required for the chord to work and trigger DCNL the callback.'
'Chunk the items to index.'
'Validate that the modules that have been set up correctly.'
'Validate that if not in DEBUG mode, key settings have been changed.'
'Return the relevant URL from settings. Rather than rely on DCNL a complicated layer of settings to do their work, this just does DCNL it at runtime. This allows MEDIA_URL and STATIC_URL to be DCNL changed in a local settings file, without having to override all the DCNL URLs. DCNL If the URL starts with https:// or http://, then no changes are made.'
'After settings, including DEBUG has loaded, see if we need to update CSP.'
'You have to explicitly call this to configure logging.'
'Records the given action by sending it to the metrics servers. DCNL Currently this is storing the data internally in the monolith temporary DCNL table. DCNL :param action: the action related to this request. DCNL :param request: the request that triggered this call. DCNL :param data: some optional additional data about this call.'
'Try and resize a video and cope if it fails.'
'An error occurred in processing the video, deal with that approp.'
'Given a preview object and a file somewhere: encode into the full DCNL preview size and generate a thumbnail.'
'Find a suitable lib.'
'Return a true random ascii string containing byte_length of randomness. DCNL The resulting key is suitable for cryptogrpahy. DCNL The key will be hex encoded which means it will be twice as long DCNL as byte_length, i.e. 40 random bytes yields an 80 byte string. DCNL byte_length must be at least 32.'
'Send the receipt to the signing service. DCNL This could possibly be made async via celery.'
'Decode and verify that the receipt is sound from a crypto point of view. DCNL Will raise errors if the receipt is not valid, returns receipt contents DCNL if it is valid.'
'Crack open the receipt, without checking that the crypto is valid. DCNL Returns a list of all the elements of a receipt, which by default is DCNL cert, receipt.'
'This is a mock for using in tests, where we really don\'t want to be DCNL actually signing the apps. This just copies the file over and returns DCNL the path. It doesn\'t have much error checking.'
'Sign a packaged app. DCNL If `local` is True, we never copy the signed package to remote storage.'
'Generate a manifest and signature and send signature to signing server to DCNL be signed.'
'Returns the proper API endpoint depending whether we are signing for DCNL reviewer or for public consumption.'
'Return True if any of the files have changed.'
'Run ``command`` if any file in ``files`` changes.'
'You have to call this to explicity configure logging.'
'Cracks the receipt using the private key. This will probably change DCNL to using the cert at some point, especially when we get the HSM.'
'/en-US/dashboards/macros returns the active macros list.'
'/en-US/dashboards/macros links to the English search results.'
'/en-US/dashboards/macros links to complete search results.'
'Manual search form can search all English pages.'
'Manual search form can search all pages.'
'Function for producing a config dict for the redirect test. DCNL You can use simple bash style brace expansion in the `url` and `location` DCNL values. If you need the `location` to change with the `url` changes you must DCNL use the same number of expansions or the `location` will be treated as non-expandable. DCNL If you use brace expansion this function will return a list of dicts instead of a dict. DCNL You must use the `flatten` function provided to prepare your test fixture if you do this. DCNL If you combine brace expansion with a compiled regular expression pattern you must DCNL escape any backslashes as this is the escape character for brace expansion. DCNL example: DCNL url_test(\'/about/drivers{/,.html}\', \'https://wiki.mozilla.org/Firefox/Drivers\'), DCNL url_test(\'/projects/index.{de,fr,hr,sq}.html\', \'/{de,fr,hr,sq}/firefox/products/\'), DCNL url_test(\'/firefox/notes/\', re.compile(r\'\/firefox\/[\d\.]+\/releasenotes\/\'), DCNL url_test(\'/firefox/android/{,beta/}notes/\', re.compile(r\'\/firefox\/android\/[\d\.]+{,beta}\/releasenotes\/\' DCNL :param url: The URL in question (absolute or relative). DCNL :param location: If a redirect, either the expected value or a compiled regular expression to match the "Location" header. DCNL :param status_code: Expected status code from the request. DCNL :param req_headers: Extra headers to send with the request. DCNL :param req_kwargs: Extra arguments to pass to requests.get() DCNL :param resp_headers: Dict of headers expected in the response. DCNL :param query: Dict of expected query params in `location` URL. DCNL :param follow_redirects: Boolean indicating whether redirects should be followed. DCNL :param final_status_code: Expected status code after following any redirects. DCNL :return: dict or list of dicts'
'Define a test of a URL\'s response. DCNL :param url: The URL in question (absolute or relative). DCNL :param location: If a redirect, either the expected value or a compiled regular expression to match the "Location" header. DCNL :param status_code: Expected status code from the request. DCNL :param req_headers: Extra headers to send with the request. DCNL :param req_kwargs: Extra arguments to pass to requests.get() DCNL :param resp_headers: Dict of headers expected in the response. DCNL :param base_url: Base URL for the site to test. DCNL :param query: Dict of expected query params in `location` URL. DCNL :param follow_redirects: Boolean indicating whether redirects should be followed. DCNL :param final_status_code: Expected status code after following any redirects.'
'Take a list of dicts which may itself contain some lists of dicts, and DCNL return a generator that will return just the dicts in sequence. DCNL Example: DCNL list(flatten([{\'dude\': \'jeff\'}, [{\'walter\': \'walter\'}, {\'donny\': \'dead\'}]])) DCNL > [{\'dude\': \'jeff\'}, {\'walter\': \'walter\'}, {\'donny\': \'dead\'}]'
'Returns whether the `user` is allowed to upload attachments. DCNL This is determined by a negative permission, `disallow_add_attachment` DCNL When the user has this permission, upload is disallowed unless it\'s DCNL a superuser or staff.'
'Given a timezone naive or aware datetime return the HTTP date DCNL formatted string to be used in HTTP response headers.'
'Generate a path to store a file attachment.'
'Create a fake file for testing purposes.'
'Serve up an attachment\'s file.'
'Redirect an old MindTouch file URL to a new kuma file URL.'
'Create a new Attachment object and populate its initial DCNL revision or show a separate form view that allows to fix form submission DCNL errors. DCNL Redirects back to the document\'s editing URL on success.'
'Queue deleting expired session items without breaking poor MySQL'
'Call `f` which has first argument `locale`. If `f` raises an DCNL exception indicative of a bad localization of a string, try again in DCNL `settings.WIKI_DEFAULT_LANGUAGE`. DCNL NB: This means `f` will be called up to two times!'
'Renders a template in the currently set locale. DCNL Falls back to WIKI_DEFAULT_LANGUAGE in case of error.'
'Return iterable of EmailMessages with user and watch values substituted. DCNL A convenience function for generating emails by repeatedly DCNL rendering a Django template with the given ``context_vars`` plus a DCNL ``user`` and ``watches`` key for each pair in ``users_and_watches`` DCNL .. Note:: DCNL This is a locale-aware re-write of the same function in django-tidings. DCNL It\'s kind of goofy--I ain\'t gonna lie. DCNL :arg subject: lazy gettext subject string DCNL :arg text_template: path to text template file DCNL :arg html_template: path to html template file DCNL :arg context_vars: a map which becomes the Context passed in to the DCNL template and the subject string DCNL :arg from_email: the from email address DCNL :arg default_local: the local to default to if not user.locale DCNL :arg extra_kwargs: additional kwargs to pass into EmailMessage constructor DCNL :returns: generator of EmailMessage objects'
'This function is for use on the base Field class.'
'This function is for use on the CharField class.'
'Get a Paginator, abstracting some common paging actions.'
'Convert a string to int, with fallback for invalid strings or types.'
'Generate a new filename for a file upload field; delete the previously DCNL uploaded file.'
'Decorator that only allows one instance of the same command to run DCNL at a time.'
'A tool like Django\'s get_object_or_404 but returns None in case DCNL of a DoesNotExist exception.'
'Parses tag input, with multiple word input being activated and DCNL delineated by commas and double quotes. Quotes take precedence, so DCNL they may contain commas. DCNL Returns a sorted list of unique tag names, unless sorted=False. DCNL Ported from Jonathan Buchanan\'s `django-tagging DCNL <http://django-tagging.googlecode.com/>`_'
'Return chunks of n length of iterable. DCNL If ``len(iterable) % n != 0``, then the last chunk will have DCNL length less than n. DCNL Example: DCNL >>> chunked([1, 2, 3, 4, 5], 2) DCNL [(1, 2), (3, 4), (5,)] DCNL :arg iterable: the iterable DCNL :arg n: the chunk length DCNL :returns: generator of chunks from the iterable'
'Extract a set of unique identifiers from the request. DCNL This set will be made up of one of the following combinations, depending DCNL on what\'s available: DCNL * user, None, None, unique_MD5_hash DCNL * None, ip, user_agent, unique_MD5_hash'
'Add a fragment and/or query parameters to a URL. DCNL New query params will be appended to exising parameters, except duplicate DCNL names, which will be replaced.'
'Returns date/time formatted using babel\'s locale settings. Uses the DCNL timezone from settings.py'
'Return locale from the request, falling back to a default if invalid.'
'Return the Babel locale code, given a normal one.'
'Render list of pages.'
'Helper for Django\'s ``reverse`` in templates.'
'Turn HTML entities in a string into unicode.'
'The current year.'
'Add the utm_* tracking parameters to a URL.'
'Returns date/time formatted using babel\'s locale settings. Uses the DCNL timezone from settings.py'
'Convert a datetime to the UTC timezone. DCNL Assume that naive datetimes (without timezone info) are in system time.'
'Avoid duplicating page param in pagination.'
'Rough reimplementation of nose.tools.eq_ DCNL Note: This should be removed as soon as we no longer use it.'
'Rough reimplementation of nose.tools.ok_ DCNL Note: This should be removed as soon as we no longer use it.'
'Compares received\'s attributes with expected\'s kwargs.'
'Return a django user or raise FixtureMissingError'
'Adds settings to the context.'
'Given an Accept-Language header, return the best-matching language.'
'Set the Prefixer for the current thread.'
'Set the Prefixer for the current thread.'
'Get the Prefixer for the current thread, or None.'
'Wraps Django\'s reverse to prepend the correct locale. DCNL force_locale -- Ordinarily, if get_url_prefixer() returns None, we return DCNL an unlocalized URL, which will be localized via redirect when visited. DCNL Set force_locale to True to force the insertion of a default locale DCNL when there is no set prefixer. If you are writing a test and simply DCNL wish to avoid LocaleURLMiddleware\'s initial 301 when passing in an DCNL unprefixed URL, it is probably easier to substitute LocalizingClient DCNL for any uses of django.test.client.Client and forgo this kwarg. DCNL locale -- By default, reverse prepends the current locale (if set) or DCNL the default locale if force_locale == True. To override this behavior DCNL and have it prepend a different locale, pass in the locale parameter DCNL with the desired locale. When passing a locale, the force_locale is DCNL not used and is implicitly True.'
'Given a ranked language list, return the best-matching locale.'
'Split the requested path into (locale, path). DCNL locale will be empty if it isn\'t found.'
'Parse a list of tags out into a dict of lists by namespace'
'Decide whether a tag namespace is editable by a user'
'Given a new set of tags and a user, build a list of allowed new tags DCNL with changes accepted only for namespaces where editing is allowed for DCNL the user. For disallowed namespaces, this object\'s current tag set will DCNL be imposed. DCNL No changes are made; the new tag list is just returned.'
'Helper function that returns a decorator. DCNL * redirect func ----- If truthy, a redirect will occur DCNL * deny_func --------- If truthy, HttpResponseForbidden is returned. DCNL * redirect_url_func - Evaluated at view time, returns the redirect URL DCNL i.e. where to go if redirect_func is truthy. DCNL * redirect_field ---- What field to set in the url, defaults to Django\'s. DCNL Set this to None to exclude it from the URL.'
'Requires that the user *not* be logged in.'
'Requires that the user is logged in.'
'A replacement for django.contrib.auth.decorators.permission_required DCNL that doesn\'t ask authenticated users to log in.'
'Decorator for Celery task functions. If we\'re in MAINTENANCE_MODE, skip DCNL the call to the decorated function. Otherwise, call the decorated function DCNL as usual.'
'Decorator for view functions. If we\'re in MAINTENANCE_MODE, redirect DCNL to the maintenance-mode view on requests using the given HTTP "methods" DCNL (or all HTTP methods if "methods" is None). Otherwise, call the DCNL wrapped view function as usual.'
'Render error pages with jinja2.'
'Returns the string of a number formatted for the current language. DCNL Uses django\'s translation.get_language() to find the current language from DCNL the request. DCNL Falls back to the default language if babel does not support the current.'
'Turn the QUERY_STRING into a unicode- and ascii-safe string. DCNL We need unicode so it can be combined with a reversed URL, but it has to be DCNL ascii to go in a Location header.  iri_to_uri seems like a good compromise.'
'Return whether the given ``id`` is a valid Javascript identifier.'
'Return whether the given ``value`` can be used as a JSON-P callback.'
'Returns a link to ban a user'
'Returns a link to admin a user'
'Email address -> publicly displayable email.'
'Turns all unicode into html entities, e.g. &#69; -> E.'
'Turn a list of users into a list of links to their profiles.'
'{{ provider_login_url("github", next="/some/url") }}'
'{{ providers_media_js() }}'
'{% set accounts = social_accounts(user) %} DCNL Then: DCNL {{ accounts.twitter }} -- a list of connected Twitter accounts DCNL {{ accounts.twitter.0 }} -- the first Twitter account DCNL {% if accounts %} -- if there is at least one social account'
'Ban a user.'
'A page to ban a user for the reason of "Spam" and mark the user\'s revisions DCNL and page creations as spam, reverting as many of them as possible.'
'A summary page of actions taken when banning a user and reverting revisions DCNL This method takes all the revisions from the last three days, DCNL sends back the list of revisions that were successfully reverted/deleted DCNL and submitted to Akismet, and also a list of DCNL revisions where no action was taken (revisions needing follow up).'
'Revert document to a specific revision.'
'Delete a Document.'
'The main user view that only collects a bunch of user DCNL specific data to populate the template context.'
'View and edit user profile'
'Send a recovery email to a user.'
'Login via an account recovery link. DCNL Modeled on django.contrib.auth.views.password_reset_confirm, but resets DCNL the password to an unusable password instead of prompting for a new DCNL password.'
'Simple task wrapper for the render() method of the Document model'
'Task to send email for render_document progress notification.'
'Simple task to render a chunk of documents instead of one per each'
'A task to acquire the render document lock'
'A task to release the render document lock'
'Simple task wrapper for rendering stale documents'
'Force-refresh cached JSON data after rendering.'
'Make an \'edited\' notification email for first-time editors'
'For the given locale build the appropriate sitemap file and DCNL returns the locale, the file names written and timestamp of the DCNL build.'
'A chord callback task that writes a sitemap index file for the DCNL given results of :func:`~kuma.wiki.tasks.build_locale_sitemap` task.'
'Build and save sitemap files for every MDN language and as a DCNL callback save the sitemap index file as well.'
'Index a list of documents into the provided index. DCNL :arg ids: Iterable of `Document` pks to index. DCNL :arg index_pk: The `Index` pk of the index to index into. DCNL :arg reraise: False if you want errors to be swallowed and True DCNL if you want errors to be thrown. DCNL .. Note:: DCNL This indexes all the documents in the chunk in one single bulk DCNL indexing call. Keep that in mind when you break your indexing DCNL task into chunks.'
'Delete a list of documents from the provided index. DCNL :arg ids: Iterable of `Document` pks to remove. DCNL :arg index_pk: The `Index` pk of the index to remove items from.'
'Run tidy over the given revision\'s content and save it to the DCNL tidy_content field if the content is not equal to the current value. DCNL :arg pk: Primary key of `Revision` whose content needs tidying.'
'Delete old DocumentSpamAttempt.data, which contains PII. DCNL Also set review to REVIEW_UNAVAILABLE.'
'Return a dict that fills in the blanks in notification templates.'
'Get extra headers for filtering notification emails.'
'Create a notification email for first-time editors.'
'Create a notification email for a spam attempt. DCNL Because the spam may be on document creation, the document might be null.'
'Gets sections in a document'
'Quick and dirty filter to remove <div class="noinclude"> blocks'
'Given a proposed doc path, try to see if there\'s a legacy MindTouch DCNL locale or even a modern Kuma domain in the path. If so, signal for a DCNL redirect to a more canonical path. In any case, produce a locale and DCNL slug derived from the given path.'
'Return (locale, path, slug) if URL is a Document, False otherwise. DCNL If URL doesn\'t even point to the document view, raise _NotDocumentView.'
'Given a sequence of document revision IDs, returns a dict matching DCNL those with the number of users Google Analytics thinks has visited DCNL each revision since start_date.'
'Given a sequence of Revision objects, returns a dict matching DCNL their pks with the number of users Google Analytics thinks has visited DCNL each revision since they were created.'
'Format comment for HTML display, with Bugzilla links and slug changes. DCNL Keyword Arguments: DCNL rev - The revision DCNL previous_revision - The previous revision (default None) DCNL load_previous - Try loading previous revision if None (default True)'
'Given the two revisions generate a diff between their tidied DCNL content in the unified diff format.'
'Creates an HTML diff of the passed in content_from and content_to.'
'Provided a selector, returns the relevant content from the document'
'Recursively escapes strings in an object. DCNL Traverses dict, list and tuples. These are the data structures supported DCNL by the JSON encoder.'
'Returns the JSON representation of the value.'
'Joins a base ``Site`` URL with a URL path. DCNL If no site provided it gets the current site from Site.'
'Create a URL pointing to Kuma. DCNL Look for a wiki page in the current locale, or default to given path'
'* The service isn\'t disabled with a timeout of 0 DCNL * The document isn\'t empty DCNL * The request has *not* asked for raw source DCNL (eg. ?raw) DCNL * The request has *not* asked for no macro evaluation DCNL (eg. ?nomacros) DCNL * The request *has* asked for macro evaluation DCNL (eg. ?raw&macros)'
'Perform a kumascript GET request for a document locale and slug.'
'Encode env_vars as kumascript headers, as base64 JSON-encoded values.'
'Attempt to decode any FireLogger-style error messages in the response DCNL from kumascript.'
'Build the cache keys used for Kumascript'
'Get active macros and their source paths. DCNL Return is a dict with the case-sensitive macro name as key, and the subpath DCNL on GitHub as the value.  The full URL of the GitHub source is: DCNL https://github.com/mdn/kumascript/tree/master/macros/{subpath}'
'Get the macros known to ElasticSearch with their page counts DCNL Return is a dictionary of lowercase macro names to their page counts. DCNL This includes things that look like macros, such as Django templates from DCNL the Django learning area, and anything wrapped in {{ }}. DCNL Keyword Arguments: DCNL locale - Filter by this locale (default no locale filter)'
'Get active macros, their source paths, and usage on site. DCNL Return is a dict with the case-sensitive macro name as key, and a dict as DCNL value with keys: DCNL * github_subpath - the subpath on GitHub DCNL * count - the number of pages the macro is used on DCNL * en_count - the number of English pages the macro is used on DCNL If there is no ElasticSearch server or it is misconfigured, then the DCNL counts will both be 0.'
'A test user.'
'A second test user.'
'A third test user.'
'An inactive test user.'
'A banned test user.'
'A newly-created top-level English document.'
'A revision that created an English document.'
'A revision that edits an English document.'
'Translate the root document into French.'
'A further edit to the translated document.'
'A top-level English document with mixed contributors (some are valid, DCNL some are banned, and some are inactive).'
'Mock ElasticSearch client. DCNL User should override client.search.return_value. DCNL Based on test fixture from elasticsearch_dsl'
'When KumaScript returns macros, the sources are populated.'
'When KumaScript can\'t return macros, the sources are empty.'
'When KumaScript raises an error, the sources are empty.'
'macro_page_count returns macro usage across all locales by default.'
'macro_page_count(\'en-US\') returns macro usage in the en-US locale.'
'When KumaScript returns an empty response, macro usage is empty.'
'When ElasticSearch is unreachable, counts are 0.'
'When follow-on ElasticSearch call raises, reraise exception.'
'Comparing two valid revisions of the same document works.'
'A localized revision can be compared to an English source revision.'
'Confirm that the based_on value set in the revision created by an edit DCNL or translate form is the current_revision of the document as of when the DCNL form was first loaded, even if other revisions have been approved in the DCNL meantime.'
'Check document page for zone-style-related features.'
'Check the three rows of the test translation. DCNL Row 1: The latest edit of the translation DCNL Row 2: The first translation into French DCNL Row 3: The English revision that the first translation was based on'
'$history of English doc works.'
'$history for translated documents includes an English revision. DCNL This is the revision the first translation was based on.'
'$history for trans docs excludes the English revision if no based_on DCNL This can happen for old translated docs, or ones manually associated with DCNL the parent.'
'$history of unknown page returns 404.'
'$history of half-created document returns 404.'
'Anonymous users are forbidden to request all revisions.'
'Users are allowed to request all revisions.'
'$history will paginate the revisions.'
'$history?limit=(more than revisions) works, removes pagination.'
'$history?limit=nonsense uses the default pagination.'
'Return an empty document with enough stuff filled out that it can be DCNL saved.'
'Return an empty revision with enough stuff filled out that it can be DCNL saved. DCNL Revision\'s is_approved=False unless you specify otherwise. DCNL Requires a users fixture if no creator is provided.'
'Return a revision that is the translation of a default-language one.'
'Normalize HTML5 input, discarding parts not significant for DCNL equivalence in tests'
'Get or create a group that can edit documents.'
'Get or create a user empowered with document editing.'
'Test wiki_url, without client languages.'
'Assert that the objects contained by `manager` are those in `list_`.'
'Test the nearest zone property of English and non-English documents.'
'Silly end-case test of the nearest-zone property of a non-English document DCNL without a parent.'
'Test is_zone_root.'
'Ensure CSS styles for a zone can be fetched.'
'Ensure that the expiry is not constant.'
'Test the nearest zone job.'
'Make sure we handle the case where we try to get the nearest DCNL zone for a document whose parent-topic has been deleted.'
'Tests basic operation, ordering, caching, and handling of banned and DCNL inactive contributors.'
'If not under a content experiment, use the original Document.'
'If under a content experiment, return original Document and params.'
'If the original is selected as the content experiment, return it.'
'If the variant is selected as the content experiment, return it.'
'If the variant is selected as the content experiment, return it.'
'If the Document for a variant doesn\'t exist, return the original.'
'Kumascript reports errors in HTTP headers. Kuma should display the errors DCNL with appropriate links for both the "wiki.preview" and "wiki.document" DCNL endpoints.'
'Comparing two valid revisions of the same document works.'
'A localized revision can be compared to an English source revision.'
'Comparing revisions without tidied content displays a wait message.'
'Comparing badly-formed revision parameters return 404, not error.'
'If a compare query parameter is missing, a 404 is returned.'
'If the revision is for the wrong document, a 404 is returned.'
'A mock Document that should update.'
'The mock_doc should update search index.'
'Excluded slugs should not update the search index.'
'Do not update the search index if some flags are set.'
'Test the notification context for a created English page.'
'Test the notification context for an edited English page.'
'Test the notification context for a created English page.'
'Test that EditDocumentEvent also notifies for the tree.'
'Test event email parameters for creation of an English page.'
'Test event email parameters for changing an English page.'
'A first edit email is formatted for a new English page.'
'A first edit email is formatted for an English change.'
'A first edit email is formatted for a first translation.'
'A spam attempt email is formatted for a new English page.'
'A spam attempt email is formatted for an English change.'
'A spam attempt email is formatted for a new translation.'
'A spam attempt email is formatted with partial information.'
'The filter drops iframe src that does not match the pattern.'
'Any contents inside an <iframe> should be removed.'
'Populate Document.uuid, without bumping last modified.'
'Clear Document.uuid.'
'For historic DocumentSpamAttempt, set to REVIEW_UNAVAILABLE.'
'Revert REVIEW_UNAVAILABLE back to NEEDS_REVIEW.'
'Select a locale to translate the document to.'
'Create a new translation of a wiki document. DCNL * document_slug is for the default locale DCNL * translation is to the request locale'
'Utility function to do basic slug splitting'
'Utility function to derive the last modified timestamp of a document. DCNL Mainly for the @condition decorator.'
'Return a dict with the document data pertinent for the form.'
'View a wiki document revision.'
'Create an HTML fragment preview of the posted wiki syntax.'
'Compare two wiki document revisions. DCNL The ids are passed as query string parameters (to and from).'
'Quickly mark a revision as no longer needing a particular type DCNL of review.'
'Revert document to a specific revision.'
'Delete a Document.'
'Restore a deleted Document.'
'Permanently purge a deleted Document.'
'Extract a code sample from a document and render it as a standalone DCNL HTML document'
'A view redirecting to the real file serving view of the attachments app. DCNL This exists so the writers can use relative paths to files in the DCNL code samples instead of hard coding he file serving URLs. DCNL For example on a code sample with the URL: DCNL https://mdn.mozillademos.org/fr/docs/Web/CSS/Tools/Outil_Selecteur_Couleurs_CSS$samples/ColorPIcker_Tool DCNL This would allow having files referred to in the CSS as:: DCNL url("files/6067/canvas-controls.png")'
'For URLs in special namespaces (like Talk:, User:, etc.), redirect DCNL if possible to the appropriate new URL in the appropriate DCNL locale. If the locale cannot be correctly determined, fall back to DCNL en-US.'
'Given a request to a Mindtouch-generated URL, generate a redirect DCNL to the correct corresponding kuma URL.'
'Return ckeditor config from database'
'Returns the closest title matches for front-end autosuggests'
'List wiki documents depending on the optionally given tag.'
'Returns listing of all tags'
'Lists wiki documents with revisions flagged for review'
'Lists wiki documents with localization tag'
'Lists wiki documents with (KumaScript) errors'
'Lists wiki documents without parent (no English source document)'
'Lists documents directly under /docs/'
'List all the revisions of a given document.'
'Create a new wiki page, which is a document and a revision.'
'Handle when a mid-air collision is detected upon submission'
'Create a new revision of a wiki document, or edit document metadata.'
'Get HTML and rendering errors for a Document. DCNL Return is a tuple: DCNL * The HTML DCNL * A list of KumaScript errors encountered during rendering DCNL * True if rendered content was requested but not available DCNL If rendering_params[\'use_rendered\'] is True, then KumaScript rendering is DCNL attempted. If False, pre-rendered content is returned, if any.'
'Get parent-title information for SEO purposes.'
'Apply needed filtering/annotating operations to a Document\'s HTML.'
'Perform some response-header manipulation that gets used in DCNL several places.'
'If we\'re falling back to a Document in the default locale, figure DCNL out why and whether we can redirect to a translation in the DCNL requested locale.'
'Attempt to fetch a Document at the given locale and slug, and DCNL return it, or return a fallback reason if we weren\'t able to.'
'Get Document and rendering parameters changed by the content experiment. DCNL If the page is under a content experiment and the selected variant is DCNL valid, the return is (the variant Document, the experiment params). DCNL If the page is under a content experiment but the variant is invalid or DCNL not selected, the return is (original Document, the experiment params). DCNL If the page is not under a content experiment, the return is DCNL (original Document, None).'
'Retrieves a document and returns its children in a JSON structure'
'Move a tree of pages'
'Return a document\'s table of contents as HTML.'
'Return some basic document info in a JSON blob.'
'This is deprecated, and only exists temporarily to serve old DCNL document pages that request zone CSS via this endpoint.'
'Toggle watching a document for edits.'
'Toggle watching a tree of documents for edits.'
'When a Document doesn\'t exist but the user can create it, return DCNL the creation URL to redirect to.'
'When a Document has been deleted return a 404. DCNL If the user can restore documents, then return a 404 but also include the DCNL template with the form to restore the document.'
'Display a raw Document.'
'View a wiki document.'
'Handle PUT requests as document write API'
'Creates SPAM Akismet record for revision. DCNL Return json object with Akismet Record data. DCNL TODO: Create Submitting as HAM record for revision'
'Decorator for generated content methods. DCNL If the backing model field is null, or kwarg force_fresh is True, call the DCNL decorated method to generate and return the content. DCNL Otherwise, just return the value in the backing model field.'
'Return a descriptor delegating to an attr of the original document. DCNL If `self` is a translation, the descriptor delegates to the attribute DCNL `parent_attr` from the original document. Otherwise, it delegates to the DCNL attribute `direct_attr` from `self`. DCNL Use this only on a reference to another object, like a ManyToMany or a DCNL ForeignKey. Using it on a normal field won\'t work well, as it\'ll preclude DCNL the use of that field in QuerySet field lookups. Also, ModelForms that are DCNL passed instance=this_obj won\'t see the inherited value.'
'Sadly copied from taggit to work around the issue of not being DCNL able to use the TaggedItemBase class that has tag field already DCNL defined.'
'Interstitial admin view for purging multiple Documents.'
'HTML link to related revisions for admin change list'
'HTML link to the current revision for the admin change list'
'HTML link to the topical parent document for admin change list'
'HTML link to the parent document for admin change list'
'HTML link to a list of child documents'
'HTML link to a list of sibling documents'
'Public link to the document'
'Combine several field functions into one block of lines'
'Combine the document hierarchy nav links'
'Combine the revision nav links'
'Combine the rendering times into one block'
'Format Akismet data as a definition list.'
'Decorator to prevent a page from being indexable by robots'
'Decorator to allow CORS for GET requests'
'Decorator to enable readonly mode'
'Decorator to process document_path into locale and slug, with DCNL auto-redirect if necessary. DCNL This function takes generic args and kwargs so it can presume as little DCNL as possible on the view method signature.'
'Reset the nearest-zone cache for this document and its descendants.'
'Reset the URL remap list cache for the given document, assuming it DCNL even has a zone.'
'Landing page news feed.'
'Home page.'
'Bug 646192: MDN affiliate buttons'
'Serve robots.txt that allows or forbids robots. DCNL TODO: After AWS move, try different strategy (WhiteNoise, template)'
'Return a url matcher suited for urlpatterns DCNL Changes the defaults for locale_prefix and prepend_locale in the DCNL redirect_urls library.'
'Return a locale url matcher suited for urlpatterns DCNL This is suited for matching URLs that may start with a locale, like: DCNL /en-US/docs/Foo/Bar DCNL If the locale is a valid locale, the pattern matches against the remaining DCNL path: DCNL locale=/en-US, path=/docs/Foo/Bar DCNL However, many prefix strings match, so watch out for unintended matches: DCNL /docs/Foo/Bar DCNL can be matched as: DCNL locale=/docs, path=Foo/Bar'
'Return an iterator providing the dates between `start` and `end`, inclusive.'
'Gather spam statistics for a range of dates. DCNL Keywords Arguments: DCNL periods - a sequence of (days, identifier, name) tuples DCNL end_date - The ending anchor date for the statistics'
'Gather data for recent spam events.'
'The normal macro page is a three-column table.'
'The macro page is a one-column table when counts are unavailable.'
'Dashboard for reviewing revisions'
'Returns partial username matches'
'Returns partial topic matches'
'Dashboard for spam moderators.'
'Returns table of active macros and their page counts.'
'Load LOCALES data from languages.json DCNL languages.json is from the product-details project: DCNL https://product-details.mozilla.org/1.0/languages.json'
'Define a CSS file generated from multiple SCSS files.'
'Define a CSS file that shares the name with the one input SCSS.'
'Prepare a new index for indexing documents into. DCNL :arg index_pk: The `Index` ID to create an elasticsearch index of. DCNL This also updates the settings to make indexing faster, like disabling DCNL refreshes and replicas.'
'Finalizes the elasticsearch index. DCNL :arg index_pk: The `Index` ID to operate on. DCNL This performs the following actions:: DCNL * Optimize (which also does a refresh and a flush by default) DCNL * Update settings to reset number of replicas and refresh interval DCNL * Sends an email that the indexing is complete'
'Returns search url from referer if it was an MDN search'
'Returns the values of all filter groups, intended to pull key/value pairs DCNL from requests. DCNL E.g. if \'topic\' is a `FilterGroup` slug and given the URL:: DCNL ?q=test&topic=css&topic=html DCNL this will return `[\'css\', \'html\']`. DCNL If the given URL contains \'none\', then no filters should be applied.'
'Decorator that logs an error on connection issues DCNL 9 out of 10 doctors say that connection errors are usually because DCNL ES_URLS is set wrong. This catches those errors and helps you out DCNL with fixing it.'
'Register a model and index for auto indexing.'
'Return empty array until we restore internal search system.'
'Render an OpenSearch Plugin.'
'A successful response from this endpoint simply proves DCNL that Django is up and running. It doesn\'t mean that its DCNL supporting services (like MySQL, memcached, Celery) can DCNL be successfully used from within this service.'
'A successful response from this endpoint goes a step further DCNL and means not only that Django is up and running, but also that DCNL the database can be successfully used from within this service. DCNL The other supporting services are not checked, but we may find DCNL that we want/need to add them later.'
'Generated secret should be saved as a hash and pass a check'
'Generate a random API key DCNL see: http://jetfar.com/simple-api-key-generation-in-python/'
'Enable a view to accept an auth key via HTTP Basic Auth. DCNL Key ID expected as username, secret as password. DCNL On successful auth, the request will be set with the authkey and the user DCNL owning the key'
'A simple User record with only the basic information.'
'A Document record with no revisions and no parent topic.'
'A Document record with two revisions and without a parent topic.'
'A translation of the root document.'
'If the Document already exists, short-circuit downloads.'
'Resources are fetched if force=True.'
'A child document requires the parent document.'
'If the parent document is available, it is not requested.'
'If the rendered document is standard, get next resources.'
'If metadata doesn\'t match URL, use locale and slug from URL.'
'If the metadata has an error, so does the document.'
'A zone URL requests the zone doc.'
'If the zoned document fails (isn\'t a zone), then the doc errors too.'
'The zoned doc is used to normalize the URL.'
'If a document is a redirect, request the target page.'
'If a document is a redirect to a normal page, create a redirect.'
'If a document is a redirect to a zone, request the zone root.'
'If a document is a redirect to an errored zone, doc is also errored.'
'A zoned document has more data passed to storage.save_document()'
'If a document is a redirect to zone subpage, request the zone root.'
'A zoned subpage has more data passed to storage.save_document()'
'A localized document will wait for metadata.'
'A localized document will request the English document.'
'An invalid English document path is an error.'
'A localized document will set the English document as parent.'
'A depth > 0 will require the $children resource.'
'If the $children resource is loaded, use it.'
'A root document with one tagged revision.'
'A bad revision path is detected at initialization.'
'On the first call, multiple items are requested from storage.'
'If prereqs are present then source is done.'
'If only the doc is present, then full gather is performed.'
'If stored doc does not agree with stored revision doc, then error.'
'On the first call, multiple items are requested from storage.'
'A revision will request a document on the second pass.'
'If the document slug is different from the revision, doc wins. DCNL This appears to be common around page moves.'
'Older revisions can be imported without some tags.'
'If the revision HTML can\'t be fetched, the source is errored.'
'If a based_on revision is specified, it is required.'
'If a based_on revision is specified and available, it is used.'
'A session is created once on request.'
'A successful request calls raise_for_status by default.'
'The call to raise_for_status can be omitted.'
'Requests are retried with back off after a Timeout.'
'Requests are retried after expected exceptions.'
'Request fail after too many Timeouts.'
'Setup a test Scraper that handles FakeSource sources.'
'The add_source method initializes a source.'
'Adding a existing source returns True if options were updated.'
'The scraper will loop through sources until complete.'
'The scraper will complete if a source is errored.'
'A scraper with no sources returns early.'
'The scraper will warn if there is a percent in a source. DCNL This indicates a JSON-encoded URL was not decoded.'
'The scraper will warn if a dependency block is detected. DCNL If no progress is made in a loop, it implies that a dependency is in DCNL error, and further loops will not make any further progress.'
'Local storage objects are None when unset, return the saved value.'
'New tags are created.'
'Existing tags are reused.'
'Existing tags with different capitalization are reused.'
'Tags are created and attached to the new document.'
'Duplicate tags are de-duped on document save. DCNL This may not be needed now that bug 1293749 is fixed.'
'An existing document gets new scraped tags.'
'An existing document that has been moved is moved locally.'
'An existing document can have a different ID than remote doc.'
'Can save ca/docs/Project:Quant_a, despite IntegrityError.'
'A document with a vanity URL creates the associated DocumentZone.'
'A document with a plain zone creates the associated DocumentZone.'
'A zone child document does not create a DocumentZone.'
'Creating the current revision updates the associated document.'
'Creating an older revision does not update the associated document.'
'A current revision with duplicate tags does not create dupes on the doc. DCNL Historical revisions will have these duplicate tags, even though DCNL bug 1293749 is fixed, because they are stored as strings.'
'Existing tags are reused when saving a current revision.'
'A revision may have no content but include review tags.'
'A banned user creates a self-banning UserBan instance.'
'A complex User record with social and other profile data.'
'Create mock production data requester for Source.gather testing. DCNL Keyword Arguments: DCNL requester_spec - Requester attributes (default request) DCNL response_spec - Response attributes (default content, history) DCNL content - Content of response (default "") DCNL json - Decoded JSON of response (default not JSON) DCNL status_code - Status code of response (default 200, None to error on check) DCNL history - (status_code, path) pairs for redirect history of request DCNL (default no redirects) DCNL final_path - Final path for request (default None)'
'Create mock database storage for Source.gather testing. DCNL Keyword Arguments: DCNL spec - List of expected Storage method calls (default []) DCNL Any spec that starts with "get_" is initialized to return None.'
'Omitted Source parameters are initialized to defaults.'
'Source parameters are initialized by name.'
'An invalid parameter name raises an exception.'
'An empty merge does not change the Source state.'
'A merge to smaller parameters keeps the current values and state.'
'A merge with the current values keeps the current state.'
'An updating merge updates the values and resets the state.'
'Multiple parameters can be updated in one merge call.'
'For the \'int_all\' parameter type, \'all\' is a valid and maximum value.'
'For the \'text\' parameter type, any non-empty change is an update.'
'current_options returns empty dict for default options.'
'current_options returns the non-default options as a dict.'
'Invalid parameter values raise a ValueError.'
'Source.decode_href() turns URL-encoded hrefs into unicode strings.'
'The Source.Error exception can be turned into a string.'
'A source that is done can still be gathered.'
'A source that is already in storage loads quickly.'
'A source can raise an error when loading from storage.'
'A source can request other sources as prerequisites.'
'A source may raise an error when loading prerequisites.'
'A source can fail when saving the data.'
'A source with all prereqs can request further sources.'
'Detect URL-encoded paths and fail at init.'
'Detect invalid paths and fail at init.'
'Zone root data can be gathered from metadata on the first pass.'
'Previously stored zone root data prevents scraping.'
'Passing a non-zone URL is detected when processing metadata.'
'If the metadata locale doesn\'t match the URL, it is an error. DCNL This appears to be common on zoned URLs with only one translation, DCNL and requires reseting the stored JSON data.'
'All metadata prereqs can be satisfied in the first call.'
'All metadata prereqs can be satisfied in the first call.'
'If the metadata 404s, the source is in error.'
'If translations are requested, they are extracted from metadata.'
'Child resources also get the translations request.'
'Child resources also get the revisions request.'
'A Document record with a DocumentZone with style and a redirect.'
'A Document record that is below the zone root.'
'Test a page without redirects.'
'Test a page with non-zone redirects. DCNL For example, a page might redirect from http:// to https:// without DCNL changing the path.'
'The zone_css_slug is extracted from zone roots.'
'The zone_css_slug is not extracted from zone children.'
'A missing document results in an error. DCNL One cause: translations are requested, and a recently deleted DCNL translation is in the metadata.'
'A empty specification is OK, does nothing.'
'A fixture without dependencies is loaded.'
'A fixture with existing to-many dependencies is loaded.'
'A fixture must define all the natural key items.'
'A fixture with a relation as a key can be loaded.'
'Many-to-many relations of existing instances are updated.'
'An unspecified relation is detected, raises exception.'
'An unspecified relation is detected, raises exception.'
'A user.password is hashed.'
'If document.current_revision is set, we\'re done.'
'If the document history is unavailable, wait.'
'If a revision was requested but not scraped, wait.'
'If a revision was included in history but not scraped, request it.'
'If we\'ve scraped all the known revisions, request more history.'
'If a doc has no current rev, scrape all history and fail.'
'A DocumentBaseSource with a top-level slug has no parent.'
'A DocumentBaseSource with a child-level slug has a parent.'
'A DocumentBaseSource with a zone slug starts un-normalized.'
'Initializing with a URL-encoded path raises an exception.'
'If a document has no subpages, none are extracted.'
'Document Subpages are returned as new resources to fetch.'
'depth=all is propagated to child pages.'
'depth=n is propagated as depth=n-1 to child pages.'
'depth=1 is not propagated to child pages.'
'The default is requests if revision count is unspecified.'
'If a revision count is specified, that many are requested.'
'If a revision count is more than the revisions, take note.'
'If the $history endpoint errors, scraping stops.'
'If previously called, populate history from storage.'
'A translated document may include the English source doc.'
'Do typical mdn update'
'Helper to print all system commands in debug mode'
'Returns integer board ids available on this machine.'
'lock file from integer id'
'Username that has locked the device id. (Empty string if no lock).'
'Attempts to lock id, returning success as True/False.'
'Start a process that will free a lock when process pid terminates'
'Finds a free id, locks it and returns integer id, or -1 if none free. DCNL A process is spawned that will free the lock automatically when the DCNL process pid (by default the current python process) terminates.'
'Finds a free id, locks it and returns integer id, or -1 if none free. DCNL * Lock must be freed manually *'
'Attempts to free lock id, returning success as True/False.'
'This is a decorator which can be used to mark functions DCNL as deprecated. It will result in a warning being emmitted DCNL when the function is used.'
'Return a CUDAMatException object based on the error code err_code.'
'Creates and returns a new CUDAMatrix with the given shape.'
'Sum the matrix along the given dimension, where 0 represents the leading DCNL dimension and 1 represents the non-leading dimension. If a target is DCNL not prvided, a new vector is created for storing the result.'
'Find the dot product between m1 and m2.'
'Compute the vector dot product of matrices m1 and m2.'
'Apply cos to each element of the matrix mat.'
'Apply cos to each element of the matrix mat.'
'Apply sin to each element of the matrix mat.'
'Apply the logistic sigmoid to each element of the matrix mat.'
'Apply the tanh to each element of the matrix mat.'
'Apply abs to each element of the matrix mat.'
'Apply log(1+exp(x)) to each element of the matrix mat. If exact is True, use DCNL slow and accurate log and exp.'
'Find the natural logarithm of each element of the matrix mat.'
'Apply the exponential function to each element of the matrix mat.'
'Apply the ceil function to each element of the matrix mat.'
'Apply the floor function to each element of the matrix mat.'
'Compute the square root of each element of the matrix mat.'
'Compute -mat*log(p) - (1-mat).*log(1-p)'
'Compute -mat*log(p)'
'Compute mat*(p >= 0.5) + (1-mat).*(p < 0.5)'
'If p is a scalar, compute the \'p\'th power of each element of the matrix mat, DCNL otherwise raise each element of the matrix mat to the power given by the DCNL corresponding element of the matrix p.'
'Returns array as a float32 array in FORTRAN order.'
'Selects the CUDA device with the given ID.'
'Initialize Cublas.'
'Shut down Cublas.'
'Returns integer board ids available on this machine.'
'lock file from integer id'
'Username that has locked the device id. (Empty string if no lock).'
'Attempts to lock id, returning success as True/False.'
'Start a process that will free a lock when process pid terminates'
'Finds a free id, locks it and returns integer id, or -1 if none free. DCNL A process is spawned that will free the lock automatically when the DCNL process pid (by default the current python process) terminates.'
'Finds a free id, locks it and returns integer id, or -1 if none free. DCNL * Lock must be freed manually *'
'Attempts to free lock id, returning success as True/False.'
'images - (n_images, img_w**2 * n_chans) DCNL filters - (n_filters, filter_w**2 * n_chans) DCNL targets - (n_images, n_locs**2 * n_filters) DCNL numModulesX - Number of filter locations along an axis. = n_locs DCNL paddingStart - Set to k for a k-pixel border of zeros. Usually set to 0. DCNL moduleStride - stride to move the filters by. DCNL numImgColors - n_chans'
'hidSums - (n_images, n_locs**2 * n_filters) DCNL filters - (n_filters, filter_w**2 * n_chans) DCNL targets - (n_images, img_w**2 * n_chans)'
'images - (n_images, img_w**2 * n_chans) DCNL hidSums - (n_images, n_locs**2 * n_filters) DCNL targets - (n_filters, filter_w**2 * n_chans)'
'images - (n_images, img_w**2 * n_chans) DCNL filters - (n_filters, filter_w**2 * n_chans) DCNL targets - (n_images, n_locs**2 * n_filters) DCNL numModulesX - Number of filter locations along an axis. = n_locs DCNL paddingStart - Set to k for a k-pixel border of zeros. Usually set to 0. DCNL moduleStride - stride to move the filters by. DCNL numImgColors - n_chans'
'hidSums - (n_images, n_locs**2 * n_filters) DCNL filters - (n_filters, filter_w**2 * n_chans) DCNL targets - (n_images, img_w**2 * n_chans)'
'images - (n_images, img_w**2 * n_chans) DCNL hidSums - (n_images, n_locs**2 * n_filters) DCNL targets - (n_filters, filter_w**2 * n_chans)'
'images - (n_images, img_w**2 * n_chans) DCNL numChannels - number of filter/color channels DCNL subsX - width of pooling area DCNL startX - pixel where pooling starts DCNL strideX - stride DCNL outputsX - number of pooling sites'
'images - (n_images, img_w**2 * n_chans) DCNL rnd - (n_images, img_w**2 * n_chans) DCNL numChannels - number of filter/color channels DCNL subsX - width of pooling area DCNL startX - pixel where pooling starts DCNL strideX - stride DCNL outputsX - number of pooling sites'
'images - (n_images, img_w**2 * n_chans) DCNL grad - (n_images, outputsX**2 * n_chans) cudamat of deltas/gradients of loss wrt layer outputs. DCNL maxes - (n_images, outputsX**2 * n_chans) cudamat of layer outputs. DCNL subsX - width of pooling area DCNL startX - pixel where pooling starts DCNL strideX - stride DCNL outputsX - number of pooling sites'
'Accumulate the derivative w.r.t the outputs of this layer. DCNL Each layer needs to compute derivatives w.r.t its outputs. These outputs may DCNL have been connected to lots of other nodes through outgoing edges. DCNL This method adds up the derivatives contributed by each outgoing edge. DCNL It gets derivatives w.r.t the inputs at the other end of an outgoing edge. DCNL Args: DCNL edge: The edge which is sending the derivative. DCNL deriv: The derivative w.r.t the inputs at the other end of this edge.'
'Get the gradient for the weights in this edge. DCNL Args: DCNL grad: (output) the gradient for the weights in this edge.'
'Converts human-readable numbers to bytes. DCNL E.g., converts \'2.1M\' to 2.1 * 1024 * 1024 bytes.'
'Returns a list of data handles. DCNL This method is the top-level routine for creating data handlers. It takes a DCNL description of which datasets to load and returns data handlers to access DCNL them. DCNL Args: DCNL op: Operation protocol buffer. DCNL names: list of list of data names. The top level list corresponds to train, DCNL validation and test sets. The lower-level lists correspond to data DCNL modalities. DCNL hyp_list: List of hyperparameters for each modality. DCNL verbose: If True, will print out details of what is happening. DCNL Returns: DCNL A list of DataHandler objects.'
'Converts a serialized parameter string into a numpy array.'
'Converts a numpy array into a serialized parameter string.'
'Writes out the model to disk.'
'Some cases have text and some don\'t. This method separates them out.'
'w: num_filters X sizeX**2 * num_colors.'
'w2 = np.zeros(w.shape) DCNL d = w.shape[1]/3 DCNL print w.shape DCNL for i in range(w.shape[0]): DCNL for j in range(w.shape[1]/3): DCNL w2[i, j] = w[i, 3*j] DCNL w2[i, j + d] = w[i, 3*j+1] DCNL w2[i, j + 2*d] = w[i, 3*j+2] DCNL w = w2'
'This is a decorator which can be used to mark functions DCNL as deprecated. It will result in a warning being emmitted DCNL when the function is used.'
'Return a EigenMatException object based on the error code err_code.'
'Creates and returns a new EigenMatrix with the given shape.'
'Sum the matrix along the given dimension, where 0 represents the leading DCNL dimension and 1 represents the non-leading dimension. If a target is DCNL not prvided, a new vector is created for storing the result.'
'Find the dot product between m1 and m2.'
'Compute the vector dot product of matrices m1 and m2.'
'Apply cos to each element of the matrix mat.'
'Apply sin to each element of the matrix mat.'
'Apply softmax activation to each column of mat.'
'Apply the logistic sigmoid to each element of the matrix mat.'
'Apply the tanh to each element of the matrix mat.'
'Apply abs to each element of the matrix mat.'
'Apply log(1+exp(x)) to each element of the matrix mat. If exact is True, use DCNL slow and accurate log and exp.'
'Find the natural logarithm of each element of the matrix mat.'
'Apply the exponential function to each element of the matrix mat.'
'Apply the ceil function to each element of the matrix mat.'
'Apply the floor function to each element of the matrix mat.'
'Compute the square root of each element of the matrix mat.'
'Compute -mat*log(p) - (1-mat).*log(1-p)'
'Compute -mat*log(p)'
'Compute mat*(p >= 0.5) + (1-mat).*(p < 0.5)'
'If p is a scalar, compute the \'p\'th power of each element of the matrix mat, DCNL otherwise raise each element of the matrix mat to the power given by the DCNL corresponding element of the matrix p.'
'Returns array as a float32 array in FORTRAN order.'
'Selects the CUDA device with the given ID.'
'Initialize Cublas.'
'Shut down Cublas.'
'Copy each line up to our special FLAG line and return. DCNL :raises: (ValueError) If the FLAG isn\'t found. DCNL :return: (list) The lines we\'re copying.'
'Creates the basic auth value to be used in an authorization header. DCNL This is mostly copied from the requests library. DCNL :param (str) username: A Plotly username. DCNL :param (str) password: The password for the given Plotly username. DCNL :returns: (str) An \'authorization\' header for use in a request header.'
'Retrieve a general file from Plotly. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :param (str) share_key: The secret key granting \'read\' access if private. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Update a general file from Plotly. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :param (dict) body: A mapping of body param names to values. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Soft-delete a general file from Plotly. (Can be undone with \'restore\'). DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Restore a trashed, general file from Plotly. See \'trash\'. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Permanently delete a trashed, general file from Plotly. See \'trash\'. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Retrieve a general file from Plotly without needing a fid. DCNL :param (str) path: The \'/\'-delimited path specifying the file location. DCNL :param (int) parent: Parent id, an integer, which the path is relative to. DCNL :param (str) user: The username to target files for. Defaults to requestor. DCNL :param (bool) exists: If True, don\'t return the full file, just a flag. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Create a dash app item.'
'Retrieve a dash app from Plotly.'
'Completely update the writable.'
'Create a new folder. DCNL :param (dict) body: A mapping of body param names to values. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Retrieve a folder from Plotly. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :param (str) share_key: The secret key granting \'read\' access if private. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Update a folder from Plotly. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :param (dict) body: A mapping of body param names to values. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Soft-delete a folder from Plotly. (Can be undone with \'restore\'). DCNL This action is recursively done on files inside the folder. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Restore a trashed folder from Plotly. See \'trash\'. DCNL This action is recursively done on files inside the folder. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Permanently delete a trashed folder file from Plotly. See \'trash\'. DCNL This action is recursively done on files inside the folder. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Retrieve a folder file from Plotly without needing a fid. DCNL :param (str) path: The \'/\'-delimited path specifying the file location. DCNL :param (int) parent: Parent id, an integer, which the path is relative to. DCNL :param (str) user: The username to target files for. Defaults to requestor. DCNL :param (bool) exists: If True, don\'t return the full file, just a flag. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Helper to create a params dict, skipping undefined entries. DCNL :returns: (dict) A params dict to pass to `request`.'
'Create a url for a request on a V2 resource. DCNL :param (str) resource: E.g., \'files\', \'plots\', \'grids\', etc. DCNL :param (str) id: The unique identifier for the resource. DCNL :param (str) route: Detail/list route. E.g., \'restore\', \'lookup\', etc. DCNL :return: (str) The url.'
'Raise a helpful PlotlyRequestError for failed requests. DCNL :param (requests.Response) response: A Response object from an api request. DCNL :raises: (PlotlyRequestError) If the request failed for any reason. DCNL :returns: (None)'
'Using session credentials/config, get headers for a V2 API request. DCNL Users may have their own proxy layer and so we free up the `authorization` DCNL header for this purpose (instead adding the user authorization in a new DCNL `plotly-authorization` header). See pull #239. DCNL :returns: (dict) Headers to add to a requests.request call.'
'Central place to make any api v2 api request. DCNL :param (str) method: The request method (\'get\', \'put\', \'delete\', ...). DCNL :param (str) url: The full api url to make the request to. DCNL :param kwargs: These are passed along (but possibly mutated) to requests. DCNL :return: (requests.Response) The response directly from requests.'
'Retrieve the most up-to-date copy of the plot-schema wrt the given hash. DCNL :param (str) sha1: The last-known hash of the plot-schema (or \'\'). DCNL :returns: (requests.Response) Returns response directly from requests.'
'Create a dashboard.'
'Returns the list of all users\' dashboards.'
'Retrieve a dashboard from Plotly.'
'Completely update the writable.'
'Retrieve the dashboard schema.'
'Generate an image (which does not get saved on Plotly). DCNL :param (dict) body: A mapping of body param names to values. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Create a new grid. DCNL :param (dict) body: A mapping of body param names to values. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Retrieve a grid from Plotly. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :param (str) share_key: The secret key granting \'read\' access if private. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Retrieve full content for the grid (normal retrieve only yields preview) DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :param (str) share_key: The secret key granting \'read\' access if private. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Update a grid from Plotly. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :param (dict) body: A mapping of body param names to values. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Soft-delete a grid from Plotly. (Can be undone with \'restore\'). DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Restore a trashed grid from Plotly. See \'trash\'. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Permanently delete a trashed grid file from Plotly. See \'trash\'. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Retrieve a grid file from Plotly without needing a fid. DCNL :param (str) path: The \'/\'-delimited path specifying the file location. DCNL :param (int) parent: Parent id, an integer, which the path is relative to. DCNL :param (str) user: The username to target files for. Defaults to requestor. DCNL :param (bool) exists: If True, don\'t return the full file, just a flag. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Create a new column (or columns) inside a grid. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :param (dict) body: A mapping of body param names to values. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Retrieve a column (or columns) from a grid. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :param (str) uid: A \',\'-concatenated string of column uids in the grid. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Update a column (or columns) from a grid. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :param (str) uid: A \',\'-concatenated string of column uids in the grid. DCNL :param (dict) body: A mapping of body param names to values. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Permanently delete a column (or columns) from a grid. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :param (str) uid: A \',\'-concatenated string of column uids in the grid. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Append rows to a grid. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :param (dict) body: A mapping of body param names to values. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Create a new plot. DCNL :param (dict) body: A mapping of body param names to values. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Retrieve a plot from Plotly. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :param (str) share_key: The secret key granting \'read\' access if private. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Retrieve the *figure* for a Plotly plot file. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :param (str) share_key: The secret key granting \'read\' access if private. DCNL :param (bool) inline_data: If True, include the data arrays with the plot. DCNL :param (str) map_data: Currently only accepts \'unreadable\' to return a DCNL mapping of grid-fid: grid. This is useful if you DCNL want to maintain structure between the plot and DCNL referenced grids when you have READ access to the DCNL plot, but you don\'t have READ access to the DCNL underlying grids. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Update a plot from Plotly. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :param (dict) body: A mapping of body param names to values. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Soft-delete a plot from Plotly. (Can be undone with \'restore\'). DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Restore a trashed plot from Plotly. See \'trash\'. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Permanently delete a trashed plot file from Plotly. See \'trash\'. DCNL :param (str) fid: The `{username}:{idlocal}` identifier. E.g. `foo:88`. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Retrieve a plot file from Plotly without needing a fid. DCNL :param (str) path: The \'/\'-delimited path specifying the file location. DCNL :param (int) parent: Parent id, an integer, which the path is relative to. DCNL :param (str) user: The username to target files for. Defaults to requestor. DCNL :param (bool) exists: If True, don\'t return the full file, just a flag. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Retrieve information on the logged-in user from Plotly. DCNL :returns: (requests.Response) Returns response directly from requests.'
'Raise a helpful PlotlyRequestError for failed requests. DCNL :param (requests.Response) response: A Response object from an api request. DCNL :raises: (PlotlyRequestError) If the request failed for any reason. DCNL :returns: (None)'
'Using session credentials/config, get headers for a v1 API request. DCNL Users may have their own proxy layer and so we free up the `authorization` DCNL header for this purpose (instead adding the user authorization in a new DCNL `plotly-authorization` header). See pull #239. DCNL :returns: (dict) Headers to add to a requests.request call.'
'Central place to make any v1 api request. DCNL :param (str) method: The request method (\'get\', \'put\', \'delete\', ...). DCNL :param (str) url: The full api url to make the request to. DCNL :param kwargs: These are passed along to requests. DCNL :return: (requests.Response) The response directly from requests.'
'Deprecated endpoint, still used because it can parse data out of a plot. DCNL When we get around to forcing users to create grids and then create plots, DCNL we can finally get rid of this. DCNL :param (list) data: The data array from a figure.'
'Returns the credentials that will be sent to plotly.'
'Returns either module config or file config.'
'Checks if file exists. Returns {} if something fails.'
'Save json to file. Error if path DNE, not a dict, or invalid json.'
'Given a valid filename, make sure it exists (will create if DNE).'
'Given a valid directory path, make sure it exists.'
'Remove timezone info and replace \'T\' delimeter with \' \' (ws).'
'General, node-yielding generator. DCNL Yields (node, path) tuples when it finds values that are dict DCNL instances. DCNL A path is a sequence of hashable values that can be used as either keys to DCNL a mapping (dict) or indices to a sequence (list). A path is always wrt to DCNL some object. Given an object, a path explains how to get from the top level DCNL of that object to a nested value in the object. DCNL :param (dict) node: Part of a dict to be traversed. DCNL :param (tuple[str]) path: Defines the path of the current node. DCNL :return: (Generator) DCNL Example: DCNL >>> for node, path in node_generator({\'a\': {\'b\': 5}}): DCNL >>>     print node, path DCNL {\'a\': {\'b\': 5}} () DCNL {\'b\': 5} (\'a\', )'
'Iteratively get on obj for each key in path. DCNL :param (list|dict) obj: The top-level object. DCNL :param (tuple[str]|tuple[int]) path: Keys to access parts of obj. DCNL :return: (*) DCNL Example: DCNL >>> figure = {\'data\': [{\'x\': [5]}]} DCNL >>> path = (\'data\', 0, \'x\') DCNL >>> get_by_path(figure, path)  # [5]'
'Factored out in case we want to allow callers to specify this func.'
'Memoize a function by its arguments. Note, if the wrapped function returns DCNL a mutable result, the caller is responsible for *not* mutating the result DCNL as it will mutate the cache itself. DCNL :param (int|None) maxsize: Limit the number of cached results. This is a DCNL simple way to prevent memory leaks. Setting this DCNL to `None` will remember *all* calls. The 128 DCNL number is used for parity with the Python 3.2 DCNL `functools.lru_cache` tool.'
'Normalize facecolor values by vmin/vmax and return rgb-color strings DCNL This function takes a tuple color along with a colormap and a minimum DCNL (vmin) and maximum (vmax) range of possible mean distances for the DCNL given parametrized surface. It returns an rgb color based on the mean DCNL distance between vmin and vmax'
'Refer to FigureFactory.create_trisurf() for docstring'
'Returns figure for a triangulated surface plot DCNL :param (array) x: data values of x in a 1D array DCNL :param (array) y: data values of y in a 1D array DCNL :param (array) z: data values of z in a 1D array DCNL :param (array) simplices: an array of shape (ntri, 3) where ntri is DCNL the number of triangles in the triangularization. Each row of the DCNL array contains the indicies of the verticies of each triangle DCNL :param (str|tuple|list) colormap: either a plotly scale name, an rgb DCNL or hex color, a color tuple or a list of colors. An rgb color is DCNL of the form \'rgb(x, y, z)\' where x, y, z belong to the interval DCNL [0, 255] and a color tuple is a tuple of the form (a, b, c) where DCNL a, b and c belong to [0, 1]. If colormap is a list, it must DCNL contain the valid color types aforementioned as its members DCNL :param (bool) show_colorbar: determines if colorbar is visible DCNL :param (list|array) scale: sets the scale values to be used if a non- DCNL linearly interpolated colormap is desired. If left as None, a DCNL linear interpolation between the colors will be excecuted DCNL :param (function|list) color_func: The parameter that determines the DCNL coloring of the surface. Takes either a function with 3 arguments DCNL x, y, z or a list/array of color values the same length as DCNL simplices. If None, coloring will only depend on the z axis DCNL :param (str) title: title of the plot DCNL :param (bool) plot_edges: determines if the triangles on the trisurf DCNL are visible DCNL :param (bool) showbackground: makes background in plot visible DCNL :param (str) backgroundcolor: color of background. Takes a string of DCNL the form \'rgb(x,y,z)\' x,y,z are between 0 and 255 inclusive DCNL :param (str) gridcolor: color of the gridlines besides the axes. Takes DCNL a string of the form \'rgb(x,y,z)\' x,y,z are between 0 and 255 DCNL inclusive DCNL :param (str) zerolinecolor: color of the axes. Takes a string of the DCNL form \'rgb(x,y,z)\' x,y,z are between 0 and 255 inclusive DCNL :param (str) edges_color: color of the edges, if plot_edges is True DCNL :param (int|float) height: the height of the plot (in pixels) DCNL :param (int|float) width: the width of the plot (in pixels) DCNL :param (dict) aspectratio: a dictionary of the aspect ratio values for DCNL the x, y and z axes. \'x\', \'y\' and \'z\' take (int|float) values DCNL Example 1: Sphere DCNL # Necessary Imports for Trisurf DCNL import numpy as np DCNL from scipy.spatial import Delaunay DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_trisurf DCNL from plotly.graph_objs import graph_objs DCNL # Make data for plot DCNL u = np.linspace(0, 2*np.pi, 20) DCNL v = np.linspace(0, np.pi, 20) DCNL u,v = np.meshgrid(u,v) DCNL u = u.flatten() DCNL v = v.flatten() DCNL x = np.sin(v)*np.cos(u) DCNL y = np.sin(v)*np.sin(u) DCNL z = np.cos(v) DCNL points2D = np.vstack([u,v]).T DCNL tri = Delaunay(points2D) DCNL simplices = tri.simplices DCNL # Create a figure DCNL fig1 = create_trisurf(x=x, y=y, z=z, colormap="Rainbow", DCNL simplices=simplices) DCNL # Plot the data DCNL py.iplot(fig1, filename=\'trisurf-plot-sphere\') DCNL Example 2: Torus DCNL # Necessary Imports for Trisurf DCNL import numpy as np DCNL from scipy.spatial import Delaunay DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_trisurf DCNL from plotly.graph_objs import graph_objs DCNL # Make data for plot DCNL u = np.linspace(0, 2*np.pi, 20) DCNL v = np.linspace(0, 2*np.pi, 20) DCNL u,v = np.meshgrid(u,v) DCNL u = u.flatten() DCNL v = v.flatten() DCNL x = (3 + (np.cos(v)))*np.cos(u) DCNL y = (3 + (np.cos(v)))*np.sin(u) DCNL z = np.sin(v) DCNL points2D = np.vstack([u,v]).T DCNL tri = Delaunay(points2D) DCNL simplices = tri.simplices DCNL # Create a figure DCNL fig1 = create_trisurf(x=x, y=y, z=z, colormap="Viridis", DCNL simplices=simplices) DCNL # Plot the data DCNL py.iplot(fig1, filename=\'trisurf-plot-torus\') DCNL Example 3: Mobius Band DCNL # Necessary Imports for Trisurf DCNL import numpy as np DCNL from scipy.spatial import Delaunay DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_trisurf DCNL from plotly.graph_objs import graph_objs DCNL # Make data for plot DCNL u = np.linspace(0, 2*np.pi, 24) DCNL v = np.linspace(-1, 1, 8) DCNL u,v = np.meshgrid(u,v) DCNL u = u.flatten() DCNL v = v.flatten() DCNL tp = 1 + 0.5*v*np.cos(u/2.) DCNL x = tp*np.cos(u) DCNL y = tp*np.sin(u) DCNL z = 0.5*v*np.sin(u/2.) DCNL points2D = np.vstack([u,v]).T DCNL tri = Delaunay(points2D) DCNL simplices = tri.simplices DCNL # Create a figure DCNL fig1 = create_trisurf(x=x, y=y, z=z, colormap=[(0.2, 0.4, 0.6), (1, 1, 1)], DCNL simplices=simplices) DCNL # Plot the data DCNL py.iplot(fig1, filename=\'trisurf-plot-mobius-band\') DCNL Example 4: Using a Custom Colormap Function with Light Cone DCNL # Necessary Imports for Trisurf DCNL import numpy as np DCNL from scipy.spatial import Delaunay DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_trisurf DCNL from plotly.graph_objs import graph_objs DCNL # Make data for plot DCNL u=np.linspace(-np.pi, np.pi, 30) DCNL v=np.linspace(-np.pi, np.pi, 30) DCNL u,v=np.meshgrid(u,v) DCNL u=u.flatten() DCNL v=v.flatten() DCNL x = u DCNL y = u*np.cos(v) DCNL z = u*np.sin(v) DCNL points2D = np.vstack([u,v]).T DCNL tri = Delaunay(points2D) DCNL simplices = tri.simplices DCNL # Define distance function DCNL def dist_origin(x, y, z): DCNL return np.sqrt((1.0 * x)**2 + (1.0 * y)**2 + (1.0 * z)**2) DCNL # Create a figure DCNL fig1 = create_trisurf(x=x, y=y, z=z, DCNL colormap=[\'#FFFFFF\', \'#E4FFFE\', DCNL \'#A4F6F9\', \'#FF99FE\', DCNL \'#BA52ED\'], DCNL scale=[0, 0.6, 0.71, 0.89, 1], DCNL simplices=simplices, DCNL color_func=dist_origin) DCNL # Plot the data DCNL py.iplot(fig1, filename=\'trisurf-plot-custom-coloring\') DCNL Example 5: Enter color_func as a list of colors DCNL # Necessary Imports for Trisurf DCNL import numpy as np DCNL from scipy.spatial import Delaunay DCNL import random DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_trisurf DCNL from plotly.graph_objs import graph_objs DCNL # Make data for plot DCNL u=np.linspace(-np.pi, np.pi, 30) DCNL v=np.linspace(-np.pi, np.pi, 30) DCNL u,v=np.meshgrid(u,v) DCNL u=u.flatten() DCNL v=v.flatten() DCNL x = u DCNL y = u*np.cos(v) DCNL z = u*np.sin(v) DCNL points2D = np.vstack([u,v]).T DCNL tri = Delaunay(points2D) DCNL simplices = tri.simplices DCNL colors = [] DCNL color_choices = [\'rgb(0, 0, 0)\', \'#6c4774\', \'#d6c7dd\'] DCNL for index in range(len(simplices)): DCNL colors.append(random.choice(color_choices)) DCNL fig = create_trisurf( DCNL x, y, z, simplices, DCNL color_func=colors, DCNL show_colorbar=True, DCNL edges_color=\'rgb(2, 85, 180)\', DCNL title=\' Modern Art\' DCNL py.iplot(fig, filename="trisurf-plot-modern-art")'
'Returns a list of intervals for categorical colormaps DCNL Accepts a list or tuple of sequentially increasing numbers and returns DCNL a list representation of the mathematical intervals with these numbers DCNL as endpoints. For example, [1, 6] returns [[-inf, 1], [1, 6], [6, inf]] DCNL :raises: (PlotlyError) If input is not a list or tuple DCNL :raises: (PlotlyError) If the input contains a string DCNL :raises: (PlotlyError) If any number does not increase after the DCNL previous one in the sequence'
'Hides tick labels for box plots in scatterplotmatrix subplots.'
'Validates basic inputs for FigureFactory.create_scatterplotmatrix() DCNL :raises: (PlotlyError) If pandas is not imported DCNL :raises: (PlotlyError) If pandas dataframe is not inputted DCNL :raises: (PlotlyError) If pandas dataframe has <= 1 columns DCNL :raises: (PlotlyError) If diagonal plot choice (diag) is not one of DCNL the viable options DCNL :raises: (PlotlyError) If colormap_type is not a valid choice DCNL :raises: (PlotlyError) If kwargs contains \'size\', \'color\' or DCNL \'colorscale\''
'Refer to FigureFactory.create_scatterplotmatrix() for docstring DCNL Returns fig for scatterplotmatrix without index'
'Refer to FigureFactory.create_scatterplotmatrix() for docstring DCNL Returns fig for scatterplotmatrix with both index and colormap picked. DCNL Used if colormap is a dictionary with index values as keys pointing to DCNL colors. Forces colormap_type to behave categorically because it would DCNL not make sense colors are assigned to each index value and thus DCNL implies that a categorical approach should be taken'
'Refer to FigureFactory.create_scatterplotmatrix() for docstring DCNL Returns fig for scatterplotmatrix with both index and colormap picked'
'Returns data for a scatterplot matrix. DCNL :param (array) df: array of the data with column headers DCNL :param (str) index: name of the index column in data array DCNL :param (list|tuple) endpts: takes an increasing sequece of numbers DCNL that defines intervals on the real line. They are used to group DCNL the entries in an index of numbers into their corresponding DCNL interval and therefore can be treated as categorical data DCNL :param (str) diag: sets the chart type for the main diagonal plots. DCNL The options are \'scatter\', \'histogram\' and \'box\'. DCNL :param (int|float) height: sets the height of the chart DCNL :param (int|float) width: sets the width of the chart DCNL :param (float) size: sets the marker size (in px) DCNL :param (str) title: the title label of the scatterplot matrix DCNL :param (str|tuple|list|dict) colormap: either a plotly scale name, DCNL an rgb or hex color, a color tuple, a list of colors or a DCNL dictionary. An rgb color is of the form \'rgb(x, y, z)\' where DCNL x, y and z belong to the interval [0, 255] and a color tuple is a DCNL tuple of the form (a, b, c) where a, b and c belong to [0, 1]. DCNL If colormap is a list, it must contain valid color types as its DCNL members. DCNL If colormap is a dictionary, all the string entries in DCNL the index column must be a key in colormap. In this case, the DCNL colormap_type is forced to \'cat\' or categorical DCNL :param (str) colormap_type: determines how colormap is interpreted. DCNL Valid choices are \'seq\' (sequential) and \'cat\' (categorical). If DCNL \'seq\' is selected, only the first two colors in colormap will be DCNL considered (when colormap is a list) and the index values will be DCNL linearly interpolated between those two colors. This option is DCNL forced if all index values are numeric. DCNL If \'cat\' is selected, a color from colormap will be assigned to DCNL each category from index, including the intervals if endpts is DCNL being used DCNL :param (dict) **kwargs: a dictionary of scatterplot arguments DCNL The only forbidden parameters are \'size\', \'color\' and DCNL \'colorscale\' in \'marker\' DCNL Example 1: Vanilla Scatterplot Matrix DCNL import plotly.plotly as py DCNL from plotly.graph_objs import graph_objs DCNL from plotly.figure_factory import create_scatterplotmatrix DCNL import numpy as np DCNL import pandas as pd DCNL # Create dataframe DCNL df = pd.DataFrame(np.random.randn(10, 2), DCNL columns=[\'Column 1\', \'Column 2\']) DCNL # Create scatterplot matrix DCNL fig = create_scatterplotmatrix(df) DCNL # Plot DCNL py.iplot(fig, filename=\'Vanilla Scatterplot Matrix\') DCNL Example 2: Indexing a Column DCNL import plotly.plotly as py DCNL from plotly.graph_objs import graph_objs DCNL from plotly.figure_factory import create_scatterplotmatrix DCNL import numpy as np DCNL import pandas as pd DCNL # Create dataframe with index DCNL df = pd.DataFrame(np.random.randn(10, 2), DCNL columns=[\'A\', \'B\']) DCNL # Add another column of strings to the dataframe DCNL df[\'Fruit\'] = pd.Series([\'apple\', \'apple\', \'grape\', \'apple\', \'apple\', DCNL \'grape\', \'pear\', \'pear\', \'apple\', \'pear\']) DCNL # Create scatterplot matrix DCNL fig = create_scatterplotmatrix(df, index=\'Fruit\', size=10) DCNL # Plot DCNL py.iplot(fig, filename = \'Scatterplot Matrix with Index\') DCNL Example 3: Styling the Diagonal Subplots DCNL import plotly.plotly as py DCNL from plotly.graph_objs import graph_objs DCNL from plotly.figure_factory import create_scatterplotmatrix DCNL import numpy as np DCNL import pandas as pd DCNL # Create dataframe with index DCNL df = pd.DataFrame(np.random.randn(10, 4), DCNL columns=[\'A\', \'B\', \'C\', \'D\']) DCNL # Add another column of strings to the dataframe DCNL df[\'Fruit\'] = pd.Series([\'apple\', \'apple\', \'grape\', \'apple\', \'apple\', DCNL \'grape\', \'pear\', \'pear\', \'apple\', \'pear\']) DCNL # Create scatterplot matrix DCNL fig = create_scatterplotmatrix(df, diag=\'box\', index=\'Fruit\', height=1000, DCNL width=1000) DCNL # Plot DCNL py.iplot(fig, filename = \'Scatterplot Matrix - Diagonal Styling\') DCNL Example 4: Use a Theme to Style the Subplots DCNL import plotly.plotly as py DCNL from plotly.graph_objs import graph_objs DCNL from plotly.figure_factory import create_scatterplotmatrix DCNL import numpy as np DCNL import pandas as pd DCNL # Create dataframe with random data DCNL df = pd.DataFrame(np.random.randn(100, 3), DCNL columns=[\'A\', \'B\', \'C\']) DCNL # Create scatterplot matrix using a built-in DCNL # Plotly palette scale and indexing column \'A\' DCNL fig = create_scatterplotmatrix(df, diag=\'histogram\', index=\'A\', DCNL colormap=\'Blues\', height=800, width=800) DCNL # Plot DCNL py.iplot(fig, filename = \'Scatterplot Matrix - Colormap Theme\') DCNL Example 5: Example 4 with Interval Factoring DCNL import plotly.plotly as py DCNL from plotly.graph_objs import graph_objs DCNL from plotly.figure_factory import create_scatterplotmatrix DCNL import numpy as np DCNL import pandas as pd DCNL # Create dataframe with random data DCNL df = pd.DataFrame(np.random.randn(100, 3), DCNL columns=[\'A\', \'B\', \'C\']) DCNL # Create scatterplot matrix using a list of 2 rgb tuples DCNL # and endpoints at -1, 0 and 1 DCNL fig = create_scatterplotmatrix(df, diag=\'histogram\', index=\'A\', DCNL colormap=[\'rgb(140, 255, 50)\', DCNL \'rgb(170, 60, 115)\', \'#6c4774\', DCNL (0.5, 0.1, 0.8)], DCNL endpts=[-1, 0, 1], height=800, width=800) DCNL # Plot DCNL py.iplot(fig, filename = \'Scatterplot Matrix - Intervals\') DCNL Example 6: Using the colormap as a Dictionary DCNL import plotly.plotly as py DCNL from plotly.graph_objs import graph_objs DCNL from plotly.figure_factory import create_scatterplotmatrix DCNL import numpy as np DCNL import pandas as pd DCNL import random DCNL # Create dataframe with random data DCNL df = pd.DataFrame(np.random.randn(100, 3), DCNL columns=[\'Column A\', DCNL \'Column B\', DCNL \'Column C\']) DCNL # Add new color column to dataframe DCNL new_column = [] DCNL strange_colors = [\'turquoise\', \'limegreen\', \'goldenrod\'] DCNL for j in range(100): DCNL new_column.append(random.choice(strange_colors)) DCNL df[\'Colors\'] = pd.Series(new_column, index=df.index) DCNL # Create scatterplot matrix using a dictionary of hex color values DCNL # which correspond to actual color names in \'Colors\' column DCNL fig = create_scatterplotmatrix( DCNL df, diag=\'box\', index=\'Colors\', DCNL colormap= dict( DCNL turquoise = \'#00F5FF\', DCNL limegreen = \'#32CD32\', DCNL goldenrod = \'#DAA520\' DCNL colormap_type=\'cat\', DCNL height=800, width=800 DCNL # Plot DCNL py.iplot(fig, filename = \'Scatterplot Matrix - colormap dictionary \')'
'Streamline-specific validations DCNL Specifically, this checks that x and y are both evenly spaced, DCNL and that the package numpy is available. DCNL See FigureFactory.create_streamline() for params DCNL :raises: (ImportError) If numpy is not available. DCNL :raises: (PlotlyError) If x is not evenly spaced. DCNL :raises: (PlotlyError) If y is not evenly spaced.'
'Returns data for a streamline plot. DCNL :param (list|ndarray) x: 1 dimensional, evenly spaced list or array DCNL :param (list|ndarray) y: 1 dimensional, evenly spaced list or array DCNL :param (ndarray) u: 2 dimensional array DCNL :param (ndarray) v: 2 dimensional array DCNL :param (float|int) density: controls the density of streamlines in DCNL plot. This is multiplied by 30 to scale similiarly to other DCNL available streamline functions such as matplotlib. DCNL Default = 1 DCNL :param (angle in radians) angle: angle of arrowhead. Default = pi/9 DCNL :param (float in [0,1]) arrow_scale: value to scale length of arrowhead DCNL Default = .09 DCNL :param kwargs: kwargs passed through plotly.graph_objs.Scatter DCNL for more information on valid kwargs call DCNL help(plotly.graph_objs.Scatter) DCNL :rtype (dict): returns a representation of streamline figure. DCNL Example 1: Plot simple streamline and increase arrow size DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_streamline DCNL import numpy as np DCNL import math DCNL # Add data DCNL x = np.linspace(-3, 3, 100) DCNL y = np.linspace(-3, 3, 100) DCNL Y, X = np.meshgrid(x, y) DCNL u = -1 - X**2 + Y DCNL v = 1 + X - Y**2 DCNL u = u.T  # Transpose DCNL v = v.T  # Transpose DCNL # Create streamline DCNL fig = create_streamline(x, y, u, v, arrow_scale=.1) DCNL # Plot DCNL py.plot(fig, filename=\'streamline\') DCNL Example 2: from nbviewer.ipython.org/github/barbagroup/AeroPython DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_streamline DCNL import numpy as np DCNL import math DCNL # Add data DCNL N = 50 DCNL x_start, x_end = -2.0, 2.0 DCNL y_start, y_end = -1.0, 1.0 DCNL x = np.linspace(x_start, x_end, N) DCNL y = np.linspace(y_start, y_end, N) DCNL X, Y = np.meshgrid(x, y) DCNL ss = 5.0 DCNL x_s, y_s = -1.0, 0.0 DCNL # Compute the velocity field on the mesh grid DCNL u_s = ss/(2*np.pi) * (X-x_s)/((X-x_s)**2 + (Y-y_s)**2) DCNL v_s = ss/(2*np.pi) * (Y-y_s)/((X-x_s)**2 + (Y-y_s)**2) DCNL # Create streamline DCNL fig = create_streamline(x, y, u_s, v_s, density=2, name=\'streamline\') DCNL # Add source point DCNL point = Scatter(x=[x_s], y=[y_s], mode=\'markers\', DCNL marker=Marker(size=14), name=\'source point\') DCNL # Plot DCNL fig[\'data\'].append(point) DCNL py.plot(fig, filename=\'streamline\')'
'Validates if a list contains all numbers or all strings DCNL :raises: (PlotlyError) If there are any two items in the list whose DCNL types differ'
'Validates all strings or numbers in each dataframe column DCNL :raises: (PlotlyError) If there are any two items in any list whose DCNL types differ'
'Validates that data lists or ndarrays are the same length. DCNL :raises: (PlotlyError) If any data lists are not the same length.'
'Validates that all values given in key/val pairs are positive. DCNL Accepts kwargs to improve Exception messages. DCNL :raises: (PlotlyError) If any value is < 0 or raises.'
'Uses list comprehension to flatten array DCNL :param (array): An iterable to flatten DCNL :raises (PlotlyError): If iterable is not nested. DCNL :rtype (list): The flattened list.'
'Returns the color at a given distance between two colors DCNL This function takes two color tuples, where each element is between 0 DCNL and 1, along with a value 0 < intermed < 1 and returns a color that is DCNL intermed-percent from lowcolor to highcolor'
'Splits a low and high color into a list of n_colors colors in it DCNL Accepts two color tuples and returns a list of n_colors colors DCNL which form the intermediate colors between lowcolor and highcolor DCNL from linearly interpolating through RGB space'
'Takes tuple (a, b, c) and returns an rgb color \'rgb(a, b, c)\''
'Takes rgb color(s) \'rgb(a, b, c)\' and returns tuple(s) (a, b, c) DCNL This function takes either an \'rgb(a, b, c)\' color or a list of DCNL such colors and returns the color tuples in tuple(s) (a, b, c)'
'Return a tuple where each element gets divided by 255 DCNL Takes a (list of) color tuple(s) where each element is between 0 and DCNL 255. Returns the same tuples where each tuple element is normalized to DCNL a value between 0 and 1'
'Multiplies each element of a triplet by 255 DCNL Each coordinate of the color tuple is rounded to the nearest float and DCNL then is turned into an integer. If a number is of the form x.5, then DCNL if x is odd, the number rounds up to (x+1). Otherwise, it rounds down DCNL to just x. This is the way rounding works in Python 3 and in current DCNL statistical analysis to avoid rounding bias'
'Calculates rgb values from a hex color code. DCNL :param (string) value: Hex color string DCNL :rtype (tuple) (r_value, g_value, b_value): tuple of rgb values'
'Takes color(s) and a function and applies the function on the color(s) DCNL In particular, this function identifies whether the given color object DCNL is an iterable or not and applies the given color-parsing function to DCNL the color or iterable of colors. If given an iterable, it will only be DCNL able to work with it if all items in the iterable are of the same type DCNL - rgb string, hex string or tuple'
'Validates color(s) and returns a list of color(s) of a specified type'
'Validates dictioanry of color(s)'
'Extracts the colors from colorscale as a list'
'Extracts the interpolation scale values from colorscale as a list'
'Validates scale values from a colorscale DCNL :param (list) scale: a strictly increasing list of floats that begins DCNL with 0 and ends with 1. Its usage derives from a colorscale which is DCNL a list of two-lists (a list with two elements) of the form DCNL [value, color] which are used to determine how interpolation weighting DCNL works between the colors in the colorscale. Therefore scale is just DCNL the extraction of these values from the two-lists in order'
'Validate the structure, scale values and colors of colorscale.'
'Returns a list of intervals for categorical colormaps DCNL Accepts a list or tuple of sequentially increasing numbers and returns DCNL a list representation of the mathematical intervals with these numbers DCNL as endpoints. For example, [1, 6] returns [[-inf, 1], [1, 6], [6, inf]] DCNL :raises: (PlotlyError) If input is not a list or tuple DCNL :raises: (PlotlyError) If the input contains a string DCNL :raises: (PlotlyError) If any number does not increase after the DCNL previous one in the sequence'
'Calculate statistics for use in violin plot.'
'Produces a sideways probability distribution fig violin plot.'
'Returns a rugplot fig for a violin plot.'
'Returns the scatterplot fig of most of a violin plot.'
'Makes the upper and lower quartiles for a violin plot.'
'Formats the \'median\' hovertext for a violin plot.'
'Makes the x-axis for a violin plot.'
'Makes the y-axis for a violin plot.'
'Refer to FigureFactory.create_violin() for docstring.'
'Refer to FigureFactory.create_violin() for docstring. DCNL Returns fig for violin plot without colorscale.'
'Refer to FigureFactory.create_violin() for docstring. DCNL Returns fig for violin plot with colorscale.'
'Refer to FigureFactory.create_violin() for docstring. DCNL Returns fig for violin plot without colorscale.'
'Returns figure for a violin plot DCNL :param (list|array) data: accepts either a list of numerical values, DCNL a list of dictionaries all with identical keys and at least one DCNL column of numeric values, or a pandas dataframe with at least one DCNL column of numbers. DCNL :param (str) data_header: the header of the data column to be used DCNL from an inputted pandas dataframe. Not applicable if \'data\' is DCNL a list of numeric values. DCNL :param (str) group_header: applicable if grouping data by a variable. DCNL \'group_header\' must be set to the name of the grouping variable. DCNL :param (str|tuple|list|dict) colors: either a plotly scale name, DCNL an rgb or hex color, a color tuple, a list of colors or a DCNL dictionary. An rgb color is of the form \'rgb(x, y, z)\' where DCNL x, y and z belong to the interval [0, 255] and a color tuple is a DCNL tuple of the form (a, b, c) where a, b and c belong to [0, 1]. DCNL If colors is a list, it must contain valid color types as its DCNL members. DCNL :param (bool) use_colorscale: only applicable if grouping by another DCNL variable. Will implement a colorscale based on the first 2 colors DCNL of param colors. This means colors must be a list with at least 2 DCNL colors in it (Plotly colorscales are accepted since they map to a DCNL list of two rgb colors). Default = False DCNL :param (dict) group_stats: a dictioanry where each key is a unique DCNL value from the group_header column in data. Each value must be a DCNL number and will be used to color the violin plots if a colorscale DCNL is being used. DCNL :param (bool) rugplot: determines if a rugplot is draw on violin plot. DCNL Default = True DCNL :param (bool) sort: determines if violins are sorted DCNL alphabetically (True) or by input order (False). Default = False DCNL :param (float) height: the height of the violin plot. DCNL :param (float) width: the width of the violin plot. DCNL :param (str) title: the title of the violin plot. DCNL Example 1: Single Violin Plot DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_violin DCNL from plotly.graph_objs import graph_objs DCNL import numpy as np DCNL from scipy import stats DCNL # create list of random values DCNL data_list = np.random.randn(100) DCNL data_list.tolist() DCNL # create violin fig DCNL fig = create_violin(data_list, colors=\'#604d9e\') DCNL # plot DCNL py.iplot(fig, filename=\'Violin Plot\') DCNL Example 2: Multiple Violin Plots with Qualitative Coloring DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_violin DCNL from plotly.graph_objs import graph_objs DCNL import numpy as np DCNL import pandas as pd DCNL from scipy import stats DCNL # create dataframe DCNL np.random.seed(619517) DCNL Nr=250 DCNL y = np.random.randn(Nr) DCNL gr = np.random.choice(list("ABCDE"), Nr) DCNL norm_params=[(0, 1.2), (0.7, 1), (-0.5, 1.4), (0.3, 1), (0.8, 0.9)] DCNL for i, letter in enumerate("ABCDE"): DCNL y[gr == letter] *=norm_params[i][1]+ norm_params[i][0] DCNL df = pd.DataFrame(dict(Score=y, Group=gr)) DCNL # create violin fig DCNL fig = create_violin(df, data_header=\'Score\', group_header=\'Group\', DCNL sort=True, height=600, width=1000) DCNL # plot DCNL py.iplot(fig, filename=\'Violin Plot with Coloring\') DCNL Example 3: Violin Plots with Colorscale DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_violin DCNL from plotly.graph_objs import graph_objs DCNL import numpy as np DCNL import pandas as pd DCNL from scipy import stats DCNL # create dataframe DCNL np.random.seed(619517) DCNL Nr=250 DCNL y = np.random.randn(Nr) DCNL gr = np.random.choice(list("ABCDE"), Nr) DCNL norm_params=[(0, 1.2), (0.7, 1), (-0.5, 1.4), (0.3, 1), (0.8, 0.9)] DCNL for i, letter in enumerate("ABCDE"): DCNL y[gr == letter] *=norm_params[i][1]+ norm_params[i][0] DCNL df = pd.DataFrame(dict(Score=y, Group=gr)) DCNL # define header params DCNL data_header = \'Score\' DCNL group_header = \'Group\' DCNL # make groupby object with pandas DCNL group_stats = {} DCNL groupby_data = df.groupby([group_header]) DCNL for group in "ABCDE": DCNL data_from_group = groupby_data.get_group(group)[data_header] DCNL # take a stat of the grouped data DCNL stat = np.median(data_from_group) DCNL # add to dictionary DCNL group_stats[group] = stat DCNL # create violin fig DCNL fig = create_violin(df, data_header=\'Score\', group_header=\'Group\', DCNL height=600, width=1000, use_colorscale=True, DCNL group_stats=group_stats) DCNL # plot DCNL py.iplot(fig, filename=\'Violin Plot with Colorscale\')'
'Annotated-heatmap-specific validations DCNL Check that if a text matrix is supplied, it has the same DCNL dimensions as the z matrix. DCNL See FigureFactory.create_annotated_heatmap() for params DCNL :raises: (PlotlyError) If z and text matrices do not  have the same DCNL dimensions.'
'BETA function that creates annotated heatmaps DCNL This function adds annotations to each cell of the heatmap. DCNL :param (list[list]|ndarray) z: z matrix to create heatmap. DCNL :param (list) x: x axis labels. DCNL :param (list) y: y axis labels. DCNL :param (list[list]|ndarray) annotation_text: Text strings for DCNL annotations. Should have the same dimensions as the z matrix. If no DCNL text is added, the values of the z matrix are annotated. Default = DCNL z matrix values. DCNL :param (list|str) colorscale: heatmap colorscale. DCNL :param (list) font_colors: List of two color strings: [min_text_color, DCNL max_text_color] where min_text_color is applied to annotations for DCNL heatmap values < (max_value - min_value)/2. If font_colors is not DCNL defined, the colors are defined logically as black or white DCNL depending on the heatmap\'s colorscale. DCNL :param (bool) showscale: Display colorscale. Default = False DCNL :param kwargs: kwargs passed through plotly.graph_objs.Heatmap. DCNL These kwargs describe other attributes about the annotated Heatmap DCNL trace such as the colorscale. For more information on valid kwargs DCNL call help(plotly.graph_objs.Heatmap) DCNL Example 1: Simple annotated heatmap with default configuration DCNL import plotly.plotly as py DCNL import plotly.figure_factory as FF DCNL z = [[0.300000, 0.00000, 0.65, 0.300000], DCNL [1, 0.100005, 0.45, 0.4300], DCNL [0.300000, 0.00000, 0.65, 0.300000], DCNL [1, 0.100005, 0.45, 0.00000]] DCNL figure = FF.create_annotated_heatmap(z) DCNL py.iplot(figure)'
'Distplot-specific validations DCNL :raises: (PlotlyError) If hist_data is not a list of lists DCNL :raises: (PlotlyError) If curve_type is not valid (i.e. not \'kde\' or DCNL \'normal\').'
'BETA function that creates a distplot similar to seaborn.distplot DCNL The distplot can be composed of all or any combination of the following DCNL 3 components: (1) histogram, (2) curve: (a) kernel density estimation DCNL or (b) normal curve, and (3) rug plot. Additionally, multiple distplots DCNL (from multiple datasets) can be created in the same plot. DCNL :param (list[list]) hist_data: Use list of lists to plot multiple data DCNL sets on the same plot. DCNL :param (list[str]) group_labels: Names for each data set. DCNL :param (list[float]|float) bin_size: Size of histogram bins. DCNL Default = 1. DCNL :param (str) curve_type: \'kde\' or \'normal\'. Default = \'kde\' DCNL :param (str) histnorm: \'probability density\' or \'probability\' DCNL Default = \'probability density\' DCNL :param (bool) show_hist: Add histogram to distplot? Default = True DCNL :param (bool) show_curve: Add curve to distplot? Default = True DCNL :param (bool) show_rug: Add rug to distplot? Default = True DCNL :param (list[str]) colors: Colors for traces. DCNL :param (list[list]) rug_text: Hovertext values for rug_plot, DCNL :return (dict): Representation of a distplot figure. DCNL Example 1: Simple distplot of 1 data set DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_distplot DCNL hist_data = [[1.1, 1.1, 2.5, 3.0, 3.5, DCNL 3.5, 4.1, 4.4, 4.5, 4.5, DCNL 5.0, 5.0, 5.2, 5.5, 5.5, DCNL 5.5, 5.5, 5.5, 6.1, 7.0]] DCNL group_labels = [\'distplot example\'] DCNL fig = create_distplot(hist_data, group_labels) DCNL url = py.plot(fig, filename=\'Simple distplot\', validate=False) DCNL Example 2: Two data sets and added rug text DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_distplot DCNL # Add histogram data DCNL hist1_x = [0.8, 1.2, 0.2, 0.6, 1.6, DCNL -0.9, -0.07, 1.95, 0.9, -0.2, DCNL -0.5, 0.3, 0.4, -0.37, 0.6] DCNL hist2_x = [0.8, 1.5, 1.5, 0.6, 0.59, DCNL 1.0, 0.8, 1.7, 0.5, 0.8, DCNL -0.3, 1.2, 0.56, 0.3, 2.2] DCNL # Group data together DCNL hist_data = [hist1_x, hist2_x] DCNL group_labels = [\'2012\', \'2013\'] DCNL # Add text DCNL rug_text_1 = [\'a1\', \'b1\', \'c1\', \'d1\', \'e1\', DCNL \'f1\', \'g1\', \'h1\', \'i1\', \'j1\', DCNL \'k1\', \'l1\', \'m1\', \'n1\', \'o1\'] DCNL rug_text_2 = [\'a2\', \'b2\', \'c2\', \'d2\', \'e2\', DCNL \'f2\', \'g2\', \'h2\', \'i2\', \'j2\', DCNL \'k2\', \'l2\', \'m2\', \'n2\', \'o2\'] DCNL # Group text together DCNL rug_text_all = [rug_text_1, rug_text_2] DCNL # Create distplot DCNL fig = create_distplot( DCNL hist_data, group_labels, rug_text=rug_text_all, bin_size=.2) DCNL # Add title DCNL fig[\'layout\'].update(title=\'Dist Plot\') DCNL # Plot! DCNL url = py.plot(fig, filename=\'Distplot with rug text\', validate=False) DCNL Example 3: Plot with normal curve and hide rug plot DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_distplot DCNL import numpy as np DCNL x1 = np.random.randn(190) DCNL x2 = np.random.randn(200)+1 DCNL x3 = np.random.randn(200)-1 DCNL x4 = np.random.randn(210)+2 DCNL hist_data = [x1, x2, x3, x4] DCNL group_labels = [\'2012\', \'2013\', \'2014\', \'2015\'] DCNL fig = create_distplot( DCNL hist_data, group_labels, curve_type=\'normal\', DCNL show_rug=False, bin_size=.4) DCNL url = py.plot(fig, filename=\'hist and normal curve\', validate=False) DCNL Example 4: Distplot with Pandas DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_distplot DCNL import numpy as np DCNL import pandas as pd DCNL df = pd.DataFrame({\'2012\': np.random.randn(200), DCNL \'2013\': np.random.randn(200)+1}) DCNL py.iplot(create_distplot([df[c] for c in df.columns], df.columns), DCNL filename=\'examples/distplot with pandas\', DCNL validate=False)'
'Returns figure for facet grid. DCNL :param (pd.DataFrame) df: the dataframe of columns for the facet grid. DCNL :param (str) x: the name of the dataframe column for the x axis data. DCNL :param (str) y: the name of the dataframe column for the y axis data. DCNL :param (str) facet_row: the name of the dataframe column that is used to DCNL facet the grid into row panels. DCNL :param (str) facet_col: the name of the dataframe column that is used to DCNL facet the grid into column panels. DCNL :param (str) color_name: the name of your dataframe column that will DCNL function as the colormap variable. DCNL :param (str|list|dict) colormap: the param that determines how the DCNL color_name column colors the data. If the dataframe contains numeric DCNL data, then a dictionary of colors will group the data categorically DCNL while a Plotly Colorscale name or a custom colorscale will treat it DCNL numerically. To learn more about colors and types of colormap, run DCNL `help(plotly.colors)`. DCNL :param (bool) color_is_cat: determines whether a numerical column for the DCNL colormap will be treated as categorical (True) or sequential (False). DCNL Default = False. DCNL :param (str|dict) facet_row_labels: set to either \'name\' or a dictionary DCNL of all the unique values in the faceting row mapped to some text to DCNL show up in the label annotations. If None, labeling works like usual. DCNL :param (str|dict) facet_col_labels: set to either \'name\' or a dictionary DCNL of all the values in the faceting row mapped to some text to show up DCNL in the label annotations. If None, labeling works like usual. DCNL :param (int) height: the height of the facet grid figure. DCNL :param (int) width: the width of the facet grid figure. DCNL :param (str) trace_type: decides the type of plot to appear in the DCNL facet grid. The options are \'scatter\', \'scattergl\', \'histogram\', DCNL \'bar\', and \'box\'. DCNL Default = \'scatter\'. DCNL :param (str) scales: determines if axes have fixed ranges or not. Valid DCNL settings are \'fixed\' (all axes fixed), \'free_x\' (x axis free only), DCNL \'free_y\' (y axis free only) or \'free\' (both axes free). DCNL :param (float) dtick_x: determines the distance between each tick on the DCNL x-axis. Default is None which means dtick_x is set automatically. DCNL :param (float) dtick_y: determines the distance between each tick on the DCNL y-axis. Default is None which means dtick_y is set automatically. DCNL :param (bool) show_boxes: draws grey boxes behind the facet titles. DCNL :param (bool) ggplot2: draws the facet grid in the style of `ggplot2`. See DCNL http://ggplot2.tidyverse.org/reference/facet_grid.html for reference. DCNL Default = False DCNL :param (int) binsize: groups all data into bins of a given length. DCNL :param (dict) kwargs: a dictionary of scatterplot arguments. DCNL Examples 1: One Way Faceting DCNL import plotly.plotly as py DCNL import plotly.figure_factory as ff DCNL import pandas as pd DCNL mpg = pd.read_table(\'https://raw.githubusercontent.com/plotly/datasets/master/mpg_2017.txt\') DCNL fig = ff.create_facet_grid( DCNL mpg, DCNL x=\'displ\', DCNL y=\'cty\', DCNL facet_col=\'cyl\', DCNL py.iplot(fig, filename=\'facet_grid_mpg_one_way_facet\') DCNL Example 2: Two Way Faceting DCNL import plotly.plotly as py DCNL import plotly.figure_factory as ff DCNL import pandas as pd DCNL mpg = pd.read_table(\'https://raw.githubusercontent.com/plotly/datasets/master/mpg_2017.txt\') DCNL fig = ff.create_facet_grid( DCNL mpg, DCNL x=\'displ\', DCNL y=\'cty\', DCNL facet_row=\'drv\', DCNL facet_col=\'cyl\', DCNL py.iplot(fig, filename=\'facet_grid_mpg_two_way_facet\') DCNL Example 3: Categorical Coloring DCNL import plotly.plotly as py DCNL import plotly.figure_factory as ff DCNL import pandas as pd DCNL mpg = pd.read_table(\'https://raw.githubusercontent.com/plotly/datasets/master/mpg_2017.txt\') DCNL fig = ff.create_facet_grid( DCNL mtcars, DCNL x=\'mpg\', DCNL y=\'wt\', DCNL facet_col=\'cyl\', DCNL color_name=\'cyl\', DCNL color_is_cat=True, DCNL py.iplot(fig, filename=\'facet_grid_mpg_default_colors\') DCNL Example 4: Sequential Coloring DCNL import plotly.plotly as py DCNL import plotly.figure_factory as ff DCNL import pandas as pd DCNL tips = pd.read_csv(\'https://raw.githubusercontent.com/plotly/datasets/master/tips.csv\') DCNL fig = ff.create_facet_grid( DCNL tips, DCNL x=\'total_bill\', DCNL y=\'tip\', DCNL facet_row=\'sex\', DCNL facet_col=\'smoker\', DCNL color_name=\'size\', DCNL colormap=\'Viridis\', DCNL py.iplot(fig, filename=\'facet_grid_tips_sequential_colors\') DCNL Example 5: Custom labels DCNL import plotly.plotly as py DCNL import plotly.figure_factory as ff DCNL import pandas as pd DCNL mtcars = pd.read_csv(\'https://raw.githubusercontent.com/plotly/datasets/master/mtcars.csv\') DCNL fig = ff.create_facet_grid( DCNL mtcars, DCNL x=\'wt\', DCNL y=\'mpg\', DCNL facet_col=\'cyl\', DCNL facet_col_labels={4: "$\alpha$", 6: \'$\beta$\', 8: \'$\sqrt[y]{x}$\'}, DCNL py.iplot(fig, filename=\'facet_grid_mtcars_custom_labels\') DCNL Example 6: Other Trace Type DCNL import plotly.plotly as py DCNL import plotly.figure_factory as ff DCNL import pandas as pd DCNL mtcars = pd.read_csv(\'https://raw.githubusercontent.com/plotly/datasets/master/mtcars.csv\') DCNL fig = ff.create_facet_grid( DCNL mtcars, DCNL x=\'wt\', DCNL facet_col=\'cyl\', DCNL trace_type=\'histogram\', DCNL py.iplot(fig, filename=\'facet_grid_mtcars_other_trace_type\')'
'Makes a list of colors into a colorscale-acceptable form DCNL For documentation regarding to the form of the output, see DCNL https://plot.ly/python/reference/#mesh3d-colorscale'
'Returns figure for a 2D density plot DCNL :param (list|array) x: x-axis data for plot generation DCNL :param (list|array) y: y-axis data for plot generation DCNL :param (str|tuple|list) colorscale: either a plotly scale name, an rgb DCNL or hex color, a color tuple or a list or tuple of colors. An rgb DCNL color is of the form \'rgb(x, y, z)\' where x, y, z belong to the DCNL interval [0, 255] and a color tuple is a tuple of the form DCNL (a, b, c) where a, b and c belong to [0, 1]. If colormap is a DCNL list, it must contain the valid color types aforementioned as its DCNL members. DCNL :param (int) ncontours: the number of 2D contours to draw on the plot DCNL :param (str) hist_color: the color of the plotted histograms DCNL :param (str) point_color: the color of the scatter points DCNL :param (str) point_size: the color of the scatter points DCNL :param (str) title: set the title for the plot DCNL :param (float) height: the height of the chart DCNL :param (float) width: the width of the chart DCNL Example 1: Simple 2D Density Plot DCNL import plotly.plotly as py DCNL from plotly.figure_factory create_2d_density DCNL import numpy as np DCNL # Make data points DCNL t = np.linspace(-1,1.2,2000) DCNL x = (t**3)+(0.3*np.random.randn(2000)) DCNL y = (t**6)+(0.3*np.random.randn(2000)) DCNL # Create a figure DCNL fig = create_2D_density(x, y) DCNL # Plot the data DCNL py.iplot(fig, filename=\'simple-2d-density\') DCNL Example 2: Using Parameters DCNL import plotly.plotly as py DCNL from plotly.figure_factory create_2d_density DCNL import numpy as np DCNL # Make data points DCNL t = np.linspace(-1,1.2,2000) DCNL x = (t**3)+(0.3*np.random.randn(2000)) DCNL y = (t**6)+(0.3*np.random.randn(2000)) DCNL # Create custom colorscale DCNL colorscale = [\'#7A4579\', \'#D56073\', \'rgb(236,158,105)\', DCNL (1, 1, 0.2), (0.98,0.98,0.98)] DCNL # Create a figure DCNL fig = create_2D_density( DCNL x, y, colorscale=colorscale, DCNL hist_color=\'rgb(255, 237, 222)\', point_size=3) DCNL # Plot the data DCNL py.iplot(fig, filename=\'use-parameters\')'
'ohlc and candlestick specific validations DCNL Specifically, this checks that the high value is the greatest value and DCNL the low value is the lowest value in each unit. DCNL See FigureFactory.create_ohlc() or FigureFactory.create_candlestick() DCNL for params DCNL :raises: (PlotlyError) If the high value is not the greatest value in DCNL each unit. DCNL :raises: (PlotlyError) If the low value is not the lowest value in each DCNL unit. DCNL :raises: (PlotlyError) If direction is not \'increasing\' or \'decreasing\''
'Makes increasing ohlc sticks DCNL _make_increasing_ohlc() and _make_decreasing_ohlc separate the DCNL increasing trace from the decreasing trace so kwargs (such as DCNL color) can be passed separately to increasing or decreasing traces DCNL when direction is set to \'increasing\' or \'decreasing\' in DCNL FigureFactory.create_candlestick() DCNL :param (list) open: opening values DCNL :param (list) high: high values DCNL :param (list) low: low values DCNL :param (list) close: closing values DCNL :param (list) dates: list of datetime objects. Default: None DCNL :param kwargs: kwargs to be passed to increasing trace via DCNL plotly.graph_objs.Scatter. DCNL :rtype (trace) ohlc_incr_data: Scatter trace of all increasing ohlc DCNL sticks.'
'Makes decreasing ohlc sticks DCNL :param (list) open: opening values DCNL :param (list) high: high values DCNL :param (list) low: low values DCNL :param (list) close: closing values DCNL :param (list) dates: list of datetime objects. Default: None DCNL :param kwargs: kwargs to be passed to increasing trace via DCNL plotly.graph_objs.Scatter. DCNL :rtype (trace) ohlc_decr_data: Scatter trace of all decreasing ohlc DCNL sticks.'
'BETA function that creates an ohlc chart DCNL :param (list) open: opening values DCNL :param (list) high: high values DCNL :param (list) low: low values DCNL :param (list) close: closing DCNL :param (list) dates: list of datetime objects. Default: None DCNL :param (string) direction: direction can be \'increasing\', \'decreasing\', DCNL or \'both\'. When the direction is \'increasing\', the returned figure DCNL consists of all units where the close value is greater than the DCNL corresponding open value, and when the direction is \'decreasing\', DCNL the returned figure consists of all units where the close value is DCNL less than or equal to the corresponding open value. When the DCNL direction is \'both\', both increasing and decreasing units are DCNL returned. Default: \'both\' DCNL :param kwargs: kwargs passed through plotly.graph_objs.Scatter. DCNL These kwargs describe other attributes about the ohlc Scatter trace DCNL such as the color or the legend name. For more information on valid DCNL kwargs call help(plotly.graph_objs.Scatter) DCNL :rtype (dict): returns a representation of an ohlc chart figure. DCNL Example 1: Simple OHLC chart from a Pandas DataFrame DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_ohlc DCNL from datetime import datetime DCNL import pandas.io.data as web DCNL df = web.DataReader("aapl", \'yahoo\', datetime(2008, 8, 15), DCNL datetime(2008, 10, 15)) DCNL fig = create_ohlc(df.Open, df.High, df.Low, df.Close, dates=df.index) DCNL py.plot(fig, filename=\'finance/aapl-ohlc\') DCNL Example 2: Add text and annotations to the OHLC chart DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_ohlc DCNL from datetime import datetime DCNL import pandas.io.data as web DCNL df = web.DataReader("aapl", \'yahoo\', datetime(2008, 8, 15), DCNL datetime(2008, 10, 15)) DCNL fig = create_ohlc(df.Open, df.High, df.Low, df.Close, dates=df.index) DCNL # Update the fig - options here: https://plot.ly/python/reference/#Layout DCNL fig[\'layout\'].update({ DCNL \'title\': \'The Great Recession\', DCNL \'yaxis\': {\'title\': \'AAPL Stock\'}, DCNL \'shapes\': [{ DCNL \'x0\': \'2008-09-15\', \'x1\': \'2008-09-15\', \'type\': \'line\', DCNL \'y0\': 0, \'y1\': 1, \'xref\': \'x\', \'yref\': \'paper\', DCNL \'line\': {\'color\': \'rgb(40,40,40)\', \'width\': 0.5} DCNL \'annotations\': [{ DCNL \'text\': "the fall of Lehman Brothers", DCNL \'x\': \'2008-09-15\', \'y\': 1.02, DCNL \'xref\': \'x\', \'yref\': \'paper\', DCNL \'showarrow\': False, \'xanchor\': \'left\' DCNL py.plot(fig, filename=\'finance/aapl-recession-ohlc\', validate=False) DCNL Example 3: Customize the OHLC colors DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_ohlc DCNL from plotly.graph_objs import Line, Marker DCNL from datetime import datetime DCNL import pandas.io.data as web DCNL df = web.DataReader("aapl", \'yahoo\', datetime(2008, 1, 1), DCNL datetime(2009, 4, 1)) DCNL # Make increasing ohlc sticks and customize their color and name DCNL fig_increasing = create_ohlc(df.Open, df.High, df.Low, df.Close, DCNL dates=df.index, direction=\'increasing\', DCNL name=\'AAPL\', DCNL line=Line(color=\'rgb(150, 200, 250)\')) DCNL # Make decreasing ohlc sticks and customize their color and name DCNL fig_decreasing = create_ohlc(df.Open, df.High, df.Low, df.Close, DCNL dates=df.index, direction=\'decreasing\', DCNL line=Line(color=\'rgb(128, 128, 128)\')) DCNL # Initialize the figure DCNL fig = fig_increasing DCNL # Add decreasing data with .extend() DCNL fig[\'data\'].extend(fig_decreasing[\'data\']) DCNL py.iplot(fig, filename=\'finance/aapl-ohlc-colors\', validate=False) DCNL Example 4: OHLC chart with datetime objects DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_ohlc DCNL from datetime import datetime DCNL # Add data DCNL open_data = [33.0, 33.3, 33.5, 33.0, 34.1] DCNL high_data = [33.1, 33.3, 33.6, 33.2, 34.8] DCNL low_data = [32.7, 32.7, 32.8, 32.6, 32.8] DCNL close_data = [33.0, 32.9, 33.3, 33.1, 33.1] DCNL dates = [datetime(year=2013, month=10, day=10), DCNL datetime(year=2013, month=11, day=10), DCNL datetime(year=2013, month=12, day=10), DCNL datetime(year=2014, month=1, day=10), DCNL datetime(year=2014, month=2, day=10)] DCNL # Create ohlc DCNL fig = create_ohlc(open_data, high_data, low_data, close_data, dates=dates) DCNL py.iplot(fig, filename=\'finance/simple-ohlc\', validate=False)'
'Returns data for a quiver plot. DCNL :param (list|ndarray) x: x coordinates of the arrow locations DCNL :param (list|ndarray) y: y coordinates of the arrow locations DCNL :param (list|ndarray) u: x components of the arrow vectors DCNL :param (list|ndarray) v: y components of the arrow vectors DCNL :param (float in [0,1]) scale: scales size of the arrows(ideally to DCNL avoid overlap). Default = .1 DCNL :param (float in [0,1]) arrow_scale: value multiplied to length of barb DCNL to get length of arrowhead. Default = .3 DCNL :param (angle in radians) angle: angle of arrowhead. Default = pi/9 DCNL :param kwargs: kwargs passed through plotly.graph_objs.Scatter DCNL for more information on valid kwargs call DCNL help(plotly.graph_objs.Scatter) DCNL :rtype (dict): returns a representation of quiver figure. DCNL Example 1: Trivial Quiver DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_quiver DCNL import math DCNL # 1 Arrow from (0,0) to (1,1) DCNL fig = create_quiver(x=[0], y=[0], u=[1], v=[1], scale=1) DCNL py.plot(fig, filename=\'quiver\') DCNL Example 2: Quiver plot using meshgrid DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_quiver DCNL import numpy as np DCNL import math DCNL # Add data DCNL x,y = np.meshgrid(np.arange(0, 2, .2), np.arange(0, 2, .2)) DCNL u = np.cos(x)*y DCNL v = np.sin(x)*y DCNL #Create quiver DCNL fig = create_quiver(x, y, u, v) DCNL # Plot DCNL py.plot(fig, filename=\'quiver\') DCNL Example 3: Styling the quiver plot DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_quiver DCNL import numpy as np DCNL import math DCNL # Add data DCNL x, y = np.meshgrid(np.arange(-np.pi, math.pi, .5), DCNL np.arange(-math.pi, math.pi, .5)) DCNL u = np.cos(x)*y DCNL v = np.sin(x)*y DCNL # Create quiver DCNL fig = create_quiver(x, y, u, v, scale=.2, arrow_scale=.3, angle=math.pi/6, DCNL name=\'Wind Velocity\', line=Line(width=1)) DCNL # Add title to layout DCNL fig[\'layout\'].update(title=\'Quiver Plot\') DCNL # Plot DCNL py.plot(fig, filename=\'quiver\')'
'BETA function that returns a dendrogram Plotly figure object. DCNL :param (ndarray) X: Matrix of observations as array of arrays DCNL :param (str) orientation: \'top\', \'right\', \'bottom\', or \'left\' DCNL :param (list) labels: List of axis category labels(observation labels) DCNL :param (list) colorscale: Optional colorscale for dendrogram tree DCNL :param (function) distfun: Function to compute the pairwise distance from DCNL the observations DCNL :param (function) linkagefun: Function to compute the linkage matrix from DCNL the pairwise distances DCNL clusters DCNL Example 1: Simple bottom oriented dendrogram DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_dendrogram DCNL import numpy as np DCNL X = np.random.rand(10,10) DCNL dendro = create_dendrogram(X) DCNL plot_url = py.plot(dendro, filename=\'simple-dendrogram\') DCNL Example 2: Dendrogram to put on the left of the heatmap DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_dendrogram DCNL import numpy as np DCNL X = np.random.rand(5,5) DCNL names = [\'Jack\', \'Oxana\', \'John\', \'Chelsea\', \'Mark\'] DCNL dendro = create_dendrogram(X, orientation=\'right\', labels=names) DCNL dendro[\'layout\'].update({\'width\':700, \'height\':500}) DCNL py.iplot(dendro, filename=\'vertical-dendrogram\') DCNL Example 3: Dendrogram with Pandas DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_dendrogram DCNL import numpy as np DCNL import pandas as pd DCNL Index= [\'A\',\'B\',\'C\',\'D\',\'E\',\'F\',\'G\',\'H\',\'I\',\'J\'] DCNL df = pd.DataFrame(abs(np.random.randn(10, 10)), index=Index) DCNL fig = create_dendrogram(df, labels=Index) DCNL url = py.plot(fig, filename=\'pandas-dendrogram\')'
'Validates the inputted dataframe or list'
'Refer to create_gantt() for docstring'
'Refer to FigureFactory.create_gantt() for docstring'
'Refer to FigureFactory.create_gantt() for docstring'
'Returns figure for a gantt chart DCNL :param (array|list) df: input data for gantt chart. Must be either a DCNL a dataframe or a list. If dataframe, the columns must include DCNL \'Task\', \'Start\' and \'Finish\'. Other columns can be included and DCNL used for indexing. If a list, its elements must be dictionaries DCNL with the same required column headers: \'Task\', \'Start\' and DCNL \'Finish\'. DCNL :param (str|list|dict|tuple) colors: either a plotly scale name, an DCNL rgb or hex color, a color tuple or a list of colors. An rgb color DCNL is of the form \'rgb(x, y, z)\' where x, y, z belong to the interval DCNL [0, 255] and a color tuple is a tuple of the form (a, b, c) where DCNL a, b and c belong to [0, 1]. If colors is a list, it must DCNL contain the valid color types aforementioned as its members. DCNL If a dictionary, all values of the indexing column must be keys in DCNL colors. DCNL :param (str|float) index_col: the column header (if df is a data DCNL frame) that will function as the indexing column. If df is a list, DCNL index_col must be one of the keys in all the items of df. DCNL :param (bool) show_colorbar: determines if colorbar will be visible. DCNL Only applies if values in the index column are numeric. DCNL :param (bool) reverse_colors: reverses the order of selected colors DCNL :param (str) title: the title of the chart DCNL :param (float) bar_width: the width of the horizontal bars in the plot DCNL :param (bool) showgrid_x: show/hide the x-axis grid DCNL :param (bool) showgrid_y: show/hide the y-axis grid DCNL :param (float) height: the height of the chart DCNL :param (float) width: the width of the chart DCNL Example 1: Simple Gantt Chart DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_gantt DCNL # Make data for chart DCNL df = [dict(Task="Job A", Start=\'2009-01-01\', Finish=\'2009-02-30\'), DCNL dict(Task="Job B", Start=\'2009-03-05\', Finish=\'2009-04-15\'), DCNL dict(Task="Job C", Start=\'2009-02-20\', Finish=\'2009-05-30\')] DCNL # Create a figure DCNL fig = create_gantt(df) DCNL # Plot the data DCNL py.iplot(fig, filename=\'Simple Gantt Chart\', world_readable=True) DCNL Example 2: Index by Column with Numerical Entries DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_gantt DCNL # Make data for chart DCNL df = [dict(Task="Job A", Start=\'2009-01-01\', DCNL Finish=\'2009-02-30\', Complete=10), DCNL dict(Task="Job B", Start=\'2009-03-05\', DCNL Finish=\'2009-04-15\', Complete=60), DCNL dict(Task="Job C", Start=\'2009-02-20\', DCNL Finish=\'2009-05-30\', Complete=95)] DCNL # Create a figure with Plotly colorscale DCNL fig = create_gantt(df, colors=\'Blues\', index_col=\'Complete\', DCNL show_colorbar=True, bar_width=0.5, DCNL showgrid_x=True, showgrid_y=True) DCNL # Plot the data DCNL py.iplot(fig, filename=\'Numerical Entries\', world_readable=True) DCNL Example 3: Index by Column with String Entries DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_gantt DCNL # Make data for chart DCNL df = [dict(Task="Job A", Start=\'2009-01-01\', DCNL Finish=\'2009-02-30\', Resource=\'Apple\'), DCNL dict(Task="Job B", Start=\'2009-03-05\', DCNL Finish=\'2009-04-15\', Resource=\'Grape\'), DCNL dict(Task="Job C", Start=\'2009-02-20\', DCNL Finish=\'2009-05-30\', Resource=\'Banana\')] DCNL # Create a figure with Plotly colorscale DCNL fig = create_gantt(df, colors=[\'rgb(200, 50, 25)\', (1, 0, 1), \'#6c4774\'], DCNL index_col=\'Resource\', reverse_colors=True, DCNL show_colorbar=True) DCNL # Plot the data DCNL py.iplot(fig, filename=\'String Entries\', world_readable=True) DCNL Example 4: Use a dictionary for colors DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_gantt DCNL # Make data for chart DCNL df = [dict(Task="Job A", Start=\'2009-01-01\', DCNL Finish=\'2009-02-30\', Resource=\'Apple\'), DCNL dict(Task="Job B", Start=\'2009-03-05\', DCNL Finish=\'2009-04-15\', Resource=\'Grape\'), DCNL dict(Task="Job C", Start=\'2009-02-20\', DCNL Finish=\'2009-05-30\', Resource=\'Banana\')] DCNL # Make a dictionary of colors DCNL colors = {\'Apple\': \'rgb(255, 0, 0)\', DCNL \'Grape\': \'rgb(170, 14, 200)\', DCNL \'Banana\': (1, 1, 0.2)} DCNL # Create a figure with Plotly colorscale DCNL fig = create_gantt(df, colors=colors, index_col=\'Resource\', DCNL show_colorbar=True) DCNL # Plot the data DCNL py.iplot(fig, filename=\'dictioanry colors\', world_readable=True) DCNL Example 5: Use a pandas dataframe DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_gantt DCNL import pandas as pd DCNL # Make data as a dataframe DCNL df = pd.DataFrame([[\'Run\', \'2010-01-01\', \'2011-02-02\', 10], DCNL [\'Fast\', \'2011-01-01\', \'2012-06-05\', 55], DCNL [\'Eat\', \'2012-01-05\', \'2013-07-05\', 94]], DCNL columns=[\'Task\', \'Start\', \'Finish\', \'Complete\']) DCNL # Create a figure with Plotly colorscale DCNL fig = create_gantt(df, colors=\'Blues\', index_col=\'Complete\', DCNL show_colorbar=True, bar_width=0.5, DCNL showgrid_x=True, showgrid_y=True) DCNL # Plot the data DCNL py.iplot(fig, filename=\'data with dataframe\', world_readable=True)'
'Table-specific validations DCNL Check that font_colors is supplied correctly (1, 3, or len(text) DCNL colors). DCNL :raises: (PlotlyError) If font_colors is supplied incorretly. DCNL See FigureFactory.create_table() for params'
'BETA function that creates data tables DCNL :param (pandas.Dataframe | list[list]) text: data for table. DCNL :param (str|list[list]) colorscale: Colorscale for table where the DCNL color at value 0 is the header color, .5 is the first table color DCNL and 1 is the second table color. (Set .5 and 1 to avoid the striped DCNL table effect). Default=[[0, \'#66b2ff\'], [.5, \'#d9d9d9\'], DCNL [1, \'#ffffff\']] DCNL :param (list) font_colors: Color for fonts in table. Can be a single DCNL color, three colors, or a color for each row in the table. DCNL Default=[\'#000000\'] (black text for the entire table) DCNL :param (int) height_constant: Constant multiplied by # of rows to DCNL create table height. Default=30. DCNL :param (bool) index: Create (header-colored) index column index from DCNL Pandas dataframe or list[0] for each list in text. Default=False. DCNL :param (string) index_title: Title for index column. Default=\'\'. DCNL :param kwargs: kwargs passed through plotly.graph_objs.Heatmap. DCNL These kwargs describe other attributes about the annotated Heatmap DCNL trace such as the colorscale. For more information on valid kwargs DCNL call help(plotly.graph_objs.Heatmap) DCNL Example 1: Simple Plotly Table DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_table DCNL text = [[\'Country\', \'Year\', \'Population\'], DCNL [\'US\', 2000, 282200000], DCNL [\'Canada\', 2000, 27790000], DCNL [\'US\', 2010, 309000000], DCNL [\'Canada\', 2010, 34000000]] DCNL table = create_table(text) DCNL py.iplot(table) DCNL Example 2: Table with Custom Coloring DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_table DCNL text = [[\'Country\', \'Year\', \'Population\'], DCNL [\'US\', 2000, 282200000], DCNL [\'Canada\', 2000, 27790000], DCNL [\'US\', 2010, 309000000], DCNL [\'Canada\', 2010, 34000000]] DCNL table = create_table(text, DCNL colorscale=[[0, \'#000000\'], DCNL [.5, \'#80beff\'], DCNL [1, \'#cce5ff\']], DCNL font_colors=[\'#ffffff\', \'#000000\', DCNL \'#000000\']) DCNL py.iplot(table) DCNL Example 3: Simple Plotly Table with Pandas DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_table DCNL import pandas as pd DCNL df = pd.read_csv(\'http://www.stat.ubc.ca/~jenny/notOcto/STAT545A/examples/gapminder/data/gapminderDataFiveYear.txt\', sep=\'  \') DCNL df_p = df[0:25] DCNL table_simple = create_table(df_p) DCNL py.iplot(table_simple)'
'Makes boxplot trace for increasing candlesticks DCNL _make_increasing_candle() and _make_decreasing_candle separate the DCNL increasing traces from the decreasing traces so kwargs (such as DCNL color) can be passed separately to increasing or decreasing traces DCNL when direction is set to \'increasing\' or \'decreasing\' in DCNL FigureFactory.create_candlestick() DCNL :param (list) open: opening values DCNL :param (list) high: high values DCNL :param (list) low: low values DCNL :param (list) close: closing values DCNL :param (list) dates: list of datetime objects. Default: None DCNL :param kwargs: kwargs to be passed to increasing trace via DCNL plotly.graph_objs.Scatter. DCNL :rtype (list) candle_incr_data: list of the box trace for DCNL increasing candlesticks.'
'Makes boxplot trace for decreasing candlesticks DCNL :param (list) open: opening values DCNL :param (list) high: high values DCNL :param (list) low: low values DCNL :param (list) close: closing values DCNL :param (list) dates: list of datetime objects. Default: None DCNL :param kwargs: kwargs to be passed to decreasing trace via DCNL plotly.graph_objs.Scatter. DCNL :rtype (list) candle_decr_data: list of the box trace for DCNL decreasing candlesticks.'
'BETA function that creates a candlestick chart DCNL :param (list) open: opening values DCNL :param (list) high: high values DCNL :param (list) low: low values DCNL :param (list) close: closing values DCNL :param (list) dates: list of datetime objects. Default: None DCNL :param (string) direction: direction can be \'increasing\', \'decreasing\', DCNL or \'both\'. When the direction is \'increasing\', the returned figure DCNL consists of all candlesticks where the close value is greater than DCNL the corresponding open value, and when the direction is DCNL \'decreasing\', the returned figure consists of all candlesticks DCNL where the close value is less than or equal to the corresponding DCNL open value. When the direction is \'both\', both increasing and DCNL decreasing candlesticks are returned. Default: \'both\' DCNL :param kwargs: kwargs passed through plotly.graph_objs.Scatter. DCNL These kwargs describe other attributes about the ohlc Scatter trace DCNL such as the color or the legend name. For more information on valid DCNL kwargs call help(plotly.graph_objs.Scatter) DCNL :rtype (dict): returns a representation of candlestick chart figure. DCNL Example 1: Simple candlestick chart from a Pandas DataFrame DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_candlestick DCNL from datetime import datetime DCNL import pandas.io.data as web DCNL df = web.DataReader("aapl", \'yahoo\', datetime(2007, 10, 1), datetime(2009, 4, 1)) DCNL fig = create_candlestick(df.Open, df.High, df.Low, df.Close, dates=df.index) DCNL py.plot(fig, filename=\'finance/aapl-candlestick\', validate=False) DCNL Example 2: Add text and annotations to the candlestick chart DCNL fig = create_candlestick(df.Open, df.High, df.Low, df.Close, dates=df.index) DCNL # Update the fig - all options here: https://plot.ly/python/reference/#Layout DCNL fig[\'layout\'].update({ DCNL \'title\': \'The Great Recession\', DCNL \'yaxis\': {\'title\': \'AAPL Stock\'}, DCNL \'shapes\': [{ DCNL \'x0\': \'2007-12-01\', \'x1\': \'2007-12-01\', DCNL \'y0\': 0, \'y1\': 1, \'xref\': \'x\', \'yref\': \'paper\', DCNL \'line\': {\'color\': \'rgb(30,30,30)\', \'width\': 1} DCNL \'annotations\': [{ DCNL \'x\': \'2007-12-01\', \'y\': 0.05, \'xref\': \'x\', \'yref\': \'paper\', DCNL \'showarrow\': False, \'xanchor\': \'left\', DCNL \'text\': \'Official start of the recession\' DCNL py.plot(fig, filename=\'finance/aapl-recession-candlestick\', validate=False) DCNL Example 3: Customize the candlestick colors DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_candlestick DCNL from plotly.graph_objs import Line, Marker DCNL from datetime import datetime DCNL import pandas.io.data as web DCNL df = web.DataReader("aapl", \'yahoo\', datetime(2008, 1, 1), datetime(2009, 4, 1)) DCNL # Make increasing candlesticks and customize their color and name DCNL fig_increasing = create_candlestick(df.Open, df.High, df.Low, df.Close, dates=df.index, DCNL direction=\'increasing\', name=\'AAPL\', DCNL marker=Marker(color=\'rgb(150, 200, 250)\'), DCNL line=Line(color=\'rgb(150, 200, 250)\')) DCNL # Make decreasing candlesticks and customize their color and name DCNL fig_decreasing = create_candlestick(df.Open, df.High, df.Low, df.Close, dates=df.index, DCNL direction=\'decreasing\', DCNL marker=Marker(color=\'rgb(128, 128, 128)\'), DCNL line=Line(color=\'rgb(128, 128, 128)\')) DCNL # Initialize the figure DCNL fig = fig_increasing DCNL # Add decreasing data with .extend() DCNL fig[\'data\'].extend(fig_decreasing[\'data\']) DCNL py.iplot(fig, filename=\'finance/aapl-candlestick-custom\', validate=False) DCNL Example 4: Candlestick chart with datetime objects DCNL import plotly.plotly as py DCNL from plotly.figure_factory import create_candlestick DCNL from datetime import datetime DCNL # Add data DCNL open_data = [33.0, 33.3, 33.5, 33.0, 34.1] DCNL high_data = [33.1, 33.3, 33.6, 33.2, 34.8] DCNL low_data = [32.7, 32.7, 32.8, 32.6, 32.8] DCNL close_data = [33.0, 32.9, 33.3, 33.1, 33.1] DCNL dates = [datetime(year=2013, month=10, day=10), DCNL datetime(year=2013, month=11, day=10), DCNL datetime(year=2013, month=12, day=10), DCNL datetime(year=2014, month=1, day=10), DCNL datetime(year=2014, month=2, day=10)] DCNL # Create ohlc DCNL fig = create_candlestick(open_data, high_data, DCNL low_data, close_data, dates=dates) DCNL py.iplot(fig, filename=\'finance/simple-candlestick\', validate=False)'
'sign_in overrides the default plot options. DCNL conflicting options aren\'t raised until plot or iplot is called, DCNL through _plot_option_logic'
'tls.set_config overrides the default plot options. DCNL conflicting options are actually raised when the options are saved, DCNL because we push out default arguments for folks, and we don\'t want to DCNL require users to specify both world_readable and secret *and* we don\'t DCNL want to raise an error if they specified only one of these options DCNL and didn\'t know that a default option was being saved for them.'
'if the user wrote their own options in the config file, DCNL then we\'ll raise the error when the call plot or iplot through DCNL _plot_option_logic'
'Test that call signature arguments applied through _plot_option_logic DCNL overwrite options supplied through py.sign_in which overwrite options DCNL set through tls.set_config'
'Takes color(s) and a function and applies the function on the color(s) DCNL In particular, this function identifies whether the given color object DCNL is an iterable or not and applies the given color-parsing function to DCNL the color or iterable of colors. If given an iterable, it will only be DCNL able to work with it if all items in the iterable are of the same type DCNL - rgb string, hex string or tuple'
'Validates color(s) and returns an error for invalid color(s) DCNL :param (str|tuple|list) colors: either a plotly scale name, an rgb or hex DCNL color, a color tuple or a list/tuple of colors'
'Converts color(s) to the specified color type DCNL Takes a single color or an iterable of colors, as well as a list of scale DCNL values, and outputs a 2-pair of the list of color(s) converted all to an DCNL rgb or tuple color type, aswell as the scale as the second element. If DCNL colors is a Plotly Scale name, then \'scale\' will be forced to the scale DCNL from the respective colorscale and the colors in that colorscale will also DCNL be coverted to the selected colortype. If colors is None, then there is an DCNL option to return portion of the DEFAULT_PLOTLY_COLORS DCNL :param (str|tuple|list) colors: either a plotly scale name, an rgb or hex DCNL color, a color tuple or a list/tuple of colors DCNL :param (list) scale: see docs for validate_scale_values() DCNL :rtype (tuple) (colors_list, scale) if scale is None in the function call, DCNL then scale will remain None in the returned tuple'
'Converts a colors in a dictioanry of colors to the specified color type DCNL :param (dict) colors_dict: a dictioanry whose values are single colors'
'Validates scale values from a colorscale DCNL :param (list) scale: a strictly increasing list of floats that begins DCNL with 0 and ends with 1. Its usage derives from a colorscale which is DCNL a list of two-lists (a list with two elements) of the form DCNL [value, color] which are used to determine how interpolation weighting DCNL works between the colors in the colorscale. Therefore scale is just DCNL the extraction of these values from the two-lists in order'
'Makes a colorscale from a list of colors and a scale DCNL Takes a list of colors and scales and constructs a colorscale based DCNL on the colors in sequential order. If \'scale\' is left empty, a linear- DCNL interpolated colorscale will be generated. If \'scale\' is a specificed DCNL list, it must be the same legnth as colors and must contain all floats DCNL For documentation regarding to the form of the output, see DCNL https://plot.ly/python/reference/#mesh3d-colorscale DCNL :param (list) colors: a list of single colors'
'Returns the color at a given distance between two colors DCNL This function takes two color tuples, where each element is between 0 DCNL and 1, along with a value 0 < intermed < 1 and returns a color that is DCNL intermed-percent from lowcolor to highcolor'
'Return a tuple where each element gets divided by 255 DCNL Takes a (list of) color tuple(s) where each element is between 0 and DCNL 255. Returns the same tuples where each tuple element is normalized to DCNL a value between 0 and 1'
'Multiplies each element of a triplet by 255 DCNL Each coordinate of the color tuple is rounded to the nearest float and DCNL then is turned into an integer. If a number is of the form x.5, then DCNL if x is odd, the number rounds up to (x+1). Otherwise, it rounds down DCNL to just x. This is the way rounding works in Python 3 and in current DCNL statistical analysis to avoid rounding bias DCNL :param (list) rgb_components: grabs the three R, G and B values to be DCNL returned as computed in the function'
'Splits a low and high color into a list of n_colors colors in it DCNL Accepts two color tuples and returns a list of n_colors colors DCNL which form the intermediate colors between lowcolor and highcolor DCNL from linearly interpolating through RGB space'
'Takes tuple (a, b, c) and returns an rgb color \'rgb(a, b, c)\''
'Takes rgb color(s) \'rgb(a, b, c)\' and returns tuple(s) (a, b, c) DCNL This function takes either an \'rgb(a, b, c)\' color or a list of DCNL such colors and returns the color tuples in tuple(s) (a, b, c)'
'Calculates rgb values from a hex color code. DCNL :param (string) value: Hex color string DCNL :rtype (tuple) (r_value, g_value, b_value): tuple of rgb values'
'Extracts the colors from colorscale as a list'
'Extracts the interpolation scale values from colorscale as a list'
'Converts the colors in a colorscale to rgb colors DCNL A colorscale is an array of arrays, each with a numeric value as the DCNL first item and a color as the second. This function specifically is DCNL converting a colorscale with tuple colors (each coordinate between 0 DCNL and 1) into a colorscale with the colors transformed into rgb colors'
'This function will return a script that will download an image of a Plotly DCNL plot. DCNL Keyword Arguments: DCNL caller (\'plot\', \'iplot\') -- specifies which function made the call for the DCNL download script. If `iplot`, then an extra condition is added into the DCNL download script to ensure that download prompts aren\'t initiated on DCNL page reloads.'
'Initialize plotly.js in the browser if it hasn\'t been loaded into the DOM DCNL yet. This is an idempotent method and can and should be called from any DCNL offline methods that require plotly.js to be loaded into the notebook dom. DCNL Keyword arguments: DCNL connected (default=False) -- If True, the plotly.js library will be loaded DCNL from an online CDN. If False, the plotly.js library will be loaded locally DCNL from the plotly python package DCNL Use `connected=True` if you want your notebooks to have smaller file sizes. DCNL In the case where `connected=False`, the entirety of the plotly.js library DCNL will be loaded into the notebook, which will result in a file-size increase DCNL of a couple megabytes. Additionally, because the library will be downloaded DCNL from the web, you and your viewers must be connected to the internet to be DCNL able to view charts within this notebook. DCNL Use `connected=False` if you want you and your collaborators to be able to DCNL create and view these charts regardless of the availability of an internet DCNL connection. This is the default option since it is the most predictable. DCNL Note that under this setting the library will be included inline inside DCNL your notebook, resulting in much larger notebook sizes compared to the case DCNL where `connected=True`.'
'Draw plotly graphs inside an IPython or Jupyter notebook without DCNL connecting to an external server. DCNL To save the chart to Plotly Cloud or Plotly Enterprise, use DCNL `plotly.plotly.iplot`. DCNL To embed an image of the chart, use `plotly.image.ishow`. DCNL figure_or_data -- a plotly.graph_objs.Figure or plotly.graph_objs.Data or DCNL dict or list that describes a Plotly graph. DCNL See https://plot.ly/python/ for examples of DCNL graph descriptions. DCNL Keyword arguments: DCNL show_link (default=True) -- display a link in the bottom-right corner of DCNL of the chart that will export the chart to DCNL Plotly Cloud or Plotly Enterprise DCNL link_text (default=\'Export to plot.ly\') -- the text of export link DCNL validate (default=True) -- validate that all of the keys in the figure DCNL are valid? omit if your version of plotly.js DCNL has become outdated with your version of DCNL graph_reference.json or if you need to include DCNL extra, unnecessary keys in your figure. DCNL image (default=None |\'png\' |\'jpeg\' |\'svg\' |\'webp\') -- This parameter sets DCNL the format of the image to be downloaded, if we choose to download an DCNL image. This parameter has a default value of None indicating that no DCNL image should be downloaded. Please note: for higher resolution images DCNL and more export options, consider making requests to our image servers. DCNL Type: `help(py.image)` for more details. DCNL filename (default=\'plot\') -- Sets the name of the file your image DCNL will be saved to. The extension should not be included. DCNL image_height (default=600) -- Specifies the height of the image in `px`. DCNL image_width (default=800) -- Specifies the width of the image in `px`. DCNL config (default=None) -- Plot view options dictionary. Keyword arguments DCNL `show_link` and `link_text` set the associated options in this DCNL dictionary if it doesn\'t contain them already. DCNL Example: DCNL from plotly.offline import init_notebook_mode, iplot DCNL init_notebook_mode() DCNL iplot([{\'x\': [1, 2, 3], \'y\': [5, 2, 7]}]) DCNL # We can also download an image of the plot by setting the image to the DCNL format you want. e.g. `image=\'png\'` DCNL iplot([{\'x\': [1, 2, 3], \'y\': [5, 2, 7]}], image=\'png\')'
'Create a plotly graph locally as an HTML document or string. DCNL Example: DCNL from plotly.offline import plot DCNL import plotly.graph_objs as go DCNL plot([go.Scatter(x=[1, 2, 3], y=[3, 2, 6])], filename=\'my-graph.html\') DCNL # We can also download an image of the plot by setting the image parameter DCNL # to the image format we want DCNL plot([go.Scatter(x=[1, 2, 3], y=[3, 2, 6])], filename=\'my-graph.html\' DCNL image=\'jpeg\') DCNL More examples below. DCNL figure_or_data -- a plotly.graph_objs.Figure or plotly.graph_objs.Data or DCNL dict or list that describes a Plotly graph. DCNL See https://plot.ly/python/ for examples of DCNL graph descriptions. DCNL Keyword arguments: DCNL show_link (default=True) -- display a link in the bottom-right corner of DCNL of the chart that will export the chart to Plotly Cloud or DCNL Plotly Enterprise DCNL link_text (default=\'Export to plot.ly\') -- the text of export link DCNL validate (default=True) -- validate that all of the keys in the figure DCNL are valid? omit if your version of plotly.js has become outdated DCNL with your version of graph_reference.json or if you need to include DCNL extra, unnecessary keys in your figure. DCNL output_type (\'file\' | \'div\' - default \'file\') -- if \'file\', then DCNL the graph is saved as a standalone HTML file and `plot` DCNL returns None. DCNL If \'div\', then `plot` returns a string that just contains the DCNL HTML <div> that contains the graph and the script to generate the DCNL graph. DCNL Use \'file\' if you want to save and view a single graph at a time DCNL in a standalone HTML file. DCNL Use \'div\' if you are embedding these graphs in an HTML file with DCNL other graphs or HTML markup, like a HTML report or an website. DCNL include_plotlyjs (default=True) -- If True, include the plotly.js DCNL source code in the output file or string. DCNL Set as False if your HTML file already contains a copy of the plotly.js DCNL library. DCNL filename (default=\'temp-plot.html\') -- The local filename to save the DCNL outputted chart to. If the filename already exists, it will be DCNL overwritten. This argument only applies if `output_type` is \'file\'. DCNL auto_open (default=True) -- If True, open the saved file in a DCNL web browser after saving. DCNL This argument only applies if `output_type` is \'file\'. DCNL image (default=None |\'png\' |\'jpeg\' |\'svg\' |\'webp\') -- This parameter sets DCNL the format of the image to be downloaded, if we choose to download an DCNL image. This parameter has a default value of None indicating that no DCNL image should be downloaded. Please note: for higher resolution images DCNL and more export options, consider making requests to our image servers. DCNL Type: `help(py.image)` for more details. DCNL image_filename (default=\'plot_image\') -- Sets the name of the file your DCNL image will be saved to. The extension should not be included. DCNL image_height (default=600) -- Specifies the height of the image in `px`. DCNL image_width (default=800) -- Specifies the width of the image in `px`. DCNL config (default=None) -- Plot view options dictionary. Keyword arguments DCNL `show_link` and `link_text` set the associated options in this DCNL dictionary if it doesn\'t contain them already.'
'Convert a matplotlib figure to a Plotly graph stored locally as HTML. DCNL For more information on converting matplotlib visualizations to plotly DCNL graphs, call help(plotly.tools.mpl_to_plotly) DCNL For more information on creating plotly charts locally as an HTML document DCNL or string, call help(plotly.offline.plot) DCNL mpl_fig -- a matplotlib figure object to convert to a plotly graph DCNL Keyword arguments: DCNL resize (default=False) -- allow plotly to choose the figure size. DCNL strip_style (default=False) -- allow plotly to choose style options. DCNL verbose (default=False) -- print message. DCNL show_link (default=True) -- display a link in the bottom-right corner of DCNL of the chart that will export the chart to Plotly Cloud or DCNL Plotly Enterprise DCNL link_text (default=\'Export to plot.ly\') -- the text of export link DCNL validate (default=True) -- validate that all of the keys in the figure DCNL are valid? omit if your version of plotly.js has become outdated DCNL with your version of graph_reference.json or if you need to include DCNL extra, unnecessary keys in your figure. DCNL output_type (\'file\' | \'div\' - default \'file\') -- if \'file\', then DCNL the graph is saved as a standalone HTML file and `plot` DCNL returns None. DCNL If \'div\', then `plot` returns a string that just contains the DCNL HTML <div> that contains the graph and the script to generate the DCNL graph. DCNL Use \'file\' if you want to save and view a single graph at a time DCNL in a standalone HTML file. DCNL Use \'div\' if you are embedding these graphs in an HTML file with DCNL other graphs or HTML markup, like a HTML report or an website. DCNL include_plotlyjs (default=True) -- If True, include the plotly.js DCNL source code in the output file or string. DCNL Set as False if your HTML file already contains a copy of the plotly.js DCNL library. DCNL filename (default=\'temp-plot.html\') -- The local filename to save the DCNL outputted chart to. If the filename already exists, it will be DCNL overwritten. This argument only applies if `output_type` is \'file\'. DCNL auto_open (default=True) -- If True, open the saved file in a DCNL web browser after saving. DCNL This argument only applies if `output_type` is \'file\'. DCNL image (default=None |\'png\' |\'jpeg\' |\'svg\' |\'webp\') -- This parameter sets DCNL the format of the image to be downloaded, if we choose to download an DCNL image. This parameter has a default value of None indicating that no DCNL image should be downloaded. DCNL image_filename (default=\'plot_image\') -- Sets the name of the file your DCNL image will be saved to. The extension should not be included. DCNL image_height (default=600) -- Specifies the height of the image in `px`. DCNL image_width (default=800) -- Specifies the width of the image in `px`. DCNL Example: DCNL from plotly.offline import init_notebook_mode, plot_mpl DCNL import matplotlib.pyplot as plt DCNL init_notebook_mode() DCNL fig = plt.figure() DCNL x = [10, 15, 20, 25, 30] DCNL y = [100, 250, 200, 150, 300] DCNL plt.plot(x, y, "o") DCNL plot_mpl(fig) DCNL # If you want to to download an image of the figure as well DCNL plot_mpl(fig, image=\'png\')'
'Convert a matplotlib figure to a plotly graph and plot inside an IPython DCNL notebook without connecting to an external server. DCNL To save the chart to Plotly Cloud or Plotly Enterprise, use DCNL `plotly.plotly.plot_mpl`. DCNL For more information on converting matplotlib visualizations to plotly DCNL graphs call `help(plotly.tools.mpl_to_plotly)` DCNL For more information on plotting plotly charts offline in an Ipython DCNL notebook call `help(plotly.offline.iplot)` DCNL mpl_fig -- a matplotlib.figure to convert to a plotly graph DCNL Keyword arguments: DCNL resize (default=False) -- allow plotly to choose the figure size. DCNL strip_style (default=False) -- allow plotly to choose style options. DCNL verbose (default=False) -- print message. DCNL show_link (default=True) -- display a link in the bottom-right corner of DCNL of the chart that will export the chart to DCNL Plotly Cloud or Plotly Enterprise DCNL link_text (default=\'Export to plot.ly\') -- the text of export link DCNL validate (default=True) -- validate that all of the keys in the figure DCNL are valid? omit if your version of plotly.js DCNL has become outdated with your version of DCNL graph_reference.json or if you need to include DCNL extra, unnecessary keys in your figure. DCNL image (default=None |\'png\' |\'jpeg\' |\'svg\' |\'webp\') -- This parameter sets DCNL the format of the image to be downloaded, if we choose to download an DCNL image. This parameter has a default value of None indicating that no DCNL image should be downloaded. DCNL image_filename (default=\'plot_image\') -- Sets the name of the file your DCNL image will be saved to. The extension should not be included. DCNL image_height (default=600) -- Specifies the height of the image in `px`. DCNL image_width (default=800) -- Specifies the width of the image in `px`. DCNL Example: DCNL from plotly.offline import init_notebook_mode, iplot_mpl DCNL import matplotlib.pyplot as plt DCNL fig = plt.figure() DCNL x = [10, 15, 20, 25, 30] DCNL y = [100, 250, 200, 150, 300] DCNL plt.plot(x, y, "o") DCNL init_notebook_mode() DCNL iplot_mpl(fig) DCNL # and if you want to download an image of the figure as well DCNL iplot_mpl(fig, image=\'jpeg\')'
'Convert mpl plots to locally hosted HTML documents. DCNL This function should be used with the inline matplotlib backend DCNL that ships with IPython that can be enabled with `%pylab inline` DCNL or `%matplotlib inline`. This works by adding an HTML formatter DCNL for Figure objects; the existing SVG/PNG formatters will remain DCNL enabled. DCNL (idea taken from `mpld3._display.enable_notebook`) DCNL Example: DCNL from plotly.offline import enable_mpl_offline DCNL import matplotlib.pyplot as plt DCNL enable_mpl_offline() DCNL fig = plt.figure() DCNL x = [10, 15, 20, 25, 30] DCNL y = [100, 250, 200, 150, 300] DCNL plt.plot(x, y, "o") DCNL fig'
'Set set session credentials and config (not saved to file). DCNL If unspecified, credentials and config are searched for in `.plotly` dir. DCNL :param (str) username: The username you\'d use to sign in to Plotly DCNL :param (str) api_key: The api key associated with above username DCNL :param (list|optional) stream_ids: Stream tokens for above credentials DCNL :param (str|optional) proxy_username: The un associated with with your Proxy DCNL :param (str|optional) proxy_password: The pw associated with your Proxy un DCNL :param (str|optional) plotly_domain: DCNL :param (str|optional) plotly_streaming_domain: DCNL :param (str|optional) plotly_api_domain: DCNL :param (bool|optional) plotly_ssl_verification: DCNL :param (bool|optional) plotly_proxy_authorization: DCNL :param (bool|optional) world_readable:'
'Update the _session plot_options DCNL :param (str|optional) filename: What the file will be named in Plotly DCNL :param (str|optional) fileopt: \'overwrite\', \'append\', \'new\', or \'extend\' DCNL :param (bool|optional) world_readable: Make public or private. DCNL :param (dict|optional) sharing: \'public\', \'private\', \'secret\' DCNL :param (bool|optional) auto_open: For `plot`, open in new browser tab? DCNL :param (bool|optional) validate: Error locally if data doesn\'t pass?'
'Returns a copy of the user supplied plot options. DCNL Use `update_plot_options()` to change.'
'Returns either module config or file config.'
'Returns the credentials that will be sent to plotly.'
'Given some plot_options as part of a plot call, decide on final options. DCNL Precedence: DCNL 1 - Start with DEFAULT_PLOT_OPTIONS DCNL 2 - Update each key with ~/.plotly/.config options (tls.get_config) DCNL 3 - Update each key with session plot options (set by py.sign_in) DCNL 4 - Update each key with plot, iplot call signature options'
'Create a unique url for this plot in Plotly and open in IPython. DCNL plot_options keyword agruments: DCNL filename (string) -- the name that will be associated with this figure DCNL fileopt (\'new\' | \'overwrite\' | \'extend\' | \'append\') DCNL - \'new\': create a new, unique url for this plot DCNL - \'overwrite\': overwrite the file associated with `filename` with this DCNL - \'extend\': add additional numbers (data) to existing traces DCNL - \'append\': add additional traces to existing data lists DCNL sharing (\'public\' | \'private\' | \'secret\') -- Toggle who can view this graph DCNL - \'public\': Anyone can view this graph. It will appear in your profile DCNL and can appear in search engines. You do not need to be DCNL logged in to Plotly to view this chart. DCNL - \'private\': Only you can view this plot. It will not appear in the DCNL Plotly feed, your profile, or search engines. You must be DCNL logged in to Plotly to view this graph. You can privately DCNL share this graph with other Plotly users in your online DCNL Plotly account and they will need to be logged in to DCNL view this plot. DCNL - \'secret\': Anyone with this secret link can view this chart. It will DCNL not appear in the Plotly feed, your profile, or search DCNL engines. If it is embedded inside a webpage or an IPython DCNL notebook, anybody who is viewing that page will be able to DCNL view the graph. You do not need to be logged in to view DCNL this plot. DCNL world_readable (default=True) -- Deprecated: use "sharing". DCNL Make this figure private/public'
'Create a unique url for this plot in Plotly and optionally open url. DCNL plot_options keyword agruments: DCNL filename (string) -- the name that will be associated with this figure DCNL fileopt (\'new\' | \'overwrite\' | \'extend\' | \'append\') -- \'new\' creates a DCNL \'new\': create a new, unique url for this plot DCNL \'overwrite\': overwrite the file associated with `filename` with this DCNL \'extend\': add additional numbers (data) to existing traces DCNL \'append\': add additional traces to existing data lists DCNL auto_open (default=True) -- Toggle browser options DCNL True: open this plot in a new browser tab DCNL False: do not open plot in the browser, but do return the unique url DCNL sharing (\'public\' | \'private\' | \'secret\') -- Toggle who can view this DCNL graph DCNL - \'public\': Anyone can view this graph. It will appear in your profile DCNL and can appear in search engines. You do not need to be DCNL logged in to Plotly to view this chart. DCNL - \'private\': Only you can view this plot. It will not appear in the DCNL Plotly feed, your profile, or search engines. You must be DCNL logged in to Plotly to view this graph. You can privately DCNL share this graph with other Plotly users in your online DCNL Plotly account and they will need to be logged in to DCNL view this plot. DCNL - \'secret\': Anyone with this secret link can view this chart. It will DCNL not appear in the Plotly feed, your profile, or search DCNL engines. If it is embedded inside a webpage or an IPython DCNL notebook, anybody who is viewing that page will be able to DCNL view the graph. You do not need to be logged in to view DCNL this plot. DCNL world_readable (default=True) -- Deprecated: use "sharing". DCNL Make this figure private/public'
'Replot a matplotlib figure with plotly in IPython. DCNL This function: DCNL 1. converts the mpl figure into JSON (run help(plolty.tools.mpl_to_plotly)) DCNL 2. makes a request to Plotly to save this figure in your account DCNL 3. displays the image in your IPython output cell DCNL Positional agruments: DCNL fig -- a figure object from matplotlib DCNL Keyword arguments: DCNL resize (default=True) -- allow plotly to choose the figure size DCNL strip_style (default=False) -- allow plotly to choose style options DCNL update (default=None) -- update the resulting figure with an \'update\' DCNL dictionary-like object resembling a plotly \'Figure\' object DCNL Additional keyword arguments: DCNL plot_options -- run help(plotly.plotly.iplot)'
'Replot a matplotlib figure with plotly. DCNL This function: DCNL 1. converts the mpl figure into JSON (run help(plolty.tools.mpl_to_plotly)) DCNL 2. makes a request to Plotly to save this figure in your account DCNL 3. opens your figure in a browser tab OR returns the unique figure url DCNL Positional agruments: DCNL fig -- a figure object from matplotlib DCNL Keyword arguments: DCNL resize (default=True) -- allow plotly to choose the figure size DCNL strip_style (default=False) -- allow plotly to choose style options DCNL update (default=None) -- update the resulting figure with an \'update\' DCNL dictionary-like object resembling a plotly \'Figure\' object DCNL Additional keyword arguments: DCNL plot_options -- run help(plotly.plotly.plot)'
'Swap obj[key1] with obj[key2]'
'Swap x and y data and references'
'Returns a JSON figure representation for the specified file DCNL Plotly uniquely identifies figures with a \'file_owner\'/\'file_id\' pair. DCNL Since each file is given a corresponding unique url, you may also simply DCNL pass a valid plotly url as the first argument. DCNL Examples: DCNL fig = get_figure(\'https://plot.ly/~chris/1638\') DCNL fig = get_figure(\'chris\', 1638) DCNL Note, if you\'re using a file_owner string as the first argument, you MUST DCNL specify a `file_id` keyword argument. Else, if you\'re using a url string DCNL as the first argument, you MUST NOT specify a `file_id` keyword argument, DCNL or file_id must be set to Python\'s None value. DCNL Positional arguments: DCNL file_owner_or_url (string) -- a valid plotly username OR a valid plotly url DCNL Keyword arguments: DCNL file_id (default=None) -- an int or string that can be converted to int DCNL if you\'re using a url, don\'t fill this in! DCNL raw (default=False) -- if true, return unicode JSON string verbatim** DCNL **by default, plotly will return a Figure object (run help(plotly DCNL .graph_objs.Figure)). This representation decodes the keys and values from DCNL unicode (if possible), removes information irrelevant to the figure DCNL representation, and converts the JSON dictionary objects to plotly DCNL `graph objects`.'
'Return the grid_id from the non-None input argument. DCNL Raise an error if more than one argument was supplied.'
'Check that share key is enabled and update url to include the secret key'
'Returns the specified grid as a Grid instance or in JSON/dict form. DCNL :param (str) grid_url: The web_url which locates a Plotly grid. DCNL :param (bool) raw: if False, will output a Grid instance of the JSON grid DCNL being retrieved. If True, raw JSON will be returned.'
'BETA function that creates plots with animations via `frames`. DCNL Creates an animated plot using \'frames\' alongside \'data\' and \'layout\'. DCNL This BETA endpoint is subject to deprecation in the future. In relation DCNL to `plotly.plotly.plot`, folder-creation and overwriting are not supported DCNL but creating a plot with or without animations via frames is supported. DCNL :param (str) filename: if set to \'None\', an automatically-generated plot DCNL name will be created. Does not support folder creation, meaning that DCNL a folder of the form \'folder/name\' will NOT create a the folder and DCNL place the plot in it. DCNL :param (str) sharing: see `plotly.plotly.plot()` doc string. DCNL :param (bool) auto_open: if True, opens plot in the browser. If False, DCNL returns the url for the plot instead. DCNL Example 1: Simple Animation DCNL import plotly.plotly as py DCNL from plotly.grid_objs import Grid, Column DCNL column_1 = Column([0.5], \'x\') DCNL column_2 = Column([0.5], \'y\') DCNL column_3 = Column([1.5], \'x2\') DCNL column_4 = Column([1.5], \'y2\') DCNL grid = Grid([column_1, column_2, column_3, column_4]) DCNL py.grid_ops.upload(grid, \'ping_pong_grid\', auto_open=False) DCNL # create figure DCNL figure = { DCNL \'data\': [ DCNL \'xsrc\': grid.get_column_reference(\'x\'), DCNL \'ysrc\': grid.get_column_reference(\'y\'), DCNL \'mode\': \'markers\', DCNL \'layout\': {\'title\': \'Ping Pong Animation\', DCNL \'xaxis\': {\'range\': [0, 2], \'autorange\': False}, DCNL \'yaxis\': {\'range\': [0, 2], \'autorange\': False}, DCNL \'updatemenus\': [{ DCNL \'buttons\': [ DCNL {\'args\': [None], DCNL \'label\': u\'Play\', DCNL \'method\': u\'animate\'} DCNL \'pad\': {\'r\': 10, \'t\': 87}, DCNL \'showactive\': False, DCNL \'type\': \'buttons\' DCNL \'frames\': [ DCNL \'data\': [ DCNL \'xsrc\': grid.get_column_reference(\'x2\'), DCNL \'ysrc\': grid.get_column_reference(\'y2\'), DCNL \'mode\': \'markers\', DCNL \'data\': [ DCNL \'xsrc\': grid.get_column_reference(\'x\'), DCNL \'ysrc\': grid.get_column_reference(\'y\'), DCNL \'mode\': \'markers\', DCNL py.create_animations(figure, \'ping_pong\') DCNL Example 2: Growing Circles Animation DCNL import plotly.plotly as py DCNL from plotly.grid_objs import Grid, Column DCNL column_1 = Column([0.9, 1.1], \'x\') DCNL column_2 = Column([1.0, 1.0], \'y\') DCNL column_3 = Column([0.8, 1.2], \'x2\') DCNL column_4 = Column([1.2, 0.8], \'y2\') DCNL column_5 = Column([0.7, 1.3], \'x3\') DCNL column_6 = Column([0.7, 1.3], \'y3\') DCNL column_7 = Column([0.6, 1.4], \'x4\') DCNL column_8 = Column([1.5, 0.5], \'y4\') DCNL column_9 = Column([0.4, 1.6], \'x5\') DCNL column_10 = Column([1.2, 0.8], \'y5\') DCNL grid = Grid([column_1, column_2, column_3, column_4, column_5, DCNL column_6, column_7, column_8, column_9, column_10]) DCNL py.grid_ops.upload(grid, \'growing_circles_grid\', auto_open=False) DCNL # create figure DCNL figure = { DCNL \'data\': [ DCNL \'xsrc\': grid.get_column_reference(\'x\'), DCNL \'ysrc\': grid.get_column_reference(\'y\'), DCNL \'mode\': \'markers\', DCNL \'marker\': {\'color\': \'#48186a\', \'size\': 10} DCNL \'layout\': {\'title\': \'Growing Circles\', DCNL \'xaxis\': {\'range\': [0, 2], \'autorange\': False}, DCNL \'yaxis\': {\'range\': [0, 2], \'autorange\': False}, DCNL \'updatemenus\': [{ DCNL \'buttons\': [ DCNL {\'args\': [None], DCNL \'label\': u\'Play\', DCNL \'method\': u\'animate\'} DCNL \'pad\': {\'r\': 10, \'t\': 87}, DCNL \'showactive\': False, DCNL \'type\': \'buttons\' DCNL \'frames\': [ DCNL \'data\': [ DCNL \'xsrc\': grid.get_column_reference(\'x2\'), DCNL \'ysrc\': grid.get_column_reference(\'y2\'), DCNL \'mode\': \'markers\', DCNL \'marker\': {\'color\': \'#3b528b\', \'size\': 25} DCNL \'data\': [ DCNL \'xsrc\': grid.get_column_reference(\'x3\'), DCNL \'ysrc\': grid.get_column_reference(\'y3\'), DCNL \'mode\': \'markers\', DCNL \'marker\': {\'color\': \'#26828e\', \'size\': 50} DCNL \'data\': [ DCNL \'xsrc\': grid.get_column_reference(\'x4\'), DCNL \'ysrc\': grid.get_column_reference(\'y4\'), DCNL \'mode\': \'markers\', DCNL \'marker\': {\'color\': \'#5ec962\', \'size\': 80} DCNL \'data\': [ DCNL \'xsrc\': grid.get_column_reference(\'x5\'), DCNL \'ysrc\': grid.get_column_reference(\'y5\'), DCNL \'mode\': \'markers\', DCNL \'marker\': {\'color\': \'#d8e219\', \'size\': 100} DCNL py.create_animations(figure, \'growing_circles\')'
'Create a unique url for this animated plot in Plotly and open in IPython. DCNL This function is based off `plotly.plotly.iplot`. See `plotly.plotly. DCNL create_animations` Doc String for param descriptions.'
'Returns a help string for a graph object. DCNL :param (str) object_name: An object name from GRAPH_REFERENCE DCNL :param (tuple[str]) path: The path within a `figure` object. DCNL :param parent_object_names: An iterable of names of this object\'s parents. DCNL :param (str|None) attribute: An attribute of <object_name> given <path>. DCNL :return: (str) A printable string to show to users.'
'See get_help().'
'See get_help().'
'Get general help information or information on a specific attribute. DCNL See get_help(). DCNL :param (str|unicode) attribute: The attribute we\'ll get info for.'
'Used mostly by the `to_string` function on Graph Objects to pretty print. DCNL Limit the number of characters of output, but keep the representation DCNL pretty. DCNL :param (*) val: The `repr(val)` result is what gets curtailed. DCNL :param (int) max_chars: Max number of chars which may be returned. DCNL :param (bool) add_delim: Used if a value is *not* the last in an iterable. DCNL :return: (str)'
'Temporary function. See https://github.com/plotly/python-api/issues/290. DCNL :param (str|unicode) key: The attribute we\'re sorting on. DCNL :return: (bool, str|unicode) The naturally-sortable tuple.'
'Convert matplotlib color code to hex color code'
'Convert a many-to-one mapping to a one-to-one mapping'
'Get an SVG dash array for the given matplotlib linestyle DCNL Parameters DCNL obj : matplotlib object DCNL The matplotlib line or path object, which must have a get_linestyle() DCNL method which returns a valid matplotlib line code DCNL i : integer (optional) DCNL Returns DCNL dasharray : string DCNL The HTML/SVG dasharray code associated with the object.'
'Construct the vertices and SVG codes for the path DCNL Parameters DCNL path : matplotlib.Path object DCNL transform : matplotlib transform (optional) DCNL if specified, the path will be transformed before computing the output. DCNL Returns DCNL vertices : array DCNL The shape (M, 2) array of vertices of the Path. Note that some Path DCNL codes require multiple vertices, so the length of these vertices may DCNL be longer than the list of path codes. DCNL path_codes : list DCNL A length N list of single-character path codes, N <= M. Each code is DCNL a single character, in [\'L\',\'M\',\'S\',\'C\',\'Z\']. See the standard SVG DCNL path specification for a description of these.'
'Get the style dictionary for matplotlib path objects'
'Get the style dictionary for matplotlib line objects'
'Get the style dictionary for matplotlib marker objects'
'Return the text style dict for a text instance'
'Return the property dictionary for a matplotlib.Axis instance'
'Returns an iterator over all childen and nested children using DCNL obj\'s get_children() method DCNL if skipContainers is true, only childless objects are returned.'
'Convert a matplotlib image to a base64 png representation DCNL Parameters DCNL image : matplotlib image object DCNL The image to be converted. DCNL Returns DCNL image_base64 : string DCNL The UTF8-encoded base64 string representation of the png image.'
'Convert a matplotlib figure to a vincent object'
'Convert a matplotlib figure to vega dictionary DCNL if notebook=True, then return an object which will display in a notebook DCNL otherwise, return an HTML string.'
'Initialize the IPython notebook display elements DCNL This function borrows heavily from the excellent vincent package: DCNL http://github.com/wrobstory/vincent'
'Check if two bars belong in the same collection (bar chart). DCNL Positional arguments: DCNL old_bar -- a previously sorted bar dictionary. DCNL new_bar -- a new bar dictionary that needs to be sorted.'
'Convert mpl line symbol to plotly line symbol and return symbol.'
'Convert mpl marker symbol to plotly symbol and return symbol.'
'Change a hex color to an rgb tuple DCNL :param (str|unicode) value: The hex string we want to convert. DCNL :return: (int, int, int) The red, green, blue int-tuple. DCNL Example: DCNL \'#FFFFFF\' --> (255, 255, 255)'
'Merge hex color with an alpha (opacity) to get an rgba tuple. DCNL :param (str|unicode) color: A hex color string. DCNL :param (float|int) opacity: A value [0, 1] for the \'a\' in \'rgba\'. DCNL :return: (int, int, int, float) The rgba color and alpha tuple.'
'Convert mpl vertical alignment word to equivalent HTML word. DCNL Text alignment specifiers from mpl differ very slightly from those used DCNL in HTML. See the VA_MAP for more details. DCNL Positional arguments: DCNL mpl_va -- vertical mpl text alignment spec.'
'Map x dimension of current plot to plotly\'s domain space. DCNL The bbox used to locate an axes object in mpl differs from the DCNL method used to locate axes in plotly. The mpl version locates each DCNL axes in the figure so that axes in a single-plot figure might have DCNL the bounds, [0.125, 0.125, 0.775, 0.775] (x0, y0, width, height), DCNL in mpl\'s figure coordinates. However, the axes all share one space in DCNL plotly such that the domain will always be [0, 0, 1, 1] DCNL (x0, y0, x1, y1). To convert between the two, the mpl figure bounds DCNL need to be mapped to a [0, 1] domain for x and y. The margins set DCNL upon opening a new figure will appropriately match the mpl margins. DCNL Optionally, setting margins=0 and simply copying the domains from DCNL mpl to plotly would place axes appropriately. However, DCNL this would throw off axis and title labeling. DCNL Positional arguments: DCNL mpl_plot_bounds -- the (x0, y0, width, height) params for current ax ** DCNL mpl_max_x_bounds -- overall (x0, x1) bounds for all axes ** DCNL ** these are all specified in mpl figure coordinates'
'Map y dimension of current plot to plotly\'s domain space. DCNL The bbox used to locate an axes object in mpl differs from the DCNL method used to locate axes in plotly. The mpl version locates each DCNL axes in the figure so that axes in a single-plot figure might have DCNL the bounds, [0.125, 0.125, 0.775, 0.775] (x0, y0, width, height), DCNL in mpl\'s figure coordinates. However, the axes all share one space in DCNL plotly such that the domain will always be [0, 0, 1, 1] DCNL (x0, y0, x1, y1). To convert between the two, the mpl figure bounds DCNL need to be mapped to a [0, 1] domain for x and y. The margins set DCNL upon opening a new figure will appropriately match the mpl margins. DCNL Optionally, setting margins=0 and simply copying the domains from DCNL mpl to plotly would place axes appropriately. However, DCNL this would throw off axis and title labeling. DCNL Positional arguments: DCNL mpl_plot_bounds -- the (x0, y0, width, height) params for current ax ** DCNL mpl_max_y_bounds -- overall (y0, y1) bounds for all axes ** DCNL ** these are all specified in mpl figure coordinates'
'Convert mpl display coordinates to plotly paper coordinates. DCNL Plotly references object positions with an (x, y) coordinate pair in either DCNL \'data\' or \'paper\' coordinates which reference actual data in a plot or DCNL the entire plotly axes space where the bottom-left of the bottom-left DCNL plot has the location (x, y) = (0, 0) and the top-right of the top-right DCNL plot has the location (x, y) = (1, 1). Display coordinates in mpl reference DCNL objects with an (x, y) pair in pixel coordinates, where the bottom-left DCNL corner is at the location (x, y) = (0, 0) and the top-right corner is at DCNL the location (x, y) = (figwidth*dpi, figheight*dpi). Here, figwidth and DCNL figheight are in inches and dpi are the dots per inch resolution.'
'Return the entire axes space for figure. DCNL An axes object in mpl is specified by its relation to the figure where DCNL (0,0) corresponds to the bottom-left part of the figure and (1,1) DCNL corresponds to the top-right. Margins exist in matplotlib because axes DCNL objects normally don\'t go to the edges of the figure. DCNL In plotly, the axes area (where all subplots go) is always specified with DCNL the domain [0,1] for both x and y. This function finds the smallest box, DCNL specified by two points, that all of the mpl axes objects fit into. This DCNL box is then used to map mpl axes domains to plotly axes domains.'
'Find minimum x value from four (x,y) vertices.'
'Find maximum x value from four (x,y) vertices.'
