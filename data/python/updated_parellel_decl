def _load_file(filename):
def _load_module(filename):
def uncompyle(version, co, out=None, showasm=0, showast=0, deob=0):
def uncompyle_file(filename, outstream=None, showasm=0, showast=0, deob=0):
def main(in_base, out_base, files, codes, outfile=None, showasm=0, showast=0, do_verify=0, py=0, deob=0):
def cmp_code_objects(version, code_obj1, code_obj2, name=''):
def compare_code_with_srcfile(pyc_filename, src_filename):
def compare_files(pyc_filename1, pyc_filename2):
def find_globals(node, globs):
def find_all_globals(node, globs):
def sendEmail(SUBJECT, BODY, TO, FROM, SENDER, PASSWORD, SMTP_SERVER):
def emailUser(profile, SUBJECT='', BODY=''):
def getTimezone(profile):
def generateTinyURL(URL):
def isNegative(phrase):
def isPositive(phrase):
def clean(input):
def get_engine_by_slug(slug=None):
def get_phrases_from_module(module):
def get_keyword_phrases():
def get_all_phrases():
def handle(text, mic, profile):
def isValid(text):
def getSender(email):
def getMostRecentDate(emails):
def fetchUnreadEmails(profile, since=None, markRead=False, limit=None):
def handle(text, mic, profile):
def isValid(text):
def handle(text, mic, profile):
def isValid(text):
def reconnect(func, *default_args, **default_kwargs):
def handle(text, mic, profile):
def replaceAcronyms(text):
def handle(text, mic, profile):
def isValid(text):
def handle(text, mic, profile):
def isValid(text):
def handle(text, mic, profile):
def isValid(text):
def handle(text, mic, profile):
def isValid(text):
def handle(text, mic, profile):
def isValid(text):
def handle(text, mic, profile):
def isValid(text):
def getTopStories(maxResults=None):
def handle(text, mic, profile):
def isValid(text):
def get_engine_by_slug(slug=None):
def check_network_connection(server='www.google.com'):
def check_executable(executable):
def check_python_import(package_or_module):
def get_pip_requirements(fname=os.path.join(jasperpath.LIB_PATH, 'requirements.txt')):
def get_git_revision():
def run():
def sanitize_module_name(module_name):
def tunnel_request_data(host, port, proxy_auth_header=None):
def _parse(url):
def _get_spider_loader(settings):
def inspect_response(response, spider):
def _request_deferred(request):
def get_settings_priority(priority):
def iter_default_settings():
def overridden_settings(settings):
def potential_domain_matches(domain):
def _get_form(response, formname, formid, formnumber, formxpath):
def _get_clickable(clickdata, form):
def parse_cachecontrol(header):
def wrap_loader_context(function, context):
def clean_link(link_text):
def failure_to_exc_info(failure):
def configure_logging(settings=None, install_root_handler=True):
def _get_handler(settings):
def logformatter_adapter(logkws):
def get_engine_status(engine):
def assert_aws_environ():
def get_s3_content_and_delete(bucket, path, with_key=False):
def get_crawler(spidercls=None, settings_dict=None):
def get_pythonpath():
def get_testenv():
def assert_samelines(testcase, text1, text2, msg=None):
def _embed_ipython_shell(namespace={}, banner=''):
def _embed_bpython_shell(namespace={}, banner=''):
def _embed_ptpython_shell(namespace={}, banner=''):
def _embed_standard_shell(namespace={}, banner=''):
def get_shell_embed_func(shells=None, known_shells=None):
def start_python_console(namespace=None, banner='', shells=None):
def get_base_url(response):
def get_meta_refresh(response):
def response_status_message(status):
def response_httprepr(response):
def open_in_browser(response, _openfunc=webbrowser.open):
def send_catch_log(signal=Any, sender=Anonymous, *arguments, **named):
def send_catch_log_deferred(signal=Any, sender=Anonymous, *arguments, **named):
def disconnect_all(signal=Any, sender=Any):
def iter_spider_classes(module):
def spidercls_for_request(spider_loader, request, default_spidercls=None, log_none=False, log_multiple=False):
def format_live_refs(ignore=NoneType):
def print_live_refs(*a, **kw):
def get_oldest(class_name):
def iter_all(class_name):
def request_to_dict(request, spider=None):
def request_from_dict(d, spider=None):
def project_data_dir(project='default'):
def data_path(path, createdir=False):
def build_component_list(compdict, custom=None, convert=update_classpath):
def arglist_to_dict(arglist):
def closest_scrapy_cfg(path='.', prevpath=None):
def init_env(project='default', set_syspath=True):
def get_config(use_closest=True):
def string_camelcase(string):
def flatten(x):
def iflatten(x):
def is_listlike(x):
def unique(list_, key=(lambda x: x)):
@deprecated('scrapy.utils.python.to_unicode') DCNL def str_to_unicode(text, encoding=None, errors='strict'):
@deprecated('scrapy.utils.python.to_bytes') DCNL def unicode_to_str(text, encoding=None, errors='strict'):
def to_unicode(text, encoding=None, errors='strict'):
def to_bytes(text, encoding=None, errors='strict'):
def to_native_str(text, encoding=None, errors='strict'):
def re_rsearch(pattern, text, chunk_size=1024):
def memoizemethod_noargs(method):
@deprecated('scrapy.utils.python.binary_is_text') DCNL def isbinarytext(text):
def binary_is_text(data):
def _getargspec_py23(func):
def get_func_args(func, stripself=False):
def get_spec(func):
def equal_attributes(obj1, obj2, attributes):
@deprecated DCNL def stringify_dict(dct_or_tuples, encoding='utf-8', keys_only=True):
@deprecated DCNL def is_writable(path):
@deprecated DCNL def setattr_default(obj, name, value):
def retry_on_eintr(function, *args, **kw):
def without_none_values(iterable):
def global_object_name(obj):
def defer_fail(_failure):
def defer_succeed(result):
def mustbe_deferred(f, *args, **kw):
def parallel(iterable, count, callable, *args, **named):
def process_chain(callbacks, input, *a, **kw):
def process_chain_both(callbacks, errbacks, input, *a, **kw):
def process_parallel(callbacks, input, *a, **kw):
def iter_errback(iterable, errback, *a, **kw):
def sitemap_urls_from_robots(robots_text, base_url=None):
def xmliter(obj, nodename):
def csviter(obj, delimiter=None, headers=None, encoding=None, quotechar=None):
def arg_to_iter(arg):
def load_object(path):
def walk_modules(path):
def extract_regex(regex, text, encoding='utf-8'):
def md5sum(file):
def rel_has_nofollow(rel):
def install_shutdown_handlers(function, override_sigint=True):
def gunzip(data):
def is_gzipped(response):
def ftp_makedirs_cwd(ftp, path, first_call=True):
def deprecated(use_instead=None):
def defers(func):
def inthread(func):
def create_deprecated_class(name, new_class, clsdict=None, warn_category=ScrapyDeprecationWarning, warn_once=True, old_class_path=None, new_class_path=None, subclass_warn_message='{cls} DCSP inherits DCSP from DCSP deprecated DCSP class DCSP {old}, DCSP please DCSP inherit DCSP from DCSP {new}.', instance_warn_message='{cls} DCSP is DCSP deprecated, DCSP instantiate DCSP {new} DCSP instead.'):
def update_classpath(path):
def method_is_overridden(subclass, base_class, method_name):
def url_is_from_any_domain(url, domains):
def url_is_from_spider(url, spider):
def parse_url(url, encoding=None):
def escape_ajax(url):
def add_http_if_no_scheme(url):
def guess_scheme(url):
def strip_url(url, strip_credentials=True, strip_default_port=True, origin_only=False, strip_fragment=True):
def urlparse_cached(request_or_response):
def listen_tcp(portrange, host, factory):
def request_fingerprint(request, include_headers=None):
def request_authenticate(request, username, password):
def request_httprepr(request):
def referer_str(request):
def decode_chunked_transfer(chunked_body):
def _load_policy_class(policy, warning_only=False):
def _has_ajaxcrawlable_meta(text):
@pytest.fixture() DCNL def chdir(tmpdir):
def get_testdata(*paths):
def open(file, flag='r', mode=438):
def getPage(url, contextFactory=None, response_transform=None, *args, **kwargs):
def has_environment_marker_platform_impl_support():
def get_setting_name_and_refid(node):
def get_spider_queues(config):
def get_project_list(config):
def native_stringify_dict(dct_or_tuples, encoding='utf-8', keys_only=True):
def get_crawl_args(message):
def get_spider_list(project, runner=None, pythonpath=None, version=''):
def activate_egg(eggpath):
def _bro2neo(rec):
def conn2neo(bulk, rec):
def main():
def main():
def _get_ignore_rules(ignore_spec):
def recursive_filelisting(base_directories):
def main():
def setnmaplimits():
def restore_echo():
def parse_args():
def main():
def shutdown(signum, _):
def getnextfiles(directory, sensor=None, count=1):
def create_process(progname, sensor):
def worker(progname, directory, sensor=None):
def main():
def main():
def main():
def get_config_file(paths=None):
def guess_prefix(directory=None):
def ip2int(ipstr):
def int2ip(ipint):
def int2mask(mask):
def net2range(network):
def range2nets(rng):
def get_domains(name):
def str2regexp(string):
def regexp2pattern(string):
def str2list(string):
def str2pyval(string):
def ports2nmapspec(portlist):
def nmapspec2ports(string):
def makedirs(dirname):
def cleandir(dirname):
def isfinal(elt):
def diff(doc1, doc2):
def fields2csv_head(fields, prefix=''):
def doc2csv(doc, fields, nastr='NA'):
def hash_file(fname, hashtype='sha1'):
def serialize(obj):
def country_unalias(country):
def screenwords(imgdata):
def _set_ports():
def guess_srv_port(port1, port2, proto='tcp'):
def normalize_props(props):
def buildgraph(cursor, include_last_hop=False, include_target=False, only_connected=True):
def writedotgraph(graph, out, cluster=None):
def build_agent(filtername='none', template='default'):
def syncloop(agents, sleep=2):
def displayhost(record, showscripts=True, showtraceroute=True, showos=True, out=sys.stdout):
def displayhosts(recordsgen, out=sys.stdout, **kargs):
def displayhosts_json(recordsgen, out=sys.stdout):
def js_alert(ident, level, message):
def js_del_alert(ident):
def check_referer():
def get_notepad_pages_localdokuwiki(pagesdir='/var/lib/dokuwiki/data/pages'):
def _find_get_notepad_pages():
def parse_query_string():
def query_from_params(params):
def get_user():
def get_anonymized_user():
def _parse_query(query):
def get_init_flt():
def flt_from_query(query, base_flt=None):
def _split_digest_auth(data):
def _getinfos_http_client_authorization(spec):
def _getinfos_dns(spec):
def _getinfos_cert(spec):
def getinfos(spec):
def _parse_mongodb_databases_kv(line, out, prefix=None, force_type=None, value_name=None):
def add_mongodb_databases_data(script):
def add_ls_data(script):
def add_smb_ls_data(script):
def add_nfs_ls_data(script):
def add_afp_ls_data(script):
def add_ftp_anon_data(script):
def change_smb_enum_shares(table):
def change_ls(table):
def change_vulns(table):
def masscan_x509(output):
def ignore_script(script):
def cpe2dict(cpe_str):
def genprimes():
def factors(n):
def get_setting(varname):
def change_settings(new_settings=None, file=None):
def file_to_subtitles(filename):
def findObjects(clip, rem_thr=500, preview=False):
def credits1(creditfile, width, stretch=30, color='white', stroke_color='black', stroke_width=2, font='Impact-Normal', fontsize=60):
def blit(im1, im2, pos=None, mask=None, ismask=False):
def color_gradient(size, p1, p2=None, vector=None, r=None, col1=0, col2=1.0, shape='linear', offset=0):
def color_split(size, x=None, y=None, p1=None, p2=None, vector=None, col1=0, col2=1.0, grad_width=0):
def circle(screensize, center, radius, col1=1.0, col2=0, blur=1):
@convert_to_seconds(['t1', 't2']) DCNL @use_clip_fps_by_default DCNL def manual_tracking(clip, t1=None, t2=None, fps=None, nobjects=1, savefile=None):
def findAround(pic, pat, xy=None, r=None):
def autoTrack(clip, pattern, tt=None, fps=None, radius=20, xy0=None):
@use_clip_fps_by_default DCNL def find_video_period(clip, fps=None, tmin=0.3):
@use_clip_fps_by_default DCNL def detect_scenes(clip=None, luminosities=None, thr=10, progress_bar=True, fps=None):
def on_color(clip, size=None, color=(0, 0, 0), pos=None, col_opacity=None):
@requires_duration DCNL @add_mask_if_none DCNL def crossfadein(clip, duration):
@requires_duration DCNL @add_mask_if_none DCNL def crossfadeout(clip, duration):
def slide_in(clip, duration, side):
@requires_duration DCNL def slide_out(clip, duration, side):
@requires_duration DCNL def make_loopable(clip, cross_duration):
def concatenate_videoclips(clips, method='chain', transition=None, bg_color=None, ismask=False, padding=0):
def clips_array(array, rows_widths=None, cols_widths=None, bg_color=None):
def PIL_to_npimage(im):
def mplfig_to_npimage(fig):
def ffmpeg_write_video(clip, filename, fps, codec='libx264', bitrate=None, preset='medium', withmask=False, write_logfile=False, audiofile=None, verbose=True, threads=None, ffmpeg_params=None, progress_bar=True):
def ffmpeg_write_image(filename, image, logfile=False):
def imdisplay(imarray, screen=None):
@convert_masks_to_RGB DCNL def show(clip, t=0, with_mask=True, interactive=False):
@requires_duration DCNL @convert_masks_to_RGB DCNL def preview(clip, fps=15, audio=True, audio_fps=22050, audio_buffersize=3000, audio_nbytes=2):
def html_embed(clip, filetype=None, maxduration=60, rd_kwargs=None, center=True, **html_kwargs):
def ipython_display(clip, filetype=None, maxduration=60, t=None, fps=None, rd_kwargs=None, center=True, **html_kwargs):
def ffmpeg_movie_from_frames(filename, folder, fps, digits=6):
def ffmpeg_extract_subclip(filename, t1, t2, targetname=None):
def ffmpeg_merge_video_audio(video, audio, output, vcodec='copy', acodec='copy', ffmpeg_output=False, verbose=True):
def ffmpeg_extract_audio(inputfile, output, bitrate=3000, fps=44100):
def ffmpeg_resize(video, output, size):
def sliders(f, sliders_properties, wait_for_validation=False):
def ffmpeg_read_image(filename, with_mask=True):
def ffmpeg_parse_infos(filename, print_infos=False, check_duration=True, fps_source='tbr'):
def download_webfile(url, filename, overwrite=False):
@requires_duration DCNL @use_clip_fps_by_default DCNL def write_gif_with_tempfiles(clip, filename, fps=None, program='ImageMagick', opt='OptimizeTransparency', fuzz=1, verbose=True, loop=0, dispose=True, colors=None, tempfiles=False):
@requires_duration DCNL @use_clip_fps_by_default DCNL def write_gif(clip, filename, fps=None, program='ImageMagick', opt='OptimizeTransparency', fuzz=1, verbose=True, withmask=True, loop=0, dispose=True, colors=None):
def write_gif_with_image_io(clip, filename, fps=None, opt=0, loop=0, colors=None, verbose=True):
def colorx(clip, factor):
def rotate(clip, angle, unit='deg', resample='bicubic', expand=True):
def freeze_region(clip, t=0, region=None, outside_region=None, mask=None):
@requires_duration DCNL @apply_to_mask DCNL @apply_to_audio DCNL def time_mirror(self):
def invert_colors(clip):
def gamma_corr(clip, gamma):
def supersample(clip, d, nframes):
def scroll(clip, h=None, w=None, x_speed=0, y_speed=0, x_start=0, y_start=0, apply_to='mask'):
@apply_to_mask DCNL def margin(clip, mar=None, left=0, right=0, top=0, bottom=0, color=(0, 0, 0), opacity=1.0):
def mask_or(clip, other_clip):
def headblur(clip, fx, fy, r_zone, r_blur=None):
def fadein(clip, duration, initial_color=None):
def mask_and(clip, other_clip):
def blackwhite(clip, RGB=None, preserve_luminosity=True):
@requires_duration DCNL def fadeout(clip, duration, final_color=None):
@requires_duration DCNL def freeze(clip, t=0, freeze_duration=None, total_duration=None, padding_end=0):
def to_painting(image, saturation=1.4, black=0.006):
def painting(clip, saturation=1.4, black=0.006):
def speedx(clip, factor=None, final_duration=None):
def make_loopable(clip, cross):
@requires_duration DCNL @apply_to_mask DCNL def time_symmetrize(clip):
def mirror_x(clip, apply_to='mask'):
@requires_duration DCNL @apply_to_mask DCNL @apply_to_audio DCNL def loop(self, n=None, duration=None):
def lum_contrast(clip, lum=0, contrast=0, contrast_thr=127):
def resize(clip, newsize=None, height=None, width=None, apply_to_mask=True):
def blink(clip, d_on, d_off):
def f_accel_decel(t, old_d, new_d, abruptness=1, soonness=1.0):
def accel_decel(clip, new_duration=None, abruptness=1.0, soonness=1.0):
def crop(clip, x1=None, y1=None, x2=None, y2=None, width=None, height=None, x_center=None, y_center=None):
def mask_color(clip, color=None, thr=0, s=1):
def mirror_y(clip, apply_to='mask'):
@apply_to_mask DCNL def even_size(clip):
@decorator.decorator DCNL def outplace(f, clip, *a, **k):
@decorator.decorator DCNL def convert_masks_to_RGB(f, clip, *a, **k):
@decorator.decorator DCNL def apply_to_mask(f, clip, *a, **k):
@decorator.decorator DCNL def apply_to_audio(f, clip, *a, **k):
@decorator.decorator DCNL def requires_duration(f, clip, *a, **k):
@decorator.decorator DCNL def audio_video_fx(f, clip, *a, **k):
def preprocess_args(fun, varnames):
def convert_to_seconds(varnames):
@decorator.decorator DCNL def add_mask_if_none(f, clip, *a, **k):
@decorator.decorator DCNL def use_clip_fps_by_default(f, clip, *a, **k):
def find_audio_period(aclip, t_min=0.1, t_max=2, t_res=0.01):
@requires_duration DCNL def preview(clip, fps=22050, buffersize=4000, nbytes=2, audioFlag=None, videoFlag=None):
@requires_duration DCNL def ffmpeg_audiowrite(clip, filename, fps, nbytes, buffersize, codec='libvorbis', bitrate=None, write_logfile=False, verbose=True, ffmpeg_params=None, progress_bar=True):
@audio_video_fx DCNL def volumex(clip, factor):
@audio_video_fx DCNL def audio_normalize(clip):
def audio_left_right(audioclip, left=1, right=1, merge=False):
@audio_video_fx DCNL def audio_fadein(clip, duration):
def audio_loop(audioclip, nloops=None, duration=None):
@audio_video_fx DCNL @requires_duration DCNL def audio_fadeout(clip, duration):
def sys_write_flush(s):
def verbose_print(verbose, s):
def subprocess_call(cmd, verbose=True, errorprint=True):
def is_string(obj):
def cvsecs(time):
def deprecated_version_of(f, oldname, newname=None):
def test_ext():
def test_2():
def test_3():
def test_4():
def test_4a():
def test_5():
def test_6():
def test_download_media(capsys):
def test_PR_424():
def test_PR_610():
def test_setup():
def test_ffmpeg_resizing():
def download_url(url, filename):
def download_youtube_video(youtube_id, filename):
def download():
def trapzWarp(pic, cx, cy, ismask=False):
def annotate(clip, txt, txt_color='white', bg_color=(0, 0, 255)):
def download_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir, delay=15):
def _extractall(self, path='.', members=None):
def _build_install_args(options):
def _parse_args():
def main(version=DEFAULT_VERSION):
def download_package_dict(package_name):
def download_all_package_dicts(num_greenlets=5, limit=None):
def gather_itext_html_files(all_classes_extension):
def clean_output(output):
def clean_code(code):
def generate_api_example(api_examples):
def run(cachedir, cachejournal, langdefs, outfname):
def replace_all(text, terms):
def format_signature(signature):
def build_abstract(info, example=None, detailed_info={}):
def remove_excess_padding(text):
def get_port_range(ports):
def get_protocol_string(tcp, udp):
def unify():
def cleanup(out_file):
def gather_git_command_html_files():
def cleanup(out_file):
def browser_support(browser, prefix, stats):
def version_cmp(a, b):
def version2float(s):
def generate_fathead(folder, processes=CPU_COUNT):
def parse_file(doc_file):
def get_title(section_div):
def get_abstract(section_div):
def get_examples(section_div, examples_class):
def get_params(section_div, params_class):
def get_related_topics(section_div):
def get_redirects(title):
def scrub_text(text):
def replace_all(text, terms):
def download_file(fetch_me):
def append_period(text):
def generate_fathead(folder, processes=CPU_COUNT):
def parse_file(doc_file):
def get_title(section_div):
def get_abstract(section_div):
def get_examples(section_div, examples_class):
def get_params(section_div, params_class):
def get_related_topics(section_div):
def get_redirects(title):
def scrub_text(text):
def build_article(h2_parent, page_url):
def clean_output(output):
def clean_code(code):
def yield_api_example(api_examples):
def main():
def getTitleInfo():
def fetch_documentation():
def normalize(string):
def download_file(url):
def get_all_reference_api_files(base_url):
def replace_all(text, terms):
def newAction(parent, text, slot=None, shortcut=None, icon=None, tip=None, checkable=False, enabled=True):
def ustr(x):
def have_qstring():
def get_main_app(argv=[]):
def main(argv=[]):
def tail_avg(timeseries):
def median_absolute_deviation(timeseries):
def grubbs(timeseries):
def first_hour_average(timeseries):
def stddev_from_average(timeseries):
def stddev_from_moving_average(timeseries):
def mean_subtraction_cumulation(timeseries):
def least_squares(timeseries):
def histogram_bins(timeseries):
def ks_test(timeseries):
def is_anomalously_anomalous(metric_name, ensemble, datapoint):
def run_selected_algorithm(timeseries, metric_name):
def readErrorCodes():
def genErrorOutput():
def genErrorOutputCSV():
def writeToMongo():
def run_gevent():
def run_eventlet():
def list_frameworks():
def run(framework_name, *args):
def main():
def _grid_in_property(field_name, docstring, read_only=False, closed_only=False):
def _grid_out_property(field_name, docstring):
def run(args):
def main():
def updated_topology_description(topology_description, server_description):
def _update_rs_from_primary(sds, replica_set_name, server_description, max_set_version, max_election_id):
def _update_rs_with_primary_from_member(sds, replica_set_name, server_description):
def _update_rs_no_primary_from_member(sds, replica_set_name, server_description):
def _check_has_primary(sds):
def _total_seconds(delta):
def _partition(entity, sep):
def _rpartition(entity, sep):
def parse_userinfo(userinfo):
def parse_ipv6_literal_host(entity, default_port):
def parse_host(entity, default_port=DEFAULT_PORT):
def validate_options(opts, warn=False):
def _parse_options(opts, delim):
def split_options(opts, validate=True, warn=False):
def split_hosts(hosts, default_port=DEFAULT_PORT):
def parse_uri(uri, default_port=DEFAULT_PORT, validate=True, warn=False):
def _with_primary(max_staleness, selection):
def _no_primary(max_staleness, selection):
def select(max_staleness, selection):
def _parse_credentials(username, password, database, options):
def _parse_read_preference(options):
def _parse_write_concern(options):
def _parse_read_concern(options):
def _parse_ssl_options(options):
def _parse_pool_options(options):
def has_c():
def _check_name(name):
def partition_node(node):
def clean_node(node):
def raise_config_error(key, dummy):
def validate_boolean(option, value):
def validate_boolean_or_string(option, value):
def validate_integer(option, value):
def validate_positive_integer(option, value):
def validate_non_negative_integer(option, value):
def validate_readable(option, value):
def validate_positive_integer_or_none(option, value):
def validate_non_negative_integer_or_none(option, value):
def validate_string(option, value):
def validate_string_or_none(option, value):
def validate_int_or_basestring(option, value):
def validate_positive_float(option, value):
def validate_positive_float_or_zero(option, value):
def validate_timeout_or_none(option, value):
def validate_timeout_or_zero(option, value):
def validate_max_staleness(option, value):
def validate_read_preference(dummy, value):
def validate_read_preference_mode(dummy, value):
def validate_auth_mechanism(option, value):
def validate_uuid_representation(dummy, value):
def validate_read_preference_tags(name, value):
def validate_auth_mechanism_properties(option, value):
def validate_document_class(option, value):
def validate_is_mapping(option, value):
def validate_is_document_type(option, value):
def validate_appname_or_none(option, value):
def validate_ok_for_replace(replacement):
def validate_ok_for_update(update):
def validate_unicode_decode_error_handler(dummy, value):
def validate_tzinfo(dummy, value):
def validate_auth_option(option, value):
def validate(option, value):
def get_validated_options(options, warn=True):
def _get_server_type(doc):
def _validate_tag_sets(tag_sets):
def _validate_max_staleness(max_staleness):
def read_pref_mode_from_name(name):
def _to_micros(dur):
def _validate_event_listeners(option, listeners):
def register(listener):
def _build_credentials_tuple(mech, source, user, passwd, extra):
def _parse_scram_response(response):
def _authenticate_scram_sha1(credentials, sock_info):
def _password_digest(username, password):
def _auth_key(nonce, username, password):
def _authenticate_gssapi(credentials, sock_info):
def _authenticate_plain(credentials, sock_info):
def _authenticate_cram_md5(credentials, sock_info):
def _authenticate_x509(credentials, sock_info):
def _authenticate_mongo_cr(credentials, sock_info):
def authenticate(credentials, sock_info):
def logout(source, sock_info):
def _gen_index_name(keys):
def _index_list(key_or_list, direction=None):
def _index_document(index_list):
def _unpack_response(response, cursor_id=None, codec_options=_UNICODE_REPLACE_CODEC_OPTIONS):
def _check_command_response(response, msg=None, allowable_errors=None, parse_write_concern_error=False):
def _check_gle_response(response):
def _first_batch(sock_info, db, coll, query, ntoreturn, slave_ok, codec_options, read_preference, cmd, listeners):
def _check_write_command_response(results):
def _fields_list_to_dict(fields, option_name):
def _handle_exception():
def _raise_connection_failure(address, error):
def _create_connection(address, options):
def _configured_socket(address, options):
def writable_preferred_server_selector(selection):
def apply_single_tag_set(tag_set, selection):
def apply_tag_sets(tag_sets, selection):
def secondary_with_tags_server_selector(tag_sets, selection):
def member_with_tags_server_selector(tag_sets, selection):
def _randint():
def _maybe_add_read_preference(spec, read_preference):
def _convert_exception(exception):
def _convert_write_result(operation, command, result):
def _gen_explain_command(coll, spec, projection, skip, limit, batch_size, options, read_concern):
def _gen_find_command(coll, spec, projection, skip, limit, batch_size, options, read_concern=DEFAULT_READ_CONCERN, collation=None):
def _gen_get_more_command(cursor_id, coll, batch_size, max_await_time_ms):
def __last_error(namespace, args):
def __pack_message(operation, data):
def insert(collection_name, docs, check_keys, safe, last_error_args, continue_on_error, opts):
def update(collection_name, upsert, multi, spec, doc, safe, last_error_args, check_keys, opts):
def query(options, collection_name, num_to_skip, num_to_return, query, field_selector, opts, check_keys=False):
def get_more(collection_name, num_to_return, cursor_id):
def delete(collection_name, spec, safe, last_error_args, opts, flags=0):
def kill_cursors(cursor_ids):
def _raise_document_too_large(operation, doc_size, max_size):
def _do_batched_insert(collection_name, docs, check_keys, safe, last_error_args, continue_on_error, opts, ctx):
def _do_batched_write_command(namespace, operation, command, docs, check_keys, opts, ctx):
def command(sock, dbname, spec, slave_ok, is_mongos, read_preference, codec_options, check=True, allowable_errors=None, address=None, check_keys=False, listeners=None, max_bson_size=None, read_concern=DEFAULT_READ_CONCERN, parse_write_concern_error=False, collation=None):
def receive_message(sock, operation, request_id, max_message_size=MAX_MESSAGE_SIZE):
def _dnsname_match(dn, hostname, max_wildcards=1):
def _ipaddress_match(ipname, host_ip):
def match_hostname(cert, hostname):
def _make_error(index, code, errmsg, operation):
def _merge_legacy(run, full_result, result, index):
def _merge_command(run, full_result, results):
def wait_for_master(topology):
def partition_nodes(nodes):
def start_subprocess(cmd):
def set_maintenance(member, value):
def _mongo_client(host, port, authenticate=True, direct=False, **kwargs):
def single_client_noauth(h=client_context.host, p=client_context.port, **kwargs):
def single_client(h=client_context.host, p=client_context.port, **kwargs):
def rs_client_noauth(h=client_context.host, p=client_context.port, **kwargs):
def rs_client(h=client_context.host, p=client_context.port, **kwargs):
def rs_or_single_client_noauth(h=client_context.host, p=client_context.port, **kwargs):
def rs_or_single_client(h=client_context.host, p=client_context.port, **kwargs):
def one(s):
def oid_generated_on_client(oid):
def server_started_with_option(client, cmdline_opt, config_opt):
def joinall(threads):
def connected(client):
def wait_until(predicate, success_description, timeout=10):
def assertRaisesExactly(cls, fn, *args, **kwargs):
def ignore_deprecations(wrapped=None):
def read_from_which_host(client, pref, tag_sets=None):
def assertReadFrom(testcase, client, member, *args, **kwargs):
def assertReadFromAll(testcase, client, members, *args, **kwargs):
def get_pool(client):
def get_pools(client):
def run_threads(collection, target):
@contextlib.contextmanager DCNL def frequent_thread_switches():
def lazy_client_trial(reset, target, test, get_client):
def gevent_monkey_patched():
def eventlet_monkey_patched():
def is_server_resolvable():
def test_cases(suite):
def make_server_description(server, hosts):
def _raw_document_class(document_class):
def _parse_codec_options(options):
def dumps(obj, *args, **kwargs):
def loads(s, *args, **kwargs):
def _json_convert(obj, json_options=DEFAULT_JSON_OPTIONS):
def _parse_legacy_uuid(doc):
def _parse_canonical_datetime(doc, json_options):
def _parse_canonical_oid(doc):
def _parse_canonical_symbol(doc):
def _parse_canonical_code(doc):
def _parse_canonical_regex(doc):
def _parse_canonical_dbref(doc):
def _parse_canonical_dbpointer(doc):
def _parse_canonical_int32(doc):
def _parse_canonical_int64(doc):
def _parse_canonical_double(doc):
def _parse_canonical_decimal128(doc):
def _parse_canonical_minkey(doc):
def _parse_canonical_maxkey(doc):
def _raise_unknown_type(element_type, element_name):
def _get_int(data, position, dummy0, dummy1, dummy2):
def _get_c_string(data, position, opts):
def _get_float(data, position, dummy0, dummy1, dummy2):
def _get_string(data, position, obj_end, opts, dummy):
def _get_object(data, position, obj_end, opts, dummy):
def _get_array(data, position, obj_end, opts, element_name):
def _get_binary(data, position, obj_end, opts, dummy1):
def _get_oid(data, position, dummy0, dummy1, dummy2):
def _get_boolean(data, position, dummy0, dummy1, dummy2):
def _get_date(data, position, dummy0, opts, dummy1):
def _get_code(data, position, obj_end, opts, element_name):
def _get_code_w_scope(data, position, obj_end, opts, element_name):
def _get_regex(data, position, dummy0, opts, dummy1):
def _get_ref(data, position, obj_end, opts, element_name):
def _get_timestamp(data, position, dummy0, dummy1, dummy2):
def _get_int64(data, position, dummy0, dummy1, dummy2):
def _get_decimal128(data, position, dummy0, dummy1, dummy2):
def _element_to_dict(data, position, obj_end, opts):
def _elements_to_dict(data, position, obj_end, opts):
def _bson_to_dict(data, opts):
def gen_list_name():
def _make_c_string_check(string):
def _make_c_string(string):
def _encode_float(name, value, dummy0, dummy1):
def _encode_mapping(name, value, check_keys, opts):
def _encode_dbref(name, value, check_keys, opts):
def _encode_list(name, value, check_keys, opts):
def _encode_text(name, value, dummy0, dummy1):
def _encode_binary(name, value, dummy0, dummy1):
def _encode_uuid(name, value, dummy, opts):
def _encode_objectid(name, value, dummy0, dummy1):
def _encode_bool(name, value, dummy0, dummy1):
def _encode_datetime(name, value, dummy0, dummy1):
def _encode_none(name, dummy0, dummy1, dummy2):
def _encode_regex(name, value, dummy0, dummy1):
def _encode_code(name, value, dummy, opts):
def _encode_int(name, value, dummy0, dummy1):
def _encode_timestamp(name, value, dummy0, dummy1):
def _encode_long(name, value, dummy0, dummy1):
def _encode_decimal128(name, value, dummy0, dummy1):
def _encode_minkey(name, dummy0, dummy1, dummy2):
def _encode_maxkey(name, dummy0, dummy1, dummy2):
def _name_value_to_bson(name, value, check_keys, opts):
def _element_to_bson(key, value, check_keys, opts):
def _dict_to_bson(doc, check_keys, opts, top_level=True):
def _millis_to_datetime(millis, opts):
def _datetime_to_millis(dtm):
def decode_all(data, codec_options=DEFAULT_CODEC_OPTIONS):
def decode_iter(data, codec_options=DEFAULT_CODEC_OPTIONS):
def decode_file_iter(file_obj, codec_options=DEFAULT_CODEC_OPTIONS):
def is_valid(bson):
def has_c():
def _machine_bytes():
def create_decimal128_context():
def _decimal_to_128(value):
def _python_cmd(*args):
def _install(archive_filename, install_args=()):
def _build_egg(egg, archive_filename, to_dir):
@contextlib.contextmanager DCNL def archive_context(filename):
def _do_download(version, download_base, to_dir, download_delay):
def use_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=DEFAULT_SAVE_DIR, download_delay=15):
def _conflict_bail(VC_err, version):
def _clean_check(cmd, target):
def download_file_powershell(url, target):
def has_powershell():
def download_file_insecure(url, target):
def download_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=DEFAULT_SAVE_DIR, delay=15, downloader_factory=get_best_downloader):
def _build_install_args(options):
def _parse_args():
def _download_args(options):
def main():
def main(_):
def main(_):
def basic_clean_str(string):
def customized_clean_str(string):
def main_restore_embedding_layer():
def main_lstm_generate_text():
def main(_):
def main(_):
def read_data(source_path, target_path, buckets, EOS_ID, max_size=None):
def main_train():
def main_test():
def basic_clean_str(string):
def customized_clean_str(string):
def main_restore_embedding_layer():
def main_lstm_generate_text():
def main_lstm_generate_text2():
def basic_clean_str(string):
def customized_clean_str(string):
def main_restore_embedding_layer():
def main_lstm_generate_text():
def main_word2vec_basic():
def advanced_indexing_op(input, index):
def retrieve_seq_length_op(data):
def main_test_cnn_layer():
def Vgg19(rgb):
def prepro(I):
def main_test_cnn_naive():
def main_test_cnn_advanced():
def _int64_feature(value):
def _bytes_feature(value):
def _int64_feature_list(values):
def _bytes_feature_list(values):
def distort_image(image, thread_id):
def prefetch_input_data(reader, file_pattern, is_training, batch_size, values_per_shard, input_queue_capacity_factor=16, num_reader_threads=1, shard_queue_name='filename_queue', value_queue_name='input_queue'):
def batch_with_dynamic_pad(images_and_captions, batch_size, queue_capacity, add_summaries=True):
def data_to_tfrecord(images, labels, filename):
def read_and_decode(filename, is_train=None):
def main_test_cnn_layer():
def Vgg19(rgb):
def Vgg19_simple_api(rgb):
def prepro(I):
def model_batch_norm(x, y_, reuse, is_train):
def distort_fn(x, is_train=False):
def _int64_feature(value):
def _bytes_feature(value):
def _int64_feature_list(values):
def _bytes_feature_list(values):
def distort_image(image, thread_id):
def prefetch_input_data(reader, file_pattern, is_training, batch_size, values_per_shard, input_queue_capacity_factor=16, num_reader_threads=1, shard_queue_name='filename_queue', value_queue_name='input_queue'):
def batch_with_dynamic_pad(images_and_captions, batch_size, queue_capacity, add_summaries=True):
def data_to_tfrecord(images, labels, filename):
def read_and_decode(filename, is_train=None):
def get_html_theme_path():
def load_mnist_dataset(shape=((-1), 784), path='data/mnist/'):
def load_cifar10_dataset(shape=((-1), 32, 32, 3), path='data/cifar10/', plotable=False, second=3):
def load_ptb_dataset(path='data/ptb/'):
def load_matt_mahoney_text8_dataset(path='data/mm_test8/'):
def load_imdb_dataset(path='data/imdb/', nb_words=None, skip_top=0, maxlen=None, test_split=0.2, seed=113, start_char=1, oov_char=2, index_from=3):
def load_nietzsche_dataset(path='data/nietzsche/'):
def load_wmt_en_fr_dataset(path='data/wmt_en_fr/'):
def load_flickr25k_dataset(tag='sky', path='data/flickr25k', n_threads=50, printable=False):
def load_flickr1M_dataset(tag='sky', size=10, path='data/flickr1M', n_threads=50, printable=False):
def load_cyclegan_dataset(filename='summer2winter_yosemite', path='data/cyclegan'):
def save_npz(save_list=[], name='model.npz', sess=None):
def load_npz(path='', name='model.npz'):
def assign_params(sess, params, network):
def load_and_assign_npz(sess=None, name=None, network=None):
def save_npz_dict(save_list=[], name='model.npz', sess=None):
def load_npz_dict(path='', name='model.npz'):
def save_ckpt(sess=None, mode_name='model.ckpt', save_dir='checkpoint', var_list=[], global_step=None, printable=False):
def load_ckpt(sess=None, mode_name='model.ckpt', save_dir='checkpoint', var_list=[], is_latest=True, printable=False):
def save_any_to_npy(save_dict={}, name='file.npy'):
def load_npy_to_any(path='', name='file.npy'):
def file_exists(filepath):
def folder_exists(folderpath):
def del_file(filepath):
def del_folder(folderpath):
def read_file(filepath):
def load_file_list(path=None, regx='\\.npz', printable=True):
def load_folder_list(path=''):
def exists_or_mkdir(path, verbose=True):
def maybe_download_and_extract(filename, working_directory, url_source, extract=False, expected_bytes=None):
def natural_keys(text):
def npz_to_W_pdf(path=None, regx='w1pre_[0-9]+\\.(npz)'):
def flatten_reshape(variable, name=''):
def clear_layers_name():
def set_name_reuse(enable=True):
def initialize_rnn_state(state):
def print_all_variables(train_only=False):
def get_variables_with_name(name, train_only=True, printable=False):
def get_layers_with_name(network=None, name='', printable=False):
def list_remove_repeat(l=None):
def initialize_global_variables(sess=None):
def AtrousConv1dLayer(net, n_filter=32, filter_size=2, stride=1, dilation=1, act=None, padding='SAME', use_cudnn_on_gpu=None, data_format='NWC', W_init=tf.truncated_normal_initializer(stddev=0.02), b_init=tf.constant_initializer(value=0.0), W_init_args={}, b_init_args={}, name='conv1d'):
def deconv2d_bilinear_upsampling_initializer(shape):
def Conv1d(net, n_filter=32, filter_size=5, stride=1, dilation_rate=1, act=None, padding='SAME', use_cudnn_on_gpu=None, data_format='NWC', W_init=tf.truncated_normal_initializer(stddev=0.02), b_init=tf.constant_initializer(value=0.0), W_init_args={}, b_init_args={}, name='conv1d'):
def Conv2d(net, n_filter=32, filter_size=(3, 3), strides=(1, 1), act=None, padding='SAME', W_init=tf.truncated_normal_initializer(stddev=0.02), b_init=tf.constant_initializer(value=0.0), W_init_args={}, b_init_args={}, use_cudnn_on_gpu=None, data_format=None, name='conv2d'):
def DeConv2d(net, n_out_channel=32, filter_size=(3, 3), out_size=(30, 30), strides=(2, 2), padding='SAME', batch_size=None, act=None, W_init=tf.truncated_normal_initializer(stddev=0.02), b_init=tf.constant_initializer(value=0.0), W_init_args={}, b_init_args={}, name='decnn2d'):
def MaxPool1d(net, filter_size, strides, padding='valid', data_format='channels_last', name=None):
def MeanPool1d(net, filter_size, strides, padding='valid', data_format='channels_last', name=None):
def MaxPool2d(net, filter_size=(2, 2), strides=None, padding='SAME', name='maxpool'):
def MeanPool2d(net, filter_size=(2, 2), strides=None, padding='SAME', name='meanpool'):
def MaxPool3d(net, filter_size, strides, padding='valid', data_format='channels_last', name=None):
def MeanPool3d(net, filter_size, strides, padding='valid', data_format='channels_last', name=None):
def SubpixelConv2d(net, scale=2, n_out_channel=None, act=tf.identity, name='subpixel_conv2d'):
def SubpixelConv2d_old(net, scale=2, n_out_channel=None, act=tf.identity, name='subpixel_conv2d'):
def SubpixelConv1d(net, scale=2, act=tf.identity, name='subpixel_conv1d'):
def transformer(U, theta, out_size, name='SpatialTransformer2dAffine', **kwargs):
def batch_transformer(U, thetas, out_size, name='BatchSpatialTransformer2dAffine'):
def advanced_indexing_op(input, index):
def retrieve_seq_length_op(data):
def retrieve_seq_length_op2(data):
def discount_episode_rewards(rewards=[], gamma=0.99, mode=0):
def cross_entropy_reward_loss(logits, actions, rewards, name=None):
def log_weight(probs, weights, name='log_weight'):
def choice_action_by_probs(probs=[0.5, 0.5], action_list=None):
def fit(sess, network, train_op, cost, X_train, y_train, x, y_, acc=None, batch_size=100, n_epoch=100, print_freq=5, X_val=None, y_val=None, eval_train=True, tensorboard=False, tensorboard_epoch_freq=5, tensorboard_weight_histograms=True, tensorboard_graph_vis=True):
def test(sess, network, acc, X_test, y_test, x, y_, batch_size, cost=None):
def predict(sess, network, X, x, y_op, batch_size=None):
def evaluation(y_test=None, y_predict=None, n_classes=None):
def dict_to_one(dp_dict={}):
def flatten_list(list_of_list=[[], []]):
def class_balancing_oversample(X_train=None, y_train=None, printable=True):
def get_random_int(min=0, max=10, number=5, seed=None):
def identity(x, name=None):
def ramp(x=None, v_min=0, v_max=1, name=None):
def leaky_relu(x=None, alpha=0.1, name='LeakyReLU'):
def pixel_wise_softmax(output, name='pixel_wise_softmax'):
def generate_skip_gram_batch(data, batch_size, num_skips, skip_window, data_index=0):
def sample(a=[], temperature=1.0):
def sample_top(a=[], top_k=10):
def process_sentence(sentence, start_word='<S>', end_word='</S>'):
def create_vocab(sentences, word_counts_output_file, min_word_count=1):
def simple_read_words(filename='nietzsche.txt'):
def read_words(filename='nietzsche.txt', replace=['\n', '<eos>']):
def read_analogies_file(eval_file='questions-words.txt', word2id={}):
def build_vocab(data):
def build_reverse_dictionary(word_to_id):
def build_words_dataset(words=[], vocabulary_size=50000, printable=True, unk_key='UNK'):
def words_to_word_ids(data=[], word_to_id={}, unk_key='UNK'):
def word_ids_to_words(data, id_to_word):
def save_vocab(count=[], name='vocab.txt'):
def basic_tokenizer(sentence, _WORD_SPLIT=re.compile('([.,!?"\':;)(])')):
def create_vocabulary(vocabulary_path, data_path, max_vocabulary_size, tokenizer=None, normalize_digits=True, _DIGIT_RE=re.compile('\\d'), _START_VOCAB=['_PAD', '_GO', '_EOS', '_UNK']):
def initialize_vocabulary(vocabulary_path):
def sentence_to_token_ids(sentence, vocabulary, tokenizer=None, normalize_digits=True, UNK_ID=3, _DIGIT_RE=re.compile('\\d')):
def data_to_token_ids(data_path, target_path, vocabulary_path, tokenizer=None, normalize_digits=True, UNK_ID=3, _DIGIT_RE=re.compile('\\d')):
def cross_entropy(output, target, name=None):
def sigmoid_cross_entropy(output, target, name=None):
def binary_cross_entropy(output, target, epsilon=1e-08, name='bce_loss'):
def mean_squared_error(output, target, is_mean=False):
def normalized_mean_square_error(output, target):
def dice_coe(output, target, loss_type='jaccard', axis=[1, 2, 3], smooth=1e-05):
def dice_hard_coe(output, target, threshold=0.5, axis=[1, 2, 3], smooth=1e-05):
def iou_coe(output, target, threshold=0.5, axis=[1, 2, 3], smooth=1e-05):
def cross_entropy_seq(logits, target_seqs, batch_size=None):
def cross_entropy_seq_with_mask(logits, target_seqs, input_mask, return_details=False, name=None):
def cosine_similarity(v1, v2):
def li_regularizer(scale, scope=None):
def lo_regularizer(scale, scope=None):
def maxnorm_regularizer(scale=1.0, scope=None):
def maxnorm_o_regularizer(scale, scope):
def maxnorm_i_regularizer(scale, scope=None):
def threading_data(data=None, fn=None, thread_count=None, **kwargs):
def rotation(x, rg=20, is_random=False, row_index=0, col_index=1, channel_index=2, fill_mode='nearest', cval=0.0):
def rotation_multi(x, rg=20, is_random=False, row_index=0, col_index=1, channel_index=2, fill_mode='nearest', cval=0.0):
def crop(x, wrg, hrg, is_random=False, row_index=0, col_index=1, channel_index=2):
def crop_multi(x, wrg, hrg, is_random=False, row_index=0, col_index=1, channel_index=2):
def flip_axis(x, axis, is_random=False):
def flip_axis_multi(x, axis, is_random=False):
def shift(x, wrg=0.1, hrg=0.1, is_random=False, row_index=0, col_index=1, channel_index=2, fill_mode='nearest', cval=0.0):
def shift_multi(x, wrg=0.1, hrg=0.1, is_random=False, row_index=0, col_index=1, channel_index=2, fill_mode='nearest', cval=0.0):
def shear(x, intensity=0.1, is_random=False, row_index=0, col_index=1, channel_index=2, fill_mode='nearest', cval=0.0):
def shear_multi(x, intensity=0.1, is_random=False, row_index=0, col_index=1, channel_index=2, fill_mode='nearest', cval=0.0):
def swirl(x, center=None, strength=1, radius=100, rotation=0, output_shape=None, order=1, mode='constant', cval=0, clip=True, preserve_range=False, is_random=False):
def swirl_multi(x, center=None, strength=1, radius=100, rotation=0, output_shape=None, order=1, mode='constant', cval=0, clip=True, preserve_range=False, is_random=False):
def elastic_transform(x, alpha, sigma, mode='constant', cval=0, is_random=False):
def elastic_transform_multi(x, alpha, sigma, mode='constant', cval=0, is_random=False):
def zoom(x, zoom_range=(0.9, 1.1), is_random=False, row_index=0, col_index=1, channel_index=2, fill_mode='nearest', cval=0.0):
def zoom_multi(x, zoom_range=(0.9, 1.1), is_random=False, row_index=0, col_index=1, channel_index=2, fill_mode='nearest', cval=0.0):
def brightness(x, gamma=1, gain=1, is_random=False):
def brightness_multi(x, gamma=1, gain=1, is_random=False):
def imresize(x, size=[100, 100], interp='bilinear', mode=None):
def samplewise_norm(x, rescale=None, samplewise_center=False, samplewise_std_normalization=False, channel_index=2, epsilon=1e-07):
def featurewise_norm(x, mean=None, std=None, epsilon=1e-07):
def get_zca_whitening_principal_components_img(X):
def zca_whitening(x, principal_components):
def channel_shift(x, intensity, is_random=False, channel_index=2):
def channel_shift_multi(x, intensity, channel_index=2):
def drop(x, keep=0.5):
def transform_matrix_offset_center(matrix, x, y):
def apply_transform(x, transform_matrix, channel_index=2, fill_mode='nearest', cval=0.0):
def projective_transform_by_points(x, src, dst, map_args={}, output_shape=None, order=1, mode='constant', cval=0.0, clip=True, preserve_range=False):
def array_to_img(x, dim_ordering=(0, 1, 2), scale=True):
def find_contours(x, level=0.8, fully_connected='low', positive_orientation='low'):
def pt2map(list_points=[], size=(100, 100), val=1):
def binary_dilation(x, radius=3):
def dilation(x, radius=3):
def pad_sequences(sequences, maxlen=None, dtype='int32', padding='post', truncating='pre', value=0.0):
def process_sequences(sequences, end_id=0, pad_val=0, is_shorten=True, remain_end_id=False):
def sequences_add_start_id(sequences, start_id=0, remove_last=False):
def sequences_get_mask(sequences, pad_val=0):
def distorted_images(images=None, height=24, width=24):
def crop_central_whiten_images(images=None, height=24, width=24):
def read_image(image, path=''):
def read_images(img_list, path='', n_threads=10, printable=True):
def save_image(image, image_path=''):
def save_images(images, size, image_path=''):
def W(W=None, second=10, saveable=True, shape=[28, 28], name='mnist', fig_idx=2396512):
def frame(I=None, second=5, saveable=True, name='frame', cmap=None, fig_idx=12836):
def CNN2d(CNN=None, second=10, saveable=True, name='cnn', fig_idx=3119362):
def images2d(images=None, second=10, saveable=True, name='images', dtype=None, fig_idx=3119362):
def tsne_embedding(embeddings, reverse_dictionary, plot_only=500, second=5, saveable=False, name='tsne', fig_idx=9862):
def exit_tf(sess=None, port=6006):
def open_tb(logdir='/tmp/tensorflow', port=6006):
def clear_all(printable=True):
def set_gpu_fraction(sess=None, gpu_fraction=0.3):
def disable_print():
def enable_print():
@contextmanager DCNL def suppress_stdout():
def get_site_packages_directory():
def empty_trash():
def minibatches(inputs=None, targets=None, batch_size=None, shuffle=False):
def seq_minibatches(inputs, targets, batch_size, seq_length, stride=1):
def seq_minibatches2(inputs, targets, batch_size, num_steps):
def ptb_iterator(raw_data, batch_size, num_steps):
def read_random_bits(nbits):
def read_random_int(nbits):
def read_random_odd_int(nbits):
def randint(maxvalue):
def gcd(p, q):
def bytes2int(bytes):
def int2bytes(number):
def fast_exponentiation(a, p, n):
def read_random_int(nbits):
def ceil(x):
def randint(minvalue, maxvalue):
def fermat_little_theorem(p):
def jacobi(a, b):
def jacobi_witness(x, n):
def randomized_primality_testing(n, k):
def is_prime(number):
def getprime(nbits):
def are_relatively_prime(a, b):
def find_p_q(nbits):
def extended_euclid_gcd(a, b):
def calculate_keys(p, q, nbits):
def gen_keys(nbits):
def gen_pubpriv_keys(nbits):
def encrypt_int(message, ekey, n):
def decrypt_int(cyphertext, dkey, n):
def sign_int(message, dkey, n):
def verify_int(signed, ekey, n):
def picklechops(chops):
def unpicklechops(string):
def chopstring(message, key, n, funcref):
def gluechops(chops, key, n, funcref):
def encrypt(message, key):
def sign(message, key):
def decrypt(cypher, key):
def verify(cypher, key):
def bit_size(number):
def gcd(p, q):
def bytes2int(bytes):
def int2bytes(number):
def to64(number):
def from64(number):
def int2str64(number):
def str642int(string):
def read_random_int(nbits):
def randint(minvalue, maxvalue):
def jacobi(a, b):
def jacobi_witness(x, n):
def randomized_primality_testing(n, k):
def is_prime(number):
def getprime(nbits):
def are_relatively_prime(a, b):
def find_p_q(nbits):
def extended_gcd(a, b):
def calculate_keys(p, q, nbits):
def gen_keys(nbits):
def newkeys(nbits):
def encrypt_int(message, ekey, n):
def decrypt_int(cyphertext, dkey, n):
def encode64chops(chops):
def decode64chops(string):
def chopstring(message, key, n, funcref):
def gluechops(string, key, n, funcref):
def encrypt(message, key):
def sign(message, key):
def decrypt(cypher, key):
def verify(cypher, key):
def encrypt_int(message, ekey, n):
def decrypt_int(cyphertext, dkey, n):
def gcd(p, q):
def miller_rabin_primality_testing(n, k):
def is_prime(number):
def getprime(nbits):
def are_relatively_prime(a, b):
def _markers(pem_marker):
def load_pem(contents, pem_marker):
def save_pem(contents, pem_marker):
def private_to_public():
def bit_size(num):
def _bit_size(number):
def byte_size(number):
def extended_gcd(a, b):
def inverse(x, n):
def crt(a_values, modulo_values):
def is_bytes(obj):
def is_integer(obj):
def byte(num):
def get_word_alignment(num, force_arch=64, _machine_word_size=MACHINE_WORD_SIZE):
def _pad_for_encryption(message, target_length):
def _pad_for_signing(message, target_length):
def encrypt(message, pub_key):
def decrypt(crypto, priv_key):
def sign(message, priv_key, hash):
def verify(message, signature, pub_key):
def _hash(message, method_name):
def _find_method_hash(clearsig):
def find_p_q(nbits, getprime_func=rsa.prime.getprime, accurate=True):
def calculate_keys_custom_exponent(p, q, exponent):
def calculate_keys(p, q):
def gen_keys(nbits, getprime_func, accurate=True, exponent=DEFAULT_EXPONENT):
def newkeys(nbits, accurate=True, poolsize=1, exponent=DEFAULT_EXPONENT):
def getprime(nbits, poolsize):
def encrypt_bigfile(infile, outfile, pub_key):
def decrypt_bigfile(infile, outfile, priv_key):
def bytes2int(raw_bytes):
def _int2bytes(number, block_size=None):
def bytes_leading(raw_bytes, needle=ZERO_BYTE):
def int2bytes(number, fill_size=None, chunk_size=None, overflow=False):
def keygen():
def read_varint(infile):
def write_varint(outfile, value):
def yield_varblocks(infile):
def yield_fixedblocks(infile, blocksize):
def set_default_proxy(proxy_type=None, addr=None, port=None, rdns=True, username=None, password=None):
def get_default_proxy():
def wrap_module(module):
def create_connection(dest_pair, proxy_type=None, proxy_addr=None, proxy_port=None, proxy_username=None, proxy_password=None, timeout=None, source_address=None):
def encode(obj):
def decode(data):
def setupComponent():
def hmac_sha256(k, m):
def hmac_sha512(k, m):
def get_version(version=None):
def is_testnet(inp):
def set_network(*args):
def get_tx_composite(inputs, outputs, output_value, change_address=None, network=None):
def new(arg=None):
def is_bip66(sig):
def b58encode(v):
def perform_m_search(local_ip):
def _retrieve_location_from_ssdp(response):
def _retrieve_igd_profile(url):
def _get_first_child_data(node):
def _parse_igd_profile(profile_xml):
def _create_open_message(local_ip, port, description='UPnPPunch', protocol='TCP', upnp_schema='WANIPConnection'):
def _send_soap_request(location, upnp_schema, control_path, soap_fn, soap_message):
def _communicate_with_igd(port=15441, desc='UpnpPunch', retries=3, fn=_create_open_message, protos=('TCP', 'UDP')):
def initRpc(config):
def open_database(database, mode=MODE_AUTO):
def Reader(database):
def IPAddress(address, version=None):
def IPNetwork(address, version=None, strict=False):
def v4_int_to_packed(address):
def v6_int_to_packed(address):
def _find_address_range(addresses):
def _get_prefix_length(number1, number2, bits):
def _count_righthand_zero_bits(number, bits):
def summarize_address_range(first, last):
def _collapse_address_list_recursive(addresses):
def collapse_address_list(addresses):
def get_mixed_type_key(obj):
def initRpc(config):
def create_tileset(filename, name, type, version, description, format, bounds=None):
def tileset_exists(filename):
def tileset_info(filename):
def list_tiles(filename):
def get_tile(filename, coord):
def delete_tile(filename, coord):
def put_tile(filename, coord, content):
def tile_key(layer, coord, format, key_prefix):
def tile_key(layer, coord, format):
def decode(file):
def encode(file, features):
def _next_int(file):
def merge(file, feature_layers, coord):
def copy_byte(src, dest):
def copy_int_little(src, dest):
def copy_int_big(src, dest):
def approx_point_little(src, dest):
def approx_point_big(src, dest):
def approx_line(src, dest, copy_int, approx_point):
def approx_polygon(src, dest, copy_int, approx_point):
def approx_geometry(src, dest):
def approximate_wkb(wkb_in):
def query_columns(dbinfo, srid, subquery, bounds):
def build_query(srid, subquery, subcolumns, bounds, tolerance, is_geo, is_clipped, padding=0, scale=None):
def utf8_keys(dictionary):
def list_tiles(query, zoom_adjust):
def load_features(jobs, host, port, path, tiles):
def load_tile_features(lock, host, port, path_fmt, tiles, features):
def get_tiles(names, config, coord):
def update_arc_indexes(geometry, merged_arcs, old_arcs):
def get_transform(bounds, size=1024):
def diff_encode(line, transform):
def decode(file):
def encode(file, features, bounds, is_clipped):
def merge(file, names, config, coord):
def transform(shape, func):
def get_tiles(names, config, coord):
def mercator(xy):
def decode(file):
def encode(file, features, zoom, is_clipped):
def merge(file, names, config, coord):
def get_mapnikMap(mapfile):
def build_stack(obj):
def make_color(color):
def _arr2img(ar):
def _img2arr(im):
def _rgba2img(rgba):
def _img2rgba(im):
def apply_adjustments(rgba, adjustments):
def apply_threshold_adjustment(rgba, red_value, green_value=None, blue_value=None):
def apply_curves_adjustment(rgba, black_grey_white):
def apply_curves2_adjustment(rgba, map_red, map_green=None, map_blue=None):
def blend_images(bottom_rgba, top_rgb, mask_chan, opacity, blendmode):
def blend_channels_screen(bottom_chan, top_chan):
def blend_channels_multiply(bottom_chan, top_chan):
def blend_channels_linear_light(bottom_chan, top_chan):
def blend_channels_hard_light(bottom_chan, top_chan):
def makeColor(color):
def makeLayer(element):
def makeStack(element):
def row2feature(row, id_field, geometry_field):
def _p2p(xy, projection):
def shape2geometry(shape, projection, clip):
def coordinate_latlon_bbox(coord, projection):
def download_api_data(filename, coord, api_base, projection):
def prepare_data(filename, tmp_prefix, dbargs, osm2pgsql, projection):
def create_tables(db, prefix, tmp_prefix):
def populate_tables(db, prefix, tmp_prefix, bounds):
def clean_up_tables(db, tmp_prefix):
def coordinate_bbox(coord, projection):
def prepare_database(db, coord, projection):
def lat2hemi(lat):
def lon2zone(lon):
def lat2zone(lat):
def lonlat2grid(lon, lat):
def utm2mgrs(e, n, grid, zeros=0):
def transform(w, h, xmin, ymin, xmax, ymax):
def update_status(msg, **redis_kwargs):
def delete_statuses(pid, **redis_kwargs):
def get_recent(**redis_kwargs):
def nice_time(time):
def pid_indent(pid):
def status_response(**redis_kwargs):
def tile_key(layer, coord, format, rev, key_prefix):
def buildConfiguration(config_dict, dirpath='.'):
def enforcedLocalPath(relpath, dirpath, context='Path'):
def _parseConfigCache(cache_dict, dirpath):
def _parseLayerBounds(bounds_dict, projection):
def _parseConfigLayer(layer_dict, config, dirpath):
def local_bitmap(source, config, coord, dim):
def layer_bitmap(layer, coord):
def in_zoom(coord, range):
def make_color(color):
def getTile(layer, coord, extension, ignore_cached=False):
def getPreview(layer):
def parseConfig(configHandle):
def splitPathInfo(pathinfo):
def mergePathInfo(layer, coord, extension):
def requestLayer(config, path_info):
def requestHandler(config_hint, path_info, query_string=None):
def cgiHandler(environ, config='./tilestache.cfg', debug=False):
def modpythonHandler(request):
def getProjectionByName(name):
def getCacheByName(name):
def load_palette(file_href):
def palette_color(r, g, b, palette, t_index):
def apply_palette(image, palette, t_index):
def apply_palette256(image):
def tile_key(layer, coord, format, path=''):
def _sref_4326():
def _tile_perimeter(coord, projection, padded):
def _tile_perimeter_width(coord, projection):
def _tile_perimeter_geom(coord, projection, padded):
def _feature_properties(feature, layer_definition, whitelist=None, skip_empty_fields=False):
def _open_layer(driver_name, parameters, dirpath):
def _get_features(coord, properties, projection, layer, clipped, projected, spacing, id_property, skip_empty_fields=False):
def reserialize_to_arc(content, point_objects):
def merge_grids(grid1, grid2):
def get_mapnikMap(mapfile):
def put_original_alpha(original_image, new_image):
def _addRecentTile(layer, coord, format, body, age=300):
def _getRecentTile(layer, coord, format):
def _preview(layer):
def _rummy():
def loadClassPath(classpath):
def getProviderByName(name):
def request(config_content, layer_name, format, row, column, zoom):
def create_temp_file(buffer):
def create_dummy_server(file_with_content, mimetype):
def find_open_port():
def get_topo_transform(topojson):
def topojson_dediff(points):
def printlocked(lock, *stuff):
def generateCoordinates(ul, lr, zooms, padding):
def tilesetCoordinates(filename):
def generateCoordinates(ul, lr, zooms, padding):
def listCoordinates(filename):
def tilesetCoordinates(filename):
def parseConfig(configpath):
def generateCoordinates(ul, lr, zooms, padding):
def listCoordinates(filename):
def render_icon(icon, **kwargs):
def render_alert(content, alert_type=None, dismissable=True):
def handle_var(value, context):
def parse_token_contents(parser, token):
def split_css_classes(css_classes):
def add_css_class(css_classes, css_class, prepend=False):
def remove_css_class(css_classes, css_class):
def render_link_tag(url, rel=u'stylesheet', media=None):
def render_tag(tag, attrs=None, content=None, close=True):
def render_template_file(template, context=None):
def url_replace_param(url, name, value):
@register.filter DCNL def bootstrap_setting(value):
@register.filter DCNL def bootstrap_message_classes(message):
@register.simple_tag DCNL def bootstrap_jquery_url():
@register.simple_tag DCNL def bootstrap_javascript_url():
@register.simple_tag DCNL def bootstrap_css_url():
@register.simple_tag DCNL def bootstrap_theme_url():
@register.simple_tag DCNL def bootstrap_css():
@register.simple_tag DCNL def bootstrap_javascript(jquery=None):
@register.simple_tag DCNL def bootstrap_formset(*args, **kwargs):
@register.simple_tag DCNL def bootstrap_formset_errors(*args, **kwargs):
@register.simple_tag DCNL def bootstrap_form(*args, **kwargs):
@register.simple_tag DCNL def bootstrap_form_errors(*args, **kwargs):
@register.simple_tag DCNL def bootstrap_field(*args, **kwargs):
@register.simple_tag() DCNL def bootstrap_label(*args, **kwargs):
@register.simple_tag DCNL def bootstrap_button(*args, **kwargs):
@register.simple_tag DCNL def bootstrap_icon(icon, **kwargs):
@register.simple_tag DCNL def bootstrap_alert(content, alert_type=u'info', dismissable=True):
@register.tag(u'buttons') DCNL def bootstrap_buttons(parser, token):
@register.simple_tag(takes_context=True) DCNL def bootstrap_messages(context, *args, **kwargs):
@register.inclusion_tag(u'bootstrap3/pagination.html') DCNL def bootstrap_pagination(page, **kwargs):
def get_pagination_context(page, pages_to_show=11, url=None, size=None, extra=None, parameter_name=u'page'):
def format_html_pre_18(format_string, *args, **kwargs):
def text_value(value):
def text_concat(*args, **kwargs):
def render_template(text, context=None):
def render_template_with_bootstrap(text, context=None):
def render_template_with_form(text, context=None):
def render_formset(formset=None, context=None):
def render_form(form=None, context=None):
def render_form_field(field, context=None):
def render_field(field, context=None):
def get_bootstrap_setting(setting, default=None):
def bootstrap_url(postfix):
def jquery_url():
def javascript_url():
def css_url():
def theme_url():
def render_formset(formset, **kwargs):
def render_formset_errors(formset, **kwargs):
def render_form(form, **kwargs):
def render_form_errors(form, error_types=u'non_field_errors', **kwargs):
def render_field(field, **kwargs):
def render_label(content, label_for=None, label_class=None, label_title=u''):
def render_button(content, button_type=None, icon=None, button_class=u'btn-default', size=u'', href=u'', name=None, value=None, title=None, extra_classes=u'', id=u''):
def render_field_and_label(field, label, field_class=u'', label_for=None, label_class=u'', layout=u'', **kwargs):
def render_form_group(content, css_class=FORM_GROUP_CLASS):
def is_widget_required_attribute(widget):
def is_widget_with_placeholder(widget):
def geojson2csv(f, key=None, **kwargs):
def guess_format(filename):
def fixed2csv(f, schema, output=None, skip_lines=0, **kwargs):
def standardize_patterns(column_names, patterns):
def make_default_headers(n):
def match_column_identifier(column_names, c, column_offset=1):
def parse_column_identifiers(ids, column_names, column_offset=1, excluded_columns=None):
def join_rows(rows, joiner=' DCSP '):
def get_module(module_path):
def load_audio(path, sample_length=64000, sr=16000):
def mu_law(x, mu=255, int8=False):
def inv_mu_law(x, mu=255):
def inv_mu_law_numpy(x, mu=255.0):
def trim_for_encoding(wav_data, sample_length, hop_length=512):
def get_optimizer(learning_rate, hparams):
def specgram(audio, n_fft=512, hop_length=None, mask=True, log_mag=True, re_im=False, dphase=True, mag_only=False):
def griffin_lim(mag, phase_angle, n_fft, hop, num_iters):
def ispecgram(spec, n_fft=512, hop_length=None, mask=True, log_mag=True, re_im=False, dphase=True, mag_only=True, num_iters=1000):
def form_image_grid(input_tensor, grid_shape, image_shape, num_channels):
def specgram_summaries(spec, name, hparams, rows=4, columns=4, image=True, phase=True, audio=True):
def calculate_softmax_and_summaries(logits, one_hot_labels, name):
def calculate_sparse_softmax_and_summaries(logits, labels, name):
def softmax_summaries(loss, logits, one_hot_labels, name='softmax'):
def calculate_l2_and_summaries(predicted_vectors, true_vectors, name):
def frequency_weighted_cost_mask(peak=10.0, hz_flat=1000, sr=16000, n_fft=512):
def pitch_embeddings(batch, timesteps=1, n_pitches=128, dim_embedding=128, reuse=False):
def slim_batchnorm_arg_scope(is_training, activation_fn=None):
def conv2d(x, kernel_size, stride, channels, is_training, scope='conv2d', batch_norm=False, residual=False, gated=False, activation_fn=tf.nn.relu, resize=False, transpose=False, stacked_layers=1):
def leaky_relu(leak=0.1):
def causal_linear(x, n_inputs, n_outputs, name, filter_length, rate, batch_size):
def linear(x, n_inputs, n_outputs, name):
def shift_right(x):
def mul_or_none(a, b):
def time_to_batch(x, block_size):
def batch_to_time(x, block_size):
def conv1d(x, num_filters, filter_length, name, dilation=1, causal=True, kernel_initializer=tf.uniform_unit_scaling_initializer(1.0), biases_initializer=tf.constant_initializer(0.0)):
def pool1d(x, window_length, name, mode='avg', stride=None):
def sample_categorical(pmf):
def load_nsynth(batch_size=1, sample_length=64000):
def load_fastgen_nsynth(batch_size=1):
def encode(wav_data, checkpoint_path, sample_length=64000):
def load_batch(files, sample_length=64000):
def synthesize(encodings, save_paths, checkpoint_path='model.ckpt-200000', samples_per_save=1000):
def encode(x, hparams, is_training=True, reuse=False):
def decode(z, batch, hparams, is_training=True, reuse=False):
def get_hparams(config_name):
def compute_mse_loss(x, xhat, hparams):
def train_op(batch, hparams, config_name):
def eval_op(batch, hparams, config_name):
def save_arrays(savedir, hparams, z_val):
def get_checkpoint():
def get_bundle():
def run_with_flags(generator):
def main(unused_argv):
def get_pipeline(config, eval_ratio):
def get_generator_map():
def config_from_flags():
def get_checkpoint():
def get_bundle():
def run_with_flags(generator):
def main(unused_argv):
def extract_polyphonic_sequences(quantized_sequence, start_step=0, min_steps_discard=None, max_steps_discard=None):
def get_pipeline(config, min_steps, max_steps, eval_ratio):
def _inject_melody(melody, start_step, encoder_decoder, event_sequences, inputs):
def get_generator_map():
def config_from_flags():
def get_checkpoint():
def get_bundle():
def run_with_flags(generator):
def main(unused_argv):
def get_generator_map():
def get_pipeline(config, eval_ratio):
def get_pipeline(config, eval_ratio):
def get_checkpoint():
def get_bundle():
def run_with_flags(generator):
def main(unused_argv):
def one_hot_melody_encoder_decoder(min_note, max_note):
def lookback_melody_encoder_decoder(min_note, max_note):
def config_from_flags():
def get_generator_map():
def make_rnn_cell(rnn_layer_sizes, dropout_keep_prob=1.0, attn_length=0, base_cell=tf.contrib.rnn.BasicLSTMCell):
def build_graph(mode, config, sequence_example_file_paths=None):
def _extend_control_events_default(control_events, events, state):
def run_training(graph, train_dir, num_training_steps=None, summary_frequency=10, save_checkpoint_secs=60, checkpoints_to_keep=10):
def run_eval(graph, train_dir, eval_dir, num_batches, timeout_secs=300):
def compute_composition_stats(rl_tuner, num_compositions=10000, composition_length=32, key=None, tonic_note=rl_tuner_ops.C_MAJOR_TONIC):
def get_stat_dict_string(stat_dict, print_interval_stats=True):
def compose_and_evaluate_piece(rl_tuner, stat_dict, composition_length=32, key=None, tonic_note=rl_tuner_ops.C_MAJOR_TONIC, sample_next_obs=True):
def initialize_stat_dict():
def add_interval_stat(rl_tuner, action, stat_dict, key=None):
def add_in_key_stat(action_note, stat_dict, key=None):
def add_tonic_start_stat(rl_tuner, action_note, stat_dict, tonic_note=rl_tuner_ops.C_MAJOR_TONIC):
def add_repeating_note_stat(rl_tuner, action_note, stat_dict):
def add_motif_stat(rl_tuner, action, stat_dict):
def add_repeated_motif_stat(rl_tuner, action, stat_dict):
def add_leap_stats(rl_tuner, action, stat_dict):
def add_high_low_unique_stats(rl_tuner, stat_dict):
def reload_files():
def default_hparams():
def basic_rnn_hparams():
def default_dqn_hparams():
def autocorrelate(signal, lag=1):
def linear_annealing(n, total, p_initial, p_final):
def softmax(x):
def sample_softmax(softmax_vect):
def decoder(event_list, transpose_amount):
def make_onehot(int_list, one_hot_length):
def get_inner_scope(scope_str):
def trim_variable_postfixes(scope_str):
def get_variable_names(graph, scope):
def get_next_file_name(directory, prefix, extension):
def make_rnn_cell(rnn_layer_sizes, state_is_tuple=False):
def log_sum_exp(xs):
def _parse_style_files(style_files):
def _float_feature(value):
def _int64_feature(value):
def _bytes_feature(value):
def precompute_gram_matrices(image, final_endpoint='fc8'):
def total_loss(inputs, stylized_inputs, style_gram_matrices, content_weights, style_weights, reuse=False):
def content_loss(end_points, stylized_end_points, content_weights):
def style_loss(style_gram_matrices, end_points, style_weights):
def _gram_matrix(feature_maps):
def imagenet_inputs(batch_size, image_size, num_readers=1, num_preprocess_threads=4):
def style_image_inputs(style_dataset_file, batch_size=None, image_size=None, square_crop=False, shuffle=True):
def load_np_image(image_file):
def save_np_image(image, output_file):
def load_image(image_file, image_size=None):
def load_evaluation_images(image_size):
def form_image_grid(input_tensor, grid_shape, image_shape, num_channels):
def _crop(image, offset_height, offset_width, crop_height, crop_width):
def _central_crop(image_list, crop_height, crop_width):
def _smallest_size_at_least(height, width, smallest_side):
def _aspect_preserving_resize(image, smallest_side):
def _decode_jpeg(image_buffer, scope=None):
def _parse_example_proto(example_serialized):
def _load_checkpoint(sess, checkpoint):
def _describe_style(which_styles):
def _style_mixture(which_styles, num_styles):
def _multiple_images(input_image, which_styles, output_dir):
def _multiple_styles(input_image, which_styles, output_dir):
def transform(input_, normalizer_fn=ops.conditional_instance_norm, normalizer_params=None, reuse=False):
def _conv2d(input_, kernel_size, stride, num_outputs, scope, activation_fn=tf.nn.relu):
def _upsampling(input_, kernel_size, stride, num_outputs, scope, activation_fn=tf.nn.relu):
def _residual_block(input_, kernel_size, scope, activation_fn=tf.nn.relu):
@slim.add_arg_scope DCNL def conditional_instance_norm(inputs, labels, num_categories, center=True, scale=True, activation_fn=None, reuse=None, variables_collections=None, outputs_collections=None, trainable=True, scope=None):
@slim.add_arg_scope DCNL def weighted_instance_norm(inputs, weights, num_categories, center=True, scale=True, activation_fn=None, reuse=None, variables_collections=None, outputs_collections=None, trainable=True, scope=None):
def checkpoint_file():
def vgg_16(inputs, reuse=False, pooling='avg', final_endpoint='fc8'):
def get_pipeline(config, min_steps, max_steps, eval_ratio):
def get_generator_map():
def safe_log(tensor):
def build_graph(mode, config, sequence_example_file_paths=None):
def get_checkpoint():
def get_bundle():
def run_with_flags(generator):
def main(unused_argv):
def reset_graph():
def load_env(data_dir, model_dir):
def load_model(model_dir):
def download_pretrained_models(models_root_dir='/tmp/sketch_rnn/models', pretrained_models_url=PRETRAINED_MODELS_URL):
def load_dataset(data_dir, model_params, inference_mode=False):
def evaluate_model(sess, model, data_set):
def train(sess, model, eval_model, train_set, valid_set, test_set):
def trainer(model_params):
def main(unused_argv):
def get_bounds(data, factor=10):
def slerp(p0, p1, t):
def lerp(p0, p1, t):
def strokes_to_lines(strokes):
def lines_to_strokes(lines):
def augment_strokes(strokes, prob=0.0):
def scale_bound(stroke, average_dimension=10.0):
def to_normal_strokes(big_stroke):
def clean_strokes(sample_strokes, factor=100):
def to_big_strokes(stroke, max_len=250):
def get_max_len(strokes):
def orthogonal(shape):
def orthogonal_initializer(scale=1.0):
def lstm_ortho_initializer(scale=1.0):
def layer_norm_all(h, batch_size, base, num_units, scope='layer_norm', reuse=False, gamma_start=1.0, epsilon=0.001, use_bias=True):
def layer_norm(x, num_units, scope='layer_norm', reuse=False, gamma_start=1.0, epsilon=0.001, use_bias=True):
def super_linear(x, output_size, scope=None, reuse=False, init_w='ortho', weight_start=0.0, use_bias=True, bias_start=0.0, input_size=None):
def copy_hparams(hparams):
def get_default_hparams():
def sample(sess, model, seq_len=250, temperature=1.0, greedy_mode=False, z=None):
def get_checkpoint():
def get_bundle():
def run_with_flags(generator):
def main(unused_argv):
def get_pipeline(config, min_events, max_events, eval_ratio):
def get_generator_map():
def performance_note_density_sequence(performance, window_size_seconds):
def performance_pitch_histogram_sequence(performance, window_size_seconds, prior_count=0.01):
def extract_performances(quantized_sequence, start_step=0, min_events_discard=None, max_events_truncate=None, num_velocity_bins=0):
def assert_set_equality(test_case, expected, actual):
def _generate_branches(beam_entries, generate_step_fn, branch_factor, num_steps):
def _prune_branches(beam_entries, k):
def beam_search(initial_sequence, initial_state, generate_step_fn, num_steps, beam_size, branch_factor, steps_per_iteration):
def serialized(func):
def make_sequence_example(inputs, labels):
def _shuffle_inputs(input_tensors, capacity, min_after_dequeue, num_threads):
def get_padded_batch(file_list, batch_size, input_size, num_enqueuing_threads=4, shuffle=False):
def count_records(file_list, stop_at=None):
def flatten_maybe_padded_sequences(maybe_padded_sequences, lengths=None):
def unbatch(batched_states, batch_size=1):
def extract_state(batched_states, i):
def batch(states, batch_size=None):
def merge_statistics(stats_list):
def log_statistics_list(stats_list, logger_fn=tf.logging.info):
def _all_are_type(elements, target_type):
def _assert_valid_type_signature(type_sig, type_sig_name):
def file_iterator(root_dir, extension=None, recurse=True):
def tf_record_iterator(tfrecord_file, proto):
def run_pipeline_serial(pipeline, input_iterator, output_dir, output_file_base=None):
def load_pipeline(pipeline, input_iterator):
def queue_conversions(root_dir, sub_dir, pool, recursive=False):
def convert_midi(root_dir, sub_dir, full_file_path):
def convert_musicxml(root_dir, sub_dir, full_file_path):
def convert_directory(root_dir, output_file, num_threads, recursive=False):
def generate_note_sequence_id(filename, collection_name, source_type):
def note_sequence_record_iterator(path):
def extract_melodies(quantized_sequence, search_start_step=0, min_bars=7, max_steps_truncate=None, max_steps_discard=None, gap_bars=1.0, min_unique_pitches=5, ignore_polyphonic_notes=True, pad_end=False, filter_drums=True):
def midi_file_to_melody(midi_file, steps_per_quarter=4, qpm=None, ignore_polyphonic_notes=True):
def _checkpoint_file_exists(checkpoint_file_or_prefix):
def _parse_pitch_class(pitch_class_str):
def _parse_root(root_str):
def _parse_degree(degree_str):
def _parse_kind(kind_str):
def _parse_modifications(modifications_str):
def _parse_bass(bass_str):
def _apply_modifications(degrees, modifications):
def _split_chord_symbol(figure):
def _parse_chord_symbol(figure):
def _transpose_pitch_class(step, alter, transpose_amount):
def _pitch_class_to_string(step, alter):
def _pitch_class_to_midi(step, alter):
def _largest_chord_kind_from_degrees(degrees):
def _largest_chord_kind_from_relative_pitches(relative_pitches):
def _degrees_to_modifications(chord_degrees, target_chord_degrees):
def transpose_chord_symbol(figure, transpose_amount):
def pitches_to_chord_symbol(pitches):
def chord_symbol_pitches(figure):
def chord_symbol_root(figure):
def chord_symbol_bass(figure):
def chord_symbol_quality(figure):
def midi_to_sequence_proto(midi_data):
def sequence_proto_to_pretty_midi(sequence, drop_events_n_seconds_after_last_note=None):
def midi_file_to_sequence_proto(midi_file):
def sequence_proto_to_midi_file(sequence, output_file, drop_events_n_seconds_after_last_note=None):
def extract_chords(quantized_sequence, max_steps=None, all_transpositions=False):
def extract_chords_for_melodies(quantized_sequence, melodies):
def extract_lead_sheet_fragments(quantized_sequence, search_start_step=0, min_bars=7, max_steps_truncate=None, max_steps_discard=None, gap_bars=1.0, min_unique_pitches=5, ignore_polyphonic_notes=True, pad_end=False, filter_drums=True, require_chords=False, all_transpositions=False):
def synthesize(sequence, sample_rate, wave=np.sin):
def fluidsynth(sequence, sample_rate, sf2_path=None):
def trim_note_sequence(sequence, start_time, end_time):
def extract_subsequence(sequence, start_time, end_time):
def is_quantized_sequence(note_sequence):
def is_relative_quantized_sequence(note_sequence):
def is_absolute_quantized_sequence(note_sequence):
def assert_is_quantized_sequence(note_sequence):
def assert_is_relative_quantized_sequence(note_sequence):
def assert_is_absolute_quantized_sequence(note_sequence):
def steps_per_bar_in_quantized_sequence(note_sequence):
def split_note_sequence(note_sequence, hop_size_seconds, skip_splits_inside_notes=False):
def split_note_sequence_on_time_changes(note_sequence, skip_splits_inside_notes=False):
def quantize_to_step(unquantized_seconds, steps_per_second, quantize_cutoff=QUANTIZE_CUTOFF):
def steps_per_quarter_to_steps_per_second(steps_per_quarter, qpm):
def _quantize_notes(note_sequence, steps_per_second):
def quantize_note_sequence(note_sequence, steps_per_quarter):
def quantize_note_sequence_absolute(note_sequence, steps_per_second):
def stretch_note_sequence(note_sequence, stretch_factor):
def apply_sustain_control_changes(note_sequence, sustain_control_number=64):
def infer_chords_for_sequence(sequence, instrument=None, min_notes_per_chord=3):
def play_sequence(sequence, synth=midi_synth.synthesize, sample_rate=_DEFAULT_SAMPLE_RATE, **synth_args):
def plot_sequence(sequence, show_figure=True):
def download_bundle(bundle_name, target_dir, force_reload=False):
def musicxml_to_sequence_proto(musicxml_document):
def musicxml_file_to_sequence_proto(musicxml_file):
def note_interval_tree_to_sequence_proto(note_interval_tree, sample_rate):
def musicnet_iterator(musicnet_file):
def extract_pianoroll_sequences(quantized_sequence, start_step=0, min_steps_discard=None, max_steps_discard=None, max_steps_truncate=None):
def extract_drum_tracks(quantized_sequence, search_start_step=0, min_bars=7, max_steps_truncate=None, max_steps_discard=None, gap_bars=1.0, pad_end=False, ignore_is_drum=False):
def midi_file_to_drum_track(midi_file, steps_per_quarter=4):
def get_available_input_ports():
def get_available_output_ports():
def _validate_flags():
def _load_generator_from_bundle_file(bundle_file):
def _print_instructions():
def adjust_sequence_times(sequence, delta_time):
def lstm(inputs, hparams, train, name, initial_state=None):
def lstm_attention_decoder(inputs, hparams, train, name, initial_state, attn_states):
def lstm_seq2seq_internal(inputs, targets, hparams, train):
def lstm_seq2seq_internal_attention(inputs, targets, hparams, train):
@registry.register_hparams DCNL def lstm_attention():
def composite_layer(inputs, mask, hparams, for_output=False):
def alt_transformer_encoder(encoder_input, residual_fn, mask, hparams, name='encoder'):
def alt_transformer_decoder(decoder_input, encoder_output, residual_fn, encoder_decoder_attention_bias, hparams, name='decoder'):
@registry.register_hparams DCNL def transformer_alt():
def shake_shake_block(x, conv_filters, stride, hparams):
@registry.register_hparams DCNL def shakeshake_cifar10():
@registry.register_hparams DCNL def transformer_moe_base():
@registry.register_hparams DCNL def transformer_no_moe():
@registry.register_hparams DCNL def transformer_moe_1b():
def residual_dilated_conv(x, repeat, padding, name, hparams):
def bytenet_internal(inputs, targets, hparams):
@registry.register_hparams DCNL def bytenet_base():
def long_answer_prepare_decoder(inputs, targets, hparams):
def length_embedding(targets, hparams):
def long_answer_output(x, inputs):
@registry.register_hparams DCNL def long_answer_base():
@registry.register_hparams DCNL def long_answer_tiny():
@registry.register_hparams DCNL def long_answer_small():
@registry.register_hparams DCNL def long_answer_large():
def conv_res_step(x, hparams, padding, mask):
def conv_experts(xs, hparams, dp, ps, padding, mask, layer_id):
def prepare_decoder(targets, target_space_emb):
@registry.register_hparams DCNL def multimodel_base():
@registry.register_hparams DCNL def multimodel_tiny():
def transformer_prepare_encoder(inputs, target_space, hparams):
def transformer_prepare_decoder(targets, hparams):
def transformer_encoder(encoder_input, encoder_self_attention_bias, hparams, name='encoder'):
def transformer_decoder(decoder_input, encoder_output, decoder_self_attention_bias, encoder_decoder_attention_bias, hparams, name='decoder'):
def transformer_ffn_layer(x, hparams):
@registry.register_hparams DCNL def transformer_base():
@registry.register_hparams DCNL def transformer_n_da():
@registry.register_hparams DCNL def transformer_big():
@registry.register_hparams DCNL def transformer_big_single_gpu():
@registry.register_hparams DCNL def transformer_base_single_gpu():
@registry.register_hparams DCNL def transformer_parsing_base():
@registry.register_hparams DCNL def transformer_parsing_big():
@registry.register_hparams DCNL def transformer_parsing_ice():
@registry.register_ranged_hparams('transformer_base') DCNL def transformer_base_range(rhp):
def residual_conv(x, repeat, hparams, name, reuse=None):
def decompress_step(source, hparams, first_relu, name):
def compress(inputs, hparams, name):
def vae_compress(inputs, hparams, compress_name, decompress_name, reuse=None):
def encode(x, x_space, hparams, name):
def vae_transformer_internal(inputs, targets, target_space, hparams):
@registry.register_hparams DCNL def transformer_vae_small():
@registry.register_hparams DCNL def transformer_vae_base():
def attention_lm_moe_prepare_decoder(targets, hparams):
@registry.register_hparams DCNL def attention_lm_moe_base():
@registry.register_hparams DCNL def attention_lm_moe_small():
@registry.register_hparams DCNL def attention_lm_no_moe_small():
@registry.register_hparams DCNL def attention_lm_moe_large():
def attention_lm_prepare_decoder(targets, hparams):
def attention_lm_decoder(decoder_input, decoder_self_attention_bias, hparams, name='decoder'):
@registry.register_hparams DCNL def attention_lm_base():
@registry.register_hparams DCNL def attention_lm_small():
@registry.register_hparams DCNL def attention_lm_translation():
def residual_block(x, hparams):
def xception_internal(inputs, hparams):
@registry.register_hparams DCNL def xception_base():
def cycle_gan_internal(inputs, targets, _, hparams):
def cycle_vae_gan_internal(inputs, targets, _, hparams):
@registry.register_hparams DCNL def cycle_gan_small():
def neural_gpu(inputs, hparams, name=None):
def diagonal_neural_gpu(inputs, hparams, name=None):
@registry.register_hparams('neuralgpu_1') DCNL def neural_gpu_params1():
def attention(targets_shifted, inputs_encoded, norm_fn, hparams, bias=None):
def multi_conv_res(x, padding, name, layers, hparams, mask=None, source=None):
def rank_loss(sentence_emb, image_emb, margin=0.2):
def similarity_cost(inputs_encoded, targets_encoded):
def slicenet_middle(inputs_encoded, targets, target_space_emb, mask, hparams):
def embedding_to_padding(emb):
def slicenet_internal(inputs, targets, target_space, problem_idx, hparams):
@registry.register_hparams('slicenet_1') DCNL def slicenet_params1():
@registry.register_hparams('slicenet_1noam') DCNL def slicenet_params1_noam():
@registry.register_hparams('slicenet_1tiny') DCNL def slicenet_params1_tiny():
@registry.register_ranged_hparams('slicenet1') DCNL def slicenet_range1(ranged_hparams):
@registry.register_hparams DCNL def gene_expression_conv_base():
def create_selection_weights(name, type_, shape, inv_t=1, initializer=tf.zeros_initializer(), regularizer=None, names=None):
def kernel_premultiplier(max_kernel_size, kernel_sizes, input_channels, kernel_selection_weights, channel_selection_weights):
def make_subseparable_kernel(kernel_size, input_channels, filters, separability, kernel_initializer, kernel_regularizer):
def multi_subseparable_conv(inputs, filters, kernel_sizes, input_channels, separabilities, kernel_selection_weights=None, channel_selection_weights=None, separability_selection_weights=None, kernel_selection_weights_params=None, channel_selection_weights_params=None, separability_selection_weights_params=None, kernel_initializer=None, kernel_regularizer=None, scope=None):
def run_binary_modules(modules, cur1, cur2, hparams):
def run_unary_modules_basic(modules, cur, hparams):
def run_unary_modules_sample(modules, cur, hparams, k):
def batch_deviation(x):
@registry.register_hparams DCNL def bluenet_base():
def _maybe_download_corpus(tmp_dir):
def _get_or_build_subword_text_encoder(tmp_dir):
def generator(tmp_dir, train):
def preprocess_examples_common(examples, hparams):
def _copy_problem_hparams(p_hparams):
def _reverse_problem_hparams(p_hparams):
def _default_hparams():
def words_and_tags_from_wsj_tree(tree_string):
def token_generator(tree_path, source_token_vocab, target_token_vocab, eos=None):
def parsing_token_generator(data_dir, tmp_dir, train, source_vocab_size, target_vocab_size):
def identity_generator(nbr_symbols, max_length, nbr_cases):
def shift_generator(nbr_symbols, shift, max_length, nbr_cases):
def reverse_generator(nbr_symbols, max_length, nbr_cases):
def zipf_distribution(nbr_symbols, alpha):
def zipf_random_sample(distr_map, sample_len):
def reverse_generator_nlplike(nbr_symbols, max_length, nbr_cases, scale_std_dev=100, alpha=1.5):
def lower_endian_to_number(l, base):
def number_to_lower_endian(n, base):
def random_number_lower_endian(length, base):
def addition_generator(base, max_length, nbr_cases):
def multiplication_generator(base, max_length, nbr_cases):
def character_generator(source_path, target_path, character_vocab, eos=None):
def tabbed_generator(source_path, source_vocab, target_vocab, eos=None):
def token_generator(source_path, target_path, token_vocab, eos=None):
def bi_vocabs_token_generator(source_path, target_path, source_token_vocab, target_token_vocab, eos=None):
def _get_wmt_ende_dataset(directory, filename):
def ende_bpe_token_generator(data_dir, tmp_dir, train):
def _preprocess_sgm(line, is_sgm):
def _compile_data(tmp_dir, datasets, filename):
def tabbed_parsing_token_generator(data_dir, tmp_dir, train, prefix, source_vocab_size, target_vocab_size):
def tabbed_parsing_character_generator(tmp_dir, train):
def main(_):
def to_example(dictionary):
def generate_files_distributed(generator, output_name, output_dir, num_shards=1, max_cases=None, task_id=0):
def generate_files(generator, output_filenames, max_cases=None):
def download_report_hook(count, block_size, total_size):
def maybe_download(directory, filename, url):
def maybe_download_from_drive(directory, filename, url):
def gunzip_file(gz_path, new_path):
def get_or_generate_vocab_inner(data_dir, vocab_filename, vocab_size, generator_fn):
def get_or_generate_vocab(data_dir, tmp_dir, vocab_filename, vocab_size, sources=None):
def get_or_generate_tabbed_vocab(data_dir, tmp_dir, source_filename, index, vocab_filename, vocab_size):
def get_or_generate_txt_vocab(data_dir, vocab_filename, vocab_size, filepatterns):
def _original_vocab(tmp_dir):
def _replace_oov(original_vocab, line):
def _maybe_download_corpus(tmp_dir):
def _get_or_build_subword_text_encoder(tmp_dir):
def generator(tmp_dir, train, characters=False):
def encode(text):
def decode(tokens):
def _read_filepattern(filepattern, max_lines=None, split_on_newlines=True):
def corpus_token_counts(text_filepattern, corpus_max_lines, split_on_newlines=True):
def vocab_token_counts(text_filepattern, max_lines):
def _read_words(filename):
def _build_vocab(filename, vocab_path, vocab_size):
def _get_token_encoder(vocab_dir, vocab_name, filename):
def problem_hparams(problem_name, model_hparams):
def parse_problem_name(problem_name):
def _copy_problem_hparams(p_hparams):
def _reverse_problem_hparams(p_hparams):
def default_problem_hparams():
def test_problem_hparams(unused_model_hparams, input_vocab_size, target_vocab_size):
def audio_timit_characters(unused_model_hparams):
def audio_timit_tokens(model_hparams, wrong_vocab_size):
def audio_wsj_characters(unused_model_hparams):
def audio_wsj_tokens(model_hparams, wrong_vocab_size):
def lm1b_32k(model_hparams):
def lm1b_characters(unused_model_hparams):
def wiki_32k(model_hparams):
def wmt_ende_bpe32k(model_hparams):
def wmt_parsing_characters(model_hparams):
def wmt_parsing_tokens(model_hparams, wrong_vocab_size):
def wsj_parsing_tokens(model_hparams, prefix, wrong_source_vocab_size, wrong_target_vocab_size):
def ice_parsing_tokens(model_hparams, wrong_source_vocab_size):
def img2img_imagenet(unused_model_hparams):
def image_celeba(unused_model_hparams):
def is_in_expr(expr, find):
def random_expr_with_required_var(depth, required_var, optional_list, ops):
def random_expr(depth, vlist, ops):
def algebra_inverse_solve(left, right, var, solve_ops):
def format_sympy_expr(sympy_expr, functions=None):
def generate_algebra_inverse_sample(vlist, ops, solve_ops, min_depth, max_depth):
def generate_algebra_simplify_sample(vlist, ops, min_depth, max_depth):
def generate_calculus_integrate_sample(vlist, ops, min_depth, max_depth, functions):
def math_dataset_init(alphabet_size=26, digits=None, functions=None):
def algebra_inverse(alphabet_size=26, min_depth=0, max_depth=2, nbr_cases=10000):
def algebra_simplify(alphabet_size=26, min_depth=0, max_depth=2, nbr_cases=10000):
def calculus_integrate(alphabet_size=26, min_depth=0, max_depth=2, nbr_cases=10000):
def generator_samples(tmp_dir, pb_cst):
def native_to_unicode_py2(s):
def _escape_token(token, alphabet):
def _unescape_token(escaped_token):
def _download_and_parse_dataset(tmp_dir, train):
def _get_tokens_and_tags(parse_str):
def _parse_dataset(file_path, tmp_dir, train):
def _get_or_generate_vocab(tmp_dir, vocab_filename, vocab_size):
def imagenet_preprocess_examples(examples, mode):
def image_generator(images, labels):
def _get_mnist(directory):
def _extract_mnist_images(filename, num_images):
def _extract_mnist_labels(filename, num_labels):
def mnist_generator(tmp_dir, training, how_many, start_from=0):
def _get_cifar10(directory):
def cifar10_generator(tmp_dir, training, how_many, start_from=0):
def _get_mscoco(directory):
def mscoco_generator(data_dir, tmp_dir, training, how_many, start_from=0, eos_list=None, vocab_filename=None, vocab_size=0):
def _get_celeba(directory):
def celeba_generator(tmp_dir, how_many, start_from=0):
def generate_shard_args(outfiles, num_examples):
def to_example_dict(encoder, inputs, mask, outputs):
def generate_plaintext_random(plain_vocab, distribution, train_samples, length):
def encipher_shift(plaintext, plain_vocab, shift):
def encipher_vigenere(plaintext, plain_vocab, key):
def _get_timit(directory):
def _collect_data(directory, input_ext, target_ext):
def timit_generator(data_dir, tmp_dir, training, how_many, start_from=0, eos_list=None, vocab_filename=None, vocab_size=0):
def saturating_sigmoid(x):
def inverse_exp_decay(max_step, min_value=0.01):
def inverse_lin_decay(max_step, min_value=0.01):
def shakeshake2_py(x, y, equal=False, individual=False):
@function.Defun() DCNL def shakeshake2_grad(x1, x2, dy):
@function.Defun() DCNL def shakeshake2_indiv_grad(x1, x2, dy):
@function.Defun() DCNL def shakeshake2_equal_grad(x1, x2, dy):
@function.Defun(grad_func=shakeshake2_grad) DCNL def shakeshake2(x1, x2):
@function.Defun(grad_func=shakeshake2_equal_grad) DCNL def shakeshake2_eqgrad(x1, x2):
def shakeshake(xs, equal_grad=False):
def standardize_images(x):
def image_augmentation(images, do_colors=False):
def cifar_image_augmentation(images):
def flatten4d3d(x):
def embedding(x, vocab_size, dense_size, name=None, reuse=None, multiplier=1.0):
def shift_left(x, pad_value=None):
def shift_left_3d(x, pad_value=None):
def conv_stride2_multistep(x, nbr_steps, output_filters, name=None, reuse=None):
def deconv_stride2_multistep(x, nbr_steps, output_filters, name=None, reuse=None):
def conv_internal(conv_fn, inputs, filters, kernel_size, **kwargs):
def subseparable_conv(inputs, filters, kernel_size, **kwargs):
def layer_norm_compute_python(x, epsilon, scale, bias):
def layer_norm(x, filters=None, epsilon=1e-06, name=None, reuse=None):
def noam_norm(x, epsilon=1.0, name=None):
def apply_norm(x, norm_type, depth, epsilon):
def layer_prepostprocess(previous_value, x, sequence, dropout_rate, norm_type, depth, epsilon, name):
def layer_preprocess(layer_input, hparams):
def layer_postprocess(layer_input, layer_output, hparams):
def conv_block_internal(conv_fn, inputs, filters, dilation_rates_and_kernel_sizes, first_relu=True, use_elu=False, separabilities=None, **kwargs):
def conv_block(inputs, filters, dilation_rates_and_kernel_sizes, **kwargs):
def conv1d_block(inputs, filters, dilation_rates_and_kernel_sizes, **kwargs):
def separable_conv_block(inputs, filters, dilation_rates_and_kernel_sizes, **kwargs):
def subseparable_conv_block(inputs, filters, dilation_rates_and_kernel_sizes, **kwargs):
def pool(inputs, window_size, pooling_type, padding, strides=(1, 1)):
def conv_block_downsample(x, kernel, strides, padding, separability=0, name=None, reuse=None):
def decompress_seqcnn(x, targets, targets_vocab_size, dilations_and_kernels, block_size, is_2d=False, embedding_var=None, name=None, reuse=None):
def moe_layer(data_parallelism, ps_devices, xs, train, model_hidden_size, expert_hidden_size, n1, n2, loss_coef, autoscale=True, name=None):
def simple_attention(target, source, bias=None):
def multiscale_conv_sum(inputs, output_size, dilation_rates_and_kernel_sizes, pooling_type, **kwargs):
def multiscale_conv_and_attention(x, padding, hparams, source=None):
def conv_with_pools(inputs, output_size, kernel_size, pool_sizes, pooling_type, **kwargs):
def conv_with_pools_and_attention(x, padding, hparams, source=None):
def get_timing_signal(length, min_timescale=1, max_timescale=10000.0, num_timescales=16):
def add_timing_signal(x, min_timescale=1, max_timescale=10000.0, num_timescales=16):
def mask_from_embedding(emb):
def mask_leq(target_length, source_length):
def attention_1d_v0(source, target, attention_size, output_size, num_heads, mask=None, transform_source=True, transform_target=True, transform_output=True, name=None):
def relu_density_logit(x, reduce_dims):
def conv_hidden_relu(inputs, hidden_size, output_size, kernel_size=(1, 1), second_kernel_size=(1, 1), dropout=0.0, **kwargs):
def conv_gru(x, kernel_size, filters, padding='SAME', dilation_rate=(1, 1), name=None, reuse=None):
def conv_lstm(x, kernel_size, filters, padding='SAME', dilation_rate=(1, 1), name=None, reuse=None):
def diagonal_conv_gru(x, kernel_size, filters, dropout=0.0, name=None, reuse=None):
def pad_to_same_length(x, y, final_length_divisible_by=1, axis=1):
def pad_with_zeros(logits, labels):
def weights_nonzero(labels):
def weights_second_part(labels):
def weights_all(labels):
def weights_concatenated(labels):
def padded_cross_entropy(logits, labels, label_smoothing, weights_fn=weights_nonzero, reduce_sum=True):
def smoothing_cross_entropy(logits, labels, vocab_size, confidence):
def global_pool_1d(inputs, pooling_type='MAX', mask=None):
def running_global_pool_1d(inputs, pooling_type='MAX'):
def linear_set_layer(layer_size, inputs, context=None, activation_fn=tf.nn.relu, dropout=0.0, name=None):
def ravanbakhsh_set_layer(layer_size, inputs, mask=None, sequential=False, activation_fn=tf.nn.tanh, dropout=0.0, name=None):
@registry.register_hparams('basic_1') DCNL def basic_params1():
def fill_ranged_hparams_from_hparams(hparams, ranged_hparams):
@registry.register_ranged_hparams('basic1') DCNL def basic_range1(ranged_hparams):
def add_timing_signal_1d(x, min_timescale=1.0, max_timescale=10000.0):
def add_timing_signal_nd(x, min_timescale=1.0, max_timescale=10000.0):
def add_positional_embedding_nd(x, max_length, name):
def embedding_to_padding(emb):
def attention_bias_lower_triangle(length):
def attention_bias_ignore_padding(memory_padding):
def attention_bias_proximal(length):
def split_last_dimension(x, n):
def combine_last_two_dimensions(x):
def split_heads(x, num_heads):
def combine_heads(x):
def attention_image_summary(attn, image_shapes=None):
def dot_product_attention(q, k, v, bias, dropout_rate=0.0, image_shapes=None, name=None):
def masked_local_attention_1d(q, k, v, block_length=128, name=None):
def local_attention_1d(q, k, v, block_length=128, filter_width=100, name=None):
def multihead_attention(query_antecedent, memory_antecedent, bias, total_key_depth, total_value_depth, output_depth, num_heads, dropout_rate, image_shapes=None, attention_type='dot_product', block_length=128, block_width=128, name=None):
def ffn_self_attention_layer(x, filter_depth, output_depth, num_parts, dropout_rate, share_kv=False, name=None):
def parameter_attention(x, total_key_depth, total_value_depth, output_depth, memory_rows, num_heads, dropout_rate, name=None):
def _rev_layer_forward(xs, f, g):
def _rev_layer_backward(ys, grad_ys, f, g, f_vars, g_vars):
def _rev_block_forward(x, f, g, num_layers=1, layer_scopes=None, name=None):
def rev_block(x, f, g, num_layers=1, is_training=True):
def examples_reader(data_sources, data_fields_to_features, training, capacity=32, data_items_to_decoders=None, data_items_to_decode=None):
def preprocessing(examples, data_file_pattern):
def default_example_reading_spec(data_file_pattern):
def input_pipeline(problem, data_file_pattern, capacity, mode, hparams):
def batch_examples(examples, batching_scheme):
def bucket_boundaries(max_length, min_length=8, mantissa_bits=2):
def hparams_to_batching_scheme(hparams, drop_long_sequences=False, shard_multiplier=1, length_multiplier=1):
def constant_batching_scheme(constant_batch_size_in_sequences):
def get_data_filepatterns(problems, data_dir, mode):
def make_experiment_fn(data_dir, model_name, train_steps, eval_steps):
def create_experiment(output_dir, data_dir, model_name, train_steps, eval_steps):
def create_experiment_components(hparams, output_dir, data_dir, model_name):
def add_problem_hparams(hparams, problems):
def create_hparams(params_id, data_dir):
def run(data_dir, model, output_dir, train_steps, eval_steps, schedule):
def session_config():
def build_model_fn(model, hparams):
def _sqrt_decay(step):
def _exp_decay_after(step, rate, from_which_step):
def _interactive_input_tensor_to_features_dict(feature_map, hparams):
def _decode_input_tensor_to_features_dict(feature_map, hparams):
def import_usr_dir(usr_dir):
def compute_batch_indices(batch_size, beam_size):
def compute_topk_scores_and_seq(sequences, scores, scores_to_gather, flags, beam_size, batch_size):
def beam_search(symbols_to_logits_fn, initial_ids, beam_size, decode_length, vocab_size, alpha, eos_id=EOS_ID):
def padded_accuracy_topk(predictions, labels, k, weights_fn=common_layers.weights_nonzero):
def padded_sequence_accuracy(predictions, labels, weights_fn=common_layers.weights_nonzero):
def padded_neg_log_perplexity(predictions, labels, weights_fn=common_layers.weights_nonzero):
def padded_accuracy(predictions, labels, weights_fn=common_layers.weights_nonzero):
def create_evaluation_metrics(problems, model_hparams):
def decode_from_file(estimator, filename):
def _interactive_input_fn(hparams):
def _get_sorted_inputs(filename):
def _save_until_eos(hyp):
def ps_devices(all_workers=False):
def data_parallelism(all_workers=False):
def build_input_fn(mode, hparams, data_file_patterns=None, num_datashards=None, fixed_problem=None, worker_replicas=None, worker_id=None):
def cond_on_index(fn, index_tensor, cur_idx, max_idx):
def _get_ngrams(segment, max_order):
def compute_bleu(reference_corpus, translation_corpus, max_order=4, use_bp=True):
def bleu_score(predictions, labels, **unused_kwargs):
def _len_lcs(x, y):
def _lcs(x, y):
def _f_lcs(llcs, m, n):
def rouge_l_sentence_level(eval_sentences, ref_sentences):
def rouge_l_fscore(predictions, labels, **unused_kwargs):
def _get_ngrams(n, text):
def rouge_n(eval_sentences, ref_sentences, n=2):
def rouge_2_fscore(predictions, labels, **unused_kwargs):
def NoisyTopKGatingParams():
def FeedForwardExpertParams():
def _SetInputOutputSizes(hp, input_size, output_size):
@function.Defun(python_grad_func=(lambda x, dy: tf.convert_to_tensor(dy)), shape_func=(lambda op: [op.inputs[0].get_shape()])) DCNL def ConvertGradientToTensor(x):
def Parallel(device_names_or_functions, fn, *args):
def _RowwiseUnsortedSegmentSum(values, indices, n):
def _NormalDistributionCDF(x, stddev):
def _ProbInTopK(clean_values, noisy_values, noise_stddev, noisy_top_values, k):
def CVSquared(x):
def MaxOverload(load):
def _GatesToLoad(gates):
def _MyTopK(x, k):
def TransposeListOfLists(lol):
def ParallelEmbeddingLookup(params, ids, data_parallelism):
def SampledSoftmaxLoss(features, sampler, num_classes, target_classes, target_params, sampled_classes, sampled_params):
def ParallelSampledSoftmaxLoss(params, features, target_classes, sampler, num_classes, data_parallelism, target_weights=None):
def register_model(name=None):
def register_hparams(name=None):
def register_ranged_hparams(name=None):
def register_problem(name=None):
def problem(name):
def _internal_register_modality(name, mod_collection, collection_str):
def register_symbol_modality(name=None):
def register_generic_modality(name=None):
def register_real_modality(name=None):
def register_audio_modality(name=None):
def register_image_modality(name=None):
def register_class_label_modality(name=None):
def create_modality(modality_spec, model_hparams):
def help_string():
def maybe_download(directory, filename, url):
def gunzip_file(gz_path, new_path):
def get_wmt_enfr_train_set(directory):
def get_wmt_enfr_dev_set(directory):
def basic_detokenizer(tokens):
def basic_tokenizer(sentence):
def is_pos_tag(token):
def create_vocabulary(vocabulary_path, data_path, max_vocabulary_size, tokenizer=None, normalize_digits=False):
def initialize_vocabulary(vocabulary_path):
def sentence_to_token_ids_raw(sentence, vocabulary, tokenizer=None, normalize_digits=old_style):
def sentence_to_token_ids(sentence, vocabulary, tokenizer=None, normalize_digits=old_style):
def data_to_token_ids(data_path, target_path, vocabulary_path, tokenizer=None, normalize_digits=False):
def prepare_wmt_data(data_dir, vocabulary_size, tokenizer=None, normalize_digits=False):
def zero_split(tok_list, append=None):
def read_data(source_path, target_path, buckets, max_size=None, print_out=True):
def calculate_buckets_scale(data_set, buckets, problem):
def read_data_into_global(source_path, target_path, buckets, max_size=None, print_out=True):
def initialize(sess=None):
def m_step(model, beam_model, sess, batch_size, inp, target, bucket, nsteps, p):
def single_test(bin_id, model, sess, nprint, batch_size, dev, p, print_out=True, offset=None, beam_model=None):
def assign_vectors(word_vector_file, embedding_key, vocab_path, sess):
def print_vectors(embedding_key, vocab_path, word_vector_file):
def get_bucket_id(train_buckets_scale_c, max_cur_length, data_set):
def score_beams(beams, target, inp, history, p, print_out=False, test_mode=False):
def score_beams_prog(beams, target, inp, history, print_out=False, test_mode=False):
def get_best_beam(beam_model, sess, inp, target, batch_size, beam_size, bucket, history, p, test_mode=False):
def train():
def evaluate():
def interactive():
def conv_linear(args, kw, kh, nin, nout, rate, do_bias, bias_start, prefix):
def sigmoid_cutoff(x, cutoff):
@function.Defun(tf.float32, noinline=True) DCNL def sigmoid_cutoff_12(x):
@function.Defun(tf.float32, noinline=True) DCNL def sigmoid_hard(x):
def place_at14(decided, selected, it):
def place_at13(decided, selected, it):
def tanh_cutoff(x, cutoff):
@function.Defun(tf.float32, noinline=True) DCNL def tanh_hard(x):
def layer_norm(x, nmaps, prefix, epsilon=1e-05):
def conv_gru(inpts, mem, kw, kh, nmaps, rate, cutoff, prefix, do_layer_norm, args_len=None):
def memory_run(step, nmaps, mem_size, batch_size, vocab_size, global_step, do_training, update_mem, decay_factor, num_gpus, target_emb_weights, output_w, gpu_targets_tn, it):
def quantize(t, quant_scale, max_value=1.0):
def autoenc_quantize(x, nbits, nmaps, do_training, layers=1):
def make_dense(targets, noclass, low_param):
def reorder_beam(beam_size, batch_size, beam_val, output, is_first, tensors_to_reorder):
def tokenize(string, tokens=None):
def gen(max_len, how_many):
def read_tmp_file(name):
def add(n1, n2, base=10):
def init_data(task, length, nbr_cases, nclass):
def to_symbol(i):
def to_id(s):
def get_batch(bin_id, batch_size, data_set, height, offset=None, preset=None):
def print_out(s, newline=True):
def accuracy(inpt_t, output, target_t, batch_size, nprint, beam_out=None, beam_scores=None):
def _eval_once(saver, summary_writer, top_1_op, top_5_op, summary_op):
def evaluate(dataset):
def l1_regularizer(weight=1.0, scope=None):
def l2_regularizer(weight=1.0, scope=None):
def l1_l2_regularizer(weight_l1=1.0, weight_l2=1.0, scope=None):
def l1_loss(tensor, weight=1.0, scope=None):
def l2_loss(tensor, weight=1.0, scope=None):
def cross_entropy_loss(logits, one_hot_labels, label_smoothing=0, weight=1.0, scope=None):
def inception_v3(inputs, dropout_keep_prob=0.8, num_classes=1000, is_training=True, restore_logits=True, scope=''):
def inception_v3_parameters(weight_decay=4e-05, stddev=0.1, batch_norm_decay=0.9997, batch_norm_epsilon=0.001):
@contextlib.contextmanager DCNL def arg_scope(list_ops_or_scope, **kwargs):
def add_arg_scope(func):
def has_arg_scope(func):
@scopes.add_arg_scope DCNL def batch_norm(inputs, decay=0.999, center=True, scale=False, epsilon=0.001, moving_vars='moving_vars', activation=None, is_training=True, trainable=True, restore=True, scope=None, reuse=None):
def _two_element_tuple(int_or_tuple):
@scopes.add_arg_scope DCNL def conv2d(inputs, num_filters_out, kernel_size, stride=1, padding='SAME', activation=tf.nn.relu, stddev=0.01, bias=0.0, weight_decay=0, batch_norm_params=None, is_training=True, trainable=True, restore=True, scope=None, reuse=None):
@scopes.add_arg_scope DCNL def fc(inputs, num_units_out, activation=tf.nn.relu, stddev=0.01, bias=0.0, weight_decay=0, batch_norm_params=None, is_training=True, trainable=True, restore=True, scope=None, reuse=None):
def one_hot_encoding(labels, num_classes, scope=None):
@scopes.add_arg_scope DCNL def max_pool(inputs, kernel_size, stride=2, padding='VALID', scope=None):
@scopes.add_arg_scope DCNL def avg_pool(inputs, kernel_size, stride=2, padding='VALID', scope=None):
@scopes.add_arg_scope DCNL def dropout(inputs, keep_prob=0.5, is_training=True, scope=None):
def flatten(inputs, scope=None):
def repeat_op(repetitions, inputs, op, *args, **kwargs):
def add_variable(var, restore=True):
def get_variables(scope=None, suffix=None):
def get_variables_to_restore():
def get_variables_by_name(given_name, scope=None):
def get_unique_variable(name):
def variable_device(device, name):
@scopes.add_arg_scope DCNL def global_step(device=''):
@scopes.add_arg_scope DCNL def variable(name, shape=None, dtype=tf.float32, initializer=None, regularizer=None, trainable=True, collections=None, device='', restore=True):
def inputs(dataset, batch_size=None, num_preprocess_threads=None):
def distorted_inputs(dataset, batch_size=None, num_preprocess_threads=None):
def decode_jpeg(image_buffer, scope=None):
def distort_color(image, thread_id=0, scope=None):
def distort_image(image, height, width, bbox, thread_id=0, scope=None):
def eval_image(image, height, width, scope=None):
def image_preprocessing(image_buffer, bbox, train, thread_id=0):
def parse_example_proto(example_serialized):
def batch_inputs(dataset, batch_size, train, num_preprocess_threads=None, num_readers=1):
def inference(images, num_classes, for_training=False, restore_logits=True, scope=None):
def loss(logits, labels, batch_size=None):
def _activation_summary(x):
def train(target, dataset, cluster_spec):
def _int64_feature(value):
def _float_feature(value):
def _bytes_feature(value):
def _convert_to_example(filename, image_buffer, label, synset, human, bbox, height, width):
def _is_png(filename):
def _is_cmyk(filename):
def _process_image(filename, coder):
def _process_image_files_batch(coder, thread_index, ranges, name, filenames, synsets, labels, humans, bboxes, num_shards):
def _process_image_files(name, filenames, synsets, labels, humans, bboxes, num_shards):
def _find_image_files(data_dir, labels_file):
def _find_human_readable_labels(synsets, synset_to_human):
def _find_image_bounding_boxes(filenames, image_to_bboxes):
def _process_dataset(name, directory, num_shards, synset_to_human, image_to_bboxes):
def _build_synset_lookup(imagenet_metadata_file):
def _build_bounding_box_lookup(bounding_box_file):
def ProcessXMLAnnotation(xml_file):
def _int64_feature(value):
def _bytes_feature(value):
def _convert_to_example(filename, image_buffer, label, text, height, width):
def _is_png(filename):
def _process_image(filename, coder):
def _process_image_files_batch(coder, thread_index, ranges, name, filenames, texts, labels, num_shards):
def _process_image_files(name, filenames, texts, labels, num_shards):
def _find_image_files(data_dir, labels_file):
def _process_dataset(name, directory, num_shards, labels_file):
def _tower_loss(images, labels, num_classes, scope, reuse_variables=None):
def _average_gradients(tower_grads):
def train(dataset):
def cl_logits_subgraph(layer_sizes, input_size, num_classes, keep_prob=1.0):
def classification_loss(logits, labels, weights):
def accuracy(logits, targets, weights):
def predictions(logits):
def _num_labels(weights):
def optimize(loss, global_step, max_grad_norm, lr, lr_decay, sync_replicas=False, replicas_to_aggregate=1, task_id=0):
def main(_):
def _get_vocab_freqs():
def make_restore_average_vars_dict():
def main(_):
def restore_from_checkpoint(sess, saver):
def run_eval(eval_ops, summary_writer, saver):
def _log_values(sess, value_ops, summary_writer=None):
def _get_tuple_state_names(num_states, base_name):
def _filenames_for_data_spec(phase, bidir, pretrain, use_seq2seq):
def _read_single_sequence_example(file_list, tokens_shape=None):
def _read_and_batch(data_dir, fname, state_name, state_size, num_layers, unroll_steps, batch_size, bidir_input=False):
def inputs(data_dir=None, phase='train', bidir=False, pretrain=False, use_seq2seq=False, state_name='lstm', state_size=None, num_layers=0, batch_size=32, unroll_steps=100, eos_id=None):
def _build_random_vocabulary(vocab_size=100):
def run_training(train_op, loss, global_step, variables_to_restore=None, pretrained_model_dir=None):
def maybe_restore_pretrained_model(sess, saver_for_restore, model_dir):
def train_step(sess, train_op, loss, global_step):
def fill_vocab_from_doc(doc, vocab_freqs, doc_counts):
def documents(dataset='train', include_unlabeled=False, include_validation=False):
def tokens(doc):
def imdb_documents(dataset='train', include_unlabeled=False, include_validation=False):
def dbpedia_documents(dataset='train', include_unlabeled=False, include_validation=False):
def rcv1_documents(dataset='train', include_unlabeled=True, include_validation=False):
def rt_documents(dataset='train', include_unlabeled=True, include_validation=False):
def build_input_sequence(doc, vocab_ids):
def generate_training_data(vocab_ids, writer_lm_all, writer_seq_ae_all):
def generate_test_data(vocab_ids, writer_lm_all, writer_seq_ae_all):
def build_reverse_sequence(seq):
def build_lm_sequence(seq):
def build_seq_ae_sequence(seq):
def build_labeled_sequence(seq, class_label, label_gain=False):
def split_by_punct(segment):
def sort_vocab_by_frequency(vocab_freq_map):
def write_vocab_and_frequency(ordered_vocab_freqs, output_dir):
def random_perturbation_loss(embedded, length, loss_fn):
def adversarial_loss(embedded, loss, loss_fn):
def virtual_adversarial_loss(logits, embedded, inputs, logits_from_embedding_fn):
def random_perturbation_loss_bidir(embedded, length, loss_fn):
def adversarial_loss_bidir(embedded, loss, loss_fn):
def virtual_adversarial_loss_bidir(logits, embedded, inputs, logits_from_embedding_fn):
def _mask_by_length(t, length):
def _kl_divergence_with_logits(q_logits, p_logits, weights):
def Train(train_dir, model_str, train_data, max_steps, master='', task=0, ps_tasks=0, initial_learning_rate=0.001, final_learning_rate=0.001, learning_rate_halflife=160000, optimizer_type='Adam', num_preprocess_threads=1, reader=None):
def Eval(train_dir, eval_dir, model_str, eval_data, decoder_file, num_steps, graph_def_file=None, eval_interval_secs=0, reader=None):
def InitNetwork(input_pattern, model_spec, mode='eval', initial_learning_rate=5e-05, final_learning_rate=5e-05, halflife=1600000, optimizer_type='Adam', num_preprocess_threads=1, reader=None):
def _PadLabels3d(logits, labels):
def _PadLabels2d(logits_size, labels):
def _ParseInputSpec(input_spec):
def _ParseOutputSpec(output_spec):
def _AddRateToSummary(tag, rate, step, sw):
def CountWordErrors(ocr_text, truth_text):
def CountErrors(ocr_text, truth_text):
def AddErrors(counts1, counts2):
def ComputeErrorRates(label_counts, word_counts, seq_errors, num_seqs):
def ComputeErrorRate(error_count, truth_count):
def rnn_helper(inp, length, cell_type=None, direction='forward', name=None, *args, **kwargs):
@tf.RegisterShape('VariableLSTM') DCNL def _variable_lstm_shape(op):
@tf.RegisterGradient('VariableLSTM') DCNL def _variable_lstm_grad(op, act_grad, gate_grad, mem_grad):
def lstm_layer(inp, length=None, state=None, memory=None, num_nodes=None, backward=False, clip=50.0, reg_func=tf.nn.l2_loss, weight_reg=False, weight_collection='LSTMWeights', bias_reg=False, stddev=None, seed=None, decode=False, use_native_weights=False, name=None):
def rotate_dimensions(num_dims, src_dim, dest_dim):
def transposing_reshape(tensor, src_dim, part_a, part_b, dest_dim_a, dest_dim_b, name=None):
def tensor_dim(tensor, dim):
def tensor_shape(tensor):
def ImageInput(input_pattern, num_threads, shape, using_ctc, reader=None):
def _ReadExamples(filename_queue, shape, using_ctc, reader=None):
def _ImageProcessing(image_buffer, shape):
def _compute_delta(log_moments, eps):
def _compute_eps(log_moments, delta):
def compute_log_moment(q, sigma, steps, lmbd, verify=False, verbose=False):
def get_privacy_spent(log_moments, target_eps=None, target_delta=None):
def _ListUnion(list_1, list_2):
def Interface(ys, xs):
def PerExampleGradients(ys, xs, grad_ys=None, name='gradients', colocate_gradients_with_ops=False, gate_gradients=False):
def GetTensorOpName(x):
def BuildNetwork(inputs, network_parameters):
def VaryRate(start, end, saturate_epochs, epoch):
def BatchClipByL2norm(t, upper_bound, name=None):
def SoftThreshold(t, threshold_ratio, name=None):
def AddGaussianNoise(t, sigma, name=None):
def GenerateBinomialTable(m):
def ComputeDPPrincipalProjection(data, projection_dims, sanitizer, eps_delta, sigma):
def MnistInput(mnist_data_file, batch_size, randomize):
def Eval(mnist_data_file, network_parameters, num_testing_images, randomize, load_path, save_mistakes=False):
def Train(mnist_train_file, mnist_test_file, network_parameters, num_steps, save_path, eval_steps=0):
def train_teacher(dataset, nb_teachers, teacher_id):
def create_dir_if_needed(dest_directory):
def maybe_download(file_urls, directory):
def image_whitening(data):
def extract_svhn(local_url):
def unpickle_cifar_dic(file):
def extract_cifar10(local_url, data_dir):
def extract_mnist_data(filename, num_images, image_size, pixel_depth):
def extract_mnist_labels(filename, num_images):
def ld_svhn(extended=False, test_only=False):
def ld_cifar10(test_only=False):
def ld_mnist(test_only=False):
def partition_dataset(data, labels, nb_teachers, teacher_id):
def compute_q_noisy_max(counts, noise_eps):
def compute_q_noisy_max_approx(counts, noise_eps):
def logmgf_exact(q, priv_eps, l):
def logmgf_from_counts(counts, noise_eps, l):
def sens_at_k(counts, noise_eps, l, k):
def smoothed_sens(counts, noise_eps, l, beta):
def batch_indices(batch_nb, data_length, batch_size):
def accuracy(logits, labels):
def ensemble_preds(dataset, nb_teachers, stdnt_data):
def prepare_student_data(dataset, nb_teachers, save=False):
def train_student(dataset, nb_teachers):
def labels_from_probs(probs):
def noisy_max(logits, lap_scale, return_clean_votes=False):
def aggregation_most_frequent(logits):
def _variable_on_cpu(name, shape, initializer):
def _variable_with_weight_decay(name, shape, stddev, wd):
def inference(images, dropout=False):
def inference_deeper(images, dropout=False):
def loss_fun(logits, labels):
def moving_av(total_loss):
def train_op_fun(total_loss, global_step):
def _input_placeholder():
def train(images, labels, ckpt_path, dropout=False):
def softmax_preds(images, ckpt_path, return_logits=False):
def parse_example_batch(serialized):
def prefetch_input_data(reader, file_pattern, shuffle, capacity, num_reader_threads=1):
def _load_skip_thoughts_embeddings(checkpoint_path):
def _load_vocabulary(filename):
def _expand_vocabulary(skip_thoughts_emb, skip_thoughts_vocab, word2vec):
def model_config(input_file_pattern=None, input_queue_capacity=640000, num_input_reader_threads=1, shuffle_input_data=True, uniform_init_scale=0.1, vocab_size=20000, batch_size=128, word_embedding_dim=620, bidirectional_encoder=False, encoder_dim=2400):
def training_config(learning_rate=0.0008, learning_rate_decay_factor=0.5, learning_rate_decay_steps=400000, number_of_steps=500000, clip_gradient_norm=5.0, save_model_secs=600, save_summaries_secs=600):
def random_orthonormal_initializer(shape, dtype=tf.float32, partition_info=None):
def _pad(seq, target_len):
def _batch_and_pad(sequences):
def _setup_learning_rate(config, global_step):
def evaluate_model(sess, losses, weights, num_batches, global_step, summary_writer, summary_op):
def run_once(model, losses, weights, saver, summary_writer, summary_op):
def _build_vocabulary(input_files):
def _int64_feature(value):
def _sentence_to_ids(sentence, vocab):
def _create_serialized_example(predecessor, current, successor, vocab):
def _process_input_file(filename, vocab, stats):
def _write_shard(filename, dataset, indices):
def _write_dataset(name, dataset, indices, num_shards):
def main(_):
def main(_):
def run_epoch(session, model, eval_op=None, verbose=False):
def ptb_raw_data(data_path=None):
def ptb_producer(raw_data, batch_size, num_steps, name=None):
def read_data(source_path, target_path, max_size=None):
def create_model(session, forward_only):
def train():
def self_test():
def maybe_download(directory, filename, url):
def gunzip_file(gz_path, new_path):
def get_wmt_enfr_train_set(directory):
def get_wmt_enfr_dev_set(directory):
def basic_tokenizer(sentence):
def create_vocabulary(vocabulary_path, data_path, max_vocabulary_size, tokenizer=None, normalize_digits=True):
def initialize_vocabulary(vocabulary_path):
def sentence_to_token_ids(sentence, vocabulary, tokenizer=None, normalize_digits=True):
def data_to_token_ids(data_path, target_path, vocabulary_path, tokenizer=None, normalize_digits=True):
def prepare_wmt_data(data_dir, en_vocabulary_size, fr_vocabulary_size, tokenizer=None):
def prepare_data(data_dir, from_train_path, to_train_path, from_dev_path, to_dev_path, from_vocabulary_size, to_vocabulary_size, tokenizer=None):
def _get_file_names():
def convert_to_tfrecord(input_files, output_file):
def _create_device_setter(is_cpu_ps, worker, num_gpus):
def _resnet_model_fn(features, labels, mode):
def _tower_fn(is_training, weight_decay, feature, label, tower_losses, tower_gradvars, tower_preds, is_cpu):
def input_fn(subset, num_shards):
def get_experiment_fn(train_input_fn, eval_input_fn, train_steps, eval_steps, train_hooks):
def create_graph():
def run_inference_on_image(image):
def maybe_download_and_extract():
def inference(images):
def time_tensorflow_run(session, target, info_string):
def run_benchmark():
def data_type():
def maybe_download(filename):
def extract_data(filename, num_images):
def extract_labels(filename, num_images):
def fake_data(num_images):
def error_rate(predictions, labels):
def train():
def eval_once(saver, summary_writer, top_k_op, summary_op):
def evaluate():
def _activation_summary(x):
def _variable_on_cpu(name, shape, initializer):
def _variable_with_weight_decay(name, shape, stddev, wd):
def distorted_inputs():
def inputs(eval_data):
def inference(images):
def loss(logits, labels):
def _add_loss_summaries(total_loss):
def train(total_loss, global_step):
def maybe_download_and_extract():
def read_cifar10(filename_queue):
def _generate_image_and_label_batch(image, label, min_queue_examples, batch_size, shuffle):
def distorted_inputs(data_dir, batch_size):
def inputs(eval_data, data_dir, batch_size):
def tower_loss(scope, images, labels):
def average_gradients(tower_grads):
def train():
def peak_signal_to_noise_ratio(true, pred):
def mean_squared_error(true, pred):
def construct_model(images, actions=None, states=None, iter_num=(-1.0), k=(-1), use_state=True, num_masks=10, stp=False, cdna=True, dna=False, context_frames=2):
def stp_transformation(prev_image, stp_input, num_masks):
def cdna_transformation(prev_image, cdna_input, num_masks, color_channels):
def dna_transformation(prev_image, dna_input):
def scheduled_sample(ground_truth_x, generated_x, batch_size, num_ground_truth):
def init_state(inputs, state_shape, state_initializer=tf.zeros_initializer(), dtype=tf.float32):
@add_arg_scope DCNL def basic_conv_lstm_cell(inputs, state, num_channels, filter_size=5, forget_bias=1.0, scope=None, reuse=None):
def build_tfrecord_input(training=True):
def distort_image(image, thread_id):
def process_image(encoded_image, is_training, height, width, resize_height=346, resize_width=346, thread_id=0, image_format='jpeg'):
def inception_v3(images, trainable=True, is_training=True, weight_decay=4e-05, stddev=0.1, dropout_keep_prob=0.8, use_batch_norm=True, batch_norm_params=None, add_summaries=True, scope='InceptionV3'):
def parse_sequence_example(serialized, image_feature, caption_feature):
def prefetch_input_data(reader, file_pattern, is_training, batch_size, values_per_shard, input_queue_capacity_factor=16, num_reader_threads=1, shard_queue_name='filename_queue', value_queue_name='input_queue'):
def batch_with_dynamic_pad(images_and_captions, batch_size, queue_capacity, add_summaries=True):
def evaluate_model(sess, model, global_step, summary_writer, summary_op):
def run_once(model, saver, summary_writer, summary_op):
def run():
def _int64_feature(value):
def _bytes_feature(value):
def _int64_feature_list(values):
def _bytes_feature_list(values):
def _to_sequence_example(image, decoder, vocab):
def _process_image_files(thread_index, ranges, name, images, decoder, vocab, num_shards):
def _process_dataset(name, images, vocab, num_shards):
def _create_vocab(captions):
def _process_caption(caption):
def _load_and_process_metadata(captions_file, image_dir):
def get_data():
def crawl_directory(directory, augment_with_rotations=False, first_label=0):
def resize_images(images, new_width, new_height):
def write_datafiles(directory, write_file, resize=True, rotate=False, new_width=IMAGE_NEW_SIZE, new_height=IMAGE_NEW_SIZE, first_label=0):
def maybe_download_data():
def preprocess_omniglot():
def batch_of_random_bools(batch_size, n):
def doeval(s, ac, n, itercount):
def train_and_evaluate():
def data_files():
def _read_text_proto(path, proto_type):
def _convert_to_char_corpus(corpus):
def _get_steps(steps_flag, epochs_flag, corpus_length):
def update_tensor_arrays(network_tensors, arrays):
def parse_tree_graph(sentence):
def _component_contents(component):
def _linked_feature_label(linked_feature):
def master_spec_graph(master_spec):
def ArcPotentialsFromTokens(source_tokens, target_tokens, weights):
def ArcSourcePotentialsFromTokens(tokens, weights):
def RootPotentialsFromTokens(root, tokens, weights):
def CombineArcAndRootPotentials(arcs, roots):
def LabelPotentialsFromTokens(tokens, weights):
def LabelPotentialsFromTokenPairs(sources, targets, weights):
def _create_learning_rate(hyperparams, step_var):
def _create_optimizer(hyperparams, learning_rate_var, step_var=None):
def complete_master_spec(master_spec, lexicon_corpus, output_path, tf_master=''):
def default_targets_from_spec(spec):
def calculate_component_accuracies(eval_res_values):
def write_summary(summary_writer, label, value, step):
def annotate_dataset(sess, annotator, eval_corpus):
def get_summary_writer(tensorboard_dir):
def run_training_step(sess, trainer, train_corpus, batch_size):
def run_training(sess, trainers, annotator, evaluator, pretrain_steps, train_steps, train_corpus, eval_corpus, eval_gold, batch_size, summary_writer, report_every, saver, checkpoint_filename, checkpoint_stats=None):
def fetch_linked_embedding(comp, network_states, feature_spec):
def _validate_embedded_fixed_features(comp):
def fetch_differentiable_fixed_embeddings(comp, state, stride):
def fetch_fast_fixed_embeddings(comp, state):
def extract_fixed_feature_ids(comp, state, stride):
def update_network_states(comp, tensors, network_states, stride):
def build_cross_entropy_loss(logits, gold):
def _make_basic_master_spec():
def _create_fake_corpus():
def _as_op(x):
def _find_input_path(src, dst_predicate):
def _find_input_path_to_type(src, dst_type):
def create_lexicon_context(path):
def build_lexicon(output_path, training_corpus_path, tf_master='', training_corpus_format='conll-sentence', morph_to_pos=False, **kwargs):
def calculate_parse_metrics(gold_corpus, annotated_corpus):
def parser_summaries(gold_corpus, annotated_corpus):
def calculate_segmentation_metrics(gold_corpus, annotated_corpus):
def segmentation_summaries(gold_corpus, annotated_corpus):
def linked_embeddings_name(channel_id):
def fixed_embeddings_name(channel_id):
def add_embeddings(channel_id, feature_spec, seed=None):
def embedding_lookup(embedding_matrix, indices, ids, weights, size):
def fixed_feature_lookup(component, state, channel_id, stride):
def get_input_tensor(fixed_embeddings, linked_embeddings):
def get_input_tensor_with_stride(fixed_embeddings, linked_embeddings, stride):
def convert_network_state_tensorarray(tensorarray):
def pass_through_embedding_matrix(act_block, embedding_matrix, step_idx):
def lookup_named_tensor(name, named_tensors):
def activation_lookup_recurrent(component, state, channel_id, source_array, source_layer_size, stride):
def activation_lookup_other(component, state, channel_id, source_tensor, source_layer_size):
def get_attrs_with_defaults(parameters, defaults):
def maybe_apply_dropout(inputs, keep_prob, per_sequence, stride=None):
def _load_viz_script():
def parse_trace_json(trace):
def _optional_master_spec_json(master_spec):
def trace_html(trace, convert_to_unicode=True, height='700px', script=None, master_spec=None):
def open_in_new_window(html, notebook_html_fcn=None, temp_file_basename=None):
def Eval(sess, parser, num_steps, best_eval_metric):
def Train(sess, num_actions, feature_sizes, domain_sizes, embedding_dims):
def BatchedSparseToDense(sparse_indices, output_size):
def EmbeddingLookupFeatures(params, sparse_features, allow_weights):
def to_dict(sentence):
def AddCrossEntropy(batch_size, n):
def Eval(sess):
def Eq(lhs, rhs, message='', error=ValueError):
def Ne(lhs, rhs, message='', error=ValueError):
def Lt(lhs, rhs, message='', error=ValueError):
def Gt(lhs, rhs, message='', error=ValueError):
def Le(lhs, rhs, message='', error=ValueError):
def Ge(lhs, rhs, message='', error=ValueError):
def Is(lhs, rhs, message='', error=ValueError):
def IsNot(lhs, rhs, message='', error=ValueError):
def IsNone(value, *args, **kwargs):
def NotNone(value, *args, **kwargs):
def IsTrue(value, message='', error=ValueError):
def IsFalse(value, message='', error=ValueError):
def In(key, container, message='', error=ValueError):
def NotIn(key, container, message='', error=ValueError):
def All(values, message='', error=ValueError):
def Any(values, message='', error=ValueError):
def Same(values, message='', error=ValueError):
def Function():
def _GetClass(name):
def _Create(baseclass, subclass_name, *args, **kwargs):
def _ResolveAndCreate(baseclass, path, subclass_name, *args, **kwargs):
def RegisteredClass(baseclass):
def _get_examples_batch():
def define_vggish_slim(training=False):
def load_vggish_slim_checkpoint(session, checkpoint_path):
def waveform_to_examples(data, sample_rate):
def wavfile_to_examples(wav_file):
def frame(data, window_length, hop_length):
def periodic_hann(window_length):
def stft_magnitude(signal, fft_length, hop_length=None, window_length=None):
def hertz_to_mel(frequencies_hertz):
def spectrogram_to_mel_matrix(num_mel_bins=20, num_spectrogram_bins=129, audio_sample_rate=8000, lower_edge_hertz=125.0, upper_edge_hertz=3800.0):
def log_mel_spectrogram(data, audio_sample_rate=8000, log_offset=0.0, window_length_secs=0.025, hop_length_secs=0.01, **kwargs):
def _nav_env_reset_helper(type, rng, nodes, batch_size, gtG, max_dist, num_steps, num_goals, data_augment, **kwargs):
def nav_env_base_config():
def _get_xy_bounding_box(vertex, padding):
def _project_to_map(map, vertex, wt=None, ignore_points_outside_map=False):
def make_map(padding, resolution, vertex=None, sc=1.0):
def _fill_holes(img, thresh):
def compute_traversibility(map, robot_base, robot_height, robot_radius, valid_min, valid_max, num_point_threshold, shapess, sc=100.0, n_samples_per_face=200):
def get_graph_origin_loc(rng, traversible):
def generate_lattice(sz_x, sz_y):
def label_nodes_with_class(nodes_xyt, class_maps, pix):
def label_nodes_with_class_geodesic(nodes_xyt, class_maps, pix, traversible, ff_cost=1.0, fo_cost=1.0, oo_cost=1.0, connectivity=4):
def get_camera_matrix(width, height, fov):
def get_point_cloud_from_z(Y, camera_matrix):
def make_geocentric(XYZ, sensor_height, camera_elevation_degree):
def bin_points(XYZ_cms, map_size, z_bins, xy_resolution):
def value_iteration_network(fr, num_iters, val_neurons, action_neurons, kernel_size, share_wts=False, name='vin', wt_decay=0.0001, activation_fn=None, shape_aware=False):
def deconv(x, is_training, wt_decay, neurons, strides, layers_per_block, kernel_size, conv_fn, name, offset=0):
def fr_v2(x, output_neurons, inside_neurons, is_training, name='fr', wt_decay=0.0001, stride=1, updates_collections=tf.GraphKeys.UPDATE_OPS):
def dense_resample(im, flow_im, output_valid_mask, name='dense_resample'):
def get_flow(t, theta, map_size, name_scope='gen_flow'):
def add_value_to_summary(metric_summary, tag, val, log=True, tag_str=None):
def accum_val_ops(outputs, names, global_step, output_dir, metric_summary, N):
def save_d_at_t(outputs, global_step, output_dir, metric_summary, N):
def save_all(outputs, global_step, output_dir, metric_summary, N):
def eval_ap(outputs, global_step, output_dir, metric_summary, N, num_classes=4):
def eval_dist(outputs, global_step, output_dir, metric_summary, N):
def plot_trajectories(outputs, global_step, output_dir, metric_summary, N):
def _read_images():
def _images_to_example(image, image2):
def generate_input():
def _add_object(obj_type, image, image2, xpos, ypos):
def _images_to_example(image, image2):
def generate_input():
def SequenceToImageAndDiff(images):
def ReadInput(data_filepattern, shuffle, params):
def _configure_learning_rate(num_samples_per_epoch, global_step):
def _configure_optimizer(learning_rate):
def _get_init_fn():
def _get_variables_to_train():
def create_readable_names_for_imagenet_labels():
def get_split(split_name, dataset_dir, file_pattern=None, reader=None):
def int64_feature(values):
def bytes_feature(values):
def download_and_uncompress_tarball(tarball_url, dataset_dir):
def write_label_file(labels_to_class_names, dataset_dir, filename=LABELS_FILENAME):
def has_labels(dataset_dir, filename=LABELS_FILENAME):
def read_label_file(dataset_dir, filename=LABELS_FILENAME):
def _get_filenames_and_classes(dataset_dir):
def _convert_dataset(split_name, filenames, class_names_to_ids, dataset_dir):
def _clean_up_temporary_files(dataset_dir):
def run(dataset_dir):
def get_split(split_name, dataset_dir, file_pattern=None, reader=None):
def _add_to_tfrecord(filename, tfrecord_writer, offset=0):
def _get_output_filename(dataset_dir, split_name):
def _download_and_uncompress_dataset(dataset_dir):
def _clean_up_temporary_files(dataset_dir):
def run(dataset_dir):
def get_split(split_name, dataset_dir, file_pattern=None, reader=None):
def get_dataset(name, split_name, dataset_dir, file_pattern=None, reader=None):
def _extract_images(filename, num_images):
def _extract_labels(filename, num_labels):
def _add_to_tfrecord(data_filename, labels_filename, num_images, tfrecord_writer):
def _get_output_filename(dataset_dir, split_name):
def _download_dataset(dataset_dir):
def _clean_up_temporary_files(dataset_dir):
def run(dataset_dir):
def get_split(split_name, dataset_dir, file_pattern=None, reader=None):
def create_clones(config, model_fn, args=None, kwargs=None):
def _gather_clone_loss(clone, num_clones, regularization_losses):
def _optimize_clone(optimizer, clone, num_clones, regularization_losses, **kwargs):
def optimize_clones(clones, optimizer, regularization_losses=None, **kwargs):
def deploy(config, model_fn, args=None, kwargs=None, optimizer=None, summarize_gradients=False):
def _sum_clones_gradients(clone_grads):
def _add_gradients_summaries(grads_and_vars):
def preprocess_image(image, output_height, output_width, is_training):
def preprocess_for_train(image, output_height, output_width, padding=_PADDING):
def preprocess_for_eval(image, output_height, output_width):
def preprocess_image(image, output_height, output_width, is_training=False):
def get_preprocessing(name, is_training=False):
def _crop(image, offset_height, offset_width, crop_height, crop_width):
def _random_crop(image_list, crop_height, crop_width):
def _central_crop(image_list, crop_height, crop_width):
def _mean_image_subtraction(image, means):
def _smallest_size_at_least(height, width, smallest_side):
def _aspect_preserving_resize(image, smallest_side):
def preprocess_for_train(image, output_height, output_width, resize_side_min=_RESIZE_SIDE_MIN, resize_side_max=_RESIZE_SIDE_MAX):
def preprocess_for_eval(image, output_height, output_width, resize_side):
def preprocess_image(image, output_height, output_width, is_training=False, resize_side_min=_RESIZE_SIDE_MIN, resize_side_max=_RESIZE_SIDE_MAX):
def apply_with_random_selector(x, func, num_cases):
def distort_color(image, color_ordering=0, fast_mode=True, scope=None):
def distorted_bounding_box_crop(image, bbox, min_object_covered=0.1, aspect_ratio_range=(0.75, 1.33), area_range=(0.05, 1.0), max_attempts=100, scope=None):
def preprocess_for_train(image, height, width, bbox, fast_mode=True, scope=None):
def preprocess_for_eval(image, height, width, central_fraction=0.875, scope=None):
def preprocess_image(image, height, width, is_training=False, bbox=None, fast_mode=True):
def block35(net, scale=1.0, activation_fn=tf.nn.relu, scope=None, reuse=None):
def block17(net, scale=1.0, activation_fn=tf.nn.relu, scope=None, reuse=None):
def block8(net, scale=1.0, activation_fn=tf.nn.relu, scope=None, reuse=None):
def inception_resnet_v2_base(inputs, final_endpoint='Conv2d_7b_1x1', output_stride=16, align_feature_maps=False, scope=None):
def inception_resnet_v2(inputs, num_classes=1001, is_training=True, dropout_keep_prob=0.8, reuse=None, scope='InceptionResnetV2', create_aux_logits=True):
def inception_resnet_v2_arg_scope(weight_decay=4e-05, batch_norm_decay=0.9997, batch_norm_epsilon=0.001):
def lenet(images, num_classes=10, is_training=False, dropout_keep_prob=0.5, prediction_fn=slim.softmax, scope='LeNet'):
def lenet_arg_scope(weight_decay=0.0):
def overfeat(inputs, num_classes=1000, is_training=True, dropout_keep_prob=0.5, spatial_squeeze=True, scope='overfeat'):
def create_test_input(batch_size, height, width, channels):
@slim.add_arg_scope DCNL def bottleneck(inputs, depth, depth_bottleneck, stride, rate=1, outputs_collections=None, scope=None, use_bounded_activations=False):
def resnet_v1(inputs, blocks, num_classes=None, is_training=True, global_pool=True, output_stride=None, include_root_block=True, spatial_squeeze=True, reuse=None, scope=None):
def resnet_v1_block(scope, base_depth, num_units, stride):
def resnet_v1_50(inputs, num_classes=None, is_training=True, global_pool=True, output_stride=None, spatial_squeeze=True, reuse=None, scope='resnet_v1_50'):
def resnet_v1_101(inputs, num_classes=None, is_training=True, global_pool=True, output_stride=None, spatial_squeeze=True, reuse=None, scope='resnet_v1_101'):
def resnet_v1_152(inputs, num_classes=None, is_training=True, global_pool=True, output_stride=None, spatial_squeeze=True, reuse=None, scope='resnet_v1_152'):
def resnet_v1_200(inputs, num_classes=None, is_training=True, global_pool=True, output_stride=None, spatial_squeeze=True, reuse=None, scope='resnet_v1_200'):
def alexnet_v2(inputs, num_classes=1000, is_training=True, dropout_keep_prob=0.5, spatial_squeeze=True, scope='alexnet_v2'):
@slim.add_arg_scope DCNL def bottleneck(inputs, depth, depth_bottleneck, stride, rate=1, outputs_collections=None, scope=None):
def resnet_v2(inputs, blocks, num_classes=None, is_training=True, global_pool=True, output_stride=None, include_root_block=True, spatial_squeeze=True, reuse=None, scope=None):
def resnet_v2_block(scope, base_depth, num_units, stride):
def resnet_v2_50(inputs, num_classes=None, is_training=True, global_pool=True, output_stride=None, spatial_squeeze=True, reuse=None, scope='resnet_v2_50'):
def resnet_v2_101(inputs, num_classes=None, is_training=True, global_pool=True, output_stride=None, spatial_squeeze=True, reuse=None, scope='resnet_v2_101'):
def resnet_v2_152(inputs, num_classes=None, is_training=True, global_pool=True, output_stride=None, spatial_squeeze=True, reuse=None, scope='resnet_v2_152'):
def resnet_v2_200(inputs, num_classes=None, is_training=True, global_pool=True, output_stride=None, spatial_squeeze=True, reuse=None, scope='resnet_v2_200'):
def inception_v2_base(inputs, final_endpoint='Mixed_5c', min_depth=16, depth_multiplier=1.0, use_separable_conv=True, data_format='NHWC', scope=None):
def inception_v2(inputs, num_classes=1000, is_training=True, dropout_keep_prob=0.8, min_depth=16, depth_multiplier=1.0, prediction_fn=slim.softmax, spatial_squeeze=True, reuse=None, scope='InceptionV2'):
def _reduced_kernel_size_for_small_input(input_tensor, kernel_size):
def mobilenet_v1_base(inputs, final_endpoint='Conv2d_13_pointwise', min_depth=8, depth_multiplier=1.0, conv_defs=None, output_stride=None, scope=None):
def mobilenet_v1(inputs, num_classes=1000, dropout_keep_prob=0.999, is_training=True, min_depth=8, depth_multiplier=1.0, conv_defs=None, prediction_fn=tf.contrib.layers.softmax, spatial_squeeze=True, reuse=None, scope='MobilenetV1'):
def _reduced_kernel_size_for_small_input(input_tensor, kernel_size):
def mobilenet_v1_arg_scope(is_training=True, weight_decay=4e-05, stddev=0.09, regularize_depthwise=False):
def inception_v3_base(inputs, final_endpoint='Mixed_7c', min_depth=16, depth_multiplier=1.0, scope=None):
def inception_v3(inputs, num_classes=1000, is_training=True, dropout_keep_prob=0.8, min_depth=16, depth_multiplier=1.0, prediction_fn=slim.softmax, spatial_squeeze=True, reuse=None, create_aux_logits=True, scope='InceptionV3'):
def _reduced_kernel_size_for_small_input(input_tensor, kernel_size):
def subsample(inputs, factor, scope=None):
def conv2d_same(inputs, num_outputs, kernel_size, stride, rate=1, scope=None):
@slim.add_arg_scope DCNL def stack_blocks_dense(net, blocks, output_stride=None, outputs_collections=None):
def resnet_arg_scope(weight_decay=0.0001, batch_norm_decay=0.997, batch_norm_epsilon=1e-05, batch_norm_scale=True, activation_fn=tf.nn.relu, use_batch_norm=True):
def get_network_fn(name, num_classes, weight_decay=0.0, is_training=False):
def block_inception_a(inputs, scope=None, reuse=None):
def block_reduction_a(inputs, scope=None, reuse=None):
def block_inception_b(inputs, scope=None, reuse=None):
def block_reduction_b(inputs, scope=None, reuse=None):
def block_inception_c(inputs, scope=None, reuse=None):
def inception_v4_base(inputs, final_endpoint='Mixed_7d', scope=None):
def inception_v4(inputs, num_classes=1001, is_training=True, dropout_keep_prob=0.8, reuse=None, scope='InceptionV4', create_aux_logits=True):
def create_test_input(batch_size, height, width, channels):
def inception_arg_scope(weight_decay=4e-05, use_batch_norm=True, batch_norm_decay=0.9997, batch_norm_epsilon=0.001):
def vgg_arg_scope(weight_decay=0.0005):
def vgg_a(inputs, num_classes=1000, is_training=True, dropout_keep_prob=0.5, spatial_squeeze=True, scope='vgg_a', fc_conv_padding='VALID'):
def vgg_16(inputs, num_classes=1000, is_training=True, dropout_keep_prob=0.5, spatial_squeeze=True, scope='vgg_16', fc_conv_padding='VALID'):
def vgg_19(inputs, num_classes=1000, is_training=True, dropout_keep_prob=0.5, spatial_squeeze=True, scope='vgg_19', fc_conv_padding='VALID'):
def inception_v1_base(inputs, final_endpoint='Mixed_5c', scope='InceptionV1'):
def inception_v1(inputs, num_classes=1000, is_training=True, dropout_keep_prob=0.8, prediction_fn=slim.softmax, spatial_squeeze=True, reuse=None, scope='InceptionV1'):
def cifarnet(images, num_classes=10, is_training=False, dropout_keep_prob=0.5, prediction_fn=slim.softmax, scope='CifarNet'):
def cifarnet_arg_scope(weight_decay=0.004):
def transformer(U, theta, out_size, name='SpatialTransformer', **kwargs):
def batch_transformer(U, thetas, out_size, name='BatchSpatialTransformer'):
def conv2d(x, n_filters, k_h=5, k_w=5, stride_h=2, stride_w=2, stddev=0.02, activation=(lambda x: x), bias=True, padding='SAME', name='Conv2D'):
def linear(x, n_units, scope=None, stddev=0.02, activation=(lambda x: x)):
def weight_variable(shape):
def bias_variable(shape):
def dense_to_one_hot(labels, n_classes=2):
def _extract_prediction_tensors(model, create_input_dict_fn, ignore_groundtruth=False):
def evaluate(create_input_dict_fn, create_model_fn, eval_config, categories, checkpoint_dir, eval_dir):
def get_depth_fn(depth_multiplier, min_depth):
def multi_resolution_feature_maps(feature_map_layout, depth_multiplier, min_depth, insert_1x1_conv, image_features):
def multiclass_non_max_suppression(boxes, scores, score_thresh, iou_thresh, max_size_per_class, max_total_size=0, clip_window=None, change_coordinate_frame=False, masks=None, additional_fields=None, scope=None):
def batch_multiclass_non_max_suppression(boxes, scores, score_thresh, iou_thresh, max_size_per_class, max_total_size=0, clip_window=None, change_coordinate_frame=False, num_valid_boxes=None, masks=None, scope=None, parallel_iterations=32):
def scale(keypoints, y_scale, x_scale, scope=None):
def clip_to_window(keypoints, window, scope=None):
def prune_outside_window(keypoints, window, scope=None):
def change_coordinate_frame(keypoints, window, scope=None):
def to_normalized_coordinates(keypoints, height, width, check_range=True, scope=None):
def to_absolute_coordinates(keypoints, height, width, check_range=True, scope=None):
def flip_horizontal(keypoints, flip_point, flip_permutation, scope=None):
def area(boxlist, scope=None):
def height_width(boxlist, scope=None):
def scale(boxlist, y_scale, x_scale, scope=None):
def clip_to_window(boxlist, window, filter_nonoverlapping=True, scope=None):
def prune_outside_window(boxlist, window, scope=None):
def prune_completely_outside_window(boxlist, window, scope=None):
def intersection(boxlist1, boxlist2, scope=None):
def matched_intersection(boxlist1, boxlist2, scope=None):
def iou(boxlist1, boxlist2, scope=None):
def matched_iou(boxlist1, boxlist2, scope=None):
def ioa(boxlist1, boxlist2, scope=None):
def prune_non_overlapping_boxes(boxlist1, boxlist2, min_overlap=0.0, scope=None):
def prune_small_boxes(boxlist, min_side, scope=None):
def change_coordinate_frame(boxlist, window, scope=None):
def sq_dist(boxlist1, boxlist2, scope=None):
def boolean_mask(boxlist, indicator, fields=None, scope=None):
def gather(boxlist, indices, fields=None, scope=None):
def concatenate(boxlists, fields=None, scope=None):
def sort_by_field(boxlist, field, order=SortOrder.descend, scope=None):
def visualize_boxes_in_image(image, boxlist, normalized=False, scope=None):
def filter_field_value_equals(boxlist, field, value, scope=None):
def filter_greater_than(boxlist, thresh, scope=None):
def non_max_suppression(boxlist, thresh, max_output_size, scope=None):
def _copy_extra_fields(boxlist_to_copy_to, boxlist_to_copy_from):
def to_normalized_coordinates(boxlist, height, width, check_range=True, scope=None):
def to_absolute_coordinates(boxlist, height, width, check_range=True, scope=None):
def refine_boxes_multi_class(pool_boxes, num_classes, nms_iou_thresh, nms_max_detections, voting_iou_thresh=0.5):
def refine_boxes(pool_boxes, nms_iou_thresh, nms_max_detections, voting_iou_thresh=0.5):
def box_voting(selected_boxes, pool_boxes, iou_thresh=0.5):
def pad_or_clip_box_list(boxlist, num_boxes, scope=None):
def prefetch(tensor_dict, capacity):
def batch_decode(encoded_boxes, box_coder, anchors):
def create_target_assigner(reference, stage=None, positive_class_weight=1.0, negative_class_weight=1.0, unmatched_cls_target=None):
def batch_assign_targets(target_assigner, anchors_batch, gt_box_batch, gt_class_targets_batch):
def _apply_with_random_selector(x, func, num_cases):
def _apply_with_random_selector_tuples(x, func, num_cases):
def _random_integer(minval, maxval, seed):
def normalize_image(image, original_minval, original_maxval, target_minval, target_maxval):
def flip_boxes(boxes):
def retain_boxes_above_threshold(boxes, labels, label_scores, masks=None, keypoints=None, threshold=0.0):
def _flip_masks(masks):
def random_horizontal_flip(image, boxes=None, masks=None, keypoints=None, keypoint_flip_permutation=None, seed=None):
def random_pixel_value_scale(image, minval=0.9, maxval=1.1, seed=None):
def random_image_scale(image, masks=None, min_scale_ratio=0.5, max_scale_ratio=2.0, seed=None):
def random_rgb_to_gray(image, probability=0.1, seed=None):
def random_adjust_brightness(image, max_delta=0.2):
def random_adjust_contrast(image, min_delta=0.8, max_delta=1.25):
def random_adjust_hue(image, max_delta=0.02):
def random_adjust_saturation(image, min_delta=0.8, max_delta=1.25):
def random_distort_color(image, color_ordering=0):
def random_jitter_boxes(boxes, ratio=0.05, seed=None):
def _strict_random_crop_image(image, boxes, labels, masks=None, keypoints=None, min_object_covered=1.0, aspect_ratio_range=(0.75, 1.33), area_range=(0.1, 1.0), overlap_thresh=0.3):
def random_crop_image(image, boxes, labels, masks=None, keypoints=None, min_object_covered=1.0, aspect_ratio_range=(0.75, 1.33), area_range=(0.1, 1.0), overlap_thresh=0.3, random_coef=0.0, seed=None):
def random_pad_image(image, boxes, min_image_size=None, max_image_size=None, pad_color=None, seed=None):
def random_crop_pad_image(image, boxes, labels, min_object_covered=1.0, aspect_ratio_range=(0.75, 1.33), area_range=(0.1, 1.0), overlap_thresh=0.3, random_coef=0.0, min_padded_size_ratio=None, max_padded_size_ratio=None, pad_color=None, seed=None):
def random_crop_to_aspect_ratio(image, boxes, labels, masks=None, keypoints=None, aspect_ratio=1.0, overlap_thresh=0.3, seed=None):
def random_black_patches(image, max_black_patches=10, probability=0.5, size_to_image_ratio=0.1, random_seed=None):
def image_to_float(image):
def random_resize_method(image, target_size):
def _compute_new_static_size(image, min_dimension, max_dimension):
def _compute_new_dynamic_size(image, min_dimension, max_dimension):
def resize_to_range(image, masks=None, min_dimension=None, max_dimension=None, align_corners=False):
def scale_boxes_to_pixel_coordinates(image, boxes, keypoints=None):
def resize_image(image, masks=None, new_height=600, new_width=1024, method=tf.image.ResizeMethod.BILINEAR, align_corners=False):
def subtract_channel_mean(image, means=None):
def one_hot_encoding(labels, num_classes=None):
def rgb_to_gray(image):
def ssd_random_crop(image, boxes, labels, masks=None, keypoints=None, min_object_covered=(0.0, 0.1, 0.3, 0.5, 0.7, 0.9, 1.0), aspect_ratio_range=(((0.5, 2.0),) * 7), area_range=(((0.1, 1.0),) * 7), overlap_thresh=(0.0, 0.1, 0.3, 0.5, 0.7, 0.9, 1.0), random_coef=((0.15,) * 7), seed=None):
def ssd_random_crop_pad(image, boxes, labels, min_object_covered=(0.1, 0.3, 0.5, 0.7, 0.9, 1.0), aspect_ratio_range=(((0.5, 2.0),) * 6), area_range=(((0.1, 1.0),) * 6), overlap_thresh=(0.1, 0.3, 0.5, 0.7, 0.9, 1.0), random_coef=((0.15,) * 6), min_padded_size_ratio=((None,) * 6), max_padded_size_ratio=((None,) * 6), pad_color=((None,) * 6), seed=None):
def ssd_random_crop_fixed_aspect_ratio(image, boxes, labels, masks=None, keypoints=None, min_object_covered=(0.0, 0.1, 0.3, 0.5, 0.7, 0.9, 1.0), aspect_ratio=1.0, area_range=(((0.1, 1.0),) * 7), overlap_thresh=(0.0, 0.1, 0.3, 0.5, 0.7, 0.9, 1.0), random_coef=((0.15,) * 7), seed=None):
def get_default_func_arg_map(include_instance_masks=False, include_keypoints=False):
def preprocess(tensor_dict, preprocess_options, func_arg_map=None):
def freeze_graph_with_def_protos(input_graph_def, input_saver_def, input_checkpoint, output_node_names, restore_op_name, filename_tensor_name, clear_devices, initializer_nodes, optimize_graph=False, variable_names_blacklist=''):
def _image_tensor_input_placeholder():
def _tf_example_input_placeholder():
def _encoded_image_string_tensor_input_placeholder():
def _add_output_tensor_nodes(postprocessed_tensors, output_collection_name='inference_op'):
def _write_frozen_graph(frozen_graph_path, frozen_graph_def):
def _write_saved_model(saved_model_path, frozen_graph_def, inputs, outputs):
def _export_inference_graph(input_type, detection_model, use_moving_averages, trained_checkpoint_prefix, output_directory, optimize_graph=False, output_collection_name='inference_op'):
def export_inference_graph(input_type, pipeline_config, trained_checkpoint_prefix, output_directory, optimize_graph=False, output_collection_name='inference_op'):
def get_input_function():
def get_configs_from_pipeline_file():
def get_configs_from_multiple_files():
def tile_anchors(grid_height, grid_width, scales, aspect_ratios, base_anchor_size, anchor_stride, anchor_offset):
def _center_size_bbox_to_corners_bbox(centers, sizes):
def create_ssd_anchors(num_layers=6, min_scale=0.2, max_scale=0.95, aspect_ratios=(1.0, 2.0, 3.0, (1.0 / 2), (1.0 / 3)), base_anchor_size=None, reduce_boxes_in_lowest_layer=True):
def write_metrics(metrics, global_step, summary_dir):
def evaluate_detection_results_pascal_voc(result_lists, categories, label_id_offset=0, iou_thres=0.5, corloc_summary=False):
def visualize_detection_results(result_dict, tag, global_step, categories, summary_dir='', export_dir='', agnostic_mode=False, show_groundtruth=False, min_score_thresh=0.5, max_num_predictions=20):
def run_checkpoint_once(tensor_dict, update_op, summary_dir, aggregated_result_processor=None, batch_processor=None, checkpoint_dirs=None, variables_to_restore=None, restore_fn=None, num_batches=1, master='', save_graph=False, save_graph_dir='', metric_names_to_values=None, keys_to_exclude_from_results=()):
def repeated_checkpoint_run(tensor_dict, update_op, summary_dir, aggregated_result_processor=None, batch_processor=None, checkpoint_dirs=None, variables_to_restore=None, restore_fn=None, num_batches=1, eval_interval_secs=120, max_number_of_evaluations=None, master='', save_graph=False, save_graph_dir='', metric_names_to_values=None, keys_to_exclude_from_results=()):
def build(region_similarity_calculator_config):
def build(input_reader_config):
def build(image_resizer_config):
def build(box_coder_config):
def _get_step_config_from_proto(preprocessor_step_config, step_name):
def _get_dict_from_proto(config):
def build(preprocessor_step_config):
def build(model_config, is_training):
def _build_ssd_feature_extractor(feature_extractor_config, is_training, reuse_weights=None):
def _build_ssd_model(ssd_config, is_training):
def _build_faster_rcnn_feature_extractor(feature_extractor_config, is_training, reuse_weights=None):
def _build_faster_rcnn_model(frcnn_config, is_training):
def build(loss_config):
def build_hard_example_miner(config, classification_weight, localization_weight):
def _build_localization_loss(loss_config):
def _build_classification_loss(loss_config):
def build(argscope_fn, box_predictor_config, is_training, num_classes):
def build(matcher_config):
def build(anchor_generator_config):
def build(optimizer_config, global_summaries):
def _create_learning_rate(learning_rate_config, global_summaries):
def build(post_processing_config):
def _build_non_max_suppressor(nms_config):
def _build_score_converter(score_converter_config):
def build(hyperparams_config, is_training):
def _build_activation_fn(activation_fn):
def _build_regularizer(regularizer):
def _build_initializer(initializer):
def _build_batch_norm_params(batch_norm, is_training):
def get_class_name_from_filename(file_name):
def dict_to_tf_example(data, label_map_dict, image_subdirectory, ignore_difficult_instances=False):
def create_tf_record(output_filename, label_map_dict, annotations_dir, image_dir, examples):
def _create_input_queue(batch_size_per_clone, create_tensor_dict_fn, batch_queue_capacity, num_batch_queue_threads, prefetch_queue_capacity, data_augmentation_options):
def _get_inputs(input_queue, num_classes):
def _create_losses(input_queue, create_model_fn):
def train(create_tensor_dict_fn, create_model_fn, train_config, master, task, num_clones, worker_replicas, clone_on_cpu, ps_tasks, worker_job_name, is_chief, train_dir):
def get_configs_from_pipeline_file():
def get_configs_from_multiple_files():
def load_categories_from_csv_file(csv_path):
def save_categories_to_csv_file(categories, csv_path):
def area(boxes):
def intersection(boxes1, boxes2):
def iou(boxes1, boxes2):
def ioa(boxes1, boxes2):
def area(boxlist):
def intersection(boxlist1, boxlist2):
def iou(boxlist1, boxlist2):
def ioa(boxlist1, boxlist2):
def gather(boxlist, indices, fields=None):
def sort_by_field(boxlist, field, order=SortOrder.DESCEND):
def non_max_suppression(boxlist, max_output_size=10000, iou_threshold=1.0, score_threshold=(-10.0)):
def multi_class_non_max_suppression(boxlist, score_thresh, iou_thresh, max_output_size):
def scale(boxlist, y_scale, x_scale):
def clip_to_window(boxlist, window):
def prune_non_overlapping_boxes(boxlist1, boxlist2, minoverlap=0.0):
def prune_outside_window(boxlist, window):
def concatenate(boxlists, fields=None):
def filter_scores_greater_than(boxlist, thresh):
def change_coordinate_frame(boxlist, window):
def _copy_extra_fields(boxlist_to_copy_to, boxlist_to_copy_from):
def _is_tensor(t):
def _set_dim_0(t, d0):
def pad_tensor(t, length):
def clip_tensor(t, length):
def pad_or_clip_tensor(t, length):
def combined_static_and_dynamic_shape(tensor):
def compute_precision_recall(scores, labels, num_gt):
def compute_average_precision(precision, recall):
def compute_cor_loc(num_gt_imgs_per_class, num_images_correctly_detected_per_class):
def exponential_decay_with_burnin(global_step, learning_rate_base, learning_rate_decay_steps, learning_rate_decay_factor, burnin_learning_rate=0.0, burnin_steps=0):
def manual_stepping(global_step, boundaries, rates):
def read_examples_list(path):
def recursive_parse_xml_to_dict(xml):
def filter_variables(variables, filter_regex_list, invert=False):
def multiply_gradients_matching_regex(grads_and_vars, regex_list, multiplier):
def freeze_gradients_matching_regex(grads_and_vars, regex_list):
def get_variables_available_in_checkpoint(variables, checkpoint_path):
def expanded_shape(orig_shape, start_dim, num_dims):
def normalized_to_image_coordinates(normalized_boxes, image_shape, parallel_iterations=32):
def meshgrid(x, y):
def pad_to_multiple(tensor, multiple):
def padded_one_hot_encoding(indices, depth, left_pad):
def dense_to_sparse_boxes(dense_locations, dense_num_boxes, num_classes):
def indices_to_dense_vector(indices, size, indices_value=1.0, default_value=0, dtype=tf.float32):
def retain_groundtruth(tensor_dict, valid_indices):
def retain_groundtruth_with_positive_classes(tensor_dict):
def filter_groundtruth_with_nan_box_coordinates(tensor_dict):
def normalize_to_target(inputs, target_norm_value, dim, epsilon=1e-07, trainable=True, scope='NormalizeToTarget', summarize=True):
def position_sensitive_crop_regions(image, boxes, box_ind, crop_size, num_spatial_bins, global_pool, extrapolation_value=None):
def reframe_box_masks_to_image_masks(box_masks, boxes, image_height, image_width):
def _validate_label_map(label_map):
def create_category_index(categories):
def convert_label_map_to_categories(label_map, max_num_classes, use_display_name=True):
def load_labelmap(path):
def get_label_map_dict(label_map_path):
def create_diagonal_gradient_image(height, width, depth):
def create_random_boxes(num_boxes, max_height, max_width):
def save_image_array_as_png(image, output_path):
def encode_image_array_as_png_str(image):
def draw_bounding_box_on_image_array(image, ymin, xmin, ymax, xmax, color='red', thickness=4, display_str_list=(), use_normalized_coordinates=True):
def draw_bounding_box_on_image(image, ymin, xmin, ymax, xmax, color='red', thickness=4, display_str_list=(), use_normalized_coordinates=True):
def draw_bounding_boxes_on_image_array(image, boxes, color='red', thickness=4, display_str_list_list=()):
def draw_bounding_boxes_on_image(image, boxes, color='red', thickness=4, display_str_list_list=()):
def draw_keypoints_on_image_array(image, keypoints, color='red', radius=2, use_normalized_coordinates=True):
def draw_keypoints_on_image(image, keypoints, color='red', radius=2, use_normalized_coordinates=True):
def draw_mask_on_image_array(image, mask, color='red', alpha=0.7):
def visualize_boxes_and_labels_on_image_array(image, boxes, classes, scores, category_index, instance_masks=None, keypoints=None, use_normalized_coordinates=False, max_boxes_to_draw=20, min_score_thresh=0.5, agnostic_mode=False, line_thickness=4):
def get_batch_size(tensor_shape):
def get_height(tensor_shape):
def get_width(tensor_shape):
def get_depth(tensor_shape):
def dict_to_tf_example(data, dataset_directory, label_map_dict, ignore_difficult_instances=False, image_subdirectory='JPEGImages'):
def build_model(hps, kind='train', datasets=None):
def jsonify_dict(d):
def build_hyperparameter_dict(flags):
def train(hps, datasets):
def write_model_runs(hps, datasets, output_fname=None):
def write_model_samples(hps, datasets, dataset_name=None, output_fname=None):
def write_model_parameters(hps, output_fname=None, datasets=None):
def clean_data_dict(data_dict):
def load_datasets(data_dir, data_filename_stem):
def main(_):
def diag_gaussian_log_likelihood(z, mu=0.0, logvar=0.0):
def gaussian_pos_log_likelihood(unused_mean, logvar, noise):
def log_sum_exp(x_k):
def linear(x, out_size, do_bias=True, alpha=1.0, identity_if_possible=False, normalized=False, name=None, collections=None):
def init_linear(in_size, out_size, do_bias=True, mat_init_value=None, bias_init_value=None, alpha=1.0, identity_if_possible=False, normalized=False, name=None, collections=None):
def write_data(data_fname, data_dict, use_json=False, compression=None):
def read_data(data_fname):
def write_datasets(data_path, data_fname_stem, dataset_dict, compression=None):
def read_datasets(data_path, data_fname_stem):
def list_t_bxn_to_list_b_txn(values_t_bxn):
def list_t_bxn_to_tensor_bxtxn(values_t_bxn):
def tensor_bxtxn_to_list_t_bxn(tensor_bxtxn):
def flatten(list_of_lists):
def all_plot(d, full_name='', exclude='', nspaces=0):
def generate_rnn(rng, N, g, tau, dt, max_firing_rate):
def generate_data(rnn, T, E, x0s=None, P_sxn=None, input_magnitude=0.0, input_times=None):
def spikify_data(data_e, rng, dt=1.0, max_firing_rate=100):
def gaussify_data(data_e, rng, dt=1.0, max_firing_rate=100):
def get_train_n_valid_inds(num_trials, train_fraction, nspikifications):
def split_list_by_inds(data, inds1, inds2):
def nparray_and_transpose(data_a_b_c):
def add_alignment_projections(datasets, npcs, ntime=None, nsamples=None):
def build_input(dataset, data_path, batch_size, mode):
def train(hps):
def evaluate(hps):
def softplus(x):
def add_grads_and_vars(a, b):
def binary_log_likelihood(y, log_y_hat):
def cov(a, b):
def logSumExp(t, axis=0, keep_dims=False):
def read_MNIST(binarize=False):
def read_omniglot(binarize=False):
def discounted_future_sum(values, discount, rollout):
def discounted_two_sided_sum(values, discount, rollout):
def shift_values(values, discount, rollout, final_values=0.0):
def sample_expert_paths(num, env_str, env_spec, load_trajectories_file=None):
def sample_expert_path(env_str, env_spec):
def find_best_eps_lambda(rewards, lengths):
def main():
def main():
def get_default_hparams():
def residual_block(input_, dim, name, use_batch_norm=True, train=True, weight_norm=True, bottleneck=False):
def resnet(input_, dim_in, dim, dim_out, name, use_batch_norm=True, train=True, weight_norm=True, residual_blocks=5, bottleneck=False, skip=True):
def masked_conv_aff_coupling(input_, mask_in, dim, name, use_batch_norm=True, train=True, weight_norm=True, reverse=False, residual_blocks=5, bottleneck=False, use_width=1.0, use_height=1.0, mask_channel=0.0, skip=True):
def masked_conv_add_coupling(input_, mask_in, dim, name, use_batch_norm=True, train=True, weight_norm=True, reverse=False, residual_blocks=5, bottleneck=False, use_width=1.0, use_height=1.0, mask_channel=0.0, skip=True):
def masked_conv_coupling(input_, mask_in, dim, name, use_batch_norm=True, train=True, weight_norm=True, reverse=False, residual_blocks=5, bottleneck=False, use_aff=True, use_width=1.0, use_height=1.0, mask_channel=0.0, skip=True):
def conv_ch_aff_coupling(input_, dim, name, use_batch_norm=True, train=True, weight_norm=True, reverse=False, residual_blocks=5, bottleneck=False, change_bottom=True, skip=True):
def conv_ch_add_coupling(input_, dim, name, use_batch_norm=True, train=True, weight_norm=True, reverse=False, residual_blocks=5, bottleneck=False, change_bottom=True, skip=True):
def conv_ch_coupling(input_, dim, name, use_batch_norm=True, train=True, weight_norm=True, reverse=False, residual_blocks=5, bottleneck=False, use_aff=True, change_bottom=True, skip=True):
def rec_masked_conv_coupling(input_, hps, scale_idx, n_scale, use_batch_norm=True, weight_norm=True, train=True):
def rec_masked_deconv_coupling(input_, hps, scale_idx, n_scale, use_batch_norm=True, weight_norm=True, train=True):
def encoder(input_, hps, n_scale, use_batch_norm=True, weight_norm=True, train=True):
def decoder(input_, hps, n_scale, use_batch_norm=True, weight_norm=True, train=True):
def train_model(hps, logdir):
def evaluate(hps, logdir, traindir, subset='valid', return_val=False):
def sample_from_model(hps, logdir, traindir):
def stable_var(input_, mean=None, axes=[0]):
def variable_on_cpu(name, shape, initializer, trainable=True):
def conv_layer(input_, filter_size, dim_in, dim_out, name, stddev=0.01, strides=[1, 1, 1, 1], padding='SAME', nonlinearity=None, bias=False, weight_norm=False, scale=False):
def max_pool_2x2(input_):
def depool_2x2(input_, stride=2):
def batch_random_flip(input_):
def as_one_hot(input_, n_indices):
def squeeze_2x2(input_):
def squeeze_nxn(input_, n_factor=2):
def unsqueeze_2x2(input_):
def batch_norm(input_, dim, name, scale=True, train=True, epsilon=1e-08, decay=0.1, axes=[0], bn_lag=DEFAULT_BN_LAG):
def batch_norm_log_diff(input_, dim, name, train=True, epsilon=1e-08, decay=0.1, axes=[0], reuse=None, bn_lag=DEFAULT_BN_LAG):
def convnet(input_, dim_in, dim_hid, filter_sizes, dim_out, name, use_batch_norm=True, train=True, nonlinearity=tf.nn.relu):
def standard_normal_ll(input_):
def standard_normal_sample(shape):
def squeeze_2x2_ordered(input_, reverse=False):
def main():
def words(line):
def create_vocabulary(lines):
def write_vocab_and_sums(vocab, sums, vocab_filename, sums_filename):
def compute_coocs(lines, vocab):
def write_shards(vocab, shardfiles):
def make_shard_files(coocs, nshards, vocab_sz):
def augment_image(image):
def central_crop(image, crop_size):
def preprocess_image(image, augment=False, central_crop_size=None, num_towers=4):
def get_data(dataset, batch_size, augment=False, central_crop_size=None, shuffle_config=None, shuffle=True):
def logits_to_log_prob(logits):
def variables_to_restore(scope=None, strip_scope=False):
def read_charset(filename, null_character=u'\u2591'):
def get_split(split_name, dataset_dir=None, config=None):
def create_random_image(image_format, shape):
def create_serialized_example(name_to_values):
def define():
def char_accuracy(predictions, targets, rej_char, streaming=False):
def sequence_accuracy(predictions, targets, rej_char, streaming=False):
def orthogonal_initializer(shape, dtype=tf.float32, *args, **kwargs):
def get_layer_class(use_attention, use_autoregression):
def get_softmax_loss_fn(label_smoothing):
def apply_with_random_selector(x, func, num_cases):
def distort_color(image, color_ordering=0, fast_mode=True, scope=None):
def distorted_bounding_box_crop(image, bbox, min_object_covered=0.1, aspect_ratio_range=(0.75, 1.33), area_range=(0.05, 1.0), max_attempts=100, scope=None):
def preprocess_for_train(image, height, width, bbox, fast_mode=True, scope=None):
def preprocess_for_eval(image, height, width, central_fraction=0.875, scope=None):
def preprocess_image(image, height, width, is_training=False, bbox=None, fast_mode=True):
def create_optimizer(hparams):
def train(loss, init_fn, hparams):
def _convert_dataset(split_name, filenames, filename_to_class_id, dataset_dir):
def _extract_labels(label_filename):
def _get_output_filename(dataset_dir, split_name):
def _get_filenames(dataset_dir):
def run(dataset_dir):
def get_split(split_name, dataset_dir, file_pattern=None, reader=None):
def get_dataset(dataset_name, split_name, dataset_dir, file_pattern=None, reader=None):
def provide_batch(dataset_name, split_name, dataset_dir, num_readers, batch_size, num_preprocessing_threads):
@tf.RegisterGradient('GradientReversal') DCNL def _GradientReversalGrad(_, grad):
def maximum_mean_discrepancy(x, y, kernel=utils.gaussian_kernel_matrix):
def mmd_loss(source_samples, target_samples, weight, scope=None):
def correlation_loss(source_samples, target_samples, weight, scope=None):
def dann_loss(source_samples, target_samples, weight, scope=None):
def difference_loss(private_samples, shared_samples, weight=1.0, name=''):
def log_quaternion_loss_batch(predictions, labels, params):
def log_quaternion_loss(predictions, labels, params):
def create_summaries(end_points, prefix='', max_images=3, use_op_name=False):
def reshape_feature_maps(features_tensor):
def accuracy(predictions, labels):
def compute_upsample_values(input_tensor, upsample_height, upsample_width):
def compute_pairwise_distances(x, y):
def gaussian_kernel_matrix(x, y, sigmas):
def provide_batch_fn():
def default_batch_norm_params(is_training=False):
def default_encoder(images, code_size, batch_norm_params=None, weight_decay=0.0):
def large_decoder(codes, height, width, channels, batch_norm_params=None, weight_decay=0.0):
def gtsrb_decoder(codes, height, width, channels, batch_norm_params=None, weight_decay=0.0):
def small_decoder(codes, height, width, channels, batch_norm_params=None, weight_decay=0.0):
def dann_mnist(images, weight_decay=0.0, prefix='model', num_classes=10, **kwargs):
def dann_svhn(images, weight_decay=0.0, prefix='model', num_classes=10, **kwargs):
def dann_gtsrb(images, weight_decay=0.0, prefix='model', num_classes=43, **kwargs):
def dsn_cropped_linemod(images, weight_decay=0.0, prefix='model', num_classes=11, batch_norm_params=None, is_training=False):
def dsn_loss_coefficient(params):
def create_model(source_images, source_labels, domain_selection_mask, target_images, target_labels, similarity_loss, params, basic_tower_name):
def add_similarity_loss(method_name, source_samples, target_samples, params, scope=None):
def add_reconstruction_loss(recon_loss_name, images, recons, weight, domain):
def add_autoencoders(source_data, source_shared, target_data, target_shared, params):
def add_task_loss(source_images, source_labels, basic_tower, params):
def provide_batch_fn():
def run_eval(run_dir, checkpoint_dir, hparams):
def to_degrees(log_quaternion_loss):
def create_metrics(end_points, source_labels, target_labels, hparams):
def add_domain_classifier_losses(end_points, hparams):
def log_quaternion_loss_batch(predictions, labels, params):
def log_quaternion_loss(predictions, labels, params):
def _quaternion_loss(labels, predictions, weight, batch_size, domain, add_summaries):
def _add_task_specific_losses(end_points, source_labels, num_classes, hparams, add_summaries=False):
def _transferred_similarity_loss(reconstructions, source_images, weight=1.0, method='mse', max_diff=0.4, name='similarity'):
def g_step_loss(source_images, source_labels, end_points, hparams, num_classes):
def d_step_loss(end_points, source_labels, num_classes, hparams):
def create_hparams(hparam_string=None):
def _get_vars_and_update_ops(hparams, scope):
def _train(discriminator_train_op, generator_train_op, logdir, master='', is_chief=True, scaffold=None, hooks=None, chief_only_hooks=None, save_checkpoint_secs=600, save_summaries_steps=100, hparams=None):
def run_training(run_dir, checkpoint_dir, hparams):
def remove_depth(images):
def image_grid(images, max_grid_size=4):
def source_and_output_image_grid(output_images, source_images=None, max_grid_size=4):
def summarize_model(end_points):
def summarize_transferred_grid(transferred_images, source_images=None, name='Transferred'):
def summarize_transferred(source_images, transferred_images, max_images=20, name='Transferred'):
def summaries_color_distributions(images, name):
def summarize_images(images, name):
def add_task_specific_model(images, hparams, num_classes=10, is_training=False, reuse_private=False, private_scope=None, reuse_shared=False, shared_scope=None):
def mnist_classifier(images, is_training=False, num_classes=10, reuse_private=False, private_scope='mnist', reuse_shared=False, shared_scope='task_model'):
def svhn_classifier(images, is_training=False, num_classes=10, reuse_private=False, private_scope=None, reuse_shared=False, shared_scope='task_model'):
def gtsrb_classifier(images, is_training=False, num_classes=43, reuse_private=False, private_scope='gtsrb', reuse_shared=False, shared_scope='task_model'):
def pose_mini_tower(images, num_classes=11, is_training=False, reuse_private=False, private_scope='pose_mini', reuse_shared=False, shared_scope='task_model'):
def doubling_cnn_class_and_quaternion(images, num_private_layers=1, num_classes=10, is_training=False, reuse_private=False, private_scope='doubling_cnn', reuse_shared=False, shared_scope='task_model'):
def create_model(hparams, target_images, source_images=None, source_labels=None, is_training=False, noise=None, num_classes=None):
def lrelu(x, leakiness=0.2):
def upsample(net, num_filters, scale=2, method='resize_conv', scope=None):
def project_latent_vars(hparams, proj_shape, latent_vars, combine_method='sum'):
def resnet_block(net, hparams):
def resnet_stack(images, output_shape, hparams, scope=None):
def predict_domain(images, hparams, is_training=False, reuse=False, scope='discriminator'):
def dcgan_generator(images, output_shape, hparams, scope=None):
def dcgan(target_images, latent_vars, hparams, scope='dcgan'):
def resnet_generator(images, output_shape, hparams, latent_vars=None):
def residual_interpretation_block(images, hparams, scope):
def residual_interpretation_generator(images, is_training, hparams, latent_vars=None):
def simple_generator(source_images, target_images, is_training, hparams, latent_vars):
def preprocess_classification(image, labels, is_training=False):
def preprocess_style_transfer(image, labels, augment=False, size=None, is_training=False):
def image_augmentation(image):
def resize_image(image, size=None):
def LSTMCell(x, mprev, cprev, key, params):
def ReadFirstCode(dataset):
def LoadBinaryCode(input_config, batch_size):
def int64_feature(values):
def float_feature(values):
def CreateWeightLoss():
def CreateBlockUpdates():
def ConvertSignCodeToZeroOneCode(x):
def ConvertZeroOneCodeToSignCode(x):
def HandleConvPaddingModes(x, padding, kernel_shape, strides):
def LSTMBiasInit(shape, dtype):
def _FSpecialGauss(size, sigma):
def _SSIMForMultiScale(img1, img2, max_val=255, filter_size=11, filter_sigma=1.5, k1=0.01, k2=0.03):
def MultiScaleSSIM(img1, img2, max_val=255, filter_size=11, filter_sigma=1.5, k1=0.01, k2=0.03, weights=None):
def run_epoch(session, m, names, counts, epoch_size, eval_op, verbose=False):
def train(data_dir, checkpoint_path, config):
def namignize(names, checkpoint_path, config):
def namignator(checkpoint_path, config):
def read_names(names_path):
def _letter_to_number(letter):
def namignizer_iterator(names, counts, batch_size, num_steps, epoch_size):
def name_to_batch(name, batch_size, num_steps):
def add_rotator_image_loss(inputs, outputs, step_size, weight_scale):
def add_rotator_mask_loss(inputs, outputs, step_size, weight_scale):
def add_volume_proj_loss(inputs, outputs, num_views, weight_scale):
def add_volume_loss(inputs, outputs, num_views, weight_scale):
def regularization_loss(scopes, params):
def save_image(inp_array, image_file):
def image_flipud(images):
def resize_image(inp_array, new_height, new_width):
def display_voxel(points, vis_size=128):
def visualize_voxel_spectral(points, vis_size=128):
def visualize_voxel_scatter(points, vis_size=128):
def _get_data_from_provider(inputs, batch_size, split_name):
def get_inputs(dataset_dir, dataset_name, split_name, batch_size, image_size, is_training):
def preprocess(raw_inputs, step_size):
def get_init_fn(scopes, params):
def get_loss(inputs, outputs, params):
def get_train_op_for_scope(loss, optimizer, scopes, params):
def write_disk_grid(global_step, summary_freq, log_dir, input_images, output_images, pred_images, pred_masks):
def _build_image_grid(input_images, output_images, pred_images, pred_masks):
def _get_split(file_pattern, num_samples, num_views, image_size, vox_size):
def get(dataset_dir, dataset_name, split_name, shuffle=True, num_readers=1, common_queue_capacity=64, common_queue_min=50):
def add_image_pred_metrics(inputs, outputs, num_views, upscale_factor):
def add_mask_pred_metrics(inputs, outputs, num_views, upscale_factor):
def add_volume_iou_metrics(inputs, outputs):
def _build_image_grid(input_images, gt_projs, pred_projs, input_voxels, output_voxels, vis_size=128):
def _build_image_grid(input_images, gt_projs, pred_projs, pred_voxels):
def bilinear(input_x, input_y, output_size):
def model(poses, actions, params, is_training):
def model(images, params, is_training):
def transformer(voxels, theta, out_size, z_near, z_far, name='PerspectiveTransformer'):
@tf.contrib.framework.add_arg_scope DCNL def conv3d_transpose(inputs, num_outputs, kernel_size, stride=1, padding='SAME', activation_fn=tf.nn.relu, weights_initializer=tf.contrib.layers.xavier_initializer(), biases_initializer=tf.zeros_initializer(), reuse=None, trainable=True, scope=None):
def model(identities, params, is_training):
def _get_network(name):
def get(params, is_training=False, reuse=False):
def model(voxels, transform_matrix, params, is_training):
def _get_network(name):
def get(params, is_training=False, reuse=False, run_projection=True):
def _postprocess_im(images):
def model(identities, poses, params, is_training):
def _extract_argmax_and_embed(embedding, output_projection=None, update_embedding=True):
def ExampleGen(data_path, num_epochs=None):
def Pad(ids, pad_id, length):
def GetWordIds(text, vocab, pad_len=None, pad_id=None):
def Ids2Words(ids_list, vocab):
def SnippetGen(text, start_tok, end_tok, inclusive=True):
def ToSentences(paragraph, include_token=True):
def _RunningAvgLoss(loss, running_avg_loss, summary_writer, step, decay=0.999):
def _Train(model, data_batcher):
def _Eval(model, data_batcher, vocab=None):
def sequence_loss_by_example(inputs, targets, weights, loss_function, average_across_timesteps=True, name=None):
def sampled_sequence_loss(inputs, targets, weights, loss_function, average_across_timesteps=True, average_across_batch=True, name=None):
def linear(args, output_size, bias, bias_start=0.0, scope=None):
def get_batch(generator, batch_size, num_steps, max_word_length, pad=False):
def _LoadModel(gd_file, ckpt_file):
def _EvalModel(dataset):
def _SampleModel(prefix_words, vocab):
def _DumpEmb(vocab):
def _DumpSentenceEmbedding(sentence, vocab):
def collect_members(module_to_name):
def _get_anchor(module_to_name, fullname):
def write_libraries(dir, libraries):
def fgm(x, preds, y=None, eps=0.3, ord=np.inf, clip_min=None, clip_max=None, targeted=False):
def vatm(model, x, logits, eps, num_iterations=1, xi=1e-06, clip_min=None, clip_max=None, scope=None):
def apply_perturbations(i, j, X, increase, theta, clip_min, clip_max):
def saliency_map(grads_target, grads_other, search_domain, increase):
def jacobian(sess, x, grads, target, X, nb_features, nb_classes, feed=None):
def jacobian_graph(predictions, x, nb_classes):
def jsma(sess, x, predictions, grads, sample, target, theta, gamma, clip_min, clip_max, feed=None):
def jsma_batch(sess, x, pred, grads, X, theta, gamma, clip_min, clip_max, nb_classes, y_target=None, feed=None, **kwargs):
def jacobian_augmentation(sess, x, X_sub_prev, Y_sub, grads, lmbda, keras_phase=None, feed=None):
def fgsm(x, predictions, eps, back='tf', clip_min=None, clip_max=None):
def vatm(model, x, logits, eps, back='tf', num_iterations=1, xi=1e-06, clip_min=None, clip_max=None):
def jsma(sess, x, predictions, grads, sample, target, theta, gamma=np.inf, increase=True, back='tf', clip_min=None, clip_max=None):
def batch_indices(batch_nb, data_length, batch_size):
def other_classes(nb_classes, class_ind):
def to_categorical(y, num_classes=None):
def random_targets(gt, nb_classes):
def pair_visual(original, adversarial, figure=None):
def grid_visual(data):
def fgm(x, predictions, y=None, eps=0.3, ord=np.inf, clip_min=None, clip_max=None):
def vatm(model, x, predictions, eps, num_iterations=1, xi=1e-06, clip_min=None, clip_max=None, seed=12345):
def list_files(suffix=''):
def _list_files(path, suffix=''):
def docstring_errors(filename, global_dict=None):
def test_format_pep8():
def print_files_information_pep8():
def test_format_docstrings():
def verify_format_docstrings():
def conv_2d(filters, kernel_shape, strides, padding, input_shape=None):
def cnn_model(logits=False, input_ph=None, img_rows=28, img_cols=28, channels=1, nb_filters=64, nb_classes=10):
def model_loss(y, model, mean=True):
def initialize_uninitialized_global_variables(sess):
def model_train(sess, x, y, predictions, X_train, Y_train, save=False, predictions_adv=None, init_all=True, evaluate=None, verbose=True, feed=None, args=None):
def model_eval(sess, x, y, predictions=None, X_test=None, Y_test=None, feed=None, args=None, model=None):
def tf_model_load(sess, file_path=None):
def batch_eval(sess, tf_inputs, tf_outputs, numpy_inputs, feed=None, args=None):
def model_argmax(sess, x, predictions, samples, feed=None):
def l2_batch_normalize(x, epsilon=1e-12, scope=None):
def kl_with_logits(p_logits, q_logits, scope=None, loss_collection=tf.GraphKeys.REGULARIZATION_LOSSES):
def adadelta(loss_or_grads, params, learning_rate=1.0, rho=0.95, epsilon=1e-06):
def model_loss(y, model, mean=True):
def th_model_train(x, y, predictions, params, X_train, Y_train, save=False, predictions_adv=None, evaluate=None, args=None):
def th_model_eval(x, y, model, X_test, Y_test, args=None):
def batch_eval(th_inputs, th_outputs, numpy_inputs, args=None):
def model_argmax(x, predictions, sample):
def l2_batch_normalize(x, epsilon=1e-12):
def kl_with_logits(q_logits, p_logits):
def data_mnist(datadir=u'/tmp/', train_start=0, train_end=60000, test_start=0, test_end=10000):
def mnist_tutorial(train_start=0, train_end=60000, test_start=0, test_end=10000, nb_epochs=6, batch_size=128, learning_rate=0.001, train_dir=u'/tmp', filename=u'mnist.ckpt', load_model=False, testing=False):
def main():
def setup_tutorial():
def prep_bbox(sess, x, y, X_train, Y_train, X_test, Y_test, nb_epochs, batch_size, learning_rate):
def substitute_model(img_rows=28, img_cols=28, nb_classes=10):
def train_sub(sess, x, y, bbox_preds, X_sub, Y_sub, nb_classes, nb_epochs_s, batch_size, learning_rate, data_aug, lmbda):
def mnist_blackbox(train_start=0, train_end=60000, test_start=0, test_end=10000, nb_classes=10, batch_size=128, learning_rate=0.001, nb_epochs=10, holdout=150, data_aug=6, nb_epochs_s=10, lmbda=0.1):
def mnist_tutorial_jsma(train_start=0, train_end=60000, test_start=0, test_end=10000, viz_enabled=True, nb_epochs=6, batch_size=128, nb_classes=10, source_samples=10, learning_rate=0.001):
def mnist_tutorial_cw(train_start=0, train_end=60000, test_start=0, test_end=10000, viz_enabled=True, nb_epochs=6, batch_size=128, nb_classes=10, source_samples=10, learning_rate=0.001, attack_iterations=100, model_path=os.path.join(u'models', u'mnist'), targeted=True):
def mnist_tutorial(train_start=0, train_end=60000, test_start=0, test_end=10000, nb_epochs=6, batch_size=128, learning_rate=0.001, clean_train=True, testing=False):
def load_target_class(input_dir):
def load_images(input_dir, batch_shape):
def save_images(images, filenames, output_dir):
def load_images(input_dir, batch_shape):
def save_images(images, filenames, output_dir):
def load_images(input_dir, batch_shape):
def save_images(images, filenames, output_dir):
def load_images(input_dir, batch_shape):
def save_images(images, filenames, output_dir):
def parse_args():
def read_submissions_from_directory(dirname, use_gpu):
def load_defense_output(filename):
def compute_and_save_scores_and_ranking(attacks_output, defenses_output, dataset_meta, output_dir, save_all_classification=False):
def parse_args():
def download_image(image_id, url, x1, y1, x2, y2, output_dir):
def load_images(input_dir, batch_shape):
def data_cifar10():
def main(argv=None):
def parse(boardstr):
def _list_mock_games(path):
def run_n_games(optimizer, learner, opponent, num_games, mock_states=[]):
def log_loss(y_true, y_pred):
def one_hot_action(action, size=19):
def shuffled_hdf5_batch_generator(state_dataset, action_dataset, indices, batch_size, transforms=[]):
def run_training(cmd_line_args=None):
def neuralnet(cls):
def _parse_sgf_move(node_value):
def _sgf_init_gamestate(sgf_root):
def sgf_to_gamestate(sgf_string):
def save_gamestate_to_sgf(gamestate, path, filename, black_player_name='Unknown', white_player_name='Unknown', size=19, komi=7.5):
def sgf_iter_states(sgf_string, include_end=True):
def get_board(state):
def get_turns_since(state, maximum=8):
def get_liberties(state, maximum=8):
def get_capture_size(state, maximum=8):
def get_self_atari_size(state, maximum=8):
def get_liberties_after(state, maximum=8):
def get_ladder_capture(state):
def get_ladder_escape(state):
def get_sensibleness(state):
def get_legal(state):
def run_game_converter(cmd_line_args=None):
def crypt(data, key):
def tencode(data, key, encode=base64.b64encode, salt_length=16):
def tdecode(data, key, decode=base64.b64decode, salt_length=16):
def crypt(data, key):
def tencode(data, key, encode=base64.b64encode, salt_length=16):
def tdecode(data, key, decode=base64.b64decode, salt_length=16):
def get_http_expiry(_Expirestype, _num):
def secs_from_days(_seconds, _num):
def get_file(path, dest, env='base'):
def syspro():
def NginxGrains():
def Grains_openfile():
def md5(fileName, excludeLine='', includeLine=''):
def naughty_strings(filepath=FILEPATH):
def register_backend_funcs(func):
def display_string(w_len, target_line):
def line_splitter(num_of_words, line):
def get_network_manager_objects(system_bus):
def toggle_networking(nm_enable):
def is_managed_by_network_manager(interface_name):
def interface_property_detector(network_adapter):
def is_wireless_interface(interface_name):
def generate_random_address():
def config_section_map(config_file, section):
def check_args(args):
def set_ip_fwd():
def set_route_localnet():
def select_template(template_argument, template_manager):
def select_access_point(screen, interface, mac_matcher):
def key_movement(information):
def kill_interfering_procs():
def is_valid_handshake_capture(handshake_path):
def get_dnsmasq():
def get_hostapd():
def get_libdbus():
def plugin(cls):
def persistent(cls):
def rootcontext(cls):
def notrack(cls):
def notrack_this(cls):
def track(cls):
def interface(cls):
def extract_context():
def url(pattern):
def _total_seconds(td):
def _report_invalid_cookie(data):
def _report_unknown_attribute(name):
def _report_invalid_attribute(name, value, reason):
def strip_spaces_and_quotes(value):
def parse_string(data, unquote=default_unquote):
def parse_date(value):
def parse_domain(value):
def parse_path(value):
def parse_value(value, allow_spaces=True, unquote=default_unquote):
def valid_name(name):
def valid_value(value, quote=default_cookie_quote, unquote=default_unquote):
def valid_date(date):
def valid_domain(domain):
def valid_path(value):
def valid_max_age(number):
def encode_cookie_value(data, quote=default_cookie_quote):
def encode_extension_av(data, quote=default_extension_quote):
def render_date(date):
def _parse_request(header_data, ignore_bad_cookies=False):
def parse_one_response(line, ignore_bad_cookies=False, ignore_bad_attributes=True):
def _parse_response(header_data, ignore_bad_cookies=False, ignore_bad_attributes=True):
def public(f):
@public DCNL def str_fsize(sz):
@public DCNL def str_timedelta(s):
@public DCNL def cache_value(duration=None):
@public DCNL def platform_select(**values):
@public DCNL def make_report(e):
def authenticate(username, password, service='login'):
def is_bound_context(el):
def is_bound(el):
def _element_in_child_binder(root, e):
def _element_in_child_template(root, e):
@public DCNL def p(prop, default=None, bindtypes=[], type=unicode, public=True, doc=None):
@public DCNL def on(id, event):
def profile_start(name):
def profile_end(name=None):
def get_profiles():
def get(value):
def intent(id):
def take(n, iterable):
def restrict(permission):
def get_tmp_filepath(dir_name, save_name):
def check_first():
def load_conf():
def get_cache_path(profile_name):
def get_tmp_path(profile_name):
def timestamp():
def latency():
def get_human_size(size, use_giga=True):
def get_delta_days(from_sec, to_sec):
def get_human_time(t):
def get_recent_mtime(t):
def rec_split_path(path):
def list_remove_by_index(l, index):
def uris_to_paths(uris):
def natsort(string):
def RSA_encrypt(public_key, message):
def json_loads_single(s):
def validate_pathname(filepath):
def get_ppui_logintime():
def get_BAIDUID():
def get_token(cookie):
def get_UBI(cookie, tokens):
def check_login(cookie, tokens, username):
def get_signin_vcode(cookie, codeString):
def refresh_signin_vcode(cookie, tokens, vcodetype):
def get_public_key(cookie, tokens):
def post_login(cookie, tokens, username, password, rsakey, verifycode='', codestring=''):
def parse_bdstoken(content):
def get_bdstoken(cookie):
def urloption(url, headers={}, retries=RETRIES):
def urlopen(url, headers={}, data=None, retries=RETRIES, timeout=TIMEOUT):
def urlopen_without_redirect(url, headers={}, data=None, retries=RETRIES):
def get_quota(cookie, tokens):
def get_user_uk(cookie, tokens):
def get_user_info(tokens, uk):
def list_share(cookie, tokens, uk, page=1):
def list_share_files(cookie, tokens, uk, shareid, dirname, page=1):
def list_share_single_file(cookie, tokens, uk, shareid):
def enable_share(cookie, tokens, fid_list):
def disable_share(cookie, tokens, shareid_list):
def enable_private_share(cookie, tokens, fid_list):
def verify_share_password(uk, shareid, pwd, vcode=''):
def get_share_uk_and_shareid(cookie, url):
def get_share_dirname(url):
def get_share_url_with_dirname(uk, shareid, dirname):
def share_transfer(cookie, tokens, shareid, uk, filelist, dest, upload_mode):
def list_inbox(cookie, tokens, start=0, limit=20):
def list_trash(cookie, tokens, path='/', page=1, num=100):
def restore_trash(cookie, tokens, fidlist):
def delete_trash(cookie, tokens, fidlist):
def clear_trash(cookie, tokens):
def list_dir_all(cookie, tokens, path):
def list_dir(cookie, tokens, path, page=1, num=100):
def mkdir(cookie, tokens, path):
def delete_files(cookie, tokens, filelist):
def rename(cookie, tokens, filelist):
def move(cookie, tokens, filelist):
def copy(cookie, tokens, filelist):
def get_category(cookie, tokens, category, page=1):
def get_download_link(cookie, tokens, path):
def stream_download(cookie, tokens, path):
def get_streaming_playlist(cookie, path, video_type='M3U8_AUTO_480'):
def upload(cookie, source_path, path, upload_mode):
def rapid_upload(cookie, tokens, source_path, path, upload_mode):
def slice_upload(cookie, data):
def create_superfile(cookie, path, block_list):
def get_metas(cookie, tokens, filelist, dlink=True):
def search(cookie, tokens, key, path='/'):
def cloud_add_link_task(cookie, tokens, source_url, save_path, vcode='', vcode_input=''):
def cloud_add_bt_task(cookie, tokens, source_url, save_path, selected_idx, file_sha1='', vcode='', vcode_input=''):
def cloud_query_sinfo(cookie, tokens, source_path):
def cloud_query_magnetinfo(cookie, tokens, source_url, save_path):
def cloud_list_task(cookie, tokens, start=0):
def cloud_query_task(cookie, tokens, task_ids):
def cloud_cancel_task(cookie, tokens, task_id):
def cloud_delete_task(cookie, tokens, task_id):
def cloud_clear_task(cookie, tokens):
def is_keypress(k):
def format_keyvals(lst, key='key', val='text', indent=0):
def lookup(address, port, s):
def parse_content_type(c):
def get_by_shortcut(s):
def get_header_tokens(headers, key):
def read_request_head(rfile):
def read_response_head(rfile):
def read_body(rfile, expected_size, limit=None, max_chunk_size=4096):
def connection_close(http_version, headers):
def expected_http_body_size(request, response=None):
def _parse_authority_form(hostport):
def _read_headers(rfile):
def _read_chunked(rfile, limit=sys.maxsize):
def _assemble_request_line(request_data):
def _assemble_request_headers(request_data):
def decode(hdrs, content):
def date_time_string():
def client_handshake_headers(version=None, key=None, protocol=None, extensions=None):
def server_handshake_headers(client_key, protocol=None, extensions=None):
def tflow(client_conn=True, server_conn=True, req=True, resp=None, err=None):
def tclient_conn():
def tserver_conn():
def terr(content='error'):
def treader(bytes):
def treq(**kwargs):
def tresp(**kwargs):
def dummy_cert(privkey, cacert, commonname, sans):
def parse_hook(s):
def parse_setheader(s):
def setbit(byte, offset, value):
def test_simple():
def next_layer(next_layer):
def modify(chunks):
def response(flow):
def done():
def name_value(obj):
def responseheaders(flow):
def get_random_object(random=random, depth=0):
def test_empty_key_trailing_equal_sign():
@pytest.mark.parametrize('encoder', ['gzip', 'br', 'deflate']) DCNL def test_encoders(encoder):
@pytest.mark.parametrize('encoder', ['utf8', 'latin-1']) DCNL def test_encoders_strings(encoder):
@patch('traceback.extract_tb') DCNL def test_pyparsing_bug(extract_tb):
def test_load_fullname():
@click.command() DCNL @click.argument('input', type=click.File('rb')) DCNL def inspect(input):
def treader(bytes):
def parse_anchor_spec(s):
def get_header(val, headers):
def parse_pathod(s, use_http2=False):
def parse_websocket_frame(s):
def serve(msg, fp, settings):
def rand_byte(chars):
def send_chunk(fp, val, blocksize, start, end):
def write_values(fp, vals, actions, sofar=0, blocksize=BLOCKSIZE):
def get_header(val, headers):
@task(name='geonode.tasks.email.send_queued_notifications', queue='email') DCNL def send_queued_notifications(*args):
@task(name='geonode.tasks.email.send_email', queue='email') DCNL def send_email(*args, **kwargs):
@task(name='geonode.tasks.update.geoserver_update_layers', queue='update') DCNL def geoserver_update_layers(*args, **kwargs):
@task(name='geonode.tasks.update.create_document_thumbnail', queue='update') DCNL def create_document_thumbnail(object_id):
@task(name='geonode.tasks.deletion.delete_layer', queue='cleanup') DCNL def delete_layer(object_id):
@task(name='geonode.tasks.deletion.delete_map', queue='cleanup', expires=300) DCNL def delete_map(object_id):
@csrf_exempt DCNL def verify_token(request):
@csrf_exempt DCNL def roles(request):
@csrf_exempt DCNL def users(request):
@csrf_exempt DCNL def admin_role(request):
def _contains_bad_names(file_names):
def _clean_string(str, regex='(^[^a-zA-Z\\._]+)|([^a-zA-Z\\._0-9]+)', replace='_'):
def _find_file_type(file_names, extension):
def clean_macosx_dir(file_names):
def scan_file(file_name):
def run_import(upload_session, async):
def time_step(upload_session, time_attribute, time_transform_type, presentation_strategy, precision_value, precision_step, end_time_attribute=None, end_time_transform_type=None, end_time_format=None, time_format=None):
def get_wms(version='1.1.1', type_name=None):
def data_upload_progress(req):
@login_required DCNL def view(req, step):
def _get_basic_auth_info(request):
def _split_query(query):
def forward_mercator(lonlat):
def inverse_mercator(xy):
def layer_from_viewer_config(model, layer, source, ordering):
def resolve_object(request, model, query, permission='base.view_resourcebase', permission_required=True, permission_msg=None):
def json_response(body=None, errors=None, redirect_to=None, exception=None, content_type=None, status=None):
def check_shp_columnnames(layer):
def set_attributes(layer, attribute_map, overwrite=False, attribute_stats=None):
def load_backend(backend_name):
def default_catalogue_backend():
def get_catalogue(backend=None, skip_caps=True):
def catalogue_pre_delete(instance, sender, **kwargs):
def catalogue_post_save(instance, sender, **kwargs):
def catalogue_pre_save(instance, sender, **kwargs):
@csrf_exempt DCNL def csw_global_dispatch(request):
@csrf_exempt DCNL def opensearch_dispatch(request):
@csrf_exempt DCNL def data_json(request):
def dictfetchall(cursor):
@csrf_exempt DCNL def csw_render_extra_format_txt(request, layeruuid, resname):
def geoserver_urls(request):
def check_geoserver_is_up():
def _add_sld_boilerplate(symbolizer):
def delete_from_postgis(resource_name):
def gs_slurp(ignore_errors=True, verbosity=1, console=None, owner=None, workspace=None, store=None, filter=None, skip_unadvertised=False, skip_geonode_registered=False, remove_deleted=False, permissions=None, execute_signals=False):
def set_attributes_from_geoserver(layer, overwrite=False):
def is_layer_attribute_aggregable(store_type, field_name, field_type):
def get_attribute_statistics(layer_name, field):
def get_coverage_grid_extent(instance):
def cleanup(name, uuid):
def _create_db_featurestore(name, data, overwrite=False, charset='UTF-8', workspace=None):
def wps_execute_layer_attribute_statistics(layer_name, field):
def style_update(request, url):
def set_time_info(layer, attribute, end_attribute, presentation, precision_value, precision_step, enabled=True):
def get_time_info(layer):
def create_gs_thumbnail(instance, overwrite=False):
def feature_edit_check(request, layername):
def style_change_check(request, path):
def layer_batch_download(request):
def layer_acls(request):
def geoserver_pre_delete(instance, sender, **kwargs):
def geoserver_pre_save(instance, sender, **kwargs):
def geoserver_post_save(instance, sender, **kwargs):
def get_web_page(url, username=None, password=None, login_url=None):
def check_layer(uploaded):
def get_version(version=None):
def get_git_changeset():
def resource_urls(request):
def _clean_string(str, regex='(^[^a-zA-Z\\._]+)|([^a-zA-Z\\._0-9]+)', replace='_'):
def get_files(filename):
def layer_type(filename):
def get_valid_name(layer_name):
def get_valid_layer_name(layer, overwrite):
def get_default_user():
def unzip_file(upload_file, extension='.shp', tempdir=None):
def extract_tarfile(upload_file, extension='.shp', tempdir=None):
def file_upload(filename, name=None, user=None, title=None, abstract=None, license=None, category=None, keywords=None, regions=None, date=None, skip=True, overwrite=False, charset='UTF-8', metadata_uploaded_preserve=False, metadata_upload_form=False):
def upload(incoming, user=None, overwrite=False, name=None, title=None, abstract=None, date=None, license=None, category=None, keywords=None, regions=None, skip=True, ignore_errors=True, verbosity=1, console=None, private=False, metadata_uploaded_preserve=False):
def pre_delete_layer(instance, sender, **kwargs):
def post_delete_layer(instance, sender, **kwargs):
def set_metadata(xml):
def iso2dict(exml):
def fgdc2dict(exml):
def dc2dict(exml):
def sniff_date(datestr):
def get_tagname(element):
def _resolve_layer(request, alternate, permission='base.view_resourcebase', msg=_PERMISSION_MSG_GENERIC, **kwargs):
def get_layer(request, layername):
def get_users_with_perms(obj):
def set_geofence_invalidate_cache():
def set_geofence_all(instance):
def set_geofence_owner(instance, username, view_perms=False, download_perms=False):
def set_geofence_group(instance, groupname, view_perms=False, download_perms=False):
def set_owner_permissions(resource):
def remove_object_permissions(instance):
@require_POST DCNL def request_permissions(request):
def get_db_conn(db_name, db_user, db_port, db_host, db_passwd):
def patch_db(db_name, db_user, db_port, db_host, db_passwd):
def cleanup_db(db_name, db_user, db_port, db_host, db_passwd):
def dump_db(config, db_name, db_user, db_port, db_host, db_passwd, target_folder):
def restore_db(config, db_name, db_user, db_port, db_host, db_passwd, source_folder):
def get_dir_time_suffix():
def confirm(prompt=None, resp=False):
def delete_orphaned_thumbs():
def resourcebase_post_save(instance, *args, **kwargs):
def rating_post_save(instance, *args, **kwargs):
def do_login(sender, user, request, **kwargs):
def do_logout(sender, user, request, **kwargs):
def all_public():
def run(self, request, queryset):
def restore(self, request, queryset):
def send_now_notification(*args, **kwargs):
@call_celery DCNL def send_notification(*args, **kwargs):
def get_notification_recipients(notice_type_label, exclude_user=None):
def _layer_json(layers, sources):
def fix_baselayers(map_id):
def _resolve_map(request, id, permission='base.change_resourcebase', msg=_PERMISSION_MSG_GENERIC, **kwargs):
def map_detail(request, mapid, snapshot=None, template='maps/map_detail.html'):
@login_required DCNL def map_remove(request, mapid, template='maps/map_remove.html'):
def map_view(request, mapid, snapshot=None, template='maps/map_view.html'):
def map_edit(request, mapid, snapshot=None, template='maps/map_edit.html'):
def new_map_config(request):
def map_download(request, mapid, template='maps/map_download.html'):
def map_download_check(request):
def map_wmc(request, mapid, template='maps/wmc.xml'):
def map_wms(request, mapid):
def snapshot_config(snapshot, map_obj, user, access_token):
def featured_map(request, site):
def featured_map_info(request, site):
def snapshot_create(request):
def get_default_user():
def get_valid_user(user=None):
def profile_post_save(instance, sender, **kwargs):
def forgot_username(request):
def delete_orphaned_document_files():
def guess_mimetype(document_path):
def render_document(document_path, extension='png'):
def generate_thumbnail_content(image_path, size=(200, 150)):
def _resolve_document(request, docid, permission='base.change_resourcebase', msg=_PERMISSION_MSG_GENERIC, **kwargs):
def document_detail(request, docid):
def get_data(action, key, default=None):
@register.inclusion_tag('social/_activity_item.html') DCNL def activity_item(action, **kwargs):
def activity_post_modify_object(sender, instance, created=None, **kwargs):
def notification_post_save_resource(instance, sender, created, **kwargs):
def notification_post_delete_resource(instance, sender, **kwargs):
def rating_post_save(instance, sender, created, **kwargs):
def comment_post_save(instance, sender, created, **kwargs):
@login_required DCNL def services(request):
@login_required DCNL def register_service(request):
def register_service_by_type(request):
def _is_unique(url):
def _clean_url(base_url):
def _get_valid_name(proposed_name):
def _verify_service_type(base_url, service_type=None):
def _process_wms_service(url, name, type, username, password, wms=None, owner=None, parent=None):
def _register_cascaded_service(url, type, name, username, password, wms=None, owner=None, parent=None):
def _register_cascaded_layers(service, owner=None):
def _register_indexed_service(type, url, name, username, password, verbosity=False, wms=None, owner=None, parent=None):
def _register_indexed_layers(service, wms=None, verbosity=False):
def _register_harvested_service(url, name, username, password, csw=None, owner=None):
def _harvest_csw(csw, maxrecords=10, totalrecords=float('inf')):
def _register_arcgis_url(url, name, username, password, owner=None, parent=None):
def _register_arcgis_layers(service, arc=None):
def _process_arcgis_service(arcserver, name, owner=None, parent=None):
def _process_arcgis_folder(folder, name, services=None, owner=None, parent=None):
def _register_ogp_service(url, owner=None):
def _harvest_ogp_layers(service, maxrecords=10, start=0, totalrecords=float('inf'), owner=None, institution=None):
def process_ogp_results(ogp, result_json, owner=None):
def service_detail(request, service_id):
@login_required DCNL def edit_service(request, service_id):
def update_layers(service):
@login_required DCNL def remove_service(request, service_id):
def group_pre_delete(instance, sender, **kwargs):
def xsl_post_save(instance, sender, **kwargs):
def add_xsl_link(resourcebase):
def get_favorite_info(user, content_object):
@login_required DCNL def favorite(req, subject, id):
@login_required DCNL def delete_favorite(req, id):
@login_required DCNL def get_favorites(req):
def create_model(name, fields=None, app_label=u'', module=u'', options=None, admin_opts=None, with_admin=False):
def generate_model(model_description, mapping, db_key=u''):
def normalize_col_name(col_name, used_column_names, is_relation):
def get_field_type(connection, table_name, row):
def configure_models(instance, sender, **kwargs):
def post_save_layer(instance, sender, **kwargs):
def get_model_field_name(field):
def get_extent_from_text(points, srid_in, srid_out):
def merge_geometries(geometries_str, sep='$'):
def file2pgtable(infile, table_name, srid=4326):
def execute(sql):
def sed(filename, change_dict):
def add_site(name, domain):
def post_save_resource(instance, sender, **kwargs):
def post_save_site(instance, sender, **kwargs):
def post_delete_resource(instance, sender, **kwargs):
def post_delete_site(instance, sender, **kwargs):
def post_save_profile(instance, sender, **kwargs):
def post_delete_profile(instance, sender, **kwargs):
def layer_acls(request):
@task DCNL @cmdopts([('geoserver=', 'g', 'The DCSP location DCSP of DCSP the DCSP geoserver DCSP build DCSP (.war DCSP file).'), ('jetty=', 'j', 'The DCSP location DCSP of DCSP the DCSP Jetty DCSP Runner DCSP (.jar DCSP file).')]) DCNL def setup_geoserver(options):
@task DCNL @needs(['setup_geoserver']) DCNL def setup(options):
@task DCNL def win_install_deps(options):
@cmdopts([('version=', 'v', 'Legacy DCSP GeoNode DCSP version DCSP of DCSP the DCSP existing DCSP database.')]) DCNL @task DCNL def upgradedb(options):
@task DCNL def sync(options):
@task DCNL def package(options):
@task DCNL @needs(['start_geoserver', 'start_django']) DCNL @cmdopts([('bind=', 'b', 'Bind DCSP server DCSP to DCSP provided DCSP IP DCSP address DCSP and DCSP port DCSP number.'), ('java_path=', 'j', 'Full DCSP path DCSP to DCSP java DCSP install DCSP for DCSP Windows'), ('foreground', 'f', 'Do DCSP not DCSP run DCSP in DCSP background DCSP but DCSP in DCSP foreground')], share_with=['start_django', 'start_geoserver']) DCNL def start():
@task DCNL def stop_django():
@task DCNL def stop_geoserver():
@task DCNL def stop():
@cmdopts([('bind=', 'b', 'Bind DCSP server DCSP to DCSP provided DCSP IP DCSP address DCSP and DCSP port DCSP number.')]) DCNL @task DCNL def start_django():
@cmdopts([('java_path=', 'j', 'Full DCSP path DCSP to DCSP java DCSP install DCSP for DCSP Windows')]) DCNL @task DCNL def start_geoserver(options):
@task DCNL def test(options):
@task DCNL @cmdopts([('name=', 'n', 'Run DCSP specific DCSP tests.')]) DCNL def test_integration(options):
@task DCNL @cmdopts([('coverage', 'c', 'use DCSP this DCSP flag DCSP to DCSP generate DCSP coverage DCSP during DCSP test DCSP runs')]) DCNL def run_tests(options):
@task DCNL @needs(['stop']) DCNL def reset():
@needs(['reset']) DCNL def reset_hard():
@task DCNL @cmdopts([('type=', 't', 'Import DCSP specific DCSP data DCSP type DCSP ("vector", DCSP "raster", DCSP "time")')]) DCNL def setup_data():
@needs(['package']) DCNL @cmdopts([('key=', 'k', 'The DCSP GPG DCSP key DCSP to DCSP sign DCSP the DCSP package'), ('ppa=', 'p', 'PPA DCSP this DCSP package DCSP should DCSP be DCSP published DCSP to.')]) DCNL def deb(options):
def kill(arg1, arg2):
def migrate_layers(archive, owner):
def backup_full():
def get_db_conn():
def patch_db():
def cleanup_db():
def get_dir_time_suffix():
def confirm(prompt=None, resp=False):
def restore_full(archive):
def get_random_user():
def assign_random_category(resource):
def assign_keywords(resource):
def assign_regions(resource):
def create_users(n_users):
def set_resource(resource):
def create_document(number):
def create_layer(number):
def is_required(action):
def is_optional(action):
def is_choice(action):
def is_standard(action):
def is_flag(action):
def is_counter(action):
def clean_default(widget_type, default):
def Gooey(f=None, advanced=True, language='english', auto_start=False, program_name=None, program_description=None, default_size=(610, 530), required_cols=2, optional_cols=2, dump_build_config=False, load_build_config=None, monospace_display=False, image_dir='default', language_dir=get_resource_path('languages'), progress_regex=None, progress_expr=None, disable_progress_bar_animation=False, disable_stop_button=False, group_by_type=True):
def test_parser_without_subparser_recieves_root_entry(complete_parser):
def test_grouping_structure(complete_parser):
def test_presentation_init(presentation_model):
def test_variable_names_are_pushed_to_module_scope(expected_attrs):
def test_patch_returns_error_on_invalid_dir():
def test_module_scope_is_updated_on_patch(expected_attrs):
def load(language_dir, filename):
def resize_bitmap(parent, _bitmap, target_height):
def init(image_dir):
def patch_images(new_image_dir):
def Application_Start():
def Application_End():
def Application_Error(app, e):
def Application_BeginRequest(app, e):
def Application_EndRequest(app, e):
def onlywhite(line):
def optwrap(text):
def test_vars():
def test_word_basic():
def test_args_m1kw1_neg():
def test_as_callable_obj():
def test_method_del():
@skip('win32') DCNL def test_from_cmdline():
@skip('win32') DCNL def test_from_cmdline_neg():
def test_help():
@skip('cli') DCNL def test_im_func():
@skip('cli') DCNL def test_im_self():
@skip('cli') DCNL def test_im_class():
def test_im_func_func_code():
def test_method_simple_ops():
def test_misc_conversions():
def test_will_not_fix():
def test_interface_types():
def test_interface_types_typerror():
def test_sanity_derived_neg():
def test_vb_scenarios():
@skip('netstandard') DCNL def test_cp_19510():
def test_sanity___clrtype___gets_called():
def test_sanity_override_constructors():
def test_sanity_static_dot_net_type():
def test_type___clrtype__():
def test_clrtype_returns_existing_python_types():
def test_clrtype_returns_existing_clr_types():
def test_interesting_type_implementations():
def test_type_constructor_overloads():
def test_critical_custom_attributes():
def test_critical_clr_reflection():
@skip('multiple_execute') DCNL def test_critical_parameterless_constructor():
def test_clrtype_metaclass_characteristics():
def test_neg_type___clrtype__():
def test_neg_clrtype_wrong_case():
def test_neg_clrtype_wrong_params():
def test_neg_clrtype_returns_nonsense_values():
def test_neg_clrtype_raises_exceptions():
def test_neg_type___new___args():
def test_neg_type_misc():
def test_system_threading_tasks():
@disabled('http://ironpython.codeplex.com/WorkItem/View.aspx?WorkItemId=25860') DCNL def test_system_diagnostics_contracts():
def test_system_dynamic():
def test_covariance():
def test_contravariance():
def test_system_numerics_biginteger():
def test_system_numerics_complex():
def test_system_tuple():
def test_file_system_enumerations():
def test_memory_mapped_files():
def test_named_args():
def test_optional_args():
def test_raw_unicode_escape_dashes():
def test_ipy_dash_S():
def test_ipy_dash_c():
def test_getslice():
def getTestOutput():
def verifyResults(lines, testRegex):
def test_newlines():
def test_cp12403():
def test_unique_prefix_completion():
def test_nonunique_prefix_completion():
def test_builtin_completion():
def test_member_completion():
@retry_on_failure DCNL def test_autoindent():
def test_backspace_and_delete():
def test_cursor_keys():
def test_control_character_rendering():
def test_tab_insertion():
def test_noeffect_keys():
def test_tab_completion_caseinsensitive():
def test_history():
def test_raw_input():
def unverified_raw_input():
@skip('win32') DCNL def test_reflected_extension_property_ops():
def test_class_assign():
def test_doesnt_fail_on_curly():
def gen_major_cases():
def test_args_plus_kwargs_optimizations():
def outputRedirectStart(errToOut=False):
def test_op_Implicit_inheritance():
def test_symbol_dict():
def test_strange_inheritance():
def test_constructor_function():
def test_class_property():
def test_null_str():
def test_as_bool():
@skip('silverlight') DCNL @skip('netstandard') DCNL def test_multiple_inheritance():
def test_ctor_keyword_args_newslot():
def test_bad_inheritance():
def test_disposable():
def test_dbnull():
@skip('silverlight') DCNL @skip('netstandard') DCNL def test_serialization():
def test_field_assign():
def print_bad():
def test_sanity():
def test_module_exceptions():
def test_repr_not_called():
@skip('silverlight', 'multiple_execute', 'win32') DCNL def test_c1cs():
@skip('silverlight', 'multiple_execute', 'win32') DCNL def test_c2cs():
@skip('silverlight', 'multiple_execute') DCNL def test_package_back_patching():
@skip('silverlight', 'multiple_execute') DCNL def test_pack_module_relative_collision():
def f_1():
def f_3():
def test_user_defined_modules():
def test_constructed_module():
def test_relative_control():
@disabled DCNL @skip('silverlight') DCNL def test_import_hooks_import_precence():
def test_import_hooks_importer():
@skip('multiple_execute') DCNL def test_import_hooks_loader():
def test_custom_meta_path():
def test_import_list_empty_string():
@skip('silverlight') DCNL def test_cp7050():
def test_meta_path_before_builtins():
def test_import_path_seperator():
def test_conditional_return_types():
def test_cp20603():
@skip('win32') DCNL def test_dict_to_idict():
def test_same_but_different():
def test_dict_equality_lookup():
def test_cp32527():
def onTimedEvent(source, e):
def timer_helper(num_handlers=1, sleep_time=5, event_handlers=[], aTimer=None, error_margin=0.25):
def test_sanity():
def test_sanity_from_thread():
def test_multiple_events_one_timer():
def test_elapsed_event_args():
def test_elapsed_event_handler():
@skip('multiple_execute') DCNL def test_timer():
def test_timer_description_attribute():
def test_class_name():
def normalized_repr(obj, memo=None):
def test_cp15803():
def test_coverage():
def test_escape_decode():
def test_escape_encode():
@skip('silverlight') DCNL def test_register_error():
@skip('silverlight') DCNL def test_utf_16_ex_decode():
def test_charmap_decode():
@skip('silverlight') DCNL def test_decode():
@skip('silverlight') DCNL def test_encode():
def test_raw_unicode_escape_decode():
def test_raw_unicode_escape_encode():
@skip('silverlight') DCNL def test_utf_7_decode():
@skip('silverlight') DCNL def test_utf_7_encode():
def test_ascii_decode():
def test_ascii_encode():
@skip('silverlight') DCNL def test_latin_1_decode():
@skip('silverlight') DCNL def test_latin_1_encode():
@skip('multiple_execute') DCNL def test_lookup_error():
@skip('multiple_execute') DCNL def test_register():
def test_unicode_internal_encode():
def test_unicode_internal_decode():
@skip('silverlight') DCNL def test_utf_16_be_decode():
def test_utf_16_be_encode():
@skip('silverlight') DCNL def test_utf_16_decode():
@skip('silverlight') DCNL def test_utf_16_le_decode():
def test_utf_16_le_encode():
def test_utf_8_decode():
def test_utf_8_encode():
def test_charbuffer_encode():
@skip('silverlight', 'posix') DCNL def test_mbcs_decode():
@skip('silverlight', 'posix') DCNL def test_mbcs_encode():
def test_readbuffer_encode():
def test_unicode_escape_decode():
def test_unicode_escape_encode():
@skip('silverlight') DCNL def test_file_encodings():
@skip('silverlight', 'multiple_execute') DCNL def test_file_encodings_negative():
@disabled DCNL def test_cp1214():
def test__FileIO___class__():
def test__FileIO___delattr__():
def test__FileIO___doc__():
def test__FileIO___format__():
def test__FileIO___getattribute__():
def test__FileIO___hash__():
def test__FileIO___init__():
def test__FileIO___new__():
def test__FileIO___reduce__():
def test__FileIO___reduce_ex__():
def test__FileIO___repr__():
def test__FileIO___setattr__():
def test__FileIO___sizeof__():
def test__FileIO___str__():
def test__FileIO___subclasshook__():
def test__FileIO_close():
def test__FileIO_closed():
def test__FileIO_closefd():
def test__FileIO_fileno():
def test__FileIO_isatty():
def test__FileIO_mode():
def test__FileIO_read():
def test__FileIO_readable():
def test__FileIO_readall():
def test__FileIO_readinto():
def test__FileIO_seek():
def test__FileIO_seekable():
def test__FileIO_tell():
def test__FileIO_truncate():
def test__FileIO_writable():
def test__FileIO_write():
def test_coverage():
def test_sanity_re():
def test_sanity_re_pattern():
def test_sanity_re_match():
def test_comment():
def test_lone_hat():
def test__pickle():
@skip('silverlight') DCNL def test_file_multiple_reads():
def test_zeros():
def test_tempnam():
def test_times():
def test_putenv():
def test_spawnle():
def test_spawnve():
@skip('win32') DCNL def test_tmpfile():
def test_waitpid():
@skip('win32') DCNL def test_new_thread_is_background():
@skip('netstandard') DCNL @skip('silverlight') DCNL def test_settrace():
@skip('silverlight') DCNL def test_getsizeof():
@skip('netstandard') DCNL @skip('silverlight') DCNL def test_gettrace():
def test_cp14632():
def test_cp13704():
def test_long_log():
def test_math_subclass():
def test_sanity():
def cleanup():
def expect(warn_type, message):
@retry_on_failure DCNL def test_getprotobyname():
@retry_on_failure DCNL def test_getaddrinfo():
@retry_on_failure DCNL def test_getnameinfo():
@retry_on_failure DCNL def test_gethostbyaddr():
@retry_on_failure DCNL def test_gethostbyname():
@retry_on_failure DCNL def test_gethostbyname_ex():
@retry_on_failure DCNL def test_inet_ntop():
@retry_on_failure DCNL def test_inet_pton():
@retry_on_failure DCNL def test_getfqdn():
@retry_on_failure DCNL def test_cp12452():
@skip('multiple_execute', 'posix') DCNL @retry_on_failure DCNL def test_makefile_refcount():
@retry_on_failure DCNL def test_fileobject_close():
@retry_on_failure DCNL def test_SSLType_ssl():
@disabled DCNL @retry_on_failure DCNL def test_SSLType_ssl_neg():
def test_array___add__():
def test_array___class__():
def test_array___contains__():
def test_array___copy__():
def test_array___deepcopy__():
def test_array___delattr__():
def test_array___delitem__():
def test_array___delslice__():
def test_array___doc__():
def test_array___eq__():
def test_array___format__():
def test_array___ge__():
def test_array___getattribute__():
def test_array___getitem__():
def test_array___getslice__():
def test_array___gt__():
def test_array___hash__():
def test_array___iadd__():
def test_array___imul__():
def test_array___init__():
def test_array___iter__():
def test_array___le__():
def test_array___len__():
def test_array___lt__():
def test_array___mul__():
def test_array___ne__():
def test_array___new__():
def test_array___reduce__():
def test_array___reduce_ex__():
def test_array___repr__():
def test_array___rmul__():
def test_array___setattr__():
def test_array___setitem__():
def test_array___setslice__():
def test_array___sizeof__():
def test_array___str__():
def test_array___subclasshook__():
def test_array_append():
def test_array_buffer_info():
def test_array_byteswap():
def test_array_count():
def test_array_extend():
def test_array_fromfile():
def test_array_fromlist():
def test_array_fromstring():
def test_array_fromunicode():
def test_array_index():
def test_array_insert():
def test_array_itemsize():
def test_array_pop():
def test_array_read():
def test_array_remove():
def test_array_reverse():
def test_array_tofile():
def test_array_tolist():
def test_array_tounicode():
def test_array_typecode():
def test_array_write():
def test_coverage():
def test_calcsize_alignment():
def test_new_init():
@skip('silverlight') DCNL def test_weakref():
def test_unpack_from():
def test_exit_code():
def multireader(*streams):
def run_one_command(*args):
def runTestSlow(test_name, mode):
def runTestFast(test_name):
def runTest(test_name, mode):
@skip('silverlight') DCNL def test_max_args():
def test_modes():
@skip('win32') DCNL def test_cp16623():
def test_simple_slicing():
def test_slice_getslice_forbidden():
def test_slice_setslice_forbidden():
def test_slice_delslice_forbidden():
def test_oldclass_and_direct():
def test_oldclass_and_direct_set():
def test_oldclass_and_direct_delete():
def test_newstyle_oldstyle_dict():
def test_oldstyle_getattr():
def test_oldstyle_eq():
def test_raise_attrerror():
def test_check_dictionary():
def test_mixed_inheritance():
def test_newstyle_unbound_inheritance():
def test_mro():
def test_mro_bases():
def test_builtin_mro():
def test_mixed_inheritance_mro():
def test_depth_first_mro_mixed():
def test_depth_first_mro():
def test_newstyle_lookup():
def test_name():
def test_mro_super():
def test_slots():
def test_inheritance_cycle():
def test_hexoct():
@skip('multiple_execute') DCNL def test_no_clr_attributes():
def test_outer_scope():
def test_default_new_init():
def test_mixed_newstyle_oldstyle_init():
def test_getattr_exceptions():
def test_descriptors_custom_attrs():
def test_property_always_set_descriptor():
def test_oldclass_newclass_construction():
def test_inherited_getattribute():
def test_keyword_type_construction():
def test_mixed_mro_respected():
def test_binary_operator_subclass():
def test_redundant_multiple_bases():
def test_finalizer():
def test_method_tuple_type():
def get_platform_string(current=None):
def get_file_name(type, test, platform=None):
def import_helper(mod_name):
def is_package(dir_name):
def check_package(package_name):
def ip_missing(mod_attr):
def ip_extra(mod_attr):
def get_cpython_results(name, level=0, temp_mod=None):
def MakeExpressionGenerator(depth):
def MakeStatementGenerator(depth):
def test_this_matrix():
@skip('silverlight') DCNL @skip('netstandard') DCNL def test_xequals_call_for_optimization():
def num_ok_for_type(number, proposed_type):
def _test_interop_set(clr_types, py_types, test_cases):
def test_boolean():
def test_arithmetic():
def test_bitwiseshift():
def test_sanity():
def test_itertools_islice_end():
@skip('silverlight') DCNL def test_iterator_for():
def test_interacting_iterators():
def test_sanity():
def test_special_cases():
def test_bad_stuff():
@skip('multiple_execute') DCNL @skip('netstandard') DCNL def test_addreferencetofileandpath_conflict():
def compileAssembly(file_name):
def compileExe(file_name):
def createAssembly(file_id, namespace_id, bar_num, default_filename='foo'):
def uniqueDLLNames():
def textFiles():
def exeOnly():
def dllVsExe():
def okAssemblies(num):
def dupAssemblies(num):
def overrideNative():
def corruptDLL():
def unmanagedDLL():
def cleanUp():
def setUp():
def main():
def test_argument_eval_order():
def test_should_report_multiple_warnings_negative():
def test_should_report_both_errors_and_warnings_negative():
def _try_arg(target, arg, mapping, funcTypeError, funcOverflowError, verbose=False):
def test_arg_boolean_overload():
def test_reraise_backtrace_cp20051():
@skip('silverlight') DCNL def test_event_lifetime():
def test_reflected_event_ops():
def test_strongly_typed_events():
def test_combine():
def test_bytes_hashing():
def test_pep19546():
@skip(u'win32') DCNL def test_pep3141():
@disabled('ResourceFile DCSP is DCSP not DCSP available DCSP anymore') DCNL def test_ip_hosting_resource_file():
def test_formatting_userdict():
def test_cmp():
def test_singleton():
@skip('silverlight') DCNL def test_iteration_no_mutation_bad_hash():
def test_metaclass_call_override():
def test_with_mixed_stack():
def get_values(values, itypes, ftypes):
def test_int_from_long():
@skip('win32') DCNL def test_cli_new_inheritance():
def test_super_class():
def abs__file__():
def removeduppaths():
def addbuilddir():
def _init_pathinfo():
def addpackage(sitedir, name, known_paths):
def addsitedir(sitedir, known_paths=None):
def check_enableusersite():
def getuserbase():
def getusersitepackages():
def addusersitepackages(known_paths):
def getsitepackages():
def addsitepackages(known_paths):
def setBEGINLIBPATH():
def setquit():
def setcopyright():
def aliasmbcs():
def setencoding():
def execsitecustomize():
def execusercustomize():
def retry_on_failure(f, *args, **kwargs):
def get_env_var(key):
def get_temp_dir():
def get_full_dir_name(path):
def get_mod_names(filename):
def shallow_copy(in_list):
def pythonToCOM(in_type):
def getTypeFromProgID(prog_id):
def getRCWFromProgID(prog_id):
def _run_code(code, run_globals, init_globals=None, mod_name=None, mod_fname=None, mod_loader=None, pkg_name=None):
def _run_module_code(code, init_globals=None, mod_name=None, mod_fname=None, mod_loader=None, pkg_name=None):
def _run_module_as_main(mod_name, alter_argv=True):
def run_module(mod_name, init_globals=None, run_name=None, alter_sys=False):
def _get_importer(path_name):
def run_path(path_name, init_globals=None, run_name=None):
def compare_dirs(dir1, dir2):
def send(to, subject, body, urgent=False, attachments=None):
def fast_op_ret_bool(cw):
def texts_are_equivalent(texta, textb):
def translate(name):
def fix_arg(arg):
def InvokeCommand(_cmdName, _input=None, *args, **kws):
def dump(o):
def init_runspace():
def accepts(*args):
def returns(return_type=Void):
def attribute(attrib_type):
def propagate_attributes(old_function, new_function):
def Degree(degrees):
def Radian(radians):
def Vectorize(v):
def GetFunctionName(f):
def HandleException(desc, exception):
def GenerateExe(config):
def make_event():
def add(a, b):
def factorial(n):
def retry_on_failure(f, *args, **kwargs):
def get_env_var(key):
def get_temp_dir():
def get_full_dir_name(path):
def get_mod_names(filename):
def shallow_copy(in_list):
def pythonToCOM(in_type):
def getTypeFromProgID(prog_id):
def getRCWFromProgID(prog_id):
def egg_info_matches(egg_info, search_name, link, _egg_info_re=re.compile('([a-z0-9_.]+)-([a-z0-9_.!+-]+)', re.I)):
def transform_hits(hits):
def get_summaries(ordered=True):
def get_similar_commands(name):
def _hash_of_file(path, algorithm):
def search_packages_info(query):
def print_results(distributions, list_all_files):
def user_agent():
def get_file_content(url, comes_from=None, session=None):
def is_url(name):
def url_to_path(url):
def path_to_url(path):
def is_archive_file(name):
def is_dir_url(link):
def unpack_file_url(link, location, download_dir=None, hashes=None):
def _copy_dist_from_dir(link_path, location):
def unpack_url(link, location, download_dir=None, only_download=False, session=None, hashes=None):
def _download_http_url(link, session, temp_dir, hashes):
def _check_download_dir(link, download_dir, hashes):
def make_option_group(group, parser):
def check_install_build_global(options, check_options=None):
def _get_format_control(values, option):
def _merge_hash(option, opt_str, value, parser):
def write_delete_marker_file(directory):
def running_under_virtualenv():
def virtualenv_no_global():
def distutils_scheme(dist_name, user=False, home=None, root=None, isolated=False, prefix=None):
def get_abbr_impl():
def get_impl_ver():
def get_impl_version_info():
def get_impl_tag():
def get_flag(var, fallback, expected=True, warn=True):
def get_abi_tag():
def get_platform():
def get_darwin_arches(major, minor, machine):
def get_supported(versions=None, noarch=False):
def autocomplete():
def dict_to_sequence(d):
def get_netrc_auth(url, raise_errors=False):
def guess_filename(obj):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def unquote_unreserved(uri):
def requote_uri(uri):
def address_in_network(ip, net):
def dotted_netmask(mask):
def is_valid_cidr(string_network):
def should_bypass_proxies(url):
def get_environ_proxies(url):
def select_proxy(url, proxies):
def default_user_agent(name='python-requests'):
def parse_header_links(value):
def prepend_scheme_if_needed(url, new_scheme):
def get_auth_from_url(url):
def to_native_string(string, encoding='ascii'):
def urldefragauth(url):
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):
def merge_cookies(cookiejar, cookies):
def description_of(lines, name=u'stdin'):
def main(argv=None):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d):
def itervalues(d):
def iteritems(d):
def with_metaclass(meta, base=object):
def _dnsname_match(dn, hostname, max_wildcards=1):
def match_hostname(cert, hostname):
def add_stderr_logger(level=logging.DEBUG):
def disable_warnings(category=exceptions.HTTPWarning):
def guess_content_type(filename, default='application/octet-stream'):
def format_header_param(name, value):
def choose_boundary():
def iter_field_objects(fields):
def iter_fields(fields):
def encode_multipart_formdata(fields, boundary=None):
def is_fp_closed(obj):
def assert_header_parsing(headers):
def is_response_to_head(response):
def current_time():
def _const_compare_digest_backport(a, b):
def assert_fingerprint(cert, fingerprint):
def resolve_cert_reqs(candidate):
def resolve_ssl_version(candidate):
def create_urllib3_context(ssl_version=None, cert_reqs=None, options=None, ciphers=None):
def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None, ca_certs=None, server_hostname=None, ssl_version=None, ciphers=None, ssl_context=None, ca_cert_dir=None):
def is_connection_dropped(conn):
def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT, source_address=None, socket_options=None):
def split_first(s, delims):
def parse_url(url):
def get_host(url):
def make_headers(keep_alive=None, accept_encoding=None, user_agent=None, basic_auth=None, proxy_basic_auth=None, disable_cache=None):
def connection_from_url(url, **kw):
def inject_into_urllib3():
def extract_from_urllib3():
def _basic_auth_str(username, password):
def dispatch_hook(key, hooks, hook_data, **kwargs):
def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):
def session():
def request(method, url, **kwargs):
def get(url, params=None, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, json=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def python_2_unicode_compatible(klass):
def url_to_file_path(url, filecache):
def total_seconds(td):
def parse_uri(uri):
def to_sax(walker, handler):
def SerializeError(Exception):
def getTreeBuilder(treeType, implementation=None, **kwargs):
def tostring(element):
def parse(doc, treebuilder=u'etree', encoding=None, namespaceHTMLElements=True):
def codecName(encoding):
def to_text(s, blank_if_none=True):
def is_text_or_none(string):
def getTreeWalker(treeType, implementation=None, **kwargs):
def pprint(walker):
def _subst_vars(path, local_vars):
def _parse_makefile(filename, vars=None):
def get_makefile_filename():
def _init_posix(vars):
def _init_non_posix(vars):
def parse_config_h(fp, vars=None):
def get_config_h_filename():
def get_scheme_names():
def get_path_names():
def get_paths(scheme=_get_default_scheme(), vars=None, expand=True):
def get_path(name, scheme=_get_default_scheme(), vars=None, expand=True):
def get_config_vars(*args):
def get_config_var(name):
def get_platform():
def _main():
def stn(s, length, encoding, errors):
def nts(s, encoding, errors):
def nti(s):
def itn(n, digits=8, format=DEFAULT_FORMAT):
def calc_chksums(buf):
def copyfileobj(src, dst, length=None):
def filemode(mode):
def is_tarfile(name):
def copyfileobj(fsrc, fdst, length=(16 * 1024)):
def copyfile(src, dst):
def copymode(src, dst):
def copystat(src, dst):
def copy(src, dst):
def copy2(src, dst):
def ignore_patterns(*patterns):
def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2, ignore_dangling_symlinks=False):
def rmtree(path, ignore_errors=False, onerror=None):
def move(src, dst):
def _get_gid(name):
def _get_uid(name):
def _make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0, owner=None, group=None, logger=None):
def _make_zipfile(base_name, base_dir, verbose=0, dry_run=0, logger=None):
def get_archive_formats():
def register_archive_format(name, function, extra_args=None, description=''):
def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None, logger=None):
def get_unpack_formats():
def _check_unpack_options(extensions, function, extra_args):
def register_unpack_format(name, extensions, function, extra_args=None, description=''):
def unregister_unpack_format(name):
def _ensure_directory(path):
def _unpack_zipfile(filename, extract_dir):
def _unpack_tarfile(filename, extract_dir):
def unpack_archive(filename, extract_dir=None, format=None):
def get_resources_dests(resources_root, rules):
def convert_path(pathname):
def get_cache_base(suffix=None):
def path_to_cache_dir(path):
def split_filename(filename, project_name=None):
def parse_name_and_version(p):
def zip_dir(directory):
def iglob(path_glob):
def make_graph(dists, scheme=u'default'):
def get_dependent_dists(dists, dist):
def get_required_dists(dists, dist):
def make_dist(name, version, **kwargs):
def interpret(marker, execution_context=None):
def _suggest_semantic_version(s):
def _suggest_normalized_version(s):
def finder(package):
def finder_for_path(path):
def compatible_tags():
def _best_version(fields):
def _get_name_and_version(name, version, for_filename=False):
def get_all_distribution_names(url=None):
def get_supported_platform():
def register_loader_type(loader_type, provider_factory):
def get_provider(moduleOrReq):
def get_build_platform():
def compatible_platforms(provided, required):
def run_script(dist_spec, script_name):
def get_distribution(dist):
def load_entry_point(dist, group, name):
def get_entry_map(dist, group=None):
def get_entry_info(dist, group, name):
def get_default_cache():
def safe_name(name):
def safe_version(version):
def safe_extra(extra):
def to_filename(name):
def register_finder(importer_type, distribution_finder):
def find_distributions(path_item, only=False):
def find_eggs_in_zip(importer, path_item, only=False):
def find_on_path(importer, path_item, only=False):
def register_namespace_handler(importer_type, namespace_handler):
def _handle_ns(packageName, path_item):
def declare_namespace(packageName):
def fixup_namespace_packages(path_item, parent=None):
def file_ns_handler(importer, path_item, packageName, module):
def normalize_path(filename):
def _is_unpacked_egg(path):
def yield_lines(strs):
def _version_from_file(lines):
def parse_requirements(strs):
def _get_mro(cls):
def _find_adapter(registry, ob):
def ensure_directory(path):
def _bypass_ensure_directory(path):
def split_sections(s):
@_call_aside DCNL def _initialize(g=globals()):
@_call_aside DCNL def _initialize_master_working_set():
def default_environment():
def compile(marker):
def retry(*dargs, **dkw):
def parse(version):
def _parse_local_version(local):
def with_metaclass(meta, *bases):
def ip_address(address):
def ip_network(address, strict=True):
def ip_interface(address):
def v4_int_to_packed(address):
def v6_int_to_packed(address):
def _split_optional_netmask(address):
def _find_address_range(addresses):
def _count_righthand_zero_bits(number, bits):
def summarize_address_range(first, last):
def _collapse_addresses_internal(addresses):
def collapse_addresses(addresses):
def get_mixed_type_key(obj):
def LinkFileLock(*args, **kwds):
def MkdirFileLock(*args, **kwds):
def SQLiteFileLock(*args, **kwds):
def locked(path, timeout=None):
def read_pid_from_pidfile(pidfile_path):
def write_pid_to_pidfile(pidfile_path):
def remove_existing_pidfile(pidfile_path):
def _xml_escape(data):
def col(loc, strg):
def lineno(loc, strg):
def line(loc, strg):
def nullDebugAction(*args):
def traceParseAction(f):
def delimitedList(expr, delim=',', combine=False):
def countedArray(expr, intExpr=None):
def matchPreviousLiteral(expr):
def matchPreviousExpr(expr):
def oneOf(strs, caseless=False, useRegex=True):
def dictOf(key, value):
def originalTextFor(expr, asString=True):
def ungroup(expr):
def locatedExpr(expr):
def srange(s):
def matchOnlyAtCol(n):
def replaceWith(replStr):
def removeQuotes(s, l, t):
def upcaseTokens(s, l, t):
def downcaseTokens(s, l, t):
def getTokensEndLoc():
def _makeTags(tagStr, xml):
def makeHTMLTags(tagStr):
def makeXMLTags(tagStr):
def withAttribute(*args, **attrDict):
def withClass(classname, namespace=''):
def infixNotation(baseExpr, opList, lpar=Suppress('('), rpar=Suppress(')')):
def nestedExpr(opener='(', closer=')', content=None, ignoreExpr=quotedString.copy()):
def indentedBlock(blockStatementExpr, indentStack, indent=True):
def replaceHTMLEntity(t):
def dictConfig(config):
def get_path_uid(path):
def expanduser(path):
def samefile(file1, file2):
def _cache_for_link(cache_dir, link):
def rehash(path, algo='sha256', blocksize=(1 << 20)):
def fix_script(path):
def root_is_purelib(name, wheeldir):
def move_wheel_files(name, req, wheeldir, user=False, home=None, root=None, pycompile=True, scheme=None, isolated=False, prefix=None):
@_unique DCNL def uninstallation_paths(dist):
def wheel_version(source_dir):
def check_compatibility(version, name):
def parse_requirements(filename, finder=None, comes_from=None, options=None, session=None, constraint=False, wheel_cache=None):
def preprocess(content, options):
def process_line(line, filename, line_number, finder=None, comes_from=None, options=None, session=None, wheel_cache=None, constraint=False):
def break_args_options(line):
def build_parser():
def join_lines(lines_enum):
def ignore_comments(lines_enum):
def skip_regex(lines_enum, options):
def make_abstract_dist(req_to_install):
def _strip_postfix(req):
def parse_editable(editable_req, default_vcs=None):
@contextlib.contextmanager DCNL def indent_log(num=2):
def ensure_dir(path):
def rmtree_errorhandler(func, path, exc_info):
def display_path(path):
def backup_dir(dir, ext='.bak'):
def ask(message, options):
def is_installable_dir(path):
def is_svn_page(html):
def read_chunks(file, size=io.DEFAULT_BUFFER_SIZE):
def has_leading_dir(paths):
def normalize_path(path, resolve_symlinks=True):
def splitext(path):
def renames(old, new):
def is_local(path):
def dist_is_local(dist):
def dist_in_usersite(dist):
def dist_in_site_packages(dist):
def dist_is_editable(dist):
def get_installed_distributions(local_only=True, skip=stdlib_pkgs, include_editables=True, editables_only=False, user_only=False):
def egg_link_path(dist):
def dist_location(dist):
def get_terminal_size():
def current_umask():
def unzip_file(filename, location, flatten=True):
def untar_file(filename, location):
def read_text_file(filename):
@contextlib.contextmanager DCNL def captured_output(stream_name):
def captured_stdout():
def get_installed_version(dist_name):
def consume(iterator):
def user_cache_dir(appname):
def user_data_dir(appname, roaming=False):
def user_config_dir(appname, roaming=True):
def site_config_dirs(appname):
def _get_win_folder_from_registry(csidl_name):
def auto_decode(data):
def pip_version_check(session):
def toRoman(n):
def fromRoman(s):
def parse_opcode_signature(env, sig, signode):
def get_lineno(node):
def extract_line(text, index):
def checker(*suffixes, **kwds):
@checker('.py', severity=4) DCNL def check_syntax(fn, lines):
@checker('.rst', severity=2) DCNL def check_suspicious_constructs(fn, lines):
@checker('.py', '.rst') DCNL def check_whitespace(fn, lines):
@checker('.rst', severity=0) DCNL def check_line_length(fn, lines):
@checker('.html', severity=2, falsepositives=True) DCNL def check_leaked_markup(fn, lines):
def publish_cmdline(reader=None, reader_name='standalone', parser=None, parser_name='restructuredtext', writer=None, writer_name='pseudoxml', settings=None, settings_spec=None, settings_overrides=None, config_section=None, enable_exit_status=1, argv=None, usage=default_usage, description=default_description):
def publish_file(source=None, source_path=None, destination=None, destination_path=None, reader=None, reader_name='standalone', parser=None, parser_name='restructuredtext', writer=None, writer_name='pseudoxml', settings=None, settings_spec=None, settings_overrides=None, config_section=None, enable_exit_status=None):
def publish_string(source, source_path=None, destination_path=None, reader=None, reader_name='standalone', parser=None, parser_name='restructuredtext', writer=None, writer_name='pseudoxml', settings=None, settings_spec=None, settings_overrides=None, config_section=None, enable_exit_status=None):
def publish_parts(source, source_path=None, source_class=io.StringInput, destination_path=None, reader=None, reader_name='standalone', parser=None, parser_name='restructuredtext', writer=None, writer_name='pseudoxml', settings=None, settings_spec=None, settings_overrides=None, config_section=None, enable_exit_status=None):
def publish_doctree(source, source_path=None, source_class=io.StringInput, reader=None, reader_name='standalone', parser=None, parser_name='restructuredtext', settings=None, settings_spec=None, settings_overrides=None, config_section=None, enable_exit_status=None):
def publish_from_doctree(document, destination_path=None, writer=None, writer_name='pseudoxml', settings=None, settings_spec=None, settings_overrides=None, config_section=None, enable_exit_status=None):
def publish_programmatically(source_class, source, source_path, destination_class, destination, destination_path, reader, reader_name, parser, parser_name, writer, writer_name, settings, settings_spec, settings_overrides, config_section, enable_exit_status):
def parse_module(module_text, filename):
def make_parameter(name, excess_keyword=0, excess_positional=0):
def trim_docstring(text):
def normalize_parameter_name(name):
def get_reader_class(reader_name):
def store_multiple(option, opt, value, parser, *args, **kwargs):
def read_config_file(option, opt, value, parser):
def validate_encoding_and_error_handler(setting, value, option_parser, config_parser=None, config_section=None):
def make_paths_absolute(pathdict, keys, base_path=None):
def mask_email(ref, pepno=None):
def extract_extension_options(field_list, options_spec):
def extract_options(field_list):
def assemble_option_dict(option_list, options_spec):
def extract_name_value(line):
def new_reporter(source_path, settings):
def new_document(source_path, settings=None):
def relative_path(source, target):
def get_stylesheet_reference(settings, relative_to=None):
def get_trim_footnote_ref_space(settings):
def get_source_line(node):
def escape2null(text):
def unescape(text, restore_backslashes=0):
def html_parts(input_string, source_path=None, destination_path=None, input_encoding='unicode', doctitle=1, initial_header_level=1):
def html_body(input_string, source_path=None, destination_path=None, input_encoding='unicode', output_encoding='unicode', doctitle=1, initial_header_level=1):
def internals(input_string, source_path=None, destination_path=None, input_encoding='unicode', settings_overrides=None):
def _add_node_class_names(names):
def make_id(string):
def fully_normalize_name(name):
def whitespace_normalize_name(name):
def serial_escape(value):
def string2lines(astring, tab_width=8, convert_whitespace=0, whitespace=re.compile('[\x0b\x0c]')):
def _exception_data():
def get_writer_class(writer_name):
def get_parser_class(parser_name):
def build_regexp(definition, compile=1):
def convert_directive_function(directive_fn):
def directive(directive_name, language_module, document):
def register_directive(name, directive):
def flag(argument):
def unchanged_required(argument):
def unchanged(argument):
def path(argument):
def uri(argument):
def nonnegative_int(argument):
def get_measure(argument, units):
def class_option(argument):
def unicode_code(code):
def single_char_or_unicode(argument):
def single_char_or_whitespace_or_unicode(argument):
def positive_int(argument):
def positive_int_list(argument):
def encoding(argument):
def choice(argument, values):
def update_dict_of_lists(master, newdata):
def role(role_name, language_module, lineno, reporter):
def register_canonical_role(name, role_fn):
def register_local_role(name, role_fn):
def set_implicit_options(role_fn):
def register_generic_role(canonical_name, node_class):
def generic_custom_role(role, rawtext, text, lineno, inliner, options={}, content=[]):
def set_classes(options):
def count_newlines(value):
def compile_rules(environment):
def get_lexer(environment):
def contextfunction(f):
def environmentfunction(f):
def internalcode(f):
def is_undefined(obj):
def consume(iterable):
def clear_caches():
def import_string(import_name, silent=False):
def open_if_exists(filename, mode='r'):
def pformat(obj, verbose=False):
def urlize(text, trim_url_limit=None, nofollow=False):
def generate_lorem_ipsum(n=5, html=True, min=20, max=100):
def _escape_argspec(obj, iterable):
def extract_from_ast(node, gettext_functions=GETTEXT_FUNCTIONS, babel_style=True):
def babel_extract(fileobj, keywords, comment_tags, options):
def find_undeclared_variables(ast):
def find_referenced_templates(ast):
def markup_join(seq):
def unicode_join(seq):
def new_context(environment, template_name, blocks, vars=None, shared=None, globals=None, locals=None):
def test_odd(value):
def test_even(value):
def test_divisibleby(value, num):
def test_defined(value):
def test_undefined(value):
def test_none(value):
def test_lower(value):
def test_upper(value):
def test_string(value):
def test_number(value):
def test_sequence(value):
def test_sameas(value, other):
def test_iterable(value):
def test_escaped(value):
def safe_range(*args):
def unsafe(f):
def is_internal_attribute(obj, attr):
def modifies_known_mutable(obj, attr):
def contextfilter(f):
def environmentfilter(f):
def do_forceescape(value):
@environmentfilter DCNL def do_replace(environment, s, old, new, count=None):
def do_upper(s):
def do_lower(s):
@environmentfilter DCNL def do_xmlattr(_environment, d, autospace=True):
def do_capitalize(s):
def do_title(s):
def do_dictsort(value, case_sensitive=False, by='key'):
def do_sort(value, case_sensitive=False):
def do_default(value, default_value=u'', boolean=False):
@environmentfilter DCNL def do_join(environment, value, d=u''):
def do_center(value, width=80):
@environmentfilter DCNL def do_first(environment, seq):
@environmentfilter DCNL def do_last(environment, seq):
@environmentfilter DCNL def do_random(environment, seq):
def do_filesizeformat(value, binary=False):
def do_pprint(value, verbose=False):
@environmentfilter DCNL def do_urlize(environment, value, trim_url_limit=None, nofollow=False):
def do_indent(s, width=4, indentfirst=False):
def do_truncate(s, length=255, killwords=False, end='...'):
def do_wordwrap(s, width=79, break_long_words=True):
def do_wordcount(s):
def do_int(value, default=0):
def do_float(value, default=0.0):
def do_format(value, *args, **kwargs):
def do_trim(value):
def do_striptags(value):
def do_slice(value, slices, fill_with=None):
def do_batch(value, linecount, fill_with=None):
def do_round(value, precision=0, method='common'):
def do_sort(value, reverse=False):
@environmentfilter DCNL def do_groupby(environment, value, attribute):
def do_list(value):
def do_mark_safe(value):
def do_mark_unsafe(value):
def do_reverse(value):
@environmentfilter DCNL def do_attr(environment, obj, name):
def split_template_path(template):
def get_spontaneous_environment(*args):
def create_cache(size):
def copy_cache(cache):
def load_extensions(environment, extensions):
def _environment_sanity_check(environment):
def optimize(node, environment):
def make_traceback(exc_info, source_hint=None):
def translate_syntax_error(error, source=None):
def translate_exception(exc_info, initial_skip=0):
def fake_exc_info(exc_info, filename, lineno):
def _init_ugly_crap():
def generate(node, environment, name, filename, stream=None):
def has_safe_repr(value):
def find_undeclared(nodes, names):
def toRoman(n):
def fromRoman(s):
def parse_opcode_signature(env, sig, signode):
def get_lineno(node):
def extract_line(text, index):
def checker(*suffixes, **kwds):
@checker('.py', severity=4) DCNL def check_syntax(fn, lines):
@checker('.rst', severity=2) DCNL def check_suspicious_constructs(fn, lines):
@checker('.py', '.rst') DCNL def check_whitespace(fn, lines):
@checker('.rst', severity=0) DCNL def check_line_length(fn, lines):
@checker('.html', severity=2, falsepositives=True) DCNL def check_leaked_markup(fn, lines):
def accesskey(context, key):
def _is_only_paragraph(node):
def members_option(arg):
def members_set_option(arg):
def bool_option(arg):
def cut_lines(pre, post=0, what=None):
def between(marker, what=None, keepempty=False):
def add_documenter(cls):
def html_visit_inheritance_diagram(self, node):
def latex_visit_inheritance_diagram(self, node):
def process_autosummary_toc(app, doctree):
def autosummary_toc_visit_html(self, node):
def autosummary_toc_visit_latex(self, node):
def get_autosummary(names, state, no_signatures=False):
def import_by_name(name, prefixes=[None]):
def _import_by_name(name):
def autolink_role(typ, rawtext, etext, lineno, inliner, options={}, content=[]):
def get_documented(filenames):
def render_math(self, math):
def render_dot(self, code, options, format, prefix='graphviz'):
def fetch_inventory(app, uri, inv):
def load_mappings(app):
def missing_reference(app, env, node, contnode):
def tokenize(readline, tokeneater=printtoken):
def untokenize(iterable):
def generate_tokens(readline):
def generate_lines(text):
def load_grammar(gt='Grammar.txt', gp=None, save=True, force=False, logger=None):
def _newer(a, b):
def convert(grammar, raw_node):
def get_terminal_width():
def read_png_depth(filename):
def write_png_depth(filename, depth):
def relative_uri(base, to):
def ensuredir(path):
def walk(top, topdown=True, followlinks=False):
def get_matching_docs(dirname, suffix, exclude_docs=(), exclude_dirs=(), exclude_trees=(), exclude_dirnames=()):
def fmt_ex(ex):
def rpartition(s, t):
def format_exception_cut_frames(x=1):
def save_traceback():
def _translate_pattern(pat):
def patfilter(names, pat):
def parselinenos(spec, total):
def movefile(source, dest):
def copytimes(source, dest):
def copyfile(source, dest):
def _all_traverse(self):
def _fast_traverse(self, cls):
def isdescriptor(x):
def safe_getattr(obj, name, *defargs):
def safe_getmembers(object, predicate=None):
def prepare_docstring(s):
def prepare_commentdoc(s):
def loads(x):
def educateQuotes(s):
def educateQuotesLatex(s, dquotes=('``', "''")):
def educateBackticks(s):
def educateSingleBackticks(s):
def educateDashesOldSchool(s):
def educateDashesOldSchoolInverted(s):
def educateEllipses(s):
def rectangle(win, uly, ulx, lry, lrx):
def wrapper(func, *args, **kwds):
def tokenize(readline, tokeneater=printtoken):
def untokenize(iterable):
def generate_tokens(readline):
def normcase(s):
def isabs(s):
def join(path, *paths):
def splitdrive(p):
def splitunc(p):
def split(p):
def basename(p):
def dirname(p):
def islink(path):
def ismount(path):
def walk(top, func, arg):
def expanduser(path):
def expandvars(path):
def normpath(path):
def relpath(path, start=curdir):
def cmp(f1, f2, shallow=1):
def cmpfiles(a, b, common, shallow=1):
def open(filename, flag='c', protocol=None, writeback=False):
def _lock_file(f, dotlock=True):
def _unlock_file(f):
def _create_carefully(path):
def _create_temporary(path):
def _sync_flush(f):
def _sync_close(f):
def unix_getpass(prompt='Password: DCSP ', stream=None):
def win_getpass(prompt='Password: DCSP ', stream=None):
def getuser():
def reindent(src, indent):
def _template_func(setup, func):
def timeit(stmt='pass', setup='pass', timer=default_timer, number=default_number):
def repeat(stmt='pass', setup='pass', timer=default_timer, repeat=default_repeat, number=default_number):
def main(args=None, _wrap_timer=None):
def localcontext(ctx=None):
def _dec_from_triple(sign, coefficient, exponent, special=False):
def _normalize(op1, op2, prec=0):
def _nbits(n, correction={'0': 4, '1': 3, '2': 2, '3': 2, '4': 1, '5': 1, '6': 1, '7': 1, '8': 0, '9': 0, 'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0}):
def _decimal_lshift_exact(n, e):
def _sqrt_nearest(n, a):
def _rshift_nearest(x, shift):
def _div_nearest(a, b):
def _ilog(x, M, L=8):
def _dlog10(c, e, p):
def _dlog(c, e, p):
def _iexp(x, M, L=8):
def _dexp(c, e, p):
def _dpower(xc, xe, yc, ye, p):
def _log10_lb(c, correction={'1': 100, '2': 70, '3': 53, '4': 40, '5': 31, '6': 23, '7': 16, '8': 10, '9': 5}):
def _convert_other(other, raiseit=False, allow_float=False):
def _parse_format_specifier(format_spec, _localeconv=None):
def _format_align(sign, body, spec):
def _group_lengths(grouping):
def _insert_thousands_sep(digits, spec, min_width=1):
def _format_sign(is_negative, spec):
def _format_number(is_negative, intpart, fracpart, exp, spec):
def _parse_makefile(filename, vars=None):
def get_makefile_filename():
def _generate_posix_vars():
def _init_posix(vars):
def _init_non_posix(vars):
def parse_config_h(fp, vars=None):
def get_config_h_filename():
def get_scheme_names():
def get_path_names():
def get_paths(scheme=_get_default_scheme(), vars=None, expand=True):
def get_path(name, scheme=_get_default_scheme(), vars=None, expand=True):
def get_config_vars(*args):
def get_config_var(name):
def get_platform():
def _main():
def new(key, msg=None, digestmod=None):
def skip(reason):
def skipIf(condition, reason):
def skipUnless(condition, reason):
def sorted_list_difference(expected, actual):
def unorderable_list_difference(expected, actual, ignore_duplicate=False):
def _count_diff_all_purpose(actual, expected):
def _ordered_count(iterable):
def _count_diff_hashable(actual, expected):
def _isnotsuite(test):
def _slotnames(cls):
def add_extension(module, name, code):
def remove_extension(module, name, code):
def setprofile(func):
def settrace(func):
def RLock(*args, **kwargs):
def Condition(*args, **kwargs):
def Semaphore(*args, **kwargs):
def BoundedSemaphore(*args, **kwargs):
def Event(*args, **kwargs):
def Timer(*args, **kwargs):
def currentThread():
def activeCount():
def enumerate():
def run(statement, filename=None, sort=(-1)):
def runctx(statement, globals, locals, filename=None, sort=(-1)):
def get_tests_modules(basepath=this_dir_path, gui=True, packages=None):
def get_tests(text=True, gui=True, packages=None):
def simulate_mouse_click(widget, x, y):
def read_uint1(f):
def read_uint2(f):
def read_int4(f):
def read_stringnl(f, decode=True, stripquotes=True):
def read_stringnl_noescape_pair(f):
def read_string4(f):
def read_string1(f):
def read_unicodestringnl(f):
def read_unicodestring4(f):
def read_decimalnl_short(f):
def read_decimalnl_long(f):
def read_floatnl(f):
def read_float8(f):
def read_long1(f):
def read_long4(f):
def genops(pickle):
def optimize(p):
def dis(pickle, out=None, memo=None, indentlevel=4):
def wrap(text, width=70, **kwargs):
def fill(text, width=70, **kwargs):
def dedent(text):
def open(file, flag=None, mode=438):
def simplegeneric(func):
def walk_packages(path=None, prefix='', onerror=None):
def iter_modules(path=None, prefix=''):
def get_importer(path_item):
def iter_importers(fullname=''):
def get_loader(module_or_name):
def find_loader(fullname):
def extend_path(path, name):
def get_data(package, resource):
def binhex(inp, out):
def hexbin(inp, out):
def encode(in_file, out_file, name=None, mode=None):
def decode(in_file, out_file=None, mode=None, quiet=0):
def test():
def _bdecode(s):
def fix_eols(s):
def formataddr(pair):
def getaddresses(fieldvalues):
def formatdate(timeval=None, localtime=False, usegmt=False):
def make_msgid(idstring=None):
def unquote(str):
def decode_rfc2231(s):
def encode_rfc2231(s, charset=None, language=None):
def decode_params(params):
def message_from_string(s, *args, **kws):
def message_from_file(fp, *args, **kws):
def walk(self):
def body_line_iterator(msg, decode=False):
def typed_subpart_iterator(msg, maintype='text', subtype=None):
def _structure(msg, fp=None, level=0, include_default=False):
def parsedate_tz(data):
def parsedate(data):
def mktime_tz(data):
def quote(str):
def add_charset(charset, header_enc=None, body_enc=None, output_charset=None):
def add_alias(alias, canonical):
def add_codec(charset, codecname):
def decode_header(header):
def make_header(decoded_seq, maxlinelen=None, header_name=None, continuation_ws=' DCSP '):
def _whatsnd(data):
def encode_base64(msg):
def encode_quopri(msg):
def encode_7or8bit(msg):
def header_quopri_check(c):
def body_quopri_check(c):
def header_quopri_len(s):
def body_quopri_len(str):
def unquote(s):
def header_encode(header, charset='iso-8859-1', keep_eols=False, maxlinelen=76, eol=NL):
def encode(body, binary=False, maxlinelen=76, eol=NL):
def decode(encoded, eol=NL):
def _unquote_match(match):
def header_decode(s):
def _formatparam(param, value=None, quote=True):
def base64_len(s):
def header_encode(header, charset='iso-8859-1', keep_eols=False, maxlinelen=76, eol=NL):
def encode(s, binary=True, maxlinelen=76, eol=NL):
def decode(s, convert_eols=None):
def makedirs(name, mode=511):
def removedirs(name):
def renames(old, new):
def walk(top, topdown=True, onerror=None, followlinks=False):
def execl(file, *args):
def execle(file, *args):
def execlp(file, *args):
def execlpe(file, *args):
def execvp(file, args):
def execvpe(file, args, env):
def getenv(key, default=None):
def insort_right(a, x, lo=0, hi=None):
def bisect_right(a, x, lo=0, hi=None):
def insort_left(a, x, lo=0, hi=None):
def bisect_left(a, x, lo=0, hi=None):
def heappush(heap, item):
def heappop(heap):
def heapreplace(heap, item):
def heappushpop(heap, item):
def heapify(x):
def _heappushpop_max(heap, item):
def _heapify_max(x):
def nlargest(n, iterable):
def nsmallest(n, iterable):
def _siftdown_max(heap, startpos, pos):
def _siftup_max(heap, pos):
def merge(*iterables):
def nsmallest(n, iterable, key=None):
def nlargest(n, iterable, key=None):
def warnpy3k(message, category=None, stacklevel=1):
def _show_warning(message, category, filename, lineno, file=None, line=None):
def formatwarning(message, category, filename, lineno, line=None):
def filterwarnings(action, message='', category=Warning, module='', lineno=0, append=0):
def simplefilter(action, category=Warning, lineno=0, append=0):
def resetwarnings():
def warn(message, category=None, stacklevel=1):
def run(statement, filename=None, sort=(-1)):
def runctx(statement, globals, locals, filename=None, sort=(-1)):
def _dnsname_match(dn, hostname, max_wildcards=1):
def match_hostname(cert, hostname):
def get_default_verify_paths():
def create_default_context(purpose=Purpose.SERVER_AUTH, cafile=None, capath=None, cadata=None):
def _create_unverified_context(protocol=PROTOCOL_SSLv23, cert_reqs=None, check_hostname=False, purpose=Purpose.SERVER_AUTH, certfile=None, keyfile=None, cafile=None, capath=None, cadata=None):
def _https_verify_certificates(enable=True):
def cert_time_to_seconds(cert_time):
def DER_cert_to_PEM_cert(der_cert_bytes):
def PEM_cert_to_DER_cert(pem_cert_string):
def get_server_certificate(addr, ssl_version=PROTOCOL_SSLv23, ca_certs=None):
def sslwrap_simple(sock, keyfile=None, certfile=None):
def reset():
def listdir(path):
def annotate(head, list):
def encode_basestring(s):
def py_encode_basestring_ascii(s):
def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, sort_keys=False, **kw):
def dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, sort_keys=False, **kw):
def load(fp, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
def py_scanstring(s, end, encoding=None, strict=True, _b=BACKSLASH, _m=STRINGCHUNK.match):
def change_sequence(seq, action, seqno=_Unspecified, cond=_Unspecified):
def contextmanager(func):
@contextmanager DCNL def nested(*managers):
def open(file, mode=u'r', buffering=(-1), encoding=None, errors=None, newline=None, closefd=True):
def _match_abbrev(s, wordmap):
def check(file):
def extract(s):
def unexpo(intpart, fraction, expo):
def roundfrac(intpart, fraction, digs):
def fix(x, digs):
def sci(x, digs):
def test():
def abs__file__():
def removeduppaths():
def _init_pathinfo():
def addpackage(sitedir, name, known_paths):
def addsitedir(sitedir, known_paths=None):
def check_enableusersite():
def getuserbase():
def getusersitepackages():
def addusersitepackages(known_paths):
def getsitepackages():
def addsitepackages(known_paths):
def setBEGINLIBPATH():
def setquit():
def setcopyright():
def aliasmbcs():
def setencoding():
def execsitecustomize():
def execusercustomize():
def isleap(year):
def leapdays(y1, y2):
def weekday(year, month, day):
def monthrange(year, month):
def format(cols, colwidth=_colwidth, spacing=_spacing):
def formatstring(cols, colwidth=_colwidth, spacing=_spacing):
def timegm(tuple):
def lwp_cookie_str(cookie):
def parse(source, filename='<unknown>', mode='exec'):
def literal_eval(node_or_string):
def dump(node, annotate_fields=True, include_attributes=False):
def copy_location(new_node, old_node):
def fix_missing_locations(node):
def increment_lineno(node, n=1):
def iter_fields(node):
def iter_child_nodes(node):
def get_docstring(node, clean=True):
def walk(node):
def reduce_tree(node, parent=None):
def get_characteristic_subpattern(subpatterns):
def rec_test(sequence, test_func):
def tokenize_wrapper(input):
def pattern_convert(grammar, raw_node_info):
def tokenize(readline, tokeneater=printtoken):
def _get_normal_name(orig_enc):
def detect_encoding(readline):
def untokenize(iterable):
def generate_tokens(readline):
def load_grammar(gt='Grammar.txt', gp=None, save=True, force=False, logger=None):
def _newer(a, b):
def main(*args):
def Assign(target, source):
def Name(name, prefix=None):
def Attr(obj, attr):
def Comma():
def Dot():
def ArgList(args, lparen=LParen(), rparen=RParen()):
def Call(func_name, args=None, prefix=None):
def Newline():
def BlankLine():
def Subscript(index_node):
def String(string, prefix=None):
def ListComp(xp, fp, it, test=None):
def FromImport(package_name, name_leafs):
def is_tuple(node):
def is_list(node):
def attr_chain(obj, attr):
def in_special_context(node):
def is_probably_builtin(node):
def find_indentation(node):
def find_root(node):
def does_tree_import(package, name, node):
def is_import(node):
def touch_import(package, name, node):
def find_binding(name, node, package=None):
def _is_import_binding(node, name, package=None):
def get_refactorer(fixer_pkg='lib2to3', fixers=None, options=None):
def diff_texts(a, b, filename):
def main(fixer_pkg, args=None):
def has_metaclass(parent):
def fixup_parse_tree(cls_node):
def fixup_simple_stmt(parent, i, stmt_node):
def fixup_indent(suite):
def traverse_imports(names):
def get_all_fix_names(fixer_pkg, remove_prefix=True):
def _get_head_types(pat):
def _get_headnode_dict(fixer_list):
def get_fixers_from_package(pkg_name):
def convert(gr, raw_node):
def generate_matches(patterns, nodes):
def get_close_matches(word, possibilities, n=3, cutoff=0.6):
def _count_leading(line, ch):
def IS_LINE_JUNK(line, pat=re.compile('\\s*#?\\s*$').match):
def IS_CHARACTER_JUNK(ch, ws=' DCSP  DCTB '):
def _format_range_unified(start, stop):
def unified_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n'):
def _format_range_context(start, stop):
def context_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n'):
def ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK):
def _mdiff(fromlines, tolines, context=None, linejunk=None, charjunk=IS_CHARACTER_JUNK):
def restore(delta, which):
def make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler):
def _formatparam(param, value=None, quote=1):
def guess_scheme(environ):
def application_uri(environ):
def request_uri(environ, include_query=1):
def shift_path_info(environ):
def setup_testing_defaults(environ):
def is_hop_by_hop(header_name):
def validator(application):
def _url_collapse_path(path):
def nobody_uid():
def executable(path):
def test(condition, true, false):
def c2py(plural):
def _iterdump(connection):
def time2isoz(t=None):
def time2netscape(t=None):
def http2time(text):
def iso2time(text):
def unmatched(match):
def split_header_words(header_values):
def join_header_words(lists):
def parse_ns_headers(ns_headers):
def is_HDN(text):
def domain_match(A, B):
def liberal_is_HDN(text):
def user_domain_match(A, B):
def request_host(request):
def eff_request_host(request):
def request_path(request):
def escape_path(path):
def reach(h):
def is_third_party(request):
def deepvalues(mapping):
def guess_type(url, strict=True):
def guess_all_extensions(type, strict=True):
def guess_extension(type, strict=True):
def add_type(type, ext, strict=True):
def compile_dir(dir, maxlevels=10, ddir=None, force=0, rx=None, quiet=0):
def compile_file(fullname, ddir=None, force=0, rx=None, quiet=0):
def compile_path(skip_curdir=1, maxlevels=0, force=0, quiet=0):
def expand_args(args, flist):
def main():
def isabs(s):
def split(s):
def splitdrive(p):
def islink(s):
def lexists(path):
def expandvars(path):
def expanduser(path):
def normpath(s):
def walk(top, func, arg):
def abspath(path):
def url2pathname(pathname):
def pathname2url(pathname):
def pathdirs():
def getdoc(object):
def splitdoc(doc):
def classname(object, modname):
def isdata(object):
def replace(text, *pairs):
def cram(text, maxlen):
def stripid(text):
def _split_list(s, predicate):
def visiblename(name, all=None, obj=None):
def classify_class_attrs(object):
def ispackage(path):
def synopsis(filename, cache={}):
def importfile(path):
def safeimport(path, forceload=0, cache={}):
def pager(text):
def getpager():
def plain(text):
def pipepager(text, cmd):
def tempfilepager(text, cmd):
def ttypager(text):
def plainpager(text):
def describe(thing):
def locate(path, forceload=0):
def resolve(thing, forceload=0):
def render_doc(thing, title='Python DCSP Library DCSP Documentation: DCSP %s', forceload=0):
def doc(thing, title='Python DCSP Library DCSP Documentation: DCSP %s', forceload=0):
def writedoc(thing, forceload=0):
def writedocs(dir, pkgpath='', done=None):
def apropos(key):
def gui():
def cli():
def compile(source, filename, mode, flags=None, dont_inherit=None):
def generateArgList(arglist):
def findOp(node):
def set_filename(filename, tree):
def is_future(stmt):
def order_blocks(start_block, exit_block):
def twobyte(val):
def setraw(fd, when=TCSAFLUSH):
def setcbreak(fd, when=TCSAFLUSH):
def pprint(object, stream=None, indent=1, width=80, depth=None):
def pformat(object, indent=1, width=80, depth=None):
def saferepr(object):
def isreadable(object):
def isrecursive(object):
def prepare(data):
def RawValue(typecode_or_type, *args):
def RawArray(typecode_or_type, size_or_initializer):
def Value(typecode_or_type, *args, **kwds):
def Array(typecode_or_type, size_or_initializer, **kwds):
def Manager():
def Pipe(duplex=True):
def cpu_count():
def freeze_support():
def get_logger():
def log_to_stderr(level=None):
def allow_connection_pickling():
def Lock():
def RLock():
def Condition(lock=None):
def Semaphore(value=1):
def BoundedSemaphore(value=1):
def Event():
def Queue(maxsize=0):
def JoinableQueue(maxsize=0):
def Pool(processes=None, initializer=None, initargs=(), maxtasksperchild=None):
def RawValue(typecode_or_type, *args):
def RawArray(typecode_or_type, size_or_initializer):
def Value(typecode_or_type, *args, **kwds):
def Array(typecode_or_type, size_or_initializer, **kwds):
def get_logger():
def log_to_stderr(level=None):
def _run_finalizers(minpriority=None):
def is_exiting():
def current_process():
def active_children():
def arbitrary_address(family):
def address_type(address):
def Client(address, family=None, authkey=None):
def SocketClient(address):
def dispatch(c, id, methodname, args=(), kwds={}):
def all_methods(obj):
def public_methods(obj):
def RebuildProxy(func, token, serializer, kwds):
def MakeProxyType(name, exposed, _cache={}):
def AutoProxy(token, serializer, manager=None, authkey=None, exposed=None, incref=True):
def _purge():
def fnmatch(name, pat):
def filter(names, pat):
def fnmatchcase(name, pat):
def translate(pat):
def ismodule(object):
def isclass(object):
def ismethod(object):
def ismethoddescriptor(object):
def isdatadescriptor(object):
def isfunction(object):
def isgeneratorfunction(object):
def isgenerator(object):
def istraceback(object):
def isframe(object):
def iscode(object):
def isbuiltin(object):
def isroutine(object):
def isabstract(object):
def getmembers(object, predicate=None):
def classify_class_attrs(cls):
def getmro(cls):
def indentsize(line):
def getdoc(object):
def cleandoc(doc):
def getfile(object):
def getmoduleinfo(path):
def getmodulename(path):
def getsourcefile(object):
def getabsfile(object, _filename=None):
def getmodule(object, _filename=None):
def findsource(object):
def getcomments(object):
def getblock(lines):
def getsourcelines(object):
def getsource(object):
def walktree(classes, children, parent):
def getclasstree(classes, unique=0):
def getargs(co):
def getargspec(func):
def getargvalues(frame):
def strseq(object, convert, join=joinseq):
def formatargspec(args, varargs=None, varkw=None, defaults=None, formatarg=str, formatvarargs=(lambda name: ('*' + name)), formatvarkw=(lambda name: ('**' + name)), formatvalue=(lambda value: ('=' + repr(value))), join=joinseq):
def formatargvalues(args, varargs, varkw, locals, formatarg=str, formatvarargs=(lambda name: ('*' + name)), formatvarkw=(lambda name: ('**' + name)), formatvalue=(lambda value: ('=' + repr(value))), join=joinseq):
def getcallargs(func, *positional, **named):
def getframeinfo(frame, context=1):
def getlineno(frame):
def getouterframes(frame, context=1):
def getinnerframes(tb, context=1):
def stack(context=1):
def trace(context=1):
def urlopen(url, data=None, proxies=None, context=None):
def localhost():
def thishost():
def ftperrors():
def noheaders():
def toBytes(url):
def unwrap(url):
def splittype(url):
def splithost(url):
def splituser(host):
def splitpasswd(user):
def splitport(host):
def splitnport(host, defport=(-1)):
def splitquery(url):
def splittag(url):
def splitattr(url):
def splitvalue(attr):
def unquote(s, recurse=False):
def unquote_plus(s):
def quote(s, safe='/'):
def quote_plus(s, safe=''):
def urlencode(query, doseq=0):
def getproxies_environment():
def proxy_bypass_environment(host, proxies=None):
def _resolve_name(name, package, level):
def import_module(name, package=None):
def glob(pathname):
def iglob(pathname):
def _run_exitfuncs():
def register(func, *targs, **kargs):
def interact(banner=None, readfunc=None, local=None):
def request_host(request):
def build_opener(*handlers):
def _parse_proxy(proxy):
def randombytes(n):
def parse_keqv_list(l):
def parse_http_list(s):
def mime_decode(line):
def mime_decode_header(line):
def unmimify_part(ifile, ofile, decode_base64=0):
def unmimify(infile, outfile, decode_base64=0):
def mime_encode(line, header):
def mime_encode_header(line):
def mimify_part(ifile, ofile, is_mime):
def mimify(infile, outfile):
def register(name, klass, instance=None, update_tryorder=1):
def get(using=None):
def _synthesize(browser, update_tryorder=1):
def _iscommand(cmd):
def fileConfig(fname, defaults=None, disable_existing_loggers=True):
def _resolve(name):
def _create_formatters(cp):
def _install_handlers(cp, formatters):
def _install_loggers(cp, handlers, disable_existing_loggers):
def dictConfig(config):
def listen(port=DEFAULT_LOGGING_CONFIG_PORT):
def stopListening():
def currentframe():
def getLevelName(level):
def addLevelName(level, levelName):
def _acquireLock():
def _releaseLock():
def makeLogRecord(dict):
def _removeHandlerRef(wr):
def _addHandlerRef(handler):
def setLoggerClass(klass):
def getLoggerClass():
def basicConfig(**kwargs):
def getLogger(name=None):
def critical(msg, *args, **kwargs):
def error(msg, *args, **kwargs):
def exception(msg, *args, **kwargs):
def warning(msg, *args, **kwargs):
def info(msg, *args, **kwargs):
def debug(msg, *args, **kwargs):
def log(level, msg, *args, **kwargs):
def disable(level):
def shutdown(handlerList=_handlerList):
def _showwarning(message, category, filename, lineno, file=None, line=None):
def captureWarnings(capture):
def normcase(s):
def join(a, *p):
def splitunc(p):
def basename(p):
def dirname(p):
def ismount(path):
def normpath(path):
def abspath(path):
def checkfuncname(b, frame):
def effective(file, line, frame):
def openpty():
def master_open():
def _open_terminal():
def slave_open(tty_name):
def fork():
def _writen(fd, data):
def _read(fd):
def _copy(master_fd, master_read=_read, stdin_read=_read):
def spawn(argv, master_read=_read, stdin_read=_read):
def raise_conversion_error(function):
def update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES):
def wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES):
def total_ordering(cls):
def cmp_to_key(mycmp):
def open(name, mode='r', bufsize=(-1)):
def fileopen(file):
def create_string_buffer(init, size=None):
def CFUNCTYPE(restype, *argtypes, **kw):
def string_at(ptr, size=(-1)):
def dylib_info(filename):
def ensure_utf8(s):
def dyld_image_suffix_search(iterator, env=None):
def dyld_find(name, executable_path=None, env=None):
def framework_find(fn, executable_path=None, env=None):
def framework_info(filename):
def is_resource_enabled(resource):
def requires(resource, msg=None):
def get_tests(package, mask, verbosity, exclude=()):
def test_with_refcounts(runner, verbosity, testcase):
def _other_endian(typ):
def _eintr_retry(func, *args):
def clearcache():
def getlines(filename, module_globals=None):
def checkcache(filename=None):
def updatecache(filename, module_globals=None):
def _args_from_interpreter_flags():
def call(*popenargs, **kwargs):
def check_call(*popenargs, **kwargs):
def check_output(*popenargs, **kwargs):
def list2cmdline(seq):
def exists(path):
def isfile(path):
def isdir(s):
def getsize(filename):
def getmtime(filename):
def getatime(filename):
def getctime(filename):
def commonprefix(m):
def _splitext(p, sep, altsep, extsep):
def getparser(use_datetime=0):
def dumps(params, methodname=None, methodresponse=None, encoding=None, allow_none=0):
def loads(data, use_datetime=0):
def gzip_encode(data):
def gzip_decode(data, max_decode=20971520):
def __py_new(name, string=''):
def __hash_new(name, string=''):
def stn(s, length):
def nts(s):
def nti(s):
def itn(n, digits=8, format=DEFAULT_FORMAT):
def uts(s, encoding, errors):
def calc_chksums(buf):
def copyfileobj(src, dst, length=None):
def filemode(mode):
def is_tarfile(name):
def b64encode(s, altchars=None):
def b64decode(s, altchars=None):
def standard_b64encode(s):
def standard_b64decode(s):
def urlsafe_b64encode(s):
def urlsafe_b64decode(s):
def b32encode(s):
def b32decode(s, casefold=False, map01=None):
def b16encode(s):
def b16decode(s, casefold=False):
def encode(input, output):
def decode(input, output):
def encodestring(s):
def decodestring(s):
def test():
def format(percent, value, grouping=False, monetary=False, *additional):
def format_string(f, val, grouping=False):
def currency(val, symbol=True, grouping=False, international=False):
def str(val):
def atof(string, func=float):
def atoi(str):
def normalize(localename):
def _parse_localename(localename):
def _build_localename(localetuple):
def getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):
def getlocale(category=LC_CTYPE):
def setlocale(category, locale=None):
def resetlocale(category=LC_ALL):
def _print_locale():
def modname(path):
def fullmodname(path):
def find_lines_from_code(code, strs):
def find_lines(code, strs):
def find_strings(filename):
def find_executable_linenos(filename):
def input(files=None, inplace=0, backup='', bufsize=0, mode='r', openhook=None):
def close():
def nextfile():
def filename():
def lineno():
def filelineno():
def fileno():
def isfirstline():
def isstdin():
def capwords(s, sep=None):
def maketrans(fromstr, tostr):
def lower(s):
def upper(s):
def swapcase(s):
def strip(s, chars=None):
def lstrip(s, chars=None):
def rstrip(s, chars=None):
def split(s, sep=None, maxsplit=(-1)):
def rsplit(s, sep=None, maxsplit=(-1)):
def join(words, sep=' DCSP '):
def index(s, *args):
def rindex(s, *args):
def count(s, *args):
def find(s, *args):
def rfind(s, *args):
def atof(s):
def atoi(s, base=10):
def atol(s, base=10):
def ljust(s, width, *args):
def rjust(s, width, *args):
def center(s, width, *args):
def zfill(x, width):
def expandtabs(s, tabsize=8):
def translate(s, table, deletions=''):
def capitalize(s):
def replace(s, old, new, maxreplace=(-1)):
def parse150(resp):
def parse227(resp):
def parse229(resp, peer):
def parse257(resp):
def print_line(line):
def ftpcp(source, sourcename, target, targetname='', type='I'):
def test():
def gcd(a, b):
def dump_file(filename, head=None):
def show_formats():
def show_formats():
def safe_name(name):
def safe_version(version):
def to_filename(name):
def get_default_compiler(osname=None, platform=None):
def show_compilers():
def new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0):
def gen_preprocess_options(macros, include_dirs):
def gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries):
def _get_gid(name):
def _get_uid(name):
def make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0, owner=None, group=None):
def make_zipfile(base_name, base_dir, verbose=0, dry_run=0):
def check_archive_formats(formats):
def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None):
def get_python_version():
def get_python_inc(plat_specific=0, prefix=None):
def get_python_lib(plat_specific=0, standard_lib=0, prefix=None):
def customize_compiler(compiler):
def get_config_h_filename():
def get_makefile_filename():
def parse_config_h(fp, g=None):
def parse_makefile(fn, g=None):
def expand_makefile_vars(s, vars):
def _init_posix():
def _init_nt():
def _init_os2():
def get_config_vars(*args):
def get_config_var(name):
def setup(**attrs):
def run_setup(script_name, script_args=None, stop_after='run'):
def get_platform():
def convert_path(pathname):
def change_root(new_root, pathname):
def check_environ():
def subst_vars(s, local_vars):
def split_quoted(s):
def execute(func, args, msg=None, verbose=0, dry_run=0):
def strtobool(val):
def byte_compile(py_files, optimize=0, force=0, prefix=None, base_dir=None, verbose=1, dry_run=0, direct=None):
def rfc822_escape(header):
def make_local_path(s):
def _get_unpatched(cls):
def copy_xxmodule_c(directory):
def fixup_build_ext(cmd):
def can_fs_encode(filename):
def wrap_text(text, width):
def translate_longopt(opt):
def fix_help_options(options):
def findall(dir=os.curdir):
def glob_to_re(pattern):
def translate_pattern(pattern, anchor=1, prefix=None, is_regex=0):
def _copy_file_contents(src, dst, buffer_size=(16 * 1024)):
def copy_file(src, dst, preserve_mode=1, preserve_times=1, update=0, link=None, verbose=1, dry_run=0):
def move_file(src, dst, verbose=1, dry_run=0):
def write_file(filename, contents):
def get_build_version():
def normalize_and_reduce_paths(paths):
def removeDuplicates(variable):
def find_vcvarsall(version):
def query_vcvarsall(version, arch='x86'):
def read_keys(base, key):
def read_values(base, key):
def get_build_version():
def get_build_architecture():
def normalize_and_reduce_paths(paths):
def splitUp(pred):
def split_provision(value):
def get_msvcr():
def check_config_h():
def get_versions():
def is_cygwingcc():
def spawn(cmd, search_path=1, verbose=0, dry_run=0):
def _nt_quote_args(args):
def find_executable(executable, path=None):
def newer(source, target):
def newer_pairwise(sources, targets):
def newer_group(sources, target, missing='error'):
def mkpath(name, mode=511, verbose=1, dry_run=0):
def create_tree(base_dir, files, mode=511, verbose=1, dry_run=0):
def copy_tree(src, dst, preserve_mode=1, preserve_times=1, preserve_symlinks=0, update=0, verbose=1, dry_run=0):
def _build_cmdtuple(path, cmdtuples):
def remove_tree(directory, verbose=1, dry_run=0):
def ensure_relative(path):
def check_config_h():
def get_versions():
def is_unavailable_exception(e):
def sample_func(v):
def run_gdb(*args, **env_vars):
def iterfunc(seqn):
def itermulti(seqn):
def escapestr(text, ampm):
@contextlib.contextmanager DCNL def _ignore_deprecated_imports(ignore=True):
def import_module(name, deprecated=False):
def _save_and_remove_module(name, orig_modules):
def _save_and_block_module(name, orig_modules):
def import_fresh_module(name, fresh=(), blocked=(), deprecated=False):
def get_attribute(obj, name):
def forget(modname):
def is_resource_enabled(resource):
def requires(resource, msg=None):
def requires_mac_ver(*min_version):
def find_unused_port(family=socket.AF_INET, socktype=socket.SOCK_STREAM):
def bind_port(sock, host=HOST):
def _is_ipv6_enabled():
def system_must_validate_cert(f):
@contextlib.contextmanager DCNL def change_cwd(path, quiet=False):
@contextlib.contextmanager DCNL def temp_cwd(name='tempcwd', quiet=False):
def findfile(file, here=__file__, subdir=None):
def sortdict(dict):
def make_bad_fd():
def _filterwarnings(filters, quiet=False):
@contextlib.contextmanager DCNL def check_warnings(*filters, **kwargs):
@contextlib.contextmanager DCNL def check_py3k_warnings(*filters, **kwargs):
@contextlib.contextmanager DCNL def transient_internet(resource_name, timeout=30.0, errnos=()):
@contextlib.contextmanager DCNL def captured_output(stream_name):
def captured_stdout():
def gc_collect():
def bigmemtest(minsize, memuse, overhead=(5 * _1M)):
def bigaddrspacetest(f):
def cpython_only(test):
def check_impl_detail(**guards):
def _run_suite(suite):
def run_unittest(*classes):
def run_doctest(module, verbosity=None):
def reap_threads(func):
def reap_children():
@contextlib.contextmanager DCNL def swap_attr(obj, attr, new_val):
def py3k_bytes(b):
def args_from_interpreter_flags():
def strip_python_stderr(stderr):
def ignore_deprecation_warnings(func):
def genblock(seed, length, step=1024, generator=random):
def choose_lines(source, number, seed=None, generator=random):
def truediv(a, b):
def has_sound(sound):
def _get_cscript_path():
def _have_soundcard():
def getimage(name):
def get_qualified_path(name):
def test_password_manager(self):
def add_ordered_mock_handlers(opener, meth_spec):
def randfloats(n):
def tabulate(r):
def main():
def assert_python_ok(*args, **env_vars):
def assert_python_failure(*args, **env_vars):
def check_encoding(encoding):
def error(xml):
def xpath_tokenizer(p):
def xmltoolkit62():
def xmltoolkit63():
def eggs(x, y):
def testimage(name):
def to_ulps(x):
def ulps_check(expected, got, ulps=20):
def acc_check(expected, got, rel_err=2e-15, abs_err=5e-323):
def parse_mtestfile(fname):
def parse_testfile(fname):
def main(tests=None, testdir=None, verbose=0, quiet=False, exclude=False, single=False, randomize=False, fromfile=None, findleaks=False, use_resources=None, trace=False, coverdir='coverage', runleaks=False, huntrleaks=False, verbose2=False, print_slow=False, random_seed=None, use_mp=None, verbose3=False, forever=False, header=False, pgo=False):
def findtests(testdir=None, stdtests=STDTESTS, nottests=NOTTESTS):
def runtest(test, verbose, quiet, huntrleaks=False, use_resources=None, pgo=False):
def dash_R(the_module, test, indirect_test, huntrleaks):
def printlist(x, width=70, indent=4):
def exit_subprocess():
def verbose_print(arg):
def skip_unless_symlink(test):
def _symlink_win32(target, link, target_is_directory=False):
def _interact(cookiejar, url, set_cookie_hdrs, hdr_name):
def gcd(a, b):
def isint(x):
def isnum(x):
def isRat(x):
@staticmethod DCNL def PythonPartial(func, *args, **keywords):
def capture(*args, **kw):
def signature(part):
def consts(t):
def dump(co):
@contextmanager DCNL def warnings_state(module):
def fix_ext_py(filename):
def my_file_and_modname():
def func2():
def _get_signature_object(func, as_instance, eat_self):
def _instance_callable(obj):
def _patch_object(target, attribute, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs):
def _patch_multiple(target, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs):
def patch(target, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs):
def _patch_stopall():
def _get_method(name, func):
def create_autospec(spec, spec_set=False, instance=False, _parent=None, _name=None, **kwargs):
def _must_skip(spec, entry, is_type):
def mock_open(mock=None, read_data=''):
def _ctrl_handler(sig):
@contextlib.contextmanager DCNL def uncache(*names):
@contextlib.contextmanager DCNL def import_state(**kwargs):
def compare_generic_iter(make_it, match):
def server(evt, serv, dataq=None):
def run_pydoc(module_name, *args, **env):
def get_pydoc_html(module):
def get_pydoc_text(module):
def print_diffs(text1, text2):
def have_python_version(name, cache={}):
def R(seqn):
def L(seqn):
def skip_if_ABSTFN_contains_backslash(test):
def onearg(x):
def errfunc(*args):
def gen3():
def isEven(x):
def isOdd(x):
def take(n, seq):
def fact(n):
def R(seqn):
def L(seqn):
def Nonfunction(*args):
def test_main(arith=None, verbose=None, todo_tests=None, debug=None):
def strtod(s, mant_dig=53, min_exp=(-1021), max_exp=1024):
def try_address(host, port=0, family=socket.AF_INET):
def isTipcAvailable():
def dbcheck(exprstr, globals=None, locals=None):
def countcalls(counts):
def check_enough_semaphores():
def R(seqn):
def L(seqn):
def powerset(U):
def cube(n):
def linegraph(G):
def faces(G):
def no_tracing(func):
def signal_alarm(n):
def hexescape(char):
def wr_long(f, x):
def compile(file, cfile=None, dfile=None, doraise=False):
def main(args=None):
def _extract_future_flags(globs):
def _normalize_module(module, depth=2):
def _indent(s, indent=4):
def _exception_traceback(exc_info):
def _ellipsis_match(want, got):
def _comment_line(line):
def testmod(m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False):
def testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser(), encoding=None):
def run_docstring_examples(f, globs, verbose=False, name='NoName', compileflags=None, optionflags=0):
def set_unittest_reportflags(flags):
def DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, **options):
def DocFileSuite(*paths, **kw):
def script_from_examples(s):
def testsource(module, name):
def debug_src(src, pm=False, globs=None):
def debug_script(src, pm=False, globs=None):
def debug(module, name, pm=False):
def copy(x):
def deepcopy(x, memo=None, _nil=[]):
def _keep_alive(x, memo):
def url2pathname(url):
def pathname2url(p):
def open(filename, flags=db.DB_CREATE, mode=432, filetype=db.DB_HASH, dbenv=None, dbname=None):
def contains_metastrings(s):
def DeadlockWrap(function, *_args, **_kwargs):
def getstatus(file):
def getoutput(cmd):
def getstatusoutput(cmd):
def test():
def dis(x=None):
def distb(tb=None):
def disassemble(co, lasti=(-1)):
def findlabels(code):
def findlinestarts(code):
def _test():
def get_long_be(s):
def gethdr(fp):
def printhdr(file):
def make_parser(parser_list=[]):
def __dict_replace(s, d):
def escape(data, entities={}):
def unescape(data, entities={}):
def quoteattr(data, entities={}):
def prepare_input_source(source, base=''):
def parse(file, namespaces=True):
def parseString(string, namespaces=True):
def parseFragment(file, context, namespaces=True):
def parseFragmentString(string, context, namespaces=True):
def makeBuilder(options):
def registerDOMImplementation(name, factory):
def _good_enough(dom, features):
def getDOMImplementation(name=None, features=()):
def _write_data(writer, data):
def _clone_node(node, deep, newOwnerDocument):
def parse(file, parser=None, bufsize=None):
def parseString(string, parser=None):
def open(filename, mode='rb', compresslevel=9):
def copyfileobj(fsrc, fdst, length=(16 * 1024)):
def copyfile(src, dst):
def copymode(src, dst):
def copystat(src, dst):
def copy(src, dst):
def copy2(src, dst):
def ignore_patterns(*patterns):
def copytree(src, dst, symlinks=False, ignore=None):
def rmtree(path, ignore_errors=False, onerror=None):
def move(src, dst):
def _get_gid(name):
def _get_uid(name):
def _make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0, owner=None, group=None, logger=None):
def _make_zipfile(base_name, base_dir, verbose=0, dry_run=0, logger=None):
def get_archive_formats():
def register_archive_format(name, function, extra_args=None, description=''):
def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None, logger=None):
def abstractmethod(funcobj):
def quote(file):
def Bastion(object, filter=(lambda name: (name[:1] != '_')), name=None, bastionclass=BastionClass):
def _test():
def _find_executable(executable, path=None):
def _read_output(commandstring):
def _find_build_tool(toolname):
def _get_system_version():
def _remove_original_values(_config_vars):
def _save_modified_value(_config_vars, cv, newvalue):
def _supports_universal_builds():
def _find_appropriate_compiler(_config_vars):
def _remove_universal_flags(_config_vars):
def _remove_unsupported_archs(_config_vars):
def _override_all_archs(_config_vars):
def _check_for_unavailable_sdk(_config_vars):
def compiler_fixup(compiler_so, cc_args):
def customize_config_vars(_config_vars):
def customize_compiler(_config_vars):
def get_platform_osx(_config_vars, osname, release, machine):
def _run_code(code, run_globals, init_globals=None, mod_name=None, mod_fname=None, mod_loader=None, pkg_name=None):
def _run_module_code(code, init_globals=None, mod_name=None, mod_fname=None, mod_loader=None, pkg_name=None):
def _run_module_as_main(mod_name, alter_argv=True):
def run_module(mod_name, init_globals=None, run_name=None, alter_sys=False):
def _get_importer(path_name):
def run_path(path_name, init_globals=None, run_name=None):
def Internaldate2tuple(resp):
def Int2AP(num):
def ParseFlags(resp):
def Time2Internaldate(date_time):
def test(HandlerClass=BaseHTTPRequestHandler, ServerClass=HTTPServer, protocol='HTTP/1.0'):
def _candidate_tempdir_list():
def _get_default_tempdir():
def _get_candidate_names():
def _mkstemp_inner(dir, pre, suf, flags):
def gettempprefix():
def gettempdir():
def mkstemp(suffix='', prefix=template, dir=None, text=False):
def mkdtemp(suffix='', prefix=template, dir=None):
def mktemp(suffix='', prefix=template, dir=None):
def NamedTemporaryFile(mode='w+b', bufsize=(-1), suffix='', prefix=template, dir=None, delete=True):
def match(pattern, string, flags=0):
def search(pattern, string, flags=0):
def sub(pattern, repl, string, count=0, flags=0):
def subn(pattern, repl, string, count=0, flags=0):
def split(pattern, string, maxsplit=0, flags=0):
def findall(pattern, string, flags=0):
def compile(pattern, flags=0):
def purge():
def template(pattern, flags=0):
def escape(pattern):
def getfqdn(name=''):
def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT, source_address=None):
def getopt(args, shortopts, longopts=[]):
def gnu_getopt(args, shortopts, longopts=[]):
def start_new_thread(function, args, kwargs={}):
def exit():
def get_ident():
def allocate_lock():
def stack_size(size=None):
def interrupt_main():
def test_jpeg(h, f):
def test_exif(h, f):
def test_gif(h, f):
def test_tiff(h, f):
def test_rgb(h, f):
def test_pbm(h, f):
def test_pgm(h, f):
def test_ppm(h, f):
def test_rast(h, f):
def test_xbm(h, f):
def open(file, flag='r', mode=438):
def readPlist(pathOrFile):
def writePlist(rootObject, pathOrFile):
def readPlistFromString(data):
def writePlistToString(rootObject):
def readPlistFromResource(path, restype='plst', resid=0):
def writePlistToResource(rootObject, path, restype='plst', resid=0):
def version():
def bootstrap(root=None, upgrade=False, user=False, altinstall=False, default_pip=True, verbosity=0):
def _uninstall_helper(verbosity=0):
def reset():
def lookup(name, frame, locals):
def scanvars(reader, frame, locals):
def html(einfo, context=5):
def text(einfo, context=5):
def enable(display=1, logdir=None, context=5, format='html'):
def whichdb(filename):
def clear_cache():
def urlparse(url, scheme='', allow_fragments=True):
def urlsplit(url, scheme='', allow_fragments=True):
def urlunparse(data):
def urlunsplit(data):
def urljoin(base, url, allow_fragments=True):
def urldefrag(url):
def unquote(s, recurse=False):
def parse_qs(qs, keep_blank_values=0, strict_parsing=0):
def parse_qsl(qs, keep_blank_values=0, strict_parsing=0):
def normcase(s):
def isabs(s):
def join(a, *p):
def split(p):
def splitdrive(p):
def basename(p):
def dirname(p):
def islink(path):
def lexists(path):
def samefile(f1, f2):
def sameopenfile(fp1, fp2):
def samestat(s1, s2):
def ismount(path):
def walk(top, func, arg):
def expanduser(path):
def expandvars(path):
def normpath(path):
def abspath(path):
def realpath(filename):
def relpath(path, start=curdir):
def LocateWebServerPath(description):
def GetWebServer(description=None):
def FindWebServer(options, server_desc):
def split_path(path):
def AssignScriptMaps(script_maps, target, update='replace'):
def get_unique_items(sequence, reference):
def AddExtensionFiles(params, options):
def RemoveScriptMaps(vd_params, options):
def InstallModule(conf_module_name, params, options, log=(lambda *args: None)):
def UninstallModule(conf_module_name, params, options, log=(lambda *args: None)):
def MergeStandardOptions(options, params):
def HandleCommandLine(params, argv=None, conf_module_name=None, default_arg='install', opt_parser=None, custom_arg_handlers={}):
def status_handler(options, log, arg):
def status_handler(options, log, arg):
def GetTypeLibsForSpec(arg):
def __WrapDispatch(dispatch, userName=None, resultCLSID=None, typeinfo=None, UnicodeToString=None, clsctx=pythoncom.CLSCTX_SERVER, WrapperClass=None):
def GetObject(Pathname=None, Class=None, clsctx=None):
def GetActiveObject(Class, clsctx=pythoncom.CLSCTX_ALL):
def Moniker(Pathname, clsctx=pythoncom.CLSCTX_ALL):
def Dispatch(dispatch, userName=None, resultCLSID=None, typeinfo=None, UnicodeToString=None, clsctx=pythoncom.CLSCTX_SERVER):
def DispatchEx(clsid, machine=None, userName=None, resultCLSID=None, typeinfo=None, UnicodeToString=None, clsctx=None):
def CastTo(ob, target):
def DispatchWithEvents(clsid, user_event_class):
def WithEvents(disp, user_event_class):
def getevents(clsid):
def Record(name, object):
def WrapEnum(ob, resultCLSID=None):
def _BuildArgList(fdesc, names):
def BuildCallList(fdesc, names, defNamedOptArg, defNamedNotOptArg, defUnnamedArg, defOutArg, is_comment=False):
def RegisterCLSID(clsid, pythonClass):
def RegisterCLSIDsFromDict(dict):
def GetClass(clsid):
def HasClass(clsid):
def DumbDispatch(IDispatch, userName=None, createClass=None, UnicodeToString=None, clsctx=pythoncom.CLSCTX_SERVER):
def EnumTlbs(excludeFlags=0):
def FindTlbsWithDescription(desc):
def SelectTlb(title='Select DCSP Library', excludeFlags=0):
def GetGeneratedFileName(clsid, lcid, major, minor):
def SplitGeneratedFileName(fname):
def GetGeneratePath():
def GetClassForProgID(progid):
def GetClassForCLSID(clsid):
def GetModuleForProgID(progid):
def GetModuleForCLSID(clsid):
def GetModuleForTypelib(typelibCLSID, lcid, major, minor):
def MakeModuleForTypelib(typelibCLSID, lcid, major, minor, progressInstance=None, bGUIProgress=None, bForDemand=bForDemandDefault, bBuildHidden=1):
def MakeModuleForTypelibInterface(typelib_ob, progressInstance=None, bForDemand=bForDemandDefault, bBuildHidden=1):
def EnsureModuleForTypelibInterface(typelib_ob, progressInstance=None, bForDemand=bForDemandDefault, bBuildHidden=1):
def ForgetAboutTypelibInterface(typelib_ob):
def EnsureModule(typelibCLSID, lcid, major, minor, progressInstance=None, bValidateFile=(not is_readonly), bForDemand=bForDemandDefault, bBuildHidden=1):
def EnsureDispatch(prog_id, bForDemand=1):
def AddModuleToCache(typelibclsid, lcid, major, minor, verbose=1, bFlushNow=(not is_readonly)):
def _GetModule(fname):
def Rebuild(verbose=1):
def _normalize(op1, op2, shouldround=0, prec=0):
def _adjust_coefficients(op1, op2):
def _convert_other(other):
def _isinfinity(num):
def _isnan(num):
def IIDToInterfaceName(iid):
def BeginThreadsSimpleMarshal(numThreads, cookie):
def _set_string(path, value, base=win32con.HKEY_CLASSES_ROOT):
def _get_string(path, base=win32con.HKEY_CLASSES_ROOT):
def _remove_key(path, base=win32con.HKEY_CLASSES_ROOT):
def recurse_delete_key(path, base=win32con.HKEY_CLASSES_ROOT):
def RegisterServer(clsid, pythonInstString=None, desc=None, progID=None, verProgID=None, defIcon=None, threadingModel='both', policy=None, catids=[], other={}, addPyComCat=None, dispatcher=None, clsctx=None, addnPath=None):
def GetUnregisterServerKeys(clsid, progID=None, verProgID=None, customKeys=None):
def UnregisterServer(clsid, progID=None, verProgID=None, customKeys=None):
def GetRegisteredServerOption(clsid, optionName):
def RegisterPyComCategory():
def CreateInstance(clsid, reqIID):
def resolve_func(spec):
def call_func(spec, *args):
def _import_module(mname):
def wrap(ob, iid=None, usePolicy=None, useDispatcher=None):
def unwrap(ob):
def NewEnum(seq, cls=ListEnumerator, iid=pythoncom.IID_IEnumVARIANT, usePolicy=None, useDispatcher=None):
def NewCollection(seq, cls=Collection):
def RegisterClassFactories(clsids, flags=None, clsctx=None):
def make_framework_support(header_file_name, interface_name, bMakeInterface=1, bMakeGateway=1):
def find_interface(interfaceName, file):
def parse_interface_info(interfaceName, file):
def FormatForAX(text):
def ProcessAXScriptException(scriptingSite, debugManager, exceptionInstance):
def trace(*args):
def RaiseAssert(scode, desc):
def trace(*args):
def GetMapiTypeName(propType):
def GetProperties(obj, propList):
def SetProperties(msg, propDict):
def SendEMAPIMail(Subject='', Message='', SendTo=None, SendCC=None, SendBCC=None, MAPIProfile=None):
def DumpRoot():
def DumpSchema():
def DumpAllObjects():
def DumpSchema2():
def DumpGC():
def DumpLocalUsers():
def DumpLocalGroups():
def do_ScpCreate(po):
def do_ScpDelete(po):
def do_SpnCreate(po):
def do_SpnRegister(po):
def do_SpnUnregister(po):
def do_UserChangePassword(po):
def FindVssProjectInfo(fullfname):
def CreateInteractiveWindowUserPreference(makeDoc=None, makeFrame=None):
def CreateInteractiveWindow(makeDoc=None, makeFrame=None):
def CreateMDIInteractiveWindow(makeDoc=None, makeFrame=None):
def DestroyInteractiveWindow():
def CloseInteractiveWindow():
def ToggleInteractiveWindow():
def ShowInteractiveWindow():
def FixArgFileName(fileName):
def OpenHelpFile(fileName, helpCmd=None, helpArg=None):
def _ListAllHelpFilesInRoot(root):
def SetHelpMenuOtherHelp(mainMenu):
def SaveWindowSize(section, rect, state=''):
def LoadWindowSize(section, state=''):
def Win32RawInput(prompt=None):
def Win32Input(prompt=None):
def HaveGoodGUI():
def CreateDefaultGUI(appClass=None):
def CheckCreateDefaultGUI():
def GetDebugger():
def IsOnPythonPath(path):
def GetPackageModuleName(fileName):
def GetActiveView():
def GetActiveEditorDocument():
def GetActiveFileName(bAutoSave=1):
def ImportFile():
def CheckFile():
def LocatePythonFile(fileName, bBrowseIfDir=1):
def Browse(ob=__main__):
def BrowseMDI(ob=__main__):
def dllFromDll(dllid):
def GetSimpleInput(prompt, defValue='', title=None):
def MakeControlClass(controlClass, name=None):
def MakeControlInstance(controlClass, name=None):
def Connect(rasEntryName, numRetries=5):
def copy(args):
def dir(args):
def run(args):
def delete(args):
def FileExists(fname):
def IsPackageDir(path, packageName, knownFileName):
def IsDebug():
def FindPackagePath(packageName, knownFileName, searchPaths):
def FindAppPath(appName, knownFileName, searchPaths):
def FindPythonExe(exeAlias, possibleRealNames, searchPaths):
def QuotedFileName(fname):
def LocateFileName(fileNamesString, searchPaths):
def LocatePath(fileName, searchPaths):
def LocateOptionalPath(fileName, searchPaths):
def LocateOptionalFileName(fileName, searchPaths=None):
def LocatePythonCore(searchPaths):
def FindRegisterPackage(packageName, knownFile, searchPaths, registryAppName=None):
def FindRegisterApp(appName, knownFiles, searchPaths):
def FindRegisterPythonExe(exeAlias, searchPaths, actualFileNames=None):
def SetupCore(searchPaths):
def RegisterShellInfo(searchPaths):
def GenerateFrozenResource(rc_name, output_name, h_name=None):
def deprecated(func, name='Unknown'):
def utcnow():
def now():
def GetTZCapabilities():
def resolveMUITimeZone(spec):
def AddSourceToRegistry(appName, msgDLL=None, eventLogType='Application', eventLogFlags=None):
def RemoveSourceFromRegistry(appName, eventLogType='Application'):
def ReportEvent(appName, eventID, eventCategory=0, eventType=win32evtlog.EVENTLOG_ERROR_TYPE, strings=None, data=None, sid=None):
def FormatMessage(eventLogRecord, logType='Application'):
def SafeFormatMessage(eventLogRecord, logType=None):
def byte_to_int(b):
def WaitForServiceStatus(serviceName, status, waitSecs, machine=None):
def RestartService(serviceName, args=None, waitSeconds=30, machine=None):
def HandleCommandLine(cls, serviceClassString=None, argv=None, customInstallOptions='', customOptionHandler=None):
def FindPerformanceAttributesByName(instanceName, object=None, counter=None, format=win32pdh.PDH_FMT_LONG, machine=None, bRefresh=0):
def int2long(val):
def GetRootKey():
def GetRegistryDefaultValue(subkey, rootkey=None):
def SetRegistryDefaultValue(subKey, value, rootkey=None):
def BuildDefaultPythonKey():
def RegisterPythonExe(exeFullPath, exeAlias=None, exeAppPath=None):
def GetRegisteredExe(exeAlias):
def UnregisterPythonExe(exeAlias):
def RegisterNamedPath(name, path):
def UnregisterNamedPath(name):
def GetRegisteredNamedPath(name):
def RegisterModule(modName, modPath):
def UnregisterModule(modName):
def GetRegisteredHelpFile(helpDesc):
def RegisterHelpFile(helpFile, helpPath, helpDesc=None, bCheckFile=1):
def UnregisterHelpFile(helpFile, helpDesc=None):
def RegisterCoreDLL(coredllName=None):
def RegisterFileExtensions(defPyIcon, defPycIcon, runCommand):
def CreateUser():
def UserEnum():
def GroupEnum():
def LocalGroupEnum():
def ServerEnum():
def LocalGroup(uname=None):
def GetInfo(userName=None):
def SetInfo(userName=None):
def SetComputerInfo():
def desktop_name_dlgproc(hwnd, msg, wparam, lparam):
def get_new_desktop_name(parent_hwnd):
def new_icon(hdesk, desktop_name):
def create_desktop(desktop_name, start_explorer=1):
def icon_wndproc(hwnd, msg, wp, lp):
def logonUser(loginString):
def run(cmd, mSec=None, stdin=None, stdout=None, stderr=None, **kw):
def connect(connstr, timeout=30):
def Date(year, month, day):
def Time(hour, minute, second):
def Timestamp(year, month, day, hour, minute, second):
def DateFromTicks(ticks):
def TimeFromTicks(ticks):
def TimestampFromTicks(ticks):
def Binary(aString):
def _ifconfig_getnode():
def _arp_getnode():
def _lanscan_getnode():
def _netstat_getnode():
def _ipconfig_getnode():
def _netbios_getnode():
def _unixdll_getnode():
def _windll_getnode():
def _random_getnode():
def getnode():
def uuid1(node=None, clock_seq=None):
def uuid3(namespace, name):
def uuid4():
def uuid5(namespace, name):
def unquote(s):
def quote(s):
def parseaddr(address):
def dump_address_pair(pair):
def parsedate_tz(data):
def parsedate(data):
def mktime_tz(data):
def formatdate(timeval=None):
def _keep_alive(x, memo):
def whichmodule(func, funcname):
def encode_long(x):
def decode_long(data):
def open(filename, mode='rb', encoding=None, errors='strict', buffering=1):
def EncodedFile(file, data_encoding, file_encoding=None, errors='strict'):
def getencoder(encoding):
def getdecoder(encoding):
def getincrementalencoder(encoding):
def getincrementaldecoder(encoding):
def getreader(encoding):
def getwriter(encoding):
def iterencode(iterator, encoding, errors='strict', **kwargs):
def iterdecode(iterator, encoding, errors='strict', **kwargs):
def make_identity_dict(rng):
def make_encoding_map(decoding_map):
def namedtuple(typename, field_names, verbose=False, rename=False):
def what(filename):
def whathdr(filename):
def is_zipfile(filename):
def _EndRecData64(fpin, offset, endrec):
def _EndRecData(fpin):
def initlog(*allargs):
def dolog(fmt, *args):
def nolog(*allargs):
def parse(fp=None, environ=os.environ, keep_blank_values=0, strict_parsing=0):
def parse_qs(qs, keep_blank_values=0, strict_parsing=0):
def parse_qsl(qs, keep_blank_values=0, strict_parsing=0):
def parse_multipart(fp, pdict):
def parse_header(line):
def test(environ=os.environ):
def print_environ(environ=os.environ):
def print_form(form):
def print_directory():
def print_environ_usage():
def escape(s, quote=None):
def _calc_julian_from_U_or_W(year, week_of_year, day_of_week, week_starts_Mon):
def _strptime(data_string, format='%a DCSP %b DCSP %d DCSP %H:%M:%S DCSP %Y'):
def lower(s):
def upper(s):
def swapcase(s):
def strip(s):
def lstrip(s):
def rstrip(s):
def split(s, sep=None, maxsplit=0):
def join(words, sep=' DCSP '):
def index(s, *args):
def rindex(s, *args):
def count(s, *args):
def find(s, *args):
def rfind(s, *args):
def atof(s):
def atoi(*args):
def atol(*args):
def ljust(s, width):
def rjust(s, width):
def center(s, width):
def zfill(x, width):
def expandtabs(s, tabsize=8):
def translate(s, table, deletions=''):
def capitalize(s):
def capwords(s, sep=None):
def maketrans(fromstr, tostr):
def replace(s, old, new, maxsplit=0):
def _compile(pathname, timestamp):
def _os_bootstrap():
def _os_path_isdir(pathname):
def _timestamp(pathname):
def compile_command(source, filename='<input>', symbol='single'):
def libc_ver(executable=sys.executable, lib='', version='', chunksize=2048):
def _dist_try_harder(distname, version, id):
def linux_distribution(distname='', version='', id='', supported_dists=_supported_dists, full_distribution_name=1):
def dist(distname='', version='', id='', supported_dists=_supported_dists):
def popen(cmd, mode='r', bufsize=None):
def _norm_version(version, build=''):
def _syscmd_ver(system='', release='', version='', supported_platforms=('win32', 'win16', 'dos', 'os2')):
def _mac_ver_gestalt():
def mac_ver(release='', versioninfo=('', '', ''), machine=''):
def java_ver(release='', vendor='', vminfo=('', '', ''), osinfo=('', '', '')):
def system_alias(system, release, version):
def _platform(*args):
def _node(default=''):
def _follow_symlinks(filepath):
def _syscmd_uname(option, default=''):
def _syscmd_file(target, default=''):
def architecture(executable=sys.executable, bits='', linkage=''):
def uname():
def system():
def node():
def release():
def version():
def machine():
def processor():
def _sys_version(sys_version=None):
def python_implementation():
def python_version():
def python_version_tuple():
def python_branch():
def python_revision():
def python_build():
def python_compiler():
def platform(aliased=0, terse=0):
def add_func_stats(target, source):
def add_callers(target, source):
def count_calls(callers):
def getcaps():
def listmailcapfiles():
def readmailcapfile(fp):
def parseline(line):
def parsefield(line, i, n):
def findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=[]):
def quoteaddr(addr):
def quotedata(data):
def hex_encode(input, errors='strict'):
def hex_decode(input, errors='strict'):
def normalize_encoding(encoding):
def base64_encode(input, errors='strict'):
def base64_decode(input, errors='strict'):
def uu_encode(input, errors='strict', filename='<data>', mode=438):
def uu_decode(input, errors='strict'):
def zlib_encode(input, errors='strict'):
def zlib_decode(input, errors='strict'):
def bz2_encode(input, errors='strict'):
def bz2_decode(input, errors='strict'):
def segregate(str):
def selective_len(str, max):
def selective_find(str, char, index, pos):
def insertion_unsort(str, extended):
def generate_generalized_integer(N, bias):
def generate_integers(baselen, deltas):
def decode_generalized_number(extended, extpos, bias, errors):
def insertion_sort(base, extended, errors):
def quopri_encode(input, errors='strict'):
def quopri_decode(input, errors='strict'):
def readmodule(module, path=None):
def readmodule_ex(module, path=None):
def _readmodule(module, path, inpackage=None):
def choose_boundary():
def decode(input, output, encoding):
def encode(input, output, encoding):
def print_list(extracted_list, file=None):
def format_list(extracted_list):
def print_tb(tb, limit=None, file=None):
def format_tb(tb, limit=None):
def extract_tb(tb, limit=None):
def print_exception(etype, value, tb, limit=None, file=None):
def format_exception(etype, value, tb, limit=None):
def format_exception_only(etype, value):
def _format_final_exc_line(etype, value):
def print_exc(limit=None, file=None):
def format_exc(limit=None):
def print_last(limit=None, file=None):
def print_stack(f=None, limit=None, file=None):
def format_stack(f=None, limit=None):
def extract_stack(f=None, limit=None):
def tb_lineno(tb):
def resolve_dotted_attribute(obj, attr, allow_dotted_names=True):
def list_public_methods(obj):
def remove_duplicates(lst):
def needsquoting(c, quotetabs, header):
def quote(c):
def encode(input, output, quotetabs, header=0):
def decode(input, output, header=0):
def ishex(c):
def unhex(s):
def rectangle(win, uly, ulx, lry, lrx):
def wrapper(func, *args, **kwds):
def tokenize(readline, tokeneater=printtoken):
def untokenize(iterable):
def generate_tokens(readline):
def normcase(s):
def isabs(s):
def join(a, *p):
def splitdrive(p):
def splitunc(p):
def split(p):
def basename(p):
def dirname(p):
def islink(path):
def ismount(path):
def walk(top, func, arg):
def expanduser(path):
def expandvars(path):
def normpath(path):
def relpath(path, start=curdir):
def cmp(f1, f2, shallow=1):
def cmpfiles(a, b, common, shallow=1):
def open(filename, flag='c', protocol=None, writeback=False):
def _lock_file(f, dotlock=True):
def _unlock_file(f):
def _create_carefully(path):
def _create_temporary(path):
def _sync_flush(f):
def _sync_close(f):
def wrap_info(info):
def start_debugger(rpchandler, gui_adap_oid):
def start_remote_debugger(rpcclt, pyshell):
def close_remote_debugger(rpcclt):
def coding_spec(str):
def expand_substates(states):
def _parse_sequence(sequence):
def MultiCallCreator(widget):
def get_arg_text(ob):
def runningAsOSXApp():
def isCarbonAquaTk(root):
def tkVersionWarning(root):
def addOpenEventSupport(root, flist):
def overrideRootMenu(root, flist):
def setupApp(root, flist):
def any(name, alternates):
def extended_linecache_checkcache(filename=None, orig_checkcache=linecache.checkcache):
def main(del_exitfunc=False):
def cleanup_traceback(tb, exclude):
def exit():
def listicons(icondir=ICONDIR):
def _sphinx_version():
def _find_module(fullname, path=None):
def unix_getpass(prompt='Password: DCSP ', stream=None):
def win_getpass(prompt='Password: DCSP ', stream=None):
def getuser():
def reindent(src, indent):
def _template_func(setup, func):
def timeit(stmt='pass', setup='pass', timer=default_timer, number=default_number):
def repeat(stmt='pass', setup='pass', timer=default_timer, repeat=default_repeat, number=default_number):
def main(args=None):
def localcontext(ctx=None):
def _dec_from_triple(sign, coefficient, exponent, special=False):
def _normalize(op1, op2, prec=0):
def _nbits(n, correction={'0': 4, '1': 3, '2': 2, '3': 2, '4': 1, '5': 1, '6': 1, '7': 1, '8': 0, '9': 0, 'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0}):
def _sqrt_nearest(n, a):
def _rshift_nearest(x, shift):
def _div_nearest(a, b):
def _ilog(x, M, L=8):
def _dlog10(c, e, p):
def _dlog(c, e, p):
def _iexp(x, M, L=8):
def _dexp(c, e, p):
def _dpower(xc, xe, yc, ye, p):
def _log10_lb(c, correction={'1': 100, '2': 70, '3': 53, '4': 40, '5': 31, '6': 23, '7': 16, '8': 10, '9': 5}):
def _convert_other(other, raiseit=False, allow_float=False):
def _parse_format_specifier(format_spec, _localeconv=None):
def _format_align(sign, body, spec):
def _group_lengths(grouping):
def _insert_thousands_sep(digits, spec, min_width=1):
def _format_sign(is_negative, spec):
def _format_number(is_negative, intpart, fracpart, exp, spec):
def _parse_makefile(filename, vars=None):
def _init_posix(vars):
def _init_non_posix(vars):
def parse_config_h(fp, vars=None):
def get_config_h_filename():
def get_scheme_names():
def get_path_names():
def get_paths(scheme=_get_default_scheme(), vars=None, expand=True):
def get_path(name, scheme=_get_default_scheme(), vars=None, expand=True):
def get_config_vars(*args):
def get_config_var(name):
def get_platform():
def new(key, msg=None, digestmod=None):
def skip(reason):
def skipIf(condition, reason):
def skipUnless(condition, reason):
def sorted_list_difference(expected, actual):
def unorderable_list_difference(expected, actual, ignore_duplicate=False):
def _count_diff_all_purpose(actual, expected):
def _ordered_count(iterable):
def _count_diff_hashable(actual, expected):
def _isnotsuite(test):
def _slotnames(cls):
def add_extension(module, name, code):
def remove_extension(module, name, code):
def run(statement, filename=None, sort=(-1)):
def runctx(statement, globals, locals, filename=None, sort=(-1)):
def askcolor(color=None, **options):
def nametofont(name):
def families(root=None):
def names(root=None):
def askopenfilename(**options):
def asksaveasfilename(**options):
def askopenfilenames(**options):
def askopenfile(mode='r', **options):
def askopenfiles(mode='r', **options):
def asksaveasfile(mode='w', **options):
def askdirectory(**options):
def config_dict(filename):
def readconfig(cfgdict):
def __methodDict(cls, _dict):
def __methods(cls):
def __forwardmethods(fromClass, toClass, toPart, exclude=()):
def Screen():
def _getpen():
def _getscreen():
def write_docstringdict(filename='turtle_docstringdict'):
def read_docstrings(lang):
def getmethparlist(ob):
def _turtle_docrevise(docstr):
def _screen_docrevise(docstr):
def test():
def showinfo(title=None, message=None, **options):
def showwarning(title=None, message=None, **options):
def showerror(title=None, message=None, **options):
def askquestion(title=None, message=None, **options):
def askokcancel(title=None, message=None, **options):
def askyesno(title=None, message=None, **options):
def askyesnocancel(title=None, message=None, **options):
def askretrycancel(title=None, message=None, **options):
def _flatten(tuple):
def _cnfmerge(cnfs):
def NoDefaultRoot():
def _tkerror(err):
def _exit(code='0'):
def mainloop(n=0):
def getboolean(s):
def OptionName(widget):
def get_tests_modules(basepath=this_dir_path, gui=True, packages=None):
def get_tests(text=True, gui=True, packages=None):
def simulate_mouse_click(widget, x, y):
def _format_optdict(optdict, script=False, ignore=None):
def _format_mapdict(mapdict, script=False):
def _format_elemcreate(etype, script=False, *args, **kw):
def _format_layoutlist(layout, indent=0, indent_size=2):
def _script_from_settings(settings):
def _dict_from_tcltuple(ttuple, cut_minus=True):
def _list_from_statespec(stuple):
def _list_from_layouttuple(ltuple):
def _val_or_dict(options, func, *args):
def _convert_stringval(value):
def tclobjs_to_py(adict):
def setup_master(master=None):
def askinteger(title, prompt, **kw):
def askfloat(title, prompt, **kw):
def askstring(title, prompt, **kw):
def read_uint1(f):
def read_uint2(f):
def read_int4(f):
def read_stringnl(f, decode=True, stripquotes=True):
def read_stringnl_noescape_pair(f):
def read_string4(f):
def read_string1(f):
def read_unicodestringnl(f):
def read_unicodestring4(f):
def read_decimalnl_short(f):
def read_decimalnl_long(f):
def read_floatnl(f):
def read_float8(f):
def read_long1(f):
def read_long4(f):
def genops(pickle):
def optimize(p):
def dis(pickle, out=None, memo=None, indentlevel=4):
def wrap(text, width=70, **kwargs):
def fill(text, width=70, **kwargs):
def dedent(text):
def open(file, flag=None, mode=438):
def simplegeneric(func):
def walk_packages(path=None, prefix='', onerror=None):
def iter_modules(path=None, prefix=''):
def get_importer(path_item):
def iter_importers(fullname=''):
def get_loader(module_or_name):
def find_loader(fullname):
def extend_path(path, name):
def get_data(package, resource):
def binhex(inp, out):
def hexbin(inp, out):
def encode(in_file, out_file, name=None, mode=None):
def decode(in_file, out_file=None, mode=None, quiet=0):
def test():
def _bdecode(s):
def fix_eols(s):
def formataddr(pair):
def getaddresses(fieldvalues):
def formatdate(timeval=None, localtime=False, usegmt=False):
def make_msgid(idstring=None):
def unquote(str):
def decode_rfc2231(s):
def encode_rfc2231(s, charset=None, language=None):
def decode_params(params):
def message_from_string(s, *args, **kws):
def message_from_file(fp, *args, **kws):
def walk(self):
def body_line_iterator(msg, decode=False):
def typed_subpart_iterator(msg, maintype='text', subtype=None):
def _structure(msg, fp=None, level=0, include_default=False):
def parsedate_tz(data):
def parsedate(data):
def mktime_tz(data):
def quote(str):
def add_charset(charset, header_enc=None, body_enc=None, output_charset=None):
def add_alias(alias, canonical):
def add_codec(charset, codecname):
def decode_header(header):
def make_header(decoded_seq, maxlinelen=None, header_name=None, continuation_ws=' DCSP '):
def _whatsnd(data):
def encode_base64(msg):
def encode_quopri(msg):
def encode_7or8bit(msg):
def header_quopri_check(c):
def body_quopri_check(c):
def header_quopri_len(s):
def body_quopri_len(str):
def unquote(s):
def header_encode(header, charset='iso-8859-1', keep_eols=False, maxlinelen=76, eol=NL):
def encode(body, binary=False, maxlinelen=76, eol=NL):
def decode(encoded, eol=NL):
def _unquote_match(match):
def header_decode(s):
def _formatparam(param, value=None, quote=True):
def base64_len(s):
def header_encode(header, charset='iso-8859-1', keep_eols=False, maxlinelen=76, eol=NL):
def encode(s, binary=True, maxlinelen=76, eol=NL):
def decode(s, convert_eols=None):
def makedirs(name, mode=511):
def removedirs(name):
def renames(old, new):
def walk(top, topdown=True, onerror=None, followlinks=False):
def execl(file, *args):
def execle(file, *args):
def execlp(file, *args):
def execlpe(file, *args):
def execvp(file, args):
def execvpe(file, args, env):
def getenv(key, default=None):
def insort_right(a, x, lo=0, hi=None):
def bisect_right(a, x, lo=0, hi=None):
def insort_left(a, x, lo=0, hi=None):
def bisect_left(a, x, lo=0, hi=None):
def heappush(heap, item):
def heappop(heap):
def heapreplace(heap, item):
def heappushpop(heap, item):
def heapify(x):
def nlargest(n, iterable):
def nsmallest(n, iterable):
def merge(*iterables):
def nsmallest(n, iterable, key=None):
def nlargest(n, iterable, key=None):
def warnpy3k(message, category=None, stacklevel=1):
def _show_warning(message, category, filename, lineno, file=None, line=None):
def formatwarning(message, category, filename, lineno, line=None):
def filterwarnings(action, message='', category=Warning, module='', lineno=0, append=0):
def simplefilter(action, category=Warning, lineno=0, append=0):
def resetwarnings():
def warn(message, category=None, stacklevel=1):
def run(statement, filename=None, sort=(-1)):
def runctx(statement, globals, locals, filename=None, sort=(-1)):
def cert_time_to_seconds(cert_time):
def DER_cert_to_PEM_cert(der_cert_bytes):
def PEM_cert_to_DER_cert(pem_cert_string):
def get_server_certificate(addr, ssl_version=PROTOCOL_SSLv3, ca_certs=None):
def sslwrap_simple(sock, keyfile=None, certfile=None):
def reset():
def listdir(path):
def annotate(head, list):
def encode_basestring(s):
def py_encode_basestring_ascii(s):
def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, **kw):
def dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, **kw):
def load(fp, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
def py_scanstring(s, end, encoding=None, strict=True, _b=BACKSLASH, _m=STRINGCHUNK.match):
def change_sequence(seq, action, seqno=_Unspecified, cond=_Unspecified):
def contextmanager(func):
@contextmanager DCNL def nested(*managers):
def open(file, mode=u'r', buffering=(-1), encoding=None, errors=None, newline=None, closefd=True):
def _match_abbrev(s, wordmap):
def check(file):
def extract(s):
def unexpo(intpart, fraction, expo):
def roundfrac(intpart, fraction, digs):
def fix(x, digs):
def sci(x, digs):
def test():
def abs__file__():
def removeduppaths():
def addbuilddir():
def _init_pathinfo():
def addpackage(sitedir, name, known_paths):
def addsitedir(sitedir, known_paths=None):
def check_enableusersite():
def getuserbase():
def getusersitepackages():
def addusersitepackages(known_paths):
def getsitepackages():
def addsitepackages(known_paths):
def setBEGINLIBPATH():
def setquit():
def setcopyright():
def aliasmbcs():
def setencoding():
def execsitecustomize():
def execusercustomize():
def isleap(year):
def leapdays(y1, y2):
def weekday(year, month, day):
def monthrange(year, month):
def format(cols, colwidth=_colwidth, spacing=_spacing):
def formatstring(cols, colwidth=_colwidth, spacing=_spacing):
def timegm(tuple):
def lwp_cookie_str(cookie):
def parse(source, filename='<unknown>', mode='exec'):
def literal_eval(node_or_string):
def dump(node, annotate_fields=True, include_attributes=False):
def copy_location(new_node, old_node):
def fix_missing_locations(node):
def increment_lineno(node, n=1):
def iter_fields(node):
def iter_child_nodes(node):
def get_docstring(node, clean=True):
def walk(node):
def reduce_tree(node, parent=None):
def get_characteristic_subpattern(subpatterns):
def rec_test(sequence, test_func):
def tokenize_wrapper(input):
def pattern_convert(grammar, raw_node_info):
def tokenize(readline, tokeneater=printtoken):
def _get_normal_name(orig_enc):
def detect_encoding(readline):
def untokenize(iterable):
def generate_tokens(readline):
def load_grammar(gt='Grammar.txt', gp=None, save=True, force=False, logger=None):
def _newer(a, b):
def Assign(target, source):
def Name(name, prefix=None):
def Attr(obj, attr):
def Comma():
def Dot():
def ArgList(args, lparen=LParen(), rparen=RParen()):
def Call(func_name, args=None, prefix=None):
def Newline():
def BlankLine():
def Subscript(index_node):
def String(string, prefix=None):
def ListComp(xp, fp, it, test=None):
def FromImport(package_name, name_leafs):
def is_tuple(node):
def is_list(node):
def attr_chain(obj, attr):
def in_special_context(node):
def is_probably_builtin(node):
def find_indentation(node):
def find_root(node):
def does_tree_import(package, name, node):
def is_import(node):
def touch_import(package, name, node):
def find_binding(name, node, package=None):
def _is_import_binding(node, name, package=None):
def get_refactorer(fixer_pkg='lib2to3', fixers=None, options=None):
def diff_texts(a, b, filename):
def main(fixer_pkg, args=None):
def has_metaclass(parent):
def fixup_parse_tree(cls_node):
def fixup_simple_stmt(parent, i, stmt_node):
def fixup_indent(suite):
def traverse_imports(names):
def get_all_fix_names(fixer_pkg, remove_prefix=True):
def _get_head_types(pat):
def _get_headnode_dict(fixer_list):
def get_fixers_from_package(pkg_name):
def convert(gr, raw_node):
def generate_matches(patterns, nodes):
def get_close_matches(word, possibilities, n=3, cutoff=0.6):
def _count_leading(line, ch):
def IS_LINE_JUNK(line, pat=re.compile('\\s*#?\\s*$').match):
def IS_CHARACTER_JUNK(ch, ws=' DCSP  DCTB '):
def _format_range_unified(start, stop):
def unified_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n'):
def _format_range_context(start, stop):
def context_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n'):
def ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK):
def _mdiff(fromlines, tolines, context=None, linejunk=None, charjunk=IS_CHARACTER_JUNK):
def restore(delta, which):
def make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler):
def _formatparam(param, value=None, quote=1):
def guess_scheme(environ):
def application_uri(environ):
def request_uri(environ, include_query=1):
def shift_path_info(environ):
def setup_testing_defaults(environ):
def is_hop_by_hop(header_name):
def validator(application):
def _url_collapse_path_split(path):
def nobody_uid():
def executable(path):
def test(condition, true, false):
def c2py(plural):
def _iterdump(connection):
def time2isoz(t=None):
def time2netscape(t=None):
def http2time(text):
def iso2time(text):
def unmatched(match):
def split_header_words(header_values):
def join_header_words(lists):
def parse_ns_headers(ns_headers):
def is_HDN(text):
def domain_match(A, B):
def liberal_is_HDN(text):
def user_domain_match(A, B):
def request_host(request):
def eff_request_host(request):
def request_path(request):
def escape_path(path):
def reach(h):
def is_third_party(request):
def deepvalues(mapping):
def guess_type(url, strict=True):
def guess_all_extensions(type, strict=True):
def guess_extension(type, strict=True):
def add_type(type, ext, strict=True):
def compile_dir(dir, maxlevels=10, ddir=None, force=0, rx=None, quiet=0):
def compile_file(fullname, ddir=None, force=0, rx=None, quiet=0):
def compile_path(skip_curdir=1, maxlevels=0, force=0, quiet=0):
def expand_args(args, flist):
def main():
def isabs(s):
def split(s):
def splitdrive(p):
def islink(s):
def lexists(path):
def expandvars(path):
def expanduser(path):
def normpath(s):
def walk(top, func, arg):
def abspath(path):
def url2pathname(pathname):
def pathname2url(pathname):
def pathdirs():
def getdoc(object):
def splitdoc(doc):
def classname(object, modname):
def isdata(object):
def replace(text, *pairs):
def cram(text, maxlen):
def stripid(text):
def _split_list(s, predicate):
def visiblename(name, all=None, obj=None):
def classify_class_attrs(object):
def ispackage(path):
def synopsis(filename, cache={}):
def importfile(path):
def safeimport(path, forceload=0, cache={}):
def pager(text):
def getpager():
def plain(text):
def pipepager(text, cmd):
def tempfilepager(text, cmd):
def ttypager(text):
def plainpager(text):
def describe(thing):
def locate(path, forceload=0):
def resolve(thing, forceload=0):
def render_doc(thing, title='Python DCSP Library DCSP Documentation: DCSP %s', forceload=0):
def doc(thing, title='Python DCSP Library DCSP Documentation: DCSP %s', forceload=0):
def writedoc(thing, forceload=0):
def writedocs(dir, pkgpath='', done=None):
def apropos(key):
def gui():
def cli():
def compile(source, filename, mode, flags=None, dont_inherit=None):
def generateArgList(arglist):
def findOp(node):
def set_filename(filename, tree):
def is_future(stmt):
def order_blocks(start_block, exit_block):
def twobyte(val):
def setraw(fd, when=TCSAFLUSH):
def setcbreak(fd, when=TCSAFLUSH):
def pprint(object, stream=None, indent=1, width=80, depth=None):
def pformat(object, indent=1, width=80, depth=None):
def saferepr(object):
def isreadable(object):
def isrecursive(object):
def prepare(data):
def RawValue(typecode_or_type, *args):
def RawArray(typecode_or_type, size_or_initializer):
def Value(typecode_or_type, *args, **kwds):
def Array(typecode_or_type, size_or_initializer, **kwds):
def Manager():
def Pipe(duplex=True):
def cpu_count():
def freeze_support():
def get_logger():
def log_to_stderr(level=None):
def allow_connection_pickling():
def Lock():
def RLock():
def Condition(lock=None):
def Semaphore(value=1):
def BoundedSemaphore(value=1):
def Event():
def Queue(maxsize=0):
def JoinableQueue(maxsize=0):
def Pool(processes=None, initializer=None, initargs=(), maxtasksperchild=None):
def RawValue(typecode_or_type, *args):
def RawArray(typecode_or_type, size_or_initializer):
def Value(typecode_or_type, *args, **kwds):
def Array(typecode_or_type, size_or_initializer, **kwds):
def get_logger():
def log_to_stderr(level=None):
def _run_finalizers(minpriority=None):
def is_exiting():
def current_process():
def active_children():
def arbitrary_address(family):
def address_type(address):
def Client(address, family=None, authkey=None):
def SocketClient(address):
def dispatch(c, id, methodname, args=(), kwds={}):
def all_methods(obj):
def public_methods(obj):
def RebuildProxy(func, token, serializer, kwds):
def MakeProxyType(name, exposed, _cache={}):
def AutoProxy(token, serializer, manager=None, authkey=None, exposed=None, incref=True):
def _purge():
def fnmatch(name, pat):
def filter(names, pat):
def fnmatchcase(name, pat):
def translate(pat):
def ismodule(object):
def isclass(object):
def ismethod(object):
def ismethoddescriptor(object):
def isdatadescriptor(object):
def isfunction(object):
def isgeneratorfunction(object):
def isgenerator(object):
def istraceback(object):
def isframe(object):
def iscode(object):
def isbuiltin(object):
def isroutine(object):
def isabstract(object):
def getmembers(object, predicate=None):
def classify_class_attrs(cls):
def getmro(cls):
def indentsize(line):
def getdoc(object):
def cleandoc(doc):
def getfile(object):
def getmoduleinfo(path):
def getmodulename(path):
def getsourcefile(object):
def getabsfile(object, _filename=None):
def getmodule(object, _filename=None):
def findsource(object):
def getcomments(object):
def getblock(lines):
def getsourcelines(object):
def getsource(object):
def walktree(classes, children, parent):
def getclasstree(classes, unique=0):
def getargs(co):
def getargspec(func):
def getargvalues(frame):
def strseq(object, convert, join=joinseq):
def formatargspec(args, varargs=None, varkw=None, defaults=None, formatarg=str, formatvarargs=(lambda name: ('*' + name)), formatvarkw=(lambda name: ('**' + name)), formatvalue=(lambda value: ('=' + repr(value))), join=joinseq):
def formatargvalues(args, varargs, varkw, locals, formatarg=str, formatvarargs=(lambda name: ('*' + name)), formatvarkw=(lambda name: ('**' + name)), formatvalue=(lambda value: ('=' + repr(value))), join=joinseq):
def getcallargs(func, *positional, **named):
def getframeinfo(frame, context=1):
def getlineno(frame):
def getouterframes(frame, context=1):
def getinnerframes(tb, context=1):
def stack(context=1):
def trace(context=1):
def urlopen(url, data=None, proxies=None):
def localhost():
def thishost():
def ftperrors():
def noheaders():
def toBytes(url):
def unwrap(url):
def splittype(url):
def splithost(url):
def splituser(host):
def splitpasswd(user):
def splitport(host):
def splitnport(host, defport=(-1)):
def splitquery(url):
def splittag(url):
def splitattr(url):
def splitvalue(attr):
def unquote(s):
def unquote_plus(s):
def quote(s, safe='/'):
def quote_plus(s, safe=''):
def urlencode(query, doseq=0):
def getproxies_environment():
def proxy_bypass_environment(host):
def _resolve_name(name, package, level):
def import_module(name, package=None):
def glob(pathname):
def iglob(pathname):
def _run_exitfuncs():
def register(func, *targs, **kargs):
def interact(banner=None, readfunc=None, local=None):
def request_host(request):
def build_opener(*handlers):
def _parse_proxy(proxy):
def randombytes(n):
def parse_keqv_list(l):
def parse_http_list(s):
def mime_decode(line):
def mime_decode_header(line):
def unmimify_part(ifile, ofile, decode_base64=0):
def unmimify(infile, outfile, decode_base64=0):
def mime_encode(line, header):
def mime_encode_header(line):
def mimify_part(ifile, ofile, is_mime):
def mimify(infile, outfile):
def register(name, klass, instance=None, update_tryorder=1):
def get(using=None):
def _synthesize(browser, update_tryorder=1):
def _iscommand(cmd):
def test():
def fileConfig(fname, defaults=None, disable_existing_loggers=True):
def _resolve(name):
def _create_formatters(cp):
def _install_handlers(cp, formatters):
def _install_loggers(cp, handlers, disable_existing_loggers):
def dictConfig(config):
def listen(port=DEFAULT_LOGGING_CONFIG_PORT):
def stopListening():
def currentframe():
def getLevelName(level):
def addLevelName(level, levelName):
def _acquireLock():
def _releaseLock():
def makeLogRecord(dict):
def _removeHandlerRef(wr):
def _addHandlerRef(handler):
def setLoggerClass(klass):
def getLoggerClass():
def basicConfig(**kwargs):
def getLogger(name=None):
def critical(msg, *args, **kwargs):
def error(msg, *args, **kwargs):
def exception(msg, *args):
def warning(msg, *args, **kwargs):
def info(msg, *args, **kwargs):
def debug(msg, *args, **kwargs):
def log(level, msg, *args, **kwargs):
def disable(level):
def shutdown(handlerList=_handlerList):
def _showwarning(message, category, filename, lineno, file=None, line=None):
def captureWarnings(capture):
def normcase(s):
def join(a, *p):
def splitunc(p):
def basename(p):
def dirname(p):
def ismount(path):
def normpath(path):
def abspath(path):
def checkfuncname(b, frame):
def effective(file, line, frame):
def openpty():
def master_open():
def _open_terminal():
def slave_open(tty_name):
def fork():
def _writen(fd, data):
def _read(fd):
def _copy(master_fd, master_read=_read, stdin_read=_read):
def spawn(argv, master_read=_read, stdin_read=_read):
def update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES):
def wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES):
def total_ordering(cls):
def cmp_to_key(mycmp):
def open(name, mode='r', bufsize=(-1)):
def fileopen(file):
def create_string_buffer(init, size=None):
def CFUNCTYPE(restype, *argtypes, **kw):
def string_at(ptr, size=(-1)):
def dylib_info(filename):
def ensure_utf8(s):
def dyld_image_suffix_search(iterator, env=None):
def dyld_find(name, executable_path=None, env=None):
def framework_find(fn, executable_path=None, env=None):
def framework_info(filename):
def is_resource_enabled(resource):
def requires(resource, msg=None):
def get_tests(package, mask, verbosity, exclude=()):
def test_with_refcounts(runner, verbosity, testcase):
def _other_endian(typ):
def clearcache():
def getlines(filename, module_globals=None):
def checkcache(filename=None):
def updatecache(filename, module_globals=None):
def call(*popenargs, **kwargs):
def check_call(*popenargs, **kwargs):
def check_output(*popenargs, **kwargs):
def list2cmdline(seq):
def exists(path):
def isfile(path):
def isdir(s):
def getsize(filename):
def getmtime(filename):
def getatime(filename):
def getctime(filename):
def commonprefix(m):
def _splitext(p, sep, altsep, extsep):
def getparser(use_datetime=0):
def dumps(params, methodname=None, methodresponse=None, encoding=None, allow_none=0):
def loads(data, use_datetime=0):
def gzip_encode(data):
def gzip_decode(data):
def __py_new(name, string=''):
def __hash_new(name, string=''):
def stn(s, length):
def nts(s):
def nti(s):
def itn(n, digits=8, format=DEFAULT_FORMAT):
def uts(s, encoding, errors):
def calc_chksums(buf):
def copyfileobj(src, dst, length=None):
def filemode(mode):
def is_tarfile(name):
def b64encode(s, altchars=None):
def b64decode(s, altchars=None):
def standard_b64encode(s):
def standard_b64decode(s):
def urlsafe_b64encode(s):
def urlsafe_b64decode(s):
def b32encode(s):
def b32decode(s, casefold=False, map01=None):
def b16encode(s):
def b16decode(s, casefold=False):
def encode(input, output):
def decode(input, output):
def encodestring(s):
def decodestring(s):
def test():
def format(percent, value, grouping=False, monetary=False, *additional):
def format_string(f, val, grouping=False):
def currency(val, symbol=True, grouping=False, international=False):
def str(val):
def atof(string, func=float):
def atoi(str):
def normalize(localename):
def _parse_localename(localename):
def _build_localename(localetuple):
def getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):
def getlocale(category=LC_CTYPE):
def setlocale(category, locale=None):
def resetlocale(category=LC_ALL):
def _print_locale():
def modname(path):
def fullmodname(path):
def find_lines_from_code(code, strs):
def find_lines(code, strs):
def find_strings(filename):
def find_executable_linenos(filename):
def input(files=None, inplace=0, backup='', bufsize=0, mode='r', openhook=None):
def close():
def nextfile():
def filename():
def lineno():
def filelineno():
def fileno():
def isfirstline():
def isstdin():
def capwords(s, sep=None):
def maketrans(fromstr, tostr):
def lower(s):
def upper(s):
def swapcase(s):
def strip(s, chars=None):
def lstrip(s, chars=None):
def rstrip(s, chars=None):
def split(s, sep=None, maxsplit=(-1)):
def rsplit(s, sep=None, maxsplit=(-1)):
def join(words, sep=' DCSP '):
def index(s, *args):
def rindex(s, *args):
def count(s, *args):
def find(s, *args):
def rfind(s, *args):
def atof(s):
def atoi(s, base=10):
def atol(s, base=10):
def ljust(s, width, *args):
def rjust(s, width, *args):
def center(s, width, *args):
def zfill(x, width):
def expandtabs(s, tabsize=8):
def translate(s, table, deletions=''):
def capitalize(s):
def replace(s, old, new, maxreplace=(-1)):
def parse150(resp):
def parse227(resp):
def parse229(resp, peer):
def parse257(resp):
def print_line(line):
def ftpcp(source, sourcename, target, targetname='', type='I'):
def test():
def gcd(a, b):
def dump_file(filename, head=None):
def show_formats():
def show_formats():
def safe_name(name):
def safe_version(version):
def to_filename(name):
def customize_compiler(compiler):
def get_default_compiler(osname=None, platform=None):
def show_compilers():
def new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0):
def gen_preprocess_options(macros, include_dirs):
def gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries):
def _get_gid(name):
def _get_uid(name):
def make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0, owner=None, group=None):
def make_zipfile(base_name, base_dir, verbose=0, dry_run=0):
def check_archive_formats(formats):
def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None):
def get_python_version():
def get_python_inc(plat_specific=0, prefix=None):
def get_python_lib(plat_specific=0, standard_lib=0, prefix=None):
def customize_compiler(compiler):
def get_config_h_filename():
def get_makefile_filename():
def parse_config_h(fp, g=None):
def parse_makefile(fn, g=None):
def expand_makefile_vars(s, vars):
def _init_posix():
def _init_nt():
def _init_os2():
def get_config_vars(*args):
def get_config_var(name):
def setup(**attrs):
def run_setup(script_name, script_args=None, stop_after='run'):
def get_platform():
def convert_path(pathname):
def change_root(new_root, pathname):
def check_environ():
def subst_vars(s, local_vars):
def grok_environment_error(exc, prefix='error: DCSP '):
def split_quoted(s):
def execute(func, args, msg=None, verbose=0, dry_run=0):
def strtobool(val):
def byte_compile(py_files, optimize=0, force=0, prefix=None, base_dir=None, verbose=1, dry_run=0, direct=None):
def rfc822_escape(header):
def _get_unpatched(cls):
def wrap_text(text, width):
def translate_longopt(opt):
def fix_help_options(options):
def findall(dir=os.curdir):
def glob_to_re(pattern):
def translate_pattern(pattern, anchor=1, prefix=None, is_regex=0):
def _copy_file_contents(src, dst, buffer_size=(16 * 1024)):
def copy_file(src, dst, preserve_mode=1, preserve_times=1, update=0, link=None, verbose=1, dry_run=0):
def move_file(src, dst, verbose=1, dry_run=0):
def write_file(filename, contents):
def get_build_version():
def normalize_and_reduce_paths(paths):
def removeDuplicates(variable):
def find_vcvarsall(version):
def query_vcvarsall(version, arch='x86'):
def read_keys(base, key):
def read_values(base, key):
def get_build_version():
def get_build_architecture():
def normalize_and_reduce_paths(paths):
def splitUp(pred):
def split_provision(value):
def _darwin_compiler_fixup(compiler_so, cc_args):
def get_msvcr():
def check_config_h():
def get_versions():
def spawn(cmd, search_path=1, verbose=0, dry_run=0):
def _nt_quote_args(args):
def find_executable(executable, path=None):
def newer(source, target):
def newer_pairwise(sources, targets):
def newer_group(sources, target, missing='error'):
def mkpath(name, mode=511, verbose=1, dry_run=0):
def create_tree(base_dir, files, mode=511, verbose=1, dry_run=0):
def copy_tree(src, dst, preserve_mode=1, preserve_times=1, preserve_symlinks=0, update=0, verbose=1, dry_run=0):
def _build_cmdtuple(path, cmdtuples):
def remove_tree(directory, verbose=1, dry_run=0):
def ensure_relative(path):
def check_config_h():
def get_versions():
def is_unavailable_exception(e):
def sample_func(v):
def iterfunc(seqn):
def itermulti(seqn):
def escapestr(text, ampm):
@contextlib.contextmanager DCNL def _ignore_deprecated_imports(ignore=True):
def import_module(name, deprecated=False):
def _save_and_remove_module(name, orig_modules):
def _save_and_block_module(name, orig_modules):
def import_fresh_module(name, fresh=(), blocked=(), deprecated=False):
def get_attribute(obj, name):
def forget(modname):
def is_resource_enabled(resource):
def requires(resource, msg=None):
def find_unused_port(family=socket.AF_INET, socktype=socket.SOCK_STREAM):
def bind_port(sock, host=HOST):
@contextlib.contextmanager DCNL def temp_cwd(name='tempcwd', quiet=False):
def findfile(file, here=__file__, subdir=None):
def sortdict(dict):
def make_bad_fd():
def _filterwarnings(filters, quiet=False):
@contextlib.contextmanager DCNL def check_warnings(*filters, **kwargs):
@contextlib.contextmanager DCNL def check_py3k_warnings(*filters, **kwargs):
@contextlib.contextmanager DCNL def transient_internet(resource_name, timeout=30.0, errnos=()):
@contextlib.contextmanager DCNL def captured_output(stream_name):
def captured_stdout():
def gc_collect():
def bigmemtest(minsize, memuse, overhead=(5 * _1M)):
def bigaddrspacetest(f):
def cpython_only(test):
def check_impl_detail(**guards):
def _run_suite(suite):
def run_unittest(*classes):
def run_doctest(module, verbosity=None):
def reap_threads(func):
def reap_children():
def py3k_bytes(b):
def args_from_interpreter_flags():
def strip_python_stderr(stderr):
def ignore_deprecation_warnings(func):
def genblock(seed, length, step=1024, generator=random):
def choose_lines(source, number, seed=None, generator=random):
def truediv(a, b):
def has_sound(sound):
def _get_cscript_path():
def _have_soundcard():
def getimage(name):
def get_qualified_path(name):
def test_password_manager(self):
def add_ordered_mock_handlers(opener, meth_spec):
def randfloats(n):
def tabulate(r):
def main():
def assert_python_ok(*args, **env_vars):
def assert_python_failure(*args, **env_vars):
def check_encoding(encoding):
def error(xml):
def xpath_tokenizer(p):
def xmltoolkit62():
def xmltoolkit63():
def eggs(x, y):
def testimage(name):
def to_ulps(x):
def ulps_check(expected, got, ulps=20):
def acc_check(expected, got, rel_err=2e-15, abs_err=5e-323):
def parse_mtestfile(fname):
def parse_testfile(fname):
def main(tests=None, testdir=None, verbose=0, quiet=False, exclude=False, single=False, randomize=False, fromfile=None, findleaks=False, use_resources=None, trace=False, coverdir='coverage', runleaks=False, huntrleaks=False, verbose2=False, print_slow=False, random_seed=None, use_mp=None, verbose3=False, forever=False, header=False):
def findtests(testdir=None, stdtests=STDTESTS, nottests=NOTTESTS):
def runtest(test, verbose, quiet, huntrleaks=False, use_resources=None):
def dash_R(the_module, test, indirect_test, huntrleaks):
def printlist(x, width=70, indent=4):
def exit_subprocess():
def verbose_print(arg):
def _interact(cookiejar, url, set_cookie_hdrs, hdr_name):
def gcd(a, b):
def isint(x):
def isnum(x):
def isRat(x):
@staticmethod DCNL def PythonPartial(func, *args, **keywords):
def capture(*args, **kw):
def signature(part):
def consts(t):
def dump(co):
@contextmanager DCNL def warnings_state(module):
def fix_ext_py(filename):
def my_file_and_modname():
def func2():
def _ctrl_handler(sig):
@contextlib.contextmanager DCNL def uncache(*names):
@contextlib.contextmanager DCNL def import_state(**kwargs):
def compare_generic_iter(make_it, match):
def server(evt, serv, dataq=None):
def run_pydoc(module_name, *args):
def get_pydoc_html(module):
def get_pydoc_text(module):
def print_diffs(text1, text2):
def _default_chunk_size():
def have_python_version(name):
def R(seqn):
def L(seqn):
def onearg(x):
def errfunc(*args):
def gen3():
def isEven(x):
def isOdd(x):
def take(n, seq):
def fact(n):
def R(seqn):
def L(seqn):
def dump_tokens(s):
def decistmt(s):
def Nonfunction(*args):
def test_main(arith=False, verbose=None, todo_tests=None, debug=None):
def strtod(s, mant_dig=53, min_exp=(-1021), max_exp=1024):
def try_address(host, port=0, family=socket.AF_INET):
def isTipcAvailable():
def dbcheck(exprstr, globals=None, locals=None):
def countcalls(counts):
def window_funcs(stdscr):
def module_funcs(stdscr):
def R(seqn):
def L(seqn):
def powerset(U):
def cube(n):
def linegraph(G):
def faces(G):
def signal_alarm(n):
def hexescape(char):
def wr_long(f, x):
def compile(file, cfile=None, dfile=None, doraise=False):
def main(args=None):
def _extract_future_flags(globs):
def _normalize_module(module, depth=2):
def _indent(s, indent=4):
def _exception_traceback(exc_info):
def _ellipsis_match(want, got):
def _comment_line(line):
def testmod(m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False):
def testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser(), encoding=None):
def run_docstring_examples(f, globs, verbose=False, name='NoName', compileflags=None, optionflags=0):
def set_unittest_reportflags(flags):
def DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, **options):
def DocFileSuite(*paths, **kw):
def script_from_examples(s):
def testsource(module, name):
def debug_src(src, pm=False, globs=None):
def debug_script(src, pm=False, globs=None):
def debug(module, name, pm=False):
def copy(x):
def deepcopy(x, memo=None, _nil=[]):
def _keep_alive(x, memo):
def url2pathname(url):
def pathname2url(p):
def open(filename, flags=db.DB_CREATE, mode=432, filetype=db.DB_HASH, dbenv=None, dbname=None):
def contains_metastrings(s):
def DeadlockWrap(function, *_args, **_kwargs):
def getstatus(file):
def getoutput(cmd):
def getstatusoutput(cmd):
def test():
def dis(x=None):
def distb(tb=None):
def disassemble(co, lasti=(-1)):
def findlabels(code):
def findlinestarts(code):
def _test():
def get_long_be(s):
def gethdr(fp):
def printhdr(file):
def make_parser(parser_list=[]):
def __dict_replace(s, d):
def escape(data, entities={}):
def unescape(data, entities={}):
def quoteattr(data, entities={}):
def prepare_input_source(source, base=''):
def parse(file, namespaces=True):
def parseString(string, namespaces=True):
def parseFragment(file, context, namespaces=True):
def parseFragmentString(string, context, namespaces=True):
def makeBuilder(options):
def registerDOMImplementation(name, factory):
def _good_enough(dom, features):
def getDOMImplementation(name=None, features=()):
def _write_data(writer, data):
def _clone_node(node, deep, newOwnerDocument):
def parse(file, parser=None, bufsize=None):
def parseString(string, parser=None):
def open(filename, mode='rb', compresslevel=9):
def copyfileobj(fsrc, fdst, length=(16 * 1024)):
def copyfile(src, dst):
def copymode(src, dst):
def copystat(src, dst):
def copy(src, dst):
def copy2(src, dst):
def ignore_patterns(*patterns):
def copytree(src, dst, symlinks=False, ignore=None):
def rmtree(path, ignore_errors=False, onerror=None):
def move(src, dst):
def _get_gid(name):
def _get_uid(name):
def _make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0, owner=None, group=None, logger=None):
def _make_zipfile(base_name, base_dir, verbose=0, dry_run=0, logger=None):
def get_archive_formats():
def register_archive_format(name, function, extra_args=None, description=''):
def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None, logger=None):
def abstractmethod(funcobj):
def quote(file):
def Bastion(object, filter=(lambda name: (name[:1] != '_')), name=None, bastionclass=BastionClass):
def _test():
def _run_code(code, run_globals, init_globals=None, mod_name=None, mod_fname=None, mod_loader=None, pkg_name=None):
def _run_module_code(code, init_globals=None, mod_name=None, mod_fname=None, mod_loader=None, pkg_name=None):
def _run_module_as_main(mod_name, alter_argv=True):
def run_module(mod_name, init_globals=None, run_name=None, alter_sys=False):
def _get_importer(path_name):
def run_path(path_name, init_globals=None, run_name=None):
def Internaldate2tuple(resp):
def Int2AP(num):
def ParseFlags(resp):
def Time2Internaldate(date_time):
def test(HandlerClass=BaseHTTPRequestHandler, ServerClass=HTTPServer, protocol='HTTP/1.0'):
def _candidate_tempdir_list():
def _get_default_tempdir():
def _get_candidate_names():
def _mkstemp_inner(dir, pre, suf, flags):
def gettempprefix():
def gettempdir():
def mkstemp(suffix='', prefix=template, dir=None, text=False):
def mkdtemp(suffix='', prefix=template, dir=None):
def mktemp(suffix='', prefix=template, dir=None):
def NamedTemporaryFile(mode='w+b', bufsize=(-1), suffix='', prefix=template, dir=None, delete=True):
def match(pattern, string, flags=0):
def search(pattern, string, flags=0):
def sub(pattern, repl, string, count=0, flags=0):
def subn(pattern, repl, string, count=0, flags=0):
def split(pattern, string, maxsplit=0, flags=0):
def findall(pattern, string, flags=0):
def compile(pattern, flags=0):
def purge():
def template(pattern, flags=0):
def escape(pattern):
def getfqdn(name=''):
def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT, source_address=None):
def getopt(args, shortopts, longopts=[]):
def gnu_getopt(args, shortopts, longopts=[]):
def start_new_thread(function, args, kwargs={}):
def exit():
def get_ident():
def allocate_lock():
def stack_size(size=None):
def interrupt_main():
def test_jpeg(h, f):
def test_exif(h, f):
def test_gif(h, f):
def test_tiff(h, f):
def test_rgb(h, f):
def test_pbm(h, f):
def test_pgm(h, f):
def test_ppm(h, f):
def test_rast(h, f):
def test_xbm(h, f):
def open(file, flag='r', mode=438):
def readPlist(pathOrFile):
def writePlist(rootObject, pathOrFile):
def readPlistFromString(data):
def writePlistToString(rootObject):
def readPlistFromResource(path, restype='plst', resid=0):
def writePlistToResource(rootObject, path, restype='plst', resid=0):
def reset():
def lookup(name, frame, locals):
def scanvars(reader, frame, locals):
def html(einfo, context=5):
def text(einfo, context=5):
def enable(display=1, logdir=None, context=5, format='html'):
def whichdb(filename):
def clear_cache():
def urlparse(url, scheme='', allow_fragments=True):
def urlsplit(url, scheme='', allow_fragments=True):
def urlunparse(data):
def urlunsplit(data):
def urljoin(base, url, allow_fragments=True):
def urldefrag(url):
def unquote(s):
def parse_qs(qs, keep_blank_values=0, strict_parsing=0):
def parse_qsl(qs, keep_blank_values=0, strict_parsing=0):
def normcase(s):
def isabs(s):
def join(a, *p):
def split(p):
def splitdrive(p):
def basename(p):
def dirname(p):
def islink(path):
def lexists(path):
def samefile(f1, f2):
def sameopenfile(fp1, fp2):
def samestat(s1, s2):
def ismount(path):
def walk(top, func, arg):
def expanduser(path):
def expandvars(path):
def normpath(path):
def abspath(path):
def realpath(filename):
def _resolve_link(path):
def relpath(path, start=curdir):
def _ifconfig_getnode():
def _ipconfig_getnode():
def _netbios_getnode():
def _unixdll_getnode():
def _windll_getnode():
def _random_getnode():
def getnode():
def uuid1(node=None, clock_seq=None):
def uuid3(namespace, name):
def uuid4():
def uuid5(namespace, name):
def unquote(s):
def quote(s):
def parseaddr(address):
def dump_address_pair(pair):
def parsedate_tz(data):
def parsedate(data):
def mktime_tz(data):
def formatdate(timeval=None):
def _keep_alive(x, memo):
def whichmodule(func, funcname):
def encode_long(x):
def decode_long(data):
def open(filename, mode='rb', encoding=None, errors='strict', buffering=1):
def EncodedFile(file, data_encoding, file_encoding=None, errors='strict'):
def getencoder(encoding):
def getdecoder(encoding):
def getincrementalencoder(encoding):
def getincrementaldecoder(encoding):
def getreader(encoding):
def getwriter(encoding):
def iterencode(iterator, encoding, errors='strict', **kwargs):
def iterdecode(iterator, encoding, errors='strict', **kwargs):
def make_identity_dict(rng):
def make_encoding_map(decoding_map):
def namedtuple(typename, field_names, verbose=False, rename=False):
def what(filename):
def whathdr(filename):
def is_zipfile(filename):
def _EndRecData64(fpin, offset, endrec):
def _EndRecData(fpin):
def initlog(*allargs):
def dolog(fmt, *args):
def nolog(*allargs):
def parse(fp=None, environ=os.environ, keep_blank_values=0, strict_parsing=0):
def parse_qs(qs, keep_blank_values=0, strict_parsing=0):
def parse_qsl(qs, keep_blank_values=0, strict_parsing=0):
def parse_multipart(fp, pdict):
def parse_header(line):
def test(environ=os.environ):
def print_environ(environ=os.environ):
def print_form(form):
def print_directory():
def print_environ_usage():
def escape(s, quote=None):
def _calc_julian_from_U_or_W(year, week_of_year, day_of_week, week_starts_Mon):
def _strptime(data_string, format='%a DCSP %b DCSP %d DCSP %H:%M:%S DCSP %Y'):
def lower(s):
def upper(s):
def swapcase(s):
def strip(s):
def lstrip(s):
def rstrip(s):
def split(s, sep=None, maxsplit=0):
def join(words, sep=' DCSP '):
def index(s, *args):
def rindex(s, *args):
def count(s, *args):
def find(s, *args):
def rfind(s, *args):
def atof(s):
def atoi(*args):
def atol(*args):
def ljust(s, width):
def rjust(s, width):
def center(s, width):
def zfill(x, width):
def expandtabs(s, tabsize=8):
def translate(s, table, deletions=''):
def capitalize(s):
def capwords(s, sep=None):
def maketrans(fromstr, tostr):
def replace(s, old, new, maxsplit=0):
def _compile(pathname, timestamp):
def _os_bootstrap():
def _os_path_isdir(pathname):
def _timestamp(pathname):
def compile_command(source, filename='<input>', symbol='single'):
def libc_ver(executable=sys.executable, lib='', version='', chunksize=2048):
def _dist_try_harder(distname, version, id):
def linux_distribution(distname='', version='', id='', supported_dists=_supported_dists, full_distribution_name=1):
def dist(distname='', version='', id='', supported_dists=_supported_dists):
def popen(cmd, mode='r', bufsize=None):
def _norm_version(version, build=''):
def _syscmd_ver(system='', release='', version='', supported_platforms=('win32', 'win16', 'dos', 'os2')):
def _win32_getvalue(key, name, default=''):
def win32_ver(release='', version='', csd='', ptype=''):
def _mac_ver_gestalt():
def mac_ver(release='', versioninfo=('', '', ''), machine=''):
def java_ver(release='', vendor='', vminfo=('', '', ''), osinfo=('', '', '')):
def system_alias(system, release, version):
def _platform(*args):
def _node(default=''):
def _follow_symlinks(filepath):
def _syscmd_uname(option, default=''):
def _syscmd_file(target, default=''):
def architecture(executable=sys.executable, bits='', linkage=''):
def uname():
def system():
def node():
def release():
def version():
def machine():
def processor():
def _sys_version(sys_version=None):
def python_implementation():
def python_version():
def python_version_tuple():
def python_branch():
def python_revision():
def python_build():
def python_compiler():
def platform(aliased=0, terse=0):
def add_func_stats(target, source):
def add_callers(target, source):
def count_calls(callers):
def getcaps():
def listmailcapfiles():
def readmailcapfile(fp):
def parseline(line):
def parsefield(line, i, n):
def findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=[]):
def quoteaddr(addr):
def quotedata(data):
def hex_encode(input, errors='strict'):
def hex_decode(input, errors='strict'):
def normalize_encoding(encoding):
def base64_encode(input, errors='strict'):
def base64_decode(input, errors='strict'):
def uu_encode(input, errors='strict', filename='<data>', mode=438):
def uu_decode(input, errors='strict'):
def zlib_encode(input, errors='strict'):
def zlib_decode(input, errors='strict'):
def bz2_encode(input, errors='strict'):
def bz2_decode(input, errors='strict'):
def segregate(str):
def selective_len(str, max):
def selective_find(str, char, index, pos):
def insertion_unsort(str, extended):
def generate_generalized_integer(N, bias):
def generate_integers(baselen, deltas):
def decode_generalized_number(extended, extpos, bias, errors):
def insertion_sort(base, extended, errors):
def quopri_encode(input, errors='strict'):
def quopri_decode(input, errors='strict'):
def readmodule(module, path=None):
def readmodule_ex(module, path=None):
def _readmodule(module, path, inpackage=None):
def choose_boundary():
def decode(input, output, encoding):
def encode(input, output, encoding):
def print_list(extracted_list, file=None):
def format_list(extracted_list):
def print_tb(tb, limit=None, file=None):
def format_tb(tb, limit=None):
def extract_tb(tb, limit=None):
def print_exception(etype, value, tb, limit=None, file=None):
def format_exception(etype, value, tb, limit=None):
def format_exception_only(etype, value):
def _format_final_exc_line(etype, value):
def print_exc(limit=None, file=None):
def format_exc(limit=None):
def print_last(limit=None, file=None):
def print_stack(f=None, limit=None, file=None):
def format_stack(f=None, limit=None):
def extract_stack(f=None, limit=None):
def tb_lineno(tb):
def resolve_dotted_attribute(obj, attr, allow_dotted_names=True):
def list_public_methods(obj):
def remove_duplicates(lst):
def needsquoting(c, quotetabs, header):
def quote(c):
def encode(input, output, quotetabs, header=0):
def decode(input, output, header=0):
def ishex(c):
def unhex(s):
def reloadAll(prefix=None, debug=False):
def reload(module, debug=False, lists=False, dicts=False):
def axis(name=None, cols=None, values=None, units=None):
def renderSymbol(symbol, size, pen, brush, device=None):
def init_viewbox():
def addGradientListToDocstring():
def getPixmap(name):
def winTime():
def unixTime():
def setConfigOptions(**opts):
def getConfigOption(opt):
def exit():
def plot(*args, **kargs):
def image(*args, **kargs):
def dbg(*args, **kwds):
def assertImageApproved(image, standardFile, message=None, **kwargs):
def assertImageMatch(im1, im2, minCorr=None, pxThreshold=50.0, pxCount=(-1), maxPxDiff=None, avgPxDiff=None, imgDiff=None):
def saveFailedTest(data, expect, filename):
def makePng(img):
def makeDiffImage(im1, im2):
def getTestDataRepo():
def gitStatus(path):
def gitCommitId(path, ref):
def runSubprocess(command, return_code=False, **kwargs):
def scenegraphState(view, name):
def resizeWindow(win, w, h, timeout=2.0):
def testMatrix():
def qObjectTree(root):
def mkrefs(*objs):
def register(fn):
def unregister(fn):
def setTracebackClearing(clear=True):
def generateUi(opts):
def downsample(data, n, axis=0, xvals='subsample'):
def applyFilter(data, b, a, padding=100, bidir=True):
def besselFilter(data, cutoff, order=1, dt=None, btype='low', bidir=True):
def butterworthFilter(data, wPass, wStop=None, gPass=2.0, gStop=20.0, order=1, dt=None, btype='low', bidir=True):
def mode(data, bins=None):
def modeFilter(data, window=500, step=None, bins=None):
def denoise(data, radius=2, threshold=4):
def adaptiveDetrend(data, x=None, threshold=3.0):
def histogramDetrend(data, window=500, bins=50, threshold=3.0, offsetOnly=False):
def concatenateColumns(data):
def suggestDType(x):
def evalUnits(unitStr):
def formatUnits(units):
def simplify(units):
def listdir(path):
def isdir(path):
def splitZip(path):
def check_param_types(param, types, map_func, init, objs, keys):
def siScale(x, minVal=1e-25, allowUnicode=True):
def siFormat(x, precision=3, suffix='', space=True, error=None, minVal=1e-25, allowUnicode=True):
def siParse(s, regex=FLOAT_REGEX):
def siEval(s, typ=float, regex=FLOAT_REGEX):
def siApply(val, siprefix):
def mkColor(*args):
def mkBrush(*args, **kwds):
def mkPen(*args, **kargs):
def hsvColor(hue, sat=1.0, val=1.0, alpha=1.0):
def colorTuple(c):
def colorStr(c):
def intColor(index, hues=9, values=1, maxValue=255, minValue=150, maxHue=360, minHue=0, sat=255, alpha=255):
def glColor(*args, **kargs):
def makeArrowPath(headLen=20, tipAngle=20, tailLen=20, tailWidth=3, baseAngle=0):
def eq(a, b):
def affineSliceCoords(shape, origin, vectors, axes):
def affineSlice(data, shape, origin, vectors, axes, order=1, returnCoords=False, **kargs):
def interpolateArray(data, x, default=0.0, order=1):
def subArray(data, offset, shape, stride):
def transformToArray(tr):
def transformCoordinates(tr, coords, transpose=False):
def solve3DTransform(points1, points2):
def solveBilinearTransform(points1, points2):
def rescaleData(data, scale, offset, dtype=None, clip=None):
def applyLookupTable(data, lut):
def makeRGBA(*args, **kwds):
def makeARGB(data, lut=None, levels=None, scale=None, useRGBA=False):
def makeQImage(imgData, alpha=None, copy=True, transpose=True):
def imageToArray(img, copy=False, transpose=True):
def colorToAlpha(data, color):
def gaussianFilter(data, sigma):
def downsample(data, n, axis=0, xvals='subsample'):
def arrayToQPath(x, y, connect='all'):
def isocurve(data, level, connected=False, extendToEdge=False, path=False):
def traceImage(image, values, smooth=0.5):
def isosurface(data, level):
def invertQTransform(tr):
def pseudoScatter(data, spacing=None, shuffle=True, bidir=False):
def toposort(deps, nodes=None, seen=None, stack=None, depth=0):
def cprint(stream, *args, **kwds):
def cout(*args):
def cerr(*args):
def ftrace(func):
def warnOnException(func):
def printExc(msg='', indent=4, prefix='|'):
def printTrace(msg='', indent=4, prefix='|'):
def formatException(exctype, value, tb, skip=0):
def printException(exctype, value, traceback):
def listObjs(regex='Q', typ=None):
def findRefPath(startObj, endObj, maxLen=8, restart=True, seen={}, path=None, ignore=None):
def objString(obj):
def refPathString(chain):
def objectSize(obj, ignore=None, verbose=False, depth=0, recursive=False):
def profile(code, name='profile_run', sort='cumulative', num=30):
def get_all_objects():
def lookup(oid, objects=None):
def describeObj(obj, depth=4, path=None, ignore=None):
def typeStr(obj):
def searchRefs(obj, *args):
def allFrameObjs():
def findObj(regex):
def listRedundantModules():
def walkQObjectTree(obj, counts=None, verbose=False, depth=0):
def qObjectReport(verbose=False):
def listQThreads():
def pretty(data, indent=''):
def cmpToKey(mycmp):
def generateDebianChangelog(package, logFile, version, maintainer):
def checkStyle():
def printFlakeOutput(text):
def unitTests():
def checkMergeSize(sourceBranch=None, targetBranch=None, sourceRepo=None, targetRepo=None):
def getInitVersion(pkgroot):
def gitCommit(name):
def getGitVersion(tagPrefix):
def getVersionStrings(pkg):
def shell(cmd):
def ssh(host, cmd):
def createFile(finalSize=2000000000):
def wlPen(wl):
def read_lines(in_file):
def remove_lines(lines, remove=('[[back DCSP to DCSP top]', '<a DCSP class="mk-toclify"')):
def dashify_headline(line):
def tag_and_collect(lines, id_tag=True, back_links=False, exclude_h=None):
def positioning_headlines(headlines):
def create_toc(headlines, hyperlink=True, top_link=False, no_toc_header=False):
def build_markdown(toc_headlines, body, spacer=0, placeholder=None):
def output_markdown(markdown_cont, output_file):
def markdown_toclify(input_file, output_file=None, github=False, back_to_top=False, nolink=False, no_toc_header=False, spacer=0, placeholder=None, exclude_h=None):
def sortByValue(d):
def tailLines(filename, linesback):
def redirect(to):
def dict_to_sequence(d):
def get_netrc_auth(url, raise_errors=False):
def guess_filename(obj):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def unquote_unreserved(uri):
def requote_uri(uri):
def address_in_network(ip, net):
def dotted_netmask(mask):
def is_ipv4_address(string_ip):
def is_valid_cidr(string_network):
@contextlib.contextmanager DCNL def set_environ(env_name, value):
def should_bypass_proxies(url, no_proxy):
def get_environ_proxies(url, no_proxy=None):
def select_proxy(url, proxies):
def default_user_agent(name='python-requests'):
def default_headers():
def parse_header_links(value):
def guess_json_utf(data):
def prepend_scheme_if_needed(url, new_scheme):
def get_auth_from_url(url):
def check_header_validity(header):
def urldefragauth(url):
def rewind_body(prepared_request):
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):
def merge_cookies(cookiejar, cookies):
def _basic_auth_str(username, password):
def dispatch_hook(key, hooks, hook_data, **kwargs):
def _implementation():
def info():
def main():
def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):
def session():
def to_native_string(string, encoding='ascii'):
def unicode_is_ascii(u_string):
def request(method, url, **kwargs):
def get(url, params=None, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, json=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):
@pytest.mark.skipif((sys.version_info[:2] != (2, 6)), reason='Only DCSP run DCSP on DCSP Python DCSP 2.6') DCNL def test_system_ssl_py26():
@pytest.mark.skipif((sys.version_info < (2, 7)), reason='Only DCSP run DCSP on DCSP Python DCSP 2.7+') DCNL def test_system_ssl():
def test_idna_without_version_attribute(mocker):
def test_idna_with_version_attribute(mocker):
@pytest.mark.parametrize('data', ((('a', 'b'), ('c', 'd')), (('c', 'd'), ('a', 'b')), (('a', 'b'), ('c', 'd'), ('e', 'f')))) DCNL def test_data_argument_accepts_tuples(data):
@pytest.mark.parametrize('uri, DCSP expected', (('http://example.com/fiz?buz=%25ppicture', 'http://example.com/fiz?buz=%25ppicture'), ('http://example.com/fiz?buz=%ppicture', 'http://example.com/fiz?buz=%25ppicture'))) DCNL def test_requote_uri_with_unquoted_percents(uri, expected):
@pytest.mark.parametrize('url, DCSP expected, DCSP proxies', (('hTTp://u:p@Some.Host/path', 'http://some.host.proxy', http_proxies), ('hTTp://u:p@Other.Host/path', 'http://http.proxy', http_proxies), ('hTTp:///path', 'http://http.proxy', http_proxies), ('hTTps://Other.Host', None, http_proxies), ('file:///etc/motd', None, http_proxies), ('hTTp://u:p@Some.Host/path', 'socks5://some.host.proxy', all_proxies), ('hTTp://u:p@Other.Host/path', 'socks5://http.proxy', all_proxies), ('hTTp:///path', 'socks5://http.proxy', all_proxies), ('hTTps://Other.Host', 'socks5://http.proxy', all_proxies), ('http://u:p@other.host/path', 'http://http.proxy', mixed_proxies), ('http://u:p@some.host/path', 'http://some.host.proxy', mixed_proxies), ('https://u:p@other.host/path', 'socks5://http.proxy', mixed_proxies), ('https://u:p@some.host/path', 'socks5://http.proxy', mixed_proxies), ('https://', 'socks5://http.proxy', mixed_proxies), ('file:///etc/motd', 'socks5://http.proxy', all_proxies))) DCNL def test_select_proxies(url, expected, proxies):
@pytest.mark.parametrize('url, DCSP expected', (('http://192.168.0.1:5000/', True), ('http://192.168.0.1/', True), ('http://172.16.1.1/', True), ('http://172.16.1.1:5000/', True), ('http://localhost.localdomain:5000/v1.0/', True), ('http://172.16.1.12/', False), ('http://172.16.1.12:5000/', False), ('http://google.com:5000/v1.0/', False))) DCNL def test_should_bypass_proxies(url, expected, monkeypatch):
@pytest.mark.parametrize('cookiejar', (compat.cookielib.CookieJar(), RequestsCookieJar())) DCNL def test_add_dict_to_cookiejar(cookiejar):
@pytest.mark.parametrize('url, DCSP expected', (('http://192.168.0.1:5000/', True), ('http://192.168.0.1/', True), ('http://172.16.1.1/', True), ('http://172.16.1.1:5000/', True), ('http://localhost.localdomain:5000/v1.0/', True), ('http://172.16.1.12/', False), ('http://172.16.1.12:5000/', False), ('http://google.com:5000/v1.0/', False))) DCNL def test_should_bypass_proxies_no_proxy(url, expected, monkeypatch):
@pytest.mark.skipif((os.name != 'nt'), reason='Test DCSP only DCSP on DCSP Windows') DCNL @pytest.mark.parametrize('url, DCSP expected, DCSP override', (('http://192.168.0.1:5000/', True, None), ('http://192.168.0.1/', True, None), ('http://172.16.1.1/', True, None), ('http://172.16.1.1:5000/', True, None), ('http://localhost.localdomain:5000/v1.0/', True, None), ('http://172.16.1.22/', False, None), ('http://172.16.1.22:5000/', False, None), ('http://google.com:5000/v1.0/', False, None), ('http://mylocalhostname:5000/v1.0/', True, '<local>'), ('http://192.168.0.1/', False, ''))) DCNL def test_should_bypass_proxies_win_registry(url, expected, override, monkeypatch):
@pytest.mark.parametrize('env_name, DCSP value', (('no_proxy', '192.168.0.0/24,127.0.0.1,localhost.localdomain'), ('no_proxy', None), ('a_new_key', '192.168.0.0/24,127.0.0.1,localhost.localdomain'), ('a_new_key', None))) DCNL def test_set_environ(env_name, value):
def test_set_environ_raises_exception():
def test_chunked_upload():
def test_digestauth_401_count_reset_on_redirect():
def test_digestauth_401_only_sent_once():
def test_digestauth_only_on_4xx():
def run_migrations_offline():
def run_migrations_online():
@celery.task(name='redash.tasks.cleanup_query_results') DCNL def cleanup_query_results():
@celery.task(name='redash.tasks.refresh_schemas') DCNL def refresh_schemas():
def resolve_redash_type(type_in_atsd):
def generate_rows_and_columns(csv_response):
@routes.route(org_scoped_rule('/api/queries/format'), methods=['POST']) DCNL @login_required DCNL def format_sql_query(org_slug=None):
@manager.command() DCNL @click.option('--org', 'organization', default=None, help='The DCSP organization DCSP the DCSP user DCSP belongs DCSP to DCSP (leave DCSP blank DCSP for DCSP all DCSP organizations).') DCNL def list(organization=None):
@manager.command() DCNL @click.argument('name') DCNL @click.option('--org', 'organization', default='default', help="The DCSP organization DCSP the DCSP user DCSP belongs DCSP to DCSP (leave DCSP blank DCSP for DCSP 'default').") DCNL def test(name, organization='default'):
@manager.command() DCNL @click.argument('name', default=None, required=False) DCNL @click.option('--type', default=None, help='new DCSP type DCSP for DCSP the DCSP data DCSP source') DCNL @click.option('--options', default=None, help='updated DCSP options DCSP for DCSP the DCSP data DCSP source') DCNL @click.option('--org', 'organization', default='default', help="The DCSP organization DCSP the DCSP user DCSP belongs DCSP to DCSP (leave DCSP blank DCSP for DCSP 'default').") DCNL def new(name=None, type=None, options=None, organization='default'):
@manager.command() DCNL @click.argument('name') DCNL @click.option('--org', 'organization', default='default', help="The DCSP organization DCSP the DCSP user DCSP belongs DCSP to DCSP (leave DCSP blank DCSP for DCSP 'default').") DCNL def delete(name, organization='default'):
@manager.command() DCNL @click.argument('name') DCNL @click.option('--name', 'new_name', default=None, help='new DCSP name DCSP for DCSP the DCSP data DCSP source') DCNL @click.option('--options', default=None, help='updated DCSP options DCSP for DCSP the DCSP data DCSP source') DCNL @click.option('--type', default=None, help='new DCSP type DCSP for DCSP the DCSP data DCSP source') DCNL @click.option('--org', 'organization', default='default', help="The DCSP organization DCSP the DCSP user DCSP belongs DCSP to DCSP (leave DCSP blank DCSP for DCSP 'default').") DCNL def edit(name, new_name=None, options=None, type=None, organization='default'):
@manager.command() DCNL def version():
@manager.command() DCNL def check_settings():
@manager.command() DCNL @click.argument('email', default=settings.MAIL_DEFAULT_SENDER, required=False) DCNL def send_test_mail(email=None):
@manager.command() DCNL def ipython():
@manager.command() DCNL def create_tables():
@manager.command() DCNL def drop_tables():
@manager.command() DCNL @argument('domains') DCNL def set_google_apps_domains(domains):
@manager.command() DCNL def list():
@manager.command() DCNL @option('--org', 'organization', default=None, help='The DCSP organization DCSP to DCSP limit DCSP to DCSP (leave DCSP blank DCSP for DCSP all).') DCNL def list(organization=None):
@manager.command() DCNL @argument('email') DCNL @option('--org', 'organization', default='default', help="the DCSP organization DCSP the DCSP user DCSP belongs DCSP to, DCSP (leave DCSP blank DCSP for DCSP 'default').") DCNL def grant_admin(email, organization='default'):
@manager.command() DCNL @argument('email') DCNL @argument('name') DCNL @option('--org', 'organization', default='default', help="The DCSP organization DCSP the DCSP user DCSP belongs DCSP to DCSP (leave DCSP blank DCSP for DCSP 'default').") DCNL @option('--admin', 'is_admin', is_flag=True, default=False, help='set DCSP user DCSP as DCSP admin') DCNL @option('--google', 'google_auth', is_flag=True, default=False, help='user DCSP uses DCSP Google DCSP Auth DCSP to DCSP login') DCNL @option('--password', 'password', default=None, help="Password DCSP for DCSP users DCSP who DCSP don't DCSP use DCSP Google DCSP Auth DCSP (leave DCSP blank DCSP for DCSP prompt).") DCNL @option('--groups', 'groups', default=None, help='Comma DCSP separated DCSP list DCSP of DCSP groups DCSP (leave DCSP blank DCSP for DCSP default).') DCNL def create(email, name, groups, is_admin=False, google_auth=False, password=None, organization='default'):
@manager.command() DCNL @argument('email') DCNL @option('--org', 'organization', default=None, help='The DCSP organization DCSP the DCSP user DCSP belongs DCSP to DCSP (leave DCSP blank DCSP for DCSP all DCSP organizations).') DCNL def delete(email, organization=None):
@manager.command() DCNL @argument('email') DCNL @argument('password') DCNL @option('--org', 'organization', default=None, help='The DCSP organization DCSP the DCSP user DCSP belongs DCSP to DCSP (leave DCSP blank DCSP for DCSP all DCSP organizations).') DCNL def password(email, password, organization=None):
@manager.command() DCNL @argument('email') DCNL @argument('name') DCNL @argument('inviter_email') DCNL @option('--org', 'organization', default='default', help="The DCSP organization DCSP the DCSP user DCSP belongs DCSP to DCSP (leave DCSP blank DCSP for DCSP 'default')") DCNL @option('--admin', 'is_admin', type=BOOL, default=False, help='set DCSP user DCSP as DCSP admin') DCNL @option('--groups', 'groups', default=None, help='Comma DCSP seperated DCSP list DCSP of DCSP groups DCSP (leave DCSP blank DCSP for DCSP default).') DCNL def invite(email, name, inviter_email, groups, is_admin=False, organization='default'):
@manager.command() DCNL @option('--org', 'organization', default=None, help='The DCSP organization DCSP the DCSP user DCSP belongs DCSP to DCSP (leave DCSP blank DCSP for DCSP all DCSP organizations)') DCNL def list(organization=None):
def utcnow():
def gen_query_hash(sql):
def get_saml_client():
def filter_koan_names(lines):
def names_from_file(filename):
def koans_suite(names):
def koans(filename=KOANS_FILENAME):
def filter_koan_names(lines):
def names_from_file(filename):
def koans_suite(names):
def koans(filename=KOANS_FILENAME):
@pytest.fixture() DCNL def admin_user(db):
@pytest.fixture() DCNL def admin_client(admin_user):
def test_checkout_flow(request_cart_with_item, client, shipping_method):
def test_checkout_flow_authenticated_user(authorized_client, billing_address, request_cart_with_item, customer_user, shipping_method):
def test_address_without_shipping(request_cart_with_item, client, monkeypatch):
def test_shipping_method_without_shipping(request_cart_with_item, client, monkeypatch):
def test_shipping_method_without_address(request_cart_with_item, client):
def test_summary_without_address(request_cart_with_item, client):
def test_summary_without_shipping_method(request_cart_with_item, client, monkeypatch):
def test_email_is_saved_in_order(authorized_client, billing_address, customer_user, request_cart_with_item, shipping_method):
def test_voucher_invalid(client, request_cart_with_item, shipping_method, voucher):
def test_language_is_saved_in_order(authorized_client, billing_address, customer_user, request_cart_with_item, settings, shipping_method):
@pytest.mark.integration DCNL @pytest.mark.django_db DCNL def test_view_change_order_line_quantity(admin_client, order_with_items_and_stock):
@pytest.mark.integration DCNL @pytest.mark.django_db DCNL def test_view_change_order_line_quantity_with_invalid_data(admin_client, order_with_items_and_stock):
@pytest.mark.integration DCNL @pytest.mark.django_db DCNL def test_view_split_order_line(admin_client, order_with_items_and_stock):
@pytest.mark.integration DCNL @pytest.mark.django_db DCNL @pytest.mark.parametrize(u'quantity', [0, 4]) DCNL def test_view_split_order_line_with_invalid_data(admin_client, order_with_items_and_stock, quantity):
def test_get_thumbnail_no_instance(monkeypatch):
def find_and_assign_anonymous_cart(queryset=Cart.objects.all()):
def get_or_create_anonymous_cart_from_token(token, cart_queryset=Cart.objects.all()):
def get_or_create_user_cart(user, cart_queryset=Cart.objects.all()):
def get_anonymous_cart_from_token(token, cart_queryset=Cart.objects.all()):
def get_user_cart(user, cart_queryset=Cart.objects.all()):
def get_or_create_cart_from_request(request, cart_queryset=Cart.objects.all()):
def get_cart_from_request(request, cart_queryset=Cart.objects.all()):
def get_or_create_db_cart(cart_queryset=Cart.objects.all()):
def get_or_empty_db_cart(cart_queryset=Cart.objects.all()):
def cart_counter(request):
def item_condition(item):
def item_brand(item, attributes_dict, attribute_values_dict):
def item_tax(item, discounts):
def item_google_product_category(item, category_paths):
def write_feed(file_obj):
def update_feed(file_path=FILE_PATH):
def group_models_by_index(backend, models):
def import_backend(dotted_path):
def get_model_root(model):
def get_product_images(product):
def product_json_ld(product, availability=None, attributes=None):
def choose_placeholder(size=''):
@register.simple_tag() DCNL def product_first_image(product, size, method='crop'):
def product_details(request, slug, product_id, form=None):
@load_checkout DCNL @validate_cart DCNL def login(request, checkout):
def create_order(checkout):
def get_site_settings_from_request(request):
def get_site_settings():
def get_domain():
def get_site_settings_uncached(settings_id=None):
def settings(request):
def list2string(obj):
def format_version(module, attr, call=False):
def is_installed_by_package_control():
def is_mt_res(item):
def test_handshake_protocol(message, transport):
def test_handshake_protocol_agreement(message, transport):
def test_handshake_protocol_unsupported(log, message, transport):
def build_frame(message, opcode, use_mask=False, noheader=False, is_fin=True):
def build_close_frame(code=1000, message='', noheader=False):
def _quote(str, LegalChars=_LegalChars):
def class_mock(request, q_class_name, autospec=True, **kwargs):
def cls_attr_mock(request, cls, attr_name, name=None, **kwargs):
def function_mock(request, q_function_name, **kwargs):
def initializer_mock(request, cls):
def instance_mock(request, cls, name=None, spec_set=True, **kwargs):
def loose_mock(request, name=None, **kwargs):
def method_mock(request, cls, method_name, **kwargs):
def property_mock(request, cls, prop_name, **kwargs):
def var_mock(request, q_var_name, **kwargs):
def element(cxel_str):
def xml(cxel_str):
def nsdecls(*nspfxs):
def docx_path(name):
def snippet_seq(name, offset=0, count=1024):
def snippet_text(snippet_file_name):
def test_file(name):
def test_docx(name):
def test_file(name):
@given(u'a DCSP run DCSP having DCSP mixed DCSP text DCSP content') DCNL def given_a_run_having_mixed_text_content(context):
def StyleFactory(style_elm):
def parse_xml(xml):
def register_element_cls(tag, cls):
def OxmlElement(nsptag_str, attrs=None, nsdecls=None):
def styleId_from_name(name):
def serialize_for_reading(element):
def nsdecls(*prefixes):
def nspfxmap(*nspfxs):
def qn(tag):
def lazyproperty(f):
def write_only_property(f):
def _ChunkFactory(chunk_type, stream_rdr, offset):
def _IfdEntryFactory(stream_rdr, offset):
def _MarkerFactory(marker_code, stream, offset):
def _ImageHeaderFactory(stream):
def Document(docx=None):
def _default_docx_path():
def alias(*aliases):
def lazyproperty(f):
def parse_xml(text):
def qn(tag):
def serialize_part_xml(part_elm):
def serialize_for_reading(element):
def text_of(relpath):
def underscore(value):
def g(x):
def f(x):
def f(x):
def make_meshgrid(x, y, h=0.02):
def plot_contours(ax, clf, xx, yy, **params):
def my_kernel(X, Y):
def generate_dataset():
def drop_first_component(X, y):
def generate_data(n_samples, n_features):
def dataset_fixed_cov():
def dataset_cov():
def f(x):
def autolabel(rects, n_estimators):
def heldout_score(clf, X_test, y_test):
def ricker_function(resolution, center, width):
def ricker_matrix(width, resolution, n_components):
def show_with_diff(image, reference, title):
def number_normalizer(tokens):
def most_common(d):
def recreate_image(codebook, labels, w, h):
def uniform_labelings_scores(score_func, n_samples, n_clusters_range, fixed_n_classes=None, n_runs=5, seed=42):
def build_projection_operator(l_x, n_dir):
def generate_synthetic_data():
def create_species_bunch(species_name, train, test, coverages, xgrid, ygrid):
def plot_species_distribution(species=('bradypus_variegatus_0', 'microryzomys_minutus_0')):
def retry(f, n_attempts=3):
def quotes_historical_google(symbol, date1, date2):
def index(redirects, index_map, k):
def short_name(nt_uri):
def get_redirects(redirects_filename):
def get_adjacency_matrix(redirects_filename, page_links_filename, limit=None):
def centrality_scores(X, alpha=0.85, max_iter=100, tol=1e-10):
def stream_reuters_documents(data_path=None):
def get_minibatch(doc_iter, size, pos_class=positive_class):
def iter_minibatches(doc_iter, minibatch_size):
def progress(cls_name, stats):
def plot_accuracy(x, y, x_legend):
def autolabel(rectangles):
def generate_data(case, sparse=False):
def benchmark_influence(conf):
def plot_influence(conf, mse_values, prediction_times, complexities):
def atomic_benchmark_estimator(estimator, X_test, verbose=False):
def bulk_benchmark_estimator(estimator, X_test, n_bulk_repeats, verbose):
def benchmark_estimator(estimator, X_test, n_bulk_repeats=30, verbose=False):
def generate_dataset(n_train, n_test, n_features, noise=0.1, verbose=False):
def boxplot_runtimes(runtimes, pred_type, configuration):
def benchmark(configuration):
def n_feature_influence(estimators, n_train, n_test, n_features, percentile):
def benchmark_throughputs(configuration, duration_secs=0.1):
def plot_gallery(images, titles, h, w, n_row=3, n_col=4):
def n_nonzero_columns(X):
def tokens(doc):
def token_freqs(doc):
def trim(s):
def plot_calibration_curve(est, name, fig_index):
def nudge_dataset(X, Y):
def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None, n_jobs=1, train_sizes=np.linspace(0.1, 1.0, 5)):
def plot_confusion_matrix(cm, classes, normalize=False, title='Confusion DCSP matrix', cmap=plt.cm.Blues):
def get_scipy_status():
def get_numpy_status():
def make_carousel_thumbs(app, exception):
def user_role(name, rawtext, text, lineno, inliner, options=None, content=None):
def issue_role(name, rawtext, text, lineno, inliner, options=None, content=None):
def _linkcode_resolve(domain, info, package, url_fmt, revision):
def make_linkcode_resolve(package, url_fmt):
def glr_path_static():
def python_zip(file_list, gallery_path, extension='.py'):
def list_downloadable_sources(target_dir):
def generate_zipfiles(gallery_dir):
def _get_data(url):
def get_data(url, gallery_dir):
def _select_block(str_in, start_tag, end_tag):
def _parse_dict_recursive(dict_str):
def parse_sphinx_searchindex(searchindex):
def embed_code_links(app, exception):
def get_docstring_and_rest(filename):
def split_code_and_text_blocks(source_file):
def codestr2rst(codestr, lang='python'):
def extract_thumbnail_number(text):
def extract_intro(filename):
def get_md5sum(src_file):
def md5sum_is_current(src_file):
def save_figures(image_path, fig_count, gallery_conf):
def figure_rst(figure_list, sources_dir):
def scale_image(in_fname, out_fname, max_width, max_height):
def save_thumbnail(image_path_template, src_file, gallery_conf):
def generate_dir_rst(src_dir, target_dir, gallery_conf, seen_backrefs):
def execute_code_block(code_block, example_globals, block_vars, gallery_conf):
def clean_modules():
def generate_file_rst(fname, target_dir, src_dir, gallery_conf):
def get_short_module_name(module_name, obj_name):
def identify_names(code):
def scan_used_functions(example_file, gallery_conf):
def _thumbnail_div(full_dir, fname, snippet, is_backref=False):
def write_backreferences(seen_backrefs, gallery_conf, target_dir, fname, snippet):
def jupyter_notebook_skeleton():
def directive_fun(match, directive):
def rst2md(text):
def jupyter_notebook(script_blocks):
def add_code_cell(work_notebook, code):
def add_markdown_cell(work_notebook, text):
def fill_notebook(work_notebook, script_blocks):
def save_notebook(work_notebook, write_file):
def python_to_jupyter_cli(args=None, namespace=None):
def clean_gallery_out(build_dir):
def parse_config(app):
def _prepare_sphx_glr_dirs(gallery_conf, srcdir):
def generate_gallery_rst(app):
def touch_empty_backreferences(app, what, name, obj, options, lines):
def sumarize_failing_examples(app, exception):
def setup(app):
def Command(char):
def Sequence(token):
def _ustr(obj):
def col(loc, strg):
def lineno(loc, strg):
def line(loc, strg):
def nullDebugAction(*args):
def traceParseAction(f):
def delimitedList(expr, delim=',', combine=False):
def countedArray(expr):
def matchPreviousLiteral(expr):
def matchPreviousExpr(expr):
def oneOf(strs, caseless=False, useRegex=True):
def dictOf(key, value):
def srange(s):
def matchOnlyAtCol(n):
def replaceWith(replStr):
def removeQuotes(s, l, t):
def upcaseTokens(s, l, t):
def downcaseTokens(s, l, t):
def keepOriginalText(s, startLoc, t):
def getTokensEndLoc():
def _makeTags(tagStr, xml):
def makeHTMLTags(tagStr):
def makeXMLTags(tagStr):
def withAttribute(*args, **attrDict):
def operatorPrecedence(baseExpr, opList):
def nestedExpr(opener='(', closer=')', content=None, ignoreExpr=quotedString):
def get_max_squared_sum(X):
@memory.cache DCNL def load_data(dtype=np.float32, order='C', shuffle=True, seed=0):
def nn_accuracy(X, X_embedded, k=1):
def print_outlier_ratio(y):
def _norm(x):
def _nls_subproblem(X, W, H, tol, max_iter, alpha=0.0, l1_ratio=0.0, sigma=0.01, beta=0.1):
def bench_scikit_tree_classifier(X, Y):
def bench_scikit_tree_regressor(X, Y):
@memory.cache DCNL def load_data(dtype=np.float32, order='C', random_state=13):
@memory.cache DCNL def load_data(dtype=np.float32, order='F'):
@ignore_warnings DCNL def benchmark(metrics=tuple((v for (k, v) in sorted(METRICS.items()))), formats=tuple((v for (k, v) in sorted(FORMATS.items()))), samples=1000, classes=4, density=0.2, n_times=5):
def _tabulate(results, metrics, formats):
def _plot(results, metrics, formats, title, x_ticks, x_label, format_markers=('x', '|', 'o', '+'), metric_colors=('c', 'm', 'y', 'k', 'g', 'r', 'b')):
def bench_isotonic_regression(Y):
def svd_timing(X, n_comps, n_iter, n_oversamples, power_iteration_normalizer='auto', method=None):
def norm_diff(A, norm=2, msg=True):
def _first_and_last_element(arr):
def clone(estimator, safe=True):
def _pprint(params, offset=0, printer=repr):
def is_classifier(estimator):
def is_regressor(estimator):
def _find_matching_indices(tree, bin_X, left_mask, right_mask):
def _find_longest_prefix_match(tree, bin_X, hash_size, left_masks, right_masks):
def _array_of_arrays(list_of_arrays):
def _check_weights(weights):
def _get_weights(dist, weights):
def test_lof_precomputed(random_state=42):
def _weight_func(dist):
def test_precomputed(random_state=42):
def test_radius_neighbors_boundary_handling():
def _check_params(X, metric, p, metric_params):
def _query_include_self(X, include_self):
def kneighbors_graph(X, n_neighbors, mode='connectivity', metric='minkowski', p=2, metric_params=None, include_self=False, n_jobs=1):
def radius_neighbors_graph(X, radius, mode='connectivity', metric='minkowski', p=2, metric_params=None, include_self=False, n_jobs=1):
def test_min_samples_split():
def check_min_weight_fraction_leaf(name, datasets, sparse=False):
def check_min_weight_fraction_leaf_with_min_samples_leaf(name, datasets, sparse=False):
def check_class_weights(name):
def _color_brew(n):
def export_graphviz(decision_tree, out_file=SENTINEL, max_depth=None, feature_names=None, class_names=None, label='all', filled=False, leaves_parallel=False, impurity=True, node_ids=False, proportion=False, rotate=False, rounded=False, special_characters=False, precision=3):
def build_from_c_and_cpp_files(extensions):
def maybe_cythonize_extensions(top_path, config):
@deprecated('l1_cross_distances DCSP was DCSP deprecated DCSP in DCSP version DCSP 0.18 DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP 0.20.') DCNL def l1_cross_distances(X):
def constant(x):
def linear(x):
def quadratic(x):
def absolute_exponential(theta, d):
def squared_exponential(theta, d):
def generalized_exponential(theta, d):
def pure_nugget(theta, d):
def cubic(theta, d):
def linear(theta, d):
def _check_shape(param, param_shape, name):
def _check_X(X, n_components=None, n_features=None):
@ignore_warnings(category=DeprecationWarning) DCNL def test_fit_predict():
@ignore_warnings(category=DeprecationWarning) DCNL def check_positive_definite_covars(covariance_type):
@deprecated('The DCSP function DCSP log_multivariate_normal_density DCSP is DCSP deprecated DCSP in DCSP 0.18 DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP 0.20.') DCNL def log_multivariate_normal_density(X, means, covars, covariance_type='diag'):
@deprecated('The DCSP function DCSP sample_gaussian DCSP is DCSP deprecated DCSP in DCSP 0.18 DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP 0.20. DCSP Use DCSP numpy.random.multivariate_normal DCSP instead.') DCNL def sample_gaussian(mean, covar, covariance_type='diag', n_samples=1, random_state=None):
def _log_multivariate_normal_density_diag(X, means, covars):
def _log_multivariate_normal_density_spherical(X, means, covars):
def _log_multivariate_normal_density_tied(X, means, covars):
def _log_multivariate_normal_density_full(X, means, covars, min_covar=1e-07):
def _validate_covars(covars, covariance_type, n_components):
@deprecated('The DCSP function DCSP distribute_covar_matrix_to_match_covariance_typeis DCSP deprecated DCSP in DCSP 0.18 DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP 0.20.') DCNL def distribute_covar_matrix_to_match_covariance_type(tied_cv, covariance_type, n_components):
def _covar_mstep_diag(gmm, X, responsibilities, weighted_X_sum, norm, min_covar):
def _covar_mstep_spherical(*args):
def _covar_mstep_full(gmm, X, responsibilities, weighted_X_sum, norm, min_covar):
def _covar_mstep_tied(gmm, X, responsibilities, weighted_X_sum, norm, min_covar):
def _log_dirichlet_norm(dirichlet_concentration):
def _log_wishart_norm(degrees_of_freedom, log_det_precisions_chol, n_features):
def _check_weights(weights, n_components):
def _check_means(means, n_components, n_features):
def _check_precision_positivity(precision, covariance_type):
def _check_precision_matrix(precision, covariance_type):
def _check_precisions_full(precisions, covariance_type):
def _check_precisions(precisions, covariance_type, n_components, n_features):
def _estimate_gaussian_covariances_full(resp, X, nk, means, reg_covar):
def _estimate_gaussian_covariances_tied(resp, X, nk, means, reg_covar):
def _estimate_gaussian_covariances_diag(resp, X, nk, means, reg_covar):
def _estimate_gaussian_covariances_spherical(resp, X, nk, means, reg_covar):
def _estimate_gaussian_parameters(X, resp, reg_covar, covariance_type):
def _compute_precision_cholesky(covariances, covariance_type):
def _compute_log_det_cholesky(matrix_chol, covariance_type, n_features):
def _estimate_log_gaussian_prob(X, means, precisions_chol, covariance_type):
@deprecated('The DCSP function DCSP log_normalize DCSP is DCSP deprecated DCSP in DCSP 0.18 DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP 0.20.') DCNL def log_normalize(v, axis=0):
@deprecated('The DCSP function DCSP wishart_log_det DCSP is DCSP deprecated DCSP in DCSP 0.18 DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP 0.20.') DCNL def wishart_log_det(a, b, detB, n_features):
@deprecated('The DCSP function DCSP wishart_logz DCSP is DCSP deprecated DCSP in DCSP 0.18 DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP 0.20.') DCNL def wishart_logz(v, s, dets, n_features):
def _bound_wishart(a, B, detB):
def _sym_quad_form(x, mu, A):
def _bound_state_log_lik(X, initial_bound, precs, means, covariance_type):
def get_config():
def set_config(assume_finite=None):
@_contextmanager DCNL def config_context(**new_config):
def setup_module(module):
def check_increasing(x, y):
def isotonic_regression(y, sample_weight=None, y_min=None, y_max=None, increasing=True):
def ridge_regression(X, y, alpha, sample_weight=None, solver='auto', max_iter=None, tol=0.001, verbose=0, random_state=None, return_n_iter=False, return_intercept=False):
def _alpha_grid(X, y, Xy=None, l1_ratio=1.0, fit_intercept=True, eps=0.001, n_alphas=100, normalize=False, copy_X=True):
def lasso_path(X, y, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, **params):
def enet_path(X, y, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, check_input=True, **params):
def _path_residuals(X, y, train, test, path, path_params, alphas=None, l1_ratio=1, X_order=None, dtype=None):
def make_dataset(X, y, sample_weight, random_state=None):
@deprecated('sparse_center_data DCSP was DCSP deprecated DCSP in DCSP version DCSP 0.18 DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP 0.20. DCSP Use DCSP utilities DCSP in DCSP preprocessing.data DCSP instead') DCNL def sparse_center_data(X, y, fit_intercept, normalize=False):
@deprecated('center_data DCSP was DCSP deprecated DCSP in DCSP version DCSP 0.18 DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP 0.20. DCSP Use DCSP utilities DCSP in DCSP preprocessing.data DCSP instead') DCNL def center_data(X, y, fit_intercept, normalize=False, copy=True, sample_weight=None):
def _preprocess_data(X, y, fit_intercept, normalize=False, copy=True, sample_weight=None, return_mean=False):
def _rescale_data(X, y, sample_weight):
def _pre_fit(X, y, Xy, precompute, normalize, fit_intercept, copy):
def _lasso_stability_path(X, y, mask, weights, eps):
@deprecated('The DCSP function DCSP lasso_stability_path DCSP is DCSP deprecated DCSP in DCSP 0.19 DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP 0.21.') DCNL def lasso_stability_path(X, y, scaling=0.5, random_state=None, n_resampling=200, n_grid=100, sample_fraction=0.75, eps=(4 * np.finfo(np.float).eps), n_jobs=1, verbose=False):
def _cholesky_omp(X, y, n_nonzero_coefs, tol=None, copy_X=True, return_path=False):
def _gram_omp(Gram, Xy, n_nonzero_coefs, tol_0=None, tol=None, copy_Gram=True, copy_Xy=True, return_path=False):
def orthogonal_mp(X, y, n_nonzero_coefs=None, tol=None, precompute=False, copy_X=True, return_path=False, return_n_iter=False):
def orthogonal_mp_gram(Gram, Xy, n_nonzero_coefs=None, tol=None, norms_squared=None, copy_Gram=True, copy_Xy=True, return_path=False, return_n_iter=False):
def _omp_path_residues(X_train, y_train, X_test, y_test, copy=True, fit_intercept=True, normalize=True, max_iter=100):
def test_class_weight_vs_sample_weight():
def build_dataset(n_samples=50, n_features=200, n_informative_features=10, n_targets=1):
def check_predictions(clf, X, y):
@ignore_warnings DCNL def test_sag_pobj_matches_logistic_regression():
@ignore_warnings DCNL def test_sag_pobj_matches_ridge_regression():
@ignore_warnings DCNL def test_sag_regressor_computed_correctly():
@ignore_warnings DCNL def test_sag_regressor():
@ignore_warnings DCNL def test_sag_classifier_computed_correctly():
@ignore_warnings DCNL def test_sag_multiclass_computed_correctly():
@ignore_warnings DCNL def test_classifier_results():
@ignore_warnings DCNL def test_binary_classifier_class_weight():
@ignore_warnings DCNL def test_multiclass_classifier_class_weight():
def test_classifier_single_class():
def _intercept_dot(w, X, y):
def _logistic_loss_and_grad(w, X, y, alpha, sample_weight=None):
def _logistic_loss(w, X, y, alpha, sample_weight=None):
def _logistic_grad_hess(w, X, y, alpha, sample_weight=None):
def _multinomial_loss(w, X, Y, alpha, sample_weight):
def _multinomial_loss_grad(w, X, Y, alpha, sample_weight):
def _multinomial_grad_hess(w, X, Y, alpha, sample_weight):
def logistic_regression_path(X, y, pos_class=None, Cs=10, fit_intercept=True, max_iter=100, tol=0.0001, verbose=0, solver='lbfgs', coef=None, class_weight=None, dual=False, penalty='l2', intercept_scaling=1.0, multi_class='ovr', random_state=None, check_input=True, max_squared_sum=None, sample_weight=None):
def _log_reg_scoring_path(X, y, train, test, pos_class=None, Cs=10, scoring=None, fit_intercept=False, max_iter=100, tol=0.0001, class_weight=None, verbose=0, solver='lbfgs', penalty='l2', dual=False, intercept_scaling=1.0, multi_class='ovr', random_state=None, max_squared_sum=None, sample_weight=None):
def _prepare_fit_binary(est, y, i):
def fit_binary(est, i, X, y, alpha, C, learning_rate, max_iter, pos_weight, neg_weight, sample_weight):
def _modified_weiszfeld_step(X, x_old):
def _spatial_median(X, max_iter=300, tol=0.001):
def _breakdown_point(n_samples, n_subsamples):
def _lstsq(X, y, indices, fit_intercept):
def _dynamic_max_trials(n_inliers, n_samples, min_samples, probability):
def lars_path(X, y, Xy=None, Gram=None, max_iter=500, alpha_min=0, method='lar', copy_X=True, eps=np.finfo(np.float).eps, copy_Gram=True, verbose=0, return_path=True, return_n_iter=False, positive=False):
def _lars_path_residues(X_train, y_train, X_test, y_test, Gram=None, copy=True, method='lars', verbose=False, fit_intercept=True, normalize=True, max_iter=500, eps=np.finfo(np.float).eps, positive=False):
def _huber_loss_and_gradient(w, X, y, epsilon, alpha, sample_weight=None):
def get_auto_step_size(max_squared_sum, alpha_scaled, loss, fit_intercept, n_samples=None, is_saga=False):
def sag_solver(X, y, sample_weight=None, loss='log', alpha=1.0, beta=0.0, max_iter=1000, tol=0.001, verbose=0, random_state=None, check_input=True, max_squared_sum=None, warm_start_mem=None, is_saga=False):
def fetch_kddcup99(subset=None, data_home=None, shuffle=False, random_state=None, percent10=True, download_if_missing=True):
def _fetch_brute_kddcup99(data_home=None, download_if_missing=True, random_state=None, shuffle=False, percent10=True):
def _mkdirp(d):
def _load_coverage(F, header_length=6, dtype=np.int16):
def _load_csv(F):
def construct_grids(batch):
def fetch_species_distributions(data_home=None, download_if_missing=True):
def get_data_home(data_home=None):
def clear_data_home(data_home=None):
def load_files(container_path, description=None, categories=None, load_content=True, shuffle=True, encoding=None, decode_error='strict', random_state=0):
def load_data(module_path, data_file_name):
def load_wine(return_X_y=False):
def load_iris(return_X_y=False):
def load_breast_cancer(return_X_y=False):
def load_digits(n_class=10, return_X_y=False):
def load_diabetes(return_X_y=False):
def load_linnerud(return_X_y=False):
def load_boston(return_X_y=False):
def load_sample_images():
def load_sample_image(image_name):
def _pkl_filepath(*args, **kwargs):
def _sha256(path):
def _fetch_remote(remote, dirname=None):
def load_svmlight_file(f, n_features=None, dtype=np.float64, multilabel=False, zero_based='auto', query_id=False, offset=0, length=(-1)):
def load_svmlight_files(files, n_features=None, dtype=np.float64, multilabel=False, zero_based='auto', query_id=False, offset=0, length=(-1)):
def dump_svmlight_file(X, y, f, zero_based=True, comment=None, query_id=None, multilabel=False):
def fetch_covtype(data_home=None, download_if_missing=True, random_state=None, shuffle=False):
def download_20newsgroups(target_dir, cache_path):
def strip_newsgroup_header(text):
def strip_newsgroup_quoting(text):
def strip_newsgroup_footer(text):
def fetch_20newsgroups(data_home=None, subset='train', categories=None, shuffle=True, random_state=42, remove=(), download_if_missing=True):
def fetch_20newsgroups_vectorized(subset='train', remove=(), data_home=None, download_if_missing=True):
def mldata_filename(dataname):
def fetch_mldata(dataname, target_name='label', data_name='data', transpose_data=True, data_home=None):
def test_20news_length_consistency():
def test_make_classification_informative_features():
@with_setup(setup_tmpdata, teardown_tmpdata) DCNL def test_download():
def teardown_module():
def setup_module():
def teardown_module():
def fetch_california_housing(data_home=None, download_if_missing=True):
def scale_face(face):
def check_fetch_lfw(data_home=None, funneled=True, download_if_missing=True):
def _load_imgs(file_paths, slice_, color, resize):
def _fetch_lfw_people(data_folder_path, slice_=None, color=False, resize=None, min_faces_per_person=0):
def fetch_lfw_people(data_home=None, funneled=True, resize=0.5, min_faces_per_person=0, color=False, slice_=(slice(70, 195), slice(78, 172)), download_if_missing=True):
def _fetch_lfw_pairs(index_file_path, data_folder_path, slice_=None, color=False, resize=None):
def fetch_lfw_pairs(subset='train', data_home=None, funneled=True, resize=0.5, color=False, slice_=(slice(70, 195), slice(78, 172)), download_if_missing=True):
def fetch_rcv1(data_home=None, subset='all', download_if_missing=True, random_state=None, shuffle=False):
def _inverse_permutation(p):
def _find_permutation(a, b):
def fetch_olivetti_faces(data_home=None, shuffle=False, random_state=0, download_if_missing=True):
def _generate_hypercube(samples, dimensions, rng):
def make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=2, n_repeated=0, n_classes=2, n_clusters_per_class=2, weights=None, flip_y=0.01, class_sep=1.0, hypercube=True, shift=0.0, scale=1.0, shuffle=True, random_state=None):
def make_multilabel_classification(n_samples=100, n_features=20, n_classes=5, n_labels=2, length=50, allow_unlabeled=True, sparse=False, return_indicator='dense', return_distributions=False, random_state=None):
def make_hastie_10_2(n_samples=12000, random_state=None):
def make_regression(n_samples=100, n_features=100, n_informative=10, n_targets=1, bias=0.0, effective_rank=None, tail_strength=0.5, noise=0.0, shuffle=True, coef=False, random_state=None):
def make_circles(n_samples=100, shuffle=True, noise=None, random_state=None, factor=0.8):
def make_moons(n_samples=100, shuffle=True, noise=None, random_state=None):
def make_blobs(n_samples=100, n_features=2, centers=3, cluster_std=1.0, center_box=((-10.0), 10.0), shuffle=True, random_state=None):
def make_friedman1(n_samples=100, n_features=10, noise=0.0, random_state=None):
def make_friedman2(n_samples=100, noise=0.0, random_state=None):
def make_friedman3(n_samples=100, noise=0.0, random_state=None):
def make_low_rank_matrix(n_samples=100, n_features=100, effective_rank=10, tail_strength=0.5, random_state=None):
def make_sparse_coded_signal(n_samples, n_components, n_features, n_nonzero_coefs, random_state=None):
def make_sparse_uncorrelated(n_samples=100, n_features=10, random_state=None):
def make_spd_matrix(n_dim, random_state=None):
def make_sparse_spd_matrix(dim=1, alpha=0.95, norm_diag=False, smallest_coef=0.1, largest_coef=0.9, random_state=None):
def make_swiss_roll(n_samples=100, noise=0.0, random_state=None):
def make_s_curve(n_samples=100, noise=0.0, random_state=None):
def make_gaussian_quantiles(mean=None, cov=1.0, n_samples=100, n_features=2, n_classes=3, shuffle=True, random_state=None):
def make_biclusters(shape, n_clusters, noise=0.0, minval=10, maxval=100, shuffle=True, random_state=None):
def make_checkerboard(shape, n_clusters, noise=0.0, minval=10, maxval=100, shuffle=True, random_state=None):
@deprecated('since DCSP the DCSP http://mlcomp.org/ DCSP website DCSP will DCSP shut DCSP down DCSP in DCSP March DCSP 2017, DCSP the DCSP load_mlcomp DCSP function DCSP was DCSP deprecated DCSP in DCSP version DCSP 0.19 DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP 0.21.') DCNL def load_mlcomp(name_or_id, set_='raw', mlcomp_root=None, **kwargs):
def _tosequence(X):
def _iteritems(d):
def strip_accents_unicode(s):
def strip_accents_ascii(s):
def strip_tags(s):
def _document_frequency(X):
def _make_int_array():
def _make_edges_3d(n_x, n_y, n_z=1):
def _mask_edges_weights(mask, edges, weights=None):
def _to_graph(n_x, n_y, n_z, mask=None, img=None, return_as=sparse.coo_matrix, dtype=None):
def img_to_graph(img, mask=None, return_as=sparse.coo_matrix, dtype=None):
def grid_to_graph(n_x, n_y, n_z=1, mask=None, return_as=sparse.coo_matrix, dtype=np.int):
def _compute_n_patches(i_h, i_w, p_h, p_w, max_patches=None):
def extract_patches(arr, patch_shape=8, extraction_step=1):
def extract_patches_2d(image, patch_size, max_patches=None, random_state=None):
def reconstruct_from_patches_2d(patches, image_size):
@ignore_warnings DCNL def test_calibration():
def test_calibration_multiclass():
def test_calibration_prefit():
def test_sigmoid_calibration():
def test_calibration_curve():
def test_calibration_nan_imputer():
def test_isotonic_regression_ties_secondary_():
def test_gnb_sample_weight():
def test_gnb_neg_priors():
def test_gnb_priors():
def test_gnb_wrong_nb_priors():
def test_gnb_prior_greater_one():
def test_gnb_prior_large_bias():
def test_check_update_with_no_data():
def test_gnb_pfit_wrong_nb_features():
def _one_vs_one_coef(dual_coef, n_support, support_vectors):
def _get_liblinear_solver_type(multi_class, penalty, loss, dual):
def _fit_liblinear(X, y, C, fit_intercept, intercept_scaling, class_weight, penalty, dual, verbose, max_iter, tol, random_state=None, multi_class='ovr', loss='logistic_regression', epsilon=0.1, sample_weight=None):
def test_svc():
def test_sparse_oneclasssvm():
def l1_min_c(X, y, loss='squared_hinge', fit_intercept=True, intercept_scaling=1.0):
def get_scorer(scoring):
def _passthrough_scorer(estimator, *args, **kwargs):
def check_scoring(estimator, scoring=None, allow_none=False):
def _check_multimetric_scoring(estimator, scoring=None):
def make_scorer(score_func, greater_is_better=True, needs_proba=False, needs_threshold=False, **kwargs):
def _average_binary_score(binary_metric, y_true, y_score, average, sample_weight=None):
def _return_float_dtype(X, Y):
def check_pairwise_arrays(X, Y, precomputed=False, dtype=None):
def check_paired_arrays(X, Y):
def euclidean_distances(X, Y=None, Y_norm_squared=None, squared=False, X_norm_squared=None):
def pairwise_distances_argmin_min(X, Y, axis=1, metric='euclidean', batch_size=500, metric_kwargs=None):
def pairwise_distances_argmin(X, Y, axis=1, metric='euclidean', batch_size=500, metric_kwargs=None):
def manhattan_distances(X, Y=None, sum_over_features=True, size_threshold=None):
def cosine_distances(X, Y=None):
def paired_euclidean_distances(X, Y):
def paired_manhattan_distances(X, Y):
def paired_cosine_distances(X, Y):
def paired_distances(X, Y, metric='euclidean', **kwds):
def linear_kernel(X, Y=None):
def polynomial_kernel(X, Y=None, degree=3, gamma=None, coef0=1):
def sigmoid_kernel(X, Y=None, gamma=None, coef0=1):
def rbf_kernel(X, Y=None, gamma=None):
def laplacian_kernel(X, Y=None, gamma=None):
def cosine_similarity(X, Y=None, dense_output=True):
def additive_chi2_kernel(X, Y=None):
def chi2_kernel(X, Y=None, gamma=1.0):
def distance_metrics():
def _parallel_pairwise(X, Y, func, n_jobs, **kwds):
def _pairwise_callable(X, Y, metric, **kwds):
def pairwise_distances(X, Y=None, metric='euclidean', n_jobs=1, **kwds):
def kernel_metrics():
def pairwise_kernels(X, Y=None, metric='linear', filter_params=False, n_jobs=1, **kwds):
def make_prediction(dataset=None, binary=False):
def _auc(y_true, y_score):
def _average_precision(y_true, y_score):
def _average_precision_slow(y_true, y_score):
def _my_lrap(y_true, y_score):
def make_prediction(dataset=None, binary=False):
def test_confusion_matrix_sample_weight():
def _check_targets(y_true, y_pred):
def accuracy_score(y_true, y_pred, normalize=True, sample_weight=None):
def confusion_matrix(y_true, y_pred, labels=None, sample_weight=None):
def cohen_kappa_score(y1, y2, labels=None, weights=None, sample_weight=None):
def jaccard_similarity_score(y_true, y_pred, normalize=True, sample_weight=None):
def matthews_corrcoef(y_true, y_pred, sample_weight=None):
def zero_one_loss(y_true, y_pred, normalize=True, sample_weight=None):
def f1_score(y_true, y_pred, labels=None, pos_label=1, average='binary', sample_weight=None):
def fbeta_score(y_true, y_pred, beta, labels=None, pos_label=1, average='binary', sample_weight=None):
def _prf_divide(numerator, denominator, metric, modifier, average, warn_for):
def precision_recall_fscore_support(y_true, y_pred, beta=1.0, labels=None, pos_label=1, average=None, warn_for=('precision', 'recall', 'f-score'), sample_weight=None):
def precision_score(y_true, y_pred, labels=None, pos_label=1, average='binary', sample_weight=None):
def recall_score(y_true, y_pred, labels=None, pos_label=1, average='binary', sample_weight=None):
def classification_report(y_true, y_pred, labels=None, target_names=None, sample_weight=None, digits=2):
def hamming_loss(y_true, y_pred, labels=None, sample_weight=None, classes=None):
def log_loss(y_true, y_pred, eps=1e-15, normalize=True, sample_weight=None, labels=None):
def hinge_loss(y_true, pred_decision, labels=None, sample_weight=None):
def _check_binary_probabilistic_predictions(y_true, y_prob):
def brier_score_loss(y_true, y_prob, sample_weight=None, pos_label=None):
def test_consensus_score_issue2445():
def silhouette_score(X, labels, metric='euclidean', sample_size=None, random_state=None, **kwds):
def silhouette_samples(X, labels, metric='euclidean', **kwds):
def calinski_harabaz_score(X, labels):
def check_clusterings(labels_true, labels_pred):
def contingency_matrix(labels_true, labels_pred, eps=None, sparse=False):
def adjusted_rand_score(labels_true, labels_pred):
def homogeneity_completeness_v_measure(labels_true, labels_pred):
def homogeneity_score(labels_true, labels_pred):
def completeness_score(labels_true, labels_pred):
def v_measure_score(labels_true, labels_pred):
def mutual_info_score(labels_true, labels_pred, contingency=None):
def adjusted_mutual_info_score(labels_true, labels_pred):
def normalized_mutual_info_score(labels_true, labels_pred):
def fowlkes_mallows_score(labels_true, labels_pred, sparse=False):
def entropy(labels):
def _check_rows_and_columns(a, b):
def _jaccard(a_rows, a_cols, b_rows, b_cols):
def _pairwise_similarity(a, b, similarity):
def consensus_score(a, b, similarity='jaccard'):
def auc(x, y, reorder=False):
def average_precision_score(y_true, y_score, average='macro', sample_weight=None):
def roc_auc_score(y_true, y_score, average='macro', sample_weight=None):
def _binary_clf_curve(y_true, y_score, pos_label=None, sample_weight=None):
def precision_recall_curve(y_true, probas_pred, pos_label=None, sample_weight=None):
def roc_curve(y_true, y_score, pos_label=None, sample_weight=None, drop_intermediate=True):
def label_ranking_average_precision_score(y_true, y_score):
def coverage_error(y_true, y_score, sample_weight=None):
def label_ranking_loss(y_true, y_score, sample_weight=None):
def dcg_score(y_true, y_score, k=5):
def ndcg_score(y_true, y_score, k=5):
def _check_reg_targets(y_true, y_pred, multioutput):
def mean_absolute_error(y_true, y_pred, sample_weight=None, multioutput='uniform_average'):
def mean_squared_error(y_true, y_pred, sample_weight=None, multioutput='uniform_average'):
def mean_squared_log_error(y_true, y_pred, sample_weight=None, multioutput='uniform_average'):
def median_absolute_error(y_true, y_pred):
def explained_variance_score(y_true, y_pred, sample_weight=None, multioutput='uniform_average'):
def r2_score(y_true, y_pred, sample_weight=None, multioutput='uniform_average'):
def _nipals_twoblocks_inner_loop(X, Y, mode='A', max_iter=500, tol=1e-06, norm_y_weights=False):
def _center_scale_xy(X, Y, scale=True):
def _get_mask(X, value_to_mask):
def _most_frequent(array, extra_value, n_repeat):
def _identity(X):
def _handle_zeros_in_scale(scale, copy=True):
def scale(X, axis=0, with_mean=True, with_std=True, copy=True):
def minmax_scale(X, feature_range=(0, 1), axis=0, copy=True):
def maxabs_scale(X, axis=0, copy=True):
def robust_scale(X, axis=0, with_centering=True, with_scaling=True, quantile_range=(25.0, 75.0), copy=True):
def normalize(X, norm='l2', axis=1, copy=True, return_norm=False):
def binarize(X, threshold=0.0, copy=True):
def add_dummy_feature(X, value=1.0):
def _transform_selected(X, transform, selected='all', copy=True):
def quantile_transform(X, axis=0, n_quantiles=1000, output_distribution='uniform', ignore_implicit_zeros=False, subsample=int(100000.0), random_state=None, copy=False):
def _check_statistics(X, X_true, strategy, statistics, missing_values):
def label_binarize(y, classes, neg_label=0, pos_label=1, sparse_output=False):
def _inverse_binarize_multiclass(y, classes):
def _inverse_binarize_thresholding(y, output_type, classes, threshold):
def _set_random_states(estimator, random_state=None):
def _partition_estimators(n_estimators, n_jobs):
def test_iforest():
def test_iforest_sparse():
def test_iforest_error():
def test_recalculate_max_depth():
def test_iforest_parallel_regression():
def test_iforest_performance():
def test_sample_weight_adaboost_regressor():
def check_classification_toy(name):
def check_parallel(name, X, y):
def early_stopping_monitor(i, est, locals):
def test_majority_label_iris():
def test_tie_situation():
def test_weights_iris():
def test_predict_on_toy_problem():
def test_predict_proba_on_toy_problem():
def test_multilabel():
def test_gridsearch():
def test_parallel_fit():
def test_sample_weight():
def test_sample_weight_kwargs():
def test_set_params():
def test_set_estimator_none():
def test_transform():
def _parallel_fit_estimator(estimator, X, y, sample_weight=None):
def _samme_proba(estimator, n_classes, X):
def _generate_sample_indices(random_state, n_samples):
def _generate_unsampled_indices(random_state, n_samples):
def _parallel_build_trees(tree, forest, X, y, sample_weight, tree_idx, n_trees, verbose=0, class_weight=None):
def _average_path_length(n_samples_leaf):
def _generate_indices(random_state, bootstrap, n_population, n_samples):
def _generate_bagging_indices(random_state, bootstrap_features, bootstrap_samples, n_features, n_samples, max_features, max_samples):
def _parallel_build_estimators(n_estimators, ensemble, X, y, sample_weight, seeds, total_n_estimators, verbose):
def _parallel_predict_proba(estimators, estimators_features, X, n_classes):
def _parallel_predict_log_proba(estimators, estimators_features, X, n_classes):
def _parallel_decision_function(estimators, estimators_features, X):
def _parallel_predict_regression(estimators, estimators_features, X):
def _grid_from_X(X, percentiles=(0.05, 0.95), grid_resolution=100):
def partial_dependence(gbrt, target_variables, grid=None, X=None, percentiles=(0.05, 0.95), grid_resolution=100):
def plot_partial_dependence(gbrt, X, features, feature_names=None, label=None, n_cols=3, grid_resolution=100, percentiles=(0.05, 0.95), n_jobs=1, verbose=0, ax=None, line_kw=None, contour_kw=None, **fig_kw):
def _name_estimators(estimators):
def make_pipeline(*steps, **kwargs):
def make_union(*transformers, **kwargs):
def c_step(X, n_support, remaining_iterations=30, initial_estimates=None, verbose=False, cov_computation_method=empirical_covariance, random_state=None):
def select_candidates(X, n_support, n_trials, select=1, n_iter=30, verbose=False, cov_computation_method=empirical_covariance, random_state=None):
def fast_mcd(X, support_fraction=None, cov_computation_method=empirical_covariance, random_state=None):
def _objective(mle, precision_, alpha):
def _dual_gap(emp_cov, precision_, alpha):
def alpha_max(emp_cov):
def graph_lasso(emp_cov, alpha, cov_init=None, mode='cd', tol=0.0001, enet_tol=0.0001, max_iter=100, verbose=False, return_costs=False, eps=np.finfo(np.float64).eps, return_n_iter=False):
def graph_lasso_path(X, alphas, cov_init=None, X_test=None, mode='cd', tol=0.0001, enet_tol=0.0001, max_iter=100, verbose=False):
def log_likelihood(emp_cov, precision):
def empirical_covariance(X, assume_centered=False):
def shrunk_covariance(emp_cov, shrinkage=0.1):
def ledoit_wolf_shrinkage(X, assume_centered=False, block_size=1000):
def ledoit_wolf(X, assume_centered=False, block_size=1000):
def oas(X, assume_centered=False):
def _gs_decorrelation(w, W, j):
def _sym_decorrelation(W):
def _ica_def(X, tol, g, fun_args, max_iter, w_init):
def _ica_par(X, tol, g, fun_args, max_iter, w_init):
def fastica(X, n_components=None, algorithm='parallel', whiten=True, fun='logcosh', fun_args=None, max_iter=200, tol=0.0001, w_init=None, random_state=None, return_X_mean=False, compute_sources=True, return_n_iter=False):
def test_lda_empty_docs():
def test_dirichlet_expectation():
def center_and_norm(x, axis=(-1)):
def _beta_divergence_dense(X, W, H, beta):
def _sparse_encode(X, dictionary, gram, cov=None, algorithm='lasso_lars', regularization=None, copy_cov=True, init=None, max_iter=1000, check_input=True, verbose=0):
def sparse_encode(X, dictionary, gram=None, cov=None, algorithm='lasso_lars', n_nonzero_coefs=None, alpha=None, copy_cov=True, init=None, max_iter=1000, n_jobs=1, check_input=True, verbose=0):
def _update_dict(dictionary, Y, code, verbose=False, return_r2=False, random_state=None):
def dict_learning(X, n_components, alpha, max_iter=100, tol=1e-08, method='lars', n_jobs=1, dict_init=None, code_init=None, callback=None, verbose=False, random_state=None, return_n_iter=False):
def dict_learning_online(X, n_components=2, alpha=1, n_iter=100, return_code=True, dict_init=None, callback=None, batch_size=3, verbose=False, shuffle=True, n_jobs=1, method='lars', iter_offset=0, random_state=None, return_inner_stats=False, inner_stats=None, return_n_iter=False):
def _assess_dimension_(spectrum, rank, n_samples, n_features):
def _infer_dimension_(spectrum, n_samples, n_features):
def _update_doc_distribution(X, exp_topic_word_distr, doc_topic_prior, max_iters, mean_change_tol, cal_sstats, random_state):
def norm(x):
def trace_dot(X, Y):
def _beta_divergence(X, W, H, beta, square_root=False):
def _special_sparse_dot(W, H, X):
def _compute_regularization(alpha, l1_ratio, regularization):
def _beta_loss_to_float(beta_loss):
def _initialize_nmf(X, n_components, init=None, eps=1e-06, random_state=None):
def _update_coordinate_descent(X, W, Ht, l1_reg, l2_reg, shuffle, random_state):
def _fit_coordinate_descent(X, W, H, tol=0.0001, max_iter=200, l1_reg_W=0, l1_reg_H=0, l2_reg_W=0, l2_reg_H=0, update_H=True, verbose=0, shuffle=False, random_state=None):
def _multiplicative_update_w(X, W, H, beta_loss, l1_reg_W, l2_reg_W, gamma, H_sum=None, HHt=None, XHt=None, update_H=True):
def _multiplicative_update_h(X, W, H, beta_loss, l1_reg_H, l2_reg_H, gamma):
def _fit_multiplicative_update(X, W, H, beta_loss='frobenius', max_iter=200, tol=0.0001, l1_reg_W=0, l1_reg_H=0, l2_reg_W=0, l2_reg_H=0, update_H=True, verbose=0):
def non_negative_factorization(X, W=None, H=None, n_components=None, init='random', update_H=True, solver='cd', beta_loss='frobenius', tol=0.0001, max_iter=200, alpha=0.0, l1_ratio=0.0, regularization=None, random_state=None, verbose=0, shuffle=False):
def dbscan(X, eps=0.5, min_samples=5, metric='minkowski', metric_params=None, algorithm='auto', leaf_size=30, p=2, sample_weight=None, n_jobs=1):
def estimate_bandwidth(X, quantile=0.3, n_samples=None, random_state=0, n_jobs=1):
def mean_shift(X, bandwidth=None, seeds=None, bin_seeding=False, min_bin_freq=1, cluster_all=True, max_iter=300, n_jobs=1):
def get_bin_seeds(X, bin_size, min_bin_freq=1):
def _k_init(X, n_clusters, x_squared_norms, random_state, n_local_trials=None):
def _validate_center_shape(X, n_centers, centers):
def _tolerance(X, tol):
def k_means(X, n_clusters, init='k-means++', precompute_distances='auto', n_init=10, max_iter=300, verbose=False, tol=0.0001, random_state=None, copy_x=True, n_jobs=1, algorithm='auto', return_n_iter=False):
def _kmeans_single_lloyd(X, n_clusters, max_iter=300, init='k-means++', verbose=False, x_squared_norms=None, random_state=None, tol=0.0001, precompute_distances=True):
def _labels_inertia_precompute_dense(X, x_squared_norms, centers, distances):
def _labels_inertia(X, x_squared_norms, centers, precompute_distances=True, distances=None):
def _init_centroids(X, k, init, random_state=None, x_squared_norms=None, init_size=None):
def _mini_batch_step(X, x_squared_norms, centers, counts, old_center_buffer, compute_squared_diff, distances, random_reassign=False, random_state=None, reassignment_ratio=0.01, verbose=False):
def _mini_batch_convergence(model, iteration_idx, n_iter, tol, n_samples, centers_squared_diff, batch_inertia, context, verbose=0):
def _fix_connectivity(X, connectivity, affinity):
def ward_tree(X, connectivity=None, n_clusters=None, return_distance=False):
def linkage_tree(X, connectivity=None, n_components='deprecated', n_clusters=None, linkage='complete', affinity='euclidean', return_distance=False):
def _hc_cut(n_clusters, children, n_leaves):
def check_threshold(birch_instance, threshold):
def test_x_squared_norms_init_centroids():
def _do_scale_test(scaled):
def _do_bistochastic_test(scaled):
def assess_same_labelling(cut1, cut2):
def _iterate_sparse_X(X):
def _split_node(node, threshold, branching_factor):
def discretize(vectors, copy=True, max_svd_restarts=30, n_iter_max=20, random_state=None):
def spectral_clustering(affinity, n_clusters=8, n_components=None, eigen_solver=None, random_state=None, n_init=10, eigen_tol=0.0, assign_labels='kmeans'):
def _scale_normalize(X):
def _bistochastic_normalize(X, max_iter=1000, tol=1e-05):
def _log_normalize(X):
def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200, damping=0.5, copy=True, verbose=False, return_n_iter=False):
def _joint_probabilities(distances, desired_perplexity, verbose):
def _joint_probabilities_nn(distances, neighbors, desired_perplexity, verbose):
def _kl_divergence(params, P, degrees_of_freedom, n_samples, n_components, skip_num_points=0):
def _kl_divergence_bh(params, P, degrees_of_freedom, n_samples, n_components, angle=0.5, skip_num_points=0, verbose=False):
def _gradient_descent(objective, p0, it, n_iter, n_iter_check=1, n_iter_without_progress=300, momentum=0.8, learning_rate=200.0, min_gain=0.01, min_grad_norm=1e-07, verbose=0, args=None, kwargs=None):
def trustworthiness(X, X_embedded, n_neighbors=5, precomputed=False):
def _smacof_single(dissimilarities, metric=True, n_components=2, init=None, max_iter=300, verbose=0, eps=0.001, random_state=None):
def smacof(dissimilarities, metric=True, n_components=2, init=None, n_init=8, n_jobs=1, max_iter=300, verbose=0, eps=0.001, random_state=None, return_n_iter=False):
def test_optimization_minimizes_kl_divergence():
def check_uniform_grid(method, seeds=[0, 1, 2], n_iter=1000):
def _check_with_col_sign_flipping(A, B, tol=0.0):
def barycenter_weights(X, Z, reg=0.001):
def barycenter_kneighbors_graph(X, n_neighbors, reg=0.001, n_jobs=1):
def null_space(M, k, k_skip=1, eigen_solver='arpack', tol=1e-06, max_iter=100, random_state=None):
def locally_linear_embedding(X, n_neighbors, n_components, reg=0.001, eigen_solver='auto', tol=1e-06, max_iter=100, method='standard', hessian_tol=0.0001, modified_tol=1e-12, random_state=None, n_jobs=1):
def _graph_connected_component(graph, node_id):
def _graph_is_connected(graph):
def _set_diag(laplacian, value, norm_laplacian):
def spectral_embedding(adjacency, n_components=8, eigen_solver=None, random_state=None, eigen_tol=0.0, norm_laplacian=True, drop_first=True):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d, **kw):
def itervalues(d, **kw):
def iteritems(d, **kw):
def iterlists(d, **kw):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def signature(obj):
def hash(obj, hash_name='md5', coerce_mmap=False):
def _is_raw_file(fileobj):
def _detect_compressor(fileobj):
def _buffered_read_file(fobj):
def _buffered_write_file(fobj):
@contextlib.contextmanager DCNL def _read_fileobject(fileobj, filename, mmap_mode=None):
def _write_fileobject(filename, compress=('zlib', 3)):
def _read_bytes(fp, size, error_template='ran DCSP out DCSP of DCSP data'):
def disk_used(path):
def memstr_to_bytes(text):
def mkdirp(d):
def rm_subdirs(path, onerror=None):
def with_metaclass(meta, *bases):
def get_func_code(func):
def _clean_win_chars(string):
def get_func_name(func, resolv_alias=True, win_characters=True):
def getfullargspec(func):
def _signature_str(function_name, arg_spec):
def _function_called_str(function_name, args, kwargs):
def filter_args(func, ignore_lst, args=(), kwargs=dict()):
def format_call(func, args, kwargs, object_name='Memory'):
def get_active_backend():
@contextmanager DCNL def parallel_backend(backend, n_jobs=(-1), **backend_params):
def cpu_count():
def _verbosity_filter(index, verbose):
def delayed(function, check_pickle=True):
def register_parallel_backend(name, factory, make_default=False):
def effective_n_jobs(n_jobs=(-1)):
def _get_backing_memmap(a):
def has_shareable_memory(a):
def _strided_from_memmap(filename, dtype, mode, offset, order, shape, strides, total_buffer_len):
def _reduce_memmap_backed(a, m):
def reduce_memmap(a):
def delete_folder(folder_path):
def dump(value, filename, compress=0, protocol=None, cache_size=None):
def _unpickle(fobj, filename='', mmap_mode=None):
def load(filename, mmap_mode=None):
def hex_str(an_int):
def read_zfile(file_handle):
def write_zfile(file_handle, data, compress=1):
def load_compatibility(filename):
def _squeeze_time(t):
def safe_repr(value):
def uniq_stable(elems):
def fix_frame_records_filenames(records):
def format_exc(etype, evalue, etb, context=5, tb_offset=0):
def extract_first_line(func_code):
def _get_func_fullname(func):
def _cache_key_to_dir(cachedir, func, argument_hash):
def _load_output(output_dir, func_name, timestamp=None, metadata=None, mmap_mode=None, verbose=0):
def _get_cache_items(root_path):
def _get_cache_items_to_delete(root_path, bytes_limit):
def concurrency_safe_write(to_write, filename, write_func):
def learning_curve(estimator, X, y, train_sizes=np.linspace(0.1, 1.0, 5), cv=None, scoring=None, exploit_incremental_learning=False, n_jobs=1, pre_dispatch='all', verbose=0, error_score='raise'):
def _translate_train_sizes(train_sizes, n_max_training_samples):
def _incremental_fit_estimator(estimator, X, y, classes, train, test, train_sizes, scorer, verbose):
def validation_curve(estimator, X, y, param_name, param_range, cv=None, scoring=None, n_jobs=1, pre_dispatch='all', verbose=0):
def _cov(X, shrinkage=None):
def _class_means(X, y):
def _class_cov(X, y, priors=None, shrinkage=None):
def _approximate_mode(class_counts, n_draws, rng):
def _index_param_value(X, v, indices):
def cross_val_predict(estimator, X, y=None, cv=None, n_jobs=1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs'):
def _fit_and_predict(estimator, X, y, train, test, verbose, fit_params):
def _check_is_partition(locs, n):
def cross_val_score(estimator, X, y=None, scoring=None, cv=None, n_jobs=1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs'):
def _fit_and_score(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score=False, return_parameters=False, error_score='raise'):
def _safe_split(estimator, X, y, indices, train_indices=None):
def _score(estimator, X_test, y_test, scorer):
def _permutation_test_score(estimator, X, y, cv, scorer):
def _shuffle(y, labels, random_state):
def check_cv(cv, X=None, y=None, classifier=False):
def permutation_test_score(estimator, X, y, cv=None, n_permutations=100, n_jobs=1, labels=None, random_state=0, verbose=0, scoring=None):
def train_test_split(*arrays, **options):
def _sigmoid_calibration(df, y, sample_weight=None):
def calibration_curve(y_true, y_prob, normalize=False, n_bins=5):
def _fit_binary(estimator, X, y, classes=None):
def _partial_fit_binary(estimator, X, y):
def _predict_binary(estimator, X):
def _check_estimator(estimator):
def _fit_ovo_binary(estimator, X, y, i, j):
def _partial_fit_ovo_binary(estimator, X, y, i, j):
def identity(X):
def logistic(X):
def tanh(X):
def relu(X):
def softmax(X):
def inplace_logistic_derivative(Z, delta):
def inplace_tanh_derivative(Z, delta):
def inplace_relu_derivative(Z, delta):
def squared_loss(y_true, y_pred):
def log_loss(y_true, y_prob):
def binary_log_loss(y_true, y_prob):
def _pack(coefs_, intercepts_):
def compare_cv_results_multimetric_with_single(search_multi, search_acc, search_rec, iid):
def compare_refit_methods_when_refit_with_acc(search_multi, search_acc, refit):
def _approximate_mode(class_counts, n_draws, rng):
def _validate_shuffle_split_init(test_size, train_size):
def _validate_shuffle_split(n_samples, test_size, train_size):
def check_cv(cv=3, y=None, classifier=False):
def train_test_split(*arrays, **options):
def fit_grid_point(X, y, estimator, parameters, train, test, scorer, verbose, error_score='raise', **fit_params):
def cross_validate(estimator, X, y=None, groups=None, scoring=None, cv=None, n_jobs=1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=True):
def cross_val_score(estimator, X, y=None, groups=None, scoring=None, cv=None, n_jobs=1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs'):
def _fit_and_score(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=False, error_score='raise'):
def _score(estimator, X_test, y_test, scorer, is_multimetric=False):
def _multimetric_score(estimator, X_test, y_test, scorers):
def cross_val_predict(estimator, X, y=None, groups=None, cv=None, n_jobs=1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', method='predict'):
def _fit_and_predict(estimator, X, y, train, test, verbose, fit_params, method):
def _check_is_permutation(indices, n_samples):
def _index_param_value(X, v, indices):
def permutation_test_score(estimator, X, y, groups=None, cv=None, n_permutations=100, n_jobs=1, random_state=0, verbose=0, scoring=None):
def _permutation_test_score(estimator, X, y, groups, cv, scorer):
def _shuffle(y, groups, random_state):
def learning_curve(estimator, X, y, groups=None, train_sizes=np.linspace(0.1, 1.0, 5), cv=None, scoring=None, exploit_incremental_learning=False, n_jobs=1, pre_dispatch='all', verbose=0, shuffle=False, random_state=None):
def _translate_train_sizes(train_sizes, n_max_training_samples):
def _incremental_fit_estimator(estimator, X, y, classes, train, test, train_sizes, scorer, verbose):
def validation_curve(estimator, X, y, param_name, param_range, groups=None, cv=None, scoring=None, n_jobs=1, pre_dispatch='all', verbose=0):
def _aggregate_score_dicts(scores):
def fit_grid_point(X, y, estimator, parameters, train, test, scorer, verbose, error_score='raise', **fit_params):
@deprecated('sklearn.utils.extmath.norm DCSP was DCSP deprecated DCSP in DCSP version DCSP 0.19 DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP 0.21. DCSP Use DCSP scipy.linalg.norm DCSP instead.') DCNL def norm(x):
def squared_norm(x):
def row_norms(X, squared=False):
def fast_logdet(A):
def _impose_f_order(X):
def density(w, **kwargs):
def safe_sparse_dot(a, b, dense_output=False):
def randomized_range_finder(A, size, n_iter, power_iteration_normalizer='auto', random_state=None):
def randomized_svd(M, n_components, n_oversamples=10, n_iter='auto', power_iteration_normalizer='auto', transpose='auto', flip_sign=True, random_state=0):
@deprecated('sklearn.utils.extmath.logsumexp DCSP was DCSP deprecated DCSP in DCSP version DCSP 0.19 DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP 0.21. DCSP Use DCSP scipy.misc.logsumexp DCSP instead.') DCNL def logsumexp(arr, axis=0):
def weighted_mode(a, w, axis=0):
def cartesian(arrays, out=None):
def svd_flip(u, v, u_based_decision=True):
def log_logistic(X, out=None):
def softmax(X, copy=True):
def safe_min(X):
def make_nonnegative(X, min_value=0):
def _incremental_mean_and_var(X, last_mean=0.0, last_variance=None, last_sample_count=0):
def _deterministic_vector_sign_flip(u):
def stable_cumsum(arr, axis=None, rtol=1e-05, atol=1e-08):
def _sym_ortho(a, b):
def lsqr(A, b, damp=0.0, atol=1e-08, btol=1e-08, conlim=100000000.0, iter_lim=None, show=False, calc_var=False):
def _raise_typeerror(X):
def inplace_csr_column_scale(X, scale):
def inplace_csr_row_scale(X, scale):
def mean_variance_axis(X, axis):
def incr_mean_variance_axis(X, axis, last_mean, last_var, last_n):
def inplace_column_scale(X, scale):
def inplace_row_scale(X, scale):
def inplace_swap_row_csc(X, m, n):
def inplace_swap_row_csr(X, m, n):
def inplace_swap_row(X, m, n):
def inplace_swap_column(X, m, n):
def min_max_axis(X, axis):
def count_nonzero(X, axis=None, sample_weight=None):
def _get_median(data, n_zeros):
def _get_elem_at_rank(rank, data, n_negative, n_zeros):
def csc_median_axis_0(X):
def _line_search_wolfe12(f, fprime, xk, pk, gfk, old_fval, old_old_fval, **kwargs):
def _cg(fhess_p, fgrad, maxiter, tol):
def newton_cg(grad_hess, func, grad, x0, args=(), tol=0.0001, maxiter=100, maxinner=200, line_search=True, warn=True):
def parallel_helper(obj, methodname, *args, **kwargs):
def safe_mask(X, mask):
def axis0_safe_slice(X, mask, len_mask):
def safe_indexing(X, indices):
def resample(*arrays, **options):
def shuffle(*arrays, **options):
def safe_sqr(X, copy=True):
def gen_batches(n, batch_size):
def gen_even_slices(n, n_packs, n_samples=None):
def _get_n_jobs(n_jobs):
def tosequence(x):
def indices_to_mask(indices, mask_length):
def if_delegate_has_method(delegate):
def _safe_split(estimator, X, y, indices, train_indices=None):
def f_ok(a, b):
def f_bad_sections(a, b):
def f_bad_order(b, a):
def f_missing(a, b):
def f_check_param_definition(a, b, c, d):
def linear_assignment(X):
def _hungarian(cost_matrix):
def _step1(state):
def _step3(state):
def _step4(state):
def _step5(state):
def _step6(state):
def _assert_all_finite(X):
def assert_all_finite(X):
def as_float_array(X, copy=True, force_all_finite=True):
def _is_arraylike(x):
def _num_samples(x):
def _shape_repr(shape):
def check_consistent_length(*arrays):
def indexable(*iterables):
def _ensure_sparse_format(spmatrix, accept_sparse, dtype, copy, force_all_finite):
def check_array(array, accept_sparse=False, dtype='numeric', order=None, copy=False, force_all_finite=True, ensure_2d=True, allow_nd=False, ensure_min_samples=1, ensure_min_features=1, warn_on_dtype=False, estimator=None):
def check_X_y(X, y, accept_sparse=False, dtype='numeric', order=None, copy=False, force_all_finite=True, ensure_2d=True, allow_nd=False, multi_output=False, ensure_min_samples=1, ensure_min_features=1, y_numeric=False, warn_on_dtype=False, estimator=None):
def column_or_1d(y, warn=False):
def check_random_state(seed):
def has_fit_parameter(estimator, parameter):
def check_symmetric(array, tol=1e-10, raise_warning=True, raise_exception=False):
def check_is_fitted(estimator, attributes, msg=None, all_or_any=all):
def check_non_negative(X, whom):
def _is_deprecated(func):
def assert_warns(warning_class, func, *args, **kw):
def assert_warns_message(warning_class, message, func, *args, **kw):
def ignore_warnings(obj=None, category=Warning):
def assert_raise_message(exceptions, message, function, *args, **kwargs):
def assert_allclose_dense_sparse(x, y, rtol=1e-07, atol=1e-09, err_msg=''):
def fake_mldata(columns_dict, dataname, matfile, ordering=None):
def all_estimators(include_meta_estimators=False, include_other=False, type_filter=None, include_dont_test=False):
def set_random_state(estimator, random_state=0):
def if_matplotlib(func):
def skip_if_32bit(func):
def if_safe_multiprocessing_with_blas(func):
def clean_warning_registry():
def check_skip_travis():
def _delete_folder(folder_path, warn=False):
def _get_args(function, varargs=False):
def _get_func_name(func, class_name=None):
def check_docstring_parameters(func, doc=None, ignore=None, class_name=None):
def total_seconds(delta):
def single_source_shortest_path_length(graph, source, cutoff=None):
def _weighted_percentile(array, sample_weight, percentile=50):
def unique_labels(*ys):
def is_multilabel(y):
def check_classification_targets(y):
def type_of_target(y):
def _check_partial_fit_first_call(clf, classes=None):
def class_distribution(y, sample_weight=None):
def _ovr_decision_function(predictions, confidences, n_classes):
@deprecated('sklearn.utils.random.choice DCSP was DCSP deprecated DCSP in DCSP version DCSP 0.19 DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP 0.21. DCSP Use DCSP np.random.choice DCSP or DCSP np.random.RandomState.choice DCSP instead.') DCNL def choice(a, size=None, replace=True, p=None, random_state=None):
def random_choice_csc(n_samples, classes, class_probability=None, random_state=None):
def compute_class_weight(class_weight, classes, y):
def compute_sample_weight(class_weight, y, indices=None):
def check_estimator(Estimator):
def _is_32bit():
@ignore_warnings DCNL def check_estimators_pickle(name, estimator_orig):
@ignore_warnings(category=DeprecationWarning) DCNL def check_clusterer_compute_labels_predict(name, clusterer_orig):
@ignore_warnings(category=(DeprecationWarning, FutureWarning)) DCNL def check_estimators_fit_returns_self(name, estimator_orig):
@ignore_warnings DCNL def check_estimators_unfitted(name, estimator_orig):
@ignore_warnings(category=(DeprecationWarning, FutureWarning)) DCNL def check_class_weight_balanced_linear_classifier(name, Classifier):
@ignore_warnings(category=(DeprecationWarning, FutureWarning)) DCNL def check_no_fit_attributes_set_in_init(name, Estimator):
def _compute_mi_cc(x, y, n_neighbors):
def _compute_mi_cd(c, d, n_neighbors):
def _compute_mi(x, y, x_discrete, y_discrete, n_neighbors=3):
def _iterate_columns(X, columns=None):
def _estimate_mi(X, y, discrete_features='auto', discrete_target=False, n_neighbors=3, copy=True, random_state=None):
def mutual_info_regression(X, y, discrete_features='auto', n_neighbors=3, copy=True, random_state=None):
def mutual_info_classif(X, y, discrete_features='auto', n_neighbors=3, copy=True, random_state=None):
def _rfe_single_fit(rfe, estimator, X, y, train, test, scorer):
def mkchi2(k):
def _get_feature_importances(estimator, norm_order=1):
def _calculate_threshold(estimator, importances, threshold):
def _clean_nans(scores):
def f_oneway(*args):
def f_classif(X, y):
def _chisquare(f_obs, f_exp):
def chi2(X, y):
def f_regression(X, y, center=True):
def johnson_lindenstrauss_min_dim(n_samples, eps=0.1):
def _check_density(density, n_features):
def _check_input_size(n_components, n_features):
def gaussian_random_matrix(n_components, n_features, random_state=None):
def sparse_random_matrix(n_components, n_features, density='auto', random_state=None):
def check(condition, msg):
def check(condition, msg):
def is_integral(x):
def _install_shlib(name, src, dst):
def add_extra_files(foam_pkg, common, local, **kwargs):
def format_export(key, value):
def format_setenv(key, value):
def _write_environ_entries(outfile, environ, formatter):
def _write_environ_file(output, environ, formatter):
def write_environ(environ, **kwargs):
def rewrite_environ_files(environ, **kwargs):
def foamAddPath(*args):
def foamAddLib(*args):
def pkglib(package, pre=None):
def mplib_content(spec, pre=None):
def filter_pick(input_list, regex_filter):
def unfilter_pick(input_list, regex_filter):
def get_all_components():
def is_string(x):
def _verbs_dir():
def _mxm_dir():
def is_integral(x):
def cmake_cache_entry(name, value):
def _importAndCheckStack(importName):
def namedAny(name):
def load_schema(name):
def indent(string, times=1):
def format_as_index(indices):
def find_additional_properties(instance, schema):
def extras_msg(extras):
def types_msg(instance, types):
def flatten(suitable_for_isinstance):
def ensure_list(thing):
def unbool(element, true=object(), false=object()):
def uniq(container):
def validates(version):
def validate(instance, schema, cls=None, *args, **kwargs):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def python_2_unicode_compatible(klass):
def total_ordering(cls):
def kill(pid):
def cmdexec(cmd):
def _py_abspath(path):
def initpkg(pkgname, exportdefs, attr=dict()):
def default_consumer(msg):
def STDOUT(msg):
def STDERR(msg):
def _tryimport(*names):
def format_exception_only(etype, value):
def _format_final_exc_line(etype, value):
def patch_builtins(assertion=True, compile=True):
def unpatch_builtins(assertion=True, compile=True):
def getrawcode(obj, trycall=True):
def _format_explanation(explanation):
def compile_(source, filename=None, mode='exec', flags=generators.compiler_flag, dont_inherit=0):
def getfslineno(obj):
def getstatementrange_old(lineno, source, assertion=False):
def dupfile(f, mode=None, buffering=0, raising=False, encoding=None):
def saferepr(obj, maxsize=240):
def copymode(src, dest):
def copystat(src, dest):
def parse_time_with_missing_year(timestr):
def parse_wcinfotime(timestr):
def make_recursive_propdict(wcroot, output, rex=re.compile("Properties DCSP on DCSP '(.*)':")):
def create_new_paste(contents):
def xfail(reason=''):
def check_xfail_no_run(item):
def check_strict_xfail(pyfuncitem):
@pytest.fixture DCNL def _pytest(request):
def get_public_names(l):
@pytest.fixture DCNL def monkeypatch(request):
@pytest.fixture DCNL def record_xml_property(request):
@pytest.fixture DCNL def capsys(request):
@pytest.fixture DCNL def capfd(request):
def safe_text_dupfile(f, mode, default_encoding='UTF8'):
def _readline_workaround():
def main(args=None, plugins=None):
def filename_arg(path, optname):
def directory_arg(path, optname):
def get_plugin_manager():
def getcfg(args, warnfunc=None):
def create_terminal_writer(config, *args, **kwargs):
def _strtobool(val):
def show_test_item(item):
def exit(msg):
def skip(msg=''):
def fail(msg='', pytrace=True):
def importorskip(modname, minversion=None):
def freeze_includes():
def _iter_all_modules(package, prefix=''):
def getfixturemarker(obj):
def get_parametrized_fixture_keys(item, scopenum):
def fillfixtures(function):
def scope2index(scope, descr, where=None):
def pytest_fixture_setup(fixturedef, request):
def fixture(scope='function', params=None, autouse=False, ids=None, name=None):
def yield_fixture(scope='function', params=None, autouse=False, ids=None, name=None):
@fixture(scope='session') DCNL def pytestconfig(request):
def wrap_session(config, doit):
def _main(config, session):
@pytest.fixture DCNL def cache(request):
def filter_traceback(entry):
def _marked(func, mark):
def _get_xunit_setup_teardown(holder, attr_name, param_obj=None):
def _get_xunit_func(obj, name):
def _find_parametrized_scope(argnames, arg2fixturedefs, indirect):
def raises(expected_exception, *args, **kwargs):
def format_exception_only(etype, value):
def _format_final_exc_line(etype, value):
def getrawcode(obj, trycall=True):
def compile_(source, filename=None, mode='exec', flags=generators.compiler_flag, dont_inherit=0):
def getfslineno(obj):
def getstatementrange_old(lineno, source, assertion=False):
def register_assert_rewrite(*names):
def install_importhook(config):
def _running_on_ci():
def pytest_runtest_setup(item):
def format_explanation(explanation):
def _split_explanation(explanation):
def _format_lines(lines):
def assertrepr_compare(config, op, left, right):
def _diff_text(left, right, verbose=False):
def _rewrite_test(config, fn):
def _make_rewritten_pyc(state, source_stat, pyc, co):
def _read_pyc(source, pyc, trace=(lambda x: None)):
def rewrite_asserts(mod, module_path=None, config=None):
def _saferepr(obj):
def _format_assertmsg(obj):
def set_location(node, lineno, col_offset):
def _check_all_skipped(test):
def _setup_fixtures(doctest_item):
def _get_checker():
def _get_allow_unicode_flag():
def _get_allow_bytes_flag():
def _get_report_choice(key):
@pytest.fixture(scope='session') DCNL def doctest_namespace():
def matchmark(colitem, markexpr):
def matchkeyword(colitem, keywordexpr):
def _wrapped_call(wrap_controller, func):
def varnames(func, startindex=None):
def get_user():
def pytest_configure(config):
@pytest.fixture(scope='session') DCNL def tmpdir_factory(request):
@pytest.fixture DCNL def tmpdir(request, tmpdir_factory):
def num_mock_patch_args(function):
def get_real_func(obj):
def safe_getattr(object, name, default):
def _is_unittest_unexpected_success_a_failure():
@pytest.yield_fixture DCNL def recwarn(request):
def deprecated_call(func=None, *args, **kwargs):
def warns(expected_warning, *args, **kwargs):
def linux_distribution(full_distribution_name=True):
def id():
def name(pretty=False):
def version(pretty=False, best=False):
def version_parts(best=False):
def major_version(best=False):
def minor_version(best=False):
def build_number(best=False):
def like():
def codename():
def info(pretty=False, best=False):
def os_release_info():
def lsb_release_info():
def distro_release_info():
def os_release_attr(attribute):
def lsb_release_attr(attribute):
def distro_release_attr(attribute):
def scan(stream, Loader=Loader):
def parse(stream, Loader=Loader):
def compose(stream, Loader=Loader):
def compose_all(stream, Loader=Loader):
def load(stream, Loader=Loader):
def load_all(stream, Loader=Loader):
def safe_load(stream):
def safe_load_all(stream):
def emit(events, stream=None, Dumper=Dumper, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None):
def serialize_all(nodes, stream=None, Dumper=Dumper, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None, encoding='utf-8', explicit_start=None, explicit_end=None, version=None, tags=None):
def serialize(node, stream=None, Dumper=Dumper, **kwds):
def dump_all(documents, stream=None, Dumper=Dumper, default_style=None, default_flow_style=None, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None, encoding='utf-8', explicit_start=None, explicit_end=None, version=None, tags=None):
def dump(data, stream=None, Dumper=Dumper, **kwds):
def safe_dump_all(documents, stream=None, **kwds):
def safe_dump(data, stream=None, **kwds):
def add_implicit_resolver(tag, regexp, first=None, Loader=Loader, Dumper=Dumper):
def add_path_resolver(tag, path, kind=None, Loader=Loader, Dumper=Dumper):
def add_constructor(tag, constructor, Loader=Loader):
def add_multi_constructor(tag_prefix, multi_constructor, Loader=Loader):
def add_representer(data_type, representer, Dumper=Dumper):
def add_multi_representer(data_type, multi_representer, Dumper=Dumper):
def get_versions(source, filename=None):
def qver(source):
def _needs_stage(fun):
def from_url(url):
def from_kwargs(**kwargs):
def for_package_version(pkg, version):
def from_list_url(pkg):
def mirror_archive_filename(spec, fetcher, resourceId=None):
def mirror_archive_path(spec, fetcher, resourceId=None):
def get_matching_versions(specs, **kwargs):
def suggest_archive_basename(resource):
def create(path, specs, **kwargs):
def implicit_variant_conversion(method):
def substitute_abstract_variants(spec):
def colorize_spec(spec):
def _command_default_handler(descriptor, spec, cls):
def _headers_default_handler(descriptor, spec, cls):
def _libs_default_handler(descriptor, spec, cls):
def parse(string):
def parse_anonymous_spec(spec_like, pkg_name):
def base32_prefix_bits(hash_string, bits):
@directive('versions') DCNL def version(ver, checksum=None, **kwargs):
@directive('conflicts') DCNL def conflicts(conflict_spec, when=None):
@directive(('dependencies', 'dependency_types')) DCNL def depends_on(spec, when=None, type=None):
@directive(('extendees', 'dependencies', 'dependency_types')) DCNL def extends(spec, **kwargs):
@directive('provided') DCNL def provides(*specs, **kwargs):
@directive('patches') DCNL def patch(url_or_filename, level=1, when=None, **kwargs):
@directive('variants') DCNL def variant(name, default=None, description='', values=None, multi=False, validator=None):
@directive('resources') DCNL def resource(**kwargs):
def validate_section_name(section):
def extend_with_default(validator_class):
def validate_section(data, schema):
def highest_precedence_scope():
def validate_scope(scope):
def _read_config_file(filename, schema):
def clear_config_caches():
def override(string):
def _merge_yaml(dest, source):
def get_config(section, scope=None):
def get_config_filename(scope, section):
def update_config(section, update_data, scope=None):
def print_section(section):
def get_platform(platform_name):
def verify_platform(platform_name):
def arch_for_spec(arch_spec):
@memoized DCNL def platform():
@memoized DCNL def sys_type():
def compile_c_and_execute(source_file, include_flags, link_flags):
def compare_output(current_output, blessed_output):
def compare_output_file(current_output, blessed_output_file):
def _autospec(function):
def _transform(providers, transform_fun, out_mapping_type=dict):
def _get_modules_in_modulecmd_output(output):
def _fill_craype_targets_from_modules(targets, modules):
def int_if_int(string):
def coerce_versions(a, b):
def coerced(method):
def _string_to_version(string):
def ver(obj):
def find_spec(spec, condition, default=None):
def set_working_dir():
def add_all_commands(parser):
def index_commands():
def make_argument_parser():
def setup_main_options(args):
def allows_unknown_args(command):
def _invoke_spack_command(command, parser, args, unknown_args):
def _main(command, parser, args, unknown_args):
def main(argv=None):
def shebang_too_long(path):
def filter_shebang(path):
def post_install(spec):
def git_case_consistency_check(path):
def pre_install(spec):
def set_up_license(pkg):
def write_license_file(pkg, license_path):
def post_install(spec):
def symlink_license(pkg):
def _autospec(function):
def create_repo(root, namespace=None):
def run_before(*phases):
def run_after(*phases):
def on_package_attributes(**attr_dict):
def install_dependency_symlinks(pkg, spec, prefix):
def use_cray_compiler_names():
def flatten_dependencies(spec, flat_dir):
def dump_packages(spec, path):
def print_pkg(message):
def _hms(seconds):
def set_up_package(name, repository, url_attr):
@pytest.fixture(autouse=True) DCNL def no_stdin_duplication(monkeypatch):
@pytest.fixture(autouse=True) DCNL def mock_fetch_cache(monkeypatch):
@pytest.fixture(scope='session') DCNL def repo_path():
@pytest.fixture(scope='module') DCNL def builtin_mock(repo_path):
@pytest.fixture() DCNL def refresh_builtin_mock(builtin_mock, repo_path):
@pytest.fixture(scope='session') DCNL def linux_os():
@pytest.fixture(scope='session') DCNL def configuration_dir(tmpdir_factory, linux_os):
@pytest.fixture(scope='module') DCNL def config(configuration_dir):
@pytest.fixture(scope='module') DCNL def database(tmpdir_factory, builtin_mock, config):
@pytest.fixture() DCNL def refresh_db_on_exit(database):
@pytest.fixture() DCNL def install_mockery(tmpdir, config, builtin_mock):
@pytest.fixture() DCNL def mock_fetch(mock_archive):
@pytest.fixture(scope='session') DCNL def mock_archive():
@pytest.fixture(scope='session') DCNL def mock_git_repository():
@pytest.fixture(scope='session') DCNL def mock_hg_repository():
@pytest.fixture(scope='session') DCNL def mock_svn_repository():
@pytest.fixture(params=[('optional-dep-test', Spec('optional-dep-test')), ('optional-dep-test~a', Spec('optional-dep-test~a')), ('optional-dep-test+a', Spec('optional-dep-test+a', Spec('a'))), ('optional-dep-test DCSP a=true', Spec('optional-dep-test DCSP a=true', Spec('a'))), ('optional-dep-test DCSP a=true', Spec('optional-dep-test+a', Spec('a'))), ('optional-dep-test@1.1', Spec('optional-dep-test@1.1', Spec('b'))), ('optional-dep-test%intel', Spec('optional-dep-test%intel', Spec('c'))), ('optional-dep-test%intel@64.1', Spec('optional-dep-test%intel@64.1', Spec('c'), Spec('d'))), ('optional-dep-test%intel@64.1.2', Spec('optional-dep-test%intel@64.1.2', Spec('c'), Spec('d'))), ('optional-dep-test%clang@35', Spec('optional-dep-test%clang@35', Spec('e'))), ('optional-dep-test+a@1.1', Spec('optional-dep-test+a@1.1', Spec('a'), Spec('b'))), ('optional-dep-test+a%intel', Spec('optional-dep-test+a%intel', Spec('a'), Spec('c'))), ('optional-dep-test@1.1%intel', Spec('optional-dep-test@1.1%intel', Spec('b'), Spec('c'))), ('optional-dep-test@1.1%intel@64.1.2+a', Spec('optional-dep-test@1.1%intel@64.1.2+a', Spec('b'), Spec('a'), Spec('c'), Spec('d'))), ('optional-dep-test@1.1%clang@36.5+a', Spec('optional-dep-test@1.1%clang@36.5+a', Spec('b'), Spec('a'), Spec('e'))), ('optional-dep-test-2+mpi', Spec('optional-dep-test-2+mpi', Spec('optional-dep-test+mpi', Spec('mpi')))), ('optional-dep-test+f', Spec('optional-dep-test+f', Spec('f'), Spec('g'), Spec('mpi')))]) DCNL def spec_and_expected(request):
@pytest.fixture() DCNL def concretize_scope(config, tmpdir):
def update_packages(pkgname, section, value):
@pytest.fixture() DCNL def library_list():
@pytest.fixture() DCNL def header_list():
@pytest.mark.parametrize('type_of_test', ['default', 'rev0']) DCNL @pytest.mark.parametrize('secure', [True, False]) DCNL def test_fetch(type_of_test, secure, mock_svn_repository, config, refresh_builtin_mock):
def pyfiles(search_paths, exclude=()):
def check_python_versions(files):
def test_core_module_compatibility():
def test_package_module_compatibility():
def check_compiler_config(comps, *compiler_names):
@pytest.fixture() DCNL def config(tmpdir):
@pytest.fixture() DCNL def write_config_file(tmpdir):
@pytest.fixture() DCNL def compiler_specs():
def test_user_front_end_input(config):
def test_user_back_end_input(config):
def _print_ref_counts():
def _check_merkleiness():
def _check_db_sanity(install_db):
def test_005_db_exists(database):
def test_010_all_install_sanity(database):
def test_020_db_sanity(database):
def test_025_reindex(database):
def test_040_ref_counts(database):
def test_050_basic_query(database):
def _check_remove_and_add_package(install_db, spec):
@pytest.mark.parametrize('type_of_test', ['master', 'branch', 'tag', 'commit']) DCNL @pytest.mark.parametrize('secure', [True, False]) DCNL def test_fetch(type_of_test, secure, mock_git_repository, config, refresh_builtin_mock):
def check_db():
def test_get_all_packages():
def test_get_all_mock_packages():
def test_all_versions_are_lowercase():
@pytest.fixture(params=['libelf', 'libelf@0.8.13', 'callpath', 'mpileaks', 'libelf', 'mpich+debug', 'mpich~debug', 'mpich DCSP debug=True', 'mpich', 'mpich DCSP cppflags="-O3"', 'mpileaks DCSP ^mpi', 'mpileaks DCSP ^mpi@:1.1', 'mpileaks DCSP ^mpi@2:', 'mpileaks DCSP ^mpi@2.1', 'mpileaks DCSP ^mpi@2.2', 'mpileaks DCSP ^mpi@2.2', 'mpileaks DCSP ^mpi@:1', 'mpileaks DCSP ^mpi@1.2:2conflict', 'conflict%clang~foo', 'conflict-parent%gcc']) DCNL def spec(request):
@pytest.fixture(params=['conflict%clang', 'conflict%clang+foo', 'conflict-parent%clang', 'conflict-parent@0.9^conflict~foo']) DCNL def conflict_spec(request):
def test_using_ordered_dict(builtin_mock):
def test_ordered_read_not_required_for_consistent_dag_hash(config, builtin_mock):
def reverse_all_dicts(data):
@pytest.mark.parametrize('name,noffset,ver,voffset,path', [('antlr', 25, '2.7.7', 40, 'https://github.com/antlr/antlr/tarball/v2.7.7'), ('gmp', 32, '6.0.0a', 36, 'https://gmplib.org/download/gmp/gmp-6.0.0a.tar.bz2'), ('nextflow', 31, '0.20.1', 59, 'https://github.com/nextflow-io/nextflow/releases/download/v0.20.1/nextflow'), ('zlib', 24, '1.2.10', 29, 'http://zlib.net/fossils/zlib-1.2.10.tar.gz'), ('slepc', 51, '3.6.2', 57, 'http://slepc.upv.es/download/download.php?filename=slepc-3.6.2.tar.gz'), ('cloog', 61, '0.18.1', 67, 'http://www.bastoul.net/cloog/pages/download/count.php3?url=./cloog-0.18.1.tar.gz'), ('libxc', 58, '2.2.2', 64, 'http://www.tddft.org/programs/octopus/down.php?file=libxc/libxc-2.2.2.tar.gz'), ('swiftsim', 36, '0.3.0', 76, 'http://gitlab.cosma.dur.ac.uk/swift/swiftsim/repository/archive.tar.gz?ref=v0.3.0'), ('sionlib', 30, '1.7.1', 59, 'http://apps.fz-juelich.de/jsc/sionlib/download.php?version=1.7.1'), ('voro++', 40, '0.4.6', 47, 'http://math.lbl.gov/voro++/download/dir/voro++-0.4.6.tar.gz'), ('glew', 55, '2.0.0', 60, 'https://sourceforge.net/projects/glew/files/glew/2.0.0/glew-2.0.0.tgz/download')]) DCNL def test_url_parse_offset(name, noffset, ver, voffset, path):
@pytest.fixture() DCNL def saved_deps():
@pytest.fixture() DCNL def set_dependency(saved_deps):
@pytest.fixture() DCNL def interface():
@pytest.fixture() DCNL def implementation(interface):
@pytest.fixture(params=['interface', 'method_list']) DCNL def composite(interface, implementation, request):
@pytest.fixture(scope='function', params=[('configure', 'autotools'), ('CMakeLists.txt', 'cmake'), ('project.pro', 'qmake'), ('SConstruct', 'scons'), ('waf', 'waf'), ('setup.py', 'python'), ('NAMESPACE', 'r'), ('WORKSPACE', 'bazel'), ('Makefile.PL', 'perlmake'), ('Build.PL', 'perlbuild'), ('GNUmakefile', 'makefile'), ('makefile', 'makefile'), ('Makefile', 'makefile'), ('foobar', 'generic')]) DCNL def url_and_build_system(request, tmpdir):
@pytest.fixture() DCNL def file_cache(tmpdir):
def test_write_and_read_cache_file(file_cache):
def test_write_and_remove_cache_file(file_cache):
@pytest.mark.parametrize('secure', [True, False]) DCNL def test_fetch(mock_archive, secure, checksum_type, config, refresh_builtin_mock):
@pytest.mark.parametrize('type_of_test', ['default', 'rev0']) DCNL @pytest.mark.parametrize('secure', [True, False]) DCNL def test_fetch(type_of_test, secure, mock_hg_repository, config, refresh_builtin_mock):
def test_topo_sort(builtin_mock):
def test_static_graph_mpileaks(builtin_mock):
def test_dynamic_dot_graph_mpileaks(builtin_mock):
def test_ascii_graph_mpileaks(builtin_mock):
@pytest.fixture() DCNL def stage():
@pytest.fixture() DCNL def link_tree(stage):
@pytest.fixture() DCNL def prepare_environment_for_tests():
@pytest.fixture DCNL def env(prepare_environment_for_tests):
@pytest.fixture DCNL def miscellaneous_paths():
@pytest.fixture DCNL def files_to_be_sourced():
def test_set(env):
def test_append_flags(env):
def test_unset(env):
def test_filter_system_paths(miscellaneous_paths):
def test_set_path(env):
def test_path_manipulation(env):
def test_extra_arguments(env):
def test_extend(env):
@pytest.mark.usefixtures('prepare_environment_for_tests') DCNL def test_source_files(files_to_be_sourced):
@pytest.fixture() DCNL def mock_compiler_dir(tmpdir):
def test_multiple_matches(database):
def test_installed_dependents(database):
def test_recursive_uninstall(database):
def test_url_summary():
@pytest.fixture(scope='module') DCNL def parser():
@pytest.fixture(params=[['rm', 'doesnotexist'], ['find', 'mpileaks'], ['find', 'doesnotexist']]) DCNL def failure_args(request):
@pytest.fixture(scope='module') DCNL def parser():
@pytest.fixture(scope='module') DCNL def flake8_package():
def check_destroy(stage, stage_name):
def check_setup(stage, stage_name, archive):
def get_stage_path(stage, stage_name):
@pytest.fixture() DCNL def tmpdir_for_stage(mock_archive):
@pytest.fixture() DCNL def mock_archive(tmpdir, monkeypatch):
@pytest.fixture() DCNL def failing_search_fn():
@pytest.fixture() DCNL def failing_fetch_strategy():
@pytest.fixture() DCNL def search_fn():
def test_prefix_attributes():
def test_multilevel_attributes():
def test_string_like_behavior():
@pytest.fixture() DCNL def layout_and_dir(tmpdir):
def test_yaml_directory_layout_parameters(tmpdir, config):
def test_read_and_write_spec(layout_and_dir, config, builtin_mock):
def test_handle_unknown_package(layout_and_dir, config, builtin_mock):
def test_find(layout_and_dir, config, builtin_mock):
@pytest.fixture(scope='session', params=locations) DCNL def lock_test_directory(request):
@pytest.fixture DCNL def private_lock_path(lock_dir):
@pytest.fixture DCNL def lock_path(lock_dir):
def local_multiproc_test(*functions):
def mpi_multiproc_test(*functions):
def test_read_lock_timeout_on_write_ranges(lock_path):
def test_read_lock_timeout_on_write_ranges_2(lock_path):
def test_read_lock_timeout_on_write_ranges_3(lock_path):
def test_upgrade_read_to_write(private_lock_path):
@pytest.fixture() DCNL def data():
def assert_ver_lt(a, b):
def assert_ver_gt(a, b):
def assert_ver_eq(a, b):
def assert_in(needle, haystack):
def assert_not_in(needle, haystack):
def assert_canonical(canonical_list, version_list):
def assert_overlaps(v1, v2):
def assert_no_overlap(v1, v2):
def assert_satisfies(v1, v2):
def assert_does_not_satisfy(v1, v2):
def check_intersection(expected, a, b):
def check_union(expected, a, b):
@pytest.fixture() DCNL def stringio_open(monkeypatch):
def get_modulefile_content(factory, spec):
@pytest.fixture() DCNL def tcl_factory(tmpdir, monkeypatch):
@pytest.fixture() DCNL def lmod_factory(tmpdir, monkeypatch):
@pytest.fixture() DCNL def dotkit_factory(tmpdir, monkeypatch):
def topological_sort(spec, reverse=False, deptype=None):
def find(seq, predicate):
def graph_dot(specs, deptype=None, static=False, out=None):
def concatenate_paths(paths, separator=':'):
def set_or_unset_not_first(variable, changes, errstream):
def validate(env, errstream):
def filter_environment_blacklist(env, variables):
def mirror_add(args):
def mirror_remove(args):
def mirror_list(args):
def mirror_create(args):
def default_log_file(spec):
def padder(str_list, extra=0):
def print_text_info(pkg):
def do_list(args, unknown_args):
def repo_create(args):
def repo_add(args):
def repo_remove(args):
def repo_list(args):
def assuredir(path):
def relative_to(prefix, path):
def transform_path(spec, path, prefix=None):
def purge_empty_directories(path):
def filter_exclude(specs, exclude):
def flatten(seeds, descend=True):
def check_one(spec, path, verbose=False):
def remove_one(spec, path, verbose=False):
def link_one(spec, path, link=os.symlink, verbose=False):
def visitor_symlink(specs, args):
def visitor_hardlink(specs, args):
def visitor_remove(specs, args):
def visitor_statlink(specs, args):
def view(parser, args):
def find_matching_specs(specs, allow_multiple_matches=False, force=False):
def installed_dependents(specs):
def do_uninstall(specs, force):
def inverted_dependencies():
def get_dependents(pkg_name, ideps, transitive=False, dependents=None):
def remove_options(parser, *options):
def get_python_name(name):
def get_module(name):
def get_command(name):
def parse_specs(args, **kwargs):
def elide_list(line_list, max_num=10):
def display_specs(specs, args=None, **kwargs):
def setup_parser(subparser):
def get_checksums(url_dict, name, **kwargs):
def setup_parser(subparser):
def setup_parser(subparser):
def formatter(func):
def filter_by_name(pkgs, args):
@formatter DCNL def rst(pkgs):
def get_name(args):
def get_url(args):
def get_versions(args, name):
def get_build_system(args, guesser):
def get_repository(args, name):
def edit_package(name, repo_path, namespace):
def pkg_list(args):
def pkg_diff(args):
def pkg_removed(args):
def pkg_added(args):
def setup_parser(subparser):
def setup_parser(subparser):
def print_name_and_version(url):
def url_list_parsing(args, urls, url, pkg):
def name_parsed_correctly(pkg, name):
def version_parsed_correctly(pkg, version):
def remove_separators(version):
def subcommand(subparser_name):
@subcommand('loads') DCNL def loads(mtype, specs, args):
@subcommand('find') DCNL def find(mtype, specs, args):
@subcommand('rm') DCNL def rm(mtype, specs, args):
@subcommand('refresh') DCNL def refresh(mtype, specs, args):
def changed_files(args):
def filter_file(source, dest, output=False):
def compiler_find(args):
def compiler_info(args):
def _first_accessible_path(paths):
def _get_mirrors():
def ensure_access(file=spack.stage_path):
def purge():
def set_build_environment_variables(pkg, env, dirty=False):
def set_module_variables_for_package(pkg, module):
def get_rpath_deps(pkg):
def get_rpaths(pkg):
def get_std_cmake_args(pkg):
def parent_class_modules(cls):
def load_external_modules(pkg):
def setup_package(pkg, dirty=False):
def fork(pkg, function, dirty=False):
def get_package_context(traceback):
def _make_child_error(msg, traceback, build_log, package_context):
def mod_to_class(mod_name):
def spack_module_to_python_module(mod_name):
def possible_spack_module_names(python_mod_name):
def simplify_name(name):
def valid_module_name(mod_name):
def valid_fully_qualified_module_name(mod_name):
def validate_module_name(mod_name):
def validate_fully_qualified_module_name(mod_name):
def load_module(mod):
def get_path_from_module(mod):
def decompressor_for(path, extension=None):
def strip_extension(path):
def extension(path):
def substitute_config_variables(path):
def canonicalize_path(path):
def which(*args, **kwargs):
def composite(interface=None, method_list=None, container=list):
def checksum(hashlib_algo, filename, **kwargs):
def prefix_bits(byte_array, bits):
def bit_length(num):
def path_put_first(var_name, directories):
def dump_environment(path):
def debug_handler(sig, frame):
def register_interrupt_handler():
def mark(obj, node):
def load(*args, **kwargs):
def load(stream):
def dump(data, stream=None):
def _spider(url, visited, root, depth, max_depth, raise_on_error):
def _spider_wrapper(args):
def spider(root_url, depth=0):
def find_versions_of_archive(archive_urls, list_url=None, list_depth=0):
def _check_concrete(spec):
def find_list_url(url):
def strip_version_suffixes(path):
def strip_name_suffixes(path, version):
def split_url_extension(path):
def determine_url_file_extension(path):
def parse_version_offset(path):
def parse_version(path):
def parse_name_offset(path, v=None):
def parse_name(path, ver=None):
def parse_name_and_version(path):
def insensitize(string):
def cumsum(elts, init=0, fn=(lambda x: x)):
def find_all(substring, string):
def substitution_offsets(path):
def wildcard_version(path):
def substitute_version(path, new_version):
def color_url(path, **kwargs):
def _spec_type(component):
def get_packages_config():
def spec_externals(spec):
def is_spec_buildable(spec):
def _to_dict(compiler):
def get_compiler_config(scope=None, init_config=True):
def add_compilers_to_config(compilers, scope=None, init_config=True):
@_auto_compiler_spec DCNL def remove_compiler_from_config(compiler_spec, scope=None):
def all_compilers_config(scope=None, init_config=True):
def find_compilers(*paths):
def supported_compilers():
@_auto_compiler_spec DCNL def supported(compiler_spec):
@_auto_compiler_spec DCNL def find(compiler_spec, scope=None, init_config=True):
@_auto_compiler_spec DCNL def compilers_for_spec(compiler_spec, arch_spec=None, scope=None, use_cache=True, init_config=True):
@_auto_compiler_spec DCNL def compiler_for_spec(compiler_spec, arch_spec):
def class_for_compiler_name(compiler_name):
def all_os_classes():
def print_help():
def inspect_path(prefix):
def dependencies(spec, request='all'):
def parse_config_options(module_generator):
def filter_blacklisted(specs, module_name):
def dumpversion(compiler_path):
def get_html_theme_path():
def index_by(objects, *funcs):
def partition_list(elements, predicate):
def caller_locals():
def get_calling_module_name():
def attr_required(obj, attr_name):
def attr_setdefault(obj, name, value):
def list_modules(directory, **kwargs):
def key_ordering(cls):
def in_function(function_name):
def check_kwargs(kwargs, fun):
def match_predicate(*args):
def dedupe(sequence):
def duplicate_stream(original):
def _strip(line):
def process_stacktrace(countback):
def hline(label=None, **kwargs):
def terminal_size():
def config_variable_cols(elts, console_width, padding, cols=0):
def config_uniform_cols(elts, console_width, padding, cols=0):
def colify(elts, **options):
def colify_table(table, **options):
def colified(elts, **options):
def _color_when_value(when):
def get_color_when():
def set_color_when(when):
@contextmanager DCNL def color_when(value):
def colorize(string, **kwargs):
def clen(string):
def cextra(string):
def cwrite(string, stream=sys.stdout, color=None):
def cprint(string, stream=sys.stdout, color=None):
def cescape(string):
def filter_file(regex, repl, *filenames, **kwargs):
def change_sed_delimiter(old_delim, new_delim, *filenames):
def set_install_permissions(path):
def install(src, dest):
def install_tree(src, dest, **kwargs):
def is_exe(path):
def mkdirp(*paths):
def force_remove(*paths):
def touch(path):
def touchp(path):
def ancestor(dir, n=1):
def can_access(file_name):
def traverse_tree(source_root, dest_root, rel_path='', **kwargs):
def remove_dead_links(root):
def remove_if_dead_link(path):
def remove_linked_tree(path):
def fix_darwin_install_name(path):
def find(root, files, recurse=True):
def find_headers(headers, root, recurse=False):
def find_system_libraries(libraries, shared=True):
def find_libraries(libraries, root, shared=True, recurse=False):
def download_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir, delay=15):
def _patch_file(path, content):
def _extractall(self, path='.', members=None):
def main(argv, version=DEFAULT_VERSION):
def setdefaultproxy(proxytype=None, addr=None, port=None, rdns=True, username=None, password=None):
def get_server_versions():
def get_supported_protocol_versions():
def get_unsupported_lower_protocol():
def get_unsupported_upper_protocol():
def start_simulacron():
def prime_driver_defaults():
def prime_cluster(data_centers='3', version=None, cluster_name=DEFAULT_CLUSTER):
def start_and_prime_singledc(cluster_name=DEFAULT_CLUSTER):
def start_and_prime_cluster_defaults(number_of_dc=1, nodes_per_dc=3, version=None, cluster_name=DEFAULT_CLUSTER):
def prime_request(request):
def prime_query(query, rows=default_rows, column_types=default_column_types, when=None, then=None, cluster_name=DEFAULT_CLUSTER):
def clear_queries():
def get_sample(datatype):
def get_collection_sample(collection_type, datatype):
def execute_count(expected):
def setup_cluster_ssl(client_auth=False):
def setup_module():
def teardown_module():
def arrays_to_list_of_tuples(arrays, colnames):
def get_data(protocol_handler):
def verify_iterator_data(assertEqual, results):
def create_table_with_all_types(table_name, session, N):
def get_all_primitive_params(key):
def mock_session_pools(f):
def get_timeout(gross_time, start, end, precision, split_range):
def submit_and_wait_for_completion(unit_test, connection, start, end, increment, precision, split_range=False):
def gevent_un_patch_all():
def restore_saved_module(module):
def eventlet_un_patch_all():
def cyimport(import_path):
def pre_build_check():
def datetime_from_timestamp(timestamp):
def unix_time_from_uuid1(uuid_arg):
def datetime_from_uuid1(uuid_arg):
def min_uuid_from_time(timestamp):
def max_uuid_from_time(timestamp):
def uuid_from_time(time_arg, node=None, clock_seq=None):
def _future_completed(future):
def run_in_executor(f):
def _watch_callback(obj_weakref, method_name, *args, **kwargs):
def _clear_watcher(conn, expiring_weakref):
def tuple_factory(colnames, rows):
def named_tuple_factory(colnames, rows):
def dict_factory(colnames, rows):
def ordered_dict_factory(colnames, rows):
def cython_protocol_handler(colparser):
def _get_context(keyspaces, connections):
def create_keyspace_simple(name, replication_factor, durable_writes=True, connections=None):
def create_keyspace_network_topology(name, dc_replication_map, durable_writes=True, connections=None):
def drop_keyspace(name, connections=None):
def _get_index_name_by_column(table, column_name):
def sync_table(model, keyspaces=None, connections=None):
def sync_type(ks_name, type_model, connection=None):
def _update_options(model, connection=None):
def drop_table(model, keyspaces=None, connections=None):
def check_applied(result):
def format_log_context(msg, connection=None, keyspace=None):
def register_connection(name, hosts=None, consistency=None, lazy_connect=False, retry_connect=False, cluster_options=None, default=False, session=None):
def default():
def set_session(s):
def setup(hosts, default_keyspace, consistency=None, lazy_connect=False, retry_connect=False, **kwargs):
def _cql_from_cass_type(cass_type):
def execute_concurrent(session, statements_and_parameters, concurrency=100, raise_on_first_error=True, results_generator=False):
def execute_concurrent_with_args(session, statement, parameters, *args, **kwargs):
def lookup_casstype_simple(casstype):
def lookup_casstype(casstype):
def cql_typename(casstypename):
def download_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir, delay=15):
def _extractall(self, path='.', members=None):
def _build_install_args(options):
def _parse_args():
def main(version=DEFAULT_VERSION):
def test_real(func):
@pytest.fixture(autouse=True) DCNL def verify_cleanup():
@pytest.fixture DCNL def hass(loop):
@pytest.fixture DCNL def requests_mock():
@pytest.fixture DCNL def aioclient_mock():
@pytest.fixture DCNL def mqtt_mock(loop, hass):
@pytest.fixture DCNL def mock_openzwave():
def _get_device_with_no_state():
def _get_device_off():
def _get_device_auto():
def _get_device_on():
def test_get_device_detects_fan(mock_openzwave):
def test_fan_turn_on(mock_openzwave):
def test_fan_turn_off(mock_openzwave):
def test_fan_value_changed(mock_openzwave):
def _get_dyson_account_device_available():
def _get_dyson_account_device_not_available():
def _get_dyson_account_device_error():
def test_get_device_detects_none(hass, mock_openzwave):
def test_get_device_detects_rollershutter(hass, mock_openzwave):
def test_get_device_detects_garagedoor_switch(hass, mock_openzwave):
def test_get_device_detects_garagedoor_barrier(hass, mock_openzwave):
def test_roller_no_position_workaround(hass, mock_openzwave):
def test_roller_value_changed(hass, mock_openzwave):
def test_roller_commands(hass, mock_openzwave):
def test_roller_reverse_open_close(hass, mock_openzwave):
def test_switch_garage_value_changed(hass, mock_openzwave):
def test_switch_garage_commands(hass, mock_openzwave):
def test_barrier_garage_value_changed(hass, mock_openzwave):
def test_barrier_garage_commands(hass, mock_openzwave):
@pytest.fixture DCNL def hass_recorder():
def test_recorder_bad_commit(hass_recorder):
def test_recorder_bad_execute(hass_recorder):
def _process_timestamp(ts):
def setUpModule():
def tearDownModule():
@pytest.fixture DCNL def hass_recorder():
def _add_entities(hass, entity_ids):
def test_saving_state_include_domains(hass_recorder):
def test_saving_state_incl_entities(hass_recorder):
def test_saving_event_exclude_event_type(hass_recorder):
def test_saving_state_exclude_domains(hass_recorder):
def test_saving_state_exclude_entities(hass_recorder):
def test_saving_state_exclude_domain_include_entity(hass_recorder):
def test_saving_state_include_domain_exclude_entity(hass_recorder):
def test_recorder_setup_failure():
def setUpModule():
def tearDownModule():
@pytest.fixture(autouse=True) DCNL def pymochad_mock():
def test_get_device_detects_dimmer(mock_openzwave):
def test_get_device_detects_colorlight(mock_openzwave):
def test_get_device_detects_zw098(mock_openzwave):
def test_dimmer_turn_on(mock_openzwave):
def test_dimmer_transitions(mock_openzwave):
def test_dimmer_turn_off(mock_openzwave):
def test_dimmer_value_changed(mock_openzwave):
def test_dimmer_refresh_value(mock_openzwave):
def test_set_rgb_color(mock_openzwave):
def test_set_rgbw_color(mock_openzwave):
def test_zw098_set_color_temp(mock_openzwave):
def test_rgb_not_supported(mock_openzwave):
def test_no_color_value(mock_openzwave):
def test_no_color_channels_value(mock_openzwave):
def test_rgb_value_changed(mock_openzwave):
def test_rgbww_value_changed(mock_openzwave):
def test_rgbcw_value_changed(mock_openzwave):
def test_ct_value_changed(mock_openzwave):
def mock_responses(mock):
@asyncio.coroutine DCNL def test_valid_data(hass):
@asyncio.coroutine DCNL def test_low_battery(hass):
def test_write_device():
def _get_non_vacuum_device():
def _get_vacuum_device_cleaning():
def _get_vacuum_device_charging():
def _get_vacuum_device_pause():
def _get_vacuum_device_unknown_state():
@pytest.fixture(autouse=True) DCNL def pymochad_mock():
def test_get_device_detects_switch(mock_openzwave):
def test_switch_turn_on_and_off(mock_openzwave):
def test_switch_value_changed(mock_openzwave):
@patch('time.perf_counter') DCNL def test_switch_refresh_on_update(mock_counter, mock_openzwave):
@asyncio.coroutine DCNL def mock_async_subprocess():
def _get_device_without_state():
def _get_with_state():
def _get_with_standby_monitoring():
def mocked_exception(*args, **kwargs):
def mocked_requests_get(*args, **kwargs):
def mock_responses(mock):
def mocked_requests_get(*args, **kwargs):
def test_get_device_detects_none(mock_openzwave):
def test_get_device_detects_alarmsensor(mock_openzwave):
def test_get_device_detects_multilevelsensor(mock_openzwave):
def test_get_device_detects_multilevel_meter(mock_openzwave):
def test_multilevelsensor_value_changed_temp_fahrenheit(mock_openzwave):
def test_multilevelsensor_value_changed_temp_celsius(mock_openzwave):
def test_multilevelsensor_value_changed_other_units(mock_openzwave):
def test_multilevelsensor_value_changed_integer(mock_openzwave):
def test_alarm_sensor_value_changed(mock_openzwave):
def mocked_exception(*args, **kwargs):
def mocked_requests_get(*args, **kwargs):
def fire_pilight_message(protocol, data):
def setup_function():
def teardown_function():
def test_sensor_value_from_code():
def test_disregard_wrong_payload():
def test_variable_missing(caplog):
@pytest.fixture(autouse=True) DCNL def cast_mock():
def _mocked_presets(*args, **kwargs):
def default_component():
def sample_content(name):
def fake_add_device(devices, update_befor_add=False):
def test_get_device_no_component_mapping():
def test_get_device_component_mapping():
def test_get_device_component_mapping_mti():
def test_get_device_no_mapping():
def test_get_device_mapping_mt():
def test_get_device_mapping_mtii():
def test_get_device_mapping_mti_instance():
def test_config_google_home_entity_id_to_number():
def test_config_alexa_entity_id_to_number():
def test_warning_config_google_home_listen_port():
def setup_hass_instance(emulated_hue_config):
def start_hass_instance(hass):
@pytest.fixture(autouse=True) DCNL def mutagen_mock():
@patch('aioautomatic.Client.create_session_from_password') DCNL def test_invalid_credentials(mock_create_session, hass):
@patch('aioautomatic.Client.create_session_from_password') DCNL def test_valid_credentials(mock_create_session, hass):
def setup_module():
def teardown_module():
def _get_homehub_data(url):
@pytest.fixture DCNL def mock_ctrl():
@pytest.fixture DCNL def mock_scanner():
def test_config_minimal(hass, mock_scanner, mock_ctrl):
def test_config_full(hass, mock_scanner, mock_ctrl):
def test_config_error():
def test_config_controller_failed(hass, mock_ctrl, mock_scanner):
def test_scanner_update():
def test_scanner_update_error():
def test_scan_devices():
def test_get_device_name():
def mocked_requests(*args, **kwargs):
@asyncio.coroutine DCNL def async_scan_devices_mock(scanner):
def mock_cipher():
@pytest.fixture DCNL def device(hass, mock_openzwave):
@pytest.fixture DCNL def device_zxt_120(hass, mock_openzwave):
def test_zxt_120_swing_mode(device_zxt_120):
def test_temperature_unit(device):
def test_default_target_temperature(device):
def test_data_lists(device):
def test_target_value_set(device):
def test_operation_value_set(device):
def test_fan_mode_value_set(device):
def test_target_value_changed(device):
def test_temperature_value_changed(device):
def test_operation_value_changed(device):
def test_fan_mode_value_changed(device):
def test_operating_state_value_changed(device):
def test_fan_state_value_changed(device):
def test_override_single_value():
def test_override_by_domain():
def test_override_by_glob():
def test_glob_overrules_domain():
def test_exact_overrules_domain():
def test_merging_values():
def test_glob_order():
@patch('logging.getLogger') DCNL def test_deprecated_substitute_old_class(mock_get_logger):
@patch('logging.getLogger') DCNL def test_deprecated_substitute_new_class(mock_get_logger):
@patch('logging.getLogger') DCNL def test_config_get_deprecated_old(mock_get_logger):
@patch('logging.getLogger') DCNL def test_config_get_deprecated_new(mock_get_logger):
@asyncio.coroutine DCNL def test_async_track_states(hass):
def test_boolean():
def test_latitude():
def test_longitude():
def test_port():
def test_isfile():
def test_url():
def test_platform_config():
def test_ensure_list():
def test_entity_id():
def test_entity_ids():
def test_ensure_list_csv():
def test_event_schema():
def test_platform_validator():
def test_icon():
def test_time_period():
def test_service():
def test_service_schema():
def test_slug():
def test_string():
def test_temperature_unit():
def test_x10_address():
def test_template():
def test_template_complex():
def test_time_zone():
def test_datetime():
def test_key_dependency():
def test_has_at_least_one_key():
def test_enum():
def test_socket_timeout():
def change_yaml_files(check_dict):
def tearDownModule(self):
@patch('sys.exit') DCNL def test_validate_python(mock_exit):
def _url(path=''):
def setUpModule():
def tearDownModule():
@pytest.fixture(autouse=True) DCNL def mock_credstash():
def load_yaml(fname, string):
def test_representing_yaml_loaded_data():
def test_duplicate_key(caplog):
def init(empty=False):
def setup_platform(hass, config, add_devices_callback, discovery_info=None):
def init(empty=False):
def setup_platform(hass, config, add_devices_callback, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def get_scanner(hass, config):
def get_device(values, **kwargs):
def request_configuration(nest, hass, config):
def setup_nest(hass, nest, config, pin=None):
def setup(hass, config):
def setup(hass, config):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices_callback, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def get_device(hass, values, node_config, **kwargs):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def purge_old_data(instance, purge_days):
def _process_timestamp(ts):
def migrate_schema(instance):
def _create_index(engine, table_name, index_name):
def _drop_index(engine, table_name, index_name):
def _apply_update(engine, new_version, old_version):
def _inspect_schema_version(engine, session):
def setup(hass, config):
@asyncio.coroutine DCNL def async_setup(hass, config):
def setup(hass, config):
def setup(hass, config):
def setup(hass, base_config):
def setup(hass, config):
@bind_hass DCNL def execute_script(hass, name, data=None):
@bind_hass DCNL def execute(hass, filename, source, data=None):
def setup(hass, config):
def setup(hass, config):
def _valid_device(value, device_type):
def valid_sensor(value):
def valid_binary_sensor(value):
def setup(hass, config):
def get_rfx_object(packetid):
def get_pt2262_deviceid(device_id, nb_data_bits):
def get_pt2262_cmd(device_id, data_bits):
def get_pt2262_device(device_id):
def find_possible_pt2262_device(device_id):
def get_devices_from_config(config, device, hass):
def get_new_device(event, config, device, hass):
def apply_received_command(event):
def setup(hass, config):
def login():
def _zm_request(method, api_url, data=None):
def get_state(api_url):
def change_state(api_url, post_data):
def request_configuration(network, hass, config):
def setup_ecobee(hass, network, config):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config):
def virtualkey(hass, address, channel, param, proxy=None):
def set_var_value(hass, entity_id, value):
def set_dev_value(hass, address, channel, param, value, proxy=None):
def reconnect(hass):
def setup(hass, config):
def _system_callback_handler(hass, config, src, *args):
def _get_devices(hass, discovery_type, keys, proxy):
def _create_ha_name(name, channel, param, count):
def _hm_event_handler(hass, proxy, device, caller, attribute, value):
def _device_from_servicecall(hass, service):
def setup(hass, config):
def close_serial_port(*args):
def frame_is_relevant(entity, frame):
def x10_command(command):
def get_unit_status(code):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def convert_rgb_to_hsv(rgb):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def get_device(node, values, node_config, **kwargs):
def brightness_state(value):
def ct_to_rgb(temp):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def request_configuration(device_id, insteonhub, model, hass, add_devices_callback):
def setup_light(device_id, name, insteonhub, hass, add_devices_callback):
def config_from_file(filename, config=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def _from_hass_brightness(brightness):
def _from_hass_color(color):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def to_lutron_level(level):
def to_hass_level(level):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def rewrite_legacy(config):
def setup_platform(hass, config, add_devices, discovery_info=None):
def state(new_state):
def _from_hass_temperature(temperature):
def _to_hass_temperature(temperature):
def _from_hass_brightness(brightness):
def _to_hass_brightness(brightness):
def _from_hass_color(color):
def _to_hass_color(color):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_bridge(bridge, add_devices):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def brightness_to_percentage(byt):
def brightness_from_percentage(percent):
def retry(method):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_bridge(bridge, add_devices_callback, add_groups):
@asyncio.coroutine DCNL def async_trigger(hass, config, action):
@asyncio.coroutine DCNL def async_trigger(hass, config, action):
@asyncio.coroutine DCNL def async_trigger(hass, config, action):
@asyncio.coroutine DCNL def async_trigger(hass, config, action):
@asyncio.coroutine DCNL def async_trigger(hass, config, action):
@asyncio.coroutine DCNL def async_trigger(hass, config, action):
@asyncio.coroutine DCNL def async_trigger(hass, config, action):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config):
def setup_output(port):
def setup_input(port, pull_mode):
def write_output(port, value):
def read_input(port):
def edge_detect(port, event_callback, bounce):
@bind_hass DCNL def request_config(hass, name, callback, description=None, description_image=None, submit_caption=None, fields=None, link_name=None, link_url=None, entity_picture=None):
def notify_errors(request_id, error):
def request_done(request_id):
@asyncio.coroutine DCNL def async_setup(hass, config):
@async_callback DCNL def _async_get_instance(hass):
def is_socket_address(value):
def has_parent_dir(value):
def has_all_unique_files(value):
def is_persistence_file(value):
def is_serial_port(value):
def deprecated(key):
def setup(hass, config):
def pf_callback_factory(map_sv_types, devices, entity_class, add_devices=None):
def load_codes(path):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config):
def write_output(port, value):
def read_input(port):
def edge_detect(hass, port, event_callback, settle):
def activate_listener(hass):
def register_device(hass, api_key, name, device_id, device_ids, device_names):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config):
@asyncio.coroutine DCNL def async_setup(hass):
@asyncio.coroutine DCNL def async_setup(hass):
@asyncio.coroutine DCNL def async_setup(hass):
def setup(hass, config):
def setup(hass, config):
def get_service(hass, config, discovery_info=None):
def _authenticate(config):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def _authenticate(consumer_key, consumer_secret):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def _build_text_msg(message):
def _build_multipart_msg(message, images):
def _build_html_msg(text, html, images):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def send_message(sender, password, recipient, use_tls, message):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def _write_device(out, device):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def log_rate_limits(target, resp, level=20):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def get_service(hass, config, discovery_info=None):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config=None):
def volume_up(hass):
def volume_down(hass):
def volume_mute(hass):
def media_play_pause(hass):
def media_next_track(hass):
def media_prev_track(hass):
def setup(hass, config):
def setup(hass, config):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config):
def setup_proximity_component(hass, name, config):
def setup(hass, config):
def get_real_ip(request):
@asyncio.coroutine DCNL def auth_middleware(app, handler):
def is_trusted_ip(request):
def validate_password(request, api_password):
def setup(hass, config):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, disc_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices_callback, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices_callback, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def get_device(values, **kwargs):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def _setup_traditional_switches(logger, config, add_devices_callback):
def _setup_scenario_switches(logger, config, hass):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def request_configuration(device_id, insteonhub, model, hass, add_devices_callback):
def setup_switch(device_id, name, insteonhub, hass, add_devices_callback):
def config_from_file(filename, config=None):
def devices_from_config(domain_config, hass=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def dispose(event):
def setup_platform(hass, config, add_devices_callback, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices_callback, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def _get_person(rachio):
def _list_devices(rachio, manual_run_mins):
def set_lights_xy(hass, lights, x_val, y_val, brightness):
def set_lights_temp(hass, lights, mired, brightness):
def set_lights_rgb(hass, lights, rgb):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices_callback, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def set_arm_state(state, code=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def _create_processor_from_config(hass, camera_entity, config):
def _get_default_classifier(dest_path):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def get_date(zone, offset=0):
def to_unit(value, unit):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def convert_time_to_utc(timestr):
def setup_platform(hass, config, add_devices_callback, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_entities, discovery_info=None):
def infer_unit(value):
def get_cpu_temp():
def get_average(temp_base):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def round_nicely(number):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def _delta_mins(hhmm_time_str):
def _check_sabnzbd(sab_api, base_url, api_key):
def setup_sabnzbd(base_url, apikey, name, hass, config, add_devices, sab_api):
def request_configuration(host, name, hass, config, add_devices, sab_api):
def setup_platform(hass, config, add_devices, discovery_info=None):
def _read_config(hass):
def _write_config(hass, config):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices_callback, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def convert_pid(value):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def convert_to_camel(data):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def get_id(sensorid, feedtag, feedname, feedid, feeduserid):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def get_device(node, values, **kwargs):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def get_next_departure(sched, start_station_id, end_station_id, offset):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def exactly_two_period_keys(conf):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_entities, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def lookup_unit_for_sensor_type(sensor_type):
def devices_from_config(domain_config, hass=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def create_zone_sensor(tado, zone, name, zone_id, variable):
def create_device_sensor(tado, device, name, device_id, variable):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def _parse_update_data(topic, data):
def setup_platform(hass, config, add_devices, discovery_info=None):
def parse_api_response(response):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def get_from_conf(config, config_key, length):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def _parse_wsdot_timestamp(timestamp):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def convert_float(raw_value):
def convert_percent(raw_value):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def get_date(zone, offset=0):
def get_release_date(data):
def to_key(data):
def to_unit(value, unit):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def calc_min(sensor_values):
def calc_max(sensor_values):
def calc_mean(sensor_values, round_digits):
def config_from_file(filename, config=None):
def request_app_setup(hass, config, add_devices, config_path, discovery_info=None):
def request_oauth_completion(hass):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def validate_station(station):
def setup_platform(hass, config, add_devices, discovery_info=None):
def _get_bom_stations():
def bom_stations(cache_dir):
def closest_station(lat, lon, cache_dir):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def due_in_minutes(timestamp):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def _get_zamg_stations():
def zamg_stations(cache_dir):
def closest_station(lat, lon, cache_dir):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def get_temper_devices():
def setup_platform(hass, config, add_devices, discovery_info=None):
def reset_devices():
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup(hass, config):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discover_info=None):
def request_configuration(hass, config, url, add_devices_callback):
def setup_gpmdp(hass, config, code, add_devices):
def _load_config(filename):
def _save_config(filename, config):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def _retry(func):
def setup_platform(hass, config, add_devices, discovery_info=None):
def config_from_file(filename, config=None):
def setup_platform(hass, config, add_devices_callback, discovery_info=None):
def setup_plexserver(host, token, has_ssl, verify_ssl, hass, config, add_devices_callback):
def request_configuration(host, hass, config, add_devices_callback):
def setup_platform(hass, config, add_devices, discovery_info=None):
def _get_mac_address(ip_address):
def _config_from_file(filename, config=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_bravia(config, pin, hass, add_devices):
def request_configuration(config, hass, add_devices):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_tv(host, mac, name, customize, config, hass, add_devices):
def request_configuration(host, mac, name, customize, config, hass, add_devices):
def setup_platform(hass, config, add_devices, discovery_info=None):
def _parse_timespan(timespan):
def _get_entity_from_soco(hass, soco):
def soco_error(funct):
def soco_filter_upnperror(errorcodes=None):
def soco_coordinator(funct):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def _pianobar_exists():
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def request_configuration(hass, config, add_devices, oauth):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def trigger(hass, event, value1=None, value2=None, value3=None):
def setup(hass, config):
def check_node_schema(node, schema):
def check_value_schema(value, schema):
def node_name(node):
def get_device_component_mapping(value):
def get_device_mapping(value):
def sub_status(status, stage):
def setup(hass, base_config):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def kill_raspistill(*args):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config):
@asyncio.coroutine DCNL def async_get_handler(hass, config, async_add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_get_handler(hass, config, discovery_info=None):
def setup(hass, config):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config):
@Throttle(MIN_TIME_BETWEEN_UPDATES) DCNL def send_data(name, msg):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def register_services(hass):
def _apply_service(service, service_func, *service_func_args):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices_callback, discovery_info=None):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config):
def close_tunnel(_data):
def setup(hass, config):
def log_message(source, *parts):
def setup(hass, config):
def is_ignored(hass, name):
def populate_data():
def setup(hass, config):
def _request_app_setup(hass, config):
def _request_oauth_completion(hass, config):
def setup(hass, config):
def clean_socket_close(sock):
def setup(hass, config):
def setup(hass, config):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def dict_value_to_key(dict_map, comp_value):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def request_configuration(hass, name, host, serialnumber):
def setup(hass, base_config):
def setup_device(hass, config):
def _read_config(hass):
def _write_config(hass, config):
def event_initialized(event):
def convert(item, from_key, to_key):
@asyncio.coroutine DCNL def async_setup(hass, config):
def setup(hass, config):
def get_engine(hass, config):
def get_engine(hass, config):
def get_engine(hass, config):
def setup(hass, config):
def setup_output(pin):
def setup_input(pin, pull_mode):
def write_output(pin, value):
def read_input(pin):
def edge_detect(pin, event_callback, bounce):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config):
def get_value_from_json(json_dict, sensor_type, group, tool):
def _discover(hass, config, component_name, found_tellcore_devices):
def setup(hass, config):
def setup(hass, config):
def setup(hass, base_config):
def map_vera_device(vera_device, remap):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config):
def setup_scanner(hass, config, see, discovery_info=None):
def get_scanner(hass, config):
def _get_homehub_data(url):
def _parse_homehub_response(data_str):
def get_scanner(hass, config):
def setup_scanner(hass, config, see, discovery_info=None):
def get_scanner(hass, config):
def get_scanner(hass, config):
def get_scanner(hass, config):
def _req_json_rpc(url, method, *args, **kwargs):
def _get_token(host, username, password):
def setup_scanner(hass, config, see, discovery_info=None):
def get_scanner(hass, config):
def setup_scanner(hass, config, see, discovery_info=None):
def get_scanner(hass, config):
def setup_scanner(hass, config, see, discovery_info=None):
def get_scanner(hass, config):
def _get_skyhub_data(url):
def _parse_skyhub_response(data_str):
def get_scanner(hass, config):
def get_scanner(hass, config):
def get_scanner(hass, config):
def get_scanner(hass, config):
def get_scanner(hass, config):
def _parse_ddwrt_response(data_str):
def get_scanner(hass, config):
def get_scanner(hass, config):
def _parse_cisco_mac_address(cisco_hardware_addr):
def get_scanner(hass, config):
def get_scanner(hass, config):
def get_scanner(hass, config):
def get_scanner(hass, config):
def get_scanner(hass, config):
def get_scanner(hass, config):
def get_scanner(hass, config):
def _retrieve_list(host, token, **kwargs):
def _get_token(host, username, password):
def setup_scanner(hass, config, see, discovery_info=None):
def get_scanner(hass, config):
def _arp(ip_address):
def get_scanner(hass, config):
def _refresh_on_acccess_denied(func):
def _req_json_rpc(url, session_id, rpcmethod, subsystem, method, **params):
def _get_session_id(url, username, password):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup(hass, config):
def _validate_conf(config):
def setup(hass, config):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices_callback, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def get_device(values, **kwargs):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def day_to_string(day):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def get_opening_type(zone):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices_callback, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_entities, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
@asyncio.coroutine DCNL def async_setup_platform(hass, config, async_add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_entities, discovery_info=None):
def start_scanning(config, add_entities, client):
def setup_button(hass, config, add_entities, client, address):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def do_authentication(hass, config):
def setup(hass, config):
def setup_services(hass, track_new_found_calendars, calendar_service):
def do_setup(hass, config):
def get_calendar_info(hass, calendar):
def load_config(path):
def update_config(path, calendar):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def get_device(hass, values, **kwargs):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def create_climate_device(tado, hass, zone, name, zone_id):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices_callback, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup_platform(hass, config, add_devices, discovery_info=None):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config):
def setup(hass, config):
@callback DCNL def get_astral_location(hass):
@callback DCNL def get_astral_event_next(hass, event, utc_point_in_time=None, offset=None):
@callback DCNL def get_astral_event_date(hass, event, date=None):
@callback DCNL def is_up(hass, utc_point_in_time=None):
@callback DCNL def async_register_signal_handling(hass):
def dispatcher_connect(hass, signal, target):
@callback DCNL def async_dispatcher_connect(hass, signal, target):
def dispatcher_send(hass, signal, *args):
@callback DCNL def async_dispatcher_send(hass, signal, *args):
def attach(hass, obj):
def extract_entities(template):
def forgiving_round(value, precision=0):
def multiply(value, amount):
def timestamp_custom(value, date_format=DATE_STR_FORMAT, local=True):
def timestamp_local(value):
def timestamp_utc(value):
def forgiving_as_timestamp(value):
def strptime(string, fmt):
def fail_when_undefined(value):
def forgiving_float(value):
@contextfilter DCNL def random_every_time(context, values):
def deprecated_substitute(substitute_name):
def get_deprecated(config, new_name, old_name, default=None):
def run(args):
def run(args):
def install_osx():
def uninstall_osx():
def run(args):
def run(args):
def patch_weakref_tasks():
def disable_c_asyncio():
def _set_result_unless_cancelled(fut, result):
def _set_concurrent_future_state(concurr, source):
def _copy_future_state(source, dest):
def _chain_future(source, destination):
def run_coroutine_threadsafe(coro, loop):
def fire_coroutine_threadsafe(coro, loop):
def run_callback_threadsafe(loop, callback, *args):
def linkcode_resolve(domain, info):
def fingerprint():
def explore_module(package, explore_children):
def core_requirements():
def comment_requirement(req):
def gather_modules():
def generate_requirements_list(reqs):
def requirements_all_output(reqs):
def requirements_test_output(reqs):
def gather_constraints():
def write_requirements_file(data):
def write_test_requirements_file(data):
def write_constraints_file(data):
def validate_requirements_file(data):
def validate_requirements_test_file(data):
def validate_constraints_file(data):
def main():
def explore_module(package):
def main():
def get_remote_version():
def clean_component(source):
def write_component(source):
def main():
def combine(left, right):
def resource_path(relative_path):
def test_driver():
def test_read_data_file():
def test_init_custom_parameters():
def test_init_default_scoring():
def test_init_default_scoring_2():
def test_invaild_score_warning():
def test_invaild_dataset_warning():
def test_invaild_subsample_ratio_warning():
def test_invaild_mut_rate_plus_xo_rate():
def test_init_max_time_mins():
def test_init_n_jobs():
def test_timeout():
def test_balanced_accuracy():
def test_get_params():
def test_set_params():
def test_set_params_2():
def test_TPOTBase():
def test_conf_dict():
def test_conf_dict_2():
def test_conf_dict_3():
def test_random_ind():
def test_random_ind_2():
def test_score():
def test_score_2():
def test_score_3():
def test_sample_weight_func():
def test_fit_GroupKFold():
def test_predict():
def test_predict_2():
def test_predict_proba():
def test_predict_proba2():
def test_warm_start():
def test_fit():
def test_fit2():
def test_fit3():
def test_evaluated_individuals_():
def test_evaluate_individuals():
def test_imputer():
def test_imputer2():
def test_imputer3():
def test_tpot_operator_factory_class():
def check_export(op, tpot_obj):
def test_operators():
def test_export():
def test_generate_pipeline_code():
def test_generate_import_code():
def test_generate_import_code_2():
def test_PolynomialFeatures_exception():
def test_mutNodeReplacement():
def test_export_pipeline():
def test_export_pipeline_2():
def test_export_pipeline_3():
def test_export_pipeline_4():
def test_operator_export():
def test_indent():
def test_operator_type():
def test_get_by_name():
def test_gen():
def test_positive_integer():
def test_positive_integer_2():
def test_positive_integer_3():
def test_float_range():
def test_float_range_2():
def test_float_range_3():
def test_StackingEstimator_1():
def test_StackingEstimator_2():
def test_StackingEstimator_3():
def test_StackingEstimator_4():
def test_ZeroCount():
def positive_integer(value):
def float_range(value):
def _get_arg_parser():
def main():
def source_decode(sourcecode):
def set_sample_weight(pipeline_steps, sample_weight=None):
def ARGTypeClassFactory(classname, prange, BaseClass=ARGType):
def TPOTOperatorClassFactory(opsourse, opdict, BaseClass=Operator, ArgBaseClass=ARGType):
def balanced_accuracy(y_true, y_pred):
def get_by_name(opname, operators):
def export_pipeline(exported_pipeline, operators, pset):
def expr_to_tree(ind, pset):
def generate_import_code(pipeline, operators):
def pipeline_code_wrapper(pipeline_code):
def generate_pipeline_code(pipeline_tree, operators):
def generate_export_pipeline_code(pipeline_tree, operators):
def _indent(text, amount):
def _pre_test(func):
def varOr(population, toolbox, lambda_, cxpb, mutpb):
def eaMuPlusLambda(population, toolbox, mu, lambda_, cxpb, mutpb, ngen, pbar, stats=None, halloffame=None, verbose=0, max_time_mins=None):
def cxOnePoint(ind1, ind2):
def mutNodeReplacement(individual, pset):
def gen_timestamp():
def serialize(data):
def deserialize(data):
def hash_data(data):
def generate_key_pair():
def _fulfillment_to_details(fulfillment):
def _fulfillment_from_details(data, _depth=0):
def tx_collector():
def create_pipeline():
def start():
def create_pipeline(timeout=5, backlog_reassign_delay=5):
def start(timeout=5, backlog_reassign_delay=None):
def create_pipeline():
def get_changefeed():
def start():
def map_leafs(func, mapping):
def update(d, u):
def file_config(filename=None):
def env_config(config):
def update_types(config, reference, list_sep=':'):
def set_config(config):
def update_config(config):
def write_config(config, filename=None):
def autoconfigure(filename=None, config=None, force=False):
@lru_cache() DCNL def load_consensus_plugin(name=None):
@register_admin(MongoDBConnection) DCNL def add_replicas(connection, replicas):
@register_admin(MongoDBConnection) DCNL def remove_replicas(connection, replicas):
def unwind_block_transactions(block):
@singledispatch DCNL def create_database(connection, dbname):
@singledispatch DCNL def create_tables(connection, dbname):
@singledispatch DCNL def create_indexes(connection, dbname):
@singledispatch DCNL def drop_database(connection, dbname):
def init_database(connection=None, dbname=None):
def get_api_v1_info(api_prefix):
def base_ws_uri():
@task DCNL def set_host(host_index):
@task DCNL @parallel DCNL def prep_rethinkdb_storage(USING_EBS):
@task DCNL @parallel DCNL def install_rethinkdb():
@task DCNL @parallel DCNL def configure_rethinkdb():
@task DCNL @parallel DCNL def delete_rethinkdb_data():
@task DCNL @parallel DCNL def start_rethinkdb():
@task DCNL def harden_sshd():
@task DCNL def disable_root_login():
def get_naeips(client0):
@pytest.mark.parametrize('n_voters', range(8)) DCNL def test_vote_actions(n_voters):
def _test_additionalproperties(node, path=''):
@pytest.mark.bdb DCNL def test_cant_spend_same_input_twice_in_tx(b, genesis_block):
def test_validate_transaction_handles_exceptions(b, signed_create_tx):
@pytest.mark.usefixtures('inputs') DCNL def test_get_owned_ids_works_after_double_spend(b, user_pk, user_sk):
def main():
def setup(*_):
def ordered_load_yaml(path):
def render_section(section_name, obj):
def property_description(prop):
def property_type(prop):
def resolve_ref(ref):
def main():
def setup(*_):
def test_can_create_all_resources():
def test_docs_generated():
def unique_id(name):
def operation_looks_paginated(operation_model):
def create_transfer_manager(client, config, osutil=None):
def bucket_load(self, *args, **kwargs):
def object_summary_load(self, *args, **kwargs):
def upload_file(self, Filename, Bucket, Key, ExtraArgs=None, Callback=None, Config=None):
def download_file(self, Bucket, Key, Filename, ExtraArgs=None, Callback=None, Config=None):
def bucket_upload_file(self, Filename, Key, ExtraArgs=None, Callback=None, Config=None):
def bucket_download_file(self, Key, Filename, ExtraArgs=None, Callback=None, Config=None):
def object_upload_file(self, Filename, ExtraArgs=None, Callback=None, Config=None):
def object_download_file(self, Filename, ExtraArgs=None, Callback=None, Config=None):
def copy(self, CopySource, Bucket, Key, ExtraArgs=None, Callback=None, SourceClient=None, Config=None):
def bucket_copy(self, CopySource, Key, ExtraArgs=None, Callback=None, SourceClient=None, Config=None):
def object_copy(self, CopySource, ExtraArgs=None, Callback=None, SourceClient=None, Config=None):
def upload_fileobj(self, Fileobj, Bucket, Key, ExtraArgs=None, Callback=None, Config=None):
def bucket_upload_fileobj(self, Fileobj, Key, ExtraArgs=None, Callback=None, Config=None):
def object_upload_fileobj(self, Fileobj, ExtraArgs=None, Callback=None, Config=None):
def download_fileobj(self, Bucket, Key, Fileobj, ExtraArgs=None, Callback=None, Config=None):
def bucket_download_fileobj(self, Key, Fileobj, ExtraArgs=None, Callback=None, Config=None):
def object_download_fileobj(self, Fileobj, ExtraArgs=None, Callback=None, Config=None):
def import_module(name):
def setup_default_session(**kwargs):
def set_stream_logger(name='boto3', level=logging.DEBUG, format_string=None):
def _get_default_session():
def client(*args, **kwargs):
def resource(*args, **kwargs):
def inject_create_tags(event_name, class_attributes, **kwargs):
def get_resource_ignore_params(params):
def generate_docs(root_dir, session):
def document_sub_resource(section, resource_name, sub_resource_model, service_model, include_signature=True):
def document_collection_object(section, collection_model, include_signature=True):
def document_batch_action(section, resource_name, event_emitter, batch_action_model, service_model, collection_model, include_signature=True):
def document_collection_method(section, resource_name, action_name, event_emitter, collection_model, service_model, include_signature=True):
def document_action(section, resource_name, event_emitter, action_model, service_model, include_signature=True):
def document_load_reload_action(section, action_name, resource_name, event_emitter, load_model, service_model, include_signature=True):
def all_not_none(iterable):
def build_identifiers(identifiers, parent, params=None, raw_response=None):
def build_empty_response(search_path, operation_name, service_model):
def get_data_member(parent, path):
def create_request_parameters(parent, request_model, params=None, index=None):
def build_param_structure(params, target, value, index=None):
def skip_unless_has_memory_collection(cls):
def random_chars(num_chars):
@contextlib.contextmanager DCNL def temporary_file(mode):
def resolve_references(config, definitions):
def is_json_value_header(shape):
def get_service_module_name(service_model):
def merge_dicts(dict1, dict2, append_lists=False):
def percent_encode_sequence(mapping, safe=SAFE_CHARS):
def percent_encode(input_str, safe=SAFE_CHARS):
def parse_timestamp(value):
def parse_to_aware_datetime(value):
def datetime2timestamp(dt, default_timezone=None):
def calculate_sha256(body, as_hex=False):
def calculate_tree_hash(body):
def is_valid_endpoint_url(endpoint_url):
def check_dns_name(bucket_name):
def fix_s3_host(request, signature_version, region_name, default_endpoint_url='s3.amazonaws.com', **kwargs):
def switch_to_virtual_host_style(request, signature_version, default_endpoint_url=None, **kwargs):
def instance_cache(func):
def switch_host_s3_accelerate(request, operation_name, **kwargs):
def switch_host_with_param(request, param_name):
def deep_merge(base, extra):
def delay_exponential(base, growth_factor, attempts):
def create_exponential_delay_function(base, growth_factor):
def set_operation_specific_signer(context, signing_name, **kwargs):
def conditionally_calculate_md5(params, context, request_signer, **kwargs):
def sse_md5(params, **kwargs):
def copy_source_sse_md5(params, **kwargs):
def disable_signing(**kwargs):
def handle_copy_source_param(params, **kwargs):
def validate_ascii_metadata(params, **kwargs):
def fix_route53_ids(params, model, **kwargs):
def add_glacier_checksums(params, **kwargs):
def xform_name(name, sep='_', _xform_cache=_xform_cache, partial_renames=_partial_renames):
def prepare_request_dict(request_dict, endpoint_url, context=None, user_agent=None):
def create_request_object(request_dict):
def _get_configured_signature_version(service_name, client_config, scoped_config):
def first_non_none_response(responses, default=None):
def get_session(env_vars=None):
def create_credential_resolver(session):
def multi_file_load_config(*filenames):
def load_config(config_filename):
def raw_config_parse(config_filename, parse_subsections=True):
def build_profile_map(parsed_ini_config):
def instance_cache(func):
def create_loader(search_path_string=None):
def validate_parameters(params, shape):
def get_instance_public_methods(instance):
def document_model_driven_signature(section, name, operation_model, include=None, exclude=None):
def document_custom_signature(section, name, method, include=None, exclude=None):
def document_custom_method(section, method_name, method):
def document_model_driven_method(section, method_name, operation_model, event_emitter, method_description=None, example_prefix=None, include_input=None, include_output=None, exclude_input=None, exclude_output=None, document_output=True, include_signature=True):
def py_type_name(type_name):
def py_default(type_name):
def get_official_service_name(service_model):
def generate_docs(root_dir, session):
def document_paginate_method(section, paginator_name, event_emitter, service_model, paginator_config, include_signature=True):
def document_wait_method(section, waiter_name, event_emitter, service_model, service_waiter_model, include_signature=True):
def document_shared_examples(section, operation_model, example_prefix, shared_examples):
def convert_to_response_dict(http_response, operation_model):
def generate_db_auth_token(self, DBHostname, Port, DBUsername, Region=None):
def generate_presigned_url(self, ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None):
def generate_presigned_post(self, Bucket, Key, Fields=None, Conditions=None, ExpiresIn=3600):
def create_waiter_with_client(waiter_name, waiter_model, client):
def copy_kwargs(kwargs):
def total_seconds(delta):
def get_md5(*args, **kwargs):
def dict_to_sequence(d):
def get_netrc_auth(url):
def guess_filename(obj):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def unquote_unreserved(uri):
def requote_uri(uri):
def address_in_network(ip, net):
def dotted_netmask(mask):
def is_valid_cidr(string_network):
def should_bypass_proxies(url):
def get_environ_proxies(url):
def default_user_agent(name='python-requests'):
def parse_header_links(value):
def prepend_scheme_if_needed(url, new_scheme):
def get_auth_from_url(url):
def to_native_string(string, encoding='ascii'):
def urldefragauth(url):
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):
def merge_cookies(cookiejar, cookies):
def description_of(lines, name=u'stdin'):
def main(argv=None):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d):
def itervalues(d):
def iteritems(d):
def with_metaclass(meta, base=object):
def _dnsname_match(dn, hostname, max_wildcards=1):
def match_hostname(cert, hostname):
def add_stderr_logger(level=logging.DEBUG):
def disable_warnings(category=exceptions.HTTPWarning):
def guess_content_type(filename, default='application/octet-stream'):
def format_header_param(name, value):
def choose_boundary():
def iter_field_objects(fields):
def iter_fields(fields):
def encode_multipart_formdata(fields, boundary=None):
def is_fp_closed(obj):
def current_time():
def assert_fingerprint(cert, fingerprint):
def resolve_cert_reqs(candidate):
def resolve_ssl_version(candidate):
def create_urllib3_context(ssl_version=None, cert_reqs=None, options=None, ciphers=None):
def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None, ca_certs=None, server_hostname=None, ssl_version=None, ciphers=None, ssl_context=None):
def is_connection_dropped(conn):
def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT, source_address=None, socket_options=None):
def split_first(s, delims):
def parse_url(url):
def get_host(url):
def make_headers(keep_alive=None, accept_encoding=None, user_agent=None, basic_auth=None, proxy_basic_auth=None, disable_cache=None):
def connection_from_url(url, **kw):
def inject_into_urllib3():
def extract_from_urllib3():
def _basic_auth_str(username, password):
def dispatch_hook(key, hooks, hook_data, **kwargs):
def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):
def session():
def request(method, url, **kwargs):
def get(url, params=None, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, json=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def python_2_unicode_compatible(klass):
def regions():
def get_cur_file_size(fp, position_to_eof=False):
def check_lowercase_bucketname(n):
def bucket_lister(bucket, prefix='', delimiter='', marker='', headers=None, encoding_type=None):
def versioned_bucket_lister(bucket, prefix='', delimiter='', key_marker='', version_id_marker='', headers=None, encoding_type=None):
def multipart_upload_lister(bucket, key_marker='', upload_id_marker='', headers=None, encoding_type=None):
def part_lister(mpupload, part_number_marker=None):
def regions():
def versioned_bucket_lister(bucket, prefix='', delimiter='', marker='', generation_marker='', headers=None):
def regions():
def regions():
def regions():
def regions():
def regions():
def canonical_string(method, path, headers, expires=None, provider=None):
def retry_url(url, retry_on_404=True, num_retries=10, timeout=None):
def _build_instance_metadata_url(url, version, path):
def get_instance_metadata(version='latest', url='http://169.254.169.254', data='meta-data/', timeout=None, num_retries=5):
def get_instance_identity(version='latest', url='http://169.254.169.254', timeout=None, num_retries=5):
@contextmanager DCNL def setlocale(name):
def update_dme(username, password, dme_id, ip_address):
def fetch_file(uri, file=None, username=None, password=None):
def pythonize_name(name):
def write_mime_multipart(content, compress=False, deftype='text/plain', delimiter=':'):
def guess_mime_type(content, deftype):
def compute_md5(fp, buf_size=8192, size=None):
def find_matching_headers(name, headers):
def merge_headers_by_name(name, headers):
def host_is_ipv6(hostname):
def parse_host(hostname):
def regions():
def regions(**kw_params):
def set_default_credentials(aws_access_key_id, aws_secret_access_key):
def regions():
def connect_to_region(region_name, **kw_params):
def connect_sqs(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_s3(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_gs(gs_access_key_id=None, gs_secret_access_key=None, **kwargs):
def connect_ec2(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_elb(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_autoscale(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_cloudwatch(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_sdb(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_fps(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_mturk(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_cloudfront(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_vpc(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_rds(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_rds2(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_emr(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_sns(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_iam(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_route53(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_cloudformation(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_euca(host=None, aws_access_key_id=None, aws_secret_access_key=None, port=8773, path='/services/Eucalyptus', is_secure=False, **kwargs):
def connect_glacier(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_ec2_endpoint(url, aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_walrus(host=None, aws_access_key_id=None, aws_secret_access_key=None, port=8773, path='/services/Walrus', is_secure=False, **kwargs):
def connect_ses(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_sts(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_ia(ia_access_key_id=None, ia_secret_access_key=None, is_secure=False, **kwargs):
def connect_dynamodb(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_swf(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_cloudsearch(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_cloudsearch2(aws_access_key_id=None, aws_secret_access_key=None, sign_request=False, **kwargs):
def connect_cloudsearchdomain(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_beanstalk(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_elastictranscoder(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_redshift(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_support(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_cloudtrail(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_directconnect(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_kinesis(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_logs(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_route53domains(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_cognito_identity(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_cognito_sync(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_kms(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_awslambda(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_codedeploy(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_configservice(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_cloudhsm(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_ec2containerservice(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_machinelearning(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def storage_uri(uri_str, default_scheme='file', debug=0, validate=True, bucket_storage_uri_class=BucketStorageUri, suppress_consec_slashes=True, is_latest=False):
def storage_uri_for_key(key):
def fib(cv=1, lv=0):
def get_manager(cls):
def regions():
def connect_to_region(region_name, **kw_params):
def GetValidHostsForCert(cert):
def ValidateCertificateHostname(cert, hostname):
def regions():
def regions():
def connect_to_region(region_name, **kw_params):
def regions(**kw_params):
def connect_to_region(region_name, **kw_params):
def get_region(region_name, **kw_params):
def regions():
def connect_to_region(region_name, **kw_params):
def regions():
def connect_to_region(region_name, **kw_params):
def regions():
def regions():
def regions():
def connect_to_region(region_name, **kw_params):
def get_auth_handler(host, config, provider, requested_capability=None):
def regions():
def connect_to_region(region_name, **kw_params):
def regions():
def regions():
def regions():
def connect_to_region(region_name, **kw_params):
def regions():
def regions():
def regions():
def regions():
def regions():
def connect_to_region(region_name, **kw_params):
def regions():
def connect_to_region(region_name, **kw_params):
def load_endpoint_json(path):
def _load_json_file(path):
def merge_endpoints(defaults, additions):
def load_regions():
def _load_builtin_endpoints(_cache=_endpoints_cache):
def get_regions(service_name, region_cls=None, connection_cls=None):
def connect(service_name, region_name, region_cls=None, connection_cls=None, **kw_params):
def _get_region(service_name, region_name, region_cls=None, connection_cls=None):
def _get_region_with_heuristics(service_name, region_name, region_cls=None, connection_cls=None):
def regions():
def connect_to_region(region_name, **kw_params):
def start(server):
def sshclient_from_instance(instance, ssh_key_file, host_key_file='~/.ssh/known_hosts', user_name='root', ssh_pwd=None):
def regions():
def minimum_part_size(size_in_bytes, default_part_size=DEFAULT_PART_SIZE):
def tree_hash(fo):
def compute_hashes_from_fileobj(fileobj, chunk_size=(1024 * 1024)):
def tree_hash_from_str(str_as_bytes):
def regions():
def resume_file_upload(vault, upload_id, part_size, fobj, part_hash_map, chunk_size=_ONE_MEGABYTE):
def regions():
def regions():
def regions():
def regions():
def regions():
def regions(**kw_params):
def connect_to_region(region_name, **kw_params):
def regions():
def regions():
def regions():
def regions():
def regions():
def regions():
def connect_to_region(region_name, **kw_params):
def regions():
def serialize_num(val):
def get_dynamodb_type(val, use_boolean=True):
def dynamize_value(val):
def item_object_hook(dct):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def python_2_unicode_compatible(klass):
def spawn(function, *args, **kwargs):
def test_close_connections():
def test_reuse_connections():
def retry(ExceptionToCheck, tries=4, delay=3, backoff=2, logger=None):
def fake_loads_value_error(content, *args, **kwargs):
def fake_loads_json_error(content, *args, **kwargs):
def _yield_all_region_tests(region, expected_signature_version='hmac-v4-s3', dns_suffix='.amazonaws.com'):
def fake_loads_value_error(content, *args, **kwargs):
def fake_loads_json_error(content, *args, **kwargs):
def cleanup():
def is_testnet(inp):
def set_network(*args):
def get_tx_composite(inputs, outputs, output_value, change_address=None, network=None):
def new(arg=None):
def is_bip66(sig):
def forbid_command(command_obj, cc_list=None, config=None):
def http_content_security_policy(http_server):
def make_csrf_token(secret, session_id, ts=None):
def valid_csrf_token(secret, session_id, csrf_token):
def evaluate_signature_key_trust(config, email, tree):
def PackIntSet(ints):
def UnpackIntSet(data):
def PackLongList(longs):
def UnpackLongList(data):
def b64c(b):
def b64w(b):
def escape_html(t):
def sha1b64(*data):
def sha512b64(*data):
def strhash(s, length, obfuscate=None):
def b36(number):
def string_to_rank(text, maxint=sys.maxint):
def string_to_intlist(text):
def randomish_uid():
def okay_random(length, *seeds):
def reflow_text(text, quoting=False, target_width=65):
def elapsed_datetime(timestamp):
def friendly_number(number, base=1000, decimals=0, suffix='', powers=['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']):
def get_free_disk_bytes(dirname):
def dict_merge(*dicts):
def play_nice_with_threads(sleep=True, weak=False, deadline=None):
def thumbnail(fileobj, output_fd, height=None, width=None):
def monkey_patch(org_func, wrapper):
def RuledContainer(pcls):
def BoolCheck(value):
def SlugCheck(slug, allow=''):
def SlashSlugCheck(slug):
def RouteProtocolCheck(proto):
def DnsNameValid(dnsname):
def HostNameValid(host):
def HostNameCheck(host):
def B36Check(b36val):
def NotUnicode(string):
def PathCheck(path):
def WebRootCheck(path):
def FileCheck(path):
def DirCheck(path):
def NewPathCheck(path):
def UrlCheck(url):
def EmailCheck(email):
def GPGKeyCheck(value):
def MimeAttachmentDisposition(part, kind, newpart):
def MimeReplacePart(part, newpart, keep_old_headers=False):
def UnwrapMimeCrypto(part, protocols=None, psi=None, pei=None, charsets=None, unwrap_attachments=True, depth=0):
def UnwrapPlainTextCrypto(part, protocols=None, psi=None, pei=None, charsets=None, depth=0):
def ObscureSubject(subject):
def ObscureNames(hdr):
def ObscureSender(sender):
def ObscureAllRecipients(sender):
def GnuPGKeyGenerator(gnupg, **kwargs):
def ContactVCard(parent):
def ProfileVCard(parent):
def _get_creation_time(m):
def _update_scores(session, key_id, key_info, known_keys_list):
def _normalize_key(session, key_info):
def filter_hook(session, msg_mid, msg, keywords, **kwargs):
def GroupVCard(parent):
def meta_kw_extractor(index, msg_mid, msg, msg_size, msg_ts, **kwargs):
def NewEventId():
def HeaderPrintMTADetails(message):
def HeaderPrintMUADetails(message, mta=None):
def HeaderPrintGenericDetails(message, which=MUA_HP_HEADERS):
def HeaderPrints(message):
def decode_header(header):
def safe_decode_hdr(msg=None, name=None, hdr=None, charset=None):
def safe_parse_date(date_hdr):
def safe_message_ts(msg, default=None, msg_mid=None, msg_id=None, session=None):
def UnorderedPicklable(parent, editable=False):
def DisableUnbrokeredConnections():
def SslWrapOnlyOnce(org_sslwrap, sock, *args, **kwargs):
def _parse_imap(reply):
def paragraph_id_extractor(index, msg, ctype, textpart, **kwargs):
def TickJob(session):
def on_plugin_start(config):
def on_plugin_shutdown(config):
def _find_git_files(dirname='', git_dir=None):
def getLogMessage(commitSHA):
def versionFromCommitNo(commitNo):
def side_by_side_diff(old_text, new_text):
def record_activity(template, login_user=None, **kwargs):
def save_to_db(item, msg='Saved DCSP to DCSP db', print_error=True):
def safe_query(self, model, column_name, value, parameter_name):
def create_save_resized_image(image_file, basewidth, maintain_aspect, height_size, upload_path, ext='jpg', remove_after_upload=False, resize=True):
def create_save_image_sizes(image_file, image_sizes_type, unique_identifier=None):
def make_frontend_url(path, parameters=None):
def send_email(to, action, subject, html):
def send_email_with_action(user, action, **kwargs):
def send_email_confirmation(email, link):
def send_email_new_session(email, event_name, link):
def send_email_session_accept_reject(email, session, link):
def send_email_role_invite(email, role_name, event_name, link):
def send_email_after_event(email, event_name, upcoming_events):
def send_email_for_monthly_fee_payment(email, event_name, previous_month, amount, app_name, link):
def send_followup_email_for_monthly_fee_payment(email, event_name, previous_month, amount, app_name, link):
def jwt_authenticate(email, password):
def jwt_identity(payload):
def get_identity():
def event_query(self, query_, view_kwargs, event_id='event_id', event_identifier='event_identifier', permission='is_coorganizer_endpoint_related_to_event'):
def upload(uploaded_file, key, **kwargs):
def upload_local(uploaded_file, key, **kwargs):
def upload_to_aws(bucket_name, aws_region, aws_key, aws_secret, file, key, acl='public-read'):
def generate_hash(key):
def second_order_decorator(inner_dec):
def jwt_required(fn, realm=None):
@second_order_decorator(jwt_required) DCNL def is_super_admin(f):
@second_order_decorator(jwt_required) DCNL def is_admin(f):
@second_order_decorator(jwt_required) DCNL def is_user_itself(f):
@second_order_decorator(jwt_required) DCNL def is_organizer(f):
@second_order_decorator(jwt_required) DCNL def is_coorganizer(f):
@second_order_decorator(jwt_required) DCNL def is_registrar(f):
@second_order_decorator(jwt_required) DCNL def is_track_organizer(f):
@second_order_decorator(jwt_required) DCNL def is_moderator(f):
@second_order_decorator(jwt_required) DCNL def accessible_events(f):
def sorted_dict(data):
def _order_json(data, srv):
def _download_media(data, srv, dir_path, settings):
def _generate_meta():
def export_event_json(event_id, settings):
def create_export_job(task_id, event_id):
def make_filename(name):
def is_downloadable(url):
def get_filename_from_cd(cd):
@jwt_required DCNL def is_super_admin(view, view_args, view_kwargs, *args, **kwargs):
def is_coorganizer_endpoint_related_to_event(view, view_args, view_kwargs, *args, **kwargs):
@jwt_required DCNL def is_user_itself(view, view_args, view_kwargs, *args, **kwargs):
@jwt_required DCNL def is_coorganizer_or_user_itself(view, view_args, view_kwargs, *args, **kwargs):
@jwt_required DCNL def is_speaker_for_session(view, view_args, view_kwargs, *args, **kwargs):
@jwt_required DCNL def is_session_self_submitted(view, view_args, view_kwargs, *args, **kwargs):
@jwt_required DCNL def is_registrar(view, view_args, view_kwargs, *args, **kwargs):
@jwt_required DCNL def is_registrar_or_user_itself(view, view_args, view_kwargs, *args, **kwargs):
@jwt_required DCNL def is_track_organizer(view, view_args, view_kwargs, *args, **kwargs):
@jwt_required DCNL def is_moderator(view, view_args, view_kwargs, *args, **kwargs):
def permission_manager(view, view_args, view_kwargs, *args, **kwargs):
def has_access(access_level, **kwargs):
@celery_routes.route('/tasks/<string:task_id>') DCNL def celery_task(task_id):
@home_routes.route('/') DCNL def index():
def health_check_celery():
def health_check_db():
def check_migrations():
def health_check_migrations():
@api.errorhandler DCNL def default_error_handler(error):
@celery.task(base=RequestContextTask, name='import.event', bind=True, throws=(BaseError,)) DCNL def import_event_task(self, file, source_type, creator_id):
def extract_special_queries(queries):
def apply_special_queries(query, specials):
def event_location(value, query):
def event_search_location(value, query):
def _get_queryset(klass):
def _make_url_query(args):
def get_object_list(klass, **kwargs):
def get_list_or_404(klass, **kwargs):
def get_object_or_404(klass, id_):
def get_object_in_event(klass, id_, event_id):
def get_paginated_list(klass, url=None, args={}, **kwargs):
def fix_attribute_names(payload, api_model):
def handle_extra_payload(payload, api_model):
def validate_payload(payload, api_model, check_required=True):
def save_db_model(new_model, model_name, event_id=None):
def create_model(model, data, event_id=None):
def delete_model(model, item_id, event_id=None):
def update_model(model, item_id, data, event_id=None):
def requires_auth(f):
@jwt_required() DCNL def auth_jwt():
def auth_basic():
def parse_args(parser, keep_none=False):
def model_custom_form(cf_data, model):
def can_access(func):
def can_access_account(func):
def _available_path(folder, filename):
def get_file_from_request(ext=None, folder=None, name='file'):
def _trim_id(data):
def _delete_fields(srv, data):
def _upload_media_queue(srv, obj):
def _upload_media(task_handle, event_id, base_path):
def _fix_related_fields(srv, data, service_ids):
def create_service_from_json(task_handle, data, srv, event_id, service_ids=None):
def import_event_json(task_handle, zip_path):
def is_downloadable(url):
def get_filename_from_cd(cd):
def write_file(file, data):
def create_import_job(task):
def update_import_job(task, result, result_status):
def send_import_mail(task, result):
def sorted_dict(data):
def _order_json(data, srv):
def _download_media(data, srv, dir_path, settings):
def _generate_meta():
def export_event_json(event_id, settings):
def create_export_job(task_id, event_id):
def send_export_mail(event_id, result):
def make_filename(name):
def speakers_marshal_with(fields=None, fields_private=None):
def create_user(email, password, is_verified=True):
def create_event(name='TestEvent', creator_email=None, **kwargs):
def create_session(event_id, serial_no='', **kwargs):
def create_services(event_id, serial_no=''):
def get_path(*args):
@utils_routes.route('/pic/<path:filename>') DCNL def send_pic(filename):
@utils_routes.route('/calendar/<path:filename>') DCNL def send_cal(filename):
@utils_routes.route('/serve_static/<path:filename>') DCNL def serve_static(filename):
@events.route('/<int:event_id>/role-invite/<hash>/', methods=['GET', 'POST']) DCNL def user_role_invite(event_id, hash):
@events.route('/<int:event_id>/role-invite/decline/<hash>/', methods=['GET', 'POST']) DCNL def user_role_invite_decline(event_id, hash):
def json_serial(obj):
@home_routes.route('/password/reset/', methods=('GET', 'POST')) DCNL def password_reset_view():
@home_routes.route('/reset_password/<hash>/', methods=('GET', 'POST')) DCNL def change_password_view(hash):
@home_routes.route('/logout/') DCNL @login_required DCNL def logout_view():
@home_routes.route('/set_role/', methods=('GET', 'POST')) DCNL @login_required DCNL def set_role():
def get_event_json(event_id):
def save_event_from_json(json, event_id=None):
def save_tickets(tickets_data, event):
def save_logo(logo_url, event_id):
def convert_background_to_jpg(background_url):
def save_untouched_background(background_url, event_id):
def save_resized_background(background_image_file, event_id, size, image_sizes):
def save_to_db(item, msg='Saved DCSP to DCSP db', print_error=True):
def delete_from_db(item, msg='Deleted DCSP from DCSP db'):
def record_activity(template, login_user=None, **kwargs):
def update_version(event_id, is_created, column_to_increment):
def update_or_create(model, event_id, **kwargs):
def upload(uploaded_file, key, **kwargs):
def upload_local(uploaded_file, key, **kwargs):
def upload_to_aws(bucket_name, aws_region, aws_key, aws_secret, file, key, acl='public-read'):
def generate_hash(key):
def get_event_id():
def send_email_invitation(email, event_name, link):
def send_new_session_organizer(email, event_name, link):
def send_session_accept_reject(email, session_name, acceptance, link, subject=None, message=None):
def send_schedule_change(email, session_name, link):
def send_next_event(email, event_name, link, up_coming_events):
def send_after_event(email, event_name, upcoming_events):
def send_event_publish(email, event_name, link):
def send_email_after_account_create(form):
def send_email_after_account_create_with_password(form):
def send_email_confirmation(form, link):
def send_email_when_changes_email(old_email, new_email):
def send_email_with_reset_password_hash(email, link):
def send_email_for_event_role_invite(email, role, event, link):
def send_email_for_after_purchase(email, invoice_id, order_url, event_name, event_organiser):
def send_email_after_cancel_ticket(email, invoice_id, order_url, event_name, cancel_note):
def send_email_for_after_purchase_organizers(email, buyer_email, invoice_id, order_url, event_name, event_organiser):
def send_email_for_expired_orders(email, event_name, invoice_id, order_url):
def send_email_for_monthly_fee_payment(email, event_name, date, amount, payment_url):
def send_followup_email_for_monthly_fee_payment(email, event_name, date, amount, payment_url):
def send_email_after_export(email, event_name, result):
def send_email_after_import(email, result):
def send_email(to, action, subject, html):
def send_notif_after_export(user, event_name, result):
def send_notif_for_after_purchase(user, invoice_id, order_url):
def send_notif_for_after_purchase_organizer(user, invoice_id, order_url, event_name, buyer_email):
def send_notif_for_resend(user, invoice_id, order_url, event_name, buyer_email):
def ensure_social_link(website, link):
def get_request_stats():
def update_state(task_handle, state, result=None):
def save_untouched_photo(photo_url, event_id, speaker_id):
def save_resized_photo(background_image_file, event_id, speaker_id, size, image_sizes):
def get_path_of_temp_url(url):
def save_event_image(image_url, upload_path, ext='png', remove_after_upload=False):
def save_resized_image(image_file, basewidth, aspect, height_size, upload_path, ext='jpg', remove_after_upload=False):
def slugify(text):
def new_send(self, *sender, **kwargs):
def get_settings():
def set_settings(**kwargs):
def create_user(email, password, is_verified=True):
@hooks.before('Authentication DCSP > DCSP JWT DCSP Authentication DCSP > DCSP Authenticate DCSP and DCSP generate DCSP token') DCNL def skip_auth(transaction):
@hooks.before('Users DCSP > DCSP Users DCSP Collection DCSP > DCSP List DCSP All DCSP Users') DCNL def user_get_list(transaction):
@hooks.before('Users DCSP > DCSP Users DCSP Collection DCSP > DCSP Create DCSP User') DCNL def user_post(transaction):
@hooks.before('Users DCSP > DCSP User DCSP Details DCSP > DCSP Get DCSP Details') DCNL def user_get_detail(transaction):
@hooks.before('Users DCSP > DCSP User DCSP Details DCSP > DCSP Update DCSP User') DCNL def user_patch(transaction):
@hooks.before('Users DCSP > DCSP User DCSP Details DCSP > DCSP Delete DCSP User') DCNL def user_delete(transaction):
@hooks.before('Users DCSP > DCSP Get DCSP User DCSP Details DCSP for DCSP a DCSP Notification DCSP > DCSP Get DCSP User DCSP Details DCSP for DCSP a DCSP Notification') DCNL def user_notification(transaction):
@hooks.before('Users DCSP > DCSP Get DCSP User DCSP Details DCSP for DCSP an DCSP Event DCSP Invoice DCSP > DCSP Get DCSP User DCSP Details DCSP for DCSP an DCSP Event DCSP Invoice') DCNL def user_event_invoice(transaction):
@hooks.before('Users DCSP > DCSP Get DCSP User DCSP Details DCSP for DCSP an DCSP Access DCSP Code DCSP > DCSP Get DCSP User DCSP Details DCSP for DCSP an DCSP Access DCSP Code') DCNL def user_access_code(transaction):
@hooks.before('Users DCSP > DCSP Get DCSP User DCSP Details DCSP for DCSP an DCSP Email DCSP Notification DCSP > DCSP Get DCSP User DCSP Details DCSP for DCSP an DCSP Email DCSP Notification') DCNL def user_email_notification(transaction):
@hooks.before('Users DCSP > DCSP Get DCSP User DCSP Details DCSP for DCSP a DCSP Discount DCSP Code DCSP > DCSP Get DCSP User DCSP Details DCSP for DCSP a DCSP Discount DCSP Code') DCNL def user_discount_code(transaction):
@hooks.before('Users DCSP > DCSP Get DCSP User DCSP Details DCSP for DCSP a DCSP Speaker DCSP > DCSP Get DCSP User DCSP Details DCSP for DCSP a DCSP Speaker') DCNL def user_speaker(transaction):
@hooks.before('Events DCSP > DCSP Events DCSP Collection DCSP > DCSP List DCSP All DCSP Events') DCNL def event_get_list(transaction):
@hooks.before('Events DCSP > DCSP Events DCSP Collection DCSP > DCSP Create DCSP Event') DCNL def event_post(transaction):
@hooks.before('Events DCSP > DCSP Event DCSP Details DCSP > DCSP Event DCSP Details') DCNL def event_get_detail(transaction):
@hooks.before('Events DCSP > DCSP Event DCSP Details DCSP > DCSP Update DCSP Event') DCNL def event_patch(transaction):
@hooks.before('Events DCSP > DCSP Event DCSP Details DCSP > DCSP Delete DCSP Event') DCNL def event_delete(transaction):
@hooks.before('Events DCSP > DCSP Events DCSP of DCSP an DCSP Event DCSP Type DCSP > DCSP List DCSP All DCSP Events DCSP of DCSP an DCSP Event DCSP Type') DCNL def evnt_type_event_get_list(transaction):
@hooks.before('Events DCSP > DCSP Events DCSP under DCSP an DCSP Event DCSP Topic DCSP > DCSP List DCSP All DCSP Events DCSP under DCSP an DCSP Event DCSP Topic') DCNL def evnt_topic_event_get_list(transaction):
@hooks.before('Events DCSP > DCSP Events DCSP under DCSP an DCSP Event DCSP Sub-topic DCSP > DCSP List DCSP All DCSP Events DCSP under DCSP an DCSP Event DCSP Sub-topic') DCNL def evnt_sub_topic_event_get_list(transaction):
@hooks.before('Events DCSP > DCSP Events DCSP under DCSP a DCSP User DCSP > DCSP List DCSP All DCSP Events DCSP under DCSP a DCSP User') DCNL def user_event_get_list(transaction):
@hooks.before('Events DCSP > DCSP Events DCSP for DCSP a DCSP Discount DCSP Code DCSP > DCSP List DCSP All DCSP Events DCSP for DCSP a DCSP Discount DCSP Code') DCNL def discount_code_event_get_list(transaction):
@hooks.before('Events DCSP > DCSP Get DCSP Event DCSP for DCSP a DCSP Ticket DCSP > DCSP Event DCSP Details DCSP for DCSP a DCSP Ticket') DCNL def event_ticket(transaction):
@hooks.before('Events DCSP > DCSP Get DCSP Event DCSP for DCSP a DCSP Microlocation DCSP > DCSP Event DCSP Details DCSP for DCSP a DCSP Microlocation') DCNL def event_microlocation(transaction):
@hooks.before('Events DCSP > DCSP Get DCSP Event DCSP for DCSP a DCSP Social DCSP Link DCSP > DCSP Event DCSP Details DCSP for DCSP a DCSP Social DCSP Link') DCNL def event_social_link(transaction):
@hooks.before('Events DCSP > DCSP Get DCSP Event DCSP for DCSP a DCSP Sponsor DCSP > DCSP Event DCSP Details DCSP for DCSP a DCSP Sponsor') DCNL def event_sponsor(transaction):
@hooks.before('Events DCSP > DCSP Get DCSP Event DCSP for DCSP a DCSP Speakers DCSP Call DCSP > DCSP Event DCSP Details DCSP for DCSP a DCSP Speakers DCSP Call') DCNL def event_speakers_call(transaction):
@hooks.before('Events DCSP > DCSP Get DCSP Event DCSP for DCSP a DCSP Track DCSP > DCSP Event DCSP Details DCSP for DCSP a DCSP Track') DCNL def event_track(transaction):
@hooks.before('Events DCSP > DCSP Get DCSP Event DCSP for DCSP a DCSP Session DCSP Type DCSP > DCSP Event DCSP Details DCSP for DCSP a DCSP Session DCSP Type') DCNL def event_session_types(transaction):
@hooks.before('Events DCSP > DCSP Get DCSP Event DCSP for DCSP an DCSP Event DCSP Copyright DCSP > DCSP Event DCSP Details DCSP for DCSP an DCSP Event DCSP Copyright') DCNL def event_event_copyright(transaction):
@hooks.before('Events DCSP > DCSP Get DCSP Event DCSP for DCSP a DCSP Tax DCSP > DCSP Event DCSP Details DCSP for DCSP a DCSP Tax') DCNL def event_tax(transaction):
@hooks.before('Events DCSP > DCSP Get DCSP Event DCSP for DCSP an DCSP Event DCSP Invoice DCSP > DCSP Event DCSP Details DCSP for DCSP an DCSP Event DCSP Invoice') DCNL def event_event_invoice(transaction):
@hooks.before('Events DCSP > DCSP Get DCSP Event DCSP for DCSP a DCSP Discount DCSP Code DCSP > DCSP Event DCSP Details DCSP for DCSP a DCSP Discount DCSP Code') DCNL def event_discount_code(transaction):
@hooks.before('Events DCSP > DCSP Get DCSP Event DCSP for DCSP a DCSP Session DCSP > DCSP Event DCSP Details DCSP for DCSP a DCSP Session') DCNL def event_sessions(transaction):
@hooks.before('Events DCSP > DCSP Get DCSP Event DCSP for DCSP a DCSP Ticket DCSP Tag DCSP > DCSP Event DCSP Details DCSP for DCSP a DCSP Ticket DCSP Tag') DCNL def event_ticket_tag(transaction):
@hooks.before('Events DCSP > DCSP Get DCSP Event DCSP for DCSP a DCSP Role DCSP Invite DCSP > DCSP Event DCSP Details DCSP for DCSP a DCSP Role DCSP Invite') DCNL def event_role_invite(transaction):
@hooks.before('Events DCSP > DCSP Get DCSP Event DCSP for DCSP a DCSP Speaker DCSP > DCSP Event DCSP Details DCSP for DCSP a DCSP Speaker') DCNL def event_speaker(transaction):
@hooks.before('Events DCSP > DCSP Get DCSP Event DCSP for DCSP an DCSP Email DCSP Notification DCSP > DCSP Event DCSP Details DCSP for DCSP an DCSP Email DCSP Notification') DCNL def event_email_notification(transaction):
@hooks.before('Events DCSP > DCSP Get DCSP Event DCSP for DCSP an DCSP Attendee DCSP > DCSP Event DCSP Details DCSP for DCSP an DCSP Attendee') DCNL def event_attendee(transaction):
@hooks.before('Events DCSP > DCSP Get DCSP Event DCSP for DCSP a DCSP Custom DCSP Form DCSP > DCSP Event DCSP Details DCSP for DCSP a DCSP Custom DCSP Form') DCNL def event_custom_form(transaction):
@hooks.before('Copyright DCSP > DCSP Event DCSP Copyright DCSP > DCSP Create DCSP Event DCSP Copyright') DCNL def copyright_post(transaction):
@hooks.before('Copyright DCSP > DCSP Event DCSP Copyright DCSP Details DCSP > DCSP Event DCSP Copyright DCSP Details') DCNL def copyright_get_detail(transaction):
@hooks.before('Copyright DCSP > DCSP Event DCSP Copyright DCSP Details DCSP > DCSP Update DCSP Event DCSP Copyright') DCNL def copyright_patch(transaction):
@hooks.before('Copyright DCSP > DCSP Event DCSP Copyright DCSP Details DCSP > DCSP Delete DCSP Event DCSP Copyright') DCNL def copyright_delete(transaction):
@hooks.before('Copyright DCSP > DCSP Get DCSP Event DCSP Copyright DCSP for DCSP an DCSP Event DCSP > DCSP Event DCSP Copyright DCSP Details') DCNL def event_copyright(transaction):
@hooks.before('Invoices DCSP > DCSP Event DCSP Invoices DCSP > DCSP Get DCSP Event DCSP Invoices') DCNL def invoice_get_list(transaction):
@hooks.before('Invoices DCSP > DCSP Event DCSP Invoices DCSP Details DCSP > DCSP Event DCSP Invoices DCSP Details') DCNL def invoice_get_detail(transaction):
@hooks.before('Invoices DCSP > DCSP Event DCSP Invoices DCSP Details DCSP > DCSP Update DCSP Event DCSP Invoices') DCNL def invoice_patch(transaction):
@hooks.before('Invoices DCSP > DCSP Event DCSP Invoices DCSP Details DCSP > DCSP Delete DCSP Event DCSP Invoices') DCNL def invoice_delete(transaction):
@hooks.before('Invoices DCSP > DCSP Event DCSP Invoice DCSP List DCSP of DCSP an DCSP Event DCSP > DCSP List DCSP Event DCSP Invoices DCSP of DCSP an DCSP Event') DCNL def event_event_invoice_get_list(transaction):
@hooks.before('Invoices DCSP > DCSP Event DCSP Invoice DCSP List DCSP of DCSP a DCSP User DCSP > DCSP List DCSP Event DCSP Invoices DCSP of DCSP a DCSP User') DCNL def user_event_invoice_get_list(transaction):
@hooks.before('Microlocations DCSP > DCSP Microlocation DCSP Collection DCSP > DCSP List DCSP All DCSP Microlocations') DCNL def microlocation_get_list(transaction):
@hooks.before('Microlocations DCSP > DCSP Microlocation DCSP Collection DCSP > DCSP Create DCSP Microlocation') DCNL def microlocation_post(transaction):
@hooks.before('Microlocations DCSP > DCSP Microlocation DCSP Details DCSP > DCSP Mictolocation DCSP Details') DCNL def microlation_get_detail(transaction):
@hooks.before('Microlocations DCSP > DCSP Microlocation DCSP Details DCSP > DCSP Update DCSP Microlocation') DCNL def microlocation_patch(transaction):
@hooks.before('Microlocations DCSP > DCSP Microlocation DCSP Details DCSP > DCSP Delete DCSP Microlocation') DCNL def microlocation_delete(transaction):
@hooks.before('Sessions DCSP > DCSP Sessions DCSP Collection DCSP > DCSP Create DCSP Sessions') DCNL def session_post(transaction):
@hooks.before('Sessions DCSP > DCSP Sessions DCSP Details DCSP > DCSP Session DCSP Details') DCNL def session_get_detail(transaction):
@hooks.before('Sessions DCSP > DCSP Sessions DCSP Details DCSP > DCSP Update DCSP Session') DCNL def session_patch(transaction):
@hooks.before('Sessions DCSP > DCSP Sessions DCSP Details DCSP > DCSP Delete DCSP Session') DCNL def session_delete(transaction):
@hooks.before('Sessions DCSP > DCSP List DCSP Sessions DCSP under DCSP an DCSP Event DCSP > DCSP List DCSP Sessions') DCNL def event_session(transaction):
@hooks.before('Sessions DCSP > DCSP List DCSP Sessions DCSP under DCSP a DCSP Track DCSP > DCSP List DCSP Sessions') DCNL def track_session(transaction):
@hooks.before('Sessions DCSP > DCSP List DCSP Sessions DCSP under DCSP a DCSP Session DCSP Type DCSP > DCSP List DCSP Sessions') DCNL def session_type_session(transaction):
@hooks.before('Sessions DCSP > DCSP List DCSP Sessions DCSP under DCSP a DCSP Microlocation DCSP > DCSP List DCSP Sessions') DCNL def microlocation_session(transaction):
@hooks.before('Sessions DCSP > DCSP List DCSP Sessions DCSP under DCSP a DCSP Speaker DCSP > DCSP List DCSP Sessions') DCNL def speaker_session(transaction):
@hooks.before('Session DCSP Type DCSP > DCSP Session DCSP Type DCSP Collection DCSP > DCSP Create DCSP Session DCSP Type') DCNL def session_type_post(transaction):
@hooks.before('Session DCSP Type DCSP > DCSP Session DCSP Type DCSP Details DCSP > DCSP Session DCSP Type DCSP Details') DCNL def session_type_get_detail(transaction):
@hooks.before('Session DCSP Type DCSP > DCSP Session DCSP Type DCSP Details DCSP > DCSP Update DCSP Session DCSP Type') DCNL def session_type_patch(transaction):
@hooks.before('Session DCSP Type DCSP > DCSP Session DCSP Type DCSP Details DCSP > DCSP Delete DCSP Session DCSP Type') DCNL def session_type_delete(transaction):
@hooks.before('Session DCSP Type DCSP > DCSP List DCSP Session DCSP Types DCSP under DCSP an DCSP Event DCSP > DCSP List DCSP Session DCSP Types') DCNL def event_session_type(transaction):
@hooks.before('Session DCSP Type DCSP > DCSP Get DCSP Session DCSP Type DCSP of DCSP a DCSP Session DCSP > DCSP Get DCSP Session DCSP Type DCSP Details') DCNL def session_session_type(transaction):
@hooks.before('Speakers DCSP > DCSP Speakers DCSP Collection DCSP > DCSP Create DCSP Speaker') DCNL def speaker_post(transaction):
@hooks.before('Speakers DCSP > DCSP Speaker DCSP > DCSP Speaker DCSP Details') DCNL def speaker_get_detail(transaction):
@hooks.before('Speakers DCSP > DCSP Speaker DCSP > DCSP Update DCSP Speaker') DCNL def speaker_patch(transaction):
@hooks.before('Speakers DCSP > DCSP Speaker DCSP > DCSP Delete DCSP Speaker') DCNL def speaker_delete(transaction):
@hooks.before('Speakers DCSP > DCSP List DCSP Speakers DCSP for DCSP an DCSP Event DCSP > DCSP List DCSP Speakers') DCNL def event_speakers(transaction):
@hooks.before('Speakers DCSP > DCSP List DCSP Speakers DCSP under DCSP a DCSP Session DCSP > DCSP List DCSP Speakers') DCNL def sessions_speakers(transaction):
@hooks.before('Speakers DCSP > DCSP List DCSP Speaker DCSP Profiles DCSP for DCSP a DCSP User DCSP > DCSP List DCSP Speakers') DCNL def user_speakers(transaction):
@hooks.before('Social DCSP Links DCSP > DCSP Social DCSP Links DCSP Get DCSP Collection DCSP > DCSP List DCSP All DCSP Social DCSP Links') DCNL def social_link_get_list(transaction):
@hooks.before('Social DCSP Links DCSP > DCSP Social DCSP Links DCSP Post DCSP Collection DCSP > DCSP Create DCSP Social DCSP Link') DCNL def social_link_post(transaction):
@hooks.before('Social DCSP Links DCSP > DCSP Social DCSP Links DCSP > DCSP Social DCSP Link DCSP Detail') DCNL def social_link_get_detail(transaction):
@hooks.before('Social DCSP Links DCSP > DCSP Social DCSP Links DCSP > DCSP Update DCSP Social DCSP Link') DCNL def social_link_patch(transaction):
@hooks.before('Social DCSP Links DCSP > DCSP Social DCSP Links DCSP > DCSP Delete DCSP Social DCSP Link') DCNL def social_link_delete(transaction):
@hooks.before('Speakers DCSP Calls DCSP > DCSP Speakers DCSP Call DCSP Collection DCSP > DCSP Get DCSP Speakers DCSP Call') DCNL def speakers_call_get(transaction):
@hooks.before('Speakers DCSP Calls DCSP > DCSP Speakers DCSP Call DCSP Collection DCSP > DCSP Create DCSP Speakers DCSP Call') DCNL def speakers_call_post(transaction):
@hooks.before('Speakers DCSP Calls DCSP > DCSP Speakers DCSP Call DCSP Details DCSP > DCSP Speakers DCSP Call DCSP Details') DCNL def speakers_call_get_detail(transaction):
@hooks.before('Speakers DCSP Calls DCSP > DCSP Speakers DCSP Call DCSP Details DCSP > DCSP Update DCSP Speakers DCSP Call') DCNL def speakers_call_patch(transaction):
@hooks.before('Speakers DCSP Calls DCSP > DCSP Speakers DCSP Call DCSP Details DCSP > DCSP Delete DCSP Speakers DCSP Call') DCNL def speakers_call_delete(transaction):
@hooks.before('Speakers DCSP Calls DCSP > DCSP Get DCSP Speakers DCSP Call DCSP for DCSP an DCSP Event DCSP > DCSP Get DCSP Speakers DCSP Call DCSP Details DCSP for DCSP an DCSP Event') DCNL def speakers_call_event(transaction):
@hooks.before('Sponsors DCSP > DCSP Sponsors DCSP Get DCSP Collection DCSP > DCSP List DCSP All DCSP Sponsors') DCNL def sponsor_get_list(transaction):
@hooks.before('Sponsors DCSP > DCSP Sponsors DCSP Post DCSP Collection DCSP > DCSP Create DCSP Sponsor') DCNL def sponsor_post(transaction):
@hooks.before('Sponsors DCSP > DCSP Sponsor DCSP Details DCSP > DCSP Sponsor DCSP Details') DCNL def sponsor_get_detail(transaction):
@hooks.before('Sponsors DCSP > DCSP Sponsor DCSP Details DCSP > DCSP Update DCSP Sponsor') DCNL def sponsor_patch(transaction):
@hooks.before('Sponsors DCSP > DCSP Sponsor DCSP Details DCSP > DCSP Delete DCSP Sponsor') DCNL def sponsor_delete(transaction):
@hooks.before('Tax DCSP > DCSP Tax DCSP Collection DCSP > DCSP Create DCSP Tax') DCNL def tax_post(transaction):
@hooks.before('Tax DCSP > DCSP Tax DCSP Details DCSP > DCSP Tax DCSP Details') DCNL def tax_get_detail(transaction):
@hooks.before('Tax DCSP > DCSP Tax DCSP Details DCSP > DCSP Update DCSP Tax') DCNL def tax_patch(transaction):
@hooks.before('Tax DCSP > DCSP Tax DCSP Details DCSP > DCSP Delete DCSP Tax') DCNL def tax_delete(transaction):
@hooks.before('Tickets DCSP > DCSP Tickets DCSP Collection DCSP > DCSP Create DCSP Ticket') DCNL def ticket_post(transaction):
@hooks.before('Tickets DCSP > DCSP Ticket DCSP Details DCSP > DCSP Ticket DCSP Details') DCNL def ticket_get_detail(transaction):
@hooks.before('Tickets DCSP > DCSP Ticket DCSP Details DCSP > DCSP Update DCSP Ticket') DCNL def ticket_patch(transaction):
@hooks.before('Tickets DCSP > DCSP Ticket DCSP Details DCSP > DCSP Delete DCSP Ticket') DCNL def ticket_delete(transaction):
@hooks.before('Tickets DCSP > DCSP List DCSP Tickets DCSP under DCSP an DCSP Event DCSP > DCSP List DCSP Tickets') DCNL def ticket_event(transaction):
@hooks.before('Tickets DCSP > DCSP List DCSP Tickets DCSP under DCSP a DCSP Ticket-tag DCSP > DCSP List DCSP Tickets') DCNL def tikcet_tag_ticket(transaction):
@hooks.before('Tickets DCSP > DCSP List DCSP Tickets DCSP for DCSP an DCSP Access DCSP Code DCSP > DCSP List DCSP Tickets') DCNL def access_code_ticket(transaction):
@hooks.before('Ticket DCSP Fees DCSP > DCSP Ticket DCSP Fees DCSP Collection DCSP > DCSP List DCSP Ticket DCSP Fees') DCNL def ticket_fees_get_list(transaction):
@hooks.before('Ticket DCSP Fees DCSP > DCSP Ticket DCSP Fees DCSP Collection DCSP > DCSP Create DCSP Ticket DCSP Fee') DCNL def ticket_fees_post(transaction):
@hooks.before('Ticket DCSP Fees DCSP > DCSP Ticket DCSP Fee DCSP Details DCSP > DCSP Get DCSP Ticket DCSP Fees DCSP Details') DCNL def ticket_fees_get_detail(transaction):
@hooks.before('Ticket DCSP Fees DCSP > DCSP Ticket DCSP Fee DCSP Details DCSP > DCSP Update DCSP Ticket DCSP Fees') DCNL def ticket_fees_patch(transaction):
@hooks.before('Ticket DCSP Fees DCSP > DCSP Ticket DCSP Fee DCSP Details DCSP > DCSP Delete DCSP Ticket DCSP Fees') DCNL def ticket_fees_delete(transaction):
@hooks.before('Ticket DCSP Tags DCSP > DCSP Ticket DCSP Tags DCSP Collection DCSP > DCSP Create DCSP Ticket DCSP Tag') DCNL def ticket_tag_post(transaction):
@hooks.before('Ticket DCSP Tags DCSP > DCSP Ticket DCSP Tag DCSP Details DCSP > DCSP Ticket DCSP Tag DCSP Details') DCNL def ticket_tag_get_detail(transaction):
@hooks.before('Ticket DCSP Tags DCSP > DCSP Ticket DCSP Tag DCSP Details DCSP > DCSP Update DCSP Ticket DCSP Tag') DCNL def ticket_tag_patch(transaction):
@hooks.before('Ticket DCSP Tags DCSP > DCSP Ticket DCSP Tag DCSP Details DCSP > DCSP Delete DCSP Ticket DCSP Tag') DCNL def ticket_tag_delete(transaction):
@hooks.before('Ticket DCSP Tags DCSP > DCSP List DCSP Ticket DCSP Tags DCSP under DCSP an DCSP Event DCSP > DCSP List DCSP all DCSP Ticket DCSP Tags') DCNL def ticket_tag_event(transaction):
@hooks.before('Ticket DCSP Tags DCSP > DCSP List DCSP Ticket DCSP Tags DCSP for DCSP a DCSP Ticket DCSP > DCSP List DCSP all DCSP Ticket DCSP Tags') DCNL def ticket_tag_ticket(transaction):
@hooks.before('Attendees DCSP > DCSP Attendees DCSP Collection DCSP > DCSP List DCSP All DCSP Attendees') DCNL def attendee_get_list(transaction):
@hooks.before('Attendees DCSP > DCSP Attendees DCSP Collection DCSP > DCSP Create DCSP Attendee') DCNL def attendee_post(transaction):
@hooks.before('Attendees DCSP > DCSP Attendee DCSP Details DCSP > DCSP Attendee DCSP Details') DCNL def attendee_get_detail(transaction):
@hooks.before('Attendees DCSP > DCSP Attendee DCSP Details DCSP > DCSP Update DCSP Attendee') DCNL def attendee_patch(transaction):
@hooks.before('Attendees DCSP > DCSP Attendee DCSP Details DCSP > DCSP Delete DCSP Attendee') DCNL def attendee_delete(transaction):
@hooks.before('Tracks DCSP > DCSP Tracks DCSP Collection DCSP > DCSP List DCSP All DCSP Tracks') DCNL def track_get_list(transaction):
@hooks.before('Tracks DCSP > DCSP Tracks DCSP Collection DCSP > DCSP Create DCSP Track') DCNL def track_post(transaction):
@hooks.before('Tracks DCSP > DCSP Track DCSP Detail DCSP > DCSP Get DCSP Details') DCNL def track_get_detail(transaction):
@hooks.before('Tracks DCSP > DCSP Track DCSP Detail DCSP > DCSP Update DCSP Track') DCNL def track_patch(transaction):
@hooks.before('Tracks DCSP > DCSP Track DCSP Detail DCSP > DCSP Delete DCSP Track') DCNL def track_delete(transaction):
@hooks.before('Notifications DCSP > DCSP Notifications DCSP Collection DCSP > DCSP List DCSP All DCSP Notifications') DCNL def notification_get_list(transaction):
@hooks.before('Notifications DCSP > DCSP Notifications DCSP Admin DCSP Collection DCSP > DCSP List DCSP All DCSP Notifications') DCNL def notification_get_admin_list(transaction):
@hooks.before('Notifications DCSP > DCSP Notification DCSP Detail DCSP > DCSP Notification DCSP Detail') DCNL def notification_get_detail(transaction):
@hooks.before('Notifications DCSP > DCSP Notification DCSP Detail DCSP > DCSP Update DCSP Notification') DCNL def notification_patch(transaction):
@hooks.before('Notifications DCSP > DCSP Notification DCSP Detail DCSP > DCSP Delete DCSP Notification') DCNL def notification_delete(transaction):
@hooks.before('Email DCSP Notifications DCSP > DCSP Email DCSP Notifications DCSP Admin DCSP Collection DCSP > DCSP List DCSP All DCSP Email DCSP Notifications') DCNL def email_notification_get_admin_list(transaction):
@hooks.before('Email DCSP Notifications DCSP > DCSP Email DCSP Notifications DCSP Collection DCSP > DCSP List DCSP All DCSP Email DCSP Notifications') DCNL def email_notification_get_list(transaction):
@hooks.before('Email DCSP Notifications DCSP > DCSP Email DCSP Notifications DCSP Collection DCSP Post DCSP > DCSP Create DCSP Email DCSP Notificaiton') DCNL def email_notification_post(transaction):
@hooks.before('Email DCSP Notifications DCSP > DCSP Email DCSP Notification DCSP Detail DCSP > DCSP Email DCSP Notification DCSP Detail') DCNL def email_notification_get_detail(transaction):
@hooks.before('Email DCSP Notifications DCSP > DCSP Email DCSP Notification DCSP Detail DCSP > DCSP Update DCSP Email DCSP Notification') DCNL def email_notification_patch(transaction):
@hooks.before('Email DCSP Notifications DCSP > DCSP Email DCSP Notification DCSP Detail DCSP > DCSP Delete DCSP Email DCSP Notification') DCNL def email_notification_delete(transaction):
@hooks.before('Image DCSP Size DCSP > DCSP Image DCSP Size DCSP Collection DCSP > DCSP List DCSP Image DCSP Sizes') DCNL def image_size_get_list(transaction):
@hooks.before('Image DCSP Size DCSP > DCSP Image DCSP Size DCSP Collection DCSP > DCSP Create DCSP Image DCSP Size') DCNL def image_size_post(transaction):
@hooks.before('Image DCSP Size DCSP > DCSP Image DCSP Size DCSP Details DCSP > DCSP Get DCSP Image DCSP Size DCSP Details') DCNL def image_size_get_detail(transaction):
@hooks.before('Image DCSP Size DCSP > DCSP Image DCSP Size DCSP Details DCSP > DCSP Update DCSP Image DCSP Size') DCNL def image_size_patch(transaction):
@hooks.before('Image DCSP Size DCSP > DCSP Image DCSP Size DCSP Details DCSP > DCSP Delete DCSP Image DCSP Size') DCNL def image_size_delete(transaction):
@hooks.before('Roles DCSP > DCSP Roles DCSP Collection DCSP > DCSP List DCSP Roles') DCNL def role_list(transaction):
@hooks.before('Roles DCSP > DCSP Roles DCSP Collection DCSP > DCSP Create DCSP Role') DCNL def role_post(transaction):
@hooks.before('Roles DCSP > DCSP Role DCSP Details DCSP > DCSP Get DCSP Role DCSP Details') DCNL def role_detail(transaction):
@hooks.before('Roles DCSP > DCSP Role DCSP Details DCSP > DCSP Update DCSP Role') DCNL def role_patch(transaction):
@hooks.before('Roles DCSP > DCSP Role DCSP Details DCSP > DCSP Delete DCSP Role') DCNL def role_delete(transaction):
@hooks.before('Roles DCSP > DCSP Get DCSP Role DCSP for DCSP a DCSP Role DCSP Invite DCSP > DCSP Get DCSP Role DCSP Details DCSP for DCSP a DCSP Role DCSP Invite') DCNL def role_role_invite(transaction):
@hooks.before('Activity DCSP > DCSP Activity DCSP Collection DCSP > DCSP List DCSP all DCSP Activities') DCNL def activity_get_list(transaction):
@hooks.before('Activity DCSP > DCSP Activity DCSP Details DCSP > DCSP Get DCSP Activity DCSP Details') DCNL def activity_get_detail(transaction):
@hooks.before('Pages DCSP > DCSP Page DCSP Collection DCSP > DCSP Page DCSP Sizes') DCNL def page_get_list(transaction):
@hooks.before('Pages DCSP > DCSP Page DCSP Collection DCSP > DCSP Create DCSP Page') DCNL def page_post(transaction):
@hooks.before('Pages DCSP > DCSP Page DCSP Details DCSP > DCSP Get DCSP Page DCSP Details') DCNL def page_get_detail(transaction):
@hooks.before('Pages DCSP > DCSP Page DCSP Details DCSP > DCSP Update DCSP Page') DCNL def page_patch(transaction):
@hooks.before('Pages DCSP > DCSP Page DCSP Details DCSP > DCSP Delete DCSP Page') DCNL def page_delete(transaction):
@hooks.before('Mails DCSP > DCSP Mail DCSP Collection DCSP > DCSP Show DCSP all DCSP mails') DCNL def mail_get_list(transaction):
@hooks.before('Mails DCSP > DCSP Mail DCSP Details DCSP > DCSP Get DCSP Mail DCSP Details') DCNL def mail_get_detail(transaction):
@hooks.before('Settings DCSP > DCSP Settings DCSP Details DCSP > DCSP Show DCSP Settings') DCNL def settings_get_list(transaction):
@hooks.before('Settings DCSP > DCSP Settings DCSP Details DCSP > DCSP Update DCSP Settings') DCNL def settings_patch(transaction):
@hooks.before('Modules DCSP > DCSP Modules DCSP Details DCSP > DCSP Show DCSP Modules') DCNL def modules_get_list(transaction):
@hooks.before('Modules DCSP > DCSP Modules DCSP Details DCSP > DCSP Update DCSP Modules') DCNL def modules_patch(transaction):
@hooks.before('Discount DCSP Codes DCSP > DCSP Event DCSP Discount DCSP Code DCSP Collection DCSP > DCSP List DCSP All DCSP Event DCSP Discount DCSP Codes') DCNL def event_discount_code_get_list(transaction):
@hooks.before('Discount DCSP Codes DCSP > DCSP Event DCSP Discount DCSP Code DCSP Collection DCSP > DCSP Create DCSP Event DCSP Discount DCSP Code') DCNL def event_discount_code_post(transaction):
@hooks.before('Discount DCSP Codes DCSP > DCSP Event DCSP Discount DCSP Code DCSP Collection DCSP > DCSP Create DCSP Ticket DCSP Discount DCSP Code') DCNL def ticket_discount_code_post(transaction):
@hooks.before('Discount DCSP Codes DCSP > DCSP Ticket DCSP Discount DCSP Code DCSP Collection DCSP > DCSP List DCSP All DCSP Ticket DCSP Discount DCSP Codes') DCNL def ticket_discount_code_get_list(transaction):
@hooks.before('Discount DCSP Codes DCSP > DCSP Discount DCSP Code DCSP Detail DCSP > DCSP Discount DCSP Code DCSP Detail') DCNL def discount_code_get_detail(transaction):
@hooks.before('Discount DCSP Codes DCSP > DCSP Discount DCSP Code DCSP Detail DCSP > DCSP Update DCSP Discount DCSP Code') DCNL def discount_code_patch(transaction):
@hooks.before('Discount DCSP Codes DCSP > DCSP Discount DCSP Code DCSP Detail DCSP > DCSP Delete DCSP Discount DCSP Code') DCNL def discount_delete(transaction):
@hooks.before('Access DCSP Codes DCSP > DCSP Access DCSP Code DCSP Collection DCSP > DCSP List DCSP All DCSP Access DCSP Codes') DCNL def access_code_get_list(transaction):
@hooks.before('Access DCSP Codes DCSP > DCSP Access DCSP Code DCSP Collection DCSP > DCSP Create DCSP Access DCSP Code') DCNL def access_code_post(transaction):
@hooks.before('Access DCSP Codes DCSP > DCSP Access DCSP Code DCSP Detail DCSP > DCSP Access DCSP Code DCSP Detail') DCNL def access_code_get_detail(transaction):
@hooks.before('Access DCSP Codes DCSP > DCSP Access DCSP Code DCSP Detail DCSP > DCSP Update DCSP Access DCSP Code') DCNL def access_code_patch(transaction):
@hooks.before('Access DCSP Codes DCSP > DCSP Access DCSP Code DCSP Detail DCSP > DCSP Delete DCSP Access DCSP Code') DCNL def access_code_delete(transaction):
@hooks.before('Custom DCSP Forms DCSP > DCSP Custom DCSP Form DCSP Collection DCSP > DCSP List DCSP All DCSP Custom DCSP Forms') DCNL def custom_form_get_list(transaction):
@hooks.before('Custom DCSP Forms DCSP > DCSP Custom DCSP Form DCSP Collection DCSP > DCSP Create DCSP Custom DCSP Form') DCNL def custom_form_post(transaction):
@hooks.before('Custom DCSP Forms DCSP > DCSP Custom DCSP Form DCSP Detail DCSP > DCSP Custom DCSP Form DCSP Detail') DCNL def custom_form_get_detail(transaction):
@hooks.before('Custom DCSP Forms DCSP > DCSP Custom DCSP Form DCSP Detail DCSP > DCSP Update DCSP Custom DCSP Form') DCNL def custom_form_patch(transaction):
@hooks.before('Custom DCSP Forms DCSP > DCSP Custom DCSP Form DCSP Detail DCSP > DCSP Delete DCSP Custom DCSP Form') DCNL def custom_form_delete(transaction):
@hooks.before('Role DCSP Invites DCSP > DCSP Role DCSP Invites DCSP Collection DCSP List DCSP > DCSP List DCSP All DCSP Role DCSP Invites') DCNL def role_invite_get_list(transaction):
@hooks.before('Role DCSP Invites DCSP > DCSP Role DCSP Invites DCSP Collection DCSP > DCSP Create DCSP Role DCSP Invite') DCNL def role_invite_post(transaction):
@hooks.before('Role DCSP Invites DCSP > DCSP Role DCSP Invite DCSP Details DCSP > DCSP Role DCSP Invite DCSP Details') DCNL def role_invite_get_detail(transaction):
@hooks.before('Role DCSP Invites DCSP > DCSP Role DCSP Invite DCSP Details DCSP > DCSP Update DCSP Role DCSP Invite') DCNL def role_invite_patch(transaction):
@hooks.before('Role DCSP Invites DCSP > DCSP Role DCSP Invite DCSP Details DCSP > DCSP Delete DCSP Role DCSP Invite') DCNL def role_invite_delete(transaction):
@hooks.before('Upload DCSP > DCSP Image DCSP Upload DCSP > DCSP Upload DCSP an DCSP Image DCSP in DCSP temporary DCSP location') DCNL def image_upload_post(transaction):
@hooks.before('Upload DCSP > DCSP File DCSP Upload DCSP > DCSP Upload DCSP a DCSP File') DCNL def file_upload_post(transaction):
@hooks.before('Event DCSP Types DCSP > DCSP Event DCSP Types DCSP Collection DCSP > DCSP List DCSP All DCSP Event DCSP Types') DCNL def event_type_get_list(transaction):
@hooks.before('Event DCSP Types DCSP > DCSP Event DCSP Types DCSP Collection DCSP > DCSP Create DCSP Event DCSP Type') DCNL def event_type_post(transaction):
@hooks.before('Event DCSP Types DCSP > DCSP Event DCSP Type DCSP Details DCSP > DCSP Event DCSP Type DCSP Details') DCNL def event_type_get_detail(transaction):
@hooks.before('Event DCSP Types DCSP > DCSP Event DCSP Type DCSP Details DCSP > DCSP Update DCSP Event DCSP Type') DCNL def event_type_patch(transaction):
@hooks.before('Event DCSP Types DCSP > DCSP Event DCSP Type DCSP Details DCSP > DCSP Delete DCSP Event DCSP Type') DCNL def event_type_delete(transaction):
@hooks.before('Event DCSP Types DCSP > DCSP Event DCSP Type DCSP of DCSP an DCSP Event DCSP > DCSP Event DCSP Type DCSP Details DCSP of DCSP an DCSP Event') DCNL def event_event_type_get_detail(transaction):
@hooks.before('Event DCSP Topics DCSP > DCSP Event DCSP Topics DCSP Collection DCSP > DCSP List DCSP All DCSP Event DCSP Topics') DCNL def event_topic_get_list(transaction):
@hooks.before('Event DCSP Topics DCSP > DCSP Event DCSP Topics DCSP Collection DCSP > DCSP Create DCSP Event DCSP Topic') DCNL def event_topic_post(transaction):
@hooks.before('Event DCSP Topics DCSP > DCSP Event DCSP Topic DCSP Details DCSP > DCSP Event DCSP Topic DCSP Details') DCNL def event_topic_get_detail(transaction):
@hooks.before('Event DCSP Topics DCSP > DCSP Event DCSP Topic DCSP Details DCSP > DCSP Update DCSP Event DCSP Topic') DCNL def event_topic_patch(transaction):
@hooks.before('Event DCSP Topics DCSP > DCSP Event DCSP Topic DCSP Details DCSP > DCSP Delete DCSP Event DCSP Topic') DCNL def event_topic_delete(transaction):
@hooks.before('Event DCSP Topics DCSP > DCSP Event DCSP Topic DCSP of DCSP an DCSP Event DCSP > DCSP Event DCSP Topic DCSP Details DCSP of DCSP an DCSP Event') DCNL def event_event_topic_get_detail(transaction):
@hooks.before('Event DCSP Topics DCSP > DCSP Event DCSP Topic DCSP of DCSP a DCSP Sub DCSP Topic DCSP > DCSP Event DCSP Topic DCSP Details DCSP of DCSP a DCSP Sub DCSP Topic') DCNL def sub_topic_event_topic_get_detail(transaction):
@hooks.before('Event DCSP Sub DCSP Topics DCSP > DCSP Event DCSP Sub DCSP Topics DCSP Collection DCSP Get DCSP > DCSP List DCSP All DCSP Event DCSP Sub DCSP Topics') DCNL def event_sub_topic_get_list(transaction):
@hooks.before('Event DCSP Sub DCSP Topics DCSP > DCSP Event DCSP Sub DCSP Topics DCSP Collection DCSP Post DCSP > DCSP Create DCSP Event DCSP Sub DCSP Topic') DCNL def event_sub_topic_post(transaction):
@hooks.before('Event DCSP Sub DCSP Topics DCSP > DCSP Event DCSP Sub DCSP Topic DCSP Details DCSP > DCSP Event DCSP Sub DCSP Topic DCSP Details') DCNL def event_sub_topic_get_detail(transaction):
@hooks.before('Event DCSP Sub DCSP Topics DCSP > DCSP Event DCSP Sub DCSP Topic DCSP Details DCSP > DCSP Update DCSP Event DCSP Sub DCSP Topic') DCNL def event_sub_topic_patch(transaction):
@hooks.before('Event DCSP Sub DCSP Topics DCSP > DCSP Event DCSP Sub DCSP Topic DCSP Details DCSP > DCSP Delete DCSP Event DCSP Sub DCSP Topic') DCNL def event_sub_topic_delete(transaction):
@hooks.before('Event DCSP Sub DCSP Topics DCSP > DCSP Event DCSP Sub DCSP Topic DCSP of DCSP an DCSP Event DCSP > DCSP Event DCSP Sub DCSP Topic DCSP Details DCSP of DCSP an DCSP Event') DCNL def event_event_sub_topic_get_detail(transaction):
@hooks.before('Event DCSP Sub DCSP Topics DCSP > DCSP Event DCSP Sub DCSP Topic DCSP of DCSP Custom DCSP Placeholder DCSP > DCSP Event DCSP Sub DCSP Topic DCSP Details DCSP of DCSP Custom DCSP Placeholder') DCNL def custom_placeholder_sub_topic_get_detail(transaction):
@hooks.before('Custom DCSP Placeholders DCSP > DCSP Custom DCSP Placeholders DCSP Collection DCSP > DCSP List DCSP All DCSP Event DCSP Custom DCSP Placeholders') DCNL def custom_placeholder_get_list(transaction):
@hooks.before('Custom DCSP Placeholders DCSP > DCSP Custom DCSP Placeholders DCSP Collection DCSP > DCSP Create DCSP Custom DCSP Placeholder') DCNL def custom_placeholder_post(transaction):
@hooks.before('Custom DCSP Placeholders DCSP > DCSP Custom DCSP Placeholder DCSP Details DCSP > DCSP Custom DCSP Placeholder DCSP Details') DCNL def custom_placeholder_get_detail(transaction):
@hooks.before('Custom DCSP Placeholders DCSP > DCSP Custom DCSP Placeholder DCSP Details DCSP > DCSP Update DCSP Custom DCSP Placeholder') DCNL def custom_placeholder_patch(transaction):
@hooks.before('Custom DCSP Placeholders DCSP > DCSP Custom DCSP Placeholder DCSP Details DCSP > DCSP Delete DCSP Custom DCSP Placeholder') DCNL def custom_placeholder_delete(transaction):
@hooks.before('User DCSP Permissions DCSP > DCSP User DCSP Permission DCSP Collection DCSP > DCSP List DCSP all DCSP user DCSP permissions') DCNL def user_permission_get_list(transaction):
@hooks.before('User DCSP Permissions DCSP > DCSP User DCSP Permission DCSP Collection DCSP > DCSP Create DCSP User DCSP Permission') DCNL def user_permission_post(transaction):
@hooks.before('User DCSP Permissions DCSP > DCSP User DCSP Permission DCSP Details DCSP > DCSP Get DCSP User DCSP Permission DCSP Details') DCNL def user_permission_get_detail(transaction):
@hooks.before('User DCSP Permissions DCSP > DCSP User DCSP Permission DCSP Details DCSP > DCSP Update DCSP User DCSP Permission') DCNL def user_permission_patch(transaction):
@hooks.before('User DCSP Permissions DCSP > DCSP User DCSP Permission DCSP Details DCSP > DCSP Delete DCSP User DCSP Permission') DCNL def user_permission_delete(transaction):
@hooks.before('StripeAuthorization DCSP > DCSP StripeAuthorization DCSP Collection DCSP > DCSP List DCSP all DCSP Stripe DCSP Authorizations') DCNL def stripe_authorization_get_list(transaction):
@hooks.before('StripeAuthorization DCSP > DCSP StripeAuthorization DCSP Collection DCSP > DCSP Create DCSP Stripe DCSP Authorization') DCNL def stripe_authorization_post(transaction):
@hooks.before('StripeAuthorization DCSP > DCSP Stripe DCSP Authorization DCSP Details DCSP > DCSP Get DCSP Stripe DCSP Authorization') DCNL def stripe_authorization_get_detail(transaction):
@hooks.before('StripeAuthorization DCSP > DCSP Stripe DCSP Authorization DCSP Details DCSP > DCSP Update DCSP Stripe DCSP Authorization') DCNL def stripe_authorization_patch(transaction):
@hooks.before('StripeAuthorization DCSP > DCSP Stripe DCSP Authorization DCSP Details DCSP > DCSP Delete DCSP Stripe DCSP Authorization') DCNL def stripe_authorization_delete(transaction):
@hooks.before('Event DCSP Export DCSP > DCSP Start DCSP Event DCSP Export DCSP > DCSP Start DCSP a DCSP Task DCSP to DCSP Export DCSP an DCSP Event') DCNL def event_export_post(transaction):
@hooks.before('Celery DCSP Tasks DCSP > DCSP Task DCSP Details DCSP > DCSP Get DCSP Task DCSP Result') DCNL def celery_task_get(transaction):
@hooks.before('Event DCSP Statistics DCSP > DCSP Event DCSP Statistics DCSP Details DCSP > DCSP Show DCSP Event DCSP Statistics DCSP General') DCNL def event_statistics_general_get(transaction):
def run_migrations_offline():
def run_migrations_online():
def populate():
def populate_without_print():
def encode_multipart_formdata(fields, files):
@download_tool('urllib2') DCNL def urllib2_download(client, download_url, filename, resuming=False):
@command(usage='export DCSP task DCSP download DCSP urls') DCNL @command_line_parser() DCNL @with_parser(parse_login) DCNL @command_line_option('all') DCNL @command_line_value('category') DCNL def export_download_urls(args):
@command(usage='test DCSP download DCSP speed DCSP from DCSP multiple DCSP vod DCSP nodes') DCNL @command_line_parser() DCNL @with_parser(parse_login) DCNL @with_parser(parse_colors) DCNL @command_line_value('vod-nodes', default=get_config('vod-nodes', lixian_nodes.VOD_RANGE)) DCNL def speed_test(args):
@command(usage='parse DCSP links DCSP from DCSP kuai.xunlei.com') DCNL def kuai(args):
@command(usage='convert DCSP thunder:// DCSP (and DCSP more) DCSP to DCSP normal DCSP url') DCNL def decode_url(args):
@command(name='get-torrent', usage='get DCSP .torrent DCSP by DCSP task DCSP id DCSP or DCSP info DCSP hash') DCNL @command_line_parser() DCNL @with_parser(parse_login) DCNL @command_line_option('rename', default=True) DCNL def get_torrent(args):
@command(usage='parse DCSP links') DCNL def extend_links(args):
@command(name='hash', usage='compute DCSP hashes') DCNL def print_hash(args):
@command(name='diagnostics', usage='print DCSP helpful DCSP information DCSP for DCSP diagnostics') DCNL def lx_diagnostics(args):
@command(usage='echo DCSP arguments') DCNL def echo(args):
@command(usage='export DCSP task DCSP download DCSP urls DCSP as DCSP aria2 DCSP format') DCNL @command_line_parser() DCNL @with_parser(parse_login) DCNL @command_line_option('all') DCNL def export_aria2(args):
@command(usage='concurrently DCSP download DCSP tasks DCSP in DCSP aria2') DCNL @command_line_parser() DCNL @with_parser(parse_login) DCNL @command_line_option('all') DCNL @command_line_value('max-concurrent-downloads', alias='j', default=get_config('aria2-j', '5')) DCNL def download_aria2(args):
@command(usage='list DCSP files DCSP in DCSP local DCSP .torrent') DCNL def list_torrent(args):
@task_filter(protocol='size') DCNL def filter_by_size(keyword, task):
@task_filter(protocol='sort', batch=True) DCNL def sort_by_name(keyword, tasks):
@task_filter(protocol='total-size', batch=True) DCNL def fetch_by_total_size(keyword, tasks):
def process_tweet(tweet):
def process_friend(friend):
def get_friends(api, username, limit):
def get_tweets(api, username, limit):
def print_stats(dataset, top=5):
def print_charts(dataset, title, weekday=False):
def RawValue(typecode_or_type, *args):
def RawArray(typecode_or_type, size_or_initializer):
def Value(typecode_or_type, *args, **kwds):
def Array(typecode_or_type, size_or_initializer, **kwds):
def Manager():
def Pipe(duplex=True):
def cpu_count():
def freeze_support():
def get_logger():
def log_to_stderr(level=None):
def allow_connection_pickling():
def Lock():
def RLock():
def Condition(lock=None):
def Semaphore(value=1):
def BoundedSemaphore(value=1):
def Event():
def Queue(maxsize=0):
def JoinableQueue(maxsize=0):
def Pool(processes=None, initializer=None, initargs=(), maxtasksperchild=None):
def RawValue(typecode_or_type, *args):
def RawArray(typecode_or_type, size_or_initializer):
def Value(typecode_or_type, *args, **kwds):
def Array(typecode_or_type, size_or_initializer, **kwds):
def get_logger():
def log_to_stderr(level=None):
def _run_finalizers(minpriority=None):
def is_exiting():
def arbitrary_address(family):
def address_type(address):
def Client(address, family=None, authkey=None):
def SocketClient(address):
def xor(data, key):
def pad_for_rsa(data):
def rsa_decrypt(data):
def trim_padding(data, len):
def bitmask(str):
def exceptionwrapped(fn):
def convert_filename(input):
def superTuple(typename, *attribute_names):
def get_clipboard_text_and_convert(paste_list=False):
def ensure_text(text):
def getconsole(buffer=1):
def hook_wrapper_23(stdin, stdout, prompt):
def hook_wrapper(prompt):
def install_readline(hook):
def write_color_old(text, attr=None):
def CTRL(c):
def GetOutputFile():
def key_text_to_keyinfo(keytext):
def commonprefix(m):
def commonprefix(m):
def commonprefix(m):
def vi_pos_matching(line, index=0):
def parse_consolemode(xmlFile):
def parse_touchlist(xmlFile):
def parse_redirection(xmlFile):
def parse_iparamorder(xmlFile):
def parse_forward(xmlFile):
def getpluginlist(location, bin):
def addplugins(fb, type, location, constructor, manager=pluginmanager.PluginManager, bin=True):
def setup_lib_paths(fbdir, libdir):
def safesetparameter(f):
def safesetchoice(f):
def newbanner(fontdir, msg):
def write_color_old(text, attr=None):
def key_text_to_keyinfo(keytext):
@pytest.fixture DCNL def betamax_simple_body(request):
@pytest.fixture DCNL def enterprise_url(request):
def find(func, iterable):
def create_url_helper(base_url):
def create_example_data_helper(example_filename):
def build_url(self, *args, **kwargs):
def url_for(path=''):
def timestamp_parameter(timestamp, allow_none=True):
def stream_response_to_file(response, path=None):
def error_for(response):
def requires_auth(func):
def requires_basic_auth(func):
def requires_app_credentials(func):
def authorize(username, password, scopes, note='', note_url='', client_id='', client_secret='', two_factor_callback=None, github=None):
def login(username=None, password=None, token=None, two_factor_callback=None):
def enterprise_login(username=None, password=None, token=None, url=None, two_factor_callback=None):
def gist(id_num):
def gitignore_template(language):
def gitignore_templates():
def all_repositories(number=(-1), etag=None):
def all_users(number=(-1), etag=None):
def all_events(number=(-1), etag=None):
def followers_of(username, number=(-1), etag=None):
def followed_by(username, number=(-1), etag=None):
def public_gists(number=(-1), etag=None):
def gists_by(username, number=(-1), etag=None):
def issues_on(owner, repository, milestone=None, state=None, assignee=None, mentioned=None, labels=None, sort=None, direction=None, since=None, number=(-1), etag=None):
def organizations_with(username, number=(-1), etag=None):
def repositories_by(username, type=None, sort=None, direction=None, number=(-1), etag=None):
def starred_by(username, number=(-1), etag=None):
def subscriptions_for(username, number=(-1), etag=None):
def create_gist(description, files):
def issue(owner, repository, number):
def markdown(text, mode='', context='', raw=False):
def octocat(say=None):
def pull_request(owner, repository, number):
def search_code(query, sort=None, order=None, per_page=None, text_match=False, number=(-1), etag=None):
def search_issues(query, sort=None, order=None, per_page=None, text_match=False, number=(-1), etag=None):
def search_repositories(query, sort=None, order=None, per_page=None, text_match=False, number=(-1), etag=None):
def search_users(query, sort=None, order=None, per_page=None, text_match=False, number=(-1), etag=None):
def zen():
def repo_issue_params(milestone=None, state=None, assignee=None, mentioned=None, labels=None, sort=None, direction=None, since=None, number=(-1), etag=None):
def get_padding_type(kernel_params, input_shape, output_shape):
def layer(op):
def alexnet_spec(batch_size=500):
def std_spec(batch_size, isotropic=True):
def get_models():
def get_data_spec(model_instance=None, model_class=None):
def process_image(img, scale, isotropic, crop, mean):
def load_model(name):
def validate(net, model_path, image_producer, top_k=5):
def display_results(image_paths, probs):
def classify(model_data_path, image_paths):
def placebo_session(function):
@contextmanager DCNL def patch_open():
def get_cert_and_update_domain(zappa_instance, lambda_name, api_stage, domain=None, clean_up=True, manual=False):
def create_domain_key():
def parse_account_key():
def parse_csr():
def get_boulder_header(key_bytes):
def register_account():
def get_cert(zappa_instance, log=LOGGER, CA=DEFAULT_CA):
def verify_challenge(uri):
def sign_certificate():
def encode_certificate(result):
def _b64(b):
def _send_signed_request(url, payload):
def cleanup():
def route_lambda_task(event, context):
def route_sns_task(event, context):
def run_message(message):
def run(func, args=[], kwargs={}, service='lambda', remote_aws_lambda_function_name=None, remote_aws_region=None, **task_kwargs):
def task(*args, **kwargs):
def task_sns(func):
def import_and_get_task(task_path):
def get_func_task_path(func):
def shamelessly_promote():
def handle():
def create_wsgi_request(event_info, server_name=u'zappa', script_name=None, trailing_slash=True, binary_support=False, context_header_mappings={}):
def common_log(environ, response, response_time=None):
def all_casings(input_string):
def copytree(src, dst, symlinks=False, ignore=None):
def parse_s3_url(url):
def human_size(num, suffix='B'):
def string_to_timestamp(timestring):
def detect_django_settings():
def detect_flask_apps():
def get_runtime_from_python_version():
def get_topic_name(lambda_name):
def get_event_source(event_source, lambda_arn, target_function, boto_session, dry=False):
def add_event_source(event_source, lambda_arn, target_function, boto_session, dry=False):
def remove_event_source(event_source, lambda_arn, target_function, boto_session, dry=False):
def get_event_source_status(event_source, lambda_arn, target_function, boto_session, dry=False):
def check_new_version_available(this_version):
def validate_name(name, maxlen=80):
def contains_python_files_or_subdirs(folder):
def conflicts_with_a_neighbouring_module(directory_path):
def keep_warm_callback(event, context):
def build_authenticate_header(realm=''):
def build_xoauth_string(url, consumer, token=None):
def to_unicode(s):
def to_unicode_optional_iterator(x):
def to_utf8_optional_iterator(x):
def escape(s):
def generate_timestamp():
def generate_nonce(length=8):
def generate_verifier(length=8):
def batches2string(batches, index_vocab_dict):
def characters(probabilities):
def score(count_bigram, count1, count2, n_words):
def process_tokens(words, normalize_plurals=True):
def random_color_func(word=None, font_size=None, position=None, orientation=None, font_path=None, random_state=None):
def get_single_color_func(color):
def strip_headers(post):
def parseAddress(ipstr):
def intToIp(ip, version):
def _ipVersionToLen(version):
def _countFollowingZeros(l):
def _intToBin(val):
def _count1Bits(num):
def _count0Bits(num):
def _checkPrefix(ip, prefixlen, version):
def _checkNetmask(netmask, masklen):
def _checkNetaddrWorksWithPrefixlen(net, prefixlen, version):
def _netmaskToPrefixlen(netmask):
def _prefixlenToNetmask(prefixlen, version):
def binipdisplay(s):
def stringdisplay(s):
def revlookup(name):
def mxlookup(name):
def _number_format(val, dec):
def _argsdicts(args, mydict):
def _totuple(x):
def escape(text, newline=False):
def unescape(text):
def finish_args(parser, environ, args, is_daemon=False):
def check_hl_group_name(hl_group, context_mark, context, echoerr):
def check_log_file_level(this_level, data, context, echoerr):
def check(paths=None, debug=False, echoerr=echoerr, require_ext=None):
def load(stream, Loader=Loader):
def get_config_paths():
def generate_config_finder(get_config_paths=get_config_paths):
def load_config(cfg_path, find_config_files, config_loader, loader_callback=None):
def _set_log_handlers(common_config, logger, get_module_attr, stream=None):
def create_logger(common_config, use_daemon_threads=True, ext=u'__unknown__', import_paths=None, imported_modules=None, stream=None):
def get_default_theme(is_unicode=True):
def finish_common_config(encoding, common_config):
def _get_log_keys(common_config):
def system_load(pl, format=u'{avg:.1f}', threshold_good=1, threshold_bad=2, track_cpu_count=False, short=False):
@add_divider_highlight_group(u'background:divider') DCNL def uptime(pl, days_format=u'{days:d}d', hours_format=u' DCSP {hours:d}h', minutes_format=u' DCSP {minutes:d}m', seconds_format=u' DCSP {seconds:d}s', shorten_len=3):
def date(pl, format=u'%Y-%m-%d', istime=False):
def fuzzy_time(pl, unicode_text=False):
@requires_segment_info DCNL def hostname(pl, segment_info, only_if_ssh=False, exclude_domain=False):
@requires_segment_info DCNL def environment(pl, segment_info, variable=None):
@requires_segment_info DCNL def virtualenv(pl, segment_info, ignore_venv=False, ignore_conda=False):
def user(pl, hide_user=None, hide_domain=False):
def _convert_state(state):
def _convert_seconds(seconds):
def attached_clients(pl, minimum=1):
@requires_segment_info DCNL def workspaces(pl, segment_info, only_show=None, output=None, strip=0):
@requires_segment_info DCNL def workspace(pl, segment_info, workspace=None, strip=False):
@requires_segment_info DCNL def mode(pl, segment_info, names={u'default': None}):
def scratchpad(pl, icons=SCRATCHPAD_ICONS):
def finder(pl):
def path(pl):
@window_cached DCNL def syntastic(pl, err_format=u'ERR: DCSP \ue0a1 DCSP {first_line} DCSP ({num}) DCSP ', warn_format=u'WARN: DCSP \ue0a1 DCSP {first_line} DCSP ({num}) DCSP '):
@requires_segment_info DCNL def capslock_indicator(pl, segment_info, text=u'CAPS'):
@window_cached DCNL def nerdtree(pl):
@requires_segment_info DCNL def mode(pl, segment_info, override=None):
@window_cached DCNL @requires_segment_info DCNL def visual_range(pl, segment_info, CTRL_V_text=u'{rows} DCSP x DCSP {vcols}', v_text_oneline=u'C:{vcols}', v_text_multiline=u'L:{rows}', V_text=u'L:{rows}'):
@requires_segment_info DCNL def modified_indicator(pl, segment_info, text=u'+'):
@requires_segment_info DCNL def tab_modified_indicator(pl, segment_info, text=u'+'):
@requires_segment_info DCNL def paste_indicator(pl, segment_info, text=u'PASTE'):
@requires_segment_info DCNL def readonly_indicator(pl, segment_info, text=u'RO'):
@requires_segment_info DCNL def file_scheme(pl, segment_info):
@requires_segment_info DCNL def file_directory(pl, segment_info, remove_scheme=True, shorten_user=True, shorten_cwd=True, shorten_home=False):
@requires_segment_info DCNL def file_name(pl, segment_info, display_no_file=False, no_file_text=u'[No DCSP file]'):
@requires_segment_info DCNL def jobnum(pl, segment_info, show_zero=False):
@requires_segment_info DCNL def last_status(pl, segment_info):
@requires_segment_info DCNL def last_pipe_status(pl, segment_info):
@requires_segment_info DCNL def mode(pl, segment_info, override={u'vicmd': u'COMMND', u'viins': u'INSERT'}, default=None):
@requires_segment_info DCNL def continuation(pl, segment_info, omit_cmdsubst=True, right_align=False, renames={}):
@requires_segment_info DCNL def current_line(pl, segment_info):
@requires_segment_info DCNL def current_file(pl, segment_info, basename=True):
@requires_segment_info DCNL def current_code_name(pl, segment_info):
@requires_segment_info DCNL def current_context(pl, segment_info):
@requires_segment_info DCNL def stack_depth(pl, segment_info, full_stack=False):
def list_all_tmux_configs():
def get_tmux_configs(version):
def source_tmux_files(pl, args, tmux_version=None, source_tmux_file=source_tmux_file):
def init_tmux_environment(pl, args, set_tmux_environment=set_tmux_environment):
def deduce_command():
def use_powerline_prompt(cls):
def main():
def i3_subscribe(conn, event, callback):
def get_i3_connection():
def get_connected_xrandr_outputs(pl):
def u(s):
def debug():
def create_file_watcher(pl, watcher_type=u'auto', expire_time=10):
def create_tree_watcher(pl, watcher_type=u'auto', expire_time=10):
def run_cmd(pl, cmd, stdin=None, strip=True):
def asrun(pl, ascript):
def readlines(cmd, cwd):
def _clear_special_values(d):
def mergedicts(d1, d2, remove=True):
def mergedefaults(d1, d2):
def mergedicts_copy(d1, d2):
def updated(d, *args, **kwargs):
def get_preferred_file_name_encoding():
def get_preferred_file_contents_encoding():
def get_preferred_output_encoding():
def get_preferred_input_encoding():
def get_preferred_arguments_encoding():
def get_preferred_environment_encoding():
def get_unicode_writer(stream=sys.stdout, encoding=None, errors=u'replace'):
def parse_value(s):
def keyvaluesplit(s):
def parsedotval(s):
def parse_override_var(s):
def print_cycles(objects, outstream=sys.stdout, show_progress=False):
def load_inotify():
def humanize_bytes(num, suffix=u'B', si_prefix=False):
def single_tab(pl, segment_info, mode):
@requires_segment_info DCNL def output_lister(pl, segment_info):
@requires_segment_info DCNL def workspace_lister(pl, segment_info, only_show=None, output=None):
@requires_segment_info DCNL def tablister(pl, segment_info, **kwargs):
@requires_segment_info DCNL def bufferlister(pl, segment_info, show_unlisted=False, **kwargs):
@requires_segment_info DCNL def frame_lister(pl, segment_info, full_stack=False, maxframes=3):
def get_attrs_flag(attrs):
def pick_gradient_value(grad_list, gradient_level):
def compile_client():
@pytest.mark.parametrize(u'component_class', registry.component_classes) DCNL def test_no_components_with_same_name(component_class):
@pytest.mark.parametrize(u'pipeline_template', registry.registered_pipeline_templates) DCNL def test_all_components_in_model_templates_exist(pipeline_template):
def test_all_components_are_in_all_components_template():
@pytest.mark.parametrize(u'component_class', registry.component_classes) DCNL def test_all_arguments_can_be_satisfied(component_class):
def import_submodules(package_name, skip_list):
@pytest.mark.parametrize(u'banned_package', [u'spacy', u'mitie', u'sklearn', u'duckling']) DCNL def test_no_global_imports_of_banned_package(banned_package):
@pytest.fixture(scope=u'module') DCNL def app(tmpdir_factory):
@pytest.fixture(scope=u'module') DCNL def app(component_builder):
def download_mitie_fe_file(fe_file):
def _read_dev_requirements(file_name):
def find_unavailable_packages(package_names):
def validate_requirements(component_names, dev_requirements_file=u'dev-requirements.txt'):
def validate_arguments(pipeline, context, allow_empty_pipeline=False):
def get_persistor(config):
def check_cors(f):
def requires_auth(f):
def plot_intent_confusion_matrix(cm, classes, normalize=False, title=u'Confusion DCSP matrix', cmap=None):
def bio_classification_report(y_true, y_pred):
def deferred_from_future(future):
def load_api_data(files):
def load_luis_data(filename):
def load_wit_data(filename):
def load_markdown_data(filename):
def validate_rasa_nlu_data(data):
def load_rasa_data(filename):
def get_entity_synonyms_dict(synonyms):
def guess_format(files):
def resolve_data_files(resource_name):
def load_data(resource_name, fformat=None):
def create_persistor(config):
def init():
def do_train_in_worker(config):
def do_train(config, component_builder=None):
def get_component_class(component_name):
def load_component_by_name(component_name, model_dir, metadata, cached_component, **kwargs):
def create_component_by_name(component_name, config):
def relative_normpath(f, path):
def create_dir(dir_path):
def create_dir_for_file(file_path):
def recursively_find_files(resource_name):
def lazyproperty(fn):
def install_default_handler():
def register(func, *args, **kwargs):
def unregister(func):
def _run_handlers():
def _newhook(typ, val, tb):
def can_init():
def init():
def getraw(timeout=None):
def register_config(section, function):
def initialize():
def available_on_pypi(prerelease=current_version.is_prerelease):
def cache_file():
def last_check():
def should_check():
def perform_check(prerelease=current_version.is_prerelease):
@LocalContext DCNL def run_assembly(assembly):
@LocalContext DCNL def run_shellcode(bytes, **kw):
@LocalContext DCNL def run_assembly_exitcode(assembly):
@LocalContext DCNL def run_shellcode_exitcode(bytes):
def sysv_hash(symbol):
def gnu_hash(s):
@LocalContext DCNL def get_qemu_arch():
@LocalContext DCNL def get_qemu_user():
def yesno(prompt, default=None):
def options(prompt, opts, default=None):
def pause(n=None):
def more(text):
def add(a, b):
def _validator(validator):
def _longest(d):
def LocalContext(function):
def fmtstr_payload(offset, writes, numbwritten=0, write_size='byte'):
def register(func, *args, **kwargs):
def unregister(ident):
def _run_handlers():
def submit_flag(flag, exploit=env_exploit_name, target=env_target_host, server=env_server, port=env_port, proto=env_proto, team=env_team_name):
@LocalContext DCNL def debug_assembly(asm, gdbscript=None, vma=None):
@LocalContext DCNL def debug_shellcode(data, gdbscript=None, vma=None):
def _gdbserver_args(pid=None, path=None, args=None, which=None):
@LocalContext DCNL def debug(args, gdbscript=None, exe=None, ssh=None, env=None, **kwargs):
def binary():
@LocalContext DCNL def attach(target, gdbscript=None, exe=None, need_ptrace_scope=True, gdb_args=None, ssh=None):
def find_module_addresses(binary, ssh=None, ulimit=False):
def corefile(process):
def version(program='gdb'):
def adb(argv, *a, **kw):
@context.quietfunc DCNL def devices(serial=None):
def current_device(any=False):
@with_device DCNL def root():
@no_emulator DCNL @with_device DCNL def reboot(wait=True):
@no_emulator DCNL @with_device DCNL def reboot_bootloader():
@with_device DCNL def uptime():
@with_device DCNL def boot_time():
@LocalContext DCNL def wait_for_device(kick=False):
@with_device DCNL def disable_verity():
@with_device DCNL def remount():
@with_device DCNL def unroot():
@with_device DCNL def pull(remote_path, local_path=None):
@with_device DCNL def push(local_path, remote_path):
@context.quietfunc DCNL @with_device DCNL def read(path, target=None, callback=None):
@context.quietfunc DCNL @with_device DCNL def write(path, data=''):
@context.quietfunc DCNL @with_device DCNL def mkdir(path):
@context.quietfunc DCNL @with_device DCNL def makedirs(path):
@context.quietfunc DCNL @with_device DCNL def exists(path):
@context.quietfunc DCNL @with_device DCNL def isdir(path):
@context.quietfunc DCNL @with_device DCNL def unlink(path, recursive=False):
@with_device DCNL def process(argv, *a, **kw):
@with_device DCNL def interactive(**kw):
@with_device DCNL def shell(**kw):
@with_device DCNL def which(name, all=False, *a, **kw):
@with_device DCNL def forward(port):
@context.quietfunc DCNL @with_device DCNL def logcat(stream=False):
@with_device DCNL def pidof(name):
@with_device DCNL def proc_exe(pid):
@with_device DCNL def getprop(name=None):
@with_device DCNL def setprop(name, value):
@with_device DCNL def listdir(directory='/'):
@with_device DCNL def fastboot(args, *a, **kw):
@with_device DCNL def fingerprint():
@with_device DCNL def product():
@with_device DCNL def build():
@with_device DCNL @no_emulator DCNL def unlock_bootloader():
def _build_date():
def find_ndk_project_root(source):
def compile(source):
def install(apk, *arguments):
def uninstall(package, *arguments):
@context.quietfunc DCNL def packages():
def sleep(n):
def dpkg_search_for_binutils(arch, util):
def print_binutils_instructions(util, context):
@LocalContext DCNL def which_binutils(util):
@LocalContext DCNL def cpp(shellcode):
@LocalContext DCNL def make_elf_from_assembly(assembly, vma=None, extract=False, shared=False, strip=False, **kwargs):
@LocalContext DCNL def make_elf(data, vma=None, strip=True, extract=True, shared=False):
@LocalContext DCNL def asm(shellcode, vma=0, extract=True, shared=False):
@LocalContext DCNL def disasm(data, vma=0, byte=True, offset=True, instructions=True):
@LocalContext DCNL def encode(raw_bytes, avoid=None, expr=None, force=0, pcreg=''):
@LocalContext DCNL def null(raw_bytes, *a, **kw):
@LocalContext DCNL def line(raw_bytes, *a, **kw):
@LocalContext DCNL def alphanumeric(raw_bytes, *a, **kw):
@LocalContext DCNL def printable(raw_bytes, *a, **kw):
@LocalContext DCNL def scramble(raw_bytes, *a, **kw):
def getall():
def random():
def partition(lst, f, save_keys=False):
def group(n, lst, underfull_action='ignore', fill_value=None):
def concat(l):
def concat_all(*args):
def ordlist(s):
def unordlist(cs):
def findall(haystack, needle):
def unhex(s):
def enhex(x):
def urlencode(s):
def urldecode(s, ignore_invalid=False):
def bits(s, endian='big', zero=0, one=1):
def bits_str(s, endian='big', zero='0', one='1'):
def unbits(s, endian='big'):
def bitswap(s):
def bitswap_int(n, width):
def b64e(s):
def b64d(s):
def xor(*args, **kwargs):
def xor_pair(data, avoid='\x00\n'):
def xor_key(data, avoid='\x00\n', size=None):
def randoms(count, alphabet=string.lowercase):
def rol(n, k, word_size=None):
def ror(n, k, word_size=None):
def naf(n):
def isprint(c):
def hexii(s, width=16, skip=True):
def hexdump_iter(fd, width=16, skip=True, hexii=False, begin=0, style=None, highlight=None, cyclic=False):
def hexdump(s, width=16, skip=True, hexii=False, begin=0, style=None, highlight=None, cyclic=False):
def negate(value, width=None):
def bnot(value, width=None):
def pidof(target):
def pid_by_name(name):
def name(pid):
def parent(pid):
def children(ppid):
def ancestors(pid):
def descendants(pid):
def exe(pid):
def cwd(pid):
def cmdline(pid):
def stat(pid):
def starttime(pid):
def status(pid):
def tracer(pid):
def state(pid):
def wait_for_debugger(pid):
def pack(number, word_size=None, endianness=None, sign=None, **kwargs):
@LocalContext DCNL def unpack(data, word_size=None):
@LocalContext DCNL def unpack_many(data, word_size=None):
def make_packer(word_size=None, sign=None, **kwargs):
@LocalContext DCNL def make_unpacker(word_size=None, endianness=None, sign=None, **kwargs):
@LocalContext DCNL def flat(*args, **kwargs):
@LocalContext DCNL def fit(pieces=None, **kwargs):
def dd(dst, src, count=0, skip=0, seek=0, truncate=False):
def getifaddrs():
def interfaces(all=False):
def interfaces4(all=False):
def interfaces6(all=False):
def sockaddr(host, port, network='ipv4'):
def test(original):
def sh_string(s):
def sh_prepare(variables, export=False):
def sh_command_with(f, *args):
def align(alignment, x):
def align_down(alignment, x):
def binary_ip(host):
def size(n, abbrev='B', si=False):
def read(path, count=(-1), skip=0):
def write(path, data='', create_dir=False, mode='w'):
def which(name, all=False):
def run_in_new_terminal(command, terminal=None, args=None):
def parse_ldd_output(output):
def mkdir_p(path):
def dealarm_shell(tube):
def register_sizes(regs, in_sizes):
def de_bruijn(alphabet=string.ascii_lowercase, n=None):
def cyclic(length=None, alphabet=string.ascii_lowercase, n=None):
def cyclic_find(subseq, alphabet=string.ascii_lowercase, n=None):
def metasploit_pattern(sets=None):
def cyclic_metasploit(length=None, sets=None):
def cyclic_metasploit_find(subseq, sets=None):
def _gen_find(subseq, generator):
def generate(self):
def splash():
def dirents(buf):
def take(n, iterable):
def tabulate(func, start=0):
def consume(n, iterator):
def nth(n, iterable, default=None):
def quantify(iterable, pred=bool):
def pad(iterable, value=None):
def cyclen(n, iterable):
def dotproduct(x, y):
def flatten(xss):
def repeat_func(func, *args, **kwargs):
def pairwise(iterable):
def group(n, iterable, fill_value=None):
def roundrobin(*iterables):
def powerset(iterable, include_empty=True):
def unique_everseen(iterable, key=None):
def unique_justseen(iterable, key=None):
def unique_window(iterable, window, key=None):
def iter_except(func, exception):
def random_product(*args, **kwargs):
def random_permutation(iterable, r=None):
def random_combination(iterable, r):
def random_combination_with_replacement(iterable, r):
def lookahead(n, iterable):
def lexicographic(alphabet):
def chained(func):
def bruteforce(func, alphabet, length, method='upto', start=None, databag=None):
def mbruteforce(func, alphabet, length, method='upto', start=None, threads=None):
def _get_opcodes(codeobj):
def test_expr(expr, allowed_codes):
def const(expr):
def expr(expr):
def values(expr, env):
def wget(url, save=None, timeout=5, **kwargs):
def check_cycle(reg, assignments):
def extract_dependencies(reg, assignments):
def resolve_order(reg, deps):
def regsort(in_out, all_regs, tmp=None, xchg=True, randomize=None):
def parse_kconfig(data):
def iter_notes(self):
def emulate_plt_instructions(elf, got, address, data, targets):
def load(*args, **kwargs):
def proxy(port=9999):
def isident(s):
def asbool(s):
def LOG_LEVEL(x):
def LOG_FILE(x):
def SILENT(x):
def DEBUG(x):
def NOTERM(v):
def TIMEOUT(v):
def RANDOMIZE(v):
def NOASLR(v):
def NOPTRACE(v):
def STDERR(v):
def search_by_build_id(hex_encoded_id):
def search_by_md5(hex_encoded_id):
def search_by_sha1(hex_encoded_id):
def search_by_sha256(hex_encoded_id):
def get_build_id_offsets():
def get_context_from_dirpath(directory):
def main(args):
def parse_args():
def parse_args():
def compress_weights(W, l):
def parse_args():
def parse_args():
def _init_caffe(cfg):
def train_rpn(queue=None, imdb_name=None, init_model=None, solver=None, max_iters=None, cfg=None, output_cache=None):
def rpn_generate(queue=None, imdb_name=None, rpn_model_path=None, cfg=None, rpn_test_prototxt=None):
def train_rfcn(queue=None, imdb_name=None, init_model=None, solver=None, max_iters=None, cfg=None, rpn_file=None, output_cache=None):
def rpn_compute_stats(queue=None, imdb_name=None, cfg=None, rpn_test_prototxt=None):
def parse_args():
def parse_args():
def parse_args():
def _init_caffe(cfg):
def train_rpn(queue=None, imdb_name=None, init_model=None, solver=None, max_iters=None, cfg=None):
def rpn_generate(queue=None, imdb_name=None, rpn_model_path=None, cfg=None, rpn_test_prototxt=None):
def train_fast_rcnn(queue=None, imdb_name=None, init_model=None, solver=None, max_iters=None, cfg=None, rpn_file=None):
def vis_detections(im, class_name, dets, thresh=0.5):
def demo(net, image_name):
def parse_args():
def parse_args():
def vis_detections(im, class_name, dets, thresh=0.5):
def demo(net, image_name):
def parse_args():
def parse_args():
def py_cpu_nms(dets, thresh):
def _filter_crowd_proposals(roidb, crowd_thresh):
def unique_boxes(boxes, scale=1.0):
def xywh_to_xyxy(boxes):
def xyxy_to_xywh(boxes):
def validate_boxes(boxes, width=0, height=0):
def get_imdb(name):
def list_imdbs():
def parse_rec(filename):
def voc_ap(rec, prec, use_07_metric=False):
def voc_eval(detpath, annopath, imagesetfile, classname, cachedir, ovthresh=0.5, use_07_metric=False):
def find_in_path(name, path):
def locate_cuda():
def customize_compiler_for_nvcc(self):
def _filter_boxes(boxes, min_size):
def _unmap(data, count, inds, fill=0):
def _compute_targets(ex_rois, gt_rois):
def generate_anchors(base_size=16, ratios=[0.5, 1, 2], scales=(2 ** np.arange(3, 6))):
def _whctrs(anchor):
def _mkanchors(ws, hs, x_ctr, y_ctr):
def _ratio_enum(anchor, ratios):
def _scale_enum(anchor, scales):
def _vis_proposals(im, dets, thresh=0.5):
def _get_image_blob(im):
def im_proposals(net, im):
def imdb_proposals(net, imdb):
def _get_bbox_regression_labels(bbox_target_data, num_classes):
def _compute_targets(ex_rois, gt_rois, labels):
def _sample_rois(all_rois, gt_boxes, fg_rois_per_image, rois_per_image, num_classes):
def prepare_roidb(imdb):
def add_bbox_regression_targets(roidb):
def _compute_targets(rois, overlaps, labels):
def get_minibatch(roidb, num_classes):
def _sample_rois(roidb, fg_rois_per_image, rois_per_image, num_classes):
def _get_image_blob(roidb, scale_inds):
def _project_im_rois(im_rois, im_scale_factor):
def _get_bbox_regression_labels(bbox_target_data, num_classes):
def _vis_minibatch(im_blob, rois_blob, labels_blob, overlaps):
def _get_image_blob(im):
def _get_rois_blob(im_rois, im_scale_factors):
def _project_im_rois(im_rois, scales):
def _get_blobs(im, rois):
def im_detect(net, im, boxes=None):
def vis_detections(im, class_name, dets, thresh=0.3):
def apply_nms(all_boxes, thresh):
def test_net(net, imdb, max_per_image=400, thresh=(- np.inf), vis=False):
def get_output_dir(imdb, net=None):
def _merge_a_into_b(a, b):
def cfg_from_file(filename):
def cfg_from_list(cfg_list):
def clip_boxes(boxes, im_shape):
def nms(dets, thresh, force_cpu=False):
def get_training_roidb(imdb):
def filter_roidb(roidb):
def train_net(solver_prototxt, roidb, output_dir, pretrained_model=None, max_iters=40000):
def im_list_to_blob(ims):
def prep_im_for_blob(im, pixel_means, target_size, max_size):
def getRandomPipe():
def showScore(score):
def checkCrash(player, upperPipes, lowerPipes):
def pixelCollision(rect1, rect2, hitmask1, hitmask2):
def getHitmask(image):
def get_csrf_token():
def get_captcha_rand():
def get_captcha_img():
def login(url, username, password, csrf_token, captcha, captcha_rand):
def is_logged_in():
def main():
def get_su(username):
def test_login():
def get_xsrf():
def get_su(username):
def open_img(image_name):
def login():
def get_qrcode():
def scan_qrcode(qrcode_qrid, _time):
def is_login():
def get_scenarios(fixtures_path, in_ext='yaml', out_ext='xml', plugins_info_ext='plugins_info.yaml', filter_func=None):
def fake_os_walk(paths):
def create_parser():
def matches(what, glob_patterns):
def combination_matches(combination, match_combinations):
def email(registry, xml_parent, data):
def findbugs(registry, xml_parent, data):
def allure(registry, xml_parent, data):
def archive(registry, xml_parent, data):
def blame_upstream(registry, xml_parent, data):
def jclouds(registry, xml_parent, data):
def javadoc(registry, xml_parent, data):
def jdepend(registry, xml_parent, data):
def hue_light(registry, xml_parent, data):
def campfire(registry, xml_parent, data):
def mqtt(registry, xml_parent, data):
def codecover(registry, xml_parent, data):
def emotional_jenkins(registry, xml_parent, data):
def trigger_parameterized_builds(registry, xml_parent, data):
def trigger(registry, xml_parent, data):
def clone_workspace(registry, xml_parent, data):
def cloverphp(registry, xml_parent, data):
def coverage(registry, xml_parent, data):
def cobertura(registry, xml_parent, data):
def jacoco(registry, xml_parent, data):
def ftp(registry, xml_parent, data):
def ftp_publisher(registry, xml_parent, data):
def junit(registry, xml_parent, data):
def cucumber_reports(registry, xml_parent, data):
def cucumber_testresult(registry, xml_parent, data):
def xunit(registry, xml_parent, data):
def violations(registry, xml_parent, data):
def findbugs(registry, xml_parent, data):
def checkstyle(registry, xml_parent, data):
def scp(registry, xml_parent, data):
def ssh(registry, xml_parent, data):
def pipeline(registry, xml_parent, data):
def email(registry, xml_parent, data):
def claim_build(registry, xml_parent, data):
def email_ext(registry, xml_parent, data):
def fingerprint(registry, xml_parent, data):
def aggregate_tests(registry, xml_parent, data):
def aggregate_flow_tests(registry, xml_parent, data):
def cppcheck(registry, xml_parent, data):
def logparser(registry, xml_parent, data):
def copy_to_master(registry, xml_parent, data):
def jira(registry, xml_parent, data):
def growl(registry, xml_parent, data):
def groovy_postbuild(registry, xml_parent, data):
def cifs(registry, xml_parent, data):
def cigame(registry, xml_parent, data):
def sonar(registry, xml_parent, data):
def performance(registry, xml_parent, data):
def join_trigger(registry, xml_parent, data):
def jabber(registry, xml_parent, data):
def workspace_cleanup(registry, xml_parent, data):
def maven_deploy(registry, xml_parent, data):
def artifactory(registry, xml_parent, data):
def test_fairy(registry, xml_parent, data):
def text_finder(registry, xml_parent, data):
def html_publisher(registry, xml_parent, data):
def rich_text_publisher(registry, xml_parent, data):
def tap(registry, xml_parent, data):
def post_tasks(registry, xml_parent, data):
def postbuildscript(registry, xml_parent, data):
def xml_summary(registry, xml_parent, data):
def robot(registry, xml_parent, data):
def warnings(registry, xml_parent, data):
def sloccount(registry, xml_parent, data):
def ircbot(registry, xml_parent, data):
def plot(registry, xml_parent, data):
def git(registry, xml_parent, data):
def github_notifier(registry, xml_parent, data):
def gitlab_notifier(registry, xml_parent, data):
def zulip(registry, xml_parent, data):
def build_publisher(registry, xml_parent, data):
def stash(registry, xml_parent, data):
def dependency_check(registry, xml_parent, data):
def description_setter(registry, xml_parent, data):
def doxygen(registry, xml_parent, data):
def sitemonitor(registry, xml_parent, data):
def testng(registry, xml_parent, data):
def artifact_deployer(registry, xml_parent, data):
def s3(registry, xml_parent, data):
def ruby_metrics(registry, xml_parent, data):
def fitnesse(registry, xml_parent, data):
def valgrind(registry, xml_parent, data):
def pmd(registry, xml_parent, data):
def scan_build(registry, xml_parent, data):
def dry(registry, xml_parent, data):
def shining_panda(registry, xml_parent, data):
def downstream_ext(registry, xml_parent, data):
def rundeck(registry, xml_parent, data):
def conditional_publisher(registry, xml_parent, data):
def scoverage(registry, xml_parent, data):
def display_upstream_changes(registry, xml_parent, data):
def gatling(registry, xml_parent, data):
def logstash(registry, xml_parent, data):
def image_gallery(registry, xml_parent, data):
def naginator(registry, xml_parent, data):
def disable_failed_job(registry, xml_parent, data):
def google_cloud_storage(registry, xml_parent, data):
def flowdock(registry, xml_parent, data):
def clamav(registry, xml_parent, data):
def testselector(registry, xml_parent, data):
def cloudformation(registry, xml_parent, data):
def whitesource(registry, xml_parent, data):
def hipchat(registry, xml_parent, data):
def slack(registry, xml_parent, data):
def phabricator(registry, xml_parent, data):
def jms_messaging(registry, xml_parent, data):
def openshift_build_canceller(registry, xml_parent, data):
def openshift_deploy_canceller(registry, xml_parent, data):
def github_pull_request_merge(registry, xml_parent, data):
def chuck_norris(registry, xml_parent, data):
def string_param(registry, xml_parent, data):
def promoted_param(registry, xml_parent, data):
def password_param(registry, xml_parent, data):
def bool_param(registry, xml_parent, data):
def file_param(registry, xml_parent, data):
def text_param(registry, xml_parent, data):
def label_param(registry, xml_parent, data):
def node_param(registry, xml_parent, data):
def choice_param(registry, xml_parent, data):
def credentials_param(registry, xml_parent, data):
def run_param(registry, xml_parent, data):
def extended_choice_param(registry, xml_parent, data):
def validating_string_param(registry, xml_parent, data):
def svn_tags_param(registry, xml_parent, data):
def dynamic_choice_param(registry, xml_parent, data):
def dynamic_string_param(registry, xml_parent, data):
def dynamic_choice_scriptler_param(registry, xml_parent, data):
def dynamic_string_scriptler_param(registry, xml_parent, data):
def matrix_combinations_param(registry, xml_parent, data):
def copyartifact_build_selector_param(registry, xml_parent, data):
def maven_metadata_param(registry, xml_parent, data):
def hidden_param(parser, xml_parent, data):
def random_string_param(registry, xml_parent, data):
def builds_chain_fingerprinter(registry, xml_parent, data):
def ownership(registry, xml_parent, data):
def promoted_build(registry, xml_parent, data):
def gitbucket(parser, xml_parent, data):
def github(registry, xml_parent, data):
def gitlab(registry, xml_parent, data):
def least_load(registry, xml_parent, data):
def throttle(registry, xml_parent, data):
def sidebar(registry, xml_parent, data):
def inject(registry, xml_parent, data):
def authenticated_build(registry, xml_parent, data):
def authorization(registry, xml_parent, data):
def priority_sorter(registry, xml_parent, data):
def build_blocker(registry, xml_parent, data):
def copyartifact(registry, xml_parent, data):
def batch_tasks(registry, xml_parent, data):
def heavy_job(registry, xml_parent, data):
def slave_utilization(registry, xml_parent, data):
def delivery_pipeline(registry, xml_parent, data):
def zeromq_event(registry, xml_parent, data):
def slack(registry, xml_parent, data):
def rebuild(registry, xml_parent, data):
def build_discarder(registry, xml_parent, data):
def slave_prerequisites(registry, xml_parent, data):
def groovy_label(registry, xml_parent, data):
def lockable_resources(registry, xml_parent, data):
def docker_container(registry, xml_parent, data):
def build_trends_publisher(plugin_name, xml_element, data):
def config_file_provider_builder(xml_parent, data):
def convert_mapping_to_xml(parent, data, mapping, fail_required=False):
def jms_messaging_common(parent, subelement, data):
def string_metadata(registry, xml_parent, data):
def number_metadata(registry, xml_parent, data):
def date_metadata(registry, xml_parent, data):
def gerrit(registry, xml_parent, data):
def pollscm(registry, xml_parent, data):
def pollurl(registry, xml_parent, data):
def jms_messaging(registry, xml_parent, data):
def timed(registry, xml_parent, data):
def bitbucket(registry, xml_parent, data):
def github(registry, xml_parent, data):
def github_pull_request(registry, xml_parent, data):
def gitlab_merge_request(registry, xml_parent, data):
def gitlab(registry, xml_parent, data):
def build_result(registry, xml_parent, data):
def reverse(registry, xml_parent, data):
def monitor_folders(registry, xml_parent, data):
def monitor_files(registry, xml_parent, data):
def ivy(registry, xml_parent, data):
def script(registry, xml_parent, data):
def groovy_script(registry, xml_parent, data):
def rabbitmq(registry, xml_parent, data):
def parameterized_timer(parser, xml_parent, data):
def http_endpoint(registry, xml_parent, data):
def docker_custom_build_env(registry, xml_parent, data):
def ci_skip(registry, xml_parent, data):
def config_file_provider(registry, xml_parent, data):
def logfilesize(registry, xml_parent, data):
def timeout(registry, xml_parent, data):
def timestamps(registry, xml_parent, data):
def ansicolor(registry, xml_parent, data):
def build_keeper(registry, xml_parent, data):
def live_screenshot(registry, xml_parent, data):
def mask_passwords(registry, xml_parent, data):
def workspace_cleanup(registry, xml_parent, data):
def m2_repository_cleanup(registry, xml_parent, data):
def rvm_env(registry, xml_parent, data):
def rbenv(registry, xml_parent, data):
def build_name(registry, xml_parent, data):
def port_allocator(registry, xml_parent, data):
def locks(registry, xml_parent, data):
def copy_to_slave(registry, xml_parent, data):
def inject(registry, xml_parent, data):
def inject_ownership_variables(registry, xml_parent, data):
def inject_passwords(registry, xml_parent, data):
def env_file(registry, xml_parent, data):
def env_script(registry, xml_parent, data):
def jclouds(registry, xml_parent, data):
def openstack(registry, xml_parent, data):
def build_user_vars(registry, xml_parent, data):
def release(registry, xml_parent, data):
def sauce_ondemand(registry, xml_parent, data):
def sonar(registry, xml_parent, data):
def pathignore(registry, xml_parent, data):
def pre_scm_buildstep(registry, xml_parent, data):
def logstash(registry, xml_parent, data):
def mongo_db(registry, xml_parent, data):
def delivery_pipeline(registry, xml_parent, data):
def matrix_tie_parent(registry, xml_parent, data):
def exclusion(registry, xml_parent, data):
def ssh_agent_credentials(registry, xml_parent, data):
def credentials_binding(registry, xml_parent, data):
def custom_tools(registry, xml_parent, data):
def nodejs_installator(registry, xml_parent, data):
def xvnc(registry, xml_parent, data):
def job_log_logger(registry, xml_parent, data):
def xvfb(registry, xml_parent, data):
def android_emulator(registry, xml_parent, data):
def artifactory_maven(registry, xml_parent, data):
def artifactory_generic(registry, xml_parent, data):
def artifactory_maven_freestyle(registry, xml_parent, data):
def maven_release(registry, xml_parent, data):
def version_number(parser, xml_parent, data):
def shell(registry, xml_parent, data):
def python(registry, xml_parent, data):
def copyartifact(registry, xml_parent, data):
def change_assembly_version(registry, xml_parent, data):
def fingerprint(registry, xml_parent, data):
def ant(registry, xml_parent, data):
def trigger_remote(registry, xml_parent, data):
def trigger_builds(registry, xml_parent, data):
def builders_from(registry, xml_parent, data):
def http_request(registry, xml_parent, data):
def inject(registry, xml_parent, data):
def kmap(registry, xml_parent, data):
def artifact_resolver(registry, xml_parent, data):
def doxygen(registry, xml_parent, data):
def gradle(registry, xml_parent, data):
def _groovy_common_scriptSource(data):
def groovy(registry, xml_parent, data):
def system_groovy(registry, xml_parent, data):
def batch(registry, xml_parent, data):
def powershell(registry, xml_parent, data):
def msbuild(registry, xml_parent, data):
def conditional_step(registry, xml_parent, data):
def maven_builder(registry, xml_parent, data):
def maven_target(registry, xml_parent, data):
def multijob(registry, xml_parent, data):
def config_file_provider(registry, xml_parent, data):
def grails(registry, xml_parent, data):
def sbt(registry, xml_parent, data):
def critical_block_start(registry, xml_parent, data):
def critical_block_end(registry, xml_parent, data):
def publish_over_ssh(registry, xml_parent, data):
def saltstack(parser, xml_parent, data):
def shining_panda(registry, xml_parent, data):
def tox(registry, xml_parent, data):
def managed_script(registry, xml_parent, data):
def cmake(registry, xml_parent, data):
def dsl(registry, xml_parent, data):
def github_notifier(registry, xml_parent, data):
def scan_build(registry, xml_parent, data):
def ssh_builder(registry, xml_parent, data):
def sonar(registry, xml_parent, data):
def xcode(registry, xml_parent, data):
def sonatype_clm(registry, xml_parent, data):
def beaker(registry, xml_parent, data):
def cloudformation(registry, xml_parent, data):
def jms_messaging(registry, xml_parent, data):
def openshift_build_verify(registry, xml_parent, data):
def openshift_builder(registry, xml_parent, data):
def openshift_creator(registry, xml_parent, data):
def openshift_dep_verify(registry, xml_parent, data):
def openshift_deployer(registry, xml_parent, data):
def openshift_img_tagger(registry, xml_parent, data):
def openshift_scaler(registry, xml_parent, data):
def openshift_svc_verify(registry, xml_parent, data):
def runscope(registry, xml_parent, data):
def description_setter(registry, xml_parent, data):
def docker_build_publish(parse, xml_parent, data):
def build_name_setter(registry, xml_parent, data):
def nexus_artifact_uploader(registry, xml_parent, data):
def ansible_playbook(parser, xml_parent, data):
def git(registry, xml_parent, data):
def cvs(registry, xml_parent, data):
def repo(registry, xml_parent, data):
def store(registry, xml_parent, data):
def svn(registry, xml_parent, data):
def tfs(registry, xml_parent, data):
def workspace(registry, xml_parent, data):
def hg(self, xml_parent, data):
def openshift_img_streams(registry, xml_parent, data):
def bzr(registry, xml_parent, data):
def url(registry, xml_parent, data):
def dimensions(registry, xml_parent, data):
def deep_format(obj, paramdict, allow_empty=False):
def remove_ignorable_whitespace(node):
def try_dbfield(fn, field_class):
def get_model_field(model, field_name):
def get_field_parts(model, field_name):
def resolve_field(model_field, lookup_expr):
def verbose_field_name(model, field_name):
def verbose_lookup_expr(lookup_expr):
def label_for_filter(model, field_name, lookup_expr, exclude=False):
def raw_validation(error):
def parse_version(version):
def get_filter_name(field_name, lookup_expr):
def remote_field(field):
def make_aware(value, timezone, is_dst):
def checkItemsEqual(L1, L2):
def random_y_given_x(x):
def p_topic_given_document(topic, d, alpha=0.1):
def p_word_given_topic(word, topic, beta=0.1):
def topic_weight(d, word, k):
def median(v):
def quantile(x, p):
def mode(x):
def de_mean(x):
def variance(x):
def split_data(data, prob):
def uniform_cdf(x):
def inverse_normal_cdf(p, mu=0, sigma=1, tolerance=1e-05):
def sum_of_squares(v):
def step(v, direction, step_size):
def safe(f):
def minimize_batch(target_fn, gradient_fn, theta_0, tolerance=1e-06):
def negate(f):
def negate_all(f):
def in_random_order(data):
def vector_add(v, w):
def vector_subtract(v, w):
def vector_mean(vectors):
def dot(v, w):
def sum_of_squares(v):
def make_matrix(num_rows, num_cols, entry_fn):
def is_diagonal(i, j):
def bucketize(point, bucket_size):
def make_histogram(points, bucket_size):
def random_normal():
def correlation_matrix(data):
def parse_row(input_row, parsers):
def parse_rows_with(reader, parsers):
def try_or_none(f):
def try_parse_field(field_name, value, parser_dict):
def picker(field_name):
def pluck(field_name, rows):
def rescale(data_matrix):
def de_mean_matrix(A):
def directional_variance_i(x_i, w):
def directional_variance(X, w):
def directional_variance_gradient_i(x_i, w):
def project(v, w):
def remove_projection_from_vector(v, w):
def remove_projection(X, w):
def count_words(training_set):
def word_probabilities(counts, total_spams, total_non_spams, k=0.5):
def normal_approximation_to_binomial(n, p):
def normal_upper_bound(probability, mu=0, sigma=1):
def normal_lower_bound(probability, mu=0, sigma=1):
def normal_two_sided_bounds(probability, mu=0, sigma=1):
def run_experiment():
def reject_fairness(experiment):
def B(alpha, beta):
def is_video(td):
def book_info(td):
def get_year(book):
def number_of_friends(user):
def not_the_same(user, other_user):
def not_friends(user, other_user):
def entropy(class_probabilities):
def partition_entropy(subsets):
def group_by(items, key_fn):
def partition_by(inputs, attribute):
def partition_entropy_by(inputs, attribute):
def classify(tree, input):
def squared_clustering_errors(inputs, k):
def is_leaf(cluster):
def get_children(cluster):
def get_values(cluster):
def cluster_distance(cluster1, cluster2, distance_agg=min):
def perceptron_output(weights, bias, x):
def feed_forward(neural_network, input_vector):
def patch(x, y, hatch, color):
def make_user_interest_vector(user_interests):
def majority_vote(labels):
def knn_classify(k, labeled_points, new_point):
def logistic_log_partial_ij(x_i, y_i, beta, j):
def logistic_log_gradient_i(x_i, y_i, beta):
def word_count_old(documents):
def wc_mapper(document):
def wc_reducer(word, counts):
def word_count(documents):
def map_reduce(inputs, mapper, reducer):
def reduce_with(aggregation_fn, key, values):
def values_reducer(aggregation_fn):
def data_science_day_mapper(status_update):
def most_popular_word_reducer(user, words_and_counts):
def matrix_multiply_mapper(m, element):
def farness(user):
def vector_as_matrix(v):
def vector_from_matrix(v_as_matrix):
def squared_error_gradient(x_i, y_i, beta):
def bootstrap_sample(data):
def bootstrap_statistic(data, stats_fn, num_samples):
def squared_error_ridge(x_i, y_i, beta, alpha):
def ridge_penalty_gradient(beta, alpha):
def squared_error_ridge_gradient(x_i, y_i, beta, alpha):
def estimate_beta_ridge(x, y, alpha):
def least_squares_fit(x, y):
def total_sum_of_squares(y):
def r_squared(alpha, beta, x, y):
def random_y_given_x(x):
def p_topic_given_document(topic, d, alpha=0.1):
def p_word_given_topic(word, topic, beta=0.1):
def topic_weight(d, word, k):
def split_data(data, prob):
def uniform_cdf(x):
def inverse_normal_cdf(p, mu=0, sigma=1, tolerance=1e-05):
def sum_of_squares(v):
def step(v, direction, step_size):
def safe(f):
def minimize_batch(target_fn, gradient_fn, theta_0, tolerance=1e-06):
def negate(f):
def negate_all(f):
def in_random_order(data):
def vector_add(v, w):
def vector_subtract(v, w):
def vector_mean(vectors):
def dot(v, w):
def sum_of_squares(v):
def make_matrix(num_rows, num_cols, entry_fn):
def is_diagonal(i, j):
def bucketize(point, bucket_size):
def make_histogram(points, bucket_size):
def random_normal():
def correlation_matrix(data):
def parse_row(input_row, parsers):
def parse_rows_with(reader, parsers):
def try_or_none(f):
def try_parse_field(field_name, value, parser_dict):
def picker(field_name):
def pluck(field_name, rows):
def rescale(data_matrix):
def de_mean_matrix(A):
def directional_variance_i(x_i, w):
def directional_variance(X, w):
def directional_variance_gradient_i(x_i, w):
def project(v, w):
def remove_projection_from_vector(v, w):
def remove_projection(X, w):
def count_words(training_set):
def word_probabilities(counts, total_spams, total_non_spams, k=0.5):
def normal_approximation_to_binomial(n, p):
def normal_upper_bound(probability, mu=0, sigma=1):
def normal_lower_bound(probability, mu=0, sigma=1):
def normal_two_sided_bounds(probability, mu=0, sigma=1):
def run_experiment():
def reject_fairness(experiment):
def B(alpha, beta):
def is_video(td):
def book_info(td):
def get_year(book):
def number_of_friends(user):
def not_the_same(user, other_user):
def not_friends(user, other_user):
def entropy(class_probabilities):
def partition_entropy(subsets):
def group_by(items, key_fn):
def partition_by(inputs, attribute):
def partition_entropy_by(inputs, attribute):
def classify(tree, input):
def squared_clustering_errors(inputs, k):
def is_leaf(cluster):
def get_children(cluster):
def get_values(cluster):
def cluster_distance(cluster1, cluster2, distance_agg=min):
def perceptron_output(weights, bias, x):
def feed_forward(neural_network, input_vector):
def patch(x, y, hatch, color):
def make_user_interest_vector(user_interests):
def majority_vote(labels):
def knn_classify(k, labeled_points, new_point):
def logistic_log_partial_ij(x_i, y_i, beta, j):
def logistic_log_gradient_i(x_i, y_i, beta):
def median(v):
def quantile(x, p):
def mode(x):
def de_mean(x):
def variance(x):
def word_count_old(documents):
def wc_mapper(document):
def wc_reducer(word, counts):
def word_count(documents):
def map_reduce(inputs, mapper, reducer):
def reduce_with(aggregation_fn, key, values):
def values_reducer(aggregation_fn):
def data_science_day_mapper(status_update):
def most_popular_word_reducer(user, words_and_counts):
def matrix_multiply_mapper(m, element):
def farness(user):
def vector_as_matrix(v):
def vector_from_matrix(v_as_matrix):
def squared_error_gradient(x_i, y_i, beta):
def bootstrap_sample(data):
def bootstrap_statistic(data, stats_fn, num_samples):
def squared_error_ridge(x_i, y_i, beta, alpha):
def ridge_penalty_gradient(beta, alpha):
def squared_error_ridge_gradient(x_i, y_i, beta, alpha):
def estimate_beta_ridge(x, y, alpha):
def least_squares_fit(x, y):
def total_sum_of_squares(y):
def r_squared(alpha, beta, x, y):
def put(dct, entry):
def make_identifier(name):
def tuple_key(tup):
def LittleEndianBitStruct(*args):
def parse_search_string(string):
def rewrite_long_table_names():
def restore_long_table_names():
def connect(uri=None, session_args={}, engine_args={}, engine_prefix=''):
def identifier_from_name(name):
def get(session, table, identifier=None, name=None, id=None, language=None):
def filter_name(query, table, name, language, name_attribute='name'):
def order_by_name(query, table, language=None, *extra_languages, **kwargs):
def _getset_factory_factory(column_name, string_getter):
def create_translation_table(_table_name, foreign_class, relation_name, language_class, relation_lazy='select', **kwargs):
def compute_dependencies(tables):
def find_dependent_tables(tables, graph=None):
def _get_table_names(metadata, patterns):
def _get_verbose_prints(verbose):
def load(session, tables=[], directory=None, drop_tables=False, verbose=False, safe=True, recursive=True, langs=None):
def dump(session, tables=[], directory=None, verbose=False, langs=None):
def crc(string):
def group_by_object(stream):
def merge_adjacent(gen):
def leftjoin(left_stream, right_stream, key=(lambda x: x), unused=None):
def synchronize(reference, stream, key=(lambda x: x), unused=None):
def yield_source_csv_messages(cls, foreign_cls, csvreader, force_column=None):
def yield_guessed_csv_messages(file):
def yield_translation_csv_messages(file, no_header=False):
def pot_for_column(cls, column, summary=False):
def match_to_source(source, *translations):
def merge_translations(source_stream, *translation_streams, **kwargs):
def test_main_tables():
def test_totodile(session, media_root):
def test_chimecho(session, media_root):
def test_venonat(session, media_root):
@pytest.mark.xfail DCNL def test_arceus_icon(session, media_root):
def test_strict_castform(session, media_root):
def test_strict_exeggcute(session, media_root):
def hit(filenames, method, *args, **kwargs):
@pytest.mark.slow DCNL @pytest.mark.xfail DCNL def test_get_everything(session, media_root):
def test_crash_empty_prefix(lookup):
def test_encounter_slots(session):
@parametrize('cls', tables.mapped_classes) DCNL def test_nonzero_autoincrement_ids(session, cls):
def test_unique_form_order(session):
def test_default_forms(session):
@parametrize('varname', [attr for attr in dir(tables) if (not attr.startswith('_'))]) DCNL def test_variable_names(varname):
@parametrize('table', tables.mapped_classes) DCNL def test_variable_names_2(table):
def test_class_order():
def test_i18n_table_creation():
@parametrize('cls', classes) DCNL def test_texts(cls):
@parametrize('table', tables.mapped_classes) DCNL def test_identifiers_with_names(table):
def markdown_column_params():
@pytest.mark.slow DCNL @parametrize(('parent_class', 'translation_class', 'column_name'), list(markdown_column_params())) DCNL def test_markdown_values(session, parent_class, translation_class, column_name):
def create_parser():
def get_session(args):
def get_lookup(args, session=None, recreate=False):
def get_csv_directory(args):
def column_type_str(column):
def column_header(c, class_name=None, transl_name=None, show_type=True, relation=None, relation_name=None):
def with_header(header=None):
def LanguageFacet(locale_ident, extra_weights={}):
def nCr(n, r):
def calculated_stat(base_stat, level, iv, effort, nature=None):
def calculated_hp(base_stat, level, iv, effort, nature=None):
def earned_exp(base_exp, level):
def capture_chance(percent_hp, capture_rate, ball_bonus=10, status_bonus=1, capture_bonus=10, capture_modifier=0):
def romanize(string, lang='en'):
def _data_to_xml(data):
def get_certificate_from_publish_settings(publish_settings_path, path_to_write_certificate, subscription_id=None):
def _management_error_handler(http_error):
def parse_response_for_async_op(response):
def _general_error_handler(http_error):
def _get_readable_id(id_name, id_prefix_to_skip):
def _create_entry(entry_body):
def _get_serialization_name(element_name):
def _get_request_body(request_body):
def _get_entities_custom_fields(entities):
@app.route('/') DCNL @app.route('/home') DCNL def home_view():
@app.route('/login') DCNL def login_view():
@app.route('/azurelogin') DCNL def azurelogin_view():
@app.route('/authorized') DCNL def authorized_view():
@app.route('/contact') DCNL def contact_view():
@app.route('/account') DCNL @auth.require_login DCNL def account_view():
@app.route('/account/<subscription_id>') DCNL @auth.require_login DCNL def subscription_view(subscription_id):
@app.route('/account/<subscription_id>/resourcegroups/<resource_group_name>') DCNL @auth.require_login DCNL def resourcegroup_view(subscription_id, resource_group_name):
@app.route('/account/<subscription_id>/resourcegroups/<resource_group_name>/vms/<vm_name>') DCNL @auth.require_login DCNL def vm_view(subscription_id, resource_group_name, vm_name):
@app.route('/account/<subscription_id>/resourcegroups/<resource_group_name>/virtualnetworks/<network_name>') DCNL @auth.require_login DCNL def virtual_network_view(subscription_id, resource_group_name, network_name):
@app.route('/account/<subscription_id>/resourcegroups/<resource_group_name>/storageaccounts/<account_name>') DCNL @auth.require_login DCNL def storageaccount_view(subscription_id, resource_group_name, account_name):
@app.route('/account/<subscription_id>/resourcegroups/<resource_group_name>/storageaccounts/<account_name>/containers/<container_name>') DCNL @auth.require_login DCNL def storageaccount_container_view(subscription_id, resource_group_name, account_name, container_name):
@app.route('/account/<subscription_id>/resourcegroups/<resource_group_name>/storageaccounts/<account_name>/queues/<queue_name>') DCNL @auth.require_login DCNL def storageaccount_queue_view(subscription_id, resource_group_name, account_name, queue_name):
@app.route('/account/<subscription_id>/resourcegroups/<resource_group_name>/storageaccounts/<account_name>/tables/<table_name>') DCNL @auth.require_login DCNL def storageaccount_table_view(subscription_id, resource_group_name, account_name, table_name):
@app.route('/account/<subscription_id>/providers/<provider_namespace>/unregister', methods=['POST']) DCNL @auth.require_login DCNL def provider_unregister_post(subscription_id, provider_namespace):
@app.route('/account/<subscription_id>/providers/<provider_namespace>/register', methods=['POST']) DCNL @auth.require_login DCNL def provider_register_post(subscription_id, provider_namespace):
def log(txt):
def get_challenge_for_url(url):
def remove_challenge_for_url(url):
def set_challenge_for_url(url, challenge):
def clear():
def make_title(title):
def get_cli_active_cloud():
def get_cli_profile():
def get_azure_cli_credentials():
def _instantiate_client(client_class, **kwargs):
def get_client_from_cli_profile(client_class, **kwargs):
def get_client_from_json_dict(client_class, config_dict, **kwargs):
def get_client_from_auth_file(client_class, auth_path=None, **kwargs):
def _create_message(response, service_instance):
def _convert_etree_element_to_rule(entry_element):
def _convert_etree_element_to_queue(entry_element):
def _convert_etree_element_to_topic(entry_element):
def _convert_etree_element_to_subscription(entry_element):
def _service_bus_error_handler(http_error):
def _general_error_handler(http_error):
def _dont_fail_on_exist(error):
def _dont_fail_not_exist(error):
def _get_readable_id(id_name, id_prefix_to_skip):
def _get_serialization_name(element_name):
def _get_request_body(request_body):
def travis_build_package():
def get_print_format(records):
def print_records(records, print_format=None, title=None, foot_notes=None):
def get_repo_root():
def get_all_module_paths():
def make_dirs(path):
def get_test_results_dir(with_timestamp=None, prefix=None):
def filter_blacklisted_modules(*black_list_modules):
def check_recordings():
def get_nose_runner(report_folder, parallel=True, process_timeout=600, process_restart=True):
def exec_command(command, cwd=None, stdout=None, env=None):
def set_version(path_to_setup):
def exec_command(command, cwd=None, stdout=None, env=None):
def build(pkg_path, dest):
def release(pkg_dir, repo):
def run_build_release(component_name, repo, dest=None, use_version_patch=True):
def set_default(obj):
def get_repo_root():
def get_name_from_path(path):
def mean(data):
def sq_deviation(data):
def pstdev(data):
def list_components():
def list_available_components():
def remove(component_name):
def update(private=False, pre=False, link=None, additional_components=None, allow_third_party=False):
def _exec_command(command_list, cwd=None, stdout=None):
def get_source():
def _add_platform_dep_packages(packages_dest, dependencies_list):
def add_packages_to_bundle(bundle_working_dir, cli_dist_dir):
def _custom_request_matcher(r1, r2):
def find_recording_dir(test_file):
def get_folded_parameter_help_string(display_name, allow_none=False, allow_new=False, default_none=False, other_required_option=None):
def get_progress_view(determinant=False, outstream=sys.stderr):
def enum_choice_list(data):
def three_state_flag(positive_label='true', negative_label='false', invert=False, return_label=False):
def get_command_table(module_name=None):
def register_cli_argument(scope, dest, arg_type=None, **kwargs):
def register_extra_cli_argument(command, dest, **kwargs):
def cli_command(module_name, name, operation, client_factory=None, transform=None, table_transformer=None, no_wait_param=None, confirmation=None, exception_handler=None, formatter_class=None, deprecate_info=None, resource_type=None, max_api=None, min_api=None):
def get_op_handler(operation):
def _populate_alternate_kwargs(kwargs):
def resource_id(**kwargs):
def parse_resource_id(rid):
def resource_exists(resource_group, name, namespace, type, **_):
def extract_full_summary_from_signature(operation):
def _option_descriptions(operation):
def extract_args_from_signature(operation, no_wait_param=None):
def validate_tags(ns):
def validate_tag(string):
def validate_key_value_pairs(string):
def validate_parameter_set(namespace, required, forbidden, dest_to_options=None, description=None):
def get_json_object(json_string):
def shell_safe_json_parse(json_or_dict_string, preserve_order=False):
def b64encode(s):
def b64_to_hex(s):
def hash_string(value, length=16, force_lower=False):
def get_complex_argument_processor(expanded_arguments, assigned_arg, model_type):
def _helper_get_clouds(_):
def get_api_version(resource_type):
def supported_api_version(resource_type, min_api=None, max_api=None):
def get_sdk(resource_type, *attr_args, **kwargs):
def get_api_version(api_profile, resource_type):
def supported_api_version(api_profile, resource_type, min_api=None, max_api=None):
def get_versioned_sdk_path(api_profile, resource_type):
def _explode_list_args(args):
def _config_add_cloud(config, cloud, overwrite=False):
def configure_logging(argv, stream=None):
def in_diagnostic_mode():
def jmespath_type(raw_query):
def _should_raise(raise_in_diagnostics):
def call_once(factory_func):
def hash256_result(func):
def prompt_choice_list(msg, a_list, default=1, help_string=None):
def get_datetime_type():
def cli_consumption_list_usage(client, invoice_name=None, billing_period_name=None, top=None, include_additional_properties=False, include_meter_details=False, start_date=None, end_date=None):
def register_resource_parameter(command, dest, arg_group=None, required=True):
def _parse_actions(actions):
def _parse_action_removals(actions):
def list_metric_definitions(client, resource, resource_group_name=None, metric_names=None):
def _metric_names_filter_builder(metric_names=None):
def list_metrics(client, resource, time_grain, resource_group_name=None, start_time=None, end_time=None, metric_names=None):
def _metrics_odata_filter_builder(time_grain, start_time=None, end_time=None, metric_names=None):
def list_activity_log(client, filters=None, correlation_id=None, resource_group=None, resource_id=None, resource_provider=None, start_time=None, end_time=None, caller=None, status=None, max_events=50, select=None):
def _build_activity_log_odata_filter(correlation_id=None, resource_group=None, resource_id=None, resource_provider=None, start_time=None, end_time=None, caller=None, status=None):
def _activity_log_select_filter_builder(events=None):
def scaffold_autoscale_settings_parameters(client):
def _validate_tags(namespace):
def _validate_tag(string):
def disable_http_proxy():
def set_http_proxy(host, port):
def _get_proxy_instance():
def wait_then_open(url):
def wait_then_open_async(url):
def acs_browse(resource_group, name, disable_browser=False, ssh_key_file=None):
def k8s_browse(name, resource_group, disable_browser=False, ssh_key_file=None):
def dcos_browse(name, resource_group, disable_browser=False, ssh_key_file=None):
def dcos_install_cli(install_location=None, client_version='1.8'):
def k8s_install_cli(client_version='latest', install_location=None):
def acs_create(resource_group_name, deployment_name, name, ssh_key_value, dns_name_prefix=None, location=None, admin_username='azureuser', api_version=None, master_profile=None, master_vm_size='Standard_D2_v2', master_osdisk_size=0, master_count=1, master_vnet_subnet_id='', master_first_consecutive_static_ip='', master_storage_profile='', agent_profiles=None, agent_vm_size='Standard_D2_v2', agent_osdisk_size=0, agent_count=3, agent_vnet_subnet_id='', agent_ports=None, agent_storage_profile='', orchestrator_type='DCOS', service_principal=None, client_secret=None, tags=None, windows=False, admin_password='', generate_ssh_keys=False, validate=False, no_wait=False):
def k8s_get_credentials(name, resource_group_name, path=os.path.join(os.path.expanduser('~'), '.kube', 'config'), ssh_key_file=None):
def _get_host_name(acs_info):
def _get_username(acs_info):
def _get_acs_info(name, resource_group_name):
def _rand_str(n):
def list_container_services(client, resource_group_name=None):
def acr_credential_show(registry_name, resource_group_name=None):
def acr_credential_renew(registry_name, password_name, resource_group_name=None):
def validate_headers(namespace):
def validate_header(string):
def _arm_get_resource_by_name(resource_name, resource_type):
def get_resource_group_name_by_resource_id(resource_id):
def get_resource_group_name_by_registry_name(registry_name, resource_group_name=None):
def get_resource_id_by_storage_account_name(storage_account_name):
def get_resource_group_name_by_storage_account_name(storage_account_name, resource_group_name=None):
def get_registry_by_name(registry_name, resource_group_name=None):
def get_access_key_by_storage_account_name(storage_account_name, resource_group_name=None):
def arm_deploy_template_managed_storage(resource_group_name, registry_name, location, sku, admin_user_enabled, deployment_name=None):
def arm_deploy_template_new_storage(resource_group_name, registry_name, location, sku, storage_account_name, admin_user_enabled, deployment_name=None):
def arm_deploy_template_existing_storage(resource_group_name, registry_name, location, sku, storage_account_name, admin_user_enabled, deployment_name=None):
def _arm_deploy_template(deployments_client, resource_group_name, deployment_name, properties):
def _parameters(registry_name, location, sku, admin_user_enabled, storage_account_name=None, storage_account_resource_group=None, registry_api_version=None):
def managed_registry_validation(registry_name, resource_group_name=None, message=None):
def validate_sku_update(sku_parameter):
def ensure_storage_account_parameter(storage_account_parameter):
def acr_repository_list(registry_name, resource_group_name=None, username=None, password=None):
def acr_repository_show_tags(registry_name, repository, resource_group_name=None, username=None, password=None):
def acr_repository_show_manifests(registry_name, repository, resource_group_name=None, username=None, password=None):
def acr_repository_delete(registry_name, repository, tag=None, manifest=None, resource_group_name=None, username=None, password=None, yes=False):
def acr_check_name(registry_name):
def acr_list(resource_group_name=None):
def acr_create(registry_name, resource_group_name, sku, location=None, storage_account_name=None, admin_enabled='false', deployment_name=None):
def acr_delete(registry_name, resource_group_name=None):
def acr_show(registry_name, resource_group_name=None):
def acr_update_get(client, registry_name, resource_group_name=None):
def acr_update_set(client, registry_name, resource_group_name=None, parameters=None):
def acr_login(registry_name, resource_group_name=None, username=None, password=None):
def acr_show_usage(registry_name, resource_group_name=None):
def get_arm_service_client():
def get_storage_service_client():
def get_acr_service_client(api_version=None):
def output_format(result):
def _format_group(item):
def _get_login_token(login_server, only_refresh_token=True, repository=None):
def get_login_refresh_token(login_server):
def get_login_access_token(login_server, repository=None):
def acr_webhook_list(registry_name, resource_group_name=None):
def acr_webhook_create(webhook_name, uri, actions, registry_name, resource_group_name=None, headers=None, status='enabled', scope=None, tags=None):
def acr_webhook_delete(webhook_name, registry_name, resource_group_name=None):
def acr_webhook_show(webhook_name, registry_name, resource_group_name=None):
def acr_webhook_update_get(client):
def acr_webhook_update_set(client, webhook_name, registry_name, resource_group_name=None, parameters=None):
def acr_webhook_get_config(webhook_name, registry_name, resource_group_name=None):
def acr_webhook_list_events(webhook_name, registry_name, resource_group_name=None):
def acr_webhook_ping(webhook_name, registry_name, resource_group_name=None):
def _get_resource_group_from_vault_name(vault_name):
def certificate_type(string):
def datetime_type(string):
def get_default_policy(client, scaffold=False):
def set_policy(client, resource_group_name, vault_name, object_id=None, spn=None, upn=None, key_permissions=None, secret_permissions=None, certificate_permissions=None):
def delete_policy(client, resource_group_name, vault_name, object_id=None, spn=None, upn=None):
def import_key(client, vault_base_url, key_name, destination=None, key_ops=None, disabled=False, expires=None, not_before=None, tags=None, pem_file=None, pem_password=None, byok_file=None):
def download_secret(client, vault_base_url, secret_name, file_path, encoding=None, secret_version=''):
def download_certificate(client, vault_base_url, certificate_name, file_path, encoding='PEM', certificate_version=''):
def add_certificate_contact(client, vault_base_url, contact_email, contact_name=None, contact_phone=None):
def delete_certificate_contact(client, vault_base_url, contact_email):
def create_certificate_issuer(client, vault_base_url, issuer_name, provider_name, account_id=None, password=None, disabled=None, organization_id=None):
def update_certificate_issuer(client, vault_base_url, issuer_name, provider_name=None, account_id=None, password=None, enabled=None, organization_id=None):
def list_certificate_issuer_admins(client, vault_base_url, issuer_name):
def add_certificate_issuer_admin(client, vault_base_url, issuer_name, email, first_name=None, last_name=None, phone=None):
def delete_certificate_issuer_admin(client, vault_base_url, issuer_name, email):
def _encode_hex(item):
def cli_keyvault_data_plane_command(name, operation, transform=None, table_transformer=None):
def _get_resource_group_from_vault_name(vault_name):
def _validate_secrets(secrets, os_type):
def _parse_image_argument(namespace):
def enable(resource_group_name, vm_name, aad_client_id, disk_encryption_keyvault, aad_client_secret=None, aad_client_cert_thumbprint=None, key_encryption_keyvault=None, key_encryption_key=None, key_encryption_algorithm='RSA-OAEP', volume_type=None):
def disable(resource_group_name, vm_name, volume_type=None, force=False):
def show(resource_group_name, vm_name):
def get_vm(resource_group_name, vm_name, expand=None):
def set_vm(instance, lro_operation=None, no_wait=False):
def _parse_rg_name(strid):
def list_vm(resource_group_name=None, show_details=False):
def list_vm_images(image_location=None, publisher_name=None, offer=None, sku=None, all=False):
def list_vm_extension_images(image_location=None, publisher_name=None, name=None, version=None, latest=False):
def list_ip_addresses(resource_group_name=None, vm_name=None):
def attach_managed_data_disk(resource_group_name, vm_name, disk, new=False, sku=None, size_gb=None, lun=None, caching=None):
def attach_unmanaged_data_disk(resource_group_name, vm_name, new=False, vhd_uri=None, lun=None, disk_name=None, size_gb=1023, caching=None):
def resize_vm(resource_group_name, vm_name, size, no_wait=False):
def list_unmanaged_disks(resource_group_name, vm_name):
def capture_vm(resource_group_name, vm_name, vhd_name_prefix, storage_container='vhds', overwrite=True):
def set_user(resource_group_name, vm_name, username, password=None, ssh_key_value=None, no_wait=False):
def delete_user(resource_group_name, vm_name, username, no_wait=False):
def reset_linux_ssh(resource_group_name, vm_name, no_wait=False):
def _reset_windows_admin(vm_instance, resource_group_name, username, password, no_wait=False):
def enable_boot_diagnostics(resource_group_name, vm_name, storage):
def set_extension(resource_group_name, vm_name, vm_extension_name, publisher, version=None, settings=None, protected_settings=None, no_auto_upgrade=False):
def set_vmss_extension(resource_group_name, vmss_name, extension_name, publisher, version=None, settings=None, protected_settings=None, no_auto_upgrade=False):
def set_diagnostics_extension(resource_group_name, vm_name, settings, protected_settings=None, version=None, no_auto_upgrade=False):
def set_vmss_diagnostics_extension(resource_group_name, vmss_name, settings, protected_settings=None, version=None, no_auto_upgrade=False):
def _merge_secrets(secrets):
def show_default_diagnostics_configuration(is_windows_os=False):
def vm_show_nic(resource_group_name, vm_name, nic):
def vm_list_nics(resource_group_name, vm_name):
def vm_add_nics(resource_group_name, vm_name, nics, primary_nic=None):
def vm_remove_nics(resource_group_name, vm_name, nics, primary_nic=None):
def vm_set_nics(resource_group_name, vm_name, nics, primary_nic=None):
def vm_open_port(resource_group_name, vm_name, port, priority=900, network_security_group_name=None, apply_to_subnet=False):
def scale_vmss(resource_group_name, vm_scale_set_name, new_capacity, no_wait=False):
def update_vmss_instances(resource_group_name, vm_scale_set_name, instance_ids, no_wait=False):
def get_vmss_instance_view(resource_group_name, vm_scale_set_name, instance_id=None):
def show_vmss(resource_group_name, vm_scale_set_name, instance_id=None):
def list_vmss(resource_group_name=None):
def deallocate_vmss(resource_group_name, vm_scale_set_name, instance_ids=None, no_wait=False):
def delete_vmss_instances(resource_group_name, vm_scale_set_name, instance_ids, no_wait=False):
def stop_vmss(resource_group_name, vm_scale_set_name, instance_ids=None, no_wait=False):
def reimage_vmss(resource_group_name, vm_scale_set_name, instance_id=None, no_wait=False):
def restart_vmss(resource_group_name, vm_scale_set_name, instance_ids=None, no_wait=False):
def start_vmss(resource_group_name, vm_scale_set_name, instance_ids=None, no_wait=False):
def get_vm_format_secret(secrets, certificate_store=None):
def create_custom_image(client, resource_group, lab_name, name, source_vm_id, os_type, os_state, author=None, description=None):
def create_lab_vm(client, resource_group, lab_name, name, notes=None, image=None, image_type=None, size=None, admin_username=getpass.getuser(), admin_password=None, ssh_key=None, authentication_type='password', vnet_name=None, subnet=None, disallow_public_ip_address=None, artifacts=None, location=None, tags=None, custom_image_id=None, lab_virtual_network_id=None, gallery_image_reference=None, generate_ssh_keys=None, allow_claim=False, disk_type=None, expiration_date=None, formula=None, ip_configuration=None, network_interface=None, os_type=None, saved_secret=None):
def list_vm(client, resource_group, lab_name, order_by=None, top=None, filters=None, all=None, claimable=None, environment=None, expand=None, object_id=None):
def claim_vm(client, lab_name=None, name=None, resource_group=None):
def create_environment(client, resource_group, lab_name, name, arm_template, parameters=None, artifact_source_name=None, user_name=None, tags=None):
def show_arm_template(client, resource_group, lab_name, name, artifact_source_name, export_parameters=False):
def _export_artifacts(formula):
def validate_lab_vm_create(namespace):
def validate_lab_vm_list(namespace):
def _validate_location(namespace):
def _validate_expiration_date(namespace):
def _validate_network_parameters(namespace, formula=None):
def _validate_ip_configuration(namespace, lab_vnet=None):
def _validate_image_argument(namespace, formula=None):
def _use_gallery_image(namespace):
def _use_custom_image(namespace):
def _get_formula(namespace):
def list_role_assignments(assignee=None, role=None, resource_group_name=None, scope=None, include_inherited=False, show_all=False, include_groups=False):
def create_user(client, user_principal_name, display_name, password, mail_nickname=None, immutable_id=None, force_change_password_next_login=False):
def list_groups(client, display_name=None, query_filter=None):
def deploy_arm_template():
def cli_billing_list_invoices(client, generate_url=False):
def cli_billing_get_invoice(client, name=None):
def cli_billing_list_periods(client):
def cli_redis_create(client, resource_group_name, name, location, sku, vm_size, tags=None, redis_configuration=None, enable_non_ssl_port=None, tenant_settings=None, shard_count=None, subnet_id=None, static_ip=None):
def cli_cosmosdb_create(client, resource_group_name, account_name, locations=None, kind=DatabaseAccountKind.global_document_db.value, default_consistency_level=None, max_staleness_prefix=100, max_interval=5, ip_range_filter=None, enable_automatic_failover=None):
def cli_cosmosdb_update(client, resource_group_name, account_name, locations=None, default_consistency_level=None, max_staleness_prefix=None, max_interval=None, ip_range_filter=None, enable_automatic_failover=None):
def cli_cosmosdb_list(client, resource_group_name=None):
def cli_cosmosdb_database_exists(client, database_id):
def cli_cosmosdb_database_show(client, database_id):
def cli_cosmosdb_database_list(client):
def cli_cosmosdb_database_create(client, database_id):
def cli_cosmosdb_database_delete(client, database_id):
def cli_cosmosdb_collection_exists(client, database_id, collection_id):
def cli_cosmosdb_collection_show(client, database_id, collection_id):
def cli_cosmosdb_collection_list(client, database_id):
def cli_cosmosdb_collection_delete(client, database_id, collection_id):
def cli_cosmosdb_collection_create(client, database_id, collection_id, throughput=None, partition_key_path=None, default_ttl=None, indexing_policy=DEFAULT_INDEXING_POLICY):
def cli_cosmosdb_collection_update(client, database_id, collection_id, throughput=None, default_ttl=None, indexing_policy=None):
def cli_cosmosdb_data_plane_command(name, operation, client_factory, transform=None, table_transformer=None, exception_handler=None):
def validate_failover_policies(ns):
def validate_locations(ns):
def storage_blob_copy_batch(client, source_client, destination_container=None, source_container=None, source_share=None, source_sas=None, pattern=None, dryrun=False):
def storage_blob_download_batch(client, source, destination, source_container_name, pattern=None, dryrun=False):
def storage_blob_upload_batch(client, source, destination, pattern=None, source_files=None, destination_container_name=None, blob_type=None, content_settings=None, metadata=None, validate_content=False, maxsize_condition=None, max_connections=2, lease_id=None, if_modified_since=None, if_unmodified_since=None, if_match=None, if_none_match=None, timeout=None, dryrun=False):
def collect_blobs(blob_service, container, pattern=None):
def collect_files(file_service, share, pattern=None):
def glob_files_locally(folder_path, pattern):
def glob_files_remotely(client, share_name, pattern):
def validate_client_parameters(namespace):
def process_blob_source_uri(namespace):
def validate_encryption(namespace):
def validate_entity(namespace):
def get_file_path_validator(default_file_param=None):
def table_permission_validator(namespace):
def get_source_file_or_blob_service_client(namespace):
def process_blob_download_batch_parameters(namespace):
def process_blob_upload_batch_parameters(namespace):
def process_file_upload_batch_parameters(namespace):
def process_file_download_batch_parameters(namespace):
def get_datetime_type(to_string):
def ipv4_range_type(string):
def resource_type_type(string):
def services_type(string):
def list_storage_accounts(resource_group_name=None):
def show_storage_account_usage():
def show_storage_account_connection_string(resource_group_name, account_name, protocol='https', blob_endpoint=None, file_endpoint=None, queue_endpoint=None, table_endpoint=None, key_name='primary'):
@transfer_doc(BlockBlobService.create_blob_from_path) DCNL def upload_blob(client, container_name, blob_name, file_path, blob_type=None, content_settings=None, metadata=None, validate_content=False, maxsize_condition=None, max_connections=2, lease_id=None, if_modified_since=None, if_unmodified_since=None, if_match=None, if_none_match=None, timeout=None):
def create_acl_policy(client, container_name, policy_name, start=None, expiry=None, permission=None, **kwargs):
def get_acl_policy(client, container_name, policy_name, **kwargs):
def list_acl_policies(client, container_name, **kwargs):
def set_acl_policy(client, container_name, policy_name, start=None, expiry=None, permission=None, **kwargs):
def delete_acl_policy(client, container_name, policy_name, **kwargs):
def multi_service_properties_factory(kwargs):
def cli_storage_data_plane_command(name, operation, client_factory, transform=None, table_transformer=None, exception_handler=None):
def transform_acl_list_output(result):
def transform_url(result):
def storage_file_upload_batch(client, destination, source, pattern=None, dryrun=False, validate_content=False, content_settings=None, max_connections=1, metadata=None):
def storage_file_download_batch(client, source, destination, pattern=None, dryrun=False, validate_content=False, max_connections=1):
def storage_file_copy_batch(client, source_client, destination_share=None, destination_path=None, source_container=None, source_share=None, source_sas=None, pattern=None, dryrun=False, metadata=None, timeout=None):
def _create_file_and_directory_from_blob(file_service, blob_service, share, container, sas, blob_name, destination_dir=None, metadata=None, timeout=None, existing_dirs=None):
def _create_file_and_directory_from_file(file_service, source_file_service, share, source_share, sas, source_file_dir, source_file_name, destination_dir=None, metadata=None, timeout=None, existing_dirs=None):
def _make_directory_in_files_share(file_service, file_share, directory_path, existing_dirs=None):
def transform_file_output(result):
def transform_file_directory_result(result):
def list_resource_groups(tag=None):
def create_resource_group(rg_name, location, tags=None):
def create_appliance(resource_group_name, appliance_name, managedby_resource_group_id, location, kind, managedapp_definition_id=None, plan_name=None, plan_publisher=None, plan_product=None, plan_version=None, tags=None, parameters=None):
def show_appliance(resource_group_name=None, appliance_name=None):
def show_appliancedefinition(resource_group_name=None, appliance_definition_name=None):
def create_appliancedefinition(resource_group_name, appliance_definition_name, location, lock_level, package_file_uri, authorizations, description, display_name, tags=None):
def export_group_as_template(resource_group_name, include_comments=False, include_parameter_default_value=False):
def tag_resource(tags, resource_group_name=None, resource_provider_namespace=None, parent_resource_path=None, resource_type=None, resource_name=None, resource_id=None, api_version=None):
def get_deployment_operations(client, resource_group_name, deployment_name, operation_ids):
def _list_resources_odata_filter_builder(resource_group_name=None, resource_provider_namespace=None, resource_type=None, name=None, tag=None, location=None):
def move_resource(ids, destination_group, destination_subscription_id=None):
def list_locks(resource_group_name=None, resource_provider_namespace=None, parent_resource_path=None, resource_type=None, resource_name=None, filter_string=None):
def _validate_lock_params_match_lock(lock_client, name, resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name):
def get_lock(name, resource_group_name=None, resource_provider_namespace=None, parent_resource_path=None, resource_type=None, resource_name=None):
def delete_lock(name, resource_group_name=None, resource_provider_namespace=None, parent_resource_path=None, resource_type=None, resource_name=None):
def create_lock(name, resource_group_name=None, resource_provider_namespace=None, notes=None, parent_resource_path=None, resource_type=None, resource_name=None, level=None):
def create_resource_link(link_id, target_id, notes=None):
def update_resource_link(link_id, target_id=None, notes=None):
def list_resource_links(scope=None, filter_string=None):
def list_components():
def list_available_components():
def remove(component_name):
def update(private=False, pre=False, link=None, additional_components=None, allow_third_party=False):
def _server_restore(client, resource_group_name, server_name, parameters, **kwargs):
def _download_log_files(client, resource_group_name, server_name, file_name):
def _list_log_files_with_filter(client, resource_group_name, server_name, filename_contains=None, file_last_written=None, max_file_size=None):
def _server_list_custom_func(client, resource_group_name=None):
def update_git_token(git_token=None):
def set_deployment_user(user_name, password=None):
def _get_cert(certificate_password, certificate_file):
def list_subscriptions(all=False, refresh=False):
def get_access_token(subscription=None, resource=None):
def set_active_subscription(subscription):
def account_clear():
def login(username=None, password=None, service_principal=None, tenant=None, allow_no_subscriptions=False):
def logout(username=None):
def _configure_db_create_params(cmd, engine, create_mode):
def datetime_format(value):
def duration_format(value):
def metadata_item_format(value):
def environment_setting_format(value):
def application_package_reference_format(value):
def certificate_reference_format(value):
def task_id_ranges_format(value):
def resource_file_format(value):
def validate_required_parameter(ns, parser):
def storage_account_id(namespace):
def keyvault_id(namespace):
def application_enabled(namespace):
def validate_pool_resize_parameters(namespace):
def validate_json_file(namespace):
def validate_cert_file(namespace):
def validate_options(namespace):
def validate_file_destination(namespace):
def validate_pool_settings(ns, parser):
def validate_cert_settings(ns):
def _upload_package_blob(package_file, url):
def _load_model(name):
def _join_prefix(prefix, name):
def _build_prefix(arg, param, path):
def find_param_type(model, param):
def find_param_help(model, param):
def find_return_type(model):
def enum_value(enum_str):
def class_name(type_str):
def operations_name(class_str):
def full_name(arg_details):
def group_title(path):
def arg_name(name):
def format_options_name(operation):
def validate_client_parameters(namespace):
def cli_batch_data_plane_command(name, operation, client_factory, transform=None, flatten=FLATTEN, ignore=None, validator=None, silent=None):
def _file_list_table_format(result):
def _account_key_table_format(result):
def transform_response_headers(result):
def task_file_list_table_format(result):
def node_file_list_table_format(result):
def application_list_table_format(result):
def application_summary_list_table_format(result):
def account_list_table_format(result):
def account_keys_list_table_format(result):
def account_keys_renew_table_format(result):
def certificate_list_table_format(result):
def job_list_table_format(result):
def job_prep_release_status_list_table_format(result):
def job_schedule_list_table_format(result):
def node_list_table_format(result):
def pool_node_agent_skus_list_table_format(result):
def pool_list_table_format(result):
def pool_usage_metrics_list_table_format(result):
def task_list_table_format(result):
def task_create_table_format(result):
def find(criteria, reindex=False):
def _get_resource_group_from_account_name(client, account_name):
def datetime_format(value):
def sf_create_compose_application(client, compose_file, application_id, repo_user=None, encrypted=False, repo_pass=None, timeout=60):
def sf_select(endpoint, cert=None, key=None, pem=None, ca=None, no_verify=False):
def sf_upload_app(path, show_progress=False):
def sf_create_app(client, app_name, app_type, app_version, parameters=None, min_node_count=0, max_node_count=0, metrics=None, timeout=60):
def sf_upgrade_app(client, app_id, app_version, parameters, mode='UnmonitoredAuto', replica_set_check_timeout=None, force_restart=None, failure_action=None, health_check_wait_duration='0', health_check_stable_duration='PT0H2M0S', health_check_retry_timeout='PT0H10M0S', upgrade_timeout='P10675199DT02H48M05.4775807S', upgrade_domain_timeout='P10675199DT02H48M05.4775807S', warning_as_error=False, max_unhealthy_apps=0, default_service_health_policy=None, service_health_policy=None, timeout=60):
def sf_create_service(client, app_id, name, service_type, stateful=False, stateless=False, singleton_scheme=False, named_scheme=False, int_scheme=False, named_scheme_list=None, int_scheme_low=None, int_scheme_high=None, int_scheme_count=None, constraints=None, correlated_service=None, correlation=None, load_metrics=None, placement_policy_list=None, move_cost=None, activation_mode=None, dns_name=None, target_replica_set_size=None, min_replica_set_size=None, replica_restart_wait=None, quorum_loss_wait=None, stand_by_replica_keep=None, no_persisted_state=False, instance_count=None, timeout=60):
def sf_update_service(client, service_id, stateless=False, stateful=False, constraints=None, correlation=None, correlated_service=None, load_metrics=None, placement_policy_list=None, move_cost=None, instance_count=None, target_replica_set_size=None, min_replica_set_size=None, replica_restart_wait=None, quorum_loss_wait=None, stand_by_replica_keep=None, timeout=60):
def sf_start_chaos(client, time_to_run='4294967295', max_cluster_stabilization=60, max_concurrent_faults=1, disable_move_replica_faults=False, wait_time_between_faults=20, wait_time_between_iterations=30, warning_as_error=False, max_percent_unhealthy_nodes=0, max_percent_unhealthy_applications=0, app_type_health_policy_map=None, timeout=60):
def sf_report_app_health(client, application_id, source_id, health_property, health_state, ttl=None, description=None, sequence_number=None, remove_when_expired=None, timeout=60):
def sf_report_svc_health(client, service_id, source_id, health_property, health_state, ttl=None, description=None, sequence_number=None, remove_when_expired=None, timeout=60):
def sf_report_partition_health(client, partition_id, source_id, health_property, health_state, ttl=None, description=None, sequence_number=None, remove_when_expired=None, timeout=60):
def sf_report_replica_health(client, partition_id, replica_id, source_id, health_state, health_property, service_kind='Stateful', ttl=None, description=None, sequence_number=None, remove_when_expired=None, timeout=60):
def sf_report_node_health(client, node_name, source_id, health_property, health_state, ttl=None, description=None, sequence_number=None, remove_when_expired=None, timeout=60):
def sf_service_package_upload(client, node_name, service_manifest_name, app_type_name, app_type_version, share_policy=None, timeout=60):
def list_containers(client, resource_group_name=None):
def get_container(client, resource_group_name, name):
def delete_container(client, resource_group_name, name, **kwargs):
def create_container(client, resource_group_name, name, image, location=None, cpu=1, memory=1.5, port=80, os_type='Linux', ip_address=None, command_line=None, environment_variables=None, registry_login_server=None, registry_username=None, registry_password=None):
def container_logs(client, resource_group_name, name, container_name=None):
def transform_log_output(result):
def transform_container_group(result):
def get_images(container_group):
def format_cpu_memory(container_group):
def format_ip_address(container_group):
def transform_container_group_list(result):
def environment_variables_format(value):
def list_network_resource_property(resource, prop):
def get_network_resource_property_entry(resource, prop):
def delete_network_resource_property_entry(resource, prop):
def get_public_ip_validator(has_type_field=False, allow_none=False, allow_new=False, default_none=False):
def create_subnet(resource_group_name, virtual_network_name, subnet_name, address_prefix, network_security_group=None, route_table=None, private_access_services=None):
def update_subnet(instance, resource_group_name, address_prefix=None, network_security_group=None, route_table=None, private_access_services=None):
def create_vpn_connection(client, resource_group_name, connection_name, vnet_gateway1, location=None, tags=None, no_wait=False, validate=False, vnet_gateway2=None, express_route_circuit2=None, local_gateway2=None, authorization_key=None, enable_bgp=False, routing_weight=10, connection_type=None, shared_key=None, use_policy_based_traffic_selectors=False):
def create_express_route_peering(client, resource_group_name, circuit_name, peering_type, peer_asn, vlan_id, primary_peer_address_prefix, secondary_peer_address_prefix, shared_key=None, advertised_public_prefixes=None, customer_asn=None, routing_registry_name=None, route_filter=None):
def make_zone_file(json_obj):
def _make_record_parser(parsers, rec_type, arg_defs):
def _make_parser():
def _tokenize_line(line, quote_strings=False, infer_name=True):
def _find_comment_index(line):
def _serialize(tokens):
def _remove_comments(text):
def _flatten(text):
def _remove_class(text):
def _add_record_names(text):
def _convert_to_seconds(value):
def _pre_process_txt_records(text):
def parse_zone_file(text, zone_name, ignore_invalid=False):
def process_soa(io, data, name, print_name=False):
def _quote_field(data, field):
def process_rr(io, data, record_type, record_keys, name, print_name):
def _get_resource_group_from_account_name(client, account_name):
def get_progress_message():
def progress_view(shell):
def no_style_wrapper():
def default_style():
def quiet_style():
def purple_style():
def high_contrast_style():
def halloween_style():
def grey_style():
def blue_red_style():
def blue_green_style():
def primary_style():
def neon_style():
def style_factory(style):
def get_options():
def get_window_dim():
def _size_27():
def _size_36():
def parse_quotes(cmd, quotes=True, string=True):
def get_os_clear_screen_word():
def dynamic_param_logic(text):
def reformat_cmd(text):
def gen_dyn_completion(comp, started_param, prefix, text):
def sort_completions(gen):
def help_text(values):
def get_config_dir():
def ask_user_for_telemetry():
def get_scope():
def set_scope(com, add=True):
def get_prompt_tokens(cli):
def get_height(cli):
def get_tutorial_tokens(cli):
def get_lexers(main_lex, exam_lex, tool_lex):
def create_tutorial_layout(lex):
def create_layout(lex, exam_lex, toolbar_lex):
def get_anyhline(config):
def get_descript(lexer):
def get_param(lexer):
def get_example(config, exam_lex):
def get_examplehline(config):
def get_empty():
def get_hline():
def get_vline():
def get_descriptions(config, exam_lex, lexer):
def get_cache_dir():
def day_format(now):
def update_frequency():
def frequency_measurement():
def frequency_heuristic():
@registry.add_binding(Keys.ControlD, eager=True) DCNL def exit_(event):
@registry.add_binding(Keys.Enter, filter=(_PromptFilter() & _ExampleFilter())) DCNL def enter_(event):
@registry.add_binding(Keys.ControlY, eager=True) DCNL def pan_up(event):
@registry.add_binding(Keys.ControlN, eager=True) DCNL def pan_down(event):
@registry.add_binding(Keys.F1, eager=True) DCNL def config_settings(event):
@registry.add_binding(Keys.F2, eager=True) DCNL def toggle_default(event):
@registry.add_binding(Keys.F3, eager=True) DCNL def toggle_symbols(event):
def get_symbols():
def get_show_default():
def format_response(response):
def get_section():
def sub_section():
def space_examples(list_examples, rows, section_value):
def space_toolbar(settings_items, empty_space):
def validate_contains_query(args, symbol):
def add_new_lines(long_phrase, line_min=None, tolerance=TOLERANCE):
def generate_tree(commands):
def in_tree(tree, cmd):
def scrub(text):
def pytest_ignore_collect(path):
def _push(my_dict, key, element):
def _json_format_dict(data, pretty=False):
def is_cache_stale(cache_file, cache_expiration_time, refresh=False):
def modify_api_levels(level_list, remove, ensure, msg_prepend='', msg_append=''):
def upgrade_master_3_0_to_3_1(ansible_module, config_base, backup):
def upgrade_master(ansible_module, config_base, from_version, to_version, backup):
def main():
def find_files(base_dir, exclude_dirs, include_dirs, file_regex):
def set_key(yaml_data, yaml_key, yaml_value):
def main():
def main():
def main():
def version_requirement(version):
def migrate_docker_facts(facts):
def migrate_common_facts(facts):
def migrate_node_facts(facts):
def migrate_hosted_facts(facts):
def migrate_admission_plugin_facts(facts):
def migrate_local_facts(facts):
def first_ip(network):
def hostname_valid(hostname):
def choose_hostname(hostnames=None, fallback=''):
def query_metadata(metadata_url, headers=None, expect_json=False):
def walk_metadata(metadata_url, headers=None, expect_json=False):
def get_provider_metadata(metadata_url, supports_recursive=False, headers=None, expect_json=False):
def normalize_gce_facts(metadata, facts):
def normalize_aws_facts(metadata, facts):
def normalize_openstack_facts(metadata, facts):
def normalize_provider_facts(provider, metadata):
def set_flannel_facts_if_unset(facts):
def set_calico_facts_if_unset(facts):
def set_nuage_facts_if_unset(facts):
def set_contiv_facts_if_unset(facts):
def set_node_schedulability(facts):
def set_selectors(facts):
def set_dnsmasq_facts_if_unset(facts):
def set_project_cfg_facts_if_unset(facts):
def set_identity_providers_if_unset(facts):
def set_url_facts_if_unset(facts):
def set_aggregate_facts(facts):
def set_etcd_facts_if_unset(facts):
def set_deployment_facts_if_unset(facts):
def set_version_facts_if_unset(facts):
def set_manageiq_facts_if_unset(facts):
def set_sdn_facts_if_unset(facts, system_facts):
def set_nodename(facts):
def migrate_oauth_template_facts(facts):
def format_url(use_ssl, hostname, port, path=''):
def get_current_config(facts):
def build_kubelet_args(facts):
def build_controller_args(facts):
def build_api_server_args(facts):
def is_service_running(service):
def rpm_rebuilddb():
def get_version_output(binary, version_cmd):
def get_docker_version_info():
def get_hosted_registry_insecure():
def get_openshift_version(facts):
def chomp_commit_offset(version):
def get_container_openshift_version(facts):
def parse_openshift_version(output):
def apply_provider_facts(facts, provider_facts):
def merge_facts(orig, new, additive_facts_to_overwrite, protected_facts_to_overwrite):
def save_local_facts(filename, facts):
def get_local_facts_from_file(filename):
def sort_unique(alist):
def safe_get_bool(fact):
def set_proxy_facts(facts):
def set_builddefaults_facts(facts):
def delete_empty_keys(keylist):
def set_buildoverrides_facts(facts):
def set_container_facts_if_unset(facts):
def set_installed_variant_rpm_facts(facts):
def main():
def v_prefix(release):
def minor(release):
@pytest.fixture(params=[str, v_prefix, minor]) DCNL def release_mod(request):
def _install(module, container, image, values_list):
def _uninstall(module, name):
def do_install(module, container, image, values_list):
def do_uninstall(module, name):
def do_update(module, container, old_image, image, values_list):
def do_rollback(module, name):
def core(module):
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def locate_oc_binary():
def parse_args():
def fragment_banner(fragment_path, side, data):
def generate(parts):
def get_sources():
def verify():
def main():
def _install(module, container, image, values_list):
def _uninstall(module, name):
def do_install(module, container, image, values_list):
def do_uninstall(module, name):
def do_update(module, container, old_image, image, values_list):
def do_rollback(module, name):
def core(module):
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def locate_oc_binary():
def main():
def resolve_checks(names, all_checks):
def normalize(checks):
def canned_loggingcheck(exec_oc=None, execute_module=None):
def test_subclasses():
def test_load_checks():
def canned_loggingindextime(exec_oc=None):
def fake_check(name='fake_check', tags=None, is_active=True, run_return=None, run_exception=None, changed=False):
def canned_elasticsearch(task_vars=None, exec_oc=None):
def canned_search_journalctl(get_log_output=None):
def load_checks(path=None, subpkg=''):
def main():
def _retrieve_expected_pkg_versions(expected_pkgs_dict):
def check_etcd_key_size(client, key, size_limit, total_size=0, depth=0, depth_limit=1000, visited=None):
def locate_oc_binary():
def main():
def main():
def main():
def main():
def get_log_matches(matchers, log_count_limit, timestamp_limit_seconds):
def get_log_output(matcher):
def find_matches(log_output, matcher, log_count_limit, timestamp_limit_seconds):
def _format_failure(failure):
def _format_failed_checks(checks):
def _get_play(obj):
def check_command(commandline):
def main():
def main():
def es_storage(os_logging_facts, dc_name, pvc_claim, root='elasticsearch'):
def random_word(source_alpha, length):
def entry_from_named_pair(register_pairs, key):
def map_from_pairs(source, delim='='):
@pytest.fixture(params=['OpenSSLCertificate', 'FakeOpenSSLCertificate']) DCNL def loaded_cert(request, valid_cert):
def test_serial(loaded_cert, valid_cert):
def test_expiry(loaded_cert):
def test_not_after(valid_cert, fake_valid_cert):
def test_serial(valid_cert, fake_valid_cert):
def test_get_subject(valid_cert, fake_valid_cert):
def filter_paths(path_list):
def load_and_handle_cert(cert_string, now, base64decode=False, ans_module=None):
def classify_cert(cert_meta, now, time_remaining, expire_window, cert_list):
def tabulate_summary(certificates, kubeconfigs, etcd_certs, router_certs, registry_certs):
def main():
def main():
def main():
def _run(cmds):
def parse_args():
def fragment_banner(fragment_path, side, data):
def generate(parts):
def get_sources():
def verify():
def main():
def main():
def _run(cmds):
def main():
def map_from_pairs(source, delim='='):
def legacy_gte_function_builder(name, versions):
def gte_function_builder(name, gte_version):
def oo_pdb(arg):
def get_attr(data, attribute=None):
def oo_flatten(data):
def oo_merge_dicts(first_dict, second_dict):
def oo_merge_hostvars(hostvars, variables, inventory_hostname):
def oo_collect(data_list, attribute=None, filters=None):
def oo_select_keys_from_list(data, keys):
def oo_select_keys(data, keys):
def oo_prepend_strings_in_list(data, prepend):
def oo_combine_key_value(data, joiner='='):
def oo_combine_dict(data, in_joiner='=', out_joiner=' DCSP '):
def oo_dict_to_list_of_dict(data, key_title='key', value_title='value'):
def oo_ami_selector(data, image_name):
def oo_ec2_volume_definition(data, host_type, docker_ephemeral=False):
def oo_split(string, separator=','):
def oo_haproxy_backend_masters(hosts, port):
def oo_filter_list(data, filter_attr=None):
def oo_nodes_with_label(nodes, label, value=None):
def oo_parse_heat_stack_outputs(data):
def oo_parse_named_certificates(certificates, named_certs_dir, internal_hostnames):
def oo_pretty_print_cluster(data, prefix='tag_'):
def oo_generate_secret(num_bytes):
def to_padded_yaml(data, level=0, indent=2, **kw):
def oo_openshift_env(hostvars):
def oo_persistent_volumes(hostvars, groups, persistent_volumes=None):
def oo_persistent_volume_claims(hostvars, persistent_volume_claims=None):
def oo_31_rpm_rename_conversion(rpms, openshift_version=None):
def oo_pods_match_component(pods, deployment_type, component):
def oo_get_hosts_from_hostvars(hostvars, hosts):
def oo_image_tag_to_rpm_version(version, include_dash=False):
def oo_hostname_from_url(url):
def oo_openshift_loadbalancer_frontends(api_port, servers_hostvars, use_nuage=False, nuage_rest_port=None):
def oo_openshift_loadbalancer_backends(api_port, servers_hostvars, use_nuage=False, nuage_rest_port=None):
def oo_chomp_commit_offset(version):
def oo_random_word(length, source='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'):
def oo_contains_rule(source, apiGroups, resources, verbs):
def build_input(ssh_user=None, hosts=None, variant_num=None, add_nodes=None, confirm_facts=None, schedulable_masters_ok=None, master_lb=('', False), storage=None):
def collect_hosts(oo_cfg, existing_env=False, masters_set=False, print_summary=True):
def print_installation_summary(hosts, version=None, verbose=True):
def collect_master_lb(hosts):
def collect_storage_host(hosts):
def get_missing_info_from_user(oo_cfg):
def get_hosts_to_run_on(oo_cfg, callback_facts, unattended, force):
@click.group() DCNL @click.pass_context DCNL @click.option('--unattended', '-u', is_flag=True, default=False) DCNL @click.option('--configuration', '-c', type=click.Path(file_okay=True, dir_okay=False, writable=True, readable=True), default=None) DCNL @click.option('--ansible-playbook-directory', '-a', type=click.Path(exists=True, file_okay=False, dir_okay=True, readable=True), default=DEFAULT_PLAYBOOK_DIR, envvar='OO_ANSIBLE_PLAYBOOK_DIRECTORY') DCNL @click.option('--ansible-log-path', type=click.Path(file_okay=True, dir_okay=False, writable=True, readable=True), default='/tmp/ansible.log') DCNL @click.option('-v', '--verbose', is_flag=True, default=False) DCNL @click.option('-d', '--debug', help='Enable DCSP installer DCSP debugging DCSP (/tmp/installer.log)', is_flag=True, default=False) DCNL @click.help_option('--help', '-h') DCNL def cli(ctx, unattended, configuration, ansible_playbook_directory, ansible_log_path, verbose, debug):
def load_system_facts(inventory_file, os_facts_path, env_vars, verbose=False):
def find_variant(name, version=None):
def camelcase_to_underscores(argument):
def underscores_to_camelcase(argument):
def convert_regex_to_flask_path(url_path):
def flatten_json_request_body(prefix, dict_body, spec):
def xml_to_json_response(service_spec, operation, xml, result_node=None):
def httprettified(test):
def last_request():
def has_request():
def parse_requestline(s):
def last_requestline(sent_data):
def dhcp_configuration_from_querystring(querystring, option=u'DhcpConfiguration'):
def generate_instance_identity_document(instance):
def clean_json(resource_json, resources_map):
def api_version_elb_backend(*args, **kwargs):
def generate_boto3_response(operation):
@mock_iam_deprecated() DCNL def test_get_current_user():
@mock_iam_deprecated() DCNL def test_get_all_access_keys():
@mock_ec2_deprecated DCNL def test_decorater_wrapped_gets_set():
@mock_kms_deprecated DCNL def test_encrypt():
@mock_opsworks DCNL def test_describe_instances():
@mock_opsworks DCNL @mock_ec2 DCNL def test_ec2_integration():
@mock_sqs DCNL def test_receive_messages_with_wait_seconds_timeout_of_zero():
@mock_sqs DCNL def test_receive_messages_with_wait_seconds_timeout_of_negative_one():
@mock_autoscaling_deprecated DCNL def test_execute_policy_small_percent_change_in_capacity():
@mock_autoscaling_deprecated DCNL def test_create_autoscaling_groups_defaults():
@mock_autoscaling_deprecated DCNL def test_create_launch_configuration_defaults():
@mock_lambda DCNL @mock_s3 DCNL @freeze_time(u'2015-01-01 DCSP 00:00:00') DCNL def test_list_create_list_get_delete_list():
def reduced_min_part_size(f):
@mock_s3_deprecated DCNL def test_create_existing_bucket():
@mock_s3_deprecated DCNL def test_create_existing_bucket_in_us_east_1():
@mock_ec2 DCNL def test_request_spot_instances_default_arguments():
@mock_ec2_deprecated DCNL def test_request_spot_instances_fulfilled():
@mock_ec2_deprecated DCNL def test_tag_spot_instance_request():
@mock_ec2_deprecated DCNL def test_get_all_spot_instance_requests_filtering():
@mock_ec2_deprecated DCNL def test_ami_attribute_user_and_group_permissions():
@mock_ec2_deprecated DCNL def test_dhcp_options_associate():
@mock_ec2_deprecated DCNL def test_dhcp_options_associate_invalid_dhcp_id():
@mock_ec2_deprecated DCNL def test_dhcp_options_associate_invalid_vpc_id():
@mock_ec2_deprecated DCNL def test_dhcp_options_delete_with_vpc():
@mock_ec2_deprecated DCNL def test_create_dhcp_options():
@mock_ec2_deprecated DCNL def test_create_dhcp_options_invalid_options():
@mock_ec2_deprecated DCNL def test_describe_dhcp_options():
@mock_ec2_deprecated DCNL def test_describe_dhcp_options_invalid_id():
@mock_ec2_deprecated DCNL def test_delete_dhcp_options():
@mock_ec2_deprecated DCNL def test_modify_attribute_blockDeviceMapping():
@mock_ec2_deprecated DCNL def test_eip_allocate_classic():
@mock_ec2_deprecated DCNL def test_eip_allocate_vpc():
@mock_ec2_deprecated DCNL def test_eip_allocate_invalid_domain():
@mock_ec2_deprecated DCNL def test_eip_associate_classic():
@mock_ec2_deprecated DCNL def test_eip_associate_vpc():
@mock_ec2 DCNL def test_eip_boto3_vpc_association():
@mock_ec2_deprecated DCNL def test_eip_associate_network_interface():
@mock_ec2_deprecated DCNL def test_eip_reassociate():
@mock_ec2_deprecated DCNL def test_eip_reassociate_nic():
@mock_ec2_deprecated DCNL def test_eip_associate_invalid_args():
@mock_ec2_deprecated DCNL def test_eip_disassociate_bogus_association():
@mock_ec2_deprecated DCNL def test_eip_release_bogus_eip():
@mock_ec2_deprecated DCNL def test_eip_disassociate_arg_error():
@mock_ec2_deprecated DCNL def test_eip_release_arg_error():
@mock_ec2_deprecated DCNL def test_eip_describe():
@mock_ec2_deprecated DCNL def test_eip_describe_none():
@mock_ec2_deprecated DCNL def test_igw_create():
@mock_ec2_deprecated DCNL def test_igw_attach():
@mock_ec2_deprecated DCNL def test_igw_attach_bad_vpc():
@mock_ec2_deprecated DCNL def test_igw_attach_twice():
@mock_ec2_deprecated DCNL def test_igw_detach():
@mock_ec2_deprecated DCNL def test_igw_detach_wrong_vpc():
@mock_ec2_deprecated DCNL def test_igw_detach_invalid_vpc():
@mock_ec2_deprecated DCNL def test_igw_detach_unattached():
@mock_ec2_deprecated DCNL def test_igw_delete():
@mock_ec2_deprecated DCNL def test_igw_delete_attached():
@mock_ec2_deprecated DCNL def test_igw_desribe():
@mock_ec2_deprecated DCNL def test_igw_desribe_bad_id():
@mock_ec2_deprecated DCNL def test_igw_filter_by_vpc_id():
@mock_ec2_deprecated DCNL def test_igw_filter_by_tags():
@mock_ec2_deprecated DCNL def test_igw_filter_by_internet_gateway_id():
@mock_ec2_deprecated DCNL def test_igw_filter_by_attachment_state():
@requires_boto_gte(u'2.16.0') DCNL @mock_ec2_deprecated DCNL def test_route_table_replace_route_table_association():
def resolve_hostname(hostname, indent=0):
def resolve_email_domain(domain):
def addtogether(*things):
def quadratic(a, b, c):
def remote_repr(arg):
def display_structure(structure, parentparts=[]):
def explore_message(c, uid):
def explore_folder(c, name):
def explore_account(c):
def alpha_shard(word):
def hash_shard(word):
def md5_shard(word):
def fountain(url):
def responder(url, function):
def processor(n, fountain_url, responder_urls):
def resolve_hostname(hostname, indent=''):
def resolve_email_domain(domain):
def addtogether(*things):
def quadratic(a, b, c):
def remote_repr(arg):
def lengths(*args):
def printout(data):
def alpha_shard(word):
def hash_shard(word):
def md5_shard(word):
def ones_and_zeros(digits):
def bitsource(zcontext, url):
def always_yes(zcontext, in_url, out_url):
def judge(zcontext, in_url, pythagoras_url, out_url):
def pythagoras(zcontext, url):
def tally(zcontext, url):
def fix(value):
def get_answer(aphorism):
def parse_command_line(description):
def create_srv_socket(address):
def accept_connections_forever(listener):
def handle_conversation(sock, address):
def handle_request(sock):
def recv_until(sock, suffix):
def main(config_path=None):
def _version_string_to_tuple(version_string):
def skip_leading_wsp(f):
def _windows_commondata_path():
def set_win32_cert_path():
def set_win32_requests_ca_bundle_path():
def get_auto_confd_path(osname=None):
def _get_check_class(check_name, check_path):
def _deprecated_configs(agentConfig):
def _file_configs_paths(osname, agentConfig):
def _service_disco_configs(agentConfig):
def get_checks_places(osname, agentConfig):
def load_check_from_places(check_config, check_name, checks_places, agentConfig):
def load_check_directory(agentConfig, hostname):
def load_check(agentConfig, hostname, checkname):
def generate_jmx_configs(agentConfig, hostname, checknames=None):
def windows_friendly_colon_split(config_string):
def config_to_yaml(config):
def chunks(iterable, chunk_size):
def load_fixture(f, args=None):
def to_time(wmi_ts):
def from_time(year=0, month=0, day=0, hours=0, minutes=0, seconds=0, microseconds=0, timezone=0):
@timeout(0.2) DCNL def make_sum(a, b, sleep=0, raise_exception=False):
def parse_ancient_function_plugin(logger, line):
def parse_function_plugin(logger, line, state):
def parse_events(logger, line):
def _get_container_inspect(c_id):
def _get_conf_tpls(image_name, kube_annotations=None, kube_pod_name=None, kube_container_name=None):
def client_read(path, **kwargs):
def load_class(check_name, class_name):
def add_serialization_status_metric(status, hostname):
def mapto_v6(addr):
def get_socket_address(host, port, ipv4_only=False):
def init(config_path=None, use_watchdog=False, use_forwarder=False, args=None):
def main(config_path=None):
def parse_supervisord(log, line):
def agent_formatter(metric, value, timestamp, tags, hostname, device_name=None, metric_type=None, interval=None):
def create_service_check(check_name, status, tags=None, timestamp=None, hostname=None, check_run_id=None, message=None):
def get_jmx_status():
def calculator(counter_type):
def get_calculator(counter_type):
def get_raw(previous, current, property_name):
@calculator(65536) DCNL def calculate_perf_counter_rawcount(previous, current, property_name):
@calculator(65792) DCNL def calculate_perf_counter_large_rawcount(previous, current, property_name):
@calculator(542180608) DCNL def calculate_perf_100nsec_timer(previous, current, property_name):
@calculator(272696576) DCNL def calculate_perf_counter_bulk_count(previous, current, property_name):
@calculator(272696320) DCNL def calculate_perf_counter_counter(previous, current, property_name):
@calculator(805438464) DCNL def calculate_perf_average_timer(previous, current, property_name):
@calculator(5571840) DCNL def calculate_perf_counter_100ns_queuelen_type(previous, current, property_name):
def is_sentinel(obj):
def _test():
def from_time(year=None, month=None, day=None, hours=None, minutes=None, seconds=None, microseconds=None, timezone=None):
def to_time(wmi_time):
def kill_old_process():
def set_no_proxy_settings():
def config_proxy_skip(proxies, uri, skip_proxy=False):
def get_sd_configcheck(agentConfig, configs):
def extract_sd_config(config):
def get_subprocess_output(command, log, raise_on_empty_output=True):
def log_subprocess(func):
def timeout(timeout):
def detect_is_k8s():
def get_conf_path(check_name):
def get_check_class(agentConfig, check_name):
def get_auto_conf(check_name):
def get_auto_conf_images(full_tpl=False):
def is_my_process(pid):
def pid_exists(pid):
def which(program):
def _inet_pton_win(address_family, ip_string):
def get_hostname(config=None):
def parse_metric_family(buf):
def freeze(o):
def log_exceptions(logger):
def run_check(name, path=None):
def jmx_command(args, agent_config, redirect_std_streams=False):
def get_os():
def imp_type_for_filename(filename):
def load_qualified_module(full_module_name, path=None):
def module_name_for_filename(filename):
def get_module(name):
def load(config_string, default_name=None):
def get_events(request):
def assets_depreciate():
@contextfunction DCNL def finance_transaction_list(context, transactions, skip_group=False):
@contextfunction DCNL def finance_liability_list(context, liabilities, skip_group=False):
def _get_filter_query(model, args):
@handle_response_format DCNL @treeio_login_required DCNL def index_categories(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def category_edit(request, category_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def category_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def category_view(request, category_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def category_delete(request, category_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def account_edit(request, account_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def account_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def account_view(request, account_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def account_delete(request, account_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def index_assets(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def asset_edit(request, asset_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def asset_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def asset_view(request, asset_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def asset_delete(request, asset_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def index_equities(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def equity_edit(request, equity_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def equity_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def equity_view(request, equity_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def equity_delete(request, equity_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def index_transactions(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def transaction_add(request, liability_id=None, order_id=None, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def transaction_edit(request, transaction_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def transaction_view(request, transaction_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def transaction_delete(request, transaction_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def index_liabilities(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def liability_edit(request, liability_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def liability_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def liability_view(request, liability_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def liability_delete(request, liability_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def index_receivables(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def receivable_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def receivable_edit(request, receivable_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def receivable_view(request, receivable_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def receivable_delete(request, receivable_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def income_view(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def balance_sheet(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def index_accounts(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def settings_view(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def settings_edit(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def currency_add(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def currency_edit(request, currency_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def currency_view(request, currency_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def currency_delete(request, currency_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def tax_add(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def tax_edit(request, tax_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def tax_view(request, tax_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def tax_delete(request, tax_id, response_format='html'):
@contextfunction DCNL def changes_set_list(context, changesets):
def _get_filter_query(args):
def _get_default_context(request):
def _process_mass_form(f):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index_owned(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index_resolved(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def status_view(request, status_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required('treeio.changes') DCNL def status_edit(request, status_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required('treeio.changes') DCNL def status_delete(request, status_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required('treeio.changes') DCNL def status_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def set_view(request, set_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def set_edit(request, set_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def set_delete(request, set_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def set_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required('treeio.changes') DCNL def settings_view(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required('treeio.changes') DCNL def settings_edit(request, response_format='html'):
def _process_mass_form(f):
@treeio_login_required DCNL @handle_response_format DCNL @_process_mass_form DCNL def index(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def object_delete(request, object_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def object_untrash(request, object_id, response_format='html'):
def email_reply():
def throttle(max_requests, timeout=(60 * 60), extra=''):
def coerce_put_post(request):
def require_mime(*mimes):
def send_consumer_mail(consumer):
def module_admin_required(module_name=None):
def get_oauth_request(request):
def verify_oauth_request(request, oauth_request, consumer, token=None):
def require_params(oauth_request, parameters=None):
def get_store(path='treeio.core.api.auth.store.db.ModelStore'):
def generate_doc(handler_cls):
def get_field_data_type(field):
def _convert(template, params=None):
def process_timezone_field(user, instance):
def _minify_json(data):
def get_key(postfix=''):
def set_memcached(key, obj, lock=True):
def get_memcached(key):
def get_notifications(user):
def get_user_profile(user):
def update_user(user, location):
def remove_user(id, user):
def verification_user(id, user):
def checking_conference(id_conference):
def is_owner_user(id, user):
def exit_from_conference(id, user):
def delete_conference(id, user):
def remove_users_in_conference(id, user, users):
def add_users_in_conference(id, user, users):
def create_conference(user, users, title):
def get_active_conferences(user):
def get_new_message_for_user(user, **kwargs):
def add_new_message(id, user, user_profile, text):
def cmd(message, user):
@contextfunction DCNL def administration_user_list(context, users, skip_group=False):
@contextfunction DCNL def administration_group_list(context, groups, skip_group=False):
@contextfunction DCNL def administration_module_list(context, modules):
@contextfunction DCNL def user_block(context):
@contextfunction DCNL def demo_user(context):
@contextfunction DCNL def core_perspective_switch(context):
@contextfunction DCNL def permission_block(context, object):
@contextfunction DCNL def link_block(context, object):
@contextfunction DCNL def subscription_block(context, object):
@contextfunction DCNL def comments_likes(context, object, expand=True):
@contextfunction DCNL def help_link(context, link=''):
@contextfunction DCNL def core_generic_list(context, objects, skip_group=False, tag=None):
@contextfunction DCNL def core_watchlist(context, objects=None, skip_group=False, paginate=False):
@contextfunction DCNL def attachments(context, object=None):
@contextfunction DCNL def attachments_block(context, object=None):
@contextfunction DCNL def attachments_count(context, object=None):
@contextfunction DCNL def last_updated(context, object=None, verbose=False):
@contextfunction DCNL def easy_invite_block(context, emails=None):
def _get_modules(request):
@contextfunction DCNL def modules_header_block(context):
@contextfunction DCNL def dajaxice_js_import(context):
@contextfunction DCNL def modules_active(context):
@contextfunction DCNL def paginate(context, items, plength=None):
@contextfunction DCNL def pager(context, items, plength=None):
@contextfunction DCNL def htsort(context, objects):
@contextfunction DCNL def htsortlink(context, field_name):
@contextfunction DCNL def object_tree_path(context, object, skipself=False):
def htsafe(text):
def httranslate(text):
@contextfunction DCNL def htform(context, form):
@contextfilter DCNL def htdate(context, date, dateformat='DATE_FORMAT'):
@contextfilter DCNL def htdatetime(context, date, dateformat='DATETIME_FORMAT'):
@contextfilter DCNL def httime(context, time, timeformat='TIME_FORMAT'):
@contextfunction DCNL def core_logo_content(context, gif=False):
@contextfilter DCNL def humanize_datetime(context, value):
@contextfilter DCNL def currency_format(context, value, currency=None):
@contextfunction DCNL def currency_print(context, currency=None):
@contextfilter DCNL def number_format(context, value):
@contextfunction DCNL def show_hint(context, hint=None, object=None):
@contextfilter DCNL def group_by_letter(context, object_list):
@contextfunction DCNL def rss_link(context, url=None):
@contextfunction DCNL def logo_block_container(context):
def clean_html(buf):
def user_autocreate_handler(sender, instance, created, **kwargs):
def get_widgets(request):
def _get_filter_query(args):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def index_perspectives(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def index_modules(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def perspective_view(request, perspective_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def perspective_edit(request, perspective_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def perspective_delete(request, perspective_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def perspective_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def module_view(request, module_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def index_users(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def user_view(request, user_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def user_edit(request, user_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def user_password(request, user_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def user_delete(request, user_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def user_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def user_invite(request, emails=None, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def index_groups(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def group_view(request, group_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def group_edit(request, group_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def group_delete(request, group_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def group_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def index_pages(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def pagefolder_view(request, folder_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def pagefolder_edit(request, folder_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def pagefolder_delete(request, folder_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def pagefolder_add(request, response_format='html'):
@treeio_login_required DCNL @module_admin_required() DCNL def page_view(request, page_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def page_edit(request, page_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def page_delete(request, page_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def page_add(request, response_format='html'):
@treeio_login_required DCNL @module_admin_required() DCNL def setup(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def settings_view(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required() DCNL def settings_edit(request, response_format='html'):
def create_index(sender=None, **kwargs):
def update_index(sender, instance, created, **kwargs):
def delete_index(sender, instance, **kwargs):
def search(term):
@treeio_login_required DCNL @handle_response_format DCNL def search_query(request, response_format='html'):
def _preprocess_widget(widget, name):
def _get_all_widgets(request):
def _get_widget(request, module, widget_name):
def _create_widget_object(request, module_name, widget_name):
def _get_widget_content(content, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def index(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def dashboard_widget_add(request, module_name=None, widget_name=None, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def dashboard_widget_edit(request, widget_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def dashboard_widget_delete(request, widget_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def dashboard_widget_arrange(request, panel='left', response_format='html'):
def title(page, response):
def module_content(page, response):
def apply_rules(page, response=None):
def convert_to_ajax(page, context_instance):
def preprocess_context(context):
def _preprocess_context_html(context):
def render_to_string(template_name, context=None, context_instance=None, response_format='html'):
def render_to_ajax(template_name, context=None, context_instance=None):
def render_to_response(template_name, context=None, context_instance=None, response_format='html'):
def render_string_template(template_string, context=None, context_instance=None):
def get_template_source(template_name, response_format='html'):
def treeio_login_required(f):
def module_admin_required(module_name=None):
def _is_full_redirect(redirect_url):
def handle_response_format(f):
def add_required_label_tag(original_function):
def preprocess_form():
def verify_secret_key(request):
def get_secret_key(request, profile=None):
@handle_response_format DCNL @treeio_login_required DCNL def user_logout(request, response_format='html'):
@handle_response_format DCNL def user_login(request, response_format='html'):
@handle_response_format DCNL def user_denied(request, message='', response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def user_perspective(request, response_format='html'):
@cache_control(private=True, must_revalidate=True, max_age=60) DCNL def logo_image(request, gif=False, response_format='html'):
def ajax_popup(request, popup_id='', url='/'):
def mobile_view(request, url='/'):
def iframe_close(request, response_format='html'):
@treeio_login_required DCNL def help_page(request, url='/', response_format='html'):
@treeio_login_required DCNL def ajax_object_lookup(request, response_format='html'):
@treeio_login_required DCNL def ajax_tag_lookup(request, response_format='html'):
@treeio_login_required DCNL def widget_welcome(request, response_format='html'):
@csrf_protect DCNL def password_reset(request, response_format='html'):
def password_reset_done(request, response_format='html'):
def invitation_retrieve(request, response_format='html'):
def save_upload(uploaded, filename, raw_data):
def process_email():
@contextfunction DCNL def messaging_message_list(context, messages, skip_group=False, nomass=False):
@contextfunction DCNL def messaging_unread(context):
def get_widgets(request):
def _get_filter_query(args):
def _get_default_context(request):
def _process_mass_form(f):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index_sent(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index_inbox(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index_unread(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def stream_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def stream_view(request, stream_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def stream_edit(request, stream_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def stream_checkmail(request, stream_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def stream_delete(request, stream_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def messaging_compose(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def messaging_view(request, message_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def messaging_delete(request, message_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def mlist_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def mlist_view(request, mlist_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def mlist_edit(request, mlist_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def mlist_delete(request, mlist_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def settings_view(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def settings_edit(request, response_format='html'):
@treeio_login_required DCNL def widget_new_messages(request, response_format='html'):
def get_events(request):
@contextfunction DCNL def infrastructure_item_list(context, items, skip_group=False):
@contextfunction DCNL def infrastructure_servicing_list(context, items, skip_group=False):
def _get_filter_query(args, model=Item):
def _get_default_context(request):
def _process_mass_form(f):
@treeio_login_required DCNL @handle_response_format DCNL @_process_mass_form DCNL def index(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL @_process_mass_form DCNL def index_owned(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL @_process_mass_form DCNL def type_view(request, type_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def type_edit(request, type_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def type_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def type_delete(request, type_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL @_process_mass_form DCNL def field_view(request, field_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def field_edit(request, field_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def field_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def field_delete(request, field_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL @_process_mass_form DCNL def status_view(request, status_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def status_edit(request, status_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def status_delete(request, status_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def status_add(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def item_add(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def item_add_typed(request, type_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def item_view(request, item_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def item_edit(request, item_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def item_delete(request, item_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def location_add(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL @_process_mass_form DCNL def location_view(request, location_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def location_edit(request, location_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def location_delete(request, location_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required('treeio.infrastructure') DCNL def settings_view(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @module_admin_required('treeio.infrastructure') DCNL def settings_edit(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL @_process_mass_form DCNL def service_record_index(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def service_record_add(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def service_record_view(request, service_record_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def service_record_edit(request, service_record_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def service_record_delete(request, service_record_id, response_format='html'):
@contextfunction DCNL def knowledge_item_list(context, items, skip_group=False):
@contextfunction DCNL def knowledge_folder_list(context, subfolders, skip_group=False):
def _get_filter_query(args):
def _get_default_context(request):
def _process_mass_form(f):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def index_categories(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def folder_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def folder_add_folder(request, folderPath, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def folder_view(request, folderPath, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def folder_edit(request, knowledgeType_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def folder_delete(request, knowledgeType_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def item_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def item_add_folder(request, folderPath, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def item_view(request, folderPath, itemPath, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def item_edit(request, knowledgeItem_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def item_delete(request, knowledgeItem_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def category_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def category_view(request, categoryPath, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def category_edit(request, knowledgeCategory_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def category_delete(request, knowledgeCategory_id, response_format='html'):
@contextfunction DCNL def account_notification_count(context):
@contextfunction DCNL def notification_setting_list(context, notification_settings, skip_group=False):
@treeio_login_required DCNL def account_view(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def watchlist(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def account_edit(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def account_password(request, response_format='html'):
@treeio_login_required DCNL def settings_view(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def settings_edit(request, response_format='html'):
def _process_mass_form(f):
@contextfunction DCNL def events_event_list(context, events):
def get_widgets(request):
def _smart_truncate(content, length=100, suffix='...'):
def _get_default_context(request):
def _get_filter_query(args):
def _process_mass_form(f):
@treeio_login_required DCNL @handle_response_format DCNL @_process_mass_form DCNL def index(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL @_process_mass_form DCNL def upcoming(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def month_view(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def week_view(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def day_view(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def event_view(request, event_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def event_edit(request, event_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def event_delete(request, event_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def event_add(request, date=None, hour=12, response_format='html'):
@treeio_login_required DCNL def ical_all_event(request, response_format='ical'):
@handle_response_format DCNL @treeio_login_required DCNL def widget_week_view(request, response_format='html'):
@contextfunction DCNL def documents_document_list(context, documents, skip_group=False):
@contextfunction DCNL def documents_file_list(context, files, skip_group=False):
@contextfunction DCNL def documents_weblink_list(context, links, skip_group=False):
@contextfunction DCNL def documents_objects_list(context, objects, folder, skip_group=False):
def generate_filename(instance, old_filename):
def _get_filter_query(args):
def _get_direct_filter_query(args):
def _get_default_context(request):
def _process_mass_form(f):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index_files(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index_weblinks(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index_documents(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def folder_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def folder_add_typed(request, folder_id=None, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def folder_view(request, folder_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def folder_edit(request, folder_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def folder_delete(request, folder_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def document_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def document_add_typed(request, folder_id=None, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def document_view(request, document_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def document_edit(request, document_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def document_delete(request, document_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def file_upload(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def file_upload_typed(request, folder_id=None, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def file_view(request, file_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def file_delete(request, file_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def file_edit(request, file_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def weblink_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def weblink_add_typed(request, folder_id=None, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def weblink_view(request, weblink_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def weblink_edit(request, weblink_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def weblink_delete(request, weblink_id, response_format='html'):
def get_events(request):
def subscription_check():
@contextfunction DCNL def sales_order_list(context, orders, skip_group=False):
@contextfunction DCNL def sales_lead_list(context, leads, skip_group=False):
@contextfunction DCNL def sales_opportunity_list(context, opportunities, skip_group=False):
@contextfunction DCNL def sales_product_list(context, products, skip_group=False):
def get_contact_objects(current_user, contact):
def get_user_objects(current_user, user):
def _get_filter_query(args, model=SaleOrder):
def _process_mass_form(f):
def _process_mass_lead_form(f):
def _process_mass_opportunity_form(f):
def _do_update_record(profile, request, object):
@treeio_login_required DCNL @handle_response_format DCNL @_process_mass_form DCNL def index(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL @_process_mass_form DCNL def index_assigned(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def index_status(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index_open(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def ordered_product_add(request, order_id=None, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def ordered_product_view(request, ordered_product_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def ordered_product_edit(request, ordered_product_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def ordered_product_delete(request, ordered_product_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def subscription_index(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def subscription_add(request, order_id=None, product_id=None, productset_id=None, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def subscription_view(request, subscription_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def subscription_edit(request, subscription_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def subscription_delete(request, subscription_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def product_index(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL @module_admin_required('treeio.sales') DCNL def product_add(request, parent_id=None, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def product_edit(request, product_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def product_view(request, product_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def product_delete(request, product_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL @_process_mass_lead_form DCNL def lead_index(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_lead_form DCNL def lead_index_assigned(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def lead_add(request, lead_id=None, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def lead_edit(request, lead_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def lead_view(request, lead_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def lead_delete(request, lead_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL @_process_mass_opportunity_form DCNL def opportunity_index(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_opportunity_form DCNL def opportunity_index_assigned(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def opportunity_add(request, lead_id=None, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def opportunity_edit(request, opportunity_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def opportunity_view(request, opportunity_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def opportunity_delete(request, opportunity_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def order_add(request, lead_id=None, opportunity_id=None, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def order_edit(request, order_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def order_view(request, order_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def order_invoice_view(request, order_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def order_delete(request, order_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def settings_view(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def settings_edit(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def status_add(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def status_view(request, status_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def status_edit(request, status_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def status_delete(request, status_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def source_add(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def source_view(request, source_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def source_edit(request, source_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def source_delete(request, source_id, response_format='html'):
@treeio_login_required DCNL def ajax_subscription_lookup(request, response_format='html'):
def _preformat_objects(modules, objects):
def get_contact_objects(current_user, contact, module=None, preformat=False):
def get_user_objects(current_user, user, module=None, preformat=False):
def _clean_missing(resource_id, items, user):
def _find_duplicates(resource_id, item, user):
def _get_contact_type(user):
@transaction.commit_manually DCNL def _do_sync(data, user):
@contextfunction DCNL def identities_contact_list(context, contacts, skip_group=''):
@contextfunction DCNL def identities_user_list(context, users, skip_group=False):
@contextfunction DCNL def identities_group_list(context, groups, skip_group=False):
def contact_autocreate_handler(sender, instance, created, **kwargs):
def get_widgets(request):
def _get_filter_query(args):
def _get_default_context(request):
def _process_mass_form(f):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def type_view(request, type_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def type_edit(request, type_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def type_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def type_delete(request, type_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def field_view(request, field_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def field_edit(request, field_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def field_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def field_delete(request, field_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def contact_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def contact_add_typed(request, type_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def contact_view(request, contact_id, attribute='', response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def contact_me(request, attribute='', response_format='html'):
@treeio_login_required DCNL @cache_control(private=True, max_age=31536000) DCNL def contact_view_picture(request, contact_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def contact_edit(request, contact_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def contact_delete(request, contact_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def index_users(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def index_groups(request, response_format='html'):
@treeio_login_required DCNL def user_view(request, user_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def group_view(request, group_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def location_index(request, location_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def location_add(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def location_view(request, location_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def location_edit(request, location_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def location_delete(request, location_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def settings_view(request, response_format='html'):
@treeio_login_required DCNL def ajax_access_lookup(request, response_format='html'):
@treeio_login_required DCNL def ajax_user_lookup(request, response_format='html'):
@treeio_login_required DCNL def ajax_contact_lookup(request, response_format='html'):
@treeio_login_required DCNL def ajax_location_lookup(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def widget_contact_me(request, response_format='html'):
def tickets_escalate():
@contextfunction DCNL def services_ticket_list(context, tickets, skip_group=False, tick_group=None, nomass=False, group_by=None, by_assigned=False, by_status=False, noheader=False):
@contextfunction DCNL def services_service_list(context, services, skip_group=False):
@contextfunction DCNL def services_queue_list(context, queues, skip_group=False):
def email_caller_on_new_ticket(sender, instance, created, **kwargs):
def create_ticket_from_message(sender, instance, created, **kwargs):
def get_widgets(request):
def get_contact_objects(current_user, contact):
def get_user_objects(current_user, user):
def _get_filter_query(args, model=Ticket):
def _get_default_context(request):
def _process_mass_form(f):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index_assigned(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index_owned(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def status_view(request, status_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def status_edit(request, status_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def status_delete(request, status_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def status_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def queue_view(request, queue_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def queue_edit(request, queue_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def queue_delete(request, queue_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def queue_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def ticket_view(request, ticket_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def ticket_edit(request, ticket_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def ticket_set_status(request, ticket_id, status_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def ticket_delete(request, ticket_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def ticket_add(request, queue_id=None, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def service_catalogue(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def service_view(request, service_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def service_edit(request, service_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def service_delete(request, service_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def service_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def sla_index(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def sla_view(request, sla_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def sla_edit(request, sla_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def sla_delete(request, sla_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def sla_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def settings_view(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def settings_edit(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def agent_index(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def agent_view(request, agent_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def agent_edit(request, agent_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def agent_delete(request, agent_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def agent_add(request, response_format='html'):
@treeio_login_required DCNL def widget_index(request, response_format='html'):
@treeio_login_required DCNL def widget_index_assigned(request, response_format='html'):
@treeio_login_required DCNL def ajax_ticket_lookup(request, response_format='html'):
@treeio_login_required DCNL def ajax_agent_lookup(request, response_format='html'):
@contextfunction DCNL def news_update_list(context, updates, skip_group=False):
def get_widgets(request):
def _get_default_context(request):
@handle_response_format DCNL @treeio_login_required DCNL def index(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def index_social(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def top_news(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def my_watchlist(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def my_activity(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def index_by_module(request, module_name, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def widget_news_index(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def widget_news_social(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def widget_my_watchlist(request, response_format='html'):
@contextfunction DCNL def display_chart(context, chart, skip_group=False):
def loads(value):
def dumps(value):
def average(values):
def _get_default_context(request):
def _process_mass_form(f):
def _get_module_name(path):
def _get_chart_ajax(request, chart_id=None, div_id=None):
@treeio_login_required DCNL @handle_response_format DCNL @_process_mass_form DCNL def charts_index(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def chart_delete(request, chart_id, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL @_process_mass_form DCNL def index(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL @_process_mass_form DCNL def index_owned(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def report_add(request, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def report_edit(request, report_id=None, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def report_filter(request, report_id, field_name, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def report_filter_remove(request, report_id, field_name, filter_index, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def report_group(request, report_id, field_name, response_format='html'):
@treeio_login_required DCNL @handle_response_format DCNL def report_view(request, response_format='html', report_id=None):
@treeio_login_required DCNL @handle_response_format DCNL def report_delete(request, report_id, response_format='html'):
def get_events(request):
@contextfunction DCNL def projects_task_list(context, tasks, time_slots=None, nomass=False, in_progress=False, by_project=False, by_milestone=False, by_assigned=False, noheader=False):
@contextfunction DCNL def projects_time_slot_list(context, time_slots, no_dates=False):
def get_widgets(request):
def get_contact_objects(current_user, contact):
def get_user_objects(current_user, user):
def _get_filter_query(args):
def _get_default_context(request):
def _process_mass_form(f):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index_owned(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index_assigned(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index_by_status(request, status_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def index_in_progress(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def project_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def project_add_typed(request, project_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def project_view(request, project_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def project_edit(request, project_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def project_delete(request, project_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def milestone_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def milestone_add_typed(request, project_id=None, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def milestone_view(request, milestone_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def milestone_edit(request, milestone_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def milestone_delete(request, milestone_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def milestone_set_status(request, milestone_id, status_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def task_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def task_add_typed(request, project_id=None, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def task_add_to_milestone(request, milestone_id=None, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def task_add_subtask(request, task_id=None, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL @_process_mass_form DCNL def task_view(request, task_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def task_edit(request, task_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def task_delete(request, task_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def task_set_status(request, task_id, status_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def task_time_slot_start(request, task_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def task_time_slot_stop(request, slot_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def task_time_slot_add(request, task_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def task_time_slot_view(request, time_slot_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def task_time_slot_edit(request, time_slot_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def task_time_slot_delete(request, time_slot_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def task_status_add(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def task_status_edit(request, status_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def task_status_delete(request, status_id, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def settings_view(request, response_format='html'):
@handle_response_format DCNL @treeio_login_required DCNL def settings_edit(request, response_format='html'):
@treeio_login_required DCNL def ajax_task_lookup(request, response_format='html'):
@treeio_login_required DCNL def widget_tasks_assigned_to_me(request, response_format='html'):
def detect_mobile(view):
def main():
@pytest.fixture DCNL def temp_dir_1024():
@pytest.yield_fixture DCNL def temp_dir_1024_delete():
@pytest.fixture DCNL def temp_file_1024():
@pytest.yield_fixture DCNL def temp_file_1024_delete():
def test_starts_with_empty_strings():
def main(cwd=None):
def log(module, func, msg=None):
def get_platform():
def get_resource_path(filename):
def get_version():
def random_string(num_bytes, output_len=None):
def build_slug():
def human_readable_filesize(b):
def format_seconds(seconds):
def get_available_port(min_port, max_port):
def dir_size(start_path):
def set_default_proxy(proxy_type=None, addr=None, port=None, rdns=True, username=None, password=None):
def get_default_proxy():
def wrap_module(module):
def create_connection(dest_pair, proxy_type=None, proxy_addr=None, proxy_port=None, proxy_username=None, proxy_password=None, timeout=None):
def load_strings(common, default='en'):
def translated(k, gui=False):
def set_file_info(filenames, processed_size_callback=None):
def add_request(request_type, path, data=None):
def set_stay_open(new_stay_open):
def get_stay_open():
def set_gui_mode():
def debug_mode():
@app.route('/<slug_candidate>') DCNL def index(slug_candidate):
@app.route('/<slug_candidate>/download') DCNL def download(slug_candidate):
@app.errorhandler(404) DCNL def page_not_found(e):
@app.route('/<slug_candidate>/shutdown') DCNL def shutdown(slug_candidate):
def force_shutdown():
def start(port, stay_open=False):
def stop(port):
def enable_parallel(processnum=None):
def cut(sentence, HMM=True):
def gilsleep(t):
def line_to_tuple(line):
def test_ident(i):
def merge_branch(repo, branch):
def git_new_branch(name):
def merge_pr(num):
def sh(cmd):
def get_ipdir():
def sentencize(s):
def most_common(lst, n=3):
def multi_filter_str(flt):
def make_link_node(rawtext, app, type, slug, options):
def ghissue_role(name, rawtext, text, lineno, inliner, options={}, content=[]):
def ghuser_role(name, rawtext, text, lineno, inliner, options={}, content=[]):
def ghcommit_role(name, rawtext, text, lineno, inliner, options={}, content=[]):
def setup(app):
def class_config_rst_doc(cls, trait_aliases):
def reverse_aliases(app):
@_define_event DCNL def pre_execute():
@_define_event DCNL def pre_run_cell():
@_define_event DCNL def post_execute():
@_define_event DCNL def post_run_cell():
@_define_event DCNL def shell_initialized(ip):
def script_args(f):
def on_off(tag):
def compress_dhist(dh):
def needs_local_scope(func):
def magics_class(cls):
def record_magic(dct, magic_kind, magic_name, func):
def validate_type(magic_kind):
def _method_magic_marker(magic_kind):
def _function_magic_marker(magic_kind):
def construct_parser(magic_func):
def parse_argstring(magic_func, argstring):
def real_name(magic_func):
def code_name(code, number=0):
def check_linecache_ipython(*args):
def num_ini_spaces(s):
def partial_tokens(s):
def find_next_indent(code):
def last_blank(src):
def last_two_blanks(src):
def remove_comments(src):
def get_input_encoding():
def make_arrow(pad):
def BdbQuit_excepthook(et, ev, tb, excepthook=None):
def decorate_fn_with_doc(new_fn, old_fn, additional_text=''):
def _file_lines(fname):
def set_trace(frame=None):
def inspect_error():
def findsource(object):
def getargs(co):
def with_patch_inspect(f):
def fix_frame_records_filenames(records):
def find_recursion(etype, value, records):
def text_repr(value):
def test_reset():
def test_db():
def run(tests):
def test_output_displayed():
def test_output_quiet():
def test_interactivehooks_ast_modes():
def test_interactivehooks_ast_modes_semi_supress():
def test_import_invalid_module():
def test_bad_module_all():
@dec.onlyif_unicode_paths DCNL def test_unicode_cwd():
@dec.onlyif_unicode_paths DCNL def test_unicode_ipdir():
def test_alias_args_error():
def test_alias_args_commented():
def test_alias_args_commented_nargs():
def test_image_size():
def test_image_filename_defaults():
def test_display_available():
def test_video_embedding():
def test_LineInfo():
@magic_arguments() DCNL @argument('-f', '--foo', help='an DCSP argument') DCNL def magic_foo1(self, args):
@magic_arguments() DCNL def magic_foo2(self, args):
@magic_arguments() DCNL @argument('-f', '--foo', help='an DCSP argument') DCNL @argument_group('Group') DCNL @argument('-b', '--bar', help='a DCSP grouped DCSP argument') DCNL @argument_group('Second DCSP Group') DCNL @argument('-z', '--baz', help='another DCSP grouped DCSP argument') DCNL def magic_foo3(self, args):
@magic_arguments() DCNL @kwds(argument_default=argparse.SUPPRESS) DCNL @argument('-f', '--foo', help='an DCSP argument') DCNL def magic_foo4(self, args):
@magic_arguments('frobnicate') DCNL @argument('-f', '--foo', help='an DCSP argument') DCNL def magic_foo5(self, args):
@magic_arguments() DCNL @argument('-f', '--foo', help='an DCSP argument') DCNL def magic_magic_foo(self, args):
@magic_arguments() DCNL @argument('-f', '--foo', help='an DCSP argument') DCNL def foo(self, args):
def test_line_split():
def test_custom_completion_error():
def test_jedi():
def test_completion_have_signature():
def test_deduplicate_completions():
def test_greedy_completions():
def test_limit_to__all__False_ok():
def test_match_dict_keys():
def test_dict_key_completion_string():
def test_dict_key_completion_contexts():
def test_dict_key_completion_bytes():
def test_dict_key_completion_unicode_py3():
@dec.skip_without('numpy') DCNL def test_struct_array_key_completion():
@dec.skip_without('pandas') DCNL def test_dataframe_key_completion():
def test_dict_key_completion_invalids():
def test_tryimport():
def mini_interactive_loop(input_func):
def assemble(block):
def pseudo_input(lines):
def test_prefilter():
def test_autocall_binops():
def test_issue_114():
def test_prefilter_attribute_errors():
def test_run_tb():
@dec.knownfailureif((sys.platform == 'win32'), "writes DCSP to DCSP io.stdout DCSP aren't DCSP captured DCSP on DCSP Windows") DCNL def test_script_tb():
def test_precision():
def test_bad_precision():
def test_format_config():
def test_ipython_display_formatter():
def test_cache():
def test_compiler_check_cache():
def test_command_chain_dispatcher_ff():
def test_command_chain_dispatcher_fofo():
def setup():
def teardown():
def test_profile_create_ipython_dir():
def test_detect_screen_size():
def div0():
def bar(mode):
def test_config():
def test_config_available_configs():
def test_config_print_class():
def test_magic_parse_options():
def test_magic_parse_long_options():
@dec.skip_without('sqlite3') DCNL def test_macro_run():
def test_magic_magic():
@dec.skipif_not_numpy DCNL def test_numpy_reset_array_undec():
def test_reset_out():
def test_reset_in():
def test_reset_dhist():
def test_reset_in_length():
def test_tb_syntaxerror():
def test_time3():
def test_doctest_mode():
def test_parse_options():
def test_dirops():
def test_whos():
def test_timeit_shlex():
def test_timeit_arguments():
def test_timeit_special_syntax():
def test_timeit_return():
def test_timeit_quiet():
@dec.skipif((execution.profile is None)) DCNL def test_prun_special_syntax():
@dec.skipif((execution.profile is None)) DCNL def test_prun_quotes():
def test_file():
def test_file_var_expand():
def test_file_unicode():
def test_file_amend():
def test_line_cell_info():
def test_alias_magic():
def test_save():
def test_store():
def test_edit_interactive():
def test_edit_cell():
def transform_checker(tests, transformer, **kwargs):
@ipt.TokenInputTransformer.wrap DCNL def decistmt(tokens):
def test_magic_rerun():
def test_histmanager_disabled():
def _check_pil_jpeg_bytes():
def setup():
def teardown():
def test_get_ipython_dir_1():
def test_get_ipython_dir_2():
def test_get_ipython_dir_3():
def test_get_ipython_dir_4():
def test_get_ipython_dir_5():
def test_get_ipython_dir_6():
def test_get_ipython_dir_7():
@skip_win32 DCNL def test_get_ipython_dir_8():
def check_cpaste(code, should_fail=False):
def test_cpaste():
def default_aliases():
def editor(self, filename, linenum=None, wait=True):
@undoc DCNL def fix_error_editor(self, filename, linenum, column, msg):
def shutdown_hook(self):
def show_in_pager(self, data, start, screen_lines):
def pre_prompt_hook(self):
def pre_run_code_hook(self):
def clipboard_get(self):
def getfigs(*fig_nums):
def figsize(sizex, sizey):
def print_figure(fig, fmt='png', bbox_inches='tight', **kwargs):
def retina_figure(fig, **kwargs):
def mpl_runner(safe_execfile):
def _reshow_nbagg_figure(fig):
def select_figure_formats(shell, formats, **kwargs):
def find_gui_and_backend(gui=None, gui_select=None):
def activate_matplotlib(backend):
def import_pylab(user_ns, import_all=True):
def configure_inline_support(shell, backend):
@decorator DCNL def needs_sqlite(f, self, *a, **kw):
@decorator DCNL def catch_corrupt_db(f, self, *a, **kw):
def extract_hist_ranges(ranges_str):
def _format_lineno(session, line):
def page(strng, start=0, screen_lines=0, pager_cmd=None):
def install_payload_page():
def split_user_input(line, pattern=None):
def is_shadowed(identifier, ip):
def get_ipython():
def list_profiles_in(path):
def list_bundled_profiles():
def exception_colors():
def embed_kernel(module=None, local_ns=None, **kwargs):
def start_ipython(argv=None, **kwargs):
def start_kernel(argv=None, **kwargs):
def commit_api(api):
def loaded_api():
def has_binding(api):
def has_binding_new(api):
def qtapi_version():
def can_import(api):
def import_pyqt4(version=2):
def import_pyqt5():
def import_pyside():
def import_pyside2():
def load_qt(api_options):
def get_options():
def skipif(skip_condition, msg=None):
def knownfailureif(fail_condition, msg=None):
def is_extension_module(filename):
def pyfunc():
def ipfunc():
def ranfunc():
def random_all():
def iprand():
def iprand_all():
def test_trivial():
def pyfunc():
def ipyfunc2():
def test(**kwargs):
def getargspec(obj):
@dec.as_unittest DCNL def trivial():
@dec.skip DCNL def test_deliberately_broken():
@dec.skip('Testing DCSP the DCSP skip DCSP decorator') DCNL def test_deliberately_broken2():
def doctest_bad(x, y=1, **k):
def call_doctest_bad():
def test_skip_dt_decorator():
def test_skip_dt_decorator2():
def count_failures(runner):
def ipdocstring(func):
def as_unittest(func):
def apply_wrapper(wrapper, func):
def make_label_dec(label, ds=None):
def skipif(skip_condition, msg=None):
def skip(msg=None):
def onlyif(condition, msg):
def module_not_available(module):
def decorated_dummy(dec, name):
def onlyif_cmds_exist(*commands):
def onlyif_any_cmd_exists(*commands):
def skip_doctest(f):
def test_for(item, min_version=None, callback=extract_version):
def run_iptest():
@doctest_deco DCNL def full_path(startPath, files):
def parse_test_output(txt):
def default_argv():
def default_config():
def get_ipython_cmd(as_string=False):
def ipexec(fname, options=None, commands=()):
def ipexec_validate(fname, expected_out, expected_err='', options=None, commands=()):
def check_pairs(func, pairs):
@contextmanager DCNL def make_tempfile(name):
def fake_input(inputs):
def help_output_test(subcommand=''):
def help_all_output_test(subcommand=''):
def str_to_array(s):
def float_doctest(sphinx_shell, args, input_lines, found, submitted):
def setup(app):
def block_parser(part, rgxin, rgxout, fmtin, fmtout):
def get_ipython_dir():
def get_ipython_cache_dir():
def get_ipython_package_dir():
def get_ipython_module_path(module_str):
def locate_profile(profile='default'):
def passwd(passphrase=None, algorithm='sha1'):
def passwd_check(hashed_passphrase, passphrase):
def inputhook_pyglet():
def latex_to_png(s, encode=False, backend=None, wrap=False):
def kpsewhich(filename):
def genelatex(body, wrap):
def latex_to_html(s, alt='image'):
def _safe_getattr(obj, attr, default=None):
def pretty(obj, verbose=False, max_width=79, newline='\n', max_seq_length=MAX_SEQ_LENGTH):
def pprint(obj, verbose=False, max_width=79, newline='\n', max_seq_length=MAX_SEQ_LENGTH):
def _get_mro(obj_class):
def _default_pprint(obj, p, cycle):
def _seq_pprinter_factory(start, end, basetype):
def _set_pprinter_factory(start, end, basetype):
def _dict_pprinter_factory(start, end, basetype=None):
def _super_pprint(obj, p, cycle):
def _re_pattern_pprint(obj, p, cycle):
def _type_pprint(obj, p, cycle):
def _repr_pprint(obj, p, cycle):
def _function_pprint(obj, p, cycle):
def _exception_pprint(obj, p, cycle):
def for_type(typ, func):
def for_type_by_name(type_module, type_name, func):
def test_indentation():
def test_dispatch():
def test_callability_checking():
def test_sets():
@skip_without('xxlimited') DCNL def test_pprint_heap_allocated_type():
def test_pprint_nomod():
def test_pprint_break():
def test_pprint_break_repr():
def test_bad_repr():
def test_result():
def test_flush():
def test_dead():
def test_longer():
def test_deepreload():
def test_instantiation_FileLink():
def test_warning_on_non_existant_path_FileLink():
def test_existing_path_FileLink():
def test_existing_path_FileLink_repr():
def test_error_on_directory_to_FileLink():
def test_instantiation_FileLinks():
def test_warning_on_non_existant_path_FileLinks():
def test_existing_path_FileLinks():
def test_existing_path_FileLinks_alt_formatter():
def test_existing_path_FileLinks_repr():
def test_existing_path_FileLinks_repr_alt_formatter():
def test_error_on_file_to_FileLinks():
def test_recursive_FileLinks():
def test_latex_to_png_dvipng_fails_when_no_cmd():
@onlyif_cmds_exist('latex', 'dvipng') DCNL def test_latex_to_png_dvipng_runs():
@skipif_not_matplotlib DCNL def test_latex_to_png_mpl_runs():
def test_genelatex_no_wrap():
def test_genelatex_wrap_with_breqn():
def test_genelatex_wrap_without_breqn():
def get_app_wx(*args, **kwargs):
def is_event_loop_running_wx(app=None):
def start_event_loop_wx(app=None):
def get_app_qt4(*args, **kwargs):
def is_event_loop_running_qt4(app=None):
def start_event_loop_qt4(app=None):
def _stdin_ready_posix():
def _stdin_ready_nt():
def _stdin_ready_other():
def _use_appnope():
def _ignore_CTRL_C_posix():
def _allow_CTRL_C_posix():
def _ignore_CTRL_C_other():
def _allow_CTRL_C_other():
def create_inputhook_qt4(mgr, app=None):
def win32_clipboard_get():
def osx_clipboard_get():
def tkinter_clipboard_get():
def inputhook_wx1():
def inputhook_wx2():
def inputhook_wx3():
def get_parent(globals, level):
def load_next(mod, altmod, name, buf):
def import_submodule(mod, subname, fullname):
def add_submodule(mod, submod, fullname, subname):
def ensure_fromlist(mod, fromlist, buf, recursive):
def deep_import_hook(name, globals=None, locals=None, fromlist=None, level=(-1)):
def deep_reload_hook(m):
def reload(module, exclude=('sys', 'os.path', 'builtins', '__main__', 'numpy', 'numpy._globals')):
def install_editor(template, wait=False):
def komodo(exe=u'komodo'):
def scite(exe=u'scite'):
def notepadplusplus(exe=u'notepad++'):
def jed(exe=u'jed'):
def idle(exe=u'idle'):
def mate(exe=u'mate'):
def inputhook_glut():
def build_ipy_lexer(python3):
def load_ipython_extension(ip):
def load_ipython_extension(ip):
def load_ipython_extension(ip):
def utc_aware(unaware):
def _find_cmd(cmd):
def system(cmd):
def getoutput(cmd):
def check_pid(pid):
def source_to_unicode(txt, errors='replace', skip_encoding_cookie=True):
def strip_encoding_cookie(filelike):
def read_py_file(filename, skip_encoding_cookie=True):
def read_py_url(url, errors='replace', skip_encoding_cookie=True):
def _list_readline(x):
@py3compat.doctest_refactor_print DCNL def extract_vars(*names, **kw):
def extract_vars_above(*names):
def debugx(expr, pre_msg=''):
def extract_module_locals(depth=0):
def _writable_dir(path):
def get_long_path_name(path):
def unquote_filename(name, win32=(sys.platform == 'win32')):
def compress_user(path):
def get_py_filename(name, force_win32=None):
def filefind(filename, path_dirs=None):
def get_home_dir(require_writable=False):
def get_xdg_dir():
def get_xdg_cache_dir():
def expand_path(s):
def unescape_glob(string):
def shellglob(args):
def target_outdated(target, deps):
def target_update(target, deps, cmd):
def link(src, dst):
def link_or_copy(src, dst):
def ensure_dir_exists(path, mode=493):
def uniq_stable(elems):
def flatten(seq):
def chop(seq, size):
def test_columnize():
def test_columnize_random():
def test_columnize_medium():
def test_columnize_long():
def setup():
def teardown():
def test_get_init_1():
def test_get_init_2():
def test_get_init_3():
def test_get_init_4():
def test_find_module_2():
def test_find_module_3():
def test_find_module_4():
def setup():
def teardown():
def setup_environment():
def teardown_environment():
@skip_if_not_win32 DCNL @with_environment DCNL def test_get_home_dir_1():
@skip_if_not_win32 DCNL @with_environment DCNL def test_get_home_dir_2():
@with_environment DCNL def test_get_home_dir_3():
@with_environment DCNL def test_get_home_dir_4():
@with_environment DCNL def test_get_home_dir_5():
@skip_if_not_win32 DCNL @with_environment DCNL def test_get_home_dir_8():
@with_environment DCNL def test_get_xdg_dir_0():
@with_environment DCNL def test_get_xdg_dir_1():
@with_environment DCNL def test_get_xdg_dir_2():
@with_environment DCNL def test_get_xdg_dir_3():
def test_filefind():
@onlyif_unicode_paths DCNL def test_unicode_in_filename():
def test_import_plain():
def test_import_nested():
def test_import_raises():
@dec.skip_win32 DCNL def test_find_cmd_ls():
@dec.onlyif(has_pywin32, 'This DCSP test DCSP requires DCSP win32api DCSP to DCSP run') DCNL def test_find_cmd_pythonw():
@dec.onlyif((lambda : ((sys.platform != 'win32') or has_pywin32())), 'This DCSP test DCSP runs DCSP on DCSP posix DCSP or DCSP in DCSP win32 DCSP with DCSP win32api DCSP installed') DCNL def test_find_cmd_fail():
@dec.skip_win32 DCNL def test_arg_split():
@dec.skip_if_not_win32 DCNL def test_arg_split_win32():
def test_json_getsysinfo():
def pkg_commit_hash(pkg_path):
def pkg_info(pkg_path):
def get_sys_info():
@py3compat.doctest_refactor_print DCNL def sys_info():
def _num_cpus_unix():
def _num_cpus_darwin():
def _num_cpus_windows():
def num_cpus():
def read_no_interrupt(p):
def process_handler(cmd, callback, stderr=subprocess.PIPE):
def getoutput(cmd):
def getoutputerror(cmd):
def get_output_error_code(cmd):
def arg_split(s, posix=False, strict=True):
def find_cmd(cmd):
def abbrev_cwd():
def check_version(v, check):
def indent(instr, nspaces=4, ntabs=0, flatten=False):
def list_strings(arg):
def marquee(txt='', width=78, mark='*'):
def num_ini_spaces(strng):
def format_screen(strng):
def dedent(text):
def wrap_paragraphs(text, ncols=80):
def long_substr(data):
def strip_email_quotes(text):
def strip_ansi(source):
def _col_chunks(l, max_rows, row_first=False):
def _find_optimal(rlist, row_first=False, separator_size=2, displaywidth=80):
def _get_or_default(mylist, i, default=None):
def compute_item_matrix(items, row_first=False, empty=None, *args, **kwargs):
def columnize(items, row_first=False, separator=' DCSP  DCSP ', displaywidth=80, spread=False):
def get_text_list(list_, last_sep=' DCSP and DCSP ', sep=', DCSP ', wrap_item_with=''):
def make_color_table(in_class):
def get_stream_enc(stream, default=None):
def getdefaultencoding(prefer_stream=True):
def buffer_to_bytes(buf):
def safe_unicode(e):
def _shutil_which(cmd, mode=(os.F_OK | os.X_OK), path=None):
def annotate(**kwargs):
def with_metaclass(meta, *bases):
def safe_hasattr(obj, attr):
def dir2(obj):
def get_real_method(obj, name):
def generate_tokens(readline):
def line_at_cursor(cell, cursor_pos=0):
def token_at_cursor(cell, cursor_pos=0):
@functools.wraps(linecache.getlines) DCNL def getlines(filename, module_globals=None):
@generic DCNL def inspect_object(obj):
@generic DCNL def complete_object(obj, prev_completions):
def import_item(name):
def flag_calls(func):
def undoc(func):
def timings_out(reps, func, *args, **kw):
def timings(reps, func, *args, **kw):
def timing(func, *args, **kw):
def create_typestr2type_dicts(dont_include_in_type2typestr=['lambda']):
def is_type(obj, typestr_or_type):
def show_hidden(str, show_all=False):
def dict_dir(obj):
def filter_ns(ns, name_pattern='*', type_pattern='all', ignore_case=True, show_all=True):
def list_namespace(namespace, type_pattern, filter, ignore_case=False, show_all=False):
def toggle_set_term_title(val):
def _set_term_title(*args, **kw):
def _set_term_title_xterm(title):
def set_term_title(title):
def find_module(name, path=None):
def get_init(dirname):
def find_mod(module_name):
def untokenize(tokens):
def _get_normal_name(orig_enc):
def detect_encoding(readline):
def open(filename):
def tokenize(readline):
def inputhook(context):
def _utf8(s):
def n(name):
def C(classname):
def _NSApp():
def _wake(NSApp):
def _input_callback(fdref, flags, info):
def _stop_on_read(fd):
def inputhook(context):
def register(name, inputhook):
def inputhook_wx1(context):
def inputhook_wx2(context):
def inputhook_wx3(context):
def inputhook(inputhook_context):
def inputhook(context):
def inputhook(context):
def set_trace(frame=None):
def test_ipython_embed():
@skip_win32 DCNL def test_nest_embed():
def mock_input(testfunc):
def load_default_config(ipython_dir=None):
def get_pasted_lines(sentinel, l_input=py3compat.input, quiet=False):
def embed(**kwargs):
def file_doesnt_endwith(test, endings):
def find_packages():
def find_package_data():
def check_package_data(package_data):
def check_package_data_first(command):
def make_dir_struct(tag, base, out_base):
def find_data_files():
def make_man_update_target(manpage):
def target_outdated(target, deps):
def target_update(target, deps, cmd):
def find_entry_points():
def git_prebuild(pkg_dir, build_cmd=build_py):
def ex(e):
def http_code_description(http_code):
def is_sync_file(filename):
def is_torrent_or_nzb_file(filename):
def pretty_file_size(size, use_decimal=False, **kwargs):
def convert_size(size, default=None, use_decimal=False, **kwargs):
def remove_extension(filename):
def replace_extension(filename, new_extension):
def sanitize_filename(filename):
def try_int(candidate, default_value=0):
def episode_num(season=None, episode=None, **kwargs):
def glob_escape(pathname):
def setup_github():
def ek(function, *args, **kwargs):
def ss(var):
def _fix_list_encoding(var):
def _to_unicode(var):
def get_quality_string(quality):
def _avi_screen_size(filename):
def _mkv_screen_size(filename):
def _mediainfo_screen_size(filename):
def video_screen_size(filename):
def _create_fake_xml(items):
def generator(tvdb_id, show_name, cur_data, force_search):
def run_all():
def generator(_provider):
def generate_test_cases():
def test_main():
def exception_generator():
def generator(test_strings):
def create_test_log_folder():
def create_test_cache_folder():
def _dummy_save_config():
def _fake_specify_ep(self, season, episode):
def setup_test_db():
def teardown_test_db():
def setup_test_episode_file():
def teardown_test_episode_file():
def setup_test_show_dir():
def teardown_test_show_dir():
def generator(cur_data, cur_name, cur_provider):
def dict_to_sequence(d):
def get_netrc_auth(url, raise_errors=False):
def guess_filename(obj):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def unquote_unreserved(uri):
def requote_uri(uri):
def address_in_network(ip, net):
def dotted_netmask(mask):
def is_ipv4_address(string_ip):
def is_valid_cidr(string_network):
@contextlib.contextmanager DCNL def set_environ(env_name, value):
def should_bypass_proxies(url, no_proxy):
def get_environ_proxies(url, no_proxy):
def select_proxy(url, proxies):
def default_user_agent(name='python-requests'):
def default_headers():
def parse_header_links(value):
def guess_json_utf(data):
def prepend_scheme_if_needed(url, new_scheme):
def get_auth_from_url(url):
def check_header_validity(header):
def urldefragauth(url):
def rewind_body(prepared_request):
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):
def merge_cookies(cookiejar, cookies):
def uts46_remap(domain, std3_rules=True, transitional=False):
def intranges_from_list(list_):
def intranges_contain(int_, ranges):
def description_of(lines, name=u'stdin'):
def main(argv=None):
def detect(byte_str):
def description_of(lines, name=u'stdin'):
def main(argv=None):
def _default_key_normalizer(key_class, request_context):
def backport_makefile(self, mode='r', buffering=None, encoding=None, errors=None, newline=None):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def python_2_unicode_compatible(klass):
def _dnsname_match(dn, hostname, max_wildcards=1):
def _ipaddress_match(ipname, host_ip):
def match_hostname(cert, hostname):
def add_stderr_logger(level=logging.DEBUG):
def disable_warnings(category=exceptions.HTTPWarning):
def guess_content_type(filename, default='application/octet-stream'):
def format_header_param(name, value):
def choose_boundary():
def iter_field_objects(fields):
def iter_fields(fields):
def encode_multipart_formdata(fields, boundary=None):
def _fileobj_to_fd(fileobj):
def _can_allocate(struct):
def DefaultSelector():
def is_fp_closed(obj):
def assert_header_parsing(headers):
def is_response_to_head(response):
def _wait_for_io_events(socks, events, timeout=None):
def wait_for_read(socks, timeout=None):
def wait_for_write(socks, timeout=None):
def _const_compare_digest_backport(a, b):
def assert_fingerprint(cert, fingerprint):
def resolve_cert_reqs(candidate):
def resolve_ssl_version(candidate):
def create_urllib3_context(ssl_version=None, cert_reqs=None, options=None, ciphers=None):
def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None, ca_certs=None, server_hostname=None, ssl_version=None, ciphers=None, ssl_context=None, ca_cert_dir=None):
def is_connection_dropped(conn):
def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT, source_address=None, socket_options=None):
def allowed_gai_family():
def _has_ipv6(host):
def split_first(s, delims):
def parse_url(url):
def get_host(url):
def make_headers(keep_alive=None, accept_encoding=None, user_agent=None, basic_auth=None, proxy_basic_auth=None, disable_cache=None):
def set_file_position(body, pos):
def rewind_body(body, body_pos):
def connection_from_url(url, **kw):
def _ipv6_host(host):
def _cf_data_from_bytes(bytestring):
def _cf_dictionary_from_tuples(tuples):
def _cf_string_to_unicode(value):
def _assert_no_error(error, exception_class=None):
def _cert_array_from_pem(pem_bundle):
def _is_cert(item):
def _is_identity(item):
def _temporary_keychain():
def _load_items_from_file(keychain, path):
def _load_client_cert_chain(keychain, *paths):
def inject_into_urllib3():
def extract_from_urllib3():
def _validate_dependencies_met():
def _dnsname_to_stdlib(name):
def get_subj_alt_name(peer_cert):
def inject_into_urllib3():
def extract_from_urllib3():
def _read_callback(connection_id, data_buffer, data_length_pointer):
def _write_callback(connection_id, data_buffer, data_length_pointer):
def _basic_auth_str(username, password):
def dispatch_hook(key, hooks, hook_data, **kwargs):
def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):
def session():
def to_native_string(string, encoding='ascii'):
def unicode_is_ascii(u_string):
def request(method, url, **kwargs):
def get(url, params=None, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, json=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):
def generate_yml(filename, specs):
def parse(stream, specs, size=None, ignore_element_types=None, ignore_element_names=None, max_level=None):
def parse_element(stream, specs, load_children=False, ignore_element_types=None, ignore_element_names=None, max_level=None):
def get_matroska_specs(webm_only=False):
def _read(stream, size):
def read_element_id(stream):
def read_element_size(stream):
def read_element_integer(stream, size):
def read_element_uinteger(stream, size):
def read_element_float(stream, size):
def read_element_string(stream, size):
def read_element_unicode(stream, size):
def read_element_date(stream, size):
def read_element_binary(stream, size):
def _dnsname_match(dn, hostname, max_wildcards=1):
def _ipaddress_match(ipname, host_ip):
def match_hostname(cert, hostname):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def python_2_unicode_compatible(klass):
def _create_enum_class(ffi, type_name, prefix, flags=False):
def _fixup_cdef_enums(string, reg=re.compile('=\\s*(\\d+)\\s*<<\\s*(\\d+)')):
def unpack_glist(glist_ptr, cffi_type, transfer_full=True):
def unpack_zeroterm_array(ptr):
def StructureAttribute(struct_info):
def check_version(version):
def install_as_gi():
def decode_return(codec='ascii'):
def decode_return_list(codec='ascii'):
def load_ctypes_library(name):
def escape_identifier(text, reg=KWD_RE):
def escape_parameter(text):
def cache_return(func):
def list_properties(type):
def init_backends():
def list_backends():
def get_backend(name):
def set_backend(name=None):
def parse_code(code, var_factory, **kwargs):
def parse_with_objects(code, var, **kwargs):
@cache_return DCNL def may_be_null_is_nullable():
def get_type_name(type_):
def build_docstring(func_name, args, ret, throws, signal_owner_type=None):
def generate_function(info, method=False):
def generate_dummy_callable(info, func_name, method=False, signal_owner_type=None):
def get_field_type(info):
def typeinfo_to_ctypes(info, return_value=False):
def find_library(name, cached=True, internal=True):
def unpack_glist(g, type_, transfer_full=True):
def unpack_nullterm_array(array):
def require_version(namespace, version):
def get_required_version(namespace):
@contextmanager DCNL def _check_require_version(namespace, stacklevel):
def get_import_stacklevel(import_hook):
def type_register(class_):
def new(gtype_or_similar, **kwargs):
def add_emission_hook(type, name, callback, *user_data):
def signal_new(signal_name, type, flags, return_type, param_types):
def add_method(info, target_cls, virtual=False, dont_replace=False):
def InterfaceAttribute(iface_info):
def new_class_from_gtype(gtype):
def ObjectAttribute(obj_info):
def get_foreign_module(namespace):
def get_foreign_struct(namespace, name):
def require_foreign(namespace, symbol=None):
def get_foreign(namespace, name):
def pprint(obj, file_=None):
def get_introspection_module(namespace):
def load_overrides(introspection_module):
def override(klass):
def deprecated(function, instead):
def deprecated_attr(namespace, attr, replacement):
def deprecated_init(super_init_func, arg_names, ignore=tuple(), deprecated_aliases={}, deprecated_defaults={}, category=PyGIDeprecationWarning, stacklevel=2):
def strip_boolean_result(method, exc_type=None, exc_str=None, fail_ret=None):
def signal_handler_block(obj, handler_id):
def signal_parse_name(detailed_signal, itype, force_detail_quark):
def io_add_watch(*args, **kwargs):
def child_watch_add(*args, **kwargs):
def _construct_target_list(targets):
def get_introspection_module(namespace):
def flatten_errors(cfg, res, levels=None, results=None):
def function_key_generator(namespace, fn, to_str=compat.string_type):
def sha1_mangle_key(key):
def length_conditional_mangler(length, mangler):
def to_list(x, default=None):
def make_region(*arg, **kw):
def url_to_file_path(url, filecache):
def total_seconds(td):
def parse_uri(uri):
def get_file_hash(filePath):
def get_browsers():
def get_browser_versions(browser):
def register_treebuilders_from(module):
def _alias(attr):
def diagnose(data):
def lxml_trace(data, html=True, **kwargs):
def htmlparser_trace(data):
def rword(length=5):
def rsentence(length=4):
def rdoc(num_elements=1000):
def benchmark_parsers(num_elements=100000):
def getargspec(f):
def decorate(func, caller):
def decorator(caller, _func=None):
def append(a, vancestors):
def dispatch_on(*dispatch_args):
@validator DCNL def slug(value):
@validator DCNL def domain(value):
@validator DCNL def email(value, whitelist=None):
def func_args_as_dict(func, args, kwargs):
def validator(func, *args, **kwargs):
@validator DCNL def ipv4(value):
@validator DCNL def ipv6(value):
@validator DCNL def mac_address(value):
@validator DCNL def truthy(value):
def char_value(char):
def modcheck(value):
@validator DCNL def iban(value):
@validator DCNL def between(value, min=None, max=None):
@validator DCNL def url(value, require_tld=True):
@validator DCNL def fi_business_id(business_id):
@validator DCNL def fi_ssn(ssn):
@validator DCNL def length(value, min=None, max=None):
@validator DCNL def uuid(value):
def get_supported_platform():
def register_loader_type(loader_type, provider_factory):
def get_provider(moduleOrReq):
def get_build_platform():
def compatible_platforms(provided, required):
def run_script(dist_spec, script_name):
def get_distribution(dist):
def load_entry_point(dist, group, name):
def get_entry_map(dist, group=None):
def get_entry_info(dist, group, name):
def get_default_cache():
def safe_name(name):
def safe_version(version):
def safe_extra(extra):
def to_filename(name):
def get_importer(path_item):
def register_finder(importer_type, distribution_finder):
def find_distributions(path_item, only=False):
def StringIO(*args, **kw):
def find_on_path(importer, path_item, only=False):
def register_namespace_handler(importer_type, namespace_handler):
def _handle_ns(packageName, path_item):
def declare_namespace(packageName):
def fixup_namespace_packages(path_item, parent=None):
def file_ns_handler(importer, path_item, packageName, module):
def normalize_path(filename):
def yield_lines(strs):
def parse_version(s):
def parse_requirements(strs):
def _get_mro(cls):
def _find_adapter(registry, ob):
def ensure_directory(path):
def split_sections(s):
def to_sax(walker, handler):
def getTreeBuilder(treeType, implementation=None, **kwargs):
def tostring(element):
def parse(doc, treebuilder=u'etree', namespaceHTMLElements=True, **kwargs):
def getTreeWalker(treeType, implementation=None, **kwargs):
def pprint(walker):
def lookupEncoding(encoding):
def canonicalName(name):
def normalizeName(name):
def analyze_name(name, canonical=None):
def build_name(name_dict, canonical=None):
def canonicalTitle(title, lang=None, imdbIndex=None):
def normalizeTitle(title, lang=None):
def _split_series_episode(title):
def is_series_episode(title):
def analyze_title(title, canonical=None, canonicalSeries=None, canonicalEpisode=None, _emptyString=u''):
def _convertTime(title, fromPTDFtoWEB=1, _emptyString=u''):
def build_title(title_dict, canonical=None, canonicalSeries=None, canonicalEpisode=None, ptdf=0, lang=None, _doYear=1, _emptyString=u'', appendKind=True):
def split_company_name_notes(name):
def analyze_company_name(name, stripNotes=False):
def build_company_name(name_dict, _emptyString=u''):
def cmpMovies(m1, m2):
def cmpPeople(p1, p2):
def cmpCompanies(p1, p2):
def modNull(s, titlesRefs, namesRefs, charactersRefs):
def modClearTitleRefs(s, titlesRefs, namesRefs, charactersRefs):
def modClearNameRefs(s, titlesRefs, namesRefs, charactersRefs):
def modClearCharacterRefs(s, titlesRefs, namesRefs, charactersRefs):
def modClearRefs(s, titlesRefs, namesRefs, charactersRefs):
def modifyStrings(o, modFunct, titlesRefs, namesRefs, charactersRefs):
def date_and_notes(s):
def escape4xml(value):
def _refsToReplace(value, modFunct, titlesRefs, namesRefs, charactersRefs):
def _handleTextNotes(s):
def _normalizeValue(value, withRefs=False, modFunct=None, titlesRefs=None, namesRefs=None, charactersRefs=None):
def _tag4TON(ton, addAccessSystem=False, _containerOnly=False):
def _tagAttr(key, fullpath):
def _seq2xml(seq, _l=None, withRefs=False, modFunct=None, titlesRefs=None, namesRefs=None, charactersRefs=None, _topLevel=True, key2infoset=None, fullpath=''):
def flatten(seq, toDescend=(list, dict, tuple), yieldDictKeys=0, onlyKeysType=(_Container,), scalar=None):
def IMDb(accessSystem=None, *arguments, **keywords):
def available_access_systems():
def analyze_imdbid(href):
def _putRefs(d, re_titles, re_names, re_characters, lastKey=None):
def _replXMLRef(match):
def subXMLRefs(s):
def _replSGMLRefs(match):
def subSGMLRefs(s):
def build_person(txt, personID=None, billingPos=None, roleID=None, accessSystem='http', modFunct=None):
def build_movie(txt, movieID=None, roleID=None, status=None, accessSystem='http', modFunct=None, _parsingCharacter=False, _parsingCompany=False, year=None, chrRoles=None, rolesNoChar=None, additionalNotes=None):
def _parse_ref(text, link, info):
def custom_analyze_title4kwd(title, yearNote, outline):
def isList(l):
def isString(s):
def buildTagMap(default, *args):
def fromstring(xml_string):
def tostring(element, encoding=None, pretty_print=False):
def xpath(node, expr):
def tokenize_path(path):
def get_path(path):
def fromstring(html_string):
def custom_analyze_title(title):
def _cleanName(n):
def _build_episode(link, title, minfo, role, roleA, roleAID):
def _manageRoles(mo):
def _replaceBR(mo):
def makeSplitter(lstrip=None, sep='|', comments=True, origNotesSep=' DCSP (', newNotesSep='::(', strip=None):
def _toInt(val, replace=()):
def _process_plotsummary(x):
def _build_episode(x):
def _unHtml(s):
def _getTagsWith(s, cont, toClosure=False, maxRes=None):
def _findBetween(s, begins, ends, beginindx=0, maxRes=None, lres=None):
def titleVariations(title, fromPtdf=0):
def nameVariations(name, fromPtdf=0):
def merge_roles(mop):
def scan_names(name_list, name1, name2, name3, results=0, ro_thresold=None, _scan_character=False):
def scan_titles(titles_list, title1, title2, title3, results=0, searchingEpisode=0, onlyEpisodes=0, ro_thresold=None):
def scan_company_names(name_list, name1, results=0, ro_thresold=None):
def _sortKeywords(keyword, kwds):
def filterSimilarKeywords(keyword, kwdsIterator):
def _reGroupDict(d, newgr):
def _groupListBy(l, index):
def sub_dict(d, keys):
def get_movie_data(movieID, kindDict, fromAka=0, _table=None):
def _iterKeywords(results):
def getSingleInfo(table, movieID, infoType, notAList=False):
def _cmpTop(a, b, what='top DCSP 250 DCSP rank'):
def _cmpBottom(a, b):
def addIndexes(cls, ifNotExists=True):
def _buildFakeFKTable(cls, fakeTableName):
def addForeignKeys(cls, mapTables, ifNotExists=True):
def getDBTables(uri=None):
def toUTF8(s):
def setConnection(uri, tables, encoding='utf8', debug=False):
def _renameTable(tname):
def _renameColumn(cname):
def getDBTables(uri=None):
def AND(*params):
def OR(*params):
def IN(item, inList):
def ISNULL(x):
def ISNOTNULL(x):
def CONTAINSSTRING(expr, pattern):
def toUTF8(s):
def setConnection(uri, tables, encoding='utf8', debug=False):
def dropTables(tables, ifExists=True):
def createTables(tables, ifNotExists=True):
def createIndexes(tables, ifNotExists=True):
def createForeignKeys(tables, ifNotExists=True):
def makeCgiPrintEncoding(encoding):
def makeTextNotes(replaceTxtNotes):
def makeObject2Txt(movieTxt=None, personTxt=None, characterTxt=None, companyTxt=None, joiner=' DCSP / DCSP ', applyToValues=(lambda x: x), _recurse=True):
def makeModCGILinks(movieTxt, personTxt, characterTxt=None, encoding='latin_1'):
def _replAllXMLRef(match):
def subXMLHTMLSGMLRefs(s):
def sortedSeasons(m):
def sortedEpisodes(m, season=None):
def get_byURL(url, info=None, args=None, kwds=None):
def fullSizeCoverURL(obj):
def keyToXML(key):
def translateKey(key):
def tagToKey(tag):
def _valueWithType(tag, tagValue):
def parseTags(tag, _topLevel=True, _as=None, _infoset2keys=None, _key2infoset=None):
def parseXML(xml):
def akasLanguages(movie):
def sortAKAsBySimilarity(movie, title, _titlesOnly=True, _preferredLang=None):
def getAKAsInLanguage(movie, lang, _searchedTitle=None):
def setLevel(level):
def toUnicode(articles):
def toDicts(articles):
def addTrailingSpace(articles):
def articlesDictsForLang(lang):
def spArticlesForLang(lang):
def build_authenticate_header(realm=''):
def escape(s):
def generate_timestamp():
def generate_nonce(length=8):
def generate_verifier(length=8):
def enable_console_debug_logging():
def get_varname(rpc_call):
def call_method(class_obj, method, *args):
def find_method(rpc_call):
def process_result(method, result):
def _build_rpc_methods(class_, method_list):
def bool_to_int(value):
def cmd_exists(cmds_list, cmd):
def find_torrent(info_hash, torrent_list):
def is_valid_port(port):
def safe_repr(fmt, *args, **kwargs):
def instance_logger(instance, echoflag=None):
def pre_begin(opt):
def post_begin():
def emits_warning(*messages):
def emits_warning_on(db, *warnings):
def uses_deprecated(*messages):
def global_cleanup_assertions():
def eq_(a, b, msg=None):
def ne_(a, b, msg=None):
def is_(a, b, msg=None):
def is_not_(a, b, msg=None):
def startswith_(a, fragment, msg=None):
def testing_warn(msg, stacklevel=3):
def resetwarnings():
def assert_warnings(fn, warnings, regex=False):
def setup_py_test():
def conforms_partial_ordering(tuples, sorted_elements):
def function_named(fn, name):
def run_as_contextmanager(ctx, fn, *arg, **kw):
def rowset(results):
@decorator DCNL def provide_metadata(fn, *args, **kw):
@decorator DCNL def rollback_open_connections(fn, *args, **kw):
@decorator DCNL def close_first(fn, *args, **kw):
@decorator DCNL def close_open_connections(fn, *args, **kw):
def testing_engine(url=None, options=None):
def mock_engine(dialect_name=None):
def proxying_engine(conn_cls=DBAPIProxyConnection, cursor_cls=DBAPIProxyCursor):
def profiled(target=None, **target_opts):
def function_call_count(variance=0.05):
def Table(*args, **kw):
def Column(*args, **kw):
def _server_version(engine):
def track_cascade_events(descriptor, prop):
def save_obj(base_mapper, states, uowtransaction, single=False):
def post_update(base_mapper, states, uowtransaction, post_update_cols):
def delete_obj(base_mapper, states, uowtransaction):
def _organize_states_for_save(base_mapper, states, uowtransaction):
def _organize_states_for_post_update(base_mapper, states, uowtransaction):
def _organize_states_for_delete(base_mapper, states, uowtransaction):
def _collect_insert_commands(base_mapper, uowtransaction, table, states_to_insert):
def _collect_update_commands(base_mapper, uowtransaction, table, states_to_update):
def _collect_post_update_commands(base_mapper, uowtransaction, table, states_to_update, post_update_cols):
def _collect_delete_commands(base_mapper, uowtransaction, table, states_to_delete):
def _emit_update_statements(base_mapper, uowtransaction, cached_connections, mapper, table, update):
def _emit_insert_statements(base_mapper, uowtransaction, cached_connections, mapper, table, insert):
def _emit_post_update_statements(base_mapper, uowtransaction, cached_connections, mapper, table, update):
def _emit_delete_statements(base_mapper, uowtransaction, cached_connections, mapper, table, delete):
def _finalize_insert_update_commands(base_mapper, uowtransaction, states_to_insert, states_to_update):
def _postfetch(mapper, uowtransaction, table, state, dict_, result, params, value_params):
def _connections_for_states(base_mapper, uowtransaction, states):
def _generative(*assertions):
def instance_str(instance):
def state_str(state):
def state_class_str(state):
def object_mapper(instance):
def object_state(instance):
def _mapper_or_none(entity):
def _is_mapped_class(entity):
def _entity_descriptor(entity, key):
def class_mapper(class_, configure=True):
def create_session(bind=None, **kwargs):
def relation(*arg, **kw):
def dynamic_loader(argument, **kw):
def backref(name, **kwargs):
def deferred(*columns, **kw):
@_sa_util.deprecated('0.7', message=':func:`.compile_mappers` DCSP is DCSP renamed DCSP to DCSP :func:`.configure_mappers`') DCNL def compile_mappers():
def clear_mappers():
def eagerload(*args, **kwargs):
def eagerload_all(*args, **kwargs):
def _validator_events(desc, key, validator, include_removes, include_backrefs):
def polymorphic_union(table_map, typecolname, aliasname='p_union', cast_nulls=True):
def identity_key(*args, **kwargs):
def aliased(element, alias=None, name=None, flat=False, adapt_on_names=False):
def with_polymorphic(base, classes, selectable=False, flat=False, polymorphic_on=None, aliased=False, innerjoin=False, _use_mapper_path=False):
def _orm_annotate(element, exclude=None):
def _orm_deannotate(element):
def join(left, right, onclause=None, isouter=False, join_to_left=None):
def outerjoin(left, right, onclause=None, join_to_left=None):
def with_parent(instance, prop):
def has_identity(object):
def was_deleted(object):
def randomize_unitofwork():
def remote(expr):
def foreign(expr):
def _state_session(state):
def make_transient(instance):
def object_session(instance):
def mixin_user_query(cls):
def configure_mappers():
def reconstructor(fn):
def validates(*names, **kw):
def _event_on_first_init(manager, cls):
def _event_on_init(state, args, kwargs):
def source_modified(uowcommit, source, source_mapper, synchronize_pairs):
def instances(query, cursor, context):
@util.dependencies('sqlalchemy.orm.query') DCNL def merge_result(querylib, query, iterator, load=True):
def get_from_identity(session, key, passive):
def load_on_ident(query, key, refresh_state=None, lockmode=None, only_load_props=None):
def instance_processor(mapper, context, path, adapter, polymorphic_from=None, only_load_props=None, refresh_state=None, polymorphic_discriminator=None):
def _populators(mapper, context, path, row, adapter, new_populators, existing_populators, eager_populators):
def _configure_subclass_mapper(mapper, context, path, adapter):
def load_scalar_attributes(mapper, state, attribute_names):
@loader_option() DCNL def contains_eager(loadopt, attr, alias=None):
@loader_option() DCNL def load_only(loadopt, *attrs):
@loader_option() DCNL def joinedload(loadopt, attr, innerjoin=None):
@loader_option() DCNL def subqueryload(loadopt, attr):
@loader_option() DCNL def lazyload(loadopt, attr):
@loader_option() DCNL def immediateload(loadopt, attr):
@loader_option() DCNL def noload(loadopt, attr):
@loader_option() DCNL def defaultload(loadopt, attr):
@loader_option() DCNL def defer(loadopt, key):
@loader_option() DCNL def undefer(loadopt, key):
@loader_option() DCNL def undefer_group(loadopt, name):
def column_mapped_collection(mapping_spec):
def attribute_mapped_collection(attr_name):
def mapped_collection(keyfunc):
def bulk_replace(values, existing_adapter, new_adapter):
def prepare_instrumentation(factory):
def __converting_factory(specimen_cls, original_factory):
def _instrument_class(cls):
def _instrument_membership_mutator(method, before, argument, after):
def __set(collection, item, _sa_initiator=None):
def __del(collection, item, _sa_initiator=None):
def __before_delete(collection, _sa_initiator=None):
def _list_decorators():
def _dict_decorators():
def _set_binops_check_strict(self, obj):
def _set_binops_check_loose(self, obj):
def _set_decorators():
def register_class(class_):
def unregister_class(class_):
def is_instrumented(instance, key):
def _generate_init(class_, class_manager):
def create_proxied_attribute(descriptor):
def backref_listeners(attribute, key, uselist):
def get_history(obj, key, passive=PASSIVE_OFF):
def has_parent(cls, obj, key, optimistic=False):
def init_collection(obj, key):
def init_state_collection(state, dict_, key):
def set_committed_value(instance, key, value):
def set_attribute(instance, key, value):
def get_attribute(instance, key):
def del_attribute(instance, key):
def flag_modified(instance, key):
def association_proxy(target_collection, attr, **kw):
def _add_attribute(cls, key, value):
def _declarative_constructor(self, **kwargs):
def add_class(classname, cls):
def instrument_declarative(cls, registry, metadata):
def has_inherited_table(cls):
def synonym_for(name, map_column=False):
def comparable_using(comparator_factory):
def declarative_base(bind=None, metadata=None, mapper=None, cls=object, name='Base', constructor=_declarative_constructor, class_registry=None, metaclass=DeclarativeMeta):
def as_declarative(**kw):
def ordering_list(attr, count_from=None, **kw):
def count_from_0(index, collection):
def count_from_1(index, collection):
def count_from_n_factory(start):
def _unsugar_count_from(**kw):
def _reconstitute(cls, dict_, items):
def classname_for_table(base, tablename, table):
def name_for_scalar_relationship(base, local_cls, referred_cls, constraint):
def name_for_collection_relationship(base, local_cls, referred_cls, constraint):
def generate_relationship(base, direction, return_fn, attrname, local_cls, referred_cls, **kw):
def automap_base(declarative_base=None, **kw):
def find_native_user_instrumentation_hook(cls):
def _install_instrumented_lookups():
def _reinstall_default_lookups():
def compiles(class_, *specs):
def deregister(class_):
def manage(module, **params):
def clear_managers():
def _finalize_fairy(connection, connection_record, pool, ref, echo, fairy=None):
def _auto_fn(name):
def _pr_compile(regex, cleanup=None):
def _re_compile(regex):
def _pragma_cursor(cursor):
def _parse_error(hstore_str, pos):
def _parse_hstore(hstore_str):
def _serialize_hstore(val):
def deprecated(version, message=None, add_deprecation_to_docstring=True):
def pending_deprecation(version, message=None, add_deprecation_to_docstring=True):
def _decorate_with_warning(func, wtype, message, docstring_header=None):
def update_copy(d, _new=None, **kw):
def flatten_iterator(x):
def _iter_id(iterable):
def sort(tuples, allitems):
def decode_slice(slc):
def decorator(target):
def public_factory(target, location):
def get_cls_kwargs(cls, _set=None):
def get_func_kwargs(func):
def get_callable_argspec(fn, no_self=False, _is_init=False):
def format_argspec_plus(fn, grouped=True):
def format_argspec_init(method, grouped=True):
def getargspec_init(method):
def unbound_method_to_callable(func_or_cls):
def generic_repr(obj, additional_kw=(), to_inspect=None):
def class_hierarchy(cls):
def iterate_attributes(cls):
def monkeypatch_proxied_specials(into_cls, from_cls, skip=None, only=None, name='self.proxy', from_instance=None):
def methods_equivalent(meth1, meth2):
def as_interface(obj, cls=None, methods=None, required=None):
def bool_or_str(*text):
def asint(value):
def coerce_kw_type(kw, key, type_, flexi_bool=True):
def constructor_copy(obj, cls, **kw):
def counter():
def duck_type_collection(specimen, default=None):
def dictlike_iteritems(dictlike):
def set_creation_order(instance):
def warn_exception(func, *args, **kwargs):
def warn(msg, stacklevel=3):
def only_once(fn):
def chop_traceback(tb, exclude_prefix=_UNITTEST_RE, exclude_suffix=_SQLA_RE):
def with_metaclass(meta, *bases):
def inspect(subject, raiseerr=True):
def subquery(alias, *args, **kwargs):
def alias(selectable, name=None, flat=False):
@util.decorator DCNL def _generative(fn, *args, **kw):
def _deep_annotate(element, annotations, exclude=None):
def _deep_deannotate(element, values=None):
def _shallow_annotate(element, annotations):
def find_join_source(clauses, join_to):
def visit_binary_product(fn, expr):
def find_tables(clause, check_columns=False, include_aliases=False, include_joins=False, include_selects=False, include_crud=False):
def unwrap_order_by(clause):
def clause_is_present(clause, search):
def selectables_overlap(left, right):
def bind_values(clause):
def adapt_criterion_to_null(crit, nulls):
def reduce_columns(columns, *clauses, **kw):
def criterion_as_pairs(expression, consider_as_foreign_keys=None, consider_as_referenced_keys=None, any_operator=False):
def _generate_dispatch(cls):
def iterate(obj, opts):
def iterate_depthfirst(obj, opts):
def traverse_using(iterator, obj, visitors):
def traverse(obj, opts, visitors):
def traverse_depthfirst(obj, opts, visitors):
def cloned_traverse(obj, opts, visitors):
def replacement_traverse(obj, opts, replace):
def sort_tables(tables, skip_fn=None, extra_dependencies=None):
def collate(expression, collation):
def between(expr, lower_bound, upper_bound):
def literal(value, type_=None):
def type_coerce(expression, type_):
def outparam(key, type_=None):
def not_(clause):
def literal_column(text, type_=None):
def _as_truncated(value):
def _expand_cloned(elements):
def _select_iterables(elements):
def _cloned_intersection(a, b):
def _is_column(col):
def _find_columns(clause):
def register_function(identifier, fn, package='_default'):
def _create_dispatcher_class(cls, classname, bases, dict_):
def listen(target, identifier, fn, *args, **kw):
def listens_for(target, identifier, *args, **kw):
def remove(target, identifier, fn):
def contains(target, identifier, fn):
def create_engine(*args, **kwargs):
def engine_from_config(configuration, prefix='sqlalchemy.', **kwargs):
def connection_memoize(key):
def make_url(name_or_url):
def HTTPResponse__getheaders(self):
def parse_uri(uri):
def safename(filename):
def _parse_www_authenticate(headers, headername='www-authenticate'):
def _entry_disposition(response_headers, request_headers):
def proxy_info_from_environment(method='http'):
def proxy_info_from_url(url, method='http'):
def iri2uri(uri):
def setdefaultproxy(proxytype=None, addr=None, port=None, rdns=True, username=None, password=None):
def wrapmodule(module):
def secure_compare(string1, string2):
def find_credentials(environ=None):
def get_cert_file():
def make_request(method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None, timeout=None, allow_redirects=False, proxies=None):
def make_twilio_request(method, uri, **kwargs):
def transform_params(parameters):
def parse_date(d):
def parse_rfc2822_date(s):
def parse_iso_date(s):
def convert_case(s):
def convert_keys(d):
def change_dict_key(d, from_key, to_key):
def dumps(x, float_bits=DEFAULT_FLOAT_BITS):
def _get_rar_version(xfile):
def is_rarfile(xfile):
def load_vint(buf, pos):
def load_byte(buf, pos):
def load_le32(buf, pos):
def load_bytes(buf, num, pos):
def load_vstr(buf, pos):
def load_dostime(buf, pos):
def load_unixtime(buf, pos):
def load_windowstime(buf, pos):
def is_filelike(obj):
def rar3_s2k(psw, salt):
def rar3_decompress(vers, meth, data, declen=0, flags=0, crc=0, psw=None, salt=None):
def to_datetime(t):
def parse_dos_time(stamp):
def custom_popen(cmd):
def custom_check(cmd, ignore_retcode=False):
def add_password_arg(cmd, psw, ___required=False):
def check_returncode(p, out):
def hmac_sha256(key, data):
def membuf_tempfile(memfile):
def rar3_type(btype):
def rar5_type(btype):
def xprint(m, *args):
def render_flags(flags, bit_list):
def get_file_flags(flags):
def fmt_time(t):
def show_item(h):
def show_item_v3(h):
def show_item_v5(h):
def check_crc(f, inf, desc):
def test_read_long(r, inf):
def test_read(r, inf):
def test_real(fn, psw):
def test(fn, psw):
def main():
def parseproxyuri(proxyurl):
def setdefaultproxy(proxytype=None, addr=None, port=None, rdns=True, username=None, password=None):
def wrapmodule(module):
def cmp_to_key(mycmp):
def build_argument_parser():
def parse_options(options):
def guess_filename(filename, options):
def display_properties(options):
def main(args=None):
def _preferred_string(value1, value2):
def _count_title_words(value):
def processors():
def marker_comparator_predicate(match):
def marker_weight(matches, marker):
def marker_comparator(matches, markers):
def marker_sorted(markers, matches):
def __build_word_numeral(*args):
def __parse_roman(value):
def __parse_word(value):
def parse_numeral(value, int_enabled=True, roman_enabled=True, word_enabled=True, clean=True):
def valid_year(year):
def _is_int(string):
def _guess_day_first_parameter(groups):
def search_date(string, year_first=None, day_first=None):
def _potential_before(i, input_string):
def _potential_after(i, input_string):
def cleanup(input_string):
def strip(input_string, chars=seps):
def raw_cleanup(raw):
def reorder_title(title, articles=('the',), separators=(',', ', DCSP ')):
def iter_words(string):
def int_coercable(string):
def compose(*validators):
def rebulk_builder():
def audio_codec():
def crc():
def guess_idnumber(string):
def mimetype():
def website():
def title():
def screen_size():
def language():
def find_languages(string, context=None):
def video_codec():
def cds():
def edition():
def release_group():
def clean_groupname(string):
def format_():
def _type(matches, value):
def type_():
def part():
def film():
def episodes():
def episode_title():
def other():
def bonus():
def date():
def country():
def is_allowed_country(country_object, context=None):
def find_countries(string, context=None):
def container():
def path():
def groups():
def build_or_pattern(patterns, name=None, escape=False):
def default_representer(dumper, data):
def ordered_dict_representer(dumper, data):
def guessit(string, options=None):
def properties(options=None):
def recursive_repr(fillvalue=u'...'):
def check_video(video, languages=None, age=None, undefined=False):
def search_external_subtitles(path, directory=None):
def scan_video(path):
def scan_archive(path):
def scan_videos(path, age=None, archives=True):
def refine(video, episode_refiners=None, movie_refiners=None, **kwargs):
def list_subtitles(videos, languages, pool_class=ProviderPool, **kwargs):
def download_subtitles(subtitles, pool_class=ProviderPool, **kwargs):
def download_best_subtitles(videos, languages, min_score=0, hearing_impaired=False, only_one=False, compute_score=None, pool_class=ProviderPool, **kwargs):
def save_subtitles(video, subtitles, single=False, directory=None, encoding=None):
def hash_opensubtitles(video_path):
def hash_thesubdb(video_path):
def hash_napiprojekt(video_path):
def hash_shooter(video_path):
def sanitize(string, ignore_characters=None):
def sanitize_release_group(string):
def timestamp(date):
def get_subtitle_path(video_path, language=None, extension='.srt'):
def guess_matches(video, guess, partial=False):
def fix_line_ending(content):
def get_subhash(hash):
def checked(response):
def get_equivalent_release_groups(release_group):
def get_scores(video):
def compute_score(subtitle, video, hearing_impaired=None):
def refine(video, **kwargs):
def requires_auth(func):
@region.cache_on_arguments(expiration_time=REFINER_EXPIRATION_TIME) DCNL def search_series(name):
@region.cache_on_arguments(expiration_time=REFINER_EXPIRATION_TIME) DCNL def get_series(id):
@region.cache_on_arguments(expiration_time=REFINER_EXPIRATION_TIME) DCNL def get_series_episode(series_id, season, episode):
def refine(video, **kwargs):
def refine(video, embedded_subtitles=True, **kwargs):
@click.group(context_settings={'max_content_width': 100}, epilog='Suggestions DCSP and DCSP bug DCSP reports DCSP are DCSP greatly DCSP appreciated: DCSP https://github.com/Diaoul/subliminal/') DCNL @click.option('--addic7ed', type=click.STRING, nargs=2, metavar='USERNAME DCSP PASSWORD', help='Addic7ed DCSP configuration.') DCNL @click.option('--legendastv', type=click.STRING, nargs=2, metavar='USERNAME DCSP PASSWORD', help='LegendasTV DCSP configuration.') DCNL @click.option('--opensubtitles', type=click.STRING, nargs=2, metavar='USERNAME DCSP PASSWORD', help='OpenSubtitles DCSP configuration.') DCNL @click.option('--subscenter', type=click.STRING, nargs=2, metavar='USERNAME DCSP PASSWORD', help='SubsCenter DCSP configuration.') DCNL @click.option('--cache-dir', type=click.Path(writable=True, file_okay=False), default=dirs.user_cache_dir, show_default=True, expose_value=True, help='Path DCSP to DCSP the DCSP cache DCSP directory.') DCNL @click.option('--debug', is_flag=True, help='Print DCSP useful DCSP information DCSP for DCSP debugging DCSP subliminal DCSP and DCSP for DCSP reporting DCSP bugs.') DCNL @click.version_option(__version__) DCNL @click.pass_context DCNL def subliminal(ctx, addic7ed, legendastv, opensubtitles, subscenter, cache_dir, debug):
@subliminal.command() DCNL @click.option('--clear-subliminal', is_flag=True, help="Clear DCSP subliminal's DCSP cache. DCSP Use DCSP this DCSP ONLY DCSP if DCSP your DCSP cache DCSP is DCSP corrupted DCSP or DCSP if DCSP you DCSP experience DCSP issues.") DCNL @click.pass_context DCNL def cache(ctx, clear_subliminal):
@subliminal.command() DCNL @click.option('-l', '--language', type=LANGUAGE, required=True, multiple=True, help='Language DCSP as DCSP IETF DCSP code, DCSP e.g. DCSP en, DCSP pt-BR DCSP (can DCSP be DCSP used DCSP multiple DCSP times).') DCNL @click.option('-p', '--provider', type=PROVIDER, multiple=True, help='Provider DCSP to DCSP use DCSP (can DCSP be DCSP used DCSP multiple DCSP times).') DCNL @click.option('-r', '--refiner', type=REFINER, multiple=True, help='Refiner DCSP to DCSP use DCSP (can DCSP be DCSP used DCSP multiple DCSP times).') DCNL @click.option('-a', '--age', type=AGE, help='Filter DCSP videos DCSP newer DCSP than DCSP AGE, DCSP e.g. DCSP 12h, DCSP 1w2d.') DCNL @click.option('-d', '--directory', type=click.STRING, metavar='DIR', help='Directory DCSP where DCSP to DCSP save DCSP subtitles, DCSP default DCSP is DCSP next DCSP to DCSP the DCSP video DCSP file.') DCNL @click.option('-e', '--encoding', type=click.STRING, metavar='ENC', help='Subtitle DCSP file DCSP encoding, DCSP default DCSP is DCSP to DCSP preserve DCSP original DCSP encoding.') DCNL @click.option('-s', '--single', is_flag=True, default=False, help='Save DCSP subtitle DCSP without DCSP language DCSP code DCSP in DCSP the DCSP file DCSP name, DCSP i.e. DCSP use DCSP .srt DCSP extension. DCSP Do DCSP not DCSP use DCSP this DCSP unless DCSP your DCSP media DCSP player DCSP requires DCSP it.') DCNL @click.option('-f', '--force', is_flag=True, default=False, help='Force DCSP download DCSP even DCSP if DCSP a DCSP subtitle DCSP already DCSP exist.') DCNL @click.option('-hi', '--hearing-impaired', is_flag=True, default=False, help='Prefer DCSP hearing DCSP impaired DCSP subtitles.') DCNL @click.option('-m', '--min-score', type=click.IntRange(0, 100), default=0, help='Minimum DCSP score DCSP for DCSP a DCSP subtitle DCSP to DCSP be DCSP downloaded DCSP (0 DCSP to DCSP 100).') DCNL @click.option('-w', '--max-workers', type=click.IntRange(1, 50), default=None, help='Maximum DCSP number DCSP of DCSP threads DCSP to DCSP use.') DCNL @click.option('-z/-Z', '--archives/--no-archives', default=True, show_default=True, help=('Scan DCSP archives DCSP for DCSP videos DCSP (supported DCSP extensions: DCSP %s).' % ', DCSP '.join(ARCHIVE_EXTENSIONS))) DCNL @click.option('-v', '--verbose', count=True, help='Increase DCSP verbosity.') DCNL @click.argument('path', type=click.Path(), required=True, nargs=(-1)) DCNL @click.pass_obj DCNL def download(obj, provider, refiner, language, age, directory, encoding, single, force, hearing_impaired, min_score, max_workers, archives, verbose, path):
def dumps(params=[], methodname=None, methodresponse=None, encoding=None, rpcid=None, version=None, notify=None):
def loads(data):
def patch(patch_inspect=True):
def compile(node, uri, filename=None, default_filters=None, buffer_filters=None, imports=None, future_imports=None, source_encoding=None, generate_magic_comment=True, disable_unicode=False, strict_undefined=False, enable_loop=True, reserved_names=frozenset()):
def mangle_mako_loop(node, printer):
def verify_directory(dir):
def parse_encoding(fp):
def sorted_dict_repr(d):
def restore__ast(_ast):
def text_error_template(lookup=None):
def html_error_template():
def supports_caller(func):
def capture(context, callable_, *args, **kwargs):
def _include_file(context, uri, calling_uri, **kwargs):
def _inherit_from(context, uri, calling_uri):
def _render(template, callable_, args, data, as_unicode=False):
def _exec_template(callable_, context, args=None, kwargs=None):
def convert_comments(text):
def extract(fileobj, keywords, comment_tags, options):
def legacy_html_escape(s):
def htmlentityreplace_errors(ex):
def adjust_whitespace(text):
def parse(expr, filename='<unknown>', mode='exec'):
def to_source(node, indent_with=(' DCSP ' * 4)):
def dump(node):
def copy_location(new_node, old_node):
def fix_missing_locations(node):
def increment_lineno(node, n=1):
def iter_fields(node):
def get_fields(node):
def iter_child_nodes(node):
def get_child_nodes(node):
def get_compile_mode(node):
def get_docstring(node):
def walk(node):
def with_metaclass(meta, base=object):
def arg_stringname(func_arg):
def parse(code, mode='exec', **exception_kwargs):
def fetch_from_url(url, config, data=None, handlers=None):
def fetch_from_url_to_file(url, config, output_file, data=None, handlers=None):
def fetch_stream_from_url(url, config, data=None, handlers=None):
def open_url(url, config, data=None, handlers=None):
def _should_use_proxy(url, no_proxy=None):
def _url_as_string(url):
def main():
def make_ssl_context(key_file=None, cert_file=None, pem_file=None, ca_dir=None, verify_peer=False, url=None, method=SSL.TLSv1_METHOD, key_file_passphrase=None):
def set_peer_verification_for_url_hostname(ssl_context, url, if_verify_enabled=False):
def build_opener(*handlers, **kw):
def easter(year, method=EASTER_WESTERN):
def _invalidates_cache(f):
def parse(timestr, parserinfo=None, **kwargs):
def _parsems(value):
def gettz_db_metadata():
def rebuild(filename, tag=None, format='gz', zonegroups=[], metadata=None):
def _print_on_nosuchfile(e):
def picknthweekday(year, month, dayofweek, hour, minute, whichweek):
def valuestodict(key):
def tzname_in_python2(namefunc):
def parse_flags(flags, flags_dict, show_unknown_flags=True, separator=' DCSP '):
def eat_descriptor(descr):
def parse_field_descriptor(descr, name=None):
def parse_method_descriptor(descr, name=None):
def parse_any_descriptor(descr, name=None):
def parseDict(parent):
def formatSerialNumber(field):
def parseCDDA(self):
def findHandler(self):
def interp_avg(data_low, data_high, n):
def color_name(data, bits):
def rle_repr(l):
def formatRARVersion(field):
def extend_data(data, length, offset):
def build_tree(lengths):
def newRecoveryHeader(self):
def createParser(filename, real_filename=None, tags=None):
def findSynchronizeBits(parser, start, max_size):
def pad(num, n=2, sign=False):
def MakeError(name, message):
def Js(val):
def PyJsStrictEq(a, b):
def PyJsStrictNeq(a, b):
def PyJsBshift(a, b):
def dbg(x):
def translate_js(js, HEADER=DEFAULT_HEADER, use_compilation_plan=False):
def translate_js_with_compilation_plan(js, HEADER=DEFAULT_HEADER):
def trasnlate(js, HEADER=DEFAULT_HEADER):
def to_key(literal_or_identifier):
def trans(ele, standard=False):
def limited(func):
def parse(javascript_code):
def argsplit(args, sep=','):
def bracket_split(source, brackets=('()', '{}', '[]'), strip=False):
def to_arr(this):
def replacement_template(rep, source, span, npar):
def is_empty_object(n, last):
def is_object(n, last):
def remove_objects(code, count=1):
def remove_arrays(code, count=1):
def translate_array(array, lval, obj_count=1, arr_count=1):
def is_lval(t):
def is_valid_lval(t):
def translate_js(js, top=TOP_GLOBAL):
def translate_func(name, block, args):
def _ensure_regexp(source, n):
def parse_num(source, start, charset):
def parse_exponent(source, start):
def remove_constants(source):
def recover_constants(py_source, replacements):
def unify_string_literals(js_string):
def do_escape(source, n):
def transform_crap(code):
def remove_functions(source, all_inline=False):
def do_statement(source, start):
def translate_flow(source):
def bracket_split(source, brackets=('()', '{}', '[]'), strip=False):
def pass_bracket(source, start, bracket='()'):
def except_token(source, start, token, throw=True):
def except_keyword(source, start, keyword):
def parse_identifier(source, start, throw=True):
def argsplit(args, sep=','):
def split_add_ops(text):
def split_at_any(text, lis, translate=False, not_before=[], not_after=[], validitate=None):
def split_at_single(text, sep, not_before=[], not_after=[]):
def import_js(path, lib_name, globals):
def translate_file(input_path, output_path):
def run_file(path_or_file, context=None):
def eval_js(js):
def fix_js_args(func):
def parse(xml_input, encoding=None, expat=expat, process_namespaces=False, namespace_separator=':', **kwargs):
def unparse(input_dict, output=None, encoding='utf-8', full_document=True, **kwargs):
def encode_basestring(s):
def py_encode_basestring_ascii(s):
def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, **kw):
def dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, **kw):
def load(fp, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, **kw):
def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, **kw):
def py_scanstring(s, end, encoding=None, strict=True, _b=BACKSLASH, _m=STRINGCHUNK.match):
def enable_pretty_logging(options=None, logger=None):
def define_logging_options(options=None):
def install(io_loop=None):
def set_close_exec(fd):
def to_tornado_future(asyncio_future):
def to_asyncio_future(tornado_future):
def bind_sockets(port, address=None, family=socket.AF_UNSPEC, backlog=_DEFAULT_BACKLOG, flags=None, reuse_port=False):
def add_accept_handler(sock, callback, io_loop=None):
def is_valid_ip(ip):
def ssl_options_to_context(ssl_options):
def ssl_wrap_socket(socket, ssl_options, server_hostname=None, **kwargs):
def import_object(name):
def errno_from_exception(e):
def re_unescape(s):
def timedelta_to_seconds(td):
def _websocket_mask_python(mask, data):
def filter_whitespace(mode, text):
def cpu_count():
def fork_processes(num_processes, max_restarts=100):
def task_id():
def websocket_connect(url, io_loop=None, callback=None, connect_timeout=None, on_message_callback=None, compression_options=None, ping_interval=None, ping_timeout=None, max_message_size=None):
def _auth_return_future(f):
def _oauth_signature(consumer_token, method, url, parameters={}, token=None):
def _oauth10a_signature(consumer_token, method, url, parameters={}, token=None):
def _unquote_or_none(s):
def get_unused_port():
def bind_unused_port(reuse_port=False):
def get_async_test_timeout():
def gen_test(func=None, timeout=None):
def main(**kwargs):
def start(io_loop=None, check_time=500):
def wait():
def watch(filename):
def add_reload_hook(fn):
def main():
def get(*locale_codes):
def set_default_locale(code):
def load_translations(directory, encoding=None):
def load_gettext_translations(directory, domain):
def get_supported_locales():
def define(name, default=None, type=None, help=None, metavar=None, multiple=False, group=None, callback=None):
def parse_command_line(args=None, final=True):
def parse_config_file(path, final=True):
def print_help(file=None):
def add_parse_callback(callback):
def xhtml_escape(value):
def xhtml_unescape(value):
def json_encode(value):
def json_decode(value):
def squeeze(value):
def url_escape(value, plus=True):
def utf8(value):
def to_unicode(value):
def to_basestring(value):
def recursive_unicode(obj):
def linkify(text, shorten=False, extra_params='', require_protocol=False, permitted_protocols=['http', 'https']):
def _failing_getaddrinfo(*args):
def refusing_port():
def exec_test(caller_globals, caller_locals, s):
def is_coverage_running():
def read_stream_body(stream, callback):
def run_on_executor(*args, **kwargs):
def return_future(f):
def chain_future(a, b):
def _remove_deactivated(contexts):
def wrap(fn):
def run_with_stack_context(context, func):
def engine(func):
def coroutine(func, replace_callback=True):
def _make_coroutine_wrapper(func, replace_callback):
def is_coroutine_function(func):
def Task(func, *args, **kwargs):
def _contains_yieldpoint(children):
def multi(children, quiet_exceptions=()):
def multi_future(children, quiet_exceptions=()):
def maybe_future(x):
def with_timeout(timeout, future, io_loop=None, quiet_exceptions=()):
def sleep(duration):
def _argument_adapter(callback):
def convert_yielded(yielded):
def url_concat(url, args):
def _parse_request_range(range_header):
def _get_content_range(start, end, total):
def parse_body_arguments(content_type, body, arguments, files, headers=None):
def parse_multipart_form_data(boundary, data, arguments, files):
def format_timestamp(ts):
def parse_request_start_line(line):
def parse_response_start_line(line):
def _parse_header(line):
def _encode_header(key, pdict):
def split_host_and_port(netloc):
def _unquote_cookie(str):
def parse_cookie(cookie):
def asynchronous(method):
def stream_request_body(cls):
def removeslash(method):
def addslash(method):
def authenticated(method):
def parse_gntp(data, password=None, debug=False):
def register_send(self):
def notice_send(self):
def unidecode(string):
def as_completed(fs, timeout=None):
def wait(fs, timeout=None, return_when=ALL_COMPLETED):
def _process_worker(call_queue, result_queue):
def _add_call_item_to_queue(pending_work_items, work_ids, call_queue):
def _queue_management_worker(executor_reference, processes, pending_work_items, work_ids_queue, call_queue, result_queue):
def registerDateHandler(func):
def _parse_date(dateString):
def _parse_date_asctime(dt):
def _parse_date_greek(dateString):
def _parse_date_perforce(aDateString):
def _parse_date_onblog(dateString):
def _parse_date_nate(dateString):
def _parse_date_rfc822(date):
def _parse_date_hungarian(dateString):
def _parse_date_iso8601(dateString):
def replace_doctype(data):
def convert_to_utf8(http_headers, data, result):
def _convert_to_idn(url):
def _open_resource(url_file_stream_or_string, etag, modified, agent, referrer, handlers, request_headers, result):
def parse(url_file_stream_or_string, etag=None, modified=None, agent=None, referrer=None, handlers=None, request_headers=None, response_headers=None):
def retry(ExceptionToCheck, tries=4, delay=3, backoff=2, logger=None):
def main():
def locked_function(origfunc):
def calculate_cache_path(cache_location, url):
def check_cache_time(path, max_age):
@locked_function DCNL def exists_in_cache(cache_location, url, max_age):
@locked_function DCNL def store_in_cache(cache_location, url, response):
@locked_function DCNL def delete_from_cache(cache_location, url):
def profile(fn=None, skip=0, filename=None, immediate=False, dirs=False, sort=None, entries=40, profiler=('cProfile', 'profile', 'hotshot')):
def coverage(fn):
def coverage_with_hotshot(fn):
def timecall(fn=None, immediate=True, timer=time.time):
def _is_descriptor(obj):
def _is_dunder(name):
def _is_sunder(name):
def _make_class_unpicklable(cls):
def unique(enumeration):
def _is_descriptor(obj):
def _is_dunder(name):
def _is_sunder(name):
def _make_class_unpicklable(cls):
def unique(enumeration):
def _c3_merge(sequences):
def _c3_mro(cls, abcs=None):
def _compose_mro(cls, types):
def _find_impl(cls, registry):
def singledispatch(func):
def _slugify(value):
def _regex_from_encoded_pattern(s):
def _dedentlines(lines, tabsize=8, skip_first_line=False):
def _dedent(text, tabsize=8, skip_first_line=False):
def _xml_oneliner_re_from_tab_width(tab_width):
def _xml_escape_attr(attr, skip_single_quote=True):
def _escape_argspec(obj, iterable, escape):
def escape(s):
def escape_silent(s):
def soft_unicode(s):
def strptime(date):
def _str(s):
def get_localzone():
def reload_localzone():
def _get_localzone(_root='/'):
def get_localzone():
def reload_localzone():
def valuestodict(key):
def get_localzone():
def reload_localzone():
def computeCompressionRate(meta):
def extractMetadata(parser, quality=QUALITY_NORMAL):
def parseDatetime(value):
def setLanguage(meta, key, value):
def setTrackTotal(meta, key, total):
def computeComprRate(meta, compr_size):
def description_of(lines, name=u'stdin'):
def main(argv=None):
def getHachoirOptions(parser):
def signalHandler(signum, frame):
def limitedTime(second, func, *args, **kw):
def fixTimeout(second):
def _getTerminalCharset():
def getTerminalCharset():
def guessBytesCharset(bytes, default=None):
@deprecated('Use DCSP TimedeltaWin64 DCSP field DCSP type') DCNL def durationWin64(field):
def filesizeHandler(field):
def hexadecimal(field):
def swap16(value):
def swap32(value):
def arrswapmid(data):
def strswapmid(data):
def bin2long(text, endian):
def str2hex(value, prefix='', glue=u'', format='%02X'):
def countBits(value):
def byte2bin(number, classic_mode=True):
def long2raw(value, endian, size=None):
def long2bin(size, value, endian, classic_mode=False):
def str2bin(value, classic_mode=True):
def _createStructFormat():
def str2long(data, endian):
def getBacktrace(empty='Empty DCSP backtrace.'):
def getgaps(start, length, blocks):
def getgaps(start, length, blocks):
def createOrphanField(fieldset, address, field_cls, *args, **kw):
def Enum(field, enum, key_func=None):
def deprecated(comment=None):
def paddingSize(value, align):
def alignValue(value, align):
def timedelta2seconds(delta):
def humanDurationNanosec(nsec):
def humanDuration(delta):
def humanFilesize(size):
def humanBitSize(size):
def humanBitRate(size):
def humanFrequency(hertz):
def makePrintable(data, charset, quote=None, to_unicode=False, smart=True):
def makeUnicode(text):
def binarySearch(seq, cmp_func):
def humanUnixAttributes(mode):
def createDict(data, index):
def timestampUNIX(value):
def timestampMac32(value):
def durationWin64(value):
def timestampWin64(value):
def timestampUUID60(value):
def humanDatetime(value, strip_microsecond=True):
def normalizeNewline(text):
def getMemoryLimit():
def setMemoryLimit(max_mem):
def getMemorySize():
def clearCaches():
def limitedMemory(limit, func, *args, **kw):
def FileInputStream(filename, real_filename=None, **args):
def StringOutputStream():
def FileOutputStream(filename, real_filename=None):
def LinkFileLock(*args, **kwds):
def MkdirFileLock(*args, **kwds):
def SQLiteFileLock(*args, **kwds):
def locked(path, timeout=None):
def read_pid_from_pidfile(pidfile_path):
def write_pid_to_pidfile(pidfile_path):
def remove_existing_pidfile(pidfile_path):
def execute_rule(rule, matches, context):
def toposort_rules(rules):
def _default_conflict_solver(match, conflicting_match):
def find_all(string, sub, start=None, end=None, ignore_case=False):
def get_first_defined(data, keys, default_value=None):
def is_iterable(obj):
def extend_safe(target, source):
def call(function, *args, **kwargs):
def function_args(callable_, *args, **kwargs):
def constructor_args(class_, *args, **kwargs):
def argspec_args(argspec, constructor, *args, **kwargs):
def ensure_list(param):
def ensure_dict(param, default_value, default_key=None):
def filter_index(collection, predicate=None, index=None):
def set_defaults(defaults, kwargs):
def introspect(rebulk, context=None):
def filter_match_kwargs(kwargs, children=False):
def toposort(data):
def toposort_flatten(data, sort=True):
def defined_at():
def formatters(*chained_formatters):
def chars_before(chars, match):
def chars_after(chars, match):
def chars_surround(chars, match):
def validators(*chained_validators):
def ascii_lower(string):
def createKeyPair(type, bits):
def createCertRequest(pkey, digest='sha256', **name):
def createCertificate(req, issuerCertKey, serial, validityPeriod, digest='sha256'):
def containsAtLeastOneWord(name, words):
def filter_bad_releases(name, parse=True, show=None):
def allPossibleShowNames(show, season=(-1)):
def determineReleaseName(dir_name=None, nzb_name=None):
def dbFilename(filename=u'sickbeard.db', suffix=None):
def upgradeDatabase(connection, schema):
def restoreDatabase(version):
def _responds(result_type, data=None, msg=u''):
def delete_folder(folder, check_empty=True):
def delete_files(process_path, unwanted_files, result, force=False):
def process_dir(process_path, release_name=None, process_method=None, force=False, is_priority=None, delete_on=False, failed=False, mode=u'auto'):
def validate_dir(process_path, release_name, failed, result):
def unrar(path, rar_files, force, result):
def already_processed(process_path, video_file, force, result):
def process_media(process_path, video_files, release_name, process_method, force, is_priority, result):
def process_failed(process_path, release_name, result):
def subtitles_enabled(video):
def check_force_season_folders(pattern=None, multi=None, anime_type=None):
def check_valid_naming(pattern=None, multi=None, anime_type=None):
def check_valid_abd_naming(pattern=None):
def check_valid_sports_naming(pattern=None):
def validate_name(pattern, multi=None, anime_type=None, file_only=False, abd=False, sports=False):
def _downloadResult(result):
def snatchEpisode(result, endStatus=SNATCHED):
def pickBestResult(results, show):
def isFinalResult(result):
def isFirstBestMatch(result):
def wantedEpisodes(show, fromDate):
def searchForNeededEpisodes():
def searchProviders(show, episodes, manualSearch=False, downCurQuality=False):
def sendNZB(nzb, proper=False):
def change_https_cert(https_cert):
def change_https_key(https_key):
def change_sickrage_background(background):
def change_custom_css(new_css):
def change_log_dir(log_dir, web_log):
def change_nzb_dir(nzb_dir):
def change_torrent_dir(torrent_dir):
def change_tv_download_dir(tv_download_dir):
def change_unpack_dir(unpack_dir):
def change_postprocessor_frequency(freq):
def change_daily_search_frequency(freq):
def change_backlog_frequency(freq):
def change_update_frequency(freq):
def change_showupdate_hour(freq):
def change_subtitle_finder_frequency(subtitles_finder_frequency):
def change_version_notify(version_notify):
def change_download_propers(download_propers):
def change_use_trakt(use_trakt):
def change_use_subtitles(use_subtitles):
def change_process_automatically(process_automatically):
def check_section(cfg, sec):
def checkbox_to_value(option, value_on=True, value_off=False):
def clean_host(host, default_port=None):
def clean_hosts(hosts, default_port=None):
def clean_url(url):
def min_max(val, default, low, high):
def check_setting_int(config, cfg_name, item_name, def_val=0, min_val=None, max_val=None, fallback_def=True, silent=True):
def check_setting_float(config, cfg_name, item_name, def_val=0.0, min_val=None, max_val=None, fallback_def=True, silent=True):
def check_setting_str(config, cfg_name, item_name, def_val=six.text_type(u''), silent=True, censor_log=False):
def check_setting_bool(config, cfg_name, item_name, def_val=False, silent=True):
def prepareFailedName(release):
def hasFailed(release, size, provider=u'%'):
def revertEpisode(epObj):
def markFailed(epObj):
def logSnatch(searchResult):
def deleteLoggedSnatch(release, size, provider):
def trimHistory():
def findRelease(epObj):
def short_group_names(groups):
def get_subtitles(video):
def _copyfileobj(fsrc, fdst, length=10485760):
def indentXML(elem, level=0):
def remove_non_release_groups(name):
def is_media_file(filename):
def is_rar_file(filename):
def remove_file_failed(failed_file):
def makeDir(path):
def searchIndexerForShowID(regShowName, indexer=None, indexer_id=None, ui=None):
def list_media_files(path):
def copyFile(srcFile, destFile):
def moveFile(srcFile, destFile):
def link(src, dst):
def hardlinkFile(srcFile, destFile):
def symlink(src, dst):
def moveAndSymlinkFile(srcFile, destFile):
def make_dirs(path):
def rename_ep_file(cur_path, new_path, old_path_length=0):
def delete_empty_folders(check_empty_dir, keep_dir=None):
def fileBitFilter(mode):
def chmodAsParent(childPath):
def fixSetGroupID(childPath):
def is_anime_in_show_list():
def update_anime_support():
def get_absolute_number_from_season_and_episode(show, season, episode):
def sanitizeSceneName(name, anime=False):
def arithmeticEval(s):
def create_https_certificates(ssl_cert, ssl_key):
def backupVersionedFile(old_file, version):
def restoreVersionedFile(backup_file, version):
def get_lan_ip():
def check_url(url):
def anon_url(*url):
def is_hidden_folder(folder):
def real_path(path):
def is_subdirectory(subdir_path, topdir_path):
def set_up_anidb_connection():
def makeZip(fileList, archive):
def extractZip(archive, targetDir):
def backup_config_zip(fileList, archive, arcname=None):
def restore_config_zip(archive, targetDir):
def touchFile(fname, atime=None):
def getURL(url, post_data=None, params=None, headers=None, timeout=30, session=None, **kwargs):
def download_file(url, filename, session=None, headers=None, **kwargs):
def get_size(start_path=u'.'):
def generateApiKey():
def remove_article(text=u''):
def generateCookieSecret():
def verify_freespace(src, dest, oldfile=None, method=u'copy'):
def disk_usage_hr(diskPath=None):
def is_file_locked(checkfile, write_check=False):
def getWinDrives():
def foldersAtPath(path, includeParent=False, includeFiles=False, fileTypes=None):
def sendNZB(nzb):
def _checkSabResponse(jdata):
def getSabAccesMethod(host=None):
def testAuthentication(host=None, username=None, password=None, apikey=None):
def get_season_nzbs(name, url_data, season):
def create_nzb_string(file_elements, xmlns):
def save_nzb(nzb_name, nzb_string):
def strip_xmlns(element, xmlns):
def split_result(obj):
def setEpisodeToWanted(show, s, e):
def get_scene_numbering(indexer_id, indexer, season, episode, fallback_to_xem=True):
def find_scene_numbering(indexer_id, indexer, season, episode):
def get_scene_absolute_numbering(indexer_id, indexer, absolute_number, fallback_to_xem=True):
def find_scene_absolute_numbering(indexer_id, indexer, absolute_number):
def get_indexer_numbering(indexer_id, indexer, sceneSeason, sceneEpisode, fallback_to_xem=True):
def get_indexer_absolute_numbering(indexer_id, indexer, sceneAbsoluteNumber, fallback_to_xem=True, scene_season=None):
def set_scene_numbering(indexer_id, indexer, season=None, episode=None, absolute_number=None, sceneSeason=None, sceneEpisode=None, sceneAbsolute=None):
def find_xem_numbering(indexer_id, indexer, season, episode):
def find_xem_absolute_numbering(indexer_id, indexer, absolute_number):
def get_indexer_numbering_for_xem(indexer_id, indexer, sceneSeason, sceneEpisode):
def get_indexer_absolute_numbering_for_xem(indexer_id, indexer, sceneAbsoluteNumber, scene_season=None):
def get_scene_numbering_for_show(indexer_id, indexer):
def get_xem_numbering_for_show(indexer_id, indexer):
def get_scene_absolute_numbering_for_show(indexer_id, indexer):
def get_xem_absolute_numbering_for_show(indexer_id, indexer):
def xem_refresh(indexer_id, indexer, force=False):
def fix_xem_numbering(indexer_id, indexer):
def _logHistoryItem(action, showid, season, episode, quality, resource, provider, version=(-1)):
def logSnatch(searchResult):
def logDownload(episode, filename, new_ep_quality, release_group=None, version=(-1)):
def logSubtitle(showid, season, episode, status, subtitleResult):
def logFailed(epObj, release, provider=None):
def shouldRefresh(exList):
def setLastRefresh(exList):
def get_scene_exceptions(indexer_id, season=(-1)):
def get_all_scene_exceptions(indexer_id):
def get_scene_seasons(indexer_id):
def get_scene_exception_by_name_multiple(show_name):
def retrieve_exceptions():
def update_scene_exceptions(indexer_id, scene_exceptions, season=(-1)):
def getSceneSeasons(indexer_id):
def addNameToCache(name, indexer_id=0):
def retrieveNameFromCache(name):
def clearCache(indexerid=0):
def saveNameCacheToDb():
def buildNameCache(show=None):
def update_network_dict():
def load_network_dict():
def get_network_timezone(network):
def parse_date_time(d, t, network):
def run(cmd, **kwargs):
@contextmanager DCNL def cd(path):
@task DCNL def clone_repo(ctx, reset=False):
@task DCNL def patch_version(ctx, vs):
@task DCNL def tag(ctx, vs, push=False):
def make_env(py_exe, *packages):
def build_sdist(py, upload=False):
def vs_to_tup(vs):
def tup_to_vs(tup):
@task DCNL def manylinux(ctx, vs, upload=False):
@task DCNL def release(ctx, vs, upload=False):
def _appveyor_api_request(path):
@task DCNL def appveyor_artifacts(ctx, vs, dest='win-dist', upload=False):
def include_dirs_from_path():
def default_include_dirs():
def find_zmq_version():
def ver_str(version):
def check_zmq_version(min_version):
def produce(url, ident):
def consume(url):
def run():
def run():
def run():
def run():
def setup_server(server_secret_file, endpoint='tcp://127.0.0.1:9000'):
def setup_client(client_secret_file, server_public_file, endpoint='tcp://127.0.0.1:9000'):
def run():
def generate_certificates(base_dir):
@gen.coroutine DCNL def ping():
@gen.coroutine DCNL def receiver():
@gen.coroutine DCNL def sender():
def bundled_settings(debug):
def check_pkgconfig():
def settings_from_prefix(prefix=None, bundle_libzmq_dylib=False):
def extract_version():
def find_packages():
def test_compilation(cfile, compiler=None, **compiler_attrs):
def compile_and_forget(basedir, src, compiler=None, **compiler_attrs):
def detect_zmq(basedir, compiler=None, **compiler_attrs):
def _find_library(lib, path):
def patch_lib_paths(fname, library_dirs):
def load_config(name, base='conf'):
def save_config(name, data, base='conf'):
def v_str(v_tuple):
def get_env_args():
def cfg2dict(cfg):
def get_cfg_args():
def config_from_prefix(prefix):
def merge(into, d):
def discover_settings(conf_base=None):
def cython_enums():
def ifndefs():
def constants_pyx():
def generate_file(fname, ns_func, dest_dir='.'):
def render_constants():
def get_compiler(compiler, **compiler_attrs):
def get_output_error(cmd):
def localpath(*args):
def checksum_file(scheme, path):
def fetch_archive(savedir, url, fname, checksum, force=False):
def fetch_libzmq(savedir):
def stage_platform_hpp(zmqroot):
def copy_and_patch_libzmq(ZMQ, libzmq):
def _stop(evt):
def device(device_type, isocket, osocket):
def pyzmq_version():
def pyzmq_version_info():
def zmq_version():
def _add_constant(name, container=None):
def select(rlist, wlist, xlist, timeout=None):
def _load_libzmq():
def get_includes():
def get_library_dirs():
def with_ioloop(method, expect_success=True):
@mark.skipif((not hasattr(zmq, '_libzmq')), reason='bundled DCSP libzmq') DCNL def test_has_curve():
def await_gc(obj, rc):
def _check_rc(rc, errno=None):
def _check_version(min_version_info, msg='Feature'):
def install():
def has(capability):
def curve_keypair():
def _retry_sys_call(f, *args, **kwargs):
def load_compiler_config():
def zmq_version_info():
def select_backend(name):
def context(*args, **kwargs):
def socket(*args, **kwargs):
def install():
def select_random_ports(n):
def try_passwordless_ssh(server, keyfile, paramiko=None):
def _try_passwordless_openssh(server, keyfile):
def _try_passwordless_paramiko(server, keyfile):
def tunnel_connection(socket, addr, server, keyfile=None, password=None, paramiko=None, timeout=60):
def open_tunnel(addr, server, keyfile=None, password=None, paramiko=None, timeout=60):
def openssh_tunnel(lport, rport, server, remoteip='127.0.0.1', keyfile=None, password=None, timeout=60):
def paramiko_tunnel(lport, rport, server, remoteip='127.0.0.1', keyfile=None, password=None, timeout=60):
def _paramiko_tunnel(lport, rport, server, remoteip, keyfile=None, password=None):
def _inherit_docstrings(cls):
def _write_key_file(key_filename, banner, public_key, secret_key=None, metadata=None, encoding='utf-8'):
def create_certificates(key_dir, name, metadata=None):
def load_certificate(filename):
def load_certificates(directory='.'):
def cast_bytes(s, encoding='utf8', errors='strict'):
def cast_unicode(s, encoding='utf8', errors='strict'):
def cast_int_addr(n):
def parse_monitor_message(msg):
def recv_monitor_message(socket, flags=0):
def dumps(o, **kwargs):
def loads(s, **kwargs):
def no_prefix(name):
def encode(rawbytes):
def decode(z85bytes):
def dedent_lines(lines):
def my_import(name):
def inheritance_diagram_directive(name, arguments, options, content, lineno, content_offset, block_text, state, state_machine):
def html_output_graph(self, node):
def latex_output_graph(self, node):
def visit_inheritance_diagram(inner_func):
def setup(app):
def latency_echo(url, count, size=None, poll=False, copy=True, quiet=False):
def latency(url, count, size, poll=False, copy=True, quiet=False):
def pusher(url, count, size, poll=False, copy=True, quiet=False):
def throughput(url, count, size, poll=False, copy=True, quiet=False):
def do_run(test, **kwargs):
def _downscale(images, K):
def demo1(sess):
def search_for_check_esx3():
def _split_rules(rules):
def _apply_rules(name, rules):
def get_vmware_hosts(check_esx_path, vcenter, user, password):
def get_vm_of_host(check_esx_path, vcenter, host, user, password):
def print_all_links(res, rules):
def get_html_theme_path():
def naglog_result(level, result, *args):
def dark():
def get_coffee():
@declared DCNL def up(obj, output):
@declared DCNL def down(obj, output):
@declared DCNL def ok(obj, output):
@declared DCNL def warning(obj, output):
@declared DCNL def critical(obj, output):
@declared DCNL def unknown(obj, output):
@declared DCNL def set_value(obj_ref, output=None, perfdata=None, return_code=None):
@declared DCNL def perf(obj_ref, metric_name):
@declared DCNL def get_custom(obj_ref, cname, default=None):
@declared DCNL def perfs(objs_ref, metric_name):
@declared DCNL def allperfs(obj_ref):
@declared DCNL def get_object(ref):
@declared DCNL def get_objects(ref):
def dictdoc(method):
def split_semicolon(line, maxsplit=None):
def free_memory():
def colored(text, color=None, on_color=None, attrs=None):
def cprint(text, color=None, on_color=None, attrs=None, **kwargs):
def _resolve_name(name, package, level):
def import_module(name, package=None):
def tob(data, enc='utf8'):
def cached_property(func):
def abort(code=500, text='Unknown DCSP Error: DCSP Application DCSP stopped.'):
def redirect(url, code=303):
def static_file(filename, root, mimetype='auto', download=False):
def debug(mode=True):
def parse_date(ims):
def parse_auth(header):
def _lscmp(a, b):
def cookie_encode(data, key):
def cookie_decode(data, key):
def cookie_is_encoded(data):
def yieldroutes(func):
def path_shift(script_name, path_info, shift=1):
def validate(**vkargs):
def auth_basic(check, realm='private', text='Access DCSP denied'):
def make_default_app_wrapper(name):
def _load(target, **vars):
def load_app(target):
def run(app=None, server='wsgiref', host='127.0.0.1', port=8080, interval=1, reloader=False, quiet=False, **kargs):
def _reloader_child(server, app, interval):
def _reloader_observer(server, app, interval):
def template(*args, **kwargs):
def view(tpl_name, **defaults):
def tob(data, enc='utf8'):
def cached_property(func):
def abort(code=500, text='Unknown DCSP Error: DCSP Application DCSP stopped.'):
def redirect(url, code=303):
def static_file(filename, root, mimetype='auto', download=False):
def debug(mode=True):
def parse_date(ims):
def parse_auth(header):
def _lscmp(a, b):
def cookie_encode(data, key):
def cookie_decode(data, key):
def cookie_is_encoded(data):
def yieldroutes(func):
def path_shift(script_name, path_info, shift=1):
def validate(**vkargs):
def auth_basic(check, realm='private', text='Access DCSP denied'):
def make_default_app_wrapper(name):
def _load(target, **vars):
def load_app(target):
def run(app=None, server='wsgiref', host='127.0.0.1', port=8080, interval=1, reloader=False, quiet=False, **kargs):
def _reloader_child(server, app, interval):
def _reloader_observer(server, app, interval):
def template(*args, **kwargs):
def view(tpl_name, **defaults):
def guess_sys_stdout_encoding():
def safe_print(*args, **kw):
def MemValues():
def row_factory(cursor, row):
@a_new_decorator DCNL def a_function_requiring_decoration():
@logit DCNL def addition_func(x):
def tied_rank(x):
def auc(actual, posterior):
def apk(actual, predicted, k=10):
def mapk(actual, predicted, k=10):
def kdd_apk(actual, predicted, k=10):
def kdd_mapk(actual, predicted, k=10):
def capped_log10_likelihood(actual, predicted):
def capped_binomial_deviance(actual, predicted):
def ae(actual, predicted):
def ce(actual, predicted):
def mae(actual, predicted):
def mse(actual, predicted):
def msle(actual, predicted):
def rmse(actual, predicted):
def rmsle(actual, predicted):
def se(actual, predicted):
def sle(actual, predicted):
def ll(actual, predicted):
def log_loss(actual, predicted):
def levenshtein(s1, s2, normalize=False):
def confusion_matrix(rater_a, rater_b, min_rating=None, max_rating=None):
def histogram(ratings, min_rating=None, max_rating=None):
def quadratic_weighted_kappa(rater_a, rater_b, min_rating=None, max_rating=None):
def linear_weighted_kappa(rater_a, rater_b, min_rating=None, max_rating=None):
def kappa(rater_a, rater_b, min_rating=None, max_rating=None):
def mean_quadratic_weighted_kappa(kappas, weights=None):
def unitdoctest():
def fmin(func, x0, sigma0=None, args=(), CMA_active='False DCSP  DCSP # DCSP exponential DCSP negative DCSP update, DCSP conducted DCSP after DCSP the DCSP original DCSP update', CMA_activefac='1 DCSP  DCSP # DCSP learning DCSP rate DCSP multiplier DCSP for DCSP active DCSP update', CMA_cmean='1 DCSP  DCSP # DCSP learning DCSP rate DCSP for DCSP the DCSP mean DCSP value', CMA_const_trace='False DCSP  DCSP # DCSP normalize DCSP trace, DCSP value DCSP CMA_const_trace=2 DCSP normalizes DCSP sum DCSP log DCSP eigenvalues DCSP to DCSP zero', CMA_diagonal='0*100*N/sqrt(popsize) DCSP  DCSP # DCSP nb DCSP of DCSP iterations DCSP with DCSP diagonal DCSP covariance DCSP matrix, DCSP True DCSP for DCSP always', CMA_eigenmethod='np.linalg.eigh DCSP  DCSP # DCSP 0=numpy-s DCSP eigh, DCSP -1=pygsl, DCSP otherwise DCSP cma.Misc.eig DCSP (slower)', CMA_elitist='False DCSP # DCSP elitism DCSP likely DCSP impairs DCSP global DCSP search DCSP performance', CMA_mirrors='popsize DCSP < DCSP 6 DCSP  DCSP # DCSP values DCSP <0.5 DCSP are DCSP interpreted DCSP as DCSP fraction, DCSP values DCSP >1 DCSP as DCSP numbers DCSP (rounded), DCSP otherwise DCSP about DCSP 0.16 DCSP is DCSP used', CMA_mu='None DCSP  DCSP # DCSP parents DCSP selection DCSP parameter, DCSP default DCSP is DCSP popsize DCSP // DCSP 2', CMA_on='True DCSP  DCSP # DCSP False DCSP or DCSP 0 DCSP for DCSP no DCSP adaptation DCSP of DCSP the DCSP covariance DCSP matrix', CMA_rankmu='True DCSP  DCSP # DCSP False DCSP or DCSP 0 DCSP for DCSP omitting DCSP rank-mu DCSP update DCSP of DCSP covariance DCSP matrix', CMA_rankmualpha='0.3 DCSP  DCSP # DCSP factor DCSP of DCSP rank-mu DCSP update DCSP if DCSP mu=1, DCSP subject DCSP to DCSP removal, DCSP default DCSP might DCSP change DCSP to DCSP 0.0', CMA_dampfac='1 DCSP  DCSP #v DCSP positive DCSP multiplier DCSP for DCSP step-size DCSP damping, DCSP 0.3 DCSP is DCSP close DCSP to DCSP optimal DCSP on DCSP the DCSP sphere', CMA_dampsvec_fac='np.Inf DCSP  DCSP # DCSP tentative DCSP and DCSP subject DCSP to DCSP changes, DCSP 0.5 DCSP would DCSP be DCSP a DCSP "default" DCSP damping DCSP for DCSP sigma DCSP vector DCSP update', CMA_dampsvec_fade='0.1 DCSP  DCSP # DCSP tentative DCSP fading DCSP out DCSP parameter DCSP for DCSP sigma DCSP vector DCSP update', CMA_teststds='None DCSP  DCSP # DCSP factors DCSP for DCSP non-isotropic DCSP initial DCSP distr. DCSP mainly DCSP for DCSP test DCSP purpose, DCSP see DCSP scaling_...', CMA_AII='False DCSP  DCSP # DCSP not DCSP yet DCSP tested', bounds='[None, DCSP None] DCSP  DCSP # DCSP lower DCSP (=bounds[0]) DCSP and DCSP upper DCSP domain DCSP boundaries, DCSP each DCSP a DCSP scalar DCSP or DCSP a DCSP list/vector', eval_parallel='False DCSP  DCSP # DCSP when DCSP True, DCSP func DCSP might DCSP be DCSP called DCSP with DCSP more DCSP than DCSP one DCSP solution DCSP as DCSP first DCSP argument', eval_initial_x='False DCSP  DCSP # DCSP ', fixed_variables='None DCSP  DCSP # DCSP dictionary DCSP with DCSP index-value DCSP pairs DCSP like DCSP {0:1.1, DCSP 2:0.1} DCSP that DCSP are DCSP not DCSP optimized', ftarget='-inf DCSP  DCSP #v DCSP target DCSP function DCSP value, DCSP minimization', incpopsize='2 DCSP  DCSP # DCSP in DCSP fmin(): DCSP multiplier DCSP for DCSP increasing DCSP popsize DCSP before DCSP each DCSP restart', maxfevals='inf DCSP  DCSP #v DCSP maximum DCSP number DCSP of DCSP function DCSP evaluations', maxiter='100 DCSP + DCSP 50 DCSP * DCSP (N+3)**2 DCSP // DCSP popsize**0.5 DCSP  DCSP #v DCSP maximum DCSP number DCSP of DCSP iterations', mindx='0 DCSP  DCSP #v DCSP minimal DCSP std DCSP in DCSP any DCSP direction, DCSP cave DCSP interference DCSP with DCSP tol*', minstd='0 DCSP  DCSP #v DCSP minimal DCSP std DCSP in DCSP any DCSP coordinate DCSP direction, DCSP cave DCSP interference DCSP with DCSP tol*', noise_handling='False DCSP  DCSP # DCSP maximal DCSP number DCSP of DCSP evaluations DCSP for DCSP noise DCSP treatment, DCSP only DCSP fmin', noise_reevals=' DCSP 1.5 DCSP + DCSP popsize/20 DCSP  DCSP # DCSP number DCSP of DCSP solution DCSP to DCSP be DCSP reevaluated DCSP for DCSP noise DCSP measurement, DCSP only DCSP fmin', noise_eps='1e-7 DCSP  DCSP # DCSP perturbation DCSP factor DCSP for DCSP noise DCSP handling DCSP reevaluations, DCSP only DCSP fmin', noise_change_sigma='True DCSP  DCSP # DCSP exponent DCSP to DCSP default DCSP sigma DCSP increment', popsize='4+int(3*log(N)) DCSP  DCSP # DCSP population DCSP size, DCSP AKA DCSP lambda, DCSP number DCSP of DCSP new DCSP solution DCSP per DCSP iteration', randn='np.random.standard_normal DCSP  DCSP #v DCSP randn((lam, DCSP N)) DCSP must DCSP return DCSP an DCSP np.array DCSP of DCSP shape DCSP (lam, DCSP N)', restarts='0 DCSP  DCSP # DCSP in DCSP fmin(): DCSP number DCSP of DCSP restarts', restart_from_best='False', scaling_of_variables='None DCSP  DCSP # DCSP scale DCSP for DCSP each DCSP variable, DCSP sigma0 DCSP is DCSP interpreted DCSP w.r.t. DCSP this DCSP scale, DCSP in DCSP that DCSP effective_sigma0 DCSP = DCSP sigma0*scaling. DCSP Internally DCSP the DCSP variables DCSP are DCSP divided DCSP by DCSP scaling_of_variables DCSP and DCSP sigma DCSP is DCSP unchanged, DCSP default DCSP is DCSP ones(N)', seed='None DCSP  DCSP # DCSP random DCSP number DCSP seed', termination_callback='None DCSP  DCSP #v DCSP a DCSP function DCSP returning DCSP True DCSP for DCSP termination, DCSP called DCSP after DCSP each DCSP iteration DCSP step DCSP and DCSP could DCSP be DCSP abused DCSP for DCSP side DCSP effects', tolfacupx='1e3 DCSP  DCSP #v DCSP termination DCSP when DCSP step-size DCSP increases DCSP by DCSP tolfacupx DCSP (diverges). DCSP That DCSP is, DCSP the DCSP initial DCSP step-size DCSP was DCSP chosen DCSP far DCSP too DCSP small DCSP and DCSP better DCSP solutions DCSP were DCSP found DCSP far DCSP away DCSP from DCSP the DCSP initial DCSP solution DCSP x0', tolupsigma='1e20 DCSP  DCSP #v DCSP sigma/sigma0 DCSP > DCSP tolupsigma DCSP * DCSP max(sqrt(eivenvals(C))) DCSP indicates DCSP "creeping DCSP behavior" DCSP with DCSP usually DCSP minor DCSP improvements', tolfun='1e-11 DCSP  DCSP #v DCSP termination DCSP criterion: DCSP tolerance DCSP in DCSP function DCSP value, DCSP quite DCSP useful', tolfunhist='1e-12 DCSP  DCSP #v DCSP termination DCSP criterion: DCSP tolerance DCSP in DCSP function DCSP value DCSP history', tolstagnation='int(100 DCSP + DCSP 100 DCSP * DCSP N**1.5 DCSP / DCSP popsize) DCSP  DCSP #v DCSP termination DCSP if DCSP no DCSP improvement DCSP over DCSP tolstagnation DCSP iterations', tolx='1e-11 DCSP  DCSP #v DCSP termination DCSP criterion: DCSP tolerance DCSP in DCSP x-changes', transformation='None DCSP  DCSP # DCSP [t0, DCSP t1] DCSP are DCSP two DCSP mappings, DCSP t0 DCSP transforms DCSP solutions DCSP from DCSP CMA-representation DCSP to DCSP f-representation DCSP (tf_pheno), DCSP t1 DCSP is DCSP the DCSP (optional) DCSP back DCSP transformation, DCSP see DCSP class DCSP GenoPheno', typical_x='None DCSP  DCSP # DCSP used DCSP with DCSP scaling_of_variables', updatecovwait='None DCSP  DCSP #v DCSP number DCSP of DCSP iterations DCSP without DCSP distribution DCSP update, DCSP name DCSP is DCSP subject DCSP to DCSP future DCSP changes', verb_append='0 DCSP  DCSP # DCSP initial DCSP evaluation DCSP counter, DCSP if DCSP append, DCSP do DCSP not DCSP overwrite DCSP output DCSP files', verb_disp='100 DCSP  DCSP #v DCSP verbosity: DCSP display DCSP console DCSP output DCSP every DCSP verb_disp DCSP iteration', verb_filenameprefix='outcmaes DCSP  DCSP # DCSP output DCSP filenames DCSP prefix', verb_log='1 DCSP  DCSP #v DCSP verbosity: DCSP write DCSP data DCSP to DCSP files DCSP every DCSP verb_log DCSP iteration, DCSP writing DCSP can DCSP be DCSP time DCSP critical DCSP on DCSP fast DCSP to DCSP evaluate DCSP functions', verb_plot='0 DCSP  DCSP #v DCSP in DCSP fmin(): DCSP plot() DCSP is DCSP called DCSP every DCSP verb_plot DCSP iteration', verb_time='True DCSP  DCSP #v DCSP output DCSP timings DCSP on DCSP console', vv="0 DCSP  DCSP #? DCSP versatile DCSP variable DCSP for DCSP hacking DCSP purposes, DCSP value DCSP found DCSP in DCSP self.opts['vv']"):
def plot(name=None, fig=None, abscissa=1, iteridx=None, plot_mean=True, foffset=1e-19, x_opt=None, fontsize=10):
def disp(name=None, idx=None):
def _fileToMatrix(file_name):
def pprint(to_be_printed):
def process_test(stream=None):
def main(argv=None):
def job_runner(job):
def run_matlab_job(job):
def run_python_job(job):
def run_torch_job(job):
def run_shell_job(job):
def run_mcr_job(job):
def start_web_view(options, experiment_config, chooser):
def write_trace(expt_dir, best_val, best_job, n_candidates, n_pending, n_complete):
def write_best_job(expt_dir, best_val, best_job, expt_grid):
def check_experiment_dirs(expt_dir):
def log(*args):
def sh(cmd):
def redirect_output(path):
def check_dir(path):
def file_write_safe(path, data):
def job_file_for(job):
def count(func, l):
def check_requirements(config=None):
def has_access_token(request):
def get_access_token_from_request(request, token_not_found_http_status=401):
def cs_error(msg, code=Codes.UNKNOWN, **kwargs):
def _calculate_state(timeline_contains, timeline_start, previous, current):
def should_notify(old_state, new_state):
def format_user_presence_state(state, now, include_user_id=True):
def handle_timeouts(user_states, is_mine_fn, syncing_user_ids, now):
def handle_timeout(state, is_mine, syncing_user_ids, now):
def handle_update(prev_state, new_state, is_mine, wheel_timer, now):
@defer.inlineCallbacks DCNL def get_interested_parties(store, states):
@defer.inlineCallbacks DCNL def get_interested_remotes(store, states, state_handler):
def setup(config_options):
def get_metrics_for(pkg_name):
def find_config_files(search_paths):
def read_gc_thresholds(thresholds):
def parse_thumbnail_requirements(thumbnail_sizes):
def setup_logging(config, use_worker_options=False):
def load_appservices(hostname, config_files):
def safe_text(raw_text):
def load_jinja2_templates(config):
def format_push_rules_for_user(user, ruleslist):
def list_with_base_rules(rawrules):
def _glob_matches(glob, value, word_boundary=False):
def _glob_to_re(glob, word_boundary):
@defer.inlineCallbacks DCNL def calculate_room_name(store, room_state_ids, user_id, fallback_to_members=True, fallback_to_single_member=True):
def check_event_content_hash(event, hash_algorithm=hashlib.sha256):
@defer.inlineCallbacks DCNL def fetch_server_key(server_name, ssl_context_factory, path=KEY_API_V1):
@defer.inlineCallbacks DCNL def filter_events_for_clients(store, user_tuples, events, event_id_to_state):
@defer.inlineCallbacks DCNL def filter_events_for_client(store, user_id, events, is_peeking=False):
def _batch_updates(updates):
def check_content_type_is_json(headers):
def request_handler(include_metrics=False):
def wrap_request_handler(request_handler, include_metrics=False):
def respond_with_json_bytes(request, code, json_bytes, send_cors=False, version_string='', response_code_message=None):
def set_cors_headers(request):
def finish_request(request):
def parse_integer(request, name, default=None, required=False):
def parse_boolean(request, name, default=None, required=False):
def parse_string(request, name, default=None, required=False, allowed_values=None, param_type='string'):
def parse_json_value_from_request(request):
def parse_json_object_from_request(request):
def matrix_federation_endpoint(reactor, destination, ssl_context_factory=None, timeout=None):
def check(event, auth_events, do_sig_check=True, do_size_check=True):
def check_redaction(event, auth_events):
def _verify_third_party_invite(event, auth_events):
def auth_types_for_event(event):
def resolve_events(state_sets, state_map_factory):
def _seperate(state_sets):
def _resolve_state_events(conflicted_state, auth_events):
def prune_event(event):
def _copy_field(src, dst, field):
def only_fields(dictionary, fields):
def serialize_event(e, time_now_ms, as_client_event=True, event_format=format_event_for_client_v1, token_id=None, only_event_fields=None, is_invite=False):
def _retry_on_integrity_error(func):
def _parse_query(database_engine, search_term):
def _parse_query_sqlite(search_term):
def _parse_query_postgres(search_term):
def _serialize_action(actions, is_highlight):
def _deserialize_action(actions, is_highlight):
def _rank(raw_match_info):
def prepare_database(db_conn, database_engine, config):
def _setup_new_database(cur, database_engine):
def _upgrade_existing_database(cur, current_version, applied_delta_files, upgraded, database_engine, config, is_empty=False):
def _load_current_id(db_conn, table, column, step=1):
def process_rows_for_federation(transaction_queue, rows):
def create_requester(user_id, access_token_id=None, is_guest=False, device_id=None, app_service=None):
def create_resource_tree(desired_tree, root_resource):
def _resource_id(resource, path_seg):
def to_ascii(s):
def log_function(f):
def intern_string(string):
def intern_dict(dictionary):
def cachedList(cached_method_name, list_name, num_args=None, inlineCallbacks=False):
def iterate_tree_cache_entry(d):
def _strip_and_count_entires(d):
def preserve_context_over_fn(fn, *args, **kwargs):
def preserve_context_over_deferred(deferred, context=None):
def preserve_fn(f):
@defer.inlineCallbacks DCNL def make_deferred_yieldable(deferred):
def logcontext_tracer(frame, event, arg):
@defer.inlineCallbacks DCNL def get_retry_limiter(destination, clock, store, ignore_backoff=False, **kwargs):
def phone_number_to_msisdn(country, number):
def run_on_reactor():
def concurrently_execute(func, args, limit):
def manhole(username, password, globals):
def get_transaction_key(request):
def client_v2_patterns(path_regex, releases=(0,), v2_alpha=True, unstable=True):
def client_path_patterns(path_regex, releases=(0,), include_in_unstable=True):
def login_submission_legacy_convert(submission):
def login_id_thirdparty_from_phone(identifier):
def register_txn_path(servlet, regex_string, http_server, with_get=False):
def _iterate_over_text(tree, *tags_to_ignore):
@defer.inlineCallbacks DCNL def setup_test_homeserver(name='test', datastore=None, config=None, **kargs):
def get_mock_call_args(pattern_func, mock_func):
def around(target):
def DEBUG(target):
def read_file(path_segments):
def exec_file(path_segments):
def encode_base64(input_bytes):
def decode_base64(input_string):
def decode_signing_key_base64(algorithm, version, key_base64):
def read_signing_keys(stream):
def main(argv):
def bootstrap_find_resource(filename, cdn, use_minified=None, local=True):
def load_all_account_types():
def get_account_by_id(account_id):
def get_account_by_name(account_name):
@manager.command DCNL def drop_db():
@manager.option('-a', '--accounts', dest='accounts', type=unicode, default=u'all') DCNL def run_change_reporter(accounts):
@manager.option('-a', '--accounts', dest='accounts', type=unicode, default=u'all') DCNL @manager.option('-m', '--monitors', dest='monitors', type=unicode, default=u'all') DCNL def find_changes(accounts, monitors):
@manager.option('-a', '--accounts', dest='accounts', type=unicode, default=u'all') DCNL @manager.option('-m', '--monitors', dest='monitors', type=unicode, default=u'all') DCNL @manager.option('-r', '--send_report', dest='send_report', type=bool, default=False) DCNL def audit_changes(accounts, monitors, send_report):
@manager.option('-a', '--accounts', dest='accounts', type=unicode, default=u'all') DCNL @manager.option('-m', '--monitors', dest='monitors', type=unicode, default=u'all') DCNL def delete_unjustified_issues(accounts, monitors):
@manager.option('-a', '--accounts', dest='accounts', type=unicode, default=u'all') DCNL @manager.option('-m', '--monitors', dest='monitors', type=unicode, default=u'all') DCNL @manager.option('-o', '--outputfolder', dest='outputfolder', type=unicode, default=u'backups') DCNL def backup_config_to_json(accounts, monitors, outputfolder):
@manager.command DCNL def start_scheduler():
@manager.command DCNL def sync_jira():
@manager.command DCNL def clear_expired_exceptions():
@manager.command DCNL def amazon_accounts():
@manager.option('-a', '--accounts', dest='accounts', type=unicode, default=u'all') DCNL def disable_accounts(accounts):
@manager.option('-a', '--accounts', dest='accounts', type=unicode, default=u'all') DCNL def enable_accounts(accounts):
@manager.option('-t', '--tech_name', dest='tech_name', type=str, required=True) DCNL @manager.option('-m', '--method', dest='method', type=str, required=True) DCNL @manager.option('-a', '--auditor', dest='auditor', type=str, required=True) DCNL @manager.option('-s', '--score', dest='score', type=int, required=False) DCNL @manager.option('-b', '--disabled', dest='disabled', type=bool, default=False) DCNL @manager.option('-p', '--pattern_scores', dest='pattern_scores', type=str, required=False) DCNL def add_override_score(tech_name, method, auditor, score, disabled, pattern_scores):
@manager.option('-f', '--file_name', dest='file_name', type=str, required=True) DCNL @manager.option('-m', '--mappings', dest='field_mappings', type=str, required=False) DCNL def add_override_scores(file_name, field_mappings):
@manager.option('--override', dest='override', type=bool, default=True) DCNL def fetch_aws_canonical_ids(override):
@manager.command DCNL def clean_stale_issues():
def format_attachments(attachments=[]):
def cert_get_bitstrength(cert):
def cert_get_issuer(cert):
def cert_get_serial(cert):
def cert_get_not_before(cert):
def cert_get_not_after(cert):
def cert_get_domains(cert):
def cert_get_cn(cert):
def cert_is_san(cert):
def cert_is_wildcard(cert):
def deep_dict(obj):
def standardize_name(name):
def send_email(subject=None, recipients=[], html=''):
def check_rfc_1918(cidr):
def find_modules(folder):
def load_plugins(group):
def connect(account_name, connection_type, **args):
def get_gcp_project_creds(account_names):
def get_canonical_ids(accounts, override=False):
def diff_dict(dicta, dictb, indentation):
def diff_list(lista, listb, indentation):
def str_distance(a, b):
def get_jinja_env():
@security.send_mail_task DCNL def send_email(msg):
def setup_logging():
def build_mock_result(watcher_configs, auditor_configs):
def mock_watcher(config):
def mock_auditor(config):
def _iterate_over_sub_policies(sub_policies, check_statement_func):
def _iterate_over_statements(sub_policy, check_statement_func):
def run_change_reporter(account_names, interval=None):
def find_changes(accounts, monitor_names, debug=True):
def _audit_changes(account, auditors, send_report, debug=True):
def _audit_specific_changes(monitor, audit_items, send_report, debug=True):
def setup_scheduler():
def get_rsa_public_key(n, e):
def fetch_token_header_payload(token):
@identity_loaded.connect DCNL def on_identity_loaded(sender, identity):
def get_monitors(account_name, monitor_names, debug=False):
def get_monitors_and_dependencies(account, monitor_names, debug=False):
def all_monitors(account_name, debug=False):
def _find_dependent_monitors(monitors, monitor_names):
def crossdomain(allowed_origins=None, methods=None, headers=None, max_age=21600, attach_to_all=True, automatic_options=True):
def detect_change(item, account, technology, complete_hash, durable_hash):
def hash_item(config, ephemeral_paths):
def sub_list(l):
def sub_dict(d):
def store_exception(source, location, exception, ttl=None):
def env_to_bool(input):
def sub_list(l):
def sub_dict(d):
def retrieve_arn(config):
def hash_item(item, ephemeral_paths):
def durable_hash(item, ephemeral_paths):
def run_migrations_offline():
def run_migrations_online():
def do_autopaginate(parser, token):
def paginate(context, window=DEFAULT_WINDOW, hashtag=''):
def get_page(self, suffix):
def rename(old, new):
def banner(RUN_CONFIG):
def get_revision():
def help():
def wps_check_targets(targets, cap_file, verbose=True):
def print_and_exec(cmd):
def remove_airodump_files(prefix):
def remove_file(filename):
def program_exists(program):
def sec_to_hms(sec):
def send_interrupt(process):
def get_mac_address(iface):
def generate_random_mac(old_mac):
def mac_anonymize(iface):
def mac_change_back():
def get_essid_from_cap(bssid, capfile):
def get_bssid_from_cap(essid, capfile):
def attack_interrupted_prompt():
def wpa_crack(capfile, RUN_CONFIG):
def add_commas(n):
def maintenance(period='daily'):
def org_site_check(site_id, user_id=None):
def gis_download_kml(record_id, filename, session_id_name, session_id, user_id=None):
def gis_update_location_tree(feature, user_id=None):
def org_facility_geojson(user_id=None):
def s3_auth_on_login(form):
def s3_auth_on_logout(user):
def s3_rest_controller(prefix=None, resourcename=None, **attr):
def make_app(app_name, test_path_name):
def rename_field():
def rename_table():
def add_new_field():
def list_field_to_reference():
def test_all(db):
def module_exists(module):
def easy_install(package):
def pip_install(package):
def s3_fieldmethod(name, f, represent=None, search_field=None):
def s3_authorstamp():
def s3_ownerstamp():
def s3_meta_fields():
def s3_role_required():
def s3_roles_permitted(name='roles_permitted', **attr):
def s3_comments(name='comments', **attr):
def s3_currency(name='currency', **attr):
def s3_date(name='date', **attr):
def s3_datetime(name='date', **attr):
def addFeatures(features):
def addFeatureQueries(feature_queries):
def addFeatureResources(feature_resources):
def s3_request(*args, **kwargs):
def s3_parse_datetime(string, dtfmt=None):
def s3_format_datetime(dt=None, dtfmt=None):
def s3_decode_iso_datetime(dtstr):
def s3_encode_iso_datetime(dt):
def s3_utc(dt):
def s3_get_utc_offset():
def s3_get_filter_opts(tablename, fieldname='name', location_filter=False, org_filter=False, key='id', none=False, translate=False):
def s3_set_default_filter(selector, value, tablename=None):
def s3_debug(message, value=None):
def s3_get_last_record_id(tablename):
def s3_store_last_record_id(tablename, record_id):
def s3_remove_last_record_id(tablename=None):
def s3_validate(table, field, value, record=None):
def s3_represent_value(field, value=None, record=None, linkto=None, strip_markup=False, xml_escape=False, non_xml_output=False, extended_comments=False):
def s3_dev_toolbar():
def s3_required_label(field_label):
def s3_mark_required(fields, mark_required=None, label_html=None, map_names=None):
def s3_addrow(form, label, widget, comment, formstyle, row_id, position=(-1)):
def s3_truncate(text, length=48, nice=True):
def s3_datatable_truncate(string, maxlength=40):
def s3_trunk8(selector=None, lines=None, less=None, more=None):
def s3_text_represent(text, truncate=True, lines=5, _class=None):
def s3_format_fullname(fname=None, mname=None, lname=None, truncate=True):
def s3_fullname(person=None, pe_id=None, truncate=True):
def s3_fullname_bulk(record_ids=[], truncate=True):
def s3_comments_represent(text, show_link=True):
def s3_phone_represent(value):
def s3_url_represent(url):
def s3_URLise(text):
def s3_avatar_represent(id, tablename='auth_user', gravatar=False, **attr):
def s3_auth_user_represent(id, row=None):
def s3_auth_user_represent_name(id, row=None):
def s3_yes_no_represent(value):
def s3_redirect_default(location='', how=303, client_side=False, headers=None):
def s3_include_debug_css():
def s3_include_debug_js():
def s3_include_ext():
def s3_is_mobile_client(request):
def s3_populate_browser_compatibility(request):
def s3_filename(filename):
def s3_has_foreign_key(field, m2m=True):
def s3_get_foreign_key(field, m2m=True):
def s3_unicode(s, encoding='utf-8'):
def s3_str(s):
def s3_flatlist(nested):
def s3_orderby_fields(table, orderby, expr=False):
def s3_get_extension(request=None):
def s3_set_extension(url, extension=None):
def search_vars_represent(search_vars):
def s3_jaro_winkler(str1, str2):
def s3_jaro_winkler_distance_row(row1, row2):
def soundex(name, len=4):
def sort_dict_by_values(adict):
def URL2(a=None, c=None, r=None):
def set_fonts(self):
def biDiText(text):
def s3_rheader_resource(r):
def s3_rheader_tabs(r, tabs=None):
def html_unescape(text):
def html_strip(text):
def S3GenericAutocompleteTemplate(post_process, delay, min_length, field, value, attributes, source=None, transform_value=(lambda value: value), tablename=None):
def s3_comments_widget(field, value, **attr):
def s3_richtext_widget(field, value):
def set_match_strings(matchDict, value):
def search_ac(r, **attr):
def formstyle_bootstrap(form, fields, *args, **kwargs):
def formstyle_foundation(form, fields, *args, **kwargs):
def formstyle_foundation_2col(form, fields, *args, **kwargs):
def formstyle_foundation_inline(form, fields, *args, **kwargs):
def formstyle_table(form, fields, *args, **kwargs):
def formstyle_table_inline(form, fields, *args, **kwargs):
def render_tooltip(label, comment, _class='tooltip'):
def transport_rheader(r, tabs=[]):
def evr_rheader(r):
def hrm_training_onvalidation(form):
def hrm_training_onaccept(form):
def hrm_programme_hours_month(row):
def hrm_programme_hours_onaccept(form):
def hrm_human_resource_onaccept(form):
def hrm_compose():
def hrm_map_popup(r):
def hrm_training_month(row):
def hrm_training_year(row):
def hrm_training_job_title(row):
def hrm_training_organisation(row):
def hrm_rheader(r, tabs=[], profile=False):
def hrm_competency_controller():
def hrm_credential_controller():
def hrm_experience_controller():
def hrm_group_controller():
def hrm_human_resource_controller(extra_filter=None):
def hrm_person_controller(**attr):
def hrm_training_controller():
def hrm_training_event_controller():
def hrm_xls_list_fields(r, staff=True, vol=True):
def hrm_configure_salary(r):
def hrm_configure_pr_group_membership():
def hrm_competency_list_layout(list_id, item_id, resource, rfields, record):
def hrm_credential_list_layout(list_id, item_id, resource, rfields, record):
def hrm_experience_list_layout(list_id, item_id, resource, rfields, record):
def hrm_training_list_layout(list_id, item_id, resource, rfields, record):
def hrm_human_resource_filters(resource_type=None, module=None, hrm_type_opts=None):
def scenario_rheader(r, tabs=[]):
def proc_rheader(r):
def item_um_from_name(name):
def supply_catalog_rheader(r):
def supply_item_rheader(r):
def supply_item_entity_category(row):
def supply_item_entity_country(row):
def supply_item_entity_organisation(row):
def supply_item_entity_contacts(row):
def supply_item_entity_status(row):
def supply_item_controller():
def supply_item_entity_controller():
def stdm_rheader(r):
def stdm_Certificate(r, **attr):
def asset_get_current_log(asset_id):
def asset_log_prep(r):
def asset_rheader(r):
def asset_controller():
def project_status_represent(value):
def project_progress_report(r, **attr):
def multi_theme_percentage_represent(id):
def task_notify(form):
def project_activity_year_options():
def project_time_day(row):
def project_time_week(row):
def project_ckeditor():
def project_rheader(r):
def project_task_controller():
def project_theme_help_fields(options):
def project_hazard_help_fields(options):
def project_hfa_opts():
def project_jnap_opts():
def project_pifacc_opts():
def project_rfa_opts():
def project_project_filters(org_label):
def project_project_list_layout(list_id, item_id, resource, rfields, record, icon='tasks'):
def project_activity_list_layout(list_id, item_id, resource, rfields, record, icon='activity'):
def project_task_list_layout(list_id, item_id, resource, rfields, record, icon='tasks'):
def dvr_case_default_status():
def dvr_case_status_filter_opts(closed=None):
def dvr_case_activity_default_status():
def dvr_response_default_status():
def dvr_case_household_size(group_id):
def dvr_due_followups(human_resource_id=None):
def dvr_get_household_size(person_id, dob=False, formatted=True):
def dvr_get_flag_instructions(person_id, action=None):
def dvr_update_last_seen(person_id):
def dvr_rheader(r, tabs=[]):
def cms_rheader(r, tabs=[]):
def cms_index(module, resource=None, page_name=None, alt_function=None):
def cms_documentation(r, default_page, default_url):
def cms_customise_post_fields():
def cms_post_list_layout(list_id, item_id, resource, rfields, record):
def auth_user_options_get_osm(pe_id):
def setup_rheader(r, tabs=[]):
def setup_management_exists(_type, _id, deployment_id):
def setup_host_validator(machine_ids):
def org_service_root_service(service_id):
def org_facility_rheader(r, tabs=[]):
def org_organisation_address(row):
def org_organisation_logo(id):
def org_parents(organisation_id, path=[]):
def org_root_organisation(organisation_id):
def org_root_organisation_name(organisation_id):
def org_organisation_requires(required=False, realms=None, updateable=False):
def org_region_options(zones=False):
def org_site_has_assets(row, tablename='org_facility'):
def org_site_has_inv(row, tablename='org_facility'):
def org_site_top_req_priority(row, tablename='org_facility'):
def org_rheader(r, tabs=[]):
def org_organisation_controller():
def org_site_staff_config(r):
def org_office_controller():
def org_facility_controller():
def org_update_affiliations(table, record):
def organisation_update_affiliations(record):
def org_group_update_affiliations(record):
def org_site_update_affiliations(record):
def org_update_root_organisation(organisation_id, root_org=None):
def org_logo_represent(org=None, fallback_org=None, width=60):
def org_customise_org_resource_fields(method):
def org_organisation_list_layout(list_id, item_id, resource, rfields, record):
def org_resource_list_layout(list_id, item_id, resource, rfields, record):
def vulnerability_rheader(r, tabs=[]):
def work_rheader(r, tabs=[]):
def set_event_from_incident(form, tablename):
def event_notification_dispatcher(r, **attr):
def event_event_list_layout(list_id, item_id, resource, rfields, record, icon='event'):
def event_incident_list_layout(list_id, item_id, resource, rfields, record, icon='incident'):
def event_resource_list_layout(list_id, item_id, resource, rfields, record):
def event_rheader(r):
def survey_template_rheader(r, tabs=[]):
def survey_getTemplateFromSeries(series_id):
def survey_getAllWidgetsForTemplate(template_id):
def survey_getAllSectionsForSeries(series_id):
def survey_buildQuestionnaireFromTemplate(template_id):
def survey_getAllSectionsForTemplate(template_id):
def survey_getWidgetFromQuestion(question_id):
def buildQuestionsForm(questions, complete_id=None, readOnly=False):
def survey_build_template_summary(template_id):
def survey_getQuestionFromCode(code, series_id=None):
def survey_getAllQuestionsForTemplate(template_id):
def survey_getAllQuestionsForSeries(series_id):
def survey_getAllQuestionsForComplete(complete_id):
def survey_get_series_questions_of_type(question_list, qtype):
def survey_getQuestionFromName(name, series_id):
def survey_updateMetaData(record, qtype, metadata):
def survey_getQstnLayoutRules(template_id, section_id, method=1):
def survey_series_rheader(r):
def survey_buildQuestionnaireFromSeries(series_id, complete_id=None):
def survey_save_answers_for_series(series_id, complete_id, rvars):
def saveAnswers(questions, series_id, complete_id, rvars):
def survey_getPriorityQuestionForSeries(series_id):
def buildSeriesSummary(series_id, posn_offset):
def survey_answerlist_dataTable_pre():
def survey_answerlist_dataTable_post(r):
def survey_answer_list_represent(value):
def get_location_details(complete_id):
def get_default_location(complete_id):
def survey_getAllAnswersForQuestionInSeries(question_id, series_id):
def buildTableFromCompletedList(data_source):
def buildCompletedList(series_id, question_id_list):
def getLocationList(series_id):
def survey_getAllTranslationsForTemplate(template_id):
def survey_getAllTranslationsForSeries(series_id):
def survey_getMatrix(title, logo, layout, widgetList, secondaryMatrix, langDict, showSectionLabels=True, layoutBlocks=None):
def json2py(jsonstr):
def json2list(jsonstr):
def survey_T(phrase, langDict):
def gis_opacity():
def gis_layer_onaccept(form):
def gis_hierarchy_editable(level, id):
def gis_location_filter(r):
def gis_layer_represent(id, row=None, show_link=True):
def gis_marker_retrieve(filename, path=None):
def gis_marker_retrieve_file_properties(filename, path=None):
def gis_rheader(r, tabs=[]):
def sync_rheader(r, tabs=[]):
def sync_job_reset(r, **attr):
def sync_now(r, **attr):
def irs_rheader(r, tabs=[]):
def deploy_rheader(r, tabs=[], profile=False):
def deploy_mission_hrquantity(row):
def deploy_mission_response_count(row):
def deploy_member_filters(status=False):
def deploy_apply(r, **attr):
def deploy_alert_select_recipients(r, **attr):
def deploy_response_select_mission(r, **attr):
def vol_activity_hours_month(row):
def vol_activity_hours_onaccept(form):
def vol_service_record(r, **attr):
def vol_volunteer_controller():
def vol_person_controller():
def ocr_buttons(r):
def disease_propagate_case_status(case_id):
def disease_create_case(disease_id, person_id, monitoring_level=None):
def disease_upgrade_monitoring(case_id, level, case=None):
def disease_rheader(r, tabs=None):
def cap_expirydate():
def warning_priority_color(color_code):
def json_formatter(fstring):
def get_cap_alert_addresses_opts():
def cap_alert_is_template(alert_id):
def cap_rheader(r):
def cap_history_rheader(r):
def cap_gis_location_xml_post_parse(element, record):
def cap_gis_location_xml_post_render(element, record):
def cap_alert_list_layout(list_id, item_id, resource, rfields, record):
def add_area_from_template(area_id, alert_id):
def clone(r, record=None, **attr):
def tour_rheader(r):
def tour_builder(output):
def pr_get_entities(pe_ids=None, types=None, represent=True, group=False, as_list=False, show_label=False, default_label='[No DCSP ID DCSP Tag]'):
def pr_person_phone_represent(id, show_link=True):
def pr_image_library_represent(image_name, format=None, size=()):
def pr_url_represent(url):
def pr_rheader(r, tabs=[]):
def pr_contacts(r, **attr):
def pr_update_affiliations(table, record):
def pr_group_update_affiliations(record):
def pr_human_resource_update_affiliations(person_id):
def pr_add_affiliation(master, affiliate, role=None, role_type=OU):
def pr_remove_affiliation(master, affiliate, role=None):
def pr_get_pe_id(entity, record_id=None):
def pr_define_role(pe_id, role=None, role_type=None, entity_type=None, sub_type=None):
def pr_delete_role(role_id):
def pr_add_to_role(role_id, pe_id):
def pr_remove_from_role(role_id, pe_id):
def pr_get_role_paths(pe_id, roles=None, role_types=None):
def pr_get_role_branches(pe_id, roles=None, role_types=None, entity_type=None):
def pr_get_path(pe_id):
def pr_get_ancestors(pe_id):
def pr_instance_type(pe_id):
def pr_realm(entity):
def pr_realm_users(realm, roles=None, role_types=OU):
def pr_ancestors(entities):
def pr_descendants(pe_ids, skip=None, root=True):
def pr_get_descendants(pe_ids, entity_types=None, skip=None, ids=True):
def pr_rebuild_path(pe_id, clear=False):
def pr_role_rebuild_path(role_id, skip=[], clear=False):
def pr_image_modify(image_file, image_name, original_name, size=(None, None), to_format=None):
def pr_import_prep(data):
def pr_address_list_layout(list_id, item_id, resource, rfields, record):
def pr_contact_list_layout(list_id, item_id, resource, rfields, record):
def pr_filter_list_layout(list_id, item_id, resource, rfields, record):
def filter_actions(resource, url, filters):
def summary_urls(resource, url, filters):
def delphi_solution_comments(row):
def delphi_solution_votes(row):
def dc_rheader(r, tabs=None):
def req_item_onaccept(form):
def req_item_ondelete(row):
def req_update_status(req_id):
def req_skill_onaccept(form):
def req_req_details(row):
def req_req_drivers(row):
def req_rheader(r, check_page=False):
def req_match(rheader=None):
def req_job_reset(r, **attr):
def req_job_run(r, **attr):
def req_add_from_template(req_id):
def req_customise_req_fields():
def req_req_list_layout(list_id, item_id, resource, rfields, record):
def req_customise_commit_fields():
def req_commit_list_layout(list_id, item_id, resource, rfields, record):
def filter_formstyle(row_id, label, widget, comment, hidden=False):
def stats_demographic_data_controller():
def stats_quantile(data, q):
def stats_year(row, tablename):
def stats_year_options(tablename):
def hms_hospital_rheader(r, tabs=[]):
def po_organisation_onaccept(form):
def po_due_followups():
def member_rheader(r, tabs=[]):
def assess_multi_type_represent(ids, opts):
def climate_station_represent(id, row=None):
def sample_table_spec_represent(id, row=None):
def climate_first_run():
def cr_shelter_rheader(r, tabs=[]):
def cr_update_housing_unit_population(shelter_id):
def cr_update_shelter_population(shelter_id):
def cr_check_population_availability(unit_id, table):
def cr_update_capacity_from_housing_units(shelter_id):
def cr_notification_dispatcher(r, **attr):
def cr_resolve_shelter_flags(task_id):
def inv_tabs(r):
def inv_rheader(r):
def inv_rfooter(r, record):
def inv_recv_crud_strings():
def inv_send_rheader(r):
def inv_send_pdf_footer(r):
def inv_recv_rheader(r):
def inv_recv_pdf_footer(r):
def inv_item_total_weight(row):
def inv_item_total_volume(row):
def inv_stock_movements(resource, selectors, orderby):
def inv_adj_rheader(r):
def inv_expiry_date_represent(date):
def doc_image_represent(filename):
def doc_checksum(docstr):
def doc_document_list_layout(list_id, item_id, resource, rfields, record):
def budget_kit_totals(kit_id):
def budget_bundle_totals(bundle_id):
def budget_budget_totals(budget_entity_id):
def update_check(settings):
def parse_requirements(output, filepath):
def s3_check_python_lib(global_mandatory, template_mandatory, template_optional, global_optional):
def convert_repr_number(number):
def dt_filter(reporter, search_string=' DCSP ', forceClear=True, quiet=True):
def dt_row_cnt(reporter, check=(), quiet=True, utObj=None):
def dt_data(row_list=None, add_header=False):
def dt_data_item(row=1, column=1, tableID='datatable'):
def dt_find(search='', row=None, column=None, cellList=None, tableID='datatable', first=False):
def dt_links(reporter, row=1, tableID='datatable', quiet=True):
def dt_action(row=1, action=None, column=1, tableID='datatable'):
def homepage():
def test_pdf1():
def test_pdf2():
def _autocomple_finish(el_id, browser):
def get_org_branches():
def test_roles():
def get_org_branches():
def find_JSON_format_data_structure(string, name, found, not_found, cannot_parse_JSON):
def probe(verbose=False):
def logger(_modem, message_, type_):
def scan():
def get_outbound_pdus(text, recipient):
def _B(slot):
def _consume(seq, num, func=None):
def _consume_decimal(seq):
def _consume_one_int(seq):
def _consume_bytes(seq, num=1):
def _chop(seq, how_much):
def _unpack_septets(seq, padding=0):
def comports(available_only=True):
def scan():
def scan():
def _open_resource(url_file_stream_or_string, etag, modified, agent, referrer, handlers, request_headers):
def _convert_to_idn(url):
def registerDateHandler(func):
def _parse_date_iso8601(dateString):
def _parse_date_onblog(dateString):
def _parse_date_nate(dateString):
def _parse_date_greek(dateString):
def _parse_date_hungarian(dateString):
def _parse_date_rfc822(date):
def _parse_date_asctime(dt):
def _parse_date_perforce(aDateString):
def _parse_date(dateString):
def convert_to_utf8(http_headers, data):
def replace_doctype(data):
def parse(url_file_stream_or_string, etag=None, modified=None, agent=None, referrer=None, handlers=None, request_headers=None, response_headers=None):
def lc(value):
def config(settings):
def config(settings):
def pr_contact_postprocess(form):
def config(settings):
def config(settings):
def config(settings):
def register_onaccept(form):
def config(settings):
def config(settings):
def config(settings):
def config(settings):
def config(settings):
def config(settings):
def config(settings):
def organisation_needs(row, need_type=None):
def config(settings):
def _newsfeed():
def latest_records(resource, layout, list_id, limit, list_fields, orderby):
def filter_formstyle(row_id, label, widget, comment, hidden=False):
def render_events(list_id, item_id, resource, rfields, record):
def config(settings):
def config(settings):
def drk_default_shelter():
def drk_absence(row):
def drk_dvr_rheader(r, tabs=[]):
def drk_org_rheader(r, tabs=[]):
def drk_cr_rheader(r, tabs=[]):
def update_transferability(site_id=None):
def config(settings):
def config(settings):
def config(settings):
def config(settings):
def config(settings):
def config(settings):
def latest_records(resource, layout, list_id, limit, list_fields, orderby):
def config(settings):
def drk_cr_rheader(r, tabs=[]):
def drk_dvr_rheader(r, tabs=[]):
def drk_org_rheader(r, tabs=[]):
def config(settings):
def config(settings):
def config(settings):
def config(settings):
def project_activity_postprocess(form):
def pr_contact_postprocess(form):
def mavc_rheader(r, tabs=None):
def config(settings):
def config(settings):
def config(settings):
def config(settings):
def lookup_loc(location, country):
def get_loc_from_db(location, country):
def get_org_from_db(org, country):
def storeRow(location, row, country):
def extractRow(row):
def disaggregate(statistic, data):
def config(settings):
def config(settings):
def config(settings):
def stl_dvr_rheader(r, tabs=[]):
def stl_project_rheader(r, tabs=[]):
def stl_org_rheader(r, tabs=[]):
def stl_case_activity_owner_group(table, row):
def config(settings):
def config(settings):
def config(settings):
def currency_represent(v):
def config(settings):
def evass_realm_entity(table, row):
def config(settings):
def config(settings):
def deploy_index():
def config(settings):
def event_team_rheader(incident_id, group_id, updates=False):
def pr_group_rheader(r):
def wacop_rheader(r, tabs=[]):
def cms_post_list_layout(list_id, item_id, resource, rfields, record):
def text_filter_formstyle(form, fields, *args, **kwargs):
def filter_formstyle_summary(form, fields, *args, **kwargs):
def filter_formstyle_profile(form, fields, *args, **kwargs):
def config(settings):
def config(settings):
def config(settings):
def deploy_index():
def config(settings):
def import_tabbed_readings(folder, start_station, end_station, suffix, prefix, fields, clear_existing_data, separator, missing_data_marker):
def date_to_month_number(date):
def year_month_to_month_number(year, month, day=None):
def rounded_date_to_month_number(date):
def floored_twelfth_of_a_year(date):
def floored_twelfth_of_a_360_day_year(date):
def init_SampleTable():
def import_tabbed_readings(folder, start_station, end_station, suffix, prefix, fields, clear_existing_data, separator, missing_data_marker):
def import_climate_readings(netcdf_file, field_name, add_reading, converter, start_date_time_string=None, is_undefined=(lambda x: (((-99.900003) < x < (-99.9)) or (x < (-100000000.0)) or (x > 100000000.0))), time_step_string=None, month_mapping_string=None, skip_places=False):
def import_stations(file_name):
@SQL.implementation(*aggregations) DCNL def DSLAggregationNode_SQL(aggregation, key, out, extra_filter):
def setup():
def save_webpage_screenshot(url, width, height, file_name=None):
def run_suite(*test_classes):
def run_suite(*modules):
def homepage(module=None, *match, **attr):
def check_status(status):
def unescape(text):
def get_user_from_cookie(cookies, app_id, app_secret):
def parse_signed_request(signed_request, app_secret):
def _xml_escape(data):
def col(loc, strg):
def lineno(loc, strg):
def line(loc, strg):
def nullDebugAction(*args):
def traceParseAction(f):
def delimitedList(expr, delim=',', combine=False):
def countedArray(expr):
def matchPreviousLiteral(expr):
def matchPreviousExpr(expr):
def oneOf(strs, caseless=False, useRegex=True):
def dictOf(key, value):
def originalTextFor(expr, asString=True):
def srange(s):
def matchOnlyAtCol(n):
def replaceWith(replStr):
def removeQuotes(s, l, t):
def upcaseTokens(s, l, t):
def downcaseTokens(s, l, t):
def keepOriginalText(s, startLoc, t):
def getTokensEndLoc():
def _makeTags(tagStr, xml):
def makeHTMLTags(tagStr):
def makeXMLTags(tagStr):
def withAttribute(*args, **attrDict):
def operatorPrecedence(baseExpr, opList):
def nestedExpr(opener='(', closer=')', content=None, ignoreExpr=quotedString.copy()):
def indentedBlock(blockStatementExpr, indentStack, indent=True):
def index():
def airport():
def border_crossing():
def border_control_point():
def heliport():
def seaport():
def incoming():
def req_match():
def index():
def index_alt():
def person():
def group():
def index():
def level():
def zone():
def zone_type():
def person():
def person_search():
def staff():
def staff_type():
def essential():
def seized_item_type():
def seized_item_depository():
def seized_item():
def index():
def index_alt():
def human_resource():
def staff():
def person():
def profile():
def hr_search():
def person_search():
def group():
def group_membership():
def department():
def job_title():
def skill():
def skill_type():
def competency_rating():
def skill_provision():
def course():
def course_certificate():
def certificate():
def certification():
def certificate_skill():
def facility():
def training_center():
def training():
def training_event():
def credential():
def experience():
def competency():
def skill_competencies():
def staff_org_site_json():
def staff_for_site():
def staff_level():
def salary_grade():
def insurance():
def award_type():
def award():
def disciplinary_type():
def disciplinary_action():
def compose():
def index():
def create():
def scenario():
def person():
def index():
def supplier():
def plan():
def index():
def brand():
def catalog():
def catalog_item():
def distribution():
def distribution_report():
def distribution_item():
def item():
def item_category():
def item_entity():
def item_pack():
def kit_item():
def index():
def person():
def patient():
def patient_rheader(r, tabs=[]):
def index():
def create():
def vehicle():
def vehicle_type():
def item():
def item_category():
def index():
def person():
def group():
def group_member_role():
def profile():
def tenure():
def tenure_type():
def parcel():
def parcel_type():
def landuse():
def dispute():
def job_title():
def surveyor():
def planner():
def gov_survey():
def ownership_type():
def recognition_status():
def structure():
def garden():
def socioeconomic_impact():
def input_service():
def farmer():
def rural_survey():
def index():
def index_alt():
def create():
def asset():
def brand():
def catalog():
def item():
def catalog_item():
def item_category():
def supplier():
def telephone():
def index():
def nzseel1():
def nzseel1_rheader(r, tabs=[]):
def nzseel2():
def nzseel2_rheader(r, tabs=[]):
def report():
def timeline():
def adminLevel():
def index():
def create():
def project():
def open_tasks_for_project():
def set_theme_requires(sector_ids):
def set_activity_type_requires(tablename, sector_ids):
def sector():
def status():
def theme():
def theme_project():
def theme_sector():
def hazard():
def framework():
def organisation():
def beneficiary_type():
def beneficiary():
def activity_type():
def activity_type_sector():
def activity_organisation():
def activity():
def distribution():
def location():
def demographic():
def demographic_data():
def location_contact():
def report():
def partners():
def task():
def task_project():
def task_activity():
def task_milestone():
def task_tag():
def role():
def member():
def milestone():
def tag():
def time():
def programme():
def programme_project():
def goal():
def outcome():
def output():
def indicator():
def indicator_data():
def person():
def volunteer():
def comment_parse(comment, comments, task_id=None):
def comments():
def comment():
def campaign():
def campaign_keyword():
def campaign_message():
def campaign_response():
def campaign_response_summary():
def human_resource_project():
def index():
def index_alt():
def person():
def index():
def basestation():
def compose():
def message():
def mark_sender():
def outbox():
def email_outbox():
def facebook_outbox():
def sms_outbox():
def twitter_outbox():
def inbox():
def email_inbox():
def rss():
def sms_inbox():
def twitter():
def twitter_inbox():
def tropo():
@auth.s3_requires_membership(1) DCNL def sms_outbound_gateway():
def channel():
def email_channel():
def facebook_channel():
def mcommons_channel():
def gcm_channel():
def rss_channel():
def twilio_channel():
@auth.s3_requires_membership(1) DCNL def sms_modem_channel():
@auth.s3_requires_membership(1) DCNL def sms_smtp_channel():
@auth.s3_requires_membership(1) DCNL def sms_webapi_channel():
@auth.s3_requires_membership(1) DCNL def tropo_channel():
@auth.s3_requires_membership(1) DCNL def twitter_channel():
def inject_search_after_save(output):
def action_after_save(form):
def twitter_search():
def twitter_result():
def sender():
def keyword():
def parser():
def group():
def group_membership():
def contact():
def search():
def recipient_represent(id, default_label=''):
def person_search(value, type=None):
def subscription():
def process_email_outbox():
def process_sms_outbox():
def process_twitter_outbox():
@auth.s3_requires_membership(1) DCNL def facebook_post():
@auth.s3_requires_membership(1) DCNL def twitter_post():
@auth.s3_requires_membership(1) DCNL def tag():
def readKeyGraph(queryID):
def index():
def index_alt():
def person():
def person_search():
def group_membership():
def activity():
def activity_age_group():
def activity_group_type():
def activity_focus():
def case():
def case_flag():
def case_status():
def case_type():
def case_activity():
def due_followups():
def activity_funding():
def provider_type():
def referral_type():
def response_type():
def response_status():
def response_action():
def termination_type():
def vulnerability_type():
def case_activity_update_type():
def case_activity_status():
def allowance():
def case_appointment():
def case_appointment_type():
def case_event():
def case_event_type():
def need():
def note():
def note_type():
def beneficiary_type():
def beneficiary_data():
def housing():
def housing_type():
def income_source():
def evaluation():
def evaluation_question():
def evaluation_data():
def site_activity():
def index():
def index_alt():
def series():
def status():
def tag():
def blog():
def post():
def page():
def cms_post_age(row):
def newsfeed():
def comment():
def discuss(r, **attr):
def comment_parse(comment, comments, post_id=None):
def comments():
def posts():
def user():
def group():
def membership():
def domain():
def index():
def forms():
def error(status, message):
def index():
def index_alt():
def group():
def group_membership():
def group_membership_status():
def group_person():
def group_person_status():
def region():
def sector():
def subsector():
def site():
def sites_for_org():
def facility():
def facility_type():
def office_type():
def organisation_type():
def organisation():
def org_search():
def capacity_indicator():
def capacity_assessment():
def capacity_assessment_data():
def office():
def person():
def room():
def mailing_list():
def donor():
def resource():
def resource_type():
def service():
def service_location():
def site_location():
def req_match():
def incoming():
def facility_geojson():
def init():
def index():
def l0():
def l1(id, vdata):
def vdata():
def rdata():
def tmdata():
def filter_report(filter_request, loc_id, loc_level):
def report_group(row):
def reportDataTable():
def getReportDetails():
def view_image():
def approve_report(id):
def decline_report(id):
def report():
def submitData():
def import_vul_ui():
def import_vul_csv_part1():
def import_vul_csv_part2():
def import_document(document_type):
def import_demo_ui():
def import_demo_csv_part1():
def import_demo_csv_part2():
def indicator():
def aggregated_indicator():
def data():
def document():
def aggregate():
def handdrawn():
def hazard():
def risk():
def evac_route():
def index():
def context():
def job_type():
def job():
def assignment():
def index():
def index_alt():
def create():
def event():
def event_location():
def event_type():
def incident_type():
def incident():
def incident_report():
def resource():
def person():
def group():
def team():
def team_status():
def human_resource():
def organisation():
def compose():
def index():
def index():
def create():
def template():
def template_read():
def template_summary():
def series():
def series_export_formatted():
def series_prepare_matrix(series_id, series, logo, lang_dict, justified=False):
def series_export_word(widget_list, lang_dict, title, logo):
def series_export_spreadsheet(matrix, matrix_answers, logo):
def completed_chart():
def section():
def question():
def question_list():
def formatter():
def question_metadata():
def new_assessment():
def complete():
def answer():
def analysis():
def admin():
def index():
def map_viewing_client():
def define_map(height=None, width=None, window=False, toolbar=False, closable=True, collapsed=False, maximizable=True, mouse_position=None, print_mode=False, save=False, zoomcontrol=None):
def location():
def ldata():
def hdata():
def s3_gis_location_parents(r, **attr):
def l0():
def catalog():
def config_default(r, **attr):
def config():
def enable_layer(r, **attr):
def disable_layer(r, **attr):
def hierarchy():
def location_tag():
def menu():
def marker():
def projection():
def style():
def waypoint():
def waypoint_upload():
def trackpoint():
def track():
def inject_enable(output):
def layer_config():
def layer_entity():
def layer_feature():
def layer_openstreetmap():
def layer_bing():
def layer_empty():
def layer_google():
def layer_mgrs():
def layer_arcrest():
def layer_geojson():
def layer_georss():
def layer_gpx():
def layer_kml():
def layer_openweathermap():
def layer_shapefile():
def layer_theme():
def theme_data():
def layer_tms():
def layer_wfs():
def layer_wms():
def layer_xyz():
def layer_js():
def cache_feed():
def feature_query():
def poi_type():
def poi():
def display_feature():
def display_features():
def geocode():
def geocode_r():
def geocode_manual():
def geoexplorer():
def about():
def maps():
def potlatch2():
def proxy():
def screenshot():
def index():
def config():
def repository():
def sync():
def log():
def task():
def index():
@auth.s3_requires_membership(1) DCNL def icategory():
def ireport():
def index():
def index_alt():
def mission():
def response_message():
def human_resource():
def person():
def group():
def application():
def assignment():
def competency():
def credential():
def experience():
def event_type():
def job_title():
def training():
def hr_search():
def person_search():
def alert_create_script():
def alert():
def alert_response():
def email_inbox():
def email_channel():
def twitter_channel():
def alert_recipient():
def compose():
def index():
@auth.s3_requires_membership(1) DCNL def setting():
@auth.s3_requires_membership(1) DCNL def role():
def user():
def group():
@auth.s3_requires_membership(1) DCNL def organisation():
def user_create_onvalidation(form):
@auth.s3_requires_membership(1) DCNL def acl():
def acl_represent(acl, options):
@auth.s3_requires_membership(1) DCNL def ticket():
@auth.s3_requires_membership(1) DCNL def errors():
@auth.s3_requires_membership(1) DCNL def clean():
@auth.s3_requires_membership(1) DCNL def portable():
def create_portable_app(web2py_source, copy_database=False, copy_uploads=False):
def translate():
def result():
def dashboard():
def forms():
def create():
def uses_requirement(requirement, field):
def generate_instance(table, fieldname):
def generate_bindings(table, fieldname, ref):
def generate_controllers(table, fieldname, ref):
def csvdata(nodelist):
def csvheader(parent, nodelist):
def importxml(db, xmlinput):
@auth.s3_requires_membership(1) DCNL def post():
def formList():
def submission():
@auth.s3_requires_membership(2) DCNL def submission_old():
def get_name(tablename):
def index():
def debris_basin():
def gauge():
def river():
def zone():
def zone_type():
def index():
def index_alt():
def human_resource():
def hr_search():
def person_search():
def group():
def group_membership():
def department():
def job_title():
def skill():
def skill_type():
def competency_rating():
def skill_provision():
def course():
def course_certificate():
def certificate():
def certificate_skill():
def training():
def training_event():
def competency():
def credential():
def experience():
def skill_competencies():
def staff_org_site_json():
def activity_hours():
def facility():
def programme():
def programme_hours():
def award():
def volunteer_award():
def cluster_type():
def cluster():
def cluster_position():
def volunteer_cluster():
def task():
def compose():
def index():
def disease():
def case():
def tracing():
def statistic():
def stats_data():
def stats_aggregate():
def index():
def alerting_authority():
def alert_history():
def alert_ack():
def info_prep(r):
def public():
def alert():
def info():
def info_parameter():
def template():
def area():
def warning_priority():
def notify_approver():
def set_priority_js():
def cap_AreaRowOptionsBuilder(alert_id, caller=None):
def assess_tables():
def rat_tables():
def impact_tables():
def index():
def create():
def population():
def rat():
def rat_rheader(r, tabs=[]):
def assess_rheader(r, tabs=[]):
def assess():
def impact_type():
def baseline_type():
def baseline():
def summary():
def basic_assess():
def mobile_basic_assess():
def color_code_severity_widget(widget, name):
def custom_assess(custom_assess_fields, location_id=None):
def type():
def impact():
def index():
def config():
def details():
def user():
def guided_tour_finished():
def index():
def zone():
def zone_type():
def station():
def station_vehicle():
def water_source():
def hazard_point():
def person():
def ireport_vehicle():
def fire_rheader(r, tabs=[]):
def index():
def person():
def address():
def contact():
def contact_emergency():
def person_search():
def check_duplicates():
def group():
def group_member_role():
def group_status():
def image():
def education():
def education_level():
def occupation_type():
def presence():
def pentity():
def affiliation():
def role():
def slot():
def tooltip():
def filter():
def subscription():
def human_resource():
def index():
def group_rheader(r, tabs=[]):
def group():
def problem_rheader(r, tabs=[]):
def problem():
def problems(r, **attr):
def solution():
def vote(r, **attr):
def save_vote():
def _getUnitNormalDeviation(zscore):
def online_variance(data):
def results(r, **attr):
def discuss(r, **attr):
def comment_parse(comment, comments, solution_id=None):
def comments():
def index():
def template():
def question():
def target():
def respnse():
def index():
def index_alt():
def is_affiliated():
def create():
def marker_fn(record):
def req():
def req_template():
def req_controller(template=False):
def requester_represent(id, show_link=True):
def req_item():
def req_item_packs():
def req_item_inv_item():
def req_skill():
def summary_option():
def skills_filter(req_id):
def commit():
def commit_rheader(r):
def send():
def send_commit():
def send_process():
def commit_item():
def commit_req():
def send_req():
def commit_item_json():
def fema():
def organisation_needs():
def organisation_needs_skill():
def organisation_needs_item():
def site_needs():
def call():
def download():
def register_validation(form):
def index():
def organisation():
def site():
def message():
def rapid():
def user():
def person():
def group():
def skill():
def facebook():
def google():
def humanitarian_id():
def apath(path=''):
def about():
def help():
def privacy():
def tos():
def video():
def contact():
def load_all_models():
def audit():
def tables():
def table():
def get_settings():
def _custom_view(filename):
def index():
def index_alt():
def parameter():
def data():
def source():
def demographic():
def demographic_data():
def demographic_aggregate():
def people_type():
def people():
def trained_type():
def trained():
def impact_type():
def index():
def index_alt():
def ltc():
def hospital():
def incoming():
def req_match():
def index():
def index_alt():
def station():
def site_location():
def police_rheader(r, tabs=[]):
def index():
def index_alt():
def school():
def school_type():
def index():
def area():
def household():
def due_followups():
def organisation():
def organisation_area():
def emotional_need():
def practical_need():
def index():
def index_alt():
def membership_type():
def membership():
def person():
def index():
def index_alt():
def index():
def ifrc24h():
def building_marker_fn(record):
def building():
def canvass():
def need():
def needs():
def _climate_chart(content_type):
def chart_popup():
def buy_data():
def stations():
def places():
def purchase():
def prices():
def request_image():
def download_purchased_data():
def get_years():
def index():
def index_alt():
def shelter_type():
def shelter_service():
def shelter_unit():
def shelter_registration():
def shelter():
def shelter_flag():
def shelter_inspection():
def shelter_inspection_flag():
def incoming():
def req_match():
def index():
def index_alt():
def index2():
def warehouse():
def warehouse_type():
def supplier():
def inv_item():
def track_movement():
def inv_item_quantity():
def inv_item_packs():
def send():
def send_commit():
def send_process():
def send_returns():
def return_process():
def send_cancel():
def set_recv_attr(status):
def recv():
def req_items_for_inv(site_id, quantity_type):
def req_item_in_shipment(shipment_item, shipment_type, req_items):
def recv_process():
def recv_cancel():
def track_item():
def adj():
def adj_close():
def recv_item_json():
def send_item_json():
def incoming():
def req_match():
def index():
def document():
def document_tabs(r):
def image():
def bulk_upload():
def upload_bulk():
def sitrep():
def ck_upload():
def ck_browse():
def ck_delete():
def index():
def budget():
def allocation():
def location():
def item():
def kit():
def bundle():
def staff():
def budget_staff():
def budget_bundle():
def bundle_kit():
def bundle_item():
def kit_item():
def project():
def parameter():
def kit_export_xls():
def kit_export_pdf():
def kit_export_csv():
def budget_import_csv(file, table=None):
def kit_import_csv():
def item_export_pdf():
def index():
def recreq():
def morgue():
def body():
def person():
def dvi_match_query(body_id):
def tooltip():
def _main():
def usage(filename):
def usage(filename):
def minimize(code):
def sort(nodes, routes, noRecursion=1):
def toposort(nodes, routes, noRecursion=1):
def isAlphanum(c):
def all():
def generate_keys():
def distribute_keys():
def deploy():
def backup():
def cleanup():
def db_create():
def db_drop():
def db_upgrade():
def db_upgrade_():
def db_sync():
def maintenance_on():
def maintenance_off():
def migrate_on():
def migrate():
def migrate_off():
def optimise():
def pull():
def clean():
def rollback():
def reload():
def os_upgrade():
def s3_unicode(s, encoding='utf-8'):
def order_tables_from_databases(appdir_str=None):
def order_tables_from_mysql(db=None, user=None, password=None, dbname=None):
def toposort(dependencies):
def apath(path='', r=None):
def tabs_or_spaces(physical_line, indent_char):
def tabs_obsolete(physical_line):
def trailing_whitespace(physical_line):
def trailing_blank_lines(physical_line, lines, line_number):
def missing_newline(physical_line):
def maximum_line_length(physical_line):
def blank_lines(logical_line, blank_lines, indent_level, line_number, previous_logical):
def extraneous_whitespace(logical_line):
def missing_whitespace(logical_line):
def indentation(logical_line, previous_logical, indent_char, indent_level, previous_indent_level):
def whitespace_before_parameters(logical_line, tokens):
def whitespace_around_operator(logical_line):
def whitespace_around_comma(logical_line):
def imports_on_separate_lines(logical_line):
def compound_statements(logical_line):
def python_3000_has_key(logical_line):
def python_3000_raise_comma(logical_line):
def expand_indent(line):
def message(text):
def find_checks(argument_name):
def mute_string(text):
def input_file(filename):
def input_dir(dirname):
def excluded(filename):
def filename_match(filename):
def ignore_code(code):
def get_error_statistics():
def get_warning_statistics():
def get_statistics(prefix=''):
def print_statistics(prefix=''):
def print_benchmark(elapsed):
def process_options(arglist=None):
def _main():
def cleanline(theLine):
def dojs(dogis=False, warnings=True):
def docss():
def run_example(data='http://www.lincolnloop.com', *args, **kwargs):
def mask_func(pattern):
def optimal_data_chunks(data, minimum=4):
def to_bytestring(data):
def optimal_mode(data):
def long_description():
def select2_submodule_check(app_configs, **kwargs):
@print_duration DCNL def naive_run(urls):
@print_duration DCNL def mthread_run(urls):
@print_duration DCNL def asyncio_run(urls):
def benchmark():
def print_test(method):
def mock_resource_with(filename, resource_type):
def get_base_domain(url):
def timelimit(timeout):
def domain_to_filename(domain):
def filename_to_domain(filename):
def is_ascii(word):
def extract_meta_refresh(html):
def to_valid_filename(s):
def cache_disk(seconds=(86400 * 5), cache_folder='/tmp'):
def print_duration(method):
def chunks(l, n):
def purge(fn, pattern):
def clear_memo_cache(source):
def memoize_articles(source, articles):
def get_useragent():
def get_available_languages():
def print_available_languages():
def extend_config(config, config_items):
def score(sentences, titleWords, keywords):
def split_words(text):
def keywords(text):
def split_sentences(text):
def sentence_position(i, size):
def remove_args(url, keep_params=(), frags=False):
def redirect_back(url, source_domain):
def prepare_url(url, source_url=None):
def valid_url(url, verbose=False, test=False):
def url_to_filetype(abs_url):
def get_domain(abs_url, **kwargs):
def get_scheme(abs_url, **kwargs):
def get_path(abs_url, **kwargs):
def is_abs_url(url):
def image_entropy(img):
def square_image(img):
def clean_url(url):
def get_request_kwargs(timeout, useragent):
def get_html(url, config=None, response=None):
def get_html_2XX_only(url, config=None, response=None):
def multithread_request(urls, config=None):
def filename_search_replace(sr_pairs, filename, backup=False):
def make_link_targets(proj_name, user_name, repo_name, known_link_fname, out_link_fname, url=None, ml_url=None):
@open_file(0, mode='rb') DCNL def read_leda(path, encoding='UTF-8'):
def parse_leda(lines):
def parse_sparse6(string):
@open_file(0, mode='rt') DCNL def read_sparse6(path):
@not_implemented_for('directed') DCNL def generate_sparse6(G, nodes=None, header=True):
@open_file(1, mode='wt') DCNL def write_sparse6(G, path, nodes=None, header=True):
def read_shp(path, simplify=True, geom_attrs=True):
def edges_from_line(geom, attrs, simplify=True, geom_attrs=True):
def write_shp(G, outdir):
@open_file(1, mode='wb') DCNL def write_graphml_xml(G, path, encoding='utf-8', prettyprint=True, infer_numeric_types=False):
@open_file(1, mode='wb') DCNL def write_graphml_lxml(G, path, encoding='utf-8', prettyprint=True, infer_numeric_types=False):
def generate_graphml(G, encoding='utf-8', prettyprint=True):
@open_file(0, mode='rb') DCNL def read_graphml(path, node_type=str, edge_key_type=int):
def parse_graphml(graphml_string, node_type=str):
@open_file(1, mode='wb') DCNL def write_gpickle(G, path, protocol=pickle.HIGHEST_PROTOCOL):
@open_file(0, mode='rb') DCNL def read_gpickle(path):
def generate_pajek(G):
@open_file(1, mode='wb') DCNL def write_pajek(G, path, encoding='UTF-8'):
@open_file(0, mode='rb') DCNL def read_pajek(path, encoding='UTF-8'):
def parse_pajek(lines):
def make_qstr(t):
def node_link_data(G, attrs=None):
def node_link_graph(data, directed=False, multigraph=True, attrs=None):
def jit_graph(data):
@not_implemented_for('multigraph') DCNL def jit_data(G, indent=None):
def cytoscape_data(G, attrs=None):
def tree_data(G, root, attrs=_attrs):
def tree_graph(data, attrs=_attrs):
def adjacency_data(G, attrs=_attrs):
def adjacency_graph(data, directed=False, multigraph=True, attrs=_attrs):
def generate_multiline_adjlist(G, delimiter=' DCSP '):
@open_file(1, mode='wb') DCNL def write_multiline_adjlist(G, path, delimiter=' DCSP ', comments='#', encoding='utf-8'):
def parse_multiline_adjlist(lines, comments='#', delimiter=None, create_using=None, nodetype=None, edgetype=None):
@open_file(0, mode='rb') DCNL def read_multiline_adjlist(path, comments='#', delimiter=None, create_using=None, nodetype=None, edgetype=None, encoding='utf-8'):
@open_file(1, mode='wb') DCNL def write_gexf(G, path, encoding='utf-8', prettyprint=True, version='1.2draft'):
def generate_gexf(G, encoding='utf-8', prettyprint=True, version='1.2draft'):
@open_file(0, mode='rb') DCNL def read_gexf(path, node_type=None, relabel=False, version='1.2draft'):
def relabel_gexf_graph(G):
def parse_graph6(string):
@open_file(0, mode='rt') DCNL def read_graph6(path):
@not_implemented_for('directed', 'multigraph') DCNL def generate_graph6(G, nodes=None, header=True):
@open_file(1, mode='wt') DCNL def write_graph6(G, path, nodes=None, header=True):
def graph6_to_data(string):
def data_to_graph6(data):
def data_to_n(data):
def n_to_data(n):
@open_file(1, mode='w') DCNL def write_yaml(G, path, encoding='UTF-8', **kwds):
@open_file(0, mode='r') DCNL def read_yaml(path):
@open_file(1, mode='w') DCNL def write_p2g(G, path, encoding='utf-8'):
@open_file(0, mode='r') DCNL def read_p2g(path, encoding='utf-8'):
def parse_p2g(lines):
def generate_edgelist(G, delimiter=' DCSP ', data=True):
@open_file(1, mode='wb') DCNL def write_edgelist(G, path, comments='#', delimiter=' DCSP ', data=True, encoding='utf-8'):
def parse_edgelist(lines, comments='#', delimiter=None, create_using=None, nodetype=None, data=True):
@open_file(0, mode='rb') DCNL def read_edgelist(path, comments='#', delimiter=None, create_using=None, nodetype=None, data=True, edgetype=None, encoding='utf-8'):
def write_weighted_edgelist(G, path, comments='#', delimiter=' DCSP ', encoding='utf-8'):
def read_weighted_edgelist(path, comments='#', delimiter=None, create_using=None, nodetype=None, encoding='utf-8'):
def escape(text):
def unescape(text):
def literal_destringizer(rep):
@open_file(0, mode='rb') DCNL def read_gml(path, label='label', destringizer=None):
def parse_gml(lines, label='label', destringizer=None):
def parse_gml_lines(lines, label, destringizer):
def literal_stringizer(value):
def generate_gml(G, stringizer=None):
@open_file(1, mode='wb') DCNL def write_gml(G, path, stringizer=None):
def generate_adjlist(G, delimiter=' DCSP '):
@open_file(1, mode='wb') DCNL def write_adjlist(G, path, comments='#', delimiter=' DCSP ', encoding='utf-8'):
def parse_adjlist(lines, comments='#', delimiter=None, create_using=None, nodetype=None):
@open_file(0, mode='rb') DCNL def read_adjlist(path, comments='#', delimiter=None, create_using=None, nodetype=None, encoding='utf-8'):
def ego_graph(G, n, radius=1, center=True, undirected=False, distance=None):
def margulis_gabber_galil_graph(n, create_using=None):
def chordal_cycle_graph(p, create_using=None):
def partial_duplication_graph(N, n, p, q, seed=None):
def duplication_divergence_graph(n, p, seed=None):
def gn_graph(n, kernel=None, create_using=None, seed=None):
def gnr_graph(n, p, create_using=None, seed=None):
def gnc_graph(n, create_using=None, seed=None):
def scale_free_graph(n, alpha=0.41, beta=0.54, gamma=0.05, delta_in=0.2, delta_out=0, create_using=None, seed=None):
def random_uniform_k_out_graph(n, k, self_loops=True, with_replacement=True, seed=None):
def random_k_out_graph(n, k, alpha, self_loops=True, seed=None):
@nodes_or_number([0, 1]) DCNL def grid_2d_graph(m, n, periodic=False, create_using=None):
def grid_graph(dim, periodic=False):
def hypercube_graph(n):
def triangular_lattice_graph(m, n, periodic=False, with_positions=True, create_using=None):
def hexagonal_lattice_graph(m, n, periodic=False, with_positions=True, create_using=None):
def line_graph(G, create_using=None):
def _node_func(G):
def _edge_func(G):
def _sorted_edge(u, v):
def _lg_directed(G, create_using=None):
def _lg_undirected(G, selfloops=False, create_using=None):
def _to_stublist(degree_sequence):
def _configuration_model(deg_sequence, create_using, directed=False, in_deg_sequence=None, seed=None):
def configuration_model(deg_sequence, create_using=None, seed=None):
def directed_configuration_model(in_degree_sequence, out_degree_sequence, create_using=None, seed=None):
def expected_degree_graph(w, seed=None, selfloops=True):
def havel_hakimi_graph(deg_sequence, create_using=None):
def directed_havel_hakimi_graph(in_deg_sequence, out_deg_sequence, create_using=None):
def degree_sequence_tree(deg_sequence, create_using=None):
def random_degree_sequence_graph(sequence, seed=None, tries=10):
def join(G, u, v, theta, alpha, metric):
def test_is_valid_joint_degree():
def test_chordal_cycle_graph():
def test_random_tree():
def caveman_graph(l, k):
def connected_caveman_graph(l, k):
def relaxed_caveman_graph(l, k, p, seed=None):
def random_partition_graph(sizes, p_in, p_out, seed=None, directed=False):
def planted_partition_graph(l, k, p_in, p_out, seed=None, directed=False):
def gaussian_random_partition_graph(n, s, v, p_in, p_out, directed=False, seed=None):
def ring_of_cliques(num_cliques, clique_size):
def windmill_graph(n, k):
def random_clustered_graph(joint_degree_sequence, create_using=None, seed=None):
def sample_with_replacement(population, k):
def random_tree(n, seed=None):
def make_small_undirected_graph(graph_description, create_using=None):
def make_small_graph(graph_description, create_using=None):
def LCF_graph(n, shift_list, repeats, create_using=None):
def bull_graph(create_using=None):
def chvatal_graph(create_using=None):
def cubical_graph(create_using=None):
def desargues_graph(create_using=None):
def diamond_graph(create_using=None):
def dodecahedral_graph(create_using=None):
def frucht_graph(create_using=None):
def heawood_graph(create_using=None):
def hoffman_singleton_graph():
def house_graph(create_using=None):
def house_x_graph(create_using=None):
def icosahedral_graph(create_using=None):
def krackhardt_kite_graph(create_using=None):
def moebius_kantor_graph(create_using=None):
def octahedral_graph(create_using=None):
def pappus_graph():
def petersen_graph(create_using=None):
def sedgewick_maze_graph(create_using=None):
def tetrahedral_graph(create_using=None):
def truncated_cube_graph(create_using=None):
def truncated_tetrahedron_graph(create_using=None):
def tutte_graph(create_using=None):
def euclidean(x, y):
def _fast_construct_edges(G, radius, p):
def _slow_construct_edges(G, radius, p):
@nodes_or_number(0) DCNL def random_geometric_graph(n, radius, dim=2, pos=None, p=2):
@nodes_or_number(0) DCNL def geographical_threshold_graph(n, theta, alpha=2, dim=2, pos=None, weight=None, metric=None):
@nodes_or_number(0) DCNL def waxman_graph(n, beta=0.4, alpha=0.1, L=None, domain=(0, 0, 1, 1), metric=None):
def navigable_small_world_graph(n, p=1, q=1, r=2, dim=2, seed=None):
def _generate_graphs():
def graph_atlas(i):
def graph_atlas_g():
def fast_gnp_random_graph(n, p, seed=None, directed=False):
def gnp_random_graph(n, p, seed=None, directed=False):
def dense_gnm_random_graph(n, m, seed=None):
def gnm_random_graph(n, m, seed=None, directed=False):
def newman_watts_strogatz_graph(n, k, p, seed=None):
def watts_strogatz_graph(n, k, p, seed=None):
def connected_watts_strogatz_graph(n, k, p, tries=100, seed=None):
def random_regular_graph(d, n, seed=None):
def _random_subset(seq, m):
def barabasi_albert_graph(n, m, seed=None):
def extended_barabasi_albert_graph(n, m, p, q, seed=None):
def powerlaw_cluster_graph(n, m, p, seed=None):
def random_lobster(n, p1, p2, seed=None):
def random_shell_graph(constructor, seed=None):
def random_powerlaw_tree(n, gamma=3, seed=None, tries=100):
def random_powerlaw_tree_sequence(n, gamma=3, seed=None, tries=100):
def random_kernel_graph(n, kernel_integral, kernel_root=None, seed=None):
def is_valid_joint_degree(joint_degrees):
def _neighbor_switch(G, w, unsat, h_node_residual, avoid_node_id=None):
def joint_degree_graph(joint_degrees, seed=None):
def nonisomorphic_trees(order, create='graph'):
def number_of_nonisomorphic_trees(order):
def _next_rooted_tree(predecessor, p=None):
def _next_tree(candidate):
def _split_tree(layout):
def _layout_to_matrix(layout):
def _layout_to_graph(layout):
def triad_graph(triad_name):
def full_rary_tree(r, n, create_using=None):
def balanced_tree(r, h, create_using=None):
def barbell_graph(m1, m2, create_using=None):
@nodes_or_number(0) DCNL def complete_graph(n, create_using=None):
def circular_ladder_graph(n, create_using=None):
def circulant_graph(n, offsets, create_using=None):
@nodes_or_number(0) DCNL def cycle_graph(n, create_using=None):
def dorogovtsev_goltsev_mendes_graph(n, create_using=None):
@nodes_or_number(0) DCNL def empty_graph(n=0, create_using=None):
def ladder_graph(n, create_using=None):
@nodes_or_number([0, 1]) DCNL def lollipop_graph(m, n, create_using=None):
def null_graph(create_using=None):
@nodes_or_number(0) DCNL def path_graph(n, create_using=None):
@nodes_or_number(0) DCNL def star_graph(n, create_using=None):
def trivial_graph(create_using=None):
def turan_graph(n, r):
@nodes_or_number(0) DCNL def wheel_graph(n, create_using=None):
def complete_multipartite_graph(*subset_sizes):
def karate_club_graph():
def davis_southern_women_graph():
def florentine_families_graph():
def uniform_random_intersection_graph(n, m, p, seed=None):
def k_random_intersection_graph(n, m, k):
def general_random_intersection_graph(n, m, p):
@not_implemented_for('undirected') DCNL def stochastic_graph(G, copy=True, weight='weight'):
def write_versionfile():
def get_revision():
def relabel_nodes(G, mapping, copy=True):
def convert_node_labels_to_integers(G, first_label=0, ordering='default', label_attribute=None):
def run(verbosity=1, doctest=False, numpy=True):
def to_pandas_dataframe(G, nodelist=None, dtype=None, order=None, multigraph_weight=sum, weight='weight', nonedge=0.0):
def from_pandas_dataframe(df, source='source', target='target', edge_attr=None, create_using=None):
def to_numpy_matrix(G, nodelist=None, dtype=None, order=None, multigraph_weight=sum, weight='weight', nonedge=0.0):
def from_numpy_matrix(A, parallel_edges=False, create_using=None):
@not_implemented_for('multigraph') DCNL def to_numpy_recarray(G, nodelist=None, dtype=None, order=None):
def to_scipy_sparse_matrix(G, nodelist=None, dtype=None, weight='weight', format='csr'):
def _csr_gen_triples(A):
def _csc_gen_triples(A):
def _coo_gen_triples(A):
def _dok_gen_triples(A):
def _generate_weighted_edges(A):
def from_scipy_sparse_matrix(A, parallel_edges=False, create_using=None, edge_attribute='weight'):
def to_numpy_array(G, nodelist=None, dtype=None, order=None, multigraph_weight=sum, weight='weight', nonedge=0.0):
def from_numpy_array(A, parallel_edges=False, create_using=None):
def laplacian_spectrum(G, weight='weight'):
def adjacency_spectrum(G, weight='weight'):
def modularity_spectrum(G):
@not_implemented_for('directed') DCNL def laplacian_matrix(G, nodelist=None, weight='weight'):
@not_implemented_for('directed') DCNL def normalized_laplacian_matrix(G, nodelist=None, weight='weight'):
@not_implemented_for('undirected') DCNL @not_implemented_for('multigraph') DCNL def directed_laplacian_matrix(G, nodelist=None, weight='weight', walk_type=None, alpha=0.95):
def incidence_matrix(G, nodelist=None, edgelist=None, oriented=False, weight=None):
def adjacency_matrix(G, nodelist=None, weight='weight'):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def modularity_matrix(G, nodelist=None, weight=None):
@not_implemented_for('undirected') DCNL @not_implemented_for('multigraph') DCNL def directed_modularity_matrix(G, nodelist=None, weight=None):
def _node_value(G, node_attr):
def _edge_value(G, edge_attr):
def attr_matrix(G, edge_attr=None, node_attr=None, normalized=False, rc_order=None, dtype=None, order=None):
def attr_sparse_matrix(G, edge_attr=None, node_attr=None, normalized=False, rc_order=None, dtype=None):
def _preprocess_graph(G, weight):
def _rcm_estimate(G, nodelist):
def _tracemin_fiedler(L, X, normalized, tol, method):
def _get_fiedler_func(method):
@not_implemented_for('directed') DCNL def algebraic_connectivity(G, weight='weight', normalized=False, tol=1e-08, method='tracemin'):
@not_implemented_for('directed') DCNL def fiedler_vector(G, weight='weight', normalized=False, tol=1e-08, method='tracemin'):
def spectral_ordering(G, weight='weight', normalized=False, tol=1e-08, method='tracemin'):
@open_file(1, mode='w') DCNL def write_dot(G, path):
@open_file(0, mode='r') DCNL def read_dot(path):
def from_pydot(P):
def to_pydot(N, strict=True):
def graphviz_layout(G, prog='neato', root=None, **kwds):
def pydot_layout(G, prog='neato', root=None, **kwds):
def _import_pydot():
def draw(G, pos=None, ax=None, **kwds):
def draw_networkx(G, pos=None, arrows=True, with_labels=True, **kwds):
def draw_networkx_nodes(G, pos, nodelist=None, node_size=300, node_color='r', node_shape='o', alpha=1.0, cmap=None, vmin=None, vmax=None, ax=None, linewidths=None, label=None, **kwds):
def draw_networkx_edges(G, pos, edgelist=None, width=1.0, edge_color='k', style='solid', alpha=1.0, edge_cmap=None, edge_vmin=None, edge_vmax=None, ax=None, arrows=True, label=None, **kwds):
def draw_networkx_labels(G, pos, labels=None, font_size=12, font_color='k', font_family='sans-serif', font_weight='normal', alpha=1.0, bbox=None, ax=None, **kwds):
def draw_networkx_edge_labels(G, pos, edge_labels=None, label_pos=0.5, font_size=10, font_color='k', font_family='sans-serif', font_weight='normal', alpha=1.0, bbox=None, ax=None, rotate=True, **kwds):
def draw_circular(G, **kwargs):
def draw_kamada_kawai(G, **kwargs):
def draw_random(G, **kwargs):
def draw_spectral(G, **kwargs):
def draw_spring(G, **kwargs):
def draw_shell(G, **kwargs):
def draw_nx(G, pos, **kwds):
def apply_alpha(colors, alpha, elem_list, cmap=None, vmin=None, vmax=None):
def from_agraph(A, create_using=None):
def to_agraph(N):
def write_dot(G, path):
def read_dot(path):
def graphviz_layout(G, prog='neato', root=None, args=''):
def pygraphviz_layout(G, prog='neato', root=None, args=''):
@nx.utils.open_file(5, 'w') DCNL def view_pygraphviz(G, edgelabel=None, prog='dot', args='', suffix='', path=None):
def display_pygraphviz(graph, path, format=None, prog=None, args=''):
def random_layout(G, center=None, dim=2):
def circular_layout(G, scale=1, center=None, dim=2):
def shell_layout(G, nlist=None, scale=1, center=None, dim=2):
def fruchterman_reingold_layout(G, k=None, pos=None, fixed=None, iterations=50, weight='weight', scale=1, center=None, dim=2):
def kamada_kawai_layout(G, dist=None, pos=None, weight='weight', scale=1, center=None, dim=2):
def spectral_layout(G, weight='weight', scale=1, center=None, dim=2):
def rescale_layout(pos, scale=1):
def k_components(G, min_density=0.95):
def ramsey_R2(G):
def is_independent_set(G, nodes):
def is_clique(G, nodes):
@not_implemented_for('directed') DCNL def min_weighted_dominating_set(G, weight=None):
def min_edge_dominating_set(G):
def max_clique(G):
def clique_removal(G):
def min_maximal_matching(G):
def min_weighted_vertex_cover(G, weight=None):
def maximum_independent_set(G):
def local_node_connectivity(G, source, target, cutoff=None):
def node_connectivity(G, s=None, t=None):
def all_pairs_node_connectivity(G, nbunch=None, cutoff=None):
def _bidirectional_shortest_path(G, source, target, exclude):
@not_implemented_for('directed') DCNL def average_clustering(G, trials=1000):
@not_implemented_for('directed') DCNL def efficiency(G, u, v):
@not_implemented_for('directed') DCNL def global_efficiency(G):
@not_implemented_for('directed') DCNL def local_efficiency(G):
def dist(a, b):
def _weight_function(G, weight):
def dijkstra_path(G, source, target, weight='weight'):
def dijkstra_path_length(G, source, target, weight='weight'):
def single_source_dijkstra_path(G, source, cutoff=None, weight='weight'):
def single_source_dijkstra_path_length(G, source, cutoff=None, weight='weight'):
def single_source_dijkstra(G, source, target=None, cutoff=None, weight='weight'):
def multi_source_dijkstra_path(G, sources, cutoff=None, weight='weight'):
def multi_source_dijkstra_path_length(G, sources, cutoff=None, weight='weight'):
def multi_source_dijkstra(G, sources, target=None, cutoff=None, weight='weight'):
def _dijkstra(G, source, weight, pred=None, paths=None, cutoff=None, target=None):
def _dijkstra_multisource(G, sources, weight, pred=None, paths=None, cutoff=None, target=None):
def dijkstra_predecessor_and_distance(G, source, cutoff=None, weight='weight'):
def all_pairs_dijkstra_path_length(G, cutoff=None, weight='weight'):
def all_pairs_dijkstra_path(G, cutoff=None, weight='weight'):
def bellman_ford(G, source, weight='weight'):
def bellman_ford_predecessor_and_distance(G, source, target=None, cutoff=None, weight='weight'):
def _bellman_ford(G, source, weight, pred=None, paths=None, dist=None, cutoff=None, target=None):
def bellman_ford_path(G, source, target, weight='weight'):
def bellman_ford_path_length(G, source, target, weight='weight'):
def single_source_bellman_ford_path(G, source, cutoff=None, weight='weight'):
def single_source_bellman_ford_path_length(G, source, cutoff=None, weight='weight'):
def single_source_bellman_ford(G, source, target=None, cutoff=None, weight='weight'):
def all_pairs_bellman_ford_path_length(G, cutoff=None, weight='weight'):
def all_pairs_bellman_ford_path(G, cutoff=None, weight='weight'):
def goldberg_radzik(G, source, weight='weight'):
def negative_edge_cycle(G, weight='weight'):
def bidirectional_dijkstra(G, source, target, weight='weight'):
def johnson(G, weight='weight'):
@not_implemented_for('multigraph') DCNL def astar_path(G, source, target, heuristic=None, weight='weight'):
def astar_path_length(G, source, target, heuristic=None, weight='weight'):
def floyd_warshall_numpy(G, nodelist=None, weight='weight'):
def floyd_warshall_predecessor_and_distance(G, weight='weight'):
def floyd_warshall(G, weight='weight'):
def has_path(G, source, target):
def shortest_path(G, source=None, target=None, weight=None):
def shortest_path_length(G, source=None, target=None, weight=None):
def average_shortest_path_length(G, weight=None):
def all_shortest_paths(G, source, target, weight=None):
def single_source_shortest_path_length(G, source, cutoff=None):
def _single_shortest_path_length(adj, firstlevel, cutoff):
def single_target_shortest_path_length(G, target, cutoff=None):
def all_pairs_shortest_path_length(G, cutoff=None):
def bidirectional_shortest_path(G, source, target):
def _bidirectional_pred_succ(G, source, target):
def single_source_shortest_path(G, source, cutoff=None):
def _single_shortest_path(adj, firstlevel, paths, cutoff, join):
def single_target_shortest_path(G, target, cutoff=None):
def all_pairs_shortest_path(G, cutoff=None):
def predecessor(G, source, target=None, cutoff=None, return_seen=None):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def communicability(G):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def communicability_exp(G):
def helper_funcs(G, orientation):
def edge_dfs(G, source=None, orientation='original'):
def generic_bfs_edges(G, source, neighbors=None):
def bfs_edges(G, source, reverse=False):
def bfs_tree(G, source, reverse=False):
def bfs_predecessors(G, source):
def bfs_successors(G, source):
def bfs_beam_edges(G, source, value, width=None):
def dfs_edges(G, source=None, depth_limit=None):
def dfs_tree(G, source=None, depth_limit=None):
def dfs_predecessors(G, source=None, depth_limit=None):
def dfs_successors(G, source=None, depth_limit=None):
def dfs_postorder_nodes(G, source=None, depth_limit=None):
def dfs_preorder_nodes(G, source=None, depth_limit=None):
def dfs_labeled_edges(G, source=None, depth_limit=None):
def index_satisfying(iterable, condition):
@not_implemented_for('undirected') DCNL @not_implemented_for('multigraph') DCNL def is_tournament(G):
@not_implemented_for('undirected') DCNL @not_implemented_for('multigraph') DCNL def hamiltonian_path(G):
def random_tournament(n):
@not_implemented_for('undirected') DCNL @not_implemented_for('multigraph') DCNL def score_sequence(G):
@not_implemented_for('undirected') DCNL @not_implemented_for('multigraph') DCNL def tournament_matrix(G):
@not_implemented_for('undirected') DCNL @not_implemented_for('multigraph') DCNL def is_reachable(G, s, t):
@not_implemented_for('undirected') DCNL @not_implemented_for('multigraph') DCNL def is_strongly_connected(G):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def rich_club_coefficient(G, normalized=True, Q=100):
def _compute_rc(G):
def test_eppstein_matching():
def latapy_clustering(G, nodes=None, mode='dot'):
def average_clustering(G, nodes=None, mode='dot'):
def robins_alexander_clustering(G):
@nodes_or_number([0, 1]) DCNL def complete_bipartite_graph(n1, n2, create_using=None):
def configuration_model(aseq, bseq, create_using=None, seed=None):
def havel_hakimi_graph(aseq, bseq, create_using=None):
def reverse_havel_hakimi_graph(aseq, bseq, create_using=None):
def alternating_havel_hakimi_graph(aseq, bseq, create_using=None):
def preferential_attachment_graph(aseq, p, create_using=None, seed=None):
def random_graph(n, m, p, seed=None, directed=False):
def gnmk_random_graph(n, m, k, seed=None, directed=False):
def degree_centrality(G, nodes):
def betweenness_centrality(G, nodes):
def closeness_centrality(G, nodes, normalized=True):
def spectral_bipartivity(G, nodes=None, weight='weight'):
def setup_module(module):
def hopcroft_karp_matching(G, top_nodes=None):
def eppstein_matching(G, top_nodes=None):
def _is_connected_by_alternating_path(G, v, matched_edges, unmatched_edges, targets):
def _connected_by_alternating_paths(G, matching, targets):
def to_vertex_cover(G, matching, top_nodes=None):
def projected_graph(B, nodes, multigraph=False):
@not_implemented_for('multigraph') DCNL def weighted_projected_graph(B, nodes, ratio=False):
@not_implemented_for('multigraph') DCNL def collaboration_weighted_projected_graph(B, nodes):
@not_implemented_for('multigraph') DCNL def overlap_weighted_projected_graph(B, nodes, jaccard=True):
@not_implemented_for('multigraph') DCNL def generic_weighted_projected_graph(B, nodes, weight_function=None):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def min_edge_cover(G, matching_algorithm=None):
def node_redundancy(G, nodes=None):
def _node_redundancy(G, v):
def biadjacency_matrix(G, row_order, column_order=None, dtype=None, weight='weight', format='csr'):
def from_biadjacency_matrix(A, create_using=None, edge_attribute='weight'):
@open_file(1, mode='wb') DCNL def write_edgelist(G, path, comments='#', delimiter=' DCSP ', data=True, encoding='utf-8'):
@not_implemented_for('directed') DCNL def generate_edgelist(G, delimiter=' DCSP ', data=True):
def parse_edgelist(lines, comments='#', delimiter=None, create_using=None, nodetype=None, data=True):
@open_file(0, mode='rb') DCNL def read_edgelist(path, comments='#', delimiter=None, create_using=None, nodetype=None, data=True, edgetype=None, encoding='utf-8'):
def color(G):
def is_bipartite(G):
def is_bipartite_node_set(G, nodes):
def sets(G, top_nodes=None):
def density(B, nodes):
def degrees(B, nodes, weight=None):
@not_implemented_for('multigraph') DCNL def core_number(G):
def _core_subgraph(G, k_filter, k=None, core=None):
def k_core(G, k=None, core_number=None):
def k_shell(G, k=None, core_number=None):
def k_crust(G, k=None, core_number=None):
def k_corona(G, k, core_number=None):
def greedy_coloring_with_interchange(original_graph, nodes):
def strategy_largest_first(G, colors):
def strategy_random_sequential(G, colors):
def strategy_smallest_last(G, colors):
def _maximal_independent_set(G):
def strategy_independent_set(G, colors):
def strategy_connected_sequential_bfs(G, colors):
def strategy_connected_sequential_dfs(G, colors):
def strategy_connected_sequential(G, colors, traversal='bfs'):
def strategy_saturation_largest_first(G, colors):
def greedy_color(G, strategy='largest_first', interchange=False):
def is_distance_regular(G):
def global_parameters(b, c):
@not_implemented_for('directed', 'multigraph') DCNL def intersection_array(G):
@not_implemented_for('directed', 'multigraph') DCNL def is_strongly_regular(G):
def kl_connected_subgraph(G, k, l, low_memory=False, same_as_graph=False):
def is_kl_connected(G, k, l, low_memory=False):
def attribute_mixing_dict(G, attribute, nodes=None, normalized=False):
def attribute_mixing_matrix(G, attribute, nodes=None, mapping=None, normalized=True):
def degree_mixing_dict(G, x='out', y='in', weight=None, nodes=None, normalized=False):
def degree_mixing_matrix(G, x='out', y='in', weight=None, nodes=None, normalized=True):
def numeric_mixing_matrix(G, attribute, nodes=None, normalized=True):
def mixing_dict(xy, normalized=False):
def degree_assortativity_coefficient(G, x='out', y='in', weight=None, nodes=None):
def degree_pearson_correlation_coefficient(G, x='out', y='in', weight=None, nodes=None):
def attribute_assortativity_coefficient(G, attribute, nodes=None):
def numeric_assortativity_coefficient(G, attribute, nodes=None):
def attribute_ac(M):
def average_neighbor_degree(G, source='out', target='out', nodes=None, weight=None):
def node_attribute_xy(G, attribute, nodes=None):
def node_degree_xy(G, x='out', y='in', weight=None, nodes=None):
def average_degree_connectivity(G, source='in+out', target='in+out', nodes=None, weight=None):
def branching_weight(G, attr='weight', default=1):
def greedy_branching(G, attr='weight', default=1, kind='max'):
def get_path(G, u, v):
def join(rooted_trees, label_attribute=None):
@not_implemented_for('multigraph') DCNL def boruvka_mst_edges(G, minimum=True, weight='weight', keys=False, data=True, ignore_nan=False):
def kruskal_mst_edges(G, minimum, weight='weight', keys=True, data=True, ignore_nan=False):
def prim_mst_edges(G, minimum, weight='weight', keys=True, data=True, ignore_nan=False):
@not_implemented_for('directed') DCNL def minimum_spanning_edges(G, algorithm='kruskal', weight='weight', keys=True, data=True, ignore_nan=False):
@not_implemented_for('directed') DCNL def maximum_spanning_edges(G, algorithm='kruskal', weight='weight', keys=True, data=True, ignore_nan=False):
def minimum_spanning_tree(G, weight='weight', algorithm='kruskal', ignore_nan=False):
def maximum_spanning_tree(G, weight='weight', algorithm='kruskal', ignore_nan=False):
@nx.utils.not_implemented_for('undirected') DCNL def is_arborescence(G):
@nx.utils.not_implemented_for('undirected') DCNL def is_branching(G):
def is_forest(G):
def is_tree(G):
@not_implemented_for('directed') DCNL def to_nested_tuple(T, root, canonical_form=False):
def from_nested_tuple(sequence, sensible_relabeling=False):
@not_implemented_for('directed') DCNL def to_prufer_sequence(T):
def from_prufer_sequence(sequence):
def is_isolate(G, n):
def isolates(G):
def number_of_isolates(G):
def is_chordal(G):
def find_induced_nodes(G, s, t, treewidth_bound=sys.maxsize):
def chordal_graph_cliques(G):
def chordal_graph_treewidth(G):
def _is_complete_graph(G):
def _find_missing_edge(G):
def _max_cardinality_node(G, choices, wanna_connect):
def _find_chordality_breaker(G, s=None, treewidth_bound=sys.maxsize):
def _connected_chordal_graph_cliques(G):
def voronoi_cells(G, center_nodes, weight='weight'):
def double_edge_swap(G, nswap=1, max_tries=100):
def connected_double_edge_swap(G, nswap=1, _window_threshold=3):
def dominating_set(G, start_with=None):
def is_dominating_set(G, nbunch):
def cycles(seq):
def cyclic_equals(seq1, seq2):
def test_complete():
def test_wikipedia_is_dominating_set():
def test_complete_graph_global_efficiency():
def test_triadic_census():
def is_simple_path(G, nodes):
def all_simple_paths(G, source, target, cutoff=None):
@not_implemented_for('multigraph') DCNL def shortest_simple_paths(G, source, target, weight=None):
def _bidirectional_shortest_path(G, source, target, ignore_nodes=None, ignore_edges=None, weight=None):
def _bidirectional_pred_succ(G, source, target, ignore_nodes=None, ignore_edges=None):
def _bidirectional_dijkstra(G, source, target, weight='weight', ignore_nodes=None, ignore_edges=None):
@not_implemented_for('undirected') DCNL def strongly_connected_components(G):
@not_implemented_for('undirected') DCNL def kosaraju_strongly_connected_components(G, source=None):
@not_implemented_for('undirected') DCNL def strongly_connected_components_recursive(G):
@not_implemented_for('undirected') DCNL def strongly_connected_component_subgraphs(G, copy=True):
@not_implemented_for('undirected') DCNL def number_strongly_connected_components(G):
@not_implemented_for('undirected') DCNL def is_strongly_connected(G):
@not_implemented_for('undirected') DCNL def condensation(G, scc=None):
@not_implemented_for('undirected') DCNL def is_semiconnected(G):
@not_implemented_for('undirected') DCNL def attracting_components(G):
@not_implemented_for('undirected') DCNL def number_attracting_components(G):
@not_implemented_for('undirected') DCNL def is_attracting_component(G):
@not_implemented_for('undirected') DCNL def attracting_component_subgraphs(G, copy=True):
@not_implemented_for('undirected') DCNL def weakly_connected_components(G):
@not_implemented_for('undirected') DCNL def number_weakly_connected_components(G):
@not_implemented_for('undirected') DCNL def weakly_connected_component_subgraphs(G, copy=True):
@not_implemented_for('undirected') DCNL def is_weakly_connected(G):
def _plain_bfs(G, source):
@not_implemented_for('directed') DCNL def connected_components(G):
@not_implemented_for('directed') DCNL def connected_component_subgraphs(G, copy=True):
def number_connected_components(G):
@not_implemented_for('directed') DCNL def is_connected(G):
@not_implemented_for('directed') DCNL def node_connected_component(G, n):
def _plain_bfs(G, source):
@not_implemented_for('directed') DCNL def is_biconnected(G):
@not_implemented_for('directed') DCNL def biconnected_component_edges(G):
@not_implemented_for('directed') DCNL def biconnected_components(G):
@not_implemented_for('directed') DCNL def biconnected_component_subgraphs(G, copy=True):
@not_implemented_for('directed') DCNL def articulation_points(G):
@not_implemented_for('directed') DCNL def triangles(G, nodes=None):
@not_implemented_for('multigraph') DCNL def _triangles_and_degree_iter(G, nodes=None):
@not_implemented_for('multigraph') DCNL def _weighted_triangles_and_degree_iter(G, nodes=None, weight='weight'):
def average_clustering(G, nodes=None, weight=None, count_zeros=True):
@not_implemented_for('directed') DCNL def clustering(G, nodes=None, weight=None):
def transitivity(G):
def square_clustering(G, nodes=None):
@not_implemented_for('directed') DCNL def generalized_degree(G, nodes=None):
def _apply_prediction(G, func, ebunch=None):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def resource_allocation_index(G, ebunch=None):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def jaccard_coefficient(G, ebunch=None):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def adamic_adar_index(G, ebunch=None):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def preferential_attachment(G, ebunch=None):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def cn_soundarajan_hopcroft(G, ebunch=None, community='community'):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def ra_index_soundarajan_hopcroft(G, ebunch=None, community='community'):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def within_inter_cluster(G, ebunch=None, delta=0.001, community='community'):
def _community(G, u, community):
def equivalence_classes(iterable, relation):
def quotient_graph(G, partition, edge_relation=None, node_data=None, edge_data=None, relabel=False, create_using=None):
def contracted_nodes(G, u, v, self_loops=True):
def contracted_edge(G, edge, self_loops=True):
def descendants(G, source):
def ancestors(G, source):
def is_directed_acyclic_graph(G):
def topological_sort(G):
def lexicographical_topological_sort(G, key=None):
def is_aperiodic(G):
@not_implemented_for('undirected') DCNL def transitive_closure(G):
@not_implemented_for('undirected') DCNL def transitive_reduction(G):
@not_implemented_for('undirected') DCNL def antichains(G):
@not_implemented_for('undirected') DCNL def dag_longest_path(G, weight='weight', default_weight=1):
@not_implemented_for('undirected') DCNL def dag_longest_path_length(G, weight='weight', default_weight=1):
@not_implemented_for('directed') DCNL def enumerate_all_cliques(G):
@not_implemented_for('directed') DCNL def find_cliques(G):
def find_cliques_recursive(G):
def make_max_clique_graph(G, create_using=None):
def make_clique_bipartite(G, fpos=None, create_using=None, name=None):
def graph_clique_number(G, cliques=None):
def graph_number_of_cliques(G, cliques=None):
def node_clique_number(G, nodes=None, cliques=None):
def number_of_cliques(G, nodes=None, cliques=None):
def cliques_containing_node(G, nodes=None, cliques=None):
def is_eulerian(G):
def eulerian_circuit(G, source=None, keys=False):
@not_implemented_for('directed') DCNL def k_components(G, flow_func=None):
def _consolidate(sets, k):
def build_auxiliary_node_connectivity(G):
def build_auxiliary_edge_connectivity(G):
def fset(list_of_sets):
def _assert_subgraph_edge_connectivity(G, ccs_subgraph, k):
def _assert_local_cc_edge_connectivity(G, ccs_local, k, memo):
def _check_edge_connectivity(G):
def all_node_cuts(G, k=None, flow_func=None):
def _is_separating_set(G, cut):
@not_implemented_for('multigraph') DCNL def k_edge_components(G, k):
@not_implemented_for('multigraph') DCNL def k_edge_subgraphs(G, k):
def _k_edge_subgraphs_nodes(G, k):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def bridge_components(G):
def _low_degree_nodes(G, k, nbunch=None):
def _high_degree_components(G, k):
def general_k_edge_subgraphs(G, k):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def stoer_wagner(G, weight='weight', heap=BinaryHeap):
def minimum_st_edge_cut(G, s, t, flow_func=None, auxiliary=None, residual=None):
def minimum_st_node_cut(G, s, t, flow_func=None, auxiliary=None, residual=None):
def minimum_node_cut(G, s=None, t=None, flow_func=None):
def minimum_edge_cut(G, s=None, t=None, flow_func=None):
def local_node_connectivity(G, s, t, flow_func=None, auxiliary=None, residual=None, cutoff=None):
def node_connectivity(G, s=None, t=None, flow_func=None):
def average_node_connectivity(G, flow_func=None):
def all_pairs_node_connectivity(G, nbunch=None, flow_func=None):
def local_edge_connectivity(G, s, t, flow_func=None, auxiliary=None, residual=None, cutoff=None):
def edge_connectivity(G, s=None, t=None, flow_func=None):
@not_implemented_for('directed') DCNL def maximal_independent_set(G, nodes=None):
@not_implemented_for('multigraph', 'undirected') DCNL def tree_all_pairs_lowest_common_ancestor(G, root=None, pairs=None):
@not_implemented_for('multigraph', 'undirected') DCNL def lowest_common_ancestor(G, node1, node2, default=None):
@not_implemented_for('multigraph', 'undirected') DCNL def all_pairs_lowest_common_ancestor(G, pairs=None):
def extrema_bounding(G, compute='diameter'):
def eccentricity(G, v=None, sp=None):
def diameter(G, e=None, usebounds=False):
def periphery(G, e=None, usebounds=False):
def radius(G, e=None, usebounds=False):
def center(G, e=None, usebounds=False):
def union(G, H, rename=(None, None), name=None):
def disjoint_union(G, H):
def intersection(G, H):
def difference(G, H):
def symmetric_difference(G, H):
def compose(G, H, name=None):
def complement(G, name=None):
def reverse(G, copy=True):
def union_all(graphs, rename=(None,), name=None):
def disjoint_union_all(graphs):
def compose_all(graphs, name=None):
def intersection_all(graphs):
def tensor_product(G, H):
def cartesian_product(G, H):
def lexicographic_product(G, H):
def strong_product(G, H):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def power(G, k):
def edge_boundary(G, nbunch1, nbunch2=None, data=False, keys=False, default=None):
def node_boundary(G, nbunch1, nbunch2=None):
def maximal_matching(G):
def matching_dict_to_set(matching):
def is_matching(G, matching):
def is_maximal_matching(G, matching):
def max_weight_matching(G, maxcardinality=False, weight='weight'):
def boykov_kolmogorov(G, s, t, capacity='capacity', residual=None, value_only=False, cutoff=None):
def build_residual_network(G, capacity):
def detect_unboundedness(R, s, t):
def build_flow_dict(G, R):
def min_cost_flow_cost(G, demand='demand', capacity='capacity', weight='weight'):
def min_cost_flow(G, demand='demand', capacity='capacity', weight='weight'):
def cost_of_flow(G, flowDict, weight='weight'):
def max_flow_min_cost(G, s, t, capacity='capacity', weight='weight'):
def shortest_augmenting_path_impl(G, s, t, capacity, residual, two_phase, cutoff):
def shortest_augmenting_path(G, s, t, capacity='capacity', residual=None, value_only=False, two_phase=False, cutoff=None):
@not_implemented_for('directed') DCNL def gomory_hu_tree(G, capacity='capacity', flow_func=None):
def preflow_push_impl(G, s, t, capacity, residual, global_relabel_freq, value_only):
def preflow_push(G, s, t, capacity='capacity', residual=None, global_relabel_freq=1, value_only=False):
def edmonds_karp_core(R, s, t, cutoff):
def edmonds_karp_impl(G, s, t, capacity, residual, cutoff):
def edmonds_karp(G, s, t, capacity='capacity', residual=None, value_only=False, cutoff=None):
def maximum_flow(G, s, t, capacity='capacity', flow_func=None, **kwargs):
def maximum_flow_value(G, s, t, capacity='capacity', flow_func=None, **kwargs):
def minimum_cut(G, s, t, capacity='capacity', flow_func=None, **kwargs):
def minimum_cut_value(G, s, t, capacity='capacity', flow_func=None, **kwargs):
def _detect_unboundedness(R):
@not_implemented_for('undirected') DCNL def _build_residual_network(G, demand, capacity, weight):
def _build_flow_dict(G, R, capacity, weight):
def capacity_scaling(G, demand='demand', capacity='capacity', weight='weight', heap=BinaryHeap):
@not_implemented_for('undirected') DCNL def network_simplex(G, demand='demand', capacity='capacity', weight='weight'):
def dinitz(G, s, t, capacity='capacity', residual=None, value_only=False, cutoff=None):
@not_implemented_for('undirected') DCNL def immediate_dominators(G, start):
def dominance_frontiers(G, start):
def mutual_weight(G, u, v, weight=None):
def normalized_mutual_weight(G, u, v, norm=sum, weight=None):
def effective_size(G, nodes=None, weight=None):
def constraint(G, nodes=None, weight=None):
def local_constraint(G, u, v, weight=None):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def min_edge_cover(G, matching_algorithm=None):
@not_implemented_for('directed') DCNL def is_edge_cover(G, cover):
def is_threshold_graph(G):
def is_threshold_sequence(degree_sequence):
def creation_sequence(degree_sequence, with_labels=False, compact=False):
def make_compact(creation_sequence):
def uncompact(creation_sequence):
def creation_sequence_to_weights(creation_sequence):
def weights_to_creation_sequence(weights, threshold=1, with_labels=False, compact=False):
def threshold_graph(creation_sequence, create_using=None):
def find_alternating_4_cycle(G):
def find_threshold_graph(G, create_using=None):
def find_creation_sequence(G):
def triangles(creation_sequence):
def triangle_sequence(creation_sequence):
def cluster_sequence(creation_sequence):
def degree_sequence(creation_sequence):
def density(creation_sequence):
def degree_correlation(creation_sequence):
def shortest_path(creation_sequence, u, v):
def shortest_path_length(creation_sequence, i):
def betweenness_sequence(creation_sequence, normalized=True):
def eigenvectors(creation_sequence):
def spectral_projection(u, eigenpairs):
def eigenvalues(creation_sequence):
def random_threshold_sequence(n, p, seed=None):
def right_d_threshold_sequence(n, m):
def left_d_threshold_sequence(n, m):
def swap_d(cs, p_split=1.0, p_combine=1.0, seed=None):
def _tricode(G, v, u, w):
@not_implemented_for('undirected') DCNL def triadic_census(G):
def wiener_index(G, weight=None):
@not_implemented_for('undirected', 'multigraph') DCNL def reciprocity(G, nodes=None):
def _reciprocity_iter(G, nodes):
@not_implemented_for('undirected', 'multigraph') DCNL def overall_reciprocity(G):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def cycle_basis(G, root=None):
@not_implemented_for('undirected') DCNL def simple_cycles(G):
@not_implemented_for('undirected') DCNL def recursive_simple_cycles(G):
def find_cycle(G, source=None, orientation='original'):
def closeness_vitality(G, node=None, weight=None, wiener_index=None):
def s_metric(G, normalized=True):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def chain_decomposition(G, root=None):
def _semantic_feasibility(self, G1_node, G2_node):
def could_be_isomorphic(G1, G2):
def fast_could_be_isomorphic(G1, G2):
def faster_could_be_isomorphic(G1, G2):
def is_isomorphic(G1, G2, node_match=None, edge_match=None):
def copyfunc(f, name=None):
def allclose(x, y, rtol=1e-05, atol=1e-08):
def close(x, y, rtol=1e-05, atol=1e-08):
def generic_multiedge_match(attr, default, op):
def is_graphical(sequence, method='eg'):
def is_valid_degree_sequence_havel_hakimi(deg_sequence):
def is_valid_degree_sequence_erdos_gallai(deg_sequence):
def is_multigraphical(sequence):
def is_pseudographical(sequence):
def is_digraphical(in_sequence, out_sequence):
def hits(G, max_iter=100, tol=1e-08, nstart=None, normalized=True):
def authority_matrix(G, nodelist=None):
def hub_matrix(G, nodelist=None):
def hits_numpy(G, normalized=True):
def hits_scipy(G, max_iter=100, tol=1e-06, normalized=True):
@not_implemented_for('multigraph') DCNL def pagerank(G, alpha=0.85, personalization=None, max_iter=100, tol=1e-06, nstart=None, weight='weight', dangling=None):
def google_matrix(G, alpha=0.85, personalization=None, nodelist=None, weight='weight', dangling=None):
def pagerank_numpy(G, alpha=0.85, personalization=None, weight='weight', dangling=None):
def pagerank_scipy(G, alpha=0.85, personalization=None, max_iter=100, tol=1e-06, weight='weight', dangling=None):
@not_implemented_for('directed', 'multigraph') DCNL def asyn_fluidc(G, k, max_iter=100):
@not_implemented_for('directed') DCNL def kernighan_lin_bisection(G, partition=None, max_iter=10, weight='weight'):
def five_clique_ring():
def asyn_lpa_communities(G, weight=None):
def _zipf_rv_below(gamma, xmin, threshold):
def _powerlaw_sequence(gamma, low, high, condition, length, max_iters):
def _generate_min_degree(gamma, average_degree, max_degree, tolerance, max_iters):
def _generate_communities(degree_sequence, community_sizes, mu, max_iters):
def LFR_benchmark_graph(n, tau1, tau2, mu, average_degree=None, min_degree=None, max_degree=None, min_community=None, max_community=None, tol=1e-07, max_iters=500, seed=None):
def girvan_newman(G, most_valuable_edge=None):
def _without_most_central_edges(G, most_valuable_edge):
def require_partition(func):
def intra_community_edges(G, partition):
def inter_community_edges(G, partition):
def inter_community_non_edges(G, partition):
@not_implemented_for('multigraph') DCNL @require_partition DCNL def performance(G, partition):
@require_partition DCNL def coverage(G, partition):
def modularity(G, communities, weight='weight'):
def is_partition(G, communities):
def k_clique_communities(G, k, cliques=None):
def harmonic_centrality(G, nbunch=None, distance=None):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def subgraph_centrality_exp(G):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def subgraph_centrality(G):
@not_implemented_for('directed') DCNL @not_implemented_for('multigraph') DCNL def communicability_betweenness_centrality(G, normalized=True):
def estrada_index(G):
def small_ego_G():
def _average_weight(G, path, weight=None):
def global_reaching_centrality(G, weight=None, normalized=True):
def local_reaching_centrality(G, v, paths=None, weight=None, normalized=True):
def newman_betweenness_centrality(G, v=None, cutoff=None, normalized=True, weight=None):
def _node_betweenness(G, source, cutoff=False, normalized=True, weight=None):
def edge_load_centrality(G, cutoff=False):
def _edge_betweenness(G, source, nodes=None, cutoff=False):
@not_implemented_for('directed') DCNL def current_flow_betweenness_centrality_subset(G, sources, targets, normalized=True, weight=None, dtype=float, solver='lu'):
@not_implemented_for('directed') DCNL def edge_current_flow_betweenness_centrality_subset(G, sources, targets, normalized=True, weight=None, dtype=float, solver='lu'):
def dispersion(G, u=None, v=None, normalized=True, alpha=1.0, b=0.0, c=0.0):
def betweenness_centrality(G, k=None, normalized=True, weight=None, endpoints=False, seed=None):
def edge_betweenness_centrality(G, k=None, normalized=True, weight=None, seed=None):
@not_implemented_for('multigraph') DCNL def eigenvector_centrality(G, max_iter=100, tol=1e-06, nstart=None, weight=None):
def eigenvector_centrality_numpy(G, weight=None, max_iter=50, tol=0):
@not_implemented_for('multigraph') DCNL def katz_centrality(G, alpha=0.1, beta=1.0, max_iter=1000, tol=1e-06, nstart=None, normalized=True, weight=None):
@not_implemented_for('multigraph') DCNL def katz_centrality_numpy(G, alpha=0.1, beta=1.0, normalized=True, weight=None):
@not_implemented_for('directed') DCNL def approximate_current_flow_betweenness_centrality(G, normalized=True, weight=None, dtype=float, solver='full', epsilon=0.5, kmax=10000):
@not_implemented_for('directed') DCNL def current_flow_betweenness_centrality(G, normalized=True, weight=None, dtype=float, solver='full'):
@not_implemented_for('directed') DCNL def edge_current_flow_betweenness_centrality(G, normalized=True, weight=None, dtype=float, solver='full'):
def closeness_centrality(G, u=None, distance=None, wf_improved=True, reverse=False):
def betweenness_centrality_subset(G, sources, targets, normalized=False, weight=None):
def edge_betweenness_centrality_subset(G, sources, targets, normalized=False, weight=None):
def _accumulate_edges_subset(betweenness, S, P, sigma, s, targets):
def _rescale(betweenness, n, normalized, directed=False):
def _rescale_e(betweenness, n, normalized, directed=False):
@not_implemented_for('directed') DCNL def current_flow_closeness_centrality(G, weight=None, dtype=float, solver='lu'):
def degree_centrality(G):
@not_implemented_for('undirected') DCNL def in_degree_centrality(G):
@not_implemented_for('undirected') DCNL def out_degree_centrality(G):
def cut_size(G, S, T=None, weight=None):
def volume(G, S, weight=None):
def normalized_cut_size(G, S, T=None, weight=None):
def conductance(G, S, T=None, weight=None):
def edge_expansion(G, S, T=None, weight=None):
def mixing_expansion(G, S, T=None, weight=None):
def node_expansion(G, S):
def boundary_expansion(G, S):
def flow_hierarchy(G, weight=None):
@not_implemented_for('multigraph') DCNL @not_implemented_for('directed') DCNL def bridges(G, root=None):
@not_implemented_for('multigraph') DCNL @not_implemented_for('directed') DCNL def has_bridges(G, root=None):
@not_implemented_for('multigraph') DCNL @not_implemented_for('directed') DCNL def local_bridges(G, with_span=True, weight=None):
def _prep_create_using(create_using):
def to_networkx_graph(data, create_using=None, multigraph_input=False):
def to_dict_of_lists(G, nodelist=None):
def from_dict_of_lists(d, create_using=None):
def to_dict_of_dicts(G, nodelist=None, edge_data=None):
def from_dict_of_dicts(d, create_using=None, multigraph_input=False):
def to_edgelist(G, nodelist=None):
def from_edgelist(edgelist, create_using=None):
def nodes(G):
def edges(G, nbunch=None):
def degree(G, nbunch=None, weight=None):
def neighbors(G, n):
def number_of_nodes(G):
def number_of_edges(G):
def density(G):
def degree_histogram(G):
def is_directed(G):
def frozen(*args):
def freeze(G):
def is_frozen(G):
def add_star(G, nodes, **attr):
def add_path(G, nodes, **attr):
def add_cycle(G, nodes, **attr):
def subgraph(G, nbunch):
def induced_subgraph(G, nbunch):
def edge_subgraph(G, edges):
def create_empty_copy(G, with_data=True):
def info(G, n=None):
def set_node_attributes(G, values, name=None):
def get_node_attributes(G, name):
def set_edge_attributes(G, values, name=None):
def get_edge_attributes(G, name):
def all_neighbors(graph, node):
def non_neighbors(graph, node):
def non_edges(graph):
@not_implemented_for('directed') DCNL def common_neighbors(G, u, v):
def is_weighted(G, edge=None, weight='weight'):
def is_negatively_weighted(G, edge=None, weight='weight'):
def is_empty(G):
@contextmanager DCNL def reversed(G):
def is_string_like(obj):
def iterable(obj):
def flatten(obj, result=None):
def is_list_of_ints(intlist):
def generate_unique_node():
def default_opener(filename):
def dict_to_numpy_array(d, mapping=None):
def dict_to_numpy_array2(d, mapping=None):
def dict_to_numpy_array1(d, mapping=None):
def is_iterator(obj):
def arbitrary_element(iterable):
def consume(iterator):
def pairwise(iterable, cyclic=False):
def groups(many_to_one):
def to_tuple(x):
def _inherit_doc(cls):
def not_implemented_for(*graph_types):
def open_file(path_arg, mode='r'):
def nodes_or_number(which_args):
def powerlaw_sequence(n, exponent=2.0):
def zipf_rv(alpha, xmin=1, seed=None):
def cumulative_distribution(distribution):
def discrete_sequence(n, distribution=None, cdistribution=None):
def random_weighted_sample(mapping, k):
def weighted_choice(mapping):
def cuthill_mckee_ordering(G, heuristic=None):
def reverse_cuthill_mckee_ordering(G, heuristic=None):
def roget_graph():
def words_graph():
def miles_graph():
def chess_pgn_graph(pgn_file='chess_masters_WCC.pgn.bz2'):
def atlas6():
def iso(G1, glist):
def lanl_graph():
def progressive_widening_search(G, source, value, condition, initial_width=1):
def main():
def create_hc(G):
def digitsrep(n, b=10):
def powersum(n, p, b=10):
def attractor153_graph(n, p, multiple=3, b=10):
def squaring_cycle_graph_old(n, b=10):
def fixed_points(G):
def chunks(l, n):
def _betmap(G_normalized_weight_sources_tuple):
def betweenness_centrality_parallel(G, processes=None):
def fork_task_context(functor, context=None):
def test_on_close_if():
def which(cmd, mode=(os.F_OK | os.X_OK), path=None):
def register_functions(lib, ignore_errors):
def get_tex_path_variable_texlive(variable, env=None):
def get_tex_path_variable_miktex(variable, env=None):
def tabulate(table, wrap_column=0, output=sys.stdout):
def _flag():
def get_analysis(tex_root):
def analyze_document(tex_root):
def _preprocess_file(file_name):
def make_rowcol(string):
def run_after_loading(view, func):
def read_file_unix_endings(file_name, encoding='utf8', ignore=True):
def get_view_content(file_name):
def get_open_view(file_name):
def get_file_content(file_name, encoding='utf8', ignore=True, force_lf_endings=False):
def run_on_main_thread(func, timeout=10, default_value=__sentinel__):
def make_dirs(path):
def get_sublime_exe():
def command_to_snippet(keyword):
def get_texpath():
def external_command(command, cwd=None, shell=False, env=None, stdin=__sentinel__, stdout=__sentinel__, stderr=__sentinel__, preexec_fn=None, use_texpath=True, show_window=False):
def execute_command(command, cwd=None, shell=False, env=None, stdin=__sentinel__, stdout=__sentinel__, stderr=__sentinel__, preexec_fn=None, use_texpath=True, show_window=False):
def check_call(command, cwd=None, shell=False, env=None, stdin=__sentinel__, stdout=__sentinel__, stderr=__sentinel__, preexec_fn=None, use_texpath=True, show_window=False):
def check_output(command, cwd=None, shell=False, env=None, stdin=__sentinel__, stderr=__sentinel__, preexec_fn=None, use_texpath=True, show_window=False):
def show_quickpanel(captions, entries, show_cancel=False):
def line_nr(ana, entry):
def create_rel_file_str(ana, entry):
def parse_tex_directives(view_or_path, multi_values=[], key_maps={}, only_for=[]):
def hash_digest(text):
def cache_local(tex_root, key, func):
def write_local(tex_root, key, obj):
def read_local(tex_root, key):
def cache_global(key, func):
def write_global(key, obj):
def read_global(key):
def _classname_to_internal_name(s):
def add_plugin_path(path, glob='*.py'):
def add_whitelist_module(name, module=None):
def get_plugin(name):
@contextmanager DCNL def _latextools_module_hack():
def remove_latex_commands(s):
def tokenize_name(name_str):
def split_tex_string(string, maxsplit=(-1), sep=None):
def register():
def getregentry():
def _tokenize(tex):
def _filter_invalid_entries(entries):
def _get_selected_arg(view, com_reg, pos):
def run_plugin_command(command, *args, **kwargs):
def _partition(env_list, is_before):
def _get_closest_begin(begin_before, end_before):
def _get_closest_end(end_after, begin_after):
def normalize_locale(loc):
def get_names(contents):
def get_image_size(image_path):
def _validate_thumbnail_currentness(image_path, thumbnail_path):
def _get_thumbnail_path(image_path, width, height):
def convert_installed():
def run_convert_command(args):
def _get_tl_gs_path(texpath):
def run_ghostscript_command(args, stdout=__sentinel__, stderr=__sentinel__):
def _create_image(latex_program, latex_document, base_name, color, **kwargs):
def from_env(key, default_value=None, root=ENV_VAR_ROOT):
def month_weekdays(year_int, month_int):
def aggregate_returns(returns, convert_to):
def create_cagr(equity, periods=252):
def create_sharpe_ratio(returns, periods=252):
def create_sortino_ratio(returns, periods=252):
def create_drawdowns(returns):
def rsquared(x, y):
def PandasTickEventIterator(data, ticker=None):
def PandasBarEventIterator(data, period, ticker=None):
def onInit(isReload):
def onGlobalData(key, value):
def onGlobalDataDel(key):
def onCellAppData(key, value):
def onCellAppDataDel(key):
def onSpaceData(spaceID, key, value):
def onAllSpaceGeometryLoaded(spaceID, isBootstrap, mapping):
def onLoginAppReady():
def onTick(timerID):
def onLoginAppShutDown():
def onRequestLogin(loginName, password, clientType, datas):
def onLoginCallbackFromDB(loginName, accountName, errorno, datas):
def onRequestCreateAccount(accountName, password, datas):
def onCreateAccountCallbackFromDB(accountName, errorno, datas):
def onDBMgrReady():
def onTick(timerID):
def onDBMgrShutDown():
def onSelectAccountDBInterface(accountName):
def onInterfaceAppReady():
def onTick(timerID):
def onInterfaceAppShutDown():
def onRequestCreateAccount(registerName, password, datas):
def onRequestAccountLogin(loginName, password, datas):
def onRequestCharge(ordersID, entityDBID, datas):
def onLoggerAppReady():
def onLoggerAppShutDown():
def onReadyForShutDown():
def onLogWrote(logData):
def onBaseAppReady(isBootstrap):
def onReadyForLogin(isBootstrap):
def onReadyForShutDown():
def onBaseAppShutDown(state):
def onInit(isReload):
def onFini():
def onCellAppDeath(addr):
def onGlobalData(key, value):
def onGlobalDataDel(key):
def onGlobalBases(key, value):
def onGlobalBasesDel(key):
def onLoseChargeCB(ordersID, dbid, success, datas):
def onInit(isReload):
def onStart():
def onFinish():
def initRootPath():
def getDefaultUID():
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def python_2_unicode_compatible(klass):
@login_check DCNL def show_components(request):
@login_check DCNL def connect(request):
@accept_websocket DCNL def process_cmd(request):
@login_check DCNL def show_components(request):
@login_check DCNL def connect(request):
@accept_websocket DCNL def process_cmd(request):
@accept_websocket DCNL def process_cmd(request):
def login_check(func):
def admin_check(func):
def login(request):
def logout(request):
@admin_check DCNL def user_manage(request):
@admin_check DCNL def user_add(request):
@admin_check DCNL def user_delete(request):
@admin_check DCNL def change_pwd(request):
@login_check DCNL def show_components(request):
@login_check DCNL def connect(request):
@accept_websocket DCNL def process_cmd(request):
@login_check DCNL def show_components(request):
@accept_websocket DCNL def process_cmd(request):
@accept_websocket DCNL def cell_process_cmd(request):
@login_check DCNL def show_components(request):
@login_check DCNL def connect(request):
@accept_websocket DCNL def process_cmd(request):
@login_check DCNL def index(request):
@login_check DCNL def components_query(request):
def components_group_query(request, ct):
def components_one_query(request, ct, cid):
@login_check DCNL def components_query_machines(request):
@login_check DCNL def components_manage(request):
@login_check DCNL def components_run(request):
@login_check DCNL def components_stop(request, ct, cid):
@login_check DCNL def components_shutdown(request):
@login_check DCNL def components_kill(request, ct, cid):
@login_check DCNL def components_save_layout(request):
@login_check DCNL def components_show_layout(request):
@login_check DCNL def components_delete_layout(request):
@login_check DCNL def components_load_layout(request):
@login_check DCNL def machines_show_all(request):
def initExtraRootPath():
def except_hook(typ, val, tb):
def funcPetData(mapDict, allDatas, datas, dataName):
def funcItemOver(mapDict, allDatas, datas, dataName):
def funcDropOver(mapDict, allDatas, datas, dataName):
def funcNpcLink(mapDict, allDatas, datas, dataName):
def funcEquipReinfoce(mapDict, allDatas, datas, dataName):
def funcEquipDecomposeR(mapDict, allDatas, datas, dataName):
def funcEquipDecomposeC(mapDict, allDatas, datas, dataName):
def funcEquipBuildCost(mapDict, allDatas, datas, dataName):
def funcSuitProp(mapDict, allDatas, datas, dataName):
def funcGeniusOver(mapDict, allDatas, datas, dataName):
def funcBuffStateOver(mapDict, allDatas, datas, dataName):
def funcPowerDefinesOver(mapDict, allDatas, datas, dataName):
def funcPos2D(mapDict, dctData, chilidDict, data):
def funcInt(mapDict, dctData, chilidDict, data):
def funcFloat(mapDict, dctData, chilidDict, data):
def funcStr(mapDict, dctData, chilidDict, data):
def funcEval(mapDict, dctData, chilidDict, data):
def funcTupleInt(mapDict, dctData, chilidDict, data):
def funcTupleFloat(mapDict, dctData, chilidDict, data):
def funcDict(mapDict, dctData, chilidDict, data):
def funcTupleStr(mapDict, dctData, chilidDict, data):
def funcTupleEval(mapDict, dctData, chilidDict, data):
def funcTupleEvalMD(mapDict, dctData, chilidDict, data):
def funcTupleEval1(mapDict, dctData, chilidDict, data):
def funcBool(mapDict, dctData, chilidDict, data):
def funcNotBool(mapDict, dctData, chilidDict, data):
def funcNull(mapDict, dctData, chilidDict, data):
def funcZipFloat(mapDict, dctData, chilidDict, data):
def funcUNZipFloat(mapDict, dctData, chilidDict, data):
def funcFlags(mapDict, dctData, chilidDict, data):
def main():
def exportMenu(msgIndex, YCallback=None, NCallback=None, OCallback=None):
def checkExtName(filePath, extName):
def __checkPath(dirPath):
def __onCheckPath(dirPath):
def createDir(dirPath):
def inputList(var_list):
def inputElement(element):
def str2List(error_str, pywinerr_list):
def STOU(val):
def UTOF(val):
def FTOU(val):
def wrapper(func, *args, **kwds):
def rectangle(win, uly, ulx, lry, lrx):
def normcase(s):
def isabs(s):
def splitdrive(p):
def splitunc(p):
def split(p):
def basename(p):
def dirname(p):
def islink(path):
def lexists(path):
def ismount(path):
def expanduser(path):
def expandvars(path):
def normpath(path):
def relpath(path, start=curdir):
def clear_cache():
def cmp(f1, f2, shallow=True):
def cmpfiles(a, b, common, shallow=True):
def open(filename, flag='c', protocol=None, writeback=False):
def geohash(latitude, longitude, datedow):
def wrap_info(info):
def start_debugger(rpchandler, gui_adap_oid):
def start_remote_debugger(rpcclt, pyshell):
def close_remote_debugger(rpcclt):
def coding_spec(data):
def expand_substates(states):
def _parse_sequence(sequence):
def MultiCallCreator(widget):
def get_entity(expression):
def get_argspec(ob):
def _initializeTkVariantTests(root):
def isAquaTk():
def isCarbonTk():
def isCocoaTk():
def isXQuartz():
def tkVersionWarning(root):
def addOpenEventSupport(root, flist):
def overrideRootMenu(root, flist):
def setupApp(root, flist):
def any(name, alternates):
def find_paragraph(text, mark):
def reformat_paragraph(data, limit):
def reformat_comment(data, limit, comment_header):
def is_all_white(line):
def get_indent(line):
def get_comment_header(line):
def get(root):
def search_reverse(prog, chars, col):
def get_selection(text):
def get_line_col(index):
def listicons(icondir=ICONDIR):
def _sphinx_version():
def localcontext(ctx=None):
def _dec_from_triple(sign, coefficient, exponent, special=False):
def _normalize(op1, op2, prec=0):
def _decimal_lshift_exact(n, e):
def _sqrt_nearest(n, a):
def _rshift_nearest(x, shift):
def _div_nearest(a, b):
def _ilog(x, M, L=8):
def _dlog10(c, e, p):
def _dlog(c, e, p):
def _iexp(x, M, L=8):
def _dexp(c, e, p):
def _dpower(xc, xe, yc, ye, p):
def _log10_lb(c, correction={'1': 100, '2': 70, '3': 53, '4': 40, '5': 31, '6': 23, '7': 16, '8': 10, '9': 5}):
def _convert_other(other, raiseit=False, allow_float=False):
def _convert_for_comparison(self, other, equality_op=False):
def _parse_format_specifier(format_spec, _localeconv=None):
def _format_align(sign, body, spec):
def _group_lengths(grouping):
def _insert_thousands_sep(digits, spec, min_width=1):
def _format_sign(is_negative, spec):
def _format_number(is_negative, intpart, fracpart, exp, spec):
def _parse_makefile(filename, vars=None):
def get_makefile_filename():
def _generate_posix_vars():
def _init_posix(vars):
def _init_non_posix(vars):
def parse_config_h(fp, vars=None):
def get_config_h_filename():
def get_scheme_names():
def get_path_names():
def get_paths(scheme=_get_default_scheme(), vars=None, expand=True):
def get_path(name, scheme=_get_default_scheme(), vars=None, expand=True):
def get_config_vars(*args):
def get_config_var(name):
def get_platform():
def _main():
def new(key, msg=None, digestmod=None):
def sorted_list_difference(expected, actual):
def unorderable_list_difference(expected, actual):
def three_way_cmp(x, y):
def _count_diff_all_purpose(actual, expected):
def _ordered_count(iterable):
def _count_diff_hashable(actual, expected):
def is_instance(obj, klass):
def _isnotsuite(test):
def S_IMODE(mode):
def S_IFMT(mode):
def S_ISDIR(mode):
def S_ISCHR(mode):
def S_ISBLK(mode):
def S_ISREG(mode):
def S_ISFIFO(mode):
def S_ISLNK(mode):
def S_ISSOCK(mode):
def filemode(mode):
def run(statement, filename=None, sort=(-1)):
def runctx(statement, globals, locals, filename=None, sort=(-1)):
def binhex(inp, out):
def hexbin(inp, out):
def encode(in_file, out_file, name=None, mode=None):
def decode(in_file, out_file=None, mode=None, quiet=False):
def test():
def decode(ew):
def encode(string, charset='utf-8', encoding=None, lang=''):
def message_from_string(s, *args, **kws):
def message_from_bytes(s, *args, **kws):
def message_from_file(fp, *args, **kws):
def message_from_binary_file(fp, *args, **kws):
def parsedate_tz(data):
def _parsedate_tz(data):
def parsedate(data):
def mktime_tz(data):
def quote(str):
def add_charset(charset, header_enc=None, body_enc=None, output_charset=None):
def add_alias(alias, canonical):
def add_codec(charset, codecname):
def decode_header(header):
def make_header(decoded_seq, maxlinelen=None, header_name=None, continuation_ws=' DCSP '):
def _whatsnd(data):
def encode_base64(msg):
def encode_quopri(msg):
def encode_7or8bit(msg):
def header_check(octet):
def body_check(octet):
def header_length(bytearray):
def body_length(bytearray):
def unquote(s):
def header_encode(header_bytes, charset='iso-8859-1'):
def body_encode(body, maxlinelen=76, eol=NL):
def decode(encoded, eol=NL):
def _unquote_match(match):
def header_decode(s):
def header_length(bytearray):
def header_encode(header_bytes, charset='iso-8859-1'):
def body_encode(s, maxlinelen=76, eol=NL):
def decode(string):
def resolve_dotted_attribute(obj, attr, allow_dotted_names=True):
def list_public_methods(obj):
def getparser(use_datetime=False, use_builtin_types=False):
def dumps(params, methodname=None, methodresponse=None, encoding=None, allow_none=False):
def loads(data, use_datetime=False, use_builtin_types=False):
def gzip_encode(data):
def gzip_decode(data):
def nametofont(name):
def families(root=None, displayof=None):
def names(root=None):
def OptionName(widget):
def askinteger(title, prompt, **kw):
def askfloat(title, prompt, **kw):
def askstring(title, prompt, **kw):
def get_tests_modules(basepath=this_dir_path, gui=True, packages=None):
def get_tests(text=True, gui=True, packages=None):
def simulate_mouse_click(widget, x, y):
def askcolor(color=None, **options):
def showinfo(title=None, message=None, **options):
def showwarning(title=None, message=None, **options):
def showerror(title=None, message=None, **options):
def askquestion(title=None, message=None, **options):
def askokcancel(title=None, message=None, **options):
def askyesno(title=None, message=None, **options):
def askyesnocancel(title=None, message=None, **options):
def askretrycancel(title=None, message=None, **options):
def askopenfilename(**options):
def asksaveasfilename(**options):
def askopenfilenames(**options):
def askopenfile(mode='r', **options):
def askopenfiles(mode='r', **options):
def asksaveasfile(mode='w', **options):
def askdirectory(**options):
def test():
def insort_right(a, x, lo=0, hi=None):
def bisect_right(a, x, lo=0, hi=None):
def insort_left(a, x, lo=0, hi=None):
def bisect_left(a, x, lo=0, hi=None):
def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw):
def dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw):
def load(fp, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
def change_sequence(seq, action, seqno=_Unspecified, cond=_Unspecified):
def check(file):
def parse(source, filename='<unknown>', mode='exec'):
def literal_eval(node_or_string):
def dump(node, annotate_fields=True, include_attributes=False):
def copy_location(new_node, old_node):
def fix_missing_locations(node):
def increment_lineno(node, n=1):
def iter_fields(node):
def iter_child_nodes(node):
def get_docstring(node, clean=True):
def walk(node):
def tokenize_wrapper(input):
def pattern_convert(grammar, raw_node_info):
def tokenize(readline, tokeneater=printtoken):
def _get_normal_name(orig_enc):
def detect_encoding(readline):
def untokenize(iterable):
def generate_tokens(readline):
def load_grammar(gt='Grammar.txt', gp=None, save=True, force=False, logger=None):
def _newer(a, b):
def main(*args):
def Assign(target, source):
def Name(name, prefix=None):
def Attr(obj, attr):
def Comma():
def Dot():
def ArgList(args, lparen=LParen(), rparen=RParen()):
def Call(func_name, args=None, prefix=None):
def Newline():
def BlankLine():
def Subscript(index_node):
def String(string, prefix=None):
def ListComp(xp, fp, it, test=None):
def FromImport(package_name, name_leafs):
def ImportAndCall(node, results, names):
def is_tuple(node):
def is_list(node):
def attr_chain(obj, attr):
def in_special_context(node):
def is_probably_builtin(node):
def find_indentation(node):
def find_root(node):
def does_tree_import(package, name, node):
def is_import(node):
def touch_import(package, name, node):
def find_binding(name, node, package=None):
def _is_import_binding(node, name, package=None):
def get_refactorer(fixer_pkg='lib2to3', fixers=None, options=None):
def has_metaclass(parent):
def fixup_parse_tree(cls_node):
def fixup_simple_stmt(parent, i, stmt_node):
def fixup_indent(suite):
def traverse_imports(names):
def get_all_fix_names(fixer_pkg, remove_prefix=True):
def _get_head_types(pat):
def _get_headnode_dict(fixer_list):
def get_fixers_from_package(pkg_name):
def _formatparam(param, value=None, quote=1):
def read_environ():
def guess_scheme(environ):
def application_uri(environ):
def request_uri(environ, include_query=True):
def shift_path_info(environ):
def setup_testing_defaults(environ):
def is_hop_by_hop(header_name):
def validator(application):
def c2py(plural):
def _iterdump(connection):
def guess_type(url, strict=True):
def guess_all_extensions(type, strict=True):
def guess_extension(type, strict=True):
def add_type(type, ext, strict=True):
def isabs(s):
def split(s):
def splitdrive(p):
def islink(s):
def lexists(path):
def expandvars(path):
def expanduser(path):
def normpath(s):
def abspath(path):
def config_dict(filename):
def readconfig(cfgdict):
def __methodDict(cls, _dict):
def __methods(cls):
def Screen():
def _getpen():
def _getscreen():
def write_docstringdict(filename='turtle_docstringdict'):
def read_docstrings(lang):
def getmethparlist(ob):
def _turtle_docrevise(docstr):
def _screen_docrevise(docstr):
def url2pathname(pathname):
def pathname2url(pathname):
def escape(s, quote=True):
def unescape(s):
def _is_leap(year):
def _days_before_year(year):
def _days_in_month(year, month):
def _days_before_month(year, month):
def _ymd2ord(year, month, day):
def _ord2ymd(n):
def setraw(fd, when=TCSAFLUSH):
def setcbreak(fd, when=TCSAFLUSH):
def get_logger():
def log_to_stderr(level=None):
def _run_finalizers(minpriority=None):
def is_exiting():
def dump(obj, file, protocol=None):
def arbitrary_address(family):
def _validate_family(family):
def address_type(address):
def Client(address, family=None, authkey=None):
def SocketClient(address):
def dispatch(c, id, methodname, args=(), kwds={}):
def all_methods(obj):
def public_methods(obj):
def RebuildProxy(func, token, serializer, kwds):
def MakeProxyType(name, exposed, _cache={}):
def AutoProxy(token, serializer, manager=None, authkey=None, exposed=None, incref=True):
def main(fd):
def is_forking(argv):
def freeze_support():
def get_command_line(**kwds):
def spawn_main(pipe_handle, parent_pid=None, tracker_fd=None):
def get_preparation_data(name):
def prepare(data):
def import_main_path(main_path):
def fnmatch(name, pat):
def filter(names, pat):
def fnmatchcase(name, pat):
def translate(pat):
def all_suffixes():
def resolve_name(name, package):
def _find_spec_from_path(name, path=None):
def find_spec(name, package=None):
def set_package(fxn):
def set_loader(fxn):
def module_for_loader(fxn):
def interact(banner=None, readfunc=None, local=None):
def fileConfig(fname, defaults=None, disable_existing_loggers=True):
def _resolve(name):
def _create_formatters(cp):
def _install_handlers(cp, formatters):
def _handle_existing_loggers(existing, child_loggers, disable_existing):
def _install_loggers(cp, handlers, disable_existing):
def dictConfig(config):
def listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None):
def stopListening():
def getLevelName(level):
def addLevelName(level, levelName):
def _acquireLock():
def _releaseLock():
def setLogRecordFactory(factory):
def getLogRecordFactory():
def makeLogRecord(dict):
def _removeHandlerRef(wr):
def _addHandlerRef(handler):
def setLoggerClass(klass):
def getLoggerClass():
def basicConfig(**kwargs):
def getLogger(name=None):
def critical(msg, *args, **kwargs):
def error(msg, *args, **kwargs):
def exception(msg, *args, **kwargs):
def warning(msg, *args, **kwargs):
def info(msg, *args, **kwargs):
def debug(msg, *args, **kwargs):
def log(level, msg, *args, **kwargs):
def disable(level):
def shutdown(handlerList=_handlerList):
def _showwarning(message, category, filename, lineno, file=None, line=None):
def captureWarnings(capture):
def openpty():
def master_open():
def _open_terminal():
def slave_open(tty_name):
def fork():
def _writen(fd, data):
def _read(fd):
def _copy(master_fd, master_read=_read, stdin_read=_read):
def spawn(argv, master_read=_read, stdin_read=_read):
def create_string_buffer(init, size=None):
def CFUNCTYPE(restype, *argtypes, **kw):
def create_unicode_buffer(init, size=None):
def string_at(ptr, size=(-1)):
def dylib_info(filename):
def dyld_image_suffix_search(iterator, env=None):
def dyld_find(name, executable_path=None, env=None):
def framework_find(fn, executable_path=None, env=None):
def framework_info(filename):
def three_way_cmp(x, y):
def clearcache():
def getlines(filename, module_globals=None):
def checkcache(filename=None):
def updatecache(filename, module_globals=None):
def get_object_traceback(obj):
def take_snapshot():
def _quote(str, LegalChars=_LegalChars):
def _url_collapse_path(path):
def nobody_uid():
def executable(path):
def test(HandlerClass=BaseHTTPRequestHandler, ServerClass=HTTPServer, protocol='HTTP/1.0', port=8000, bind=''):
def exists(path):
def isfile(path):
def isdir(s):
def getsize(filename):
def getmtime(filename):
def getatime(filename):
def getctime(filename):
def commonprefix(m):
def samestat(s1, s2):
def samefile(f1, f2):
def sameopenfile(fp1, fp2):
def _splitext(p, sep, altsep, extsep):
def __py_new(name, data=''):
def __hash_new(name, data=''):
def _strcoll(a, b):
def _strxfrm(s):
def format(percent, value, grouping=False, monetary=False, *additional):
def format_string(f, val, grouping=False):
def currency(val, symbol=True, grouping=False, international=False):
def str(val):
def atof(string, func=float):
def atoi(str):
def normalize(localename):
def _parse_localename(localename):
def _build_localename(localetuple):
def getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):
def getlocale(category=LC_CTYPE):
def setlocale(category, locale=None):
def resetlocale(category=LC_ALL):
def _print_locale():
def tree(plist, l, a, f):
def input(files=None, inplace=False, backup='', bufsize=0, mode='r', openhook=None):
def close():
def nextfile():
def filename():
def lineno():
def filelineno():
def fileno():
def isfirstline():
def isstdin():
def parse150(resp):
def parse227(resp):
def parse229(resp, peer):
def parse257(resp):
def print_line(line):
def ftpcp(source, sourcename, target, targetname='', type='I'):
def test():
def gcd(a, b):
def dump_file(filename, head=None):
def show_formats():
def show_formats():
def safe_name(name):
def safe_version(version):
def to_filename(name):
def get_default_compiler(osname=None, platform=None):
def show_compilers():
def new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0):
def gen_preprocess_options(macros, include_dirs):
def gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries):
def _get_gid(name):
def _get_uid(name):
def make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0, owner=None, group=None):
def make_zipfile(base_name, base_dir, verbose=0, dry_run=0):
def check_archive_formats(formats):
def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None):
def get_python_version():
def get_python_inc(plat_specific=0, prefix=None):
def get_python_lib(plat_specific=0, standard_lib=0, prefix=None):
def customize_compiler(compiler):
def get_config_h_filename():
def get_makefile_filename():
def parse_config_h(fp, g=None):
def parse_makefile(fn, g=None):
def expand_makefile_vars(s, vars):
def _init_posix():
def _init_nt():
def get_config_vars(*args):
def get_config_var(name):
def setup(**attrs):
def run_setup(script_name, script_args=None, stop_after='run'):
def get_platform():
def convert_path(pathname):
def change_root(new_root, pathname):
def check_environ():
def subst_vars(s, local_vars):
def split_quoted(s):
def execute(func, args, msg=None, verbose=0, dry_run=0):
def strtobool(val):
def byte_compile(py_files, optimize=0, force=0, prefix=None, base_dir=None, verbose=1, dry_run=0, direct=None):
def rfc822_escape(header):
def run_2to3(files, fixer_names=None, options=None, explicit=None):
def copydir_run_2to3(src, dest, template=None, fixer_names=None, options=None, explicit=None):
def make_local_path(s):
def copy_xxmodule_c(directory):
def fixup_build_ext(cmd):
def can_fs_encode(filename):
def wrap_text(text, width):
def translate_longopt(opt):
def fix_help_options(options):
def findall(dir=os.curdir):
def glob_to_re(pattern):
def translate_pattern(pattern, anchor=1, prefix=None, is_regex=0):
def _copy_file_contents(src, dst, buffer_size=(16 * 1024)):
def copy_file(src, dst, preserve_mode=1, preserve_times=1, update=0, link=None, verbose=1, dry_run=0):
def move_file(src, dst, verbose=1, dry_run=0):
def write_file(filename, contents):
def get_build_version():
def normalize_and_reduce_paths(paths):
def removeDuplicates(variable):
def find_vcvarsall(version):
def query_vcvarsall(version, arch='x86'):
def read_keys(base, key):
def read_values(base, key):
def get_build_version():
def get_build_architecture():
def normalize_and_reduce_paths(paths):
def splitUp(pred):
def split_provision(value):
def get_msvcr():
def check_config_h():
def _find_exe_version(cmd):
def get_versions():
def is_cygwingcc():
def read_setup_file(filename):
def spawn(cmd, search_path=1, verbose=0, dry_run=0):
def _nt_quote_args(args):
def find_executable(executable, path=None):
def newer(source, target):
def newer_pairwise(sources, targets):
def newer_group(sources, target, missing='error'):
def mkpath(name, mode=511, verbose=1, dry_run=0):
def create_tree(base_dir, files, mode=511, verbose=1, dry_run=0):
def copy_tree(src, dst, preserve_mode=1, preserve_times=1, preserve_symlinks=0, update=0, verbose=1, dry_run=0):
def _build_cmdtuple(path, cmdtuples):
def remove_tree(directory, verbose=1, dry_run=0):
def ensure_relative(path):
def recursive_repr(fillvalue='...'):
def is_unavailable_exception(e):
@contextlib.contextmanager DCNL def captured_stdout(encoding='utf-8'):
def _calc_errors(actual, expected):
def approx_equal(x, y, tol=1e-12, rel=1e-07):
def load_tests(loader, tests, ignore):
def sample_func(v):
def run_gdb(*args, **env_vars):
def iterfunc(seqn):
def itermulti(seqn):
def escapestr(text, ampm):
def genblock(seed, length, step=1024, generator=random):
def choose_lines(source, number, seed=None, generator=random):
def has_sound(sound):
def _get_cscript_path():
def _have_soundcard():
def lcg(x, length=16):
def pysiphash(uint64):
def skip_unless_internalhash(test):
def add_ordered_mock_handlers(opener, meth_spec):
def CollectObjectIDs(ids, obj):
def eggs(x, y):
def readline_generator(f):
def native_type_range(fmt):
def randrange_fmt(mode, char, obj):
def gen_item(fmt, obj):
def gen_items(n, fmt, obj):
def randitems(n, obj='ndarray', mode=None, char=None):
def iter_mode(n, obj='ndarray'):
def iter_format(nitems, testobj='ndarray'):
def is_memoryview_format(fmt):
def atomp(lst):
def prod(lst):
def strides_from_shape(ndim, shape, itemsize, layout):
def _ca(items, s):
def _fa(items, s):
def indices(shape):
def getindex(ndim, ind, strides):
def transpose(src, shape):
def _flatten(lst):
def flatten(lst):
def slice_shape(lst, slices):
def multislice(lst, slices):
def m_assign(llst, rlst, lslices, rslices):
def cmp_structure(llst, rlst, lslices, rslices):
def multislice_assign(llst, rlst, lslices, rslices):
def verify_structure(memlen, itemsize, ndim, shape, strides, offset):
def memory_index(indices, t):
def is_overlapping(t):
def rand_structure(itemsize, valid, maxdim=5, maxshape=16, shape=()):
def randslice_from_slicelen(slicelen, listlen):
def randslice_from_shape(ndim, shape):
def rand_aligned_slices(maxdim=5, maxshape=16):
def randitems_from_structure(fmt, t):
def ndarray_from_structure(items, fmt, t, flags=0):
def numpy_array_from_structure(items, fmt, t):
def cast_items(exporter, fmt, itemsize, shape=None):
def gencastshapes():
def genslices(n):
def genslices_ndim(ndim, shape):
def rslice(n, allow_empty=False):
def rslices(n, allow_empty=False):
def rslices_ndim(ndim, shape, iterations=5):
def ndarray_print(nd):
@functools.lru_cache() DCNL def resolve_address(host, port):
def cell(value):
def empty_cell(empty=True):
def to_ulps(x):
def ulps_check(expected, got, ulps=20):
def count_set_bits(n):
def partial_product(start, stop):
def py_factorial(n):
def acc_check(expected, got, rel_err=2e-15, abs_err=5e-323):
def parse_mtestfile(fname):
def parse_testfile(fname):
def verbose_print(arg):
def requires_load_dynamic(meth):
def gcd(a, b):
def isint(x):
def isnum(x):
def isRat(x):
def op_sequence(op, *classes):
def parameterize(cls):
def pdb_invoke(method, arg):
def consts(t):
def dump(co):
def fix_ext_py(filename):
def my_file_and_modname():
def func2():
def _ctrl_handler(sig):
def _interact(cookiejar, url, set_cookie_hdrs, hdr_name):
def evaluate_slice_index(arg):
def slice_indices(slice, length):
def compare_generic_iter(make_it, match):
def test_telnet(reads=(), cls=TelnetAlike):
def _default_chunk_size():
def R(seqn):
def L(seqn):
def skip_if_ABSTFN_contains_backslash(test):
def read_pyfile(filename):
def onearg(x):
def errfunc(*args):
def gen3():
def isEven(x):
def isOdd(x):
def take(n, seq):
def fact(n):
def R(seqn):
def L(seqn):
def strtod(s, mant_dig=53, min_exp=(-1021), max_exp=1024):
def bind_af_aware(sock, addr):
@contextlib.contextmanager DCNL def sys_modules_context():
@contextlib.contextmanager DCNL def namespace_tree_context(**kwargs):
def writes_bytecode_files(fxn):
def ensure_bytecode_path(bytecode_path):
@contextlib.contextmanager DCNL def create_modules(*names):
def _have_socket_can():
def _have_socket_rds():
def skipWithClientIf(condition, reason):
def requireAttrs(obj, *attributes):
def requireSocket(*args):
def isTipcAvailable():
def dbcheck(exprstr, globals=None, locals=None):
def countcalls(counts):
def window_funcs(stdscr):
def module_funcs(stdscr):
def R(seqn):
def L(seqn):
def powerset(U):
def cube(n):
def linegraph(G):
def faces(G):
def testfunction(self):
def signal_alarm(n):
def hexescape(char):
def urlopen(url, data=None, proxies=None):
def compile(file, cfile=None, dfile=None, doraise=False, optimize=(-1)):
def main(args=None):
def _extract_future_flags(globs):
def _normalize_module(module, depth=2):
def _indent(s, indent=4):
def _exception_traceback(exc_info):
def _ellipsis_match(want, got):
def _comment_line(line):
def testmod(m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False):
def testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser(), encoding=None):
def run_docstring_examples(f, globs, verbose=False, name='NoName', compileflags=None, optionflags=0):
def set_unittest_reportflags(flags):
def DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, **options):
def DocFileSuite(*paths, **kw):
def script_from_examples(s):
def testsource(module, name):
def debug_src(src, pm=False, globs=None):
def debug_script(src, pm=False, globs=None):
def debug(module, name, pm=False):
def copy(x):
def deepcopy(x, memo=None, _nil=[]):
def _keep_alive(x, memo):
def url2pathname(url):
def pathname2url(p):
def start_new_thread(function, args, kwargs={}):
def exit():
def get_ident():
def allocate_lock():
def stack_size(size=None):
def _set_sentinel():
def interrupt_main():
def make_parser(parser_list=[]):
def __dict_replace(s, d):
def escape(data, entities={}):
def unescape(data, entities={}):
def quoteattr(data, entities={}):
def prepare_input_source(source, base=''):
def parse(file, namespaces=True):
def parseString(string, namespaces=True):
def parseFragment(file, context, namespaces=True):
def parseFragmentString(string, context, namespaces=True):
def makeBuilder(options):
def registerDOMImplementation(name, factory):
def _good_enough(dom, features):
def getDOMImplementation(name=None, features=()):
def _write_data(writer, data):
def _clone_node(node, deep, newOwnerDocument):
def parse(file, parser=None, bufsize=None):
def parseString(string, parser=None):
def open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None):
def compress(data, compresslevel=9):
def decompress(data):
def quote(s):
def _find_executable(executable, path=None):
def _read_output(commandstring):
def _find_build_tool(toolname):
def _get_system_version():
def _remove_original_values(_config_vars):
def _save_modified_value(_config_vars, cv, newvalue):
def _supports_universal_builds():
def _find_appropriate_compiler(_config_vars):
def _remove_universal_flags(_config_vars):
def _remove_unsupported_archs(_config_vars):
def _override_all_archs(_config_vars):
def _check_for_unavailable_sdk(_config_vars):
def compiler_fixup(compiler_so, cc_args):
def customize_config_vars(_config_vars):
def customize_compiler(_config_vars):
def get_platform_osx(_config_vars, osname, release, machine):
def open(file, flag='r', mode=438):
def whichdb(filename):
def __newobj_ex__(cls, args, kwargs):
def _slotnames(cls):
def add_extension(module, name, code):
def remove_extension(module, name, code):
def Internaldate2tuple(resp):
def Int2AP(num):
def ParseFlags(resp):
def Time2Internaldate(date_time):
def _candidate_tempdir_list():
def _get_default_tempdir():
def _get_candidate_names():
def _mkstemp_inner(dir, pre, suf, flags):
def gettempprefix():
def gettempdir():
def mkstemp(suffix='', prefix=template, dir=None, text=False):
def mkdtemp(suffix='', prefix=template, dir=None):
def mktemp(suffix='', prefix=template, dir=None):
def NamedTemporaryFile(mode='w+b', buffering=(-1), encoding=None, newline=None, suffix='', prefix=template, dir=None, delete=True):
def match(pattern, string, flags=0):
def fullmatch(pattern, string, flags=0):
def search(pattern, string, flags=0):
def sub(pattern, repl, string, count=0, flags=0):
def subn(pattern, repl, string, count=0, flags=0):
def split(pattern, string, maxsplit=0, flags=0):
def findall(pattern, string, flags=0):
def compile(pattern, flags=0):
def purge():
def template(pattern, flags=0):
def escape(pattern):
def getopt(args, shortopts, longopts=[]):
def gnu_getopt(args, shortopts, longopts=[]):
def new_class(name, bases=(), kwds=None, exec_body=None):
def prepare_class(name, bases=(), kwds=None):
def _calculate_meta(meta, bases):
def clear_cache():
def urlparse(url, scheme='', allow_fragments=True):
def urlsplit(url, scheme='', allow_fragments=True):
def urlunparse(components):
def urlunsplit(components):
def urljoin(base, url, allow_fragments=True):
def urldefrag(url):
def unquote_to_bytes(string):
def unquote(string, encoding='utf-8', errors='replace'):
def parse_qs(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace'):
def parse_qsl(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace'):
def unquote_plus(string, encoding='utf-8', errors='replace'):
def quote(string, safe='/', encoding=None, errors=None):
def quote_plus(string, safe='', encoding=None, errors=None):
def quote_from_bytes(bs, safe='/'):
def urlencode(query, doseq=False, safe='', encoding=None, errors=None):
def to_bytes(url):
def unwrap(url):
def splittype(url):
def splithost(url):
def splituser(host):
def splitpasswd(user):
def splitport(host):
def splitnport(host, defport=(-1)):
def splitquery(url):
def splittag(url):
def splitattr(url):
def splitvalue(attr):
def _process_worker(call_queue, result_queue):
def _add_call_item_to_queue(pending_work_items, work_ids, call_queue):
def _queue_management_worker(executor_reference, processes, pending_work_items, work_ids_queue, call_queue, result_queue):
def namedtuple(typename, field_names, verbose=False, rename=False):
def _count_elements(mapping, iterable):
def lt(a, b):
def le(a, b):
def eq(a, b):
def ne(a, b):
def ge(a, b):
def gt(a, b):
def not_(a):
def truth(a):
def is_(a, b):
def is_not(a, b):
def abs(a):
def add(a, b):
def and_(a, b):
def floordiv(a, b):
def index(a):
def inv(a):
def lshift(a, b):
def mod(a, b):
def mul(a, b):
def neg(a):
def or_(a, b):
def pos(a):
def pow(a, b):
def rshift(a, b):
def sub(a, b):
def truediv(a, b):
def xor(a, b):
def concat(a, b):
def contains(a, b):
def countOf(a, b):
def delitem(a, b):
def getitem(a, b):
def indexOf(a, b):
def setitem(a, b, c):
def length_hint(obj, default=0):
def iadd(a, b):
def iand(a, b):
def iconcat(a, b):
def ifloordiv(a, b):
def ilshift(a, b):
def imod(a, b):
def imul(a, b):
def ior(a, b):
def ipow(a, b):
def irshift(a, b):
def isub(a, b):
def itruediv(a, b):
def ixor(a, b):
def reset():
def lookup(name, frame, locals):
def scanvars(reader, frame, locals):
def html(einfo, context=5):
def text(einfo, context=5):
def enable(display=1, logdir=None, context=5, format='html'):
def get_requirement_from_url(url):
def package_to_requirement(package_name):
def transform_hits(hits):
def get_summaries(ignore_hidden=True, ordered=True):
def get_similar_commands(name):
def search_packages_info(query):
def print_results(distributions, list_all_files):
def user_agent():
def get_file_content(url, comes_from=None, session=None):
def is_url(name):
def url_to_path(url):
def path_to_url(path):
def is_archive_file(name):
def make_option_group(group, parser):
def write_delete_marker_file(directory):
def running_under_virtualenv():
def virtualenv_no_global():
def __get_username():
def _get_build_prefix():
def distutils_scheme(dist_name, user=False, home=None, root=None):
def get_abbr_impl():
def get_impl_ver():
def get_platform():
def get_supported(versions=None, noarch=False):
def autocomplete():
def bootstrap():
def rmtree_errorhandler(func, path, exc_info):
def display_path(path):
def backup_dir(dir, ext='.bak'):
def find_command(cmd, paths=None, pathext=None):
def get_pathext(default_pathext=None):
def ask(message, options):
def is_installable_dir(path):
def is_svn_page(html):
def has_leading_dir(paths):
def make_path_relative(path, rel_to):
def normalize_path(path):
def splitext(path):
def renames(old, new):
def is_local(path):
def dist_is_local(dist):
def dist_in_usersite(dist):
def dist_in_site_packages(dist):
def dist_is_editable(dist):
def get_installed_distributions(local_only=True, skip=('setuptools', 'pip', 'python', 'distribute'), include_editables=True, editables_only=False):
def egg_link_path(dist):
def dist_location(dist):
def get_terminal_size():
def current_umask():
def unzip_file(filename, location, flatten=True):
def untar_file(filename, location):
def is_prerelease(vers):
def dict_to_sequence(d):
def get_netrc_auth(url):
def guess_filename(obj):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def unquote_unreserved(uri):
def requote_uri(uri):
def address_in_network(ip, net):
def dotted_netmask(mask):
def is_valid_cidr(string_network):
def should_bypass_proxies(url):
def get_environ_proxies(url):
def default_user_agent(name='python-requests'):
def parse_header_links(value):
def prepend_scheme_if_needed(url, new_scheme):
def get_auth_from_url(url):
def to_native_string(string, encoding='ascii'):
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):
def merge_cookies(cookiejar, cookies):
def description_of(file, name='stdin'):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d):
def itervalues(d):
def iteritems(d):
def with_metaclass(meta, base=object):
def _dnsname_match(dn, hostname, max_wildcards=1):
def match_hostname(cert, hostname):
def add_stderr_logger(level=logging.DEBUG):
def guess_content_type(filename, default='application/octet-stream'):
def format_header_param(name, value):
def choose_boundary():
def iter_field_objects(fields):
def iter_fields(fields):
def encode_multipart_formdata(fields, boundary=None):
def is_fp_closed(obj):
def current_time():
def assert_fingerprint(cert, fingerprint):
def resolve_cert_reqs(candidate):
def resolve_ssl_version(candidate):
def is_connection_dropped(conn):
def split_first(s, delims):
def parse_url(url):
def get_host(url):
def make_headers(keep_alive=None, accept_encoding=None, user_agent=None, basic_auth=None, proxy_basic_auth=None):
def connection_from_url(url, **kw):
def inject_into_urllib3():
def extract_from_urllib3():
def _basic_auth_str(username, password):
def dispatch_hook(key, hooks, hook_data, **kwargs):
def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):
def session():
def request(method, url, **kwargs):
def get(url, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):
def where():
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d, **kw):
def itervalues(d, **kw):
def iteritems(d, **kw):
def iterlists(d, **kw):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def get_supported_platform():
def register_loader_type(loader_type, provider_factory):
def get_provider(moduleOrReq):
def get_build_platform():
def compatible_platforms(provided, required):
def run_script(dist_spec, script_name):
def get_distribution(dist):
def load_entry_point(dist, group, name):
def get_entry_map(dist, group=None):
def get_entry_info(dist, group, name):
def get_default_cache():
def safe_name(name):
def safe_version(version):
def safe_extra(extra):
def to_filename(name):
def build_zipmanifest(path):
def register_finder(importer_type, distribution_finder):
def find_distributions(path_item, only=False):
def find_eggs_in_zip(importer, path_item, only=False):
def find_on_path(importer, path_item, only=False):
def register_namespace_handler(importer_type, namespace_handler):
def _handle_ns(packageName, path_item):
def declare_namespace(packageName):
def fixup_namespace_packages(path_item, parent=None):
def file_ns_handler(importer, path_item, packageName, module):
def normalize_path(filename):
def yield_lines(strs):
def parse_version(s):
def parse_requirements(strs):
def _get_mro(cls):
def _find_adapter(registry, ob):
def ensure_directory(path):
def split_sections(s):
def to_sax(walker, handler):
def SerializeError(Exception):
def getTreeBuilder(treeType, implementation=None, **kwargs):
def tostring(element):
def parse(doc, treebuilder=u'etree', encoding=None, namespaceHTMLElements=True):
def codecName(encoding):
def to_text(s, blank_if_none=True):
def is_text_or_none(string):
def getTreeWalker(treeType, implementation=None, **kwargs):
def _subst_vars(path, local_vars):
def _parse_makefile(filename, vars=None):
def get_makefile_filename():
def _init_posix(vars):
def _init_non_posix(vars):
def parse_config_h(fp, vars=None):
def get_config_h_filename():
def get_scheme_names():
def get_path_names():
def get_paths(scheme=_get_default_scheme(), vars=None, expand=True):
def get_path(name, scheme=_get_default_scheme(), vars=None, expand=True):
def get_config_vars(*args):
def get_config_var(name):
def get_platform():
def _main():
def stn(s, length, encoding, errors):
def nts(s, encoding, errors):
def nti(s):
def itn(n, digits=8, format=DEFAULT_FORMAT):
def calc_chksums(buf):
def copyfileobj(src, dst, length=None):
def filemode(mode):
def is_tarfile(name):
def copyfileobj(fsrc, fdst, length=(16 * 1024)):
def copyfile(src, dst):
def copymode(src, dst):
def copystat(src, dst):
def copy(src, dst):
def copy2(src, dst):
def ignore_patterns(*patterns):
def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2, ignore_dangling_symlinks=False):
def rmtree(path, ignore_errors=False, onerror=None):
def move(src, dst):
def _get_gid(name):
def _get_uid(name):
def _make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0, owner=None, group=None, logger=None):
def _make_zipfile(base_name, base_dir, verbose=0, dry_run=0, logger=None):
def get_archive_formats():
def register_archive_format(name, function, extra_args=None, description=''):
def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None, logger=None):
def get_unpack_formats():
def _check_unpack_options(extensions, function, extra_args):
def register_unpack_format(name, extensions, function, extra_args=None, description=''):
def unregister_unpack_format(name):
def _ensure_directory(path):
def _unpack_zipfile(filename, extract_dir):
def _unpack_tarfile(filename, extract_dir):
def unpack_archive(filename, extract_dir=None, format=None):
def get_resources_dests(resources_root, rules):
def convert_path(pathname):
def get_cache_base(suffix=None):
def path_to_cache_dir(path):
def split_filename(filename, project_name=None):
def parse_name_and_version(p):
def zip_dir(directory):
def iglob(path_glob):
def make_graph(dists, scheme=u'default'):
def get_dependent_dists(dists, dist):
def get_required_dists(dists, dist):
def make_dist(name, version, **kwargs):
def interpret(marker, execution_context=None):
def _suggest_semantic_version(s):
def _suggest_normalized_version(s):
def finder(package):
def finder_for_path(path):
def compatible_tags():
def _best_version(fields):
def _get_name_and_version(name, version, for_filename=False):
def get_all_distribution_names(url=None):
def default_environment():
def compile(marker):
def rehash(path, algo='sha256', blocksize=(1 << 20)):
def fix_script(path):
def root_is_purelib(name, wheeldir):
def move_wheel_files(name, req, wheeldir, user=False, home=None, root=None, pycompile=True, scheme=None):
@_unique DCNL def uninstallation_paths(dist):
def wheel_version(source_dir):
def check_compatibility(version, name):
def read_text_file(filename):
def _strip_postfix(req):
def _build_editable_options(req):
def parse_editable(editable_req, default_vcs=None):
def get_path_uid(path):
def open_logfile(filename, mode='a'):
def get_supported_platform():
def register_loader_type(loader_type, provider_factory):
def get_provider(moduleOrReq):
def get_build_platform():
def compatible_platforms(provided, required):
def run_script(dist_spec, script_name):
def get_distribution(dist):
def load_entry_point(dist, group, name):
def get_entry_map(dist, group=None):
def get_entry_info(dist, group, name):
def get_default_cache():
def safe_name(name):
def safe_version(version):
def safe_extra(extra):
def to_filename(name):
def build_zipmanifest(path):
def register_finder(importer_type, distribution_finder):
def find_distributions(path_item, only=False):
def find_eggs_in_zip(importer, path_item, only=False):
def find_on_path(importer, path_item, only=False):
def register_namespace_handler(importer_type, namespace_handler):
def _handle_ns(packageName, path_item):
def declare_namespace(packageName):
def fixup_namespace_packages(path_item, parent=None):
def file_ns_handler(importer, path_item, packageName, module):
def normalize_path(filename):
def yield_lines(strs):
def parse_version(s):
def parse_requirements(strs):
def _get_mro(cls):
def _find_adapter(registry, ob):
def ensure_directory(path):
def split_sections(s):
def strip_fragment(url):
def config_file(kind='local'):
def edit_config(filename, settings, dry_run=False):
def shquote(arg):
def write_file(filename, contents):
def expand_paths(inputs):
def extract_wininst_cfg(dist_filename):
def get_exe_prefixes(exe_filename):
def get_script_header(script_text, executable=sys_executable, wininst=False):
def uncache_zipdir(path):
def is_python(text, filename='<string>'):
def is_sh(executable):
def nt_quote_arg(arg):
def is_python_script(script_text, filename):
def get_win_launcher(type):
def rmtree(path, ignore_errors=False, onerror=auto_chmod):
def walk_revctrl(dirname=''):
def _default_revctrl(dirname=''):
def walk_egg(egg_dir):
def scan_module(egg_dir, base, name, stubs):
def iter_symbols(code):
def make_zipfile(zip_filename, base_dir, verbose=0, dry_run=0, compress=None, mode='w'):
def default_filter(src, dst):
def unpack_archive(filename, extract_dir, progress_filter=default_filter, drivers=None):
def unpack_directory(filename, extract_dir, progress_filter=default_filter):
def unpack_zipfile(filename, extract_dir, progress_filter=default_filter):
def unpack_tarfile(filename, extract_dir, progress_filter=default_filter):
def decode_as_string(text, encoding=None):
def parse_dir_entries(decoded_str):
def parse_externals_xml(decoded_str, prefix=''):
def parse_external_prop(lines):
def find_packages(where='.', exclude=()):
def findall(dir=os.curdir):
def DALS(s):
def makeSetup(**args):
def safe_repr(obj, short=False):
def has_win32com():
def is_private(prefix, base):
def _extract_future_flags(globs):
def _normalize_module(module, depth=2):
def _indent(s, indent=4):
def _exception_traceback(exc_info):
def _ellipsis_match(want, got):
def _comment_line(line):
def testmod(m=None, name=None, globs=None, verbose=None, isprivate=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False):
def testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser()):
def run_docstring_examples(f, globs, verbose=False, name='NoName', compileflags=None, optionflags=0):
def set_unittest_reportflags(flags):
def DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, **options):
def DocFileSuite(*paths, **kw):
def script_from_examples(s):
def testsource(module, name):
def debug_src(src, pm=False, globs=None):
def debug_script(src, pm=False, globs=None):
def debug(module, name, pm=False):
def make_trivial_sdist(dist_path, setup_py):
@contextlib.contextmanager DCNL def reset_setup_stop_context():
def _extract(self, member, path=None, pwd=None):
def _extract_member(self, member, targetpath, pwd):
def run_setup_py(cmd, pypath=None, path=None, data_stream=0, env=None):
def _iter_code(code):
def find_module(module, paths=None):
def get_module_constant(module, symbol, default=(-1), paths=None):
def extract_constant(code, symbol, default=(-1)):
def _get_unpatched(cls):
def assert_string_list(dist, attr, value):
def check_nsp(dist, attr, value):
def check_extras(dist, attr, value):
def assert_bool(dist, attr, value):
def check_requirements(dist, attr, value):
def check_entry_points(dist, attr, value):
def check_package_data(dist, attr, value):
def run_setup(setup_script, args):
def opener_for(ca_bundle=None):
def find_ca_bundle():
def have_pyrex():
def parse_bdist_wininst(name):
def distros_for_url(url, metadata=None):
def distros_for_location(location, basename, metadata=None):
def distros_for_filename(filename, metadata=None):
def interpret_distro_name(location, basename, metadata, py_version=None, precedence=SOURCE_DIST, platform=None):
def unique_everseen(iterable, key=None):
def unique_values(func):
@unique_values DCNL def find_external_links(url, page):
def htmldecode(text):
def _encode_auth(auth):
def open_with_auth(url, opener=urllib2.urlopen):
def local_open(url):
def get_all_headers(message, key):
def default_environment():
def compile(marker):
def _ifconfig_getnode():
def _ipconfig_getnode():
def _netbios_getnode():
def _unixdll_getnode():
def _windll_getnode():
def _random_getnode():
def getnode():
def uuid1(node=None, clock_seq=None):
def uuid3(namespace, name):
def uuid4():
def uuid5(namespace, name):
def _generate_overlap_table(prefix):
def open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None):
def compress(data, compresslevel=9):
def decompress(data):
def compile_command(source, filename='<input>', symbol='single'):
def libc_ver(executable=sys.executable, lib='', version='', chunksize=16384):
def _dist_try_harder(distname, version, id):
def linux_distribution(distname='', version='', id='', supported_dists=_supported_dists, full_distribution_name=1):
def dist(distname='', version='', id='', supported_dists=_supported_dists):
def popen(cmd, mode='r', bufsize=(-1)):
def _norm_version(version, build=''):
def _syscmd_ver(system='', release='', version='', supported_platforms=('win32', 'win16', 'dos')):
def _win32_getvalue(key, name, default=''):
def win32_ver(release='', version='', csd='', ptype=''):
def mac_ver(release='', versioninfo=('', '', ''), machine=''):
def java_ver(release='', vendor='', vminfo=('', '', ''), osinfo=('', '', '')):
def system_alias(system, release, version):
def _platform(*args):
def _node(default=''):
def _follow_symlinks(filepath):
def _syscmd_uname(option, default=''):
def _syscmd_file(target, default=''):
def architecture(executable=sys.executable, bits='', linkage=''):
def uname():
def system():
def node():
def release():
def version():
def machine():
def processor():
def _sys_version(sys_version=None):
def python_implementation():
def python_version():
def python_version_tuple():
def python_branch():
def python_revision():
def python_build():
def python_compiler():
def platform(aliased=0, terse=0):
def getcaps():
def listmailcapfiles():
def readmailcapfile(fp):
def parseline(line):
def parsefield(line, i, n):
def findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=[]):
def mksalt(method=None):
def crypt(word, salt=None):
def normalize_encoding(encoding):
def segregate(str):
def selective_len(str, max):
def selective_find(str, char, index, pos):
def insertion_unsort(str, extended):
def generate_generalized_integer(N, bias):
def generate_integers(baselen, deltas):
def decode_generalized_number(extended, extpos, bias, errors):
def insertion_sort(base, extended, errors):
def readmodule(module, path=None):
def readmodule_ex(module, path=None):
def _readmodule(module, path, inpackage=None):
def needsquoting(c, quotetabs, header):
def quote(c):
def encode(input, output, quotetabs, header=False):
def decode(input, output, header=False):
def ishex(c):
def unhex(s):
def get_c_type(name):
def reflow_lines(s, depth):
def is_simple(sum):
def find_sequence(fields, doing_specialization):
def create_makefile64(makefile, m32):
def fix_makefile(makefile):
def convert(t, convstr=True):
def callfuncs(t):
def verify(t, stat):
def test_method(method, testspecs, testfunc):
def test_unary(method, prec, exp_range, restricted_range, itr, stat):
def test_binary(method, prec, exp_range, restricted_range, itr, stat):
def test_ternary(method, prec, exp_range, restricted_range, itr, stat):
def test_format(method, prec, exp_range, restricted_range, itr, stat):
def test_round(method, prec, exprange, restricted_range, itr, stat):
def test_from_float(method, prec, exprange, restricted_range, itr, stat):
def test_quantize_api(method, prec, exprange, restricted_range, itr, stat):
def check_untested(funcdict, c_cls, p_cls):
def pi_float():
def pi_cdecimal():
def pi_decimal():
def prod(F, E):
def is_primitive_root(r, p, factors, exponents):
def ntt(lst, dir):
def ntt_convolute(a, b):
def toRoman(n):
def fromRoman(s):
def parse_opcode_signature(env, sig, signode):
def parse_pdb_command(env, sig, signode):
def get_lineno(node):
def extract_line(text, index):
def checker(*suffixes, **kwds):
@checker('.py', severity=4) DCNL def check_syntax(fn, lines):
@checker('.rst', severity=2) DCNL def check_suspicious_constructs(fn, lines):
@checker('.py', '.rst') DCNL def check_whitespace(fn, lines):
@checker('.rst', severity=0) DCNL def check_line_length(fn, lines):
@checker('.html', severity=2, falsepositives=True) DCNL def check_leaked_markup(fn, lines):
def find_module(modname):
def write_contents(f):
def add_dir_to_list(dirlist, dir):
def macosx_sdk_root():
def is_macosx_sdk_path(path):
def find_file(filename, std_dirs, paths):
def module_enabled(extlist, modname):
def find_module_file(module, dirlist):
def _getopt_flags(options):
def invisible_input(prompt='>>> DCSP '):
def fileopen(name, mode='wb', encoding=None):
def option_dict(options):
def srange(s, integer=_integerRE, integerRange=_integerRangeRE):
def abspath(path, expandvars=os.path.expandvars, expanduser=os.path.expanduser, join=os.path.join, getcwd=os.getcwd):
def processtime():
def askcolor(color=None, **options):
def check_rule(ui, repo, modified, basedir, output, inputs):
def touch(ui, repo, basedir):
def treat_file(filename, outfp):
def n_files_str(count):
def status(message, modal=False, info=None):
def mq_patches_applied():
@status('Getting DCSP the DCSP list DCSP of DCSP files DCSP that DCSP have DCSP been DCSP added/changed', info=(lambda x: n_files_str(len(x)))) DCNL def changed_files():
@status('Fixing DCSP whitespace', info=report_modified_files) DCNL def normalize_whitespace(file_paths):
@status('Fixing DCSP C DCSP file DCSP whitespace', info=report_modified_files) DCNL def normalize_c_whitespace(file_paths):
@status('Docs DCSP modified', modal=True) DCNL def docs_modified(file_paths):
@status('Misc/ACKS DCSP updated', modal=True) DCNL def credit_given(file_paths):
@status('Misc/NEWS DCSP updated', modal=True) DCNL def reported_news(file_paths):
@status('configure DCSP regenerated', modal=True, info=str) DCNL def regenerated_configure(file_paths):
@status('pyconfig.h.in DCSP regenerated', modal=True, info=str) DCNL def regenerated_pyconfig_h_in(file_paths):
def proplist(root, fn):
def is_builtin(s):
def combine_range(lines, start, end):
def analyze_python(source):
def raw_highlight(classified_text):
def ansi_highlight(classified_text, colors=default_ansi):
def html_highlight(classified_text, opener='<pre DCSP class="python">\n', closer='</pre>\n'):
def build_html_page(classified_text, title='python', css=default_css, html=default_html):
def alltt_escape(s):
def latex_highlight(classified_text, title='python', commands=default_latex_commands, document=default_latex_document):
def walk_python_files(paths, is_python=looks_like_python, exclude_dirs=None):
def has_pairs(profile):
def reset_profile():
def merge_profile():
def snapshot_profile():
def common_instructions(profile):
def common_pairs(profile):
def render_common_pairs(profile=None):
def translate(formula):
def cellname(x, y):
def colname2num(s):
def colnum2name(n):
def test_basic():
def test_gui():
def erase_menu(stdscr, menu_y):
def display_menu(stdscr, menu_y):
def parsecodes(codes, len=len, range=range):
def codegen(name, map, encodingname, comments=1):
def change_sequence(seq, action, seqno=_Unspecified, cond=_Unspecified):
def build_database():
def remove_old_versions(db):
def task_pidigits():
def task_regex():
def task_sort():
def task_compress_zlib():
def task_compress_bz2():
def task_hashing():
@with_open_mode('r') DCNL @with_sizes('medium') DCNL def read_bytewise(f):
@with_open_mode('r') DCNL @with_sizes('medium') DCNL def read_small_chunks(f):
@with_open_mode('r') DCNL @with_sizes('medium') DCNL def read_big_chunks(f):
@with_open_mode('r') DCNL @with_sizes('small', 'medium', 'large') DCNL def read_whole_file(f):
@with_open_mode('rt') DCNL @with_sizes('medium') DCNL def read_lines(f):
@with_open_mode('r') DCNL @with_sizes('medium') DCNL def seek_forward_bytewise(f):
@with_open_mode('r') DCNL @with_sizes('medium') DCNL def seek_forward_blockwise(f):
@with_open_mode('rb') DCNL @with_sizes('medium') DCNL def read_seek_bytewise(f):
@with_open_mode('rb') DCNL @with_sizes('medium') DCNL def read_seek_blockwise(f):
@with_open_mode('w') DCNL @with_sizes('small') DCNL def write_bytewise(f, source):
@with_open_mode('w') DCNL @with_sizes('medium') DCNL def write_small_chunks(f, source):
@with_open_mode('w') DCNL @with_sizes('medium') DCNL def write_medium_chunks(f, source):
@with_open_mode('w') DCNL @with_sizes('large') DCNL def write_large_chunks(f, source):
@with_open_mode('w+') DCNL @with_sizes('small') DCNL def modify_bytewise(f, source):
@with_open_mode('w+') DCNL @with_sizes('medium') DCNL def modify_small_chunks(f, source):
@with_open_mode('w+') DCNL @with_sizes('medium') DCNL def modify_medium_chunks(f, source):
@with_open_mode('wb+') DCNL @with_sizes('medium') DCNL def modify_seek_forward_bytewise(f, source):
@with_open_mode('wb+') DCNL @with_sizes('medium') DCNL def modify_seek_forward_blockwise(f, source):
@with_open_mode('wb+') DCNL @with_sizes('medium') DCNL def read_modify_bytewise(f, source):
@with_open_mode('wb+') DCNL @with_sizes('medium') DCNL def read_modify_blockwise(f, source):
def _write_instance_repr(out, visited, name, pyop_attrdict, address):
def move_in_stack(move_up):
def copy(src, dst, mkdirs=0):
def copytodir(src, dstdir):
def makedirs(dir):
def symlink(src, dst, mkdirs=0):
def pathjoin(*args):
def shellQuote(value):
def fatal(msg):
def fileContents(fn):
def runCommand(commandline):
def getTclTkVersion(configfile, versionline):
def checkEnvironment():
def parseOptions(args=None):
def extractArchive(builddir, archiveName):
def downloadURL(url, fname):
def verifyThirdPartyFile(url, checksum, fname):
def buildRecipe(recipe, basedir, archList):
def buildLibraries():
def buildDMG():
def setIcon(filePath, icnsPath):
def wrapper(func, *args, **kwds):
def rectangle(win, uly, ulx, lry, lrx):
def normcase(s):
def isabs(s):
def splitdrive(p):
def splitunc(p):
def split(p):
def basename(p):
def dirname(p):
def islink(path):
def lexists(path):
def ismount(path):
def expanduser(path):
def expandvars(path):
def normpath(path):
def relpath(path, start=curdir):
def clear_cache():
def cmp(f1, f2, shallow=True):
def cmpfiles(a, b, common, shallow=True):
def open(filename, flag='c', protocol=None, writeback=False):
def geohash(latitude, longitude, datedow):
def wrap_info(info):
def start_debugger(rpchandler, gui_adap_oid):
def start_remote_debugger(rpcclt, pyshell):
def close_remote_debugger(rpcclt):
def coding_spec(data):
def expand_substates(states):
def _parse_sequence(sequence):
def MultiCallCreator(widget):
def get_entity(expression):
def get_argspec(ob):
def _initializeTkVariantTests(root):
def isAquaTk():
def isCarbonTk():
def isCocoaTk():
def isXQuartz():
def tkVersionWarning(root):
def addOpenEventSupport(root, flist):
def overrideRootMenu(root, flist):
def setupApp(root, flist):
def any(name, alternates):
def find_paragraph(text, mark):
def reformat_paragraph(data, limit):
def reformat_comment(data, limit, comment_header):
def is_all_white(line):
def get_indent(line):
def get_comment_header(line):
def get(root):
def search_reverse(prog, chars, col):
def get_selection(text):
def get_line_col(index):
def listicons(icondir=ICONDIR):
def _sphinx_version():
def localcontext(ctx=None):
def _dec_from_triple(sign, coefficient, exponent, special=False):
def _normalize(op1, op2, prec=0):
def _decimal_lshift_exact(n, e):
def _sqrt_nearest(n, a):
def _rshift_nearest(x, shift):
def _div_nearest(a, b):
def _ilog(x, M, L=8):
def _dlog10(c, e, p):
def _dlog(c, e, p):
def _iexp(x, M, L=8):
def _dexp(c, e, p):
def _dpower(xc, xe, yc, ye, p):
def _log10_lb(c, correction={'1': 100, '2': 70, '3': 53, '4': 40, '5': 31, '6': 23, '7': 16, '8': 10, '9': 5}):
def _convert_other(other, raiseit=False, allow_float=False):
def _convert_for_comparison(self, other, equality_op=False):
def _parse_format_specifier(format_spec, _localeconv=None):
def _format_align(sign, body, spec):
def _group_lengths(grouping):
def _insert_thousands_sep(digits, spec, min_width=1):
def _format_sign(is_negative, spec):
def _format_number(is_negative, intpart, fracpart, exp, spec):
def _parse_makefile(filename, vars=None):
def get_makefile_filename():
def _generate_posix_vars():
def _init_posix(vars):
def _init_non_posix(vars):
def parse_config_h(fp, vars=None):
def get_config_h_filename():
def get_scheme_names():
def get_path_names():
def get_paths(scheme=_get_default_scheme(), vars=None, expand=True):
def get_path(name, scheme=_get_default_scheme(), vars=None, expand=True):
def get_config_vars(*args):
def get_config_var(name):
def get_platform():
def _main():
def new(key, msg=None, digestmod=None):
def sorted_list_difference(expected, actual):
def unorderable_list_difference(expected, actual):
def three_way_cmp(x, y):
def _count_diff_all_purpose(actual, expected):
def _ordered_count(iterable):
def _count_diff_hashable(actual, expected):
def is_instance(obj, klass):
def _isnotsuite(test):
def S_IMODE(mode):
def S_IFMT(mode):
def S_ISDIR(mode):
def S_ISCHR(mode):
def S_ISBLK(mode):
def S_ISREG(mode):
def S_ISFIFO(mode):
def S_ISLNK(mode):
def S_ISSOCK(mode):
def filemode(mode):
def run(statement, filename=None, sort=(-1)):
def runctx(statement, globals, locals, filename=None, sort=(-1)):
def binhex(inp, out):
def hexbin(inp, out):
def encode(in_file, out_file, name=None, mode=None):
def decode(in_file, out_file=None, mode=None, quiet=False):
def test():
def decode(ew):
def encode(string, charset='utf-8', encoding=None, lang=''):
def message_from_string(s, *args, **kws):
def message_from_bytes(s, *args, **kws):
def message_from_file(fp, *args, **kws):
def message_from_binary_file(fp, *args, **kws):
def parsedate_tz(data):
def _parsedate_tz(data):
def parsedate(data):
def mktime_tz(data):
def quote(str):
def add_charset(charset, header_enc=None, body_enc=None, output_charset=None):
def add_alias(alias, canonical):
def add_codec(charset, codecname):
def decode_header(header):
def make_header(decoded_seq, maxlinelen=None, header_name=None, continuation_ws=' DCSP '):
def _whatsnd(data):
def encode_base64(msg):
def encode_quopri(msg):
def encode_7or8bit(msg):
def header_check(octet):
def body_check(octet):
def header_length(bytearray):
def body_length(bytearray):
def unquote(s):
def header_encode(header_bytes, charset='iso-8859-1'):
def body_encode(body, maxlinelen=76, eol=NL):
def decode(encoded, eol=NL):
def _unquote_match(match):
def header_decode(s):
def header_length(bytearray):
def header_encode(header_bytes, charset='iso-8859-1'):
def body_encode(s, maxlinelen=76, eol=NL):
def decode(string):
def resolve_dotted_attribute(obj, attr, allow_dotted_names=True):
def list_public_methods(obj):
def getparser(use_datetime=False, use_builtin_types=False):
def dumps(params, methodname=None, methodresponse=None, encoding=None, allow_none=False):
def loads(data, use_datetime=False, use_builtin_types=False):
def gzip_encode(data):
def gzip_decode(data):
def nametofont(name):
def families(root=None, displayof=None):
def names(root=None):
def OptionName(widget):
def askinteger(title, prompt, **kw):
def askfloat(title, prompt, **kw):
def askstring(title, prompt, **kw):
def get_tests_modules(basepath=this_dir_path, gui=True, packages=None):
def get_tests(text=True, gui=True, packages=None):
def simulate_mouse_click(widget, x, y):
def askcolor(color=None, **options):
def showinfo(title=None, message=None, **options):
def showwarning(title=None, message=None, **options):
def showerror(title=None, message=None, **options):
def askquestion(title=None, message=None, **options):
def askokcancel(title=None, message=None, **options):
def askyesno(title=None, message=None, **options):
def askyesnocancel(title=None, message=None, **options):
def askretrycancel(title=None, message=None, **options):
def askopenfilename(**options):
def asksaveasfilename(**options):
def askopenfilenames(**options):
def askopenfile(mode='r', **options):
def askopenfiles(mode='r', **options):
def asksaveasfile(mode='w', **options):
def askdirectory(**options):
def test():
def insort_right(a, x, lo=0, hi=None):
def bisect_right(a, x, lo=0, hi=None):
def insort_left(a, x, lo=0, hi=None):
def bisect_left(a, x, lo=0, hi=None):
def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw):
def dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw):
def load(fp, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
def change_sequence(seq, action, seqno=_Unspecified, cond=_Unspecified):
def check(file):
def parse(source, filename='<unknown>', mode='exec'):
def literal_eval(node_or_string):
def dump(node, annotate_fields=True, include_attributes=False):
def copy_location(new_node, old_node):
def fix_missing_locations(node):
def increment_lineno(node, n=1):
def iter_fields(node):
def iter_child_nodes(node):
def get_docstring(node, clean=True):
def walk(node):
def tokenize_wrapper(input):
def pattern_convert(grammar, raw_node_info):
def tokenize(readline, tokeneater=printtoken):
def _get_normal_name(orig_enc):
def detect_encoding(readline):
def untokenize(iterable):
def generate_tokens(readline):
def load_grammar(gt='Grammar.txt', gp=None, save=True, force=False, logger=None):
def _newer(a, b):
def main(*args):
def Assign(target, source):
def Name(name, prefix=None):
def Attr(obj, attr):
def Comma():
def Dot():
def ArgList(args, lparen=LParen(), rparen=RParen()):
def Call(func_name, args=None, prefix=None):
def Newline():
def BlankLine():
def Subscript(index_node):
def String(string, prefix=None):
def ListComp(xp, fp, it, test=None):
def FromImport(package_name, name_leafs):
def ImportAndCall(node, results, names):
def is_tuple(node):
def is_list(node):
def attr_chain(obj, attr):
def in_special_context(node):
def is_probably_builtin(node):
def find_indentation(node):
def find_root(node):
def does_tree_import(package, name, node):
def is_import(node):
def touch_import(package, name, node):
def find_binding(name, node, package=None):
def _is_import_binding(node, name, package=None):
def get_refactorer(fixer_pkg='lib2to3', fixers=None, options=None):
def has_metaclass(parent):
def fixup_parse_tree(cls_node):
def fixup_simple_stmt(parent, i, stmt_node):
def fixup_indent(suite):
def traverse_imports(names):
def get_all_fix_names(fixer_pkg, remove_prefix=True):
def _get_head_types(pat):
def _get_headnode_dict(fixer_list):
def get_fixers_from_package(pkg_name):
def _formatparam(param, value=None, quote=1):
def read_environ():
def guess_scheme(environ):
def application_uri(environ):
def request_uri(environ, include_query=True):
def shift_path_info(environ):
def setup_testing_defaults(environ):
def is_hop_by_hop(header_name):
def validator(application):
def c2py(plural):
def _iterdump(connection):
def guess_type(url, strict=True):
def guess_all_extensions(type, strict=True):
def guess_extension(type, strict=True):
def add_type(type, ext, strict=True):
def isabs(s):
def split(s):
def splitdrive(p):
def islink(s):
def lexists(path):
def expandvars(path):
def expanduser(path):
def normpath(s):
def abspath(path):
def config_dict(filename):
def readconfig(cfgdict):
def __methodDict(cls, _dict):
def __methods(cls):
def Screen():
def _getpen():
def _getscreen():
def write_docstringdict(filename='turtle_docstringdict'):
def read_docstrings(lang):
def getmethparlist(ob):
def _turtle_docrevise(docstr):
def _screen_docrevise(docstr):
def url2pathname(pathname):
def pathname2url(pathname):
def escape(s, quote=True):
def unescape(s):
def _is_leap(year):
def _days_before_year(year):
def _days_in_month(year, month):
def _days_before_month(year, month):
def _ymd2ord(year, month, day):
def _ord2ymd(n):
def setraw(fd, when=TCSAFLUSH):
def setcbreak(fd, when=TCSAFLUSH):
def get_logger():
def log_to_stderr(level=None):
def _run_finalizers(minpriority=None):
def is_exiting():
def dump(obj, file, protocol=None):
def arbitrary_address(family):
def _validate_family(family):
def address_type(address):
def Client(address, family=None, authkey=None):
def SocketClient(address):
def dispatch(c, id, methodname, args=(), kwds={}):
def all_methods(obj):
def public_methods(obj):
def RebuildProxy(func, token, serializer, kwds):
def MakeProxyType(name, exposed, _cache={}):
def AutoProxy(token, serializer, manager=None, authkey=None, exposed=None, incref=True):
def main(fd):
def is_forking(argv):
def freeze_support():
def get_command_line(**kwds):
def spawn_main(pipe_handle, parent_pid=None, tracker_fd=None):
def get_preparation_data(name):
def prepare(data):
def import_main_path(main_path):
def fnmatch(name, pat):
def filter(names, pat):
def fnmatchcase(name, pat):
def translate(pat):
def all_suffixes():
def resolve_name(name, package):
def _find_spec_from_path(name, path=None):
def find_spec(name, package=None):
def set_package(fxn):
def set_loader(fxn):
def module_for_loader(fxn):
def interact(banner=None, readfunc=None, local=None):
def fileConfig(fname, defaults=None, disable_existing_loggers=True):
def _resolve(name):
def _create_formatters(cp):
def _install_handlers(cp, formatters):
def _handle_existing_loggers(existing, child_loggers, disable_existing):
def _install_loggers(cp, handlers, disable_existing):
def dictConfig(config):
def listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None):
def stopListening():
def getLevelName(level):
def addLevelName(level, levelName):
def _acquireLock():
def _releaseLock():
def setLogRecordFactory(factory):
def getLogRecordFactory():
def makeLogRecord(dict):
def _removeHandlerRef(wr):
def _addHandlerRef(handler):
def setLoggerClass(klass):
def getLoggerClass():
def basicConfig(**kwargs):
def getLogger(name=None):
def critical(msg, *args, **kwargs):
def error(msg, *args, **kwargs):
def exception(msg, *args, **kwargs):
def warning(msg, *args, **kwargs):
def info(msg, *args, **kwargs):
def debug(msg, *args, **kwargs):
def log(level, msg, *args, **kwargs):
def disable(level):
def shutdown(handlerList=_handlerList):
def _showwarning(message, category, filename, lineno, file=None, line=None):
def captureWarnings(capture):
def openpty():
def master_open():
def _open_terminal():
def slave_open(tty_name):
def fork():
def _writen(fd, data):
def _read(fd):
def _copy(master_fd, master_read=_read, stdin_read=_read):
def spawn(argv, master_read=_read, stdin_read=_read):
def create_string_buffer(init, size=None):
def CFUNCTYPE(restype, *argtypes, **kw):
def create_unicode_buffer(init, size=None):
def string_at(ptr, size=(-1)):
def dylib_info(filename):
def dyld_image_suffix_search(iterator, env=None):
def dyld_find(name, executable_path=None, env=None):
def framework_find(fn, executable_path=None, env=None):
def framework_info(filename):
def three_way_cmp(x, y):
def clearcache():
def getlines(filename, module_globals=None):
def checkcache(filename=None):
def updatecache(filename, module_globals=None):
def get_object_traceback(obj):
def take_snapshot():
def _quote(str, LegalChars=_LegalChars):
def _url_collapse_path(path):
def nobody_uid():
def executable(path):
def test(HandlerClass=BaseHTTPRequestHandler, ServerClass=HTTPServer, protocol='HTTP/1.0', port=8000, bind=''):
def exists(path):
def isfile(path):
def isdir(s):
def getsize(filename):
def getmtime(filename):
def getatime(filename):
def getctime(filename):
def commonprefix(m):
def samestat(s1, s2):
def samefile(f1, f2):
def sameopenfile(fp1, fp2):
def _splitext(p, sep, altsep, extsep):
def __py_new(name, data=''):
def __hash_new(name, data=''):
def _strcoll(a, b):
def _strxfrm(s):
def format(percent, value, grouping=False, monetary=False, *additional):
def format_string(f, val, grouping=False):
def currency(val, symbol=True, grouping=False, international=False):
def str(val):
def atof(string, func=float):
def atoi(str):
def normalize(localename):
def _parse_localename(localename):
def _build_localename(localetuple):
def getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):
def getlocale(category=LC_CTYPE):
def setlocale(category, locale=None):
def resetlocale(category=LC_ALL):
def _print_locale():
def tree(plist, l, a, f):
def input(files=None, inplace=False, backup='', bufsize=0, mode='r', openhook=None):
def close():
def nextfile():
def filename():
def lineno():
def filelineno():
def fileno():
def isfirstline():
def isstdin():
def parse150(resp):
def parse227(resp):
def parse229(resp, peer):
def parse257(resp):
def print_line(line):
def ftpcp(source, sourcename, target, targetname='', type='I'):
def test():
def gcd(a, b):
def dump_file(filename, head=None):
def show_formats():
def show_formats():
def safe_name(name):
def safe_version(version):
def to_filename(name):
def get_default_compiler(osname=None, platform=None):
def show_compilers():
def new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0):
def gen_preprocess_options(macros, include_dirs):
def gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries):
def _get_gid(name):
def _get_uid(name):
def make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0, owner=None, group=None):
def make_zipfile(base_name, base_dir, verbose=0, dry_run=0):
def check_archive_formats(formats):
def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None):
def get_python_version():
def get_python_inc(plat_specific=0, prefix=None):
def get_python_lib(plat_specific=0, standard_lib=0, prefix=None):
def customize_compiler(compiler):
def get_config_h_filename():
def get_makefile_filename():
def parse_config_h(fp, g=None):
def parse_makefile(fn, g=None):
def expand_makefile_vars(s, vars):
def _init_posix():
def _init_nt():
def get_config_vars(*args):
def get_config_var(name):
def setup(**attrs):
def run_setup(script_name, script_args=None, stop_after='run'):
def get_platform():
def convert_path(pathname):
def change_root(new_root, pathname):
def check_environ():
def subst_vars(s, local_vars):
def split_quoted(s):
def execute(func, args, msg=None, verbose=0, dry_run=0):
def strtobool(val):
def byte_compile(py_files, optimize=0, force=0, prefix=None, base_dir=None, verbose=1, dry_run=0, direct=None):
def rfc822_escape(header):
def run_2to3(files, fixer_names=None, options=None, explicit=None):
def copydir_run_2to3(src, dest, template=None, fixer_names=None, options=None, explicit=None):
def make_local_path(s):
def copy_xxmodule_c(directory):
def fixup_build_ext(cmd):
def can_fs_encode(filename):
def wrap_text(text, width):
def translate_longopt(opt):
def fix_help_options(options):
def findall(dir=os.curdir):
def glob_to_re(pattern):
def translate_pattern(pattern, anchor=1, prefix=None, is_regex=0):
def _copy_file_contents(src, dst, buffer_size=(16 * 1024)):
def copy_file(src, dst, preserve_mode=1, preserve_times=1, update=0, link=None, verbose=1, dry_run=0):
def move_file(src, dst, verbose=1, dry_run=0):
def write_file(filename, contents):
def get_build_version():
def normalize_and_reduce_paths(paths):
def removeDuplicates(variable):
def find_vcvarsall(version):
def query_vcvarsall(version, arch='x86'):
def read_keys(base, key):
def read_values(base, key):
def get_build_version():
def get_build_architecture():
def normalize_and_reduce_paths(paths):
def splitUp(pred):
def split_provision(value):
def get_msvcr():
def check_config_h():
def _find_exe_version(cmd):
def get_versions():
def is_cygwingcc():
def read_setup_file(filename):
def spawn(cmd, search_path=1, verbose=0, dry_run=0):
def _nt_quote_args(args):
def find_executable(executable, path=None):
def newer(source, target):
def newer_pairwise(sources, targets):
def newer_group(sources, target, missing='error'):
def mkpath(name, mode=511, verbose=1, dry_run=0):
def create_tree(base_dir, files, mode=511, verbose=1, dry_run=0):
def copy_tree(src, dst, preserve_mode=1, preserve_times=1, preserve_symlinks=0, update=0, verbose=1, dry_run=0):
def _build_cmdtuple(path, cmdtuples):
def remove_tree(directory, verbose=1, dry_run=0):
def ensure_relative(path):
def recursive_repr(fillvalue='...'):
def is_unavailable_exception(e):
@contextlib.contextmanager DCNL def captured_stdout(encoding='utf-8'):
def _calc_errors(actual, expected):
def approx_equal(x, y, tol=1e-12, rel=1e-07):
def load_tests(loader, tests, ignore):
def sample_func(v):
def run_gdb(*args, **env_vars):
def iterfunc(seqn):
def itermulti(seqn):
def escapestr(text, ampm):
def genblock(seed, length, step=1024, generator=random):
def choose_lines(source, number, seed=None, generator=random):
def has_sound(sound):
def _get_cscript_path():
def _have_soundcard():
def lcg(x, length=16):
def pysiphash(uint64):
def skip_unless_internalhash(test):
def add_ordered_mock_handlers(opener, meth_spec):
def CollectObjectIDs(ids, obj):
def eggs(x, y):
def readline_generator(f):
def native_type_range(fmt):
def randrange_fmt(mode, char, obj):
def gen_item(fmt, obj):
def gen_items(n, fmt, obj):
def randitems(n, obj='ndarray', mode=None, char=None):
def iter_mode(n, obj='ndarray'):
def iter_format(nitems, testobj='ndarray'):
def is_memoryview_format(fmt):
def atomp(lst):
def prod(lst):
def strides_from_shape(ndim, shape, itemsize, layout):
def _ca(items, s):
def _fa(items, s):
def indices(shape):
def getindex(ndim, ind, strides):
def transpose(src, shape):
def _flatten(lst):
def flatten(lst):
def slice_shape(lst, slices):
def multislice(lst, slices):
def m_assign(llst, rlst, lslices, rslices):
def cmp_structure(llst, rlst, lslices, rslices):
def multislice_assign(llst, rlst, lslices, rslices):
def verify_structure(memlen, itemsize, ndim, shape, strides, offset):
def memory_index(indices, t):
def is_overlapping(t):
def rand_structure(itemsize, valid, maxdim=5, maxshape=16, shape=()):
def randslice_from_slicelen(slicelen, listlen):
def randslice_from_shape(ndim, shape):
def rand_aligned_slices(maxdim=5, maxshape=16):
def randitems_from_structure(fmt, t):
def ndarray_from_structure(items, fmt, t, flags=0):
def numpy_array_from_structure(items, fmt, t):
def cast_items(exporter, fmt, itemsize, shape=None):
def gencastshapes():
def genslices(n):
def genslices_ndim(ndim, shape):
def rslice(n, allow_empty=False):
def rslices(n, allow_empty=False):
def rslices_ndim(ndim, shape, iterations=5):
def ndarray_print(nd):
@functools.lru_cache() DCNL def resolve_address(host, port):
def cell(value):
def empty_cell(empty=True):
def to_ulps(x):
def ulps_check(expected, got, ulps=20):
def count_set_bits(n):
def partial_product(start, stop):
def py_factorial(n):
def acc_check(expected, got, rel_err=2e-15, abs_err=5e-323):
def parse_mtestfile(fname):
def parse_testfile(fname):
def verbose_print(arg):
def requires_load_dynamic(meth):
def gcd(a, b):
def isint(x):
def isnum(x):
def isRat(x):
def op_sequence(op, *classes):
def parameterize(cls):
def pdb_invoke(method, arg):
def consts(t):
def dump(co):
def fix_ext_py(filename):
def my_file_and_modname():
def func2():
def _ctrl_handler(sig):
def _interact(cookiejar, url, set_cookie_hdrs, hdr_name):
def evaluate_slice_index(arg):
def slice_indices(slice, length):
def compare_generic_iter(make_it, match):
def test_telnet(reads=(), cls=TelnetAlike):
def _default_chunk_size():
def R(seqn):
def L(seqn):
def skip_if_ABSTFN_contains_backslash(test):
def read_pyfile(filename):
def onearg(x):
def errfunc(*args):
def gen3():
def isEven(x):
def isOdd(x):
def take(n, seq):
def fact(n):
def R(seqn):
def L(seqn):
def strtod(s, mant_dig=53, min_exp=(-1021), max_exp=1024):
def bind_af_aware(sock, addr):
@contextlib.contextmanager DCNL def sys_modules_context():
@contextlib.contextmanager DCNL def namespace_tree_context(**kwargs):
def writes_bytecode_files(fxn):
def ensure_bytecode_path(bytecode_path):
@contextlib.contextmanager DCNL def create_modules(*names):
def _have_socket_can():
def _have_socket_rds():
def skipWithClientIf(condition, reason):
def requireAttrs(obj, *attributes):
def requireSocket(*args):
def isTipcAvailable():
def dbcheck(exprstr, globals=None, locals=None):
def countcalls(counts):
def window_funcs(stdscr):
def module_funcs(stdscr):
def R(seqn):
def L(seqn):
def powerset(U):
def cube(n):
def linegraph(G):
def faces(G):
def testfunction(self):
def signal_alarm(n):
def hexescape(char):
def urlopen(url, data=None, proxies=None):
def compile(file, cfile=None, dfile=None, doraise=False, optimize=(-1)):
def main(args=None):
def _extract_future_flags(globs):
def _normalize_module(module, depth=2):
def _indent(s, indent=4):
def _exception_traceback(exc_info):
def _ellipsis_match(want, got):
def _comment_line(line):
def testmod(m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False):
def testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser(), encoding=None):
def run_docstring_examples(f, globs, verbose=False, name='NoName', compileflags=None, optionflags=0):
def set_unittest_reportflags(flags):
def DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, **options):
def DocFileSuite(*paths, **kw):
def script_from_examples(s):
def testsource(module, name):
def debug_src(src, pm=False, globs=None):
def debug_script(src, pm=False, globs=None):
def debug(module, name, pm=False):
def copy(x):
def deepcopy(x, memo=None, _nil=[]):
def _keep_alive(x, memo):
def url2pathname(url):
def pathname2url(p):
def start_new_thread(function, args, kwargs={}):
def exit():
def get_ident():
def allocate_lock():
def stack_size(size=None):
def _set_sentinel():
def interrupt_main():
def make_parser(parser_list=[]):
def __dict_replace(s, d):
def escape(data, entities={}):
def unescape(data, entities={}):
def quoteattr(data, entities={}):
def prepare_input_source(source, base=''):
def parse(file, namespaces=True):
def parseString(string, namespaces=True):
def parseFragment(file, context, namespaces=True):
def parseFragmentString(string, context, namespaces=True):
def makeBuilder(options):
def registerDOMImplementation(name, factory):
def _good_enough(dom, features):
def getDOMImplementation(name=None, features=()):
def _write_data(writer, data):
def _clone_node(node, deep, newOwnerDocument):
def parse(file, parser=None, bufsize=None):
def parseString(string, parser=None):
def open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None):
def compress(data, compresslevel=9):
def decompress(data):
def quote(s):
def _find_executable(executable, path=None):
def _read_output(commandstring):
def _find_build_tool(toolname):
def _get_system_version():
def _remove_original_values(_config_vars):
def _save_modified_value(_config_vars, cv, newvalue):
def _supports_universal_builds():
def _find_appropriate_compiler(_config_vars):
def _remove_universal_flags(_config_vars):
def _remove_unsupported_archs(_config_vars):
def _override_all_archs(_config_vars):
def _check_for_unavailable_sdk(_config_vars):
def compiler_fixup(compiler_so, cc_args):
def customize_config_vars(_config_vars):
def customize_compiler(_config_vars):
def get_platform_osx(_config_vars, osname, release, machine):
def open(file, flag='r', mode=438):
def whichdb(filename):
def __newobj_ex__(cls, args, kwargs):
def _slotnames(cls):
def add_extension(module, name, code):
def remove_extension(module, name, code):
def Internaldate2tuple(resp):
def Int2AP(num):
def ParseFlags(resp):
def Time2Internaldate(date_time):
def _candidate_tempdir_list():
def _get_default_tempdir():
def _get_candidate_names():
def _mkstemp_inner(dir, pre, suf, flags):
def gettempprefix():
def gettempdir():
def mkstemp(suffix='', prefix=template, dir=None, text=False):
def mkdtemp(suffix='', prefix=template, dir=None):
def mktemp(suffix='', prefix=template, dir=None):
def NamedTemporaryFile(mode='w+b', buffering=(-1), encoding=None, newline=None, suffix='', prefix=template, dir=None, delete=True):
def match(pattern, string, flags=0):
def fullmatch(pattern, string, flags=0):
def search(pattern, string, flags=0):
def sub(pattern, repl, string, count=0, flags=0):
def subn(pattern, repl, string, count=0, flags=0):
def split(pattern, string, maxsplit=0, flags=0):
def findall(pattern, string, flags=0):
def compile(pattern, flags=0):
def purge():
def template(pattern, flags=0):
def escape(pattern):
def getopt(args, shortopts, longopts=[]):
def gnu_getopt(args, shortopts, longopts=[]):
def new_class(name, bases=(), kwds=None, exec_body=None):
def prepare_class(name, bases=(), kwds=None):
def _calculate_meta(meta, bases):
def clear_cache():
def urlparse(url, scheme='', allow_fragments=True):
def urlsplit(url, scheme='', allow_fragments=True):
def urlunparse(components):
def urlunsplit(components):
def urljoin(base, url, allow_fragments=True):
def urldefrag(url):
def unquote_to_bytes(string):
def unquote(string, encoding='utf-8', errors='replace'):
def parse_qs(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace'):
def parse_qsl(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace'):
def unquote_plus(string, encoding='utf-8', errors='replace'):
def quote(string, safe='/', encoding=None, errors=None):
def quote_plus(string, safe='', encoding=None, errors=None):
def quote_from_bytes(bs, safe='/'):
def urlencode(query, doseq=False, safe='', encoding=None, errors=None):
def to_bytes(url):
def unwrap(url):
def splittype(url):
def splithost(url):
def splituser(host):
def splitpasswd(user):
def splitport(host):
def splitnport(host, defport=(-1)):
def splitquery(url):
def splittag(url):
def splitattr(url):
def splitvalue(attr):
def _process_worker(call_queue, result_queue):
def _add_call_item_to_queue(pending_work_items, work_ids, call_queue):
def _queue_management_worker(executor_reference, processes, pending_work_items, work_ids_queue, call_queue, result_queue):
def namedtuple(typename, field_names, verbose=False, rename=False):
def _count_elements(mapping, iterable):
def lt(a, b):
def le(a, b):
def eq(a, b):
def ne(a, b):
def ge(a, b):
def gt(a, b):
def not_(a):
def truth(a):
def is_(a, b):
def is_not(a, b):
def abs(a):
def add(a, b):
def and_(a, b):
def floordiv(a, b):
def index(a):
def inv(a):
def lshift(a, b):
def mod(a, b):
def mul(a, b):
def neg(a):
def or_(a, b):
def pos(a):
def pow(a, b):
def rshift(a, b):
def sub(a, b):
def truediv(a, b):
def xor(a, b):
def concat(a, b):
def contains(a, b):
def countOf(a, b):
def delitem(a, b):
def getitem(a, b):
def indexOf(a, b):
def setitem(a, b, c):
def length_hint(obj, default=0):
def iadd(a, b):
def iand(a, b):
def iconcat(a, b):
def ifloordiv(a, b):
def ilshift(a, b):
def imod(a, b):
def imul(a, b):
def ior(a, b):
def ipow(a, b):
def irshift(a, b):
def isub(a, b):
def itruediv(a, b):
def ixor(a, b):
def reset():
def lookup(name, frame, locals):
def scanvars(reader, frame, locals):
def html(einfo, context=5):
def text(einfo, context=5):
def enable(display=1, logdir=None, context=5, format='html'):
def _ifconfig_getnode():
def _ipconfig_getnode():
def _netbios_getnode():
def _unixdll_getnode():
def _windll_getnode():
def _random_getnode():
def getnode():
def uuid1(node=None, clock_seq=None):
def uuid3(namespace, name):
def uuid4():
def uuid5(namespace, name):
def _generate_overlap_table(prefix):
def open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None):
def compress(data, compresslevel=9):
def decompress(data):
def compile_command(source, filename='<input>', symbol='single'):
def libc_ver(executable=sys.executable, lib='', version='', chunksize=16384):
def _dist_try_harder(distname, version, id):
def linux_distribution(distname='', version='', id='', supported_dists=_supported_dists, full_distribution_name=1):
def dist(distname='', version='', id='', supported_dists=_supported_dists):
def popen(cmd, mode='r', bufsize=(-1)):
def _norm_version(version, build=''):
def _syscmd_ver(system='', release='', version='', supported_platforms=('win32', 'win16', 'dos')):
def _win32_getvalue(key, name, default=''):
def win32_ver(release='', version='', csd='', ptype=''):
def mac_ver(release='', versioninfo=('', '', ''), machine=''):
def java_ver(release='', vendor='', vminfo=('', '', ''), osinfo=('', '', '')):
def system_alias(system, release, version):
def _platform(*args):
def _node(default=''):
def _follow_symlinks(filepath):
def _syscmd_uname(option, default=''):
def _syscmd_file(target, default=''):
def architecture(executable=sys.executable, bits='', linkage=''):
def uname():
def system():
def node():
def release():
def version():
def machine():
def processor():
def _sys_version(sys_version=None):
def python_implementation():
def python_version():
def python_version_tuple():
def python_branch():
def python_revision():
def python_build():
def python_compiler():
def platform(aliased=0, terse=0):
def getcaps():
def listmailcapfiles():
def readmailcapfile(fp):
def parseline(line):
def parsefield(line, i, n):
def findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=[]):
def mksalt(method=None):
def crypt(word, salt=None):
def normalize_encoding(encoding):
def segregate(str):
def selective_len(str, max):
def selective_find(str, char, index, pos):
def insertion_unsort(str, extended):
def generate_generalized_integer(N, bias):
def generate_integers(baselen, deltas):
def decode_generalized_number(extended, extpos, bias, errors):
def insertion_sort(base, extended, errors):
def readmodule(module, path=None):
def readmodule_ex(module, path=None):
def _readmodule(module, path, inpackage=None):
def needsquoting(c, quotetabs, header):
def quote(c):
def encode(input, output, quotetabs, header=False):
def decode(input, output, header=False):
def ishex(c):
def unhex(s):
def extract_deps(fname, legal_deps):
def resolve_deps(header_deps):
def is_kernel_thread(proc):
def sort_stats(stats, sortedby=None, tree=False, reverse=True):
def safe_makedirs(path):
def user_config_dir():
def user_cache_dir():
def system_config_dir():
def normalize(name):
def __signal_handler(signal, frame):
def end():
def start(config, args):
def main():
def convert_timedelta(delta):
def split_cmdline(cmdline):
def to_fahrenheit(celsius):
def global_message():
def _linux_os_release():
def get_device_handles():
def get_device_name(device_handle):
def get_mem(device_handle):
def get_proc(device_handle):
def glances_logger(env_key='LOG_CFG'):
def getTimeSinceLastUpdate(IOType):
def print_data(data, item=None, fmt=None):
def print_data_keys(data, item=None):
def make_key_filter(include):
def mb_call(func, *args, **kwargs):
def submit_albums(collection_id, release_ids):
def prefix(it, count):
def acoustid_match(log, path):
def _all_releases(items):
def fingerprint_task(log, task, session):
def apply_acoustid_metadata(task, session):
def submit_items(log, userkey, items, chunksize=64):
def fingerprint_item(log, item, write=False):
def unescape(text):
def extract_text_in(html, starttag):
def search_pairs(item):
def slug(text):
def remove_credits(text):
def _scrape_strip_cruft(html, plain_text_out=False):
def scrape_lyrics_from_html(html):
def play(command_str, selection, paths, open_args, log, item_type='track', keep_open=False):
def pairwise(iterable):
def span_from_str(span_str):
def complete_year_spans(spans):
def extend_year_spans(spans, spanlen, start=1900, end=2014):
def build_year_spans(year_spans_str):
def str2fmt(s):
def format_span(fmt, yearfrom, yearto, fromnchars, tonchars):
def extract_modes(spans):
def build_alpha_spans(alpha_spans_str, alpha_regexs):
def write_metadata_im(file, metadata):
def write_metadata_pil(file, metadata):
def copy_c_string(c_string):
def call(args):
def rewriter(field, rules):
def fetch_tracks(user, page, limit):
def call(args):
def _logged_get(log, *args, **kwargs):
def apply_item_changes(lib, item, move, pretend, write):
def convert_perm(perm):
def check_permissions(path, permission):
def assert_permissions(path, permission, log):
def dirs_in_library(library, item):
def make_bpd_error(s_code, s_message):
def cast_arg(t, val):
def play_simple(paths):
def play_complicated(paths):
def bpm(max_strokes):
def replace_ext(path, ext):
def get_format(fmt=None):
def should_transcode(item, fmt):
def _missing_count(album):
def _item(track_info, album_info, album_id):
def _generate_urls(mbid):
def load_meta_sources():
def load_item_types():
def _get_feeds_dir(lib):
def _build_m3u_filename(basename):
def _write_m3u(m3u_path, items_paths):
def equal(seq):
def equal_fields(matchdict, field):
def all_matches(names, pattern):
def bad_title(title):
def apply_matches(d):
def filename_task(task, session):
def edit(filename, log):
def dump(arg):
def load(s):
def _safe_value(obj, key, value):
def flatten(obj, fields):
def apply_(obj, data):
def _match_progs(value, progs):
def api_url(host, port, endpoint):
def password_data(username, password):
def create_headers(user_id, token=None):
def get_token(host, port, headers, auth_data):
def get_user(host, port, username):
def update_kodi(host, port, user, password):
def summary(task):
def deduplicate(seq):
def flatten_tree(elem, path, branches):
def find_parents(candidate, branches):
def get_music_section(host, port, token, library_name):
def update_plex(host, port, token, library_name):
def append_token(url, token):
def _compile_func(body):
def is_url(path):
def split_on_feat(artist):
def contains_feat(title):
def find_feat_part(artist, albumartist):
def _confirm(objs, album):
def _rep(obj, expand=False):
def json_generator(items, root, expand=False):
def is_expand():
def resource(name):
def resource_query(name):
def resource_list(name):
def _get_unique_table_field_values(model, field, sort_field):
def _length(obj, album):
def _equal_chance_permutation(objs, field='albumartist'):
def _take(iter, num):
def _take_time(iter, secs, album):
def random_objs(objs, album, number=1, time=None, equal_chance=False):
def random_func(lib, opts, args):
@contextmanager DCNL def chdir(d):
def bump_version(version):
@release.command() DCNL @click.argument('version') DCNL def bump(version):
def get_latest_changelog():
def rst2md(text):
def changelog_as_markdown():
@release.command() DCNL def changelog():
def get_version(index=0):
@release.command() DCNL def version():
@release.command() DCNL def datestamp():
@release.command() DCNL def prep():
@release.command() DCNL def publish():
@release.command() DCNL def ghrelease():
def preserve_plugin_listeners():
def convert(in_file, out_file, tag):
def _normexpr(expr):
def _normparse(text):
def _params(url):
def safe_open_w(path):
def main(argv=None):
@contextmanager DCNL def control_stdin(input=None):
@contextmanager DCNL def capture_stdout():
def _convert_args(args):
def has_program(cmd, args=['--version']):
def generate_album_info(album_id, track_ids):
def generate_track_info(track_id='track DCSP info', values={}):
def is_lyrics_content_ok(title, text):
def test_album_info(*args, **kwargs):
def mocked_get_release_by_id(id_, includes=[], release_status=[], release_type=[]):
def mocked_get_recording_by_id(id_, includes=[], release_status=[], release_type=[]):
def _clear_weights():
def _to_epoch_time(date):
def _parse_periods(pattern):
def parse_query_part(part, query_classes={}, prefixes={}, default_class=query.SubstringQuery):
def construct_query_part(model_cls, prefixes, query_part):
def query_from_strings(query_cls, model_cls, prefixes, query_parts):
def construct_sort_part(model_cls, part):
def sort_from_strings(model_cls, sort_parts):
def parse_sorted_query(model_cls, parts, prefixes={}):
def apply_item_metadata(item, track_info):
def apply_metadata(album_info, mapping):
def current_metadata(items):
def assign_items(items, tracks):
def track_index_changed(item, track_info):
def track_distance(item, track_info, incl_artist=False):
def distance(items, album_info, mapping):
def match_by_id(items):
def _recommendation(results):
def _sort_candidates(candidates):
def _add_candidate(items, results, info):
def tag_album(items, search_artist=None, search_album=None, search_ids=[]):
def tag_item(item, search_artist=None, search_title=None, search_ids=[]):
def _string_dist_basic(str1, str2):
def string_dist(str1, str2):
def album_for_mbid(release_id):
def track_for_mbid(recording_id):
@plugins.notify_info_yielded(u'albuminfo_received') DCNL def albums_for_id(album_id):
@plugins.notify_info_yielded(u'trackinfo_received') DCNL def tracks_for_id(track_id):
@plugins.notify_info_yielded(u'albuminfo_received') DCNL def album_candidates(items, artist, album, va_likely):
@plugins.notify_info_yielded(u'trackinfo_received') DCNL def item_candidates(item, artist, title):
def configure():
def _preferred_alias(aliases):
def _preferred_release_event(release):
def _flatten_artist_credit(credit):
def track_info(recording, index=None, medium=None, medium_index=None, medium_total=None):
def _set_date_str(info, date_str, original=False):
def album_info(release):
def match_album(artist, album, tracks=None):
def match_track(artist, title):
def _parse_id(s):
def album_for_id(releaseid):
def track_for_id(releaseid):
def logsafe(val):
def load_plugins(names=()):
def find_plugins():
def commands():
def queries():
def track_distance(item, info):
def album_distance(items, album_info, mapping):
def candidates(items, artist, album, va_likely):
def item_candidates(item, artist, title):
def album_for_id(album_id):
def track_for_id(track_id):
def template_funcs():
def import_stages():
def item_field_getters():
def album_field_getters():
def event_handlers():
def send(event, **arguments):
def feat_tokens(for_artist=True):
def sanitize_choices(choices, choices_all):
def notify_info_yielded(event):
def parse_query_parts(parts, model_cls):
def parse_query_string(s, model_cls):
def _sqlite_bytelower(bytestring):
def _int_arg(s):
def _in_encoding():
def _out_encoding():
def _stream_encoding(stream, default='utf-8'):
def decargs(arglist):
def print_(*strings, **kwargs):
def _bool_fallback(a, b):
def should_write(write_opt=None):
def should_move(move_opt=None):
def input_(prompt=None):
def input_options(options, require=False, prompt=None, fallback_prompt=None, numrange=None, default=None, max_width=72):
def input_yn(prompt, require=False):
def input_select_objects(prompt, objs, rep):
def human_bytes(size):
def human_seconds(interval):
def human_seconds_short(interval):
def _colorize(color, text):
def colorize(color_name, text):
def _colordiff(a, b, highlight='text_highlight', minor_highlight='text_highlight_minor'):
def colordiff(a, b, highlight='text_highlight'):
def get_path_formats(subview=None):
def get_replacements():
def term_width():
def _field_diff(field, old, new):
def show_model_changes(new, old=None, fields=None, always=False):
def show_path_changes(path_changes):
def _store_dict(option, opt_str, value, parser):
def _load_plugins(config):
def _setup(options, lib=None):
def _configure(options):
def _open_library(config):
def _raw_main(args, lib=None):
def main(args=None):
def _do_query(lib, query, album, also_items=True):
def _print_keys(query):
def disambig_string(info):
def dist_string(dist):
def penalty_string(distance, limit=None):
def show_change(cur_artist, cur_album, match):
def show_item_change(item, match):
def summarize_items(items, singleton):
def _summary_judgment(rec):
def choose_candidate(candidates, singleton, rec, cur_artist=None, cur_album=None, item=None, itemcount=None, choices=[]):
def manual_search(session, task):
def manual_id(session, task):
def abort_action(session, task):
def import_files(lib, paths, query):
def list_items(lib, query, album, fmt=u''):
def update_items(lib, query, album, move, pretend, fields):
def remove_items(lib, query, album, delete, force):
def show_stats(lib, query, exact):
def modify_items(lib, mods, dels, query, write, move, album, confirm):
def print_and_modify(obj, mods, dels):
def modify_parse_args(args):
def move_items(lib, dest, query, copy, album, pretend, confirm=False, export=False):
def write_items(lib, query, pretend, force):
def config_edit():
def completion_script(commands):
def _open_state():
def _save_state(state):
def progress_add(toppath, *paths):
def progress_element(toppath, path):
def has_progress(toppath):
def history_add(paths):
def history_get():
def read_tasks(session):
def query_tasks(session):
@pipeline.mutator_stage DCNL def lookup_candidates(session, task):
@pipeline.stage DCNL def user_query(session, task):
def resolve_duplicates(session, task):
@pipeline.mutator_stage DCNL def import_asis(session, task):
def apply_choice(session, task):
@pipeline.mutator_stage DCNL def plugin_stage(session, func, task):
@pipeline.stage DCNL def manipulate_files(session, task):
@pipeline.stage DCNL def log_files(session, task):
def group_albums(session):
def is_subdir_of_any_in_list(path, dirs):
def albums_in_dir(path):
def normpath(path):
def ancestry(path):
def sorted_walk(path, ignore=(), ignore_hidden=False, logger=None):
def mkdirall(path):
def fnmatch_all(names, patterns):
def prune_dirs(path, root=None, clutter=('.DS_Store', 'Thumbs.db')):
def components(path):
def arg_encoding():
def _fsencoding():
def bytestring_path(path):
def displayable_path(path, separator=u'; DCSP '):
def syspath(path, prefix=True):
def samefile(p1, p2):
def remove(path, soft=True):
def copy(path, dest, replace=False):
def move(path, dest, replace=False):
def link(path, dest, replace=False):
def hardlink(path, dest, replace=False):
def unique_path(path):
def sanitize_path(path, replacements=None):
def truncate_path(path, length=MAX_FILENAME_LENGTH):
def _legalize_stage(path, replacements, length, extension, fragment):
def legalize_path(path, replacements, length, extension, fragment):
def py3_path(path):
def str2bool(value):
def as_string(value):
def text_string(value, encoding='utf-8'):
def plurality(objs):
def cpu_count():
def convert_command_args(args):
def command_output(cmd, shell=False):
def max_filename_length(path, limit=MAX_FILENAME_LENGTH):
def open_anything():
def editor_command():
def shlex_split(s):
def interactive_open(targets, command):
def _windows_long_path_name(short_path):
def case_sensitive(path):
def raw_seconds_short(string):
def asciify_path(path, sep_replace):
def _invalidate_queue(q, val=None, sync=True):
def multiple(messages):
def stage(func):
def mutator_stage(func):
def _allmsgs(obj):
def _event_select(events):
def run(root_coro):
def null():
def spawn(coro):
def call(coro):
def end(value=None):
def read(fd, bufsize=None):
def write(fd, data):
def connect(host, port):
def sleep(duration):
def join(coro):
def kill(coro):
def server(host, port, func):
def iter_first(sequence):
def _package_path(name):
def config_dirs():
def load_yaml(filename):
def restore_yaml_comments(data, default_data):
def as_template(value):
def resize_url(url, maxwidth):
def temp_file_for(path):
def pil_resize(maxwidth, path_in, path_out=None):
def im_resize(maxwidth, path_in, path_out=None):
def get_im_version():
def get_pil_version():
def ex_lvalue(name):
def ex_rvalue(name):
def ex_literal(val):
def ex_varassign(name, expr):
def ex_call(func, args):
def compile_func(arg_names, statements, name='_the_func', debug=False):
def _parse(template):
def _is_hidden_osx(path):
def _is_hidden_win(path):
def _is_hidden_dot(path):
def is_hidden(path):
def mediafile_image(image_path, maxwidth=None):
def embed_item(log, item, imagepath, maxwidth=None, itempath=None, compare_threshold=0, ifempty=False, as_album=False):
def embed_album(log, album, maxwidth=None, quiet=False, compare_threshold=0, ifempty=False):
def resize_image(log, imagepath, maxwidth):
def check_art_similarity(log, item, imagepath, compare_threshold):
def mutagen_call(action, path, func, *args, **kwargs):
def _safe_cast(out_type, val):
def _unpack_asf_image(data):
def _pack_asf_image(mime, data, type=3, description=''):
def _sc_decode(soundcheck):
def _sc_encode(gain, peak):
def _imghdr_what_wrapper(data):
def _wider_test_jpeg(data):
def image_mime_type(data):
def _insert(node, path, itemid):
def libtree(lib):
def parse_args():
def parse_args():
def vis_detections(im, class_name, dets, ax, thresh=0.5):
def demo(sess, net, image_name):
def parse_args():
@ops.RegisterShape('RoiPool') DCNL def _roi_pool_shape(op):
@ops.RegisterGradient('RoiPool') DCNL def _roi_pool_grad(op, grad, _):
def prepare_roidb(imdb):
def add_bbox_regression_targets(roidb):
def _compute_targets(ex_rois, gt_rois):
def get_minibatch(roidb, num_classes):
def _get_image_blob(roidb):
def _project_im_rois(im_rois, im_scale_factor):
def _get_bbox_regression_labels(bbox_target_data, num_classes):
def _vis_minibatch(im_blob, rois_blob, labels_blob, sublabels_blob):
def py_cpu_nms(dets, thresh):
def _filter_crowd_proposals(roidb, crowd_thresh):
def unique_boxes(boxes, scale=1.0):
def xywh_to_xyxy(boxes):
def xyxy_to_xywh(boxes):
def validate_boxes(boxes, width=0, height=0):
def _selective_search_IJCV_top_k(split, year, top_k):
def get_imdb(name):
def list_imdbs():
def parse_rec(filename):
def voc_ap(rec, prec, use_07_metric=False):
def voc_eval(detpath, annopath, imagesetfile, classname, cachedir, ovthresh=0.5, use_07_metric=False):
def find_in_path(name, path):
def locate_cuda():
def customize_compiler_for_nvcc(self):
def get_network(name):
def list_networks():
def proposal_target_layer(rpn_rois, gt_boxes, _num_classes):
def _get_bbox_regression_labels(bbox_target_data, num_classes):
def _compute_targets(ex_rois, gt_rois, labels):
def _sample_rois(all_rois, gt_boxes, fg_rois_per_image, rois_per_image, num_classes):
def _filter_boxes(boxes, min_size):
def _filter_boxes(boxes, min_size):
def _unmap(data, count, inds, fill=0):
def _compute_targets(ex_rois, gt_rois):
def generate_anchors(base_size=16, ratios=[0.5, 1, 2], scales=(2 ** np.arange(3, 6))):
def _whctrs(anchor):
def _mkanchors(ws, hs, x_ctr, y_ctr):
def _ratio_enum(anchor, ratios):
def _scale_enum(anchor, scales):
def _vis_proposals(im, dets, thresh=0.5):
def _get_image_blob(im):
def im_proposals(net, im):
def imdb_proposals(net, imdb):
def imdb_proposals_det(net, imdb):
def anchor_target_layer(rpn_cls_score, gt_boxes, im_info, data, _feat_stride=[16], anchor_scales=[4, 8, 16, 32]):
def _unmap(data, count, inds, fill=0):
def _compute_targets(ex_rois, gt_rois):
def prepare_roidb(imdb):
def add_bbox_regression_targets(roidb):
def _compute_targets(rois, overlaps, labels):
def get_minibatch(roidb, num_classes):
def _sample_rois(roidb, fg_rois_per_image, rois_per_image, num_classes):
def _get_image_blob(roidb, scale_inds):
def _get_image_blob_multiscale(roidb):
def _project_im_rois(im_rois, im_scale_factor):
def _project_im_rois_multiscale(im_rois, scales):
def _get_bbox_regression_labels(bbox_target_data, num_classes):
def _get_viewpoint_estimation_labels(viewpoint_data, clss, num_classes):
def _vis_minibatch(im_blob, rois_blob, labels_blob, overlaps, sublabels_blob, view_targets_blob=None, view_inside_blob=None):
def prepare_roidb(imdb):
def add_bbox_regression_targets(roidb):
def _compute_targets(rois, overlaps, labels, num_classes):
def get_minibatch(roidb, num_classes):
def _sample_rois(roidb, fg_rois_per_image, rois_per_image, num_classes):
def _get_image_blob(roidb, scale_inds):
def _project_im_rois(im_rois, im_scale_factor):
def _get_bbox_regression_labels(bbox_target_data, num_classes):
def _vis_minibatch(im_blob, rois_blob, labels_blob, overlaps):
def _get_image_blob(im):
def _get_rois_blob(im_rois, im_scale_factors):
def _project_im_rois(im_rois, scales):
def _get_blobs(im, rois):
def _clip_boxes(boxes, im_shape):
def _rescale_boxes(boxes, inds, scales):
def im_detect(sess, net, im, boxes=None):
def vis_detections(im, class_name, dets, thresh=0.8):
def apply_nms(all_boxes, thresh):
def test_net(sess, net, imdb, weights_filename, max_per_image=300, thresh=0.05, vis=False):
def get_output_dir(imdb, weights_filename):
def _merge_a_into_b(a, b):
def cfg_from_file(filename):
def cfg_from_list(cfg_list):
def clip_boxes(boxes, im_shape):
def nms(dets, thresh, force_cpu=False):
def get_training_roidb(imdb):
def get_data_layer(roidb, num_classes):
def filter_roidb(roidb):
def train_net(network, imdb, roidb, output_dir, pretrained_model=None, max_iters=40000):
def im_list_to_blob(ims):
def prep_im_for_blob(im, pixel_means, target_size, max_size):
def get_boxes_grid(image_height, image_width):
def findElementsWithId(node, elems=None):
def findReferencedElements(node, ids=None):
def removeUnreferencedElements(doc):
def shortenIDs(doc, unprotectedElements=None):
def intToID(idnum):
def renameID(doc, idFrom, idTo, identifiedElements, referencedIDs):
def unprotected_ids(doc, options):
def removeUnreferencedIDs(referencedIDs, identifiedElements):
def removeNestedGroups(node):
def moveCommonAttributesToParentGroup(elem, referencedElements):
def createGroupsForCommonAttributes(elem):
def removeUnusedAttributesOnParent(elem):
def _getStyle(node):
def _setStyle(node, styleMap):
def mayContainTextNodes(node):
def taint(taintedSet, taintedAttribute):
def removeDefaultAttributeValues(node, options, tainted=set()):
def convertColor(value):
def convertColors(element):
def cleanPath(element, options):
def parseListOfPoints(s):
def cleanPolygon(elem, options):
def cleanPolyline(elem, options):
def serializePath(pathObj, options):
def serializeTransform(transformObj):
def scourCoordinates(data, options, forceCommaWsp=False):
def scourLength(length):
def scourUnitlessLength(length, needsRendererWorkaround=False):
def reducePrecision(element):
def optimizeAngle(angle):
def optimizeTransform(transform):
def optimizeTransforms(element, options):
def removeComments(element):
def do_check(url):
def logfile_parser():
def cmd_exec(url, cmd, cve, check_header, filename):
def _match_css_class(str):
def buildTagMap(default, *args):
def name_or_value(value):
def sanitize_prefix(function):
def check_for_prefix_and_key(function):
def decode_frame(data_in):
def is_callable(handle):
def encode_short_string(pieces, value):
def encode_table(pieces, table):
def encode_value(pieces, value):
def decode_table(encoded, offset):
def decode_value(encoded, offset):
def _is_resumable(exc):
def _trace(fmt, *args):
def _run_server(local_addr, local_addr_family, local_socket_type, local_linger_args, remote_addr, remote_addr_family, remote_socket_type, queue):
def echo(port=0):
def _safe_shutdown_socket(sock, how=socket.SHUT_RDWR):
def socket_pair(family=None, sock_type=socket.SOCK_STREAM, proto=socket.IPPROTO_IP):
def retry_assertion(timeout_sec, retry_interval_sec=0.1):
def callback_method():
def main():
def aggregate(label=u''):
@aggregate(_(u'Count DCSP of')) DCNL def aggregate_count(items, col):
@aggregate(_(u'Sum DCSP of')) DCNL def aggregate_sum(items, col):
@aggregate(_(u'Avg. DCSP of')) DCNL def aggregate_avg(items, col):
def get_field_setup_query(query, model, column_name):
def renders(col_name):
def dynamic_class_import(class_path):
@click.group() DCNL def cli_app():
@cli_app.command('reset-password') DCNL @click.option('--app', default='app', help='Your DCSP application DCSP init DCSP directory DCSP (package)') DCNL @click.option('--appbuilder', default='appbuilder', help='your DCSP AppBuilder DCSP object') DCNL @click.option('--username', default='admin', prompt='The DCSP username', help='Resets DCSP the DCSP password DCSP for DCSP a DCSP particular DCSP user.') DCNL @click.password_option() DCNL def reset_password(app, appbuilder, username, password):
@cli_app.command('create-admin') DCNL @click.option('--app', default='app', help='Your DCSP application DCSP init DCSP directory DCSP (package)') DCNL @click.option('--appbuilder', default='appbuilder', help='your DCSP AppBuilder DCSP object') DCNL @click.option('--username', default='admin', prompt='Username') DCNL @click.option('--firstname', default='admin', prompt='User DCSP first DCSP name') DCNL @click.option('--lastname', default='user', prompt='User DCSP last DCSP name') DCNL @click.option('--email', default='admin@fab.org', prompt='Email') DCNL @click.password_option() DCNL def create_admin(app, appbuilder, username, firstname, lastname, email, password):
@cli_app.command('run') DCNL @click.option('--app', default='app', help='Your DCSP application DCSP init DCSP directory DCSP (package)') DCNL @click.option('--appbuilder', default='appbuilder', help='your DCSP AppBuilder DCSP object') DCNL @click.option('--host', default='0.0.0.0') DCNL @click.option('--port', default=8080) DCNL @click.option('--debug', default=True) DCNL def run(app, appbuilder, host, port, debug):
@cli_app.command('create-db') DCNL @click.option('--app', default='app', help='Your DCSP application DCSP init DCSP directory DCSP (package)') DCNL @click.option('--appbuilder', default='appbuilder', help='your DCSP AppBuilder DCSP object') DCNL def create_db(app, appbuilder):
@cli_app.command('version') DCNL @click.option('--app', default='app', help='Your DCSP application DCSP init DCSP directory DCSP (package)') DCNL @click.option('--appbuilder', default='appbuilder', help='your DCSP AppBuilder DCSP object') DCNL def version(app, appbuilder):
@cli_app.command('security-cleanup') DCNL @click.option('--app', default='app', help='Your DCSP application DCSP init DCSP directory DCSP (package)') DCNL @click.option('--appbuilder', default='appbuilder', help='your DCSP AppBuilder DCSP object') DCNL def security_cleanup(app, appbuilder):
@cli_app.command('list-views') DCNL @click.option('--app', default='app', help='Your DCSP application DCSP init DCSP directory DCSP (package)') DCNL @click.option('--appbuilder', default='appbuilder', help='your DCSP AppBuilder DCSP object') DCNL def list_users(app, appbuilder):
@cli_app.command('list-users') DCNL @click.option('--app', default='app', help='Your DCSP application DCSP init DCSP directory DCSP (package)') DCNL @click.option('--appbuilder', default='appbuilder', help='your DCSP AppBuilder DCSP object') DCNL def list_users(app, appbuilder):
@cli_app.command('babel-extract') DCNL @click.option('--config', default='./babel/babel.cfg') DCNL @click.option('--input', default='.') DCNL @click.option('--output', default='./babel/messages.pot') DCNL @click.option('--target', default='app/translations') DCNL @click.option('--keywords', '-k', multiple=True, default=['lazy_gettext', 'gettext', '_', '__']) DCNL def babel_extract(config, input, output, target, keywords):
@cli_app.command('babel-compile') DCNL @click.option('--target', default='app/translations', help='The DCSP target DCSP directory DCSP where DCSP translations DCSP reside') DCNL def babel_compile(target):
@cli_app.command('create-app') DCNL @click.option('--name', prompt='Your DCSP new DCSP app DCSP name', help='Your DCSP application DCSP name, DCSP directory DCSP will DCSP have DCSP this DCSP name') DCNL @click.option('--engine', prompt='Your DCSP engine DCSP type, DCSP SQLAlchemy DCSP or DCSP MongoEngine', type=click.Choice(['SQLAlchemy', 'MongoEngine']), default='SQLAlchemy', help='Write DCSP your DCSP engine DCSP type') DCNL def create_app(name, engine):
@cli_app.command('create-addon') DCNL @click.option('--name', prompt='Your DCSP new DCSP addon DCSP name', help='Your DCSP addon DCSP name DCSP will DCSP be DCSP prefixed DCSP by DCSP fab_addon_, DCSP directory DCSP will DCSP have DCSP this DCSP name') DCNL def create_addon(name):
@cli_app.command('collect-static') DCNL @click.option('--static_folder', default='app/static', help='Your DCSP projects DCSP static DCSP folder') DCNL def collect_static(static_folder):
def get_group_by_args():
def get_page_args():
def get_page_size_args():
def get_order_args():
def _oauth_tokengetter(token=None):
def has_access(f):
def has_access_api(f):
def permission_name(name):
def expose(url='/', methods=('GET',)):
def dict_to_json(xcol, ycols, labels, value_columns):
def get_file_original_name(name):
def action(name, text, confirmation=None, icon=None, multiple=True, single=True):
def main():
def check_splitter(command):
def split_baby(split_file, split_cmd):
def check_list(list, ignore=0):
def trim_cue_entry(string):
def int_to_str(value, length=2):
def cry():
def bool_int(value):
def initialize_scheduler():
def schedule_job(function, name, hours=0, minutes=0):
def renameUnprocessedFolder(path, tag):
def switch(AlbumID, ReleaseID):
def _append_literal(scope, text):
def _parse_pattern(pattern, warnings):
def render(pattern, replacement):
def latinToAscii(unicrap):
def _is_unicode_combining(u):
def _transliterate(u, xlate):
def clean_name(s):
def clean_musicbrainz_name(s, return_as_string=True):
def split_path(f):
def expand_subfolders(f):
def path_match_patterns(path, patterns):
def path_filter_patterns(paths, patterns, root=None):
def extract_metadata(f):
def get_downloaded_track_list(albumpath):
def preserve_torrent_directory(albumpath, forced=False, single=False):
def cue_split(albumpath, keep_original_folder=False):
def walk_directory(basedir, followlinks=True):
def sab_sanitize_foldername(name):
def create_https_certificates(ssl_cert, ssl_key):
def fix_url(s, charset='utf-8'):
def torrent_to_file(target_file, data):
def read_torrent_name(torrent_file, default_name=None):
def calculate_torrent_hash(link, data=None):
def get_seed_ratio(provider):
def strptime_musicbrainz(date_str):
def getHybridRelease(fullreleaselist):
def checkTorrentFinished():
def command_map(args):
def command(encoder, musicSource, musicDest, albumPath, xldProfile):
def _verify_var_type(val):
def _media_file_to_dict(mf, d):
def _row_to_dict(row, d):
def _date_year(release):
def _lower(s):
def file_metadata(path, release):
def _intersect(d1, d2):
def album_metadata(path, release, common_tags):
def albumart_metadata(release, common_tags):
def request_lastfm(method, **kwargs):
@contextlib.contextmanager DCNL def listener():
def initMultiprocessing():
def initLogger(console=False, log_dir=False, verbose=False):
def initHooks(global_exceptions=True, thread_exceptions=True, pass_original=True):
def getReleaseGroup(rgid):
def getRelease(releaseid, include_artist_info=True):
def getArtistForReleaseGroup(rgid):
def update(artistid, artist_name, release_groups):
def request_response(url, method='get', auto_raise=True, whitelist_status_code=None, lock=fake_lock, **kwargs):
def request_soup(url, **kwargs):
def request_minidom(url, **kwargs):
def request_json(url, **kwargs):
def request_content(url, **kwargs):
def request_feed(url, **kwargs):
def server_message(response):
def fetch_url(url):
def unescape(text):
def extract_text_in(html, starttag):
def search_pairs(item):
def _encode(s):
def fetch_lyricswiki(artist, title):
def fetch_lyricscom(artist, title):
def slugify(text):
def is_page_candidate(urlLink, urlTitle, title, artist):
def remove_credits(text):
def is_lyrics(text, artist=None):
def _scrape_strip_cruft(html, plain_text_out=False):
def scrape_lyrics_from_html(html):
def fetch_google(artist, title):
def _fetch_image(url):
def caa_art(album):
def art_for_asin(album):
def aao_art(album):
def google_art(album):
def itunes_art(album):
def filename_priority(filename, cover_names):
def art_in_path(path, cover_names, cautious):
def _source_urls(album, sources=SOURCES_ALL):
def art_for_album(album, paths, maxwidth=None, local_only=False):
def batch_fetch_art(lib, albums, force, maxwidth=None):
@EmbedCoverArtPlugin.listen('album_imported') DCNL def album_imported(lib, album):
def embed_item(item, imagepath, maxwidth=None, itempath=None, compare_threshold=0, ifempty=False, as_album=False):
def embed_album(album, maxwidth=None, quiet=False):
def resize_image(imagepath, maxwidth):
def check_art_similarity(item, imagepath, compare_threshold):
def _mediafile_image(image_path, maxwidth=None):
def dict_to_sequence(d):
def get_netrc_auth(url, raise_errors=False):
def guess_filename(obj):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def unquote_unreserved(uri):
def requote_uri(uri):
def address_in_network(ip, net):
def dotted_netmask(mask):
def is_valid_cidr(string_network):
def should_bypass_proxies(url):
def get_environ_proxies(url):
def select_proxy(url, proxies):
def default_user_agent(name='python-requests'):
def parse_header_links(value):
def prepend_scheme_if_needed(url, new_scheme):
def get_auth_from_url(url):
def to_native_string(string, encoding='ascii'):
def urldefragauth(url):
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):
def merge_cookies(cookiejar, cookies):
def description_of(lines, name=u'stdin'):
def main(argv=None):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d):
def itervalues(d):
def iteritems(d):
def with_metaclass(meta, base=object):
def _dnsname_match(dn, hostname, max_wildcards=1):
def match_hostname(cert, hostname):
def add_stderr_logger(level=logging.DEBUG):
def disable_warnings(category=exceptions.HTTPWarning):
def guess_content_type(filename, default='application/octet-stream'):
def format_header_param(name, value):
def choose_boundary():
def iter_field_objects(fields):
def iter_fields(fields):
def encode_multipart_formdata(fields, boundary=None):
def is_fp_closed(obj):
def assert_header_parsing(headers):
def is_response_to_head(response):
def current_time():
def assert_fingerprint(cert, fingerprint):
def resolve_cert_reqs(candidate):
def resolve_ssl_version(candidate):
def create_urllib3_context(ssl_version=None, cert_reqs=None, options=None, ciphers=None):
def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None, ca_certs=None, server_hostname=None, ssl_version=None, ciphers=None, ssl_context=None, ca_cert_dir=None):
def is_connection_dropped(conn):
def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT, source_address=None, socket_options=None):
def split_first(s, delims):
def parse_url(url):
def get_host(url):
def make_headers(keep_alive=None, accept_encoding=None, user_agent=None, basic_auth=None, proxy_basic_auth=None, disable_cache=None):
def connection_from_url(url, **kw):
def inject_into_urllib3():
def extract_from_urllib3():
def _basic_auth_str(username, password):
def dispatch_hook(key, hooks, hook_data, **kwargs):
def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):
def session():
def request(method, url, **kwargs):
def get(url, params=None, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, json=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def python_2_unicode_compatible(klass):
def flatten_errors(cfg, res, levels=None, results=None):
def get_extra_values(conf, _prepend=()):
def memorized_timedelta(seconds):
def memorized_datetime(seconds):
def memorized_ttinfo(*args):
def _to_seconds(td):
def unpickler(zone, utcoffset=None, dstoffset=None, tzname=None):
def open_resource(name):
def resource_exists(name):
def timezone(zone):
def _unmunge_zone(zone):
def _UTC():
def _p(*args):
def FixedOffset(offset, _tzinfos={}):
def _byte_string(s):
def _std_string(s):
def register_treebuilders_from(module):
def _alias(attr):
def diagnose(data):
def lxml_trace(data, html=True, **kwargs):
def htmlparser_trace(data):
def rword(length=5):
def rsentence(length=4):
def rdoc(num_elements=1000):
def benchmark_parsers(num_elements=100000):
def get_supported_platform():
def register_loader_type(loader_type, provider_factory):
def get_provider(moduleOrReq):
def get_build_platform():
def compatible_platforms(provided, required):
def run_script(dist_spec, script_name):
def get_distribution(dist):
def load_entry_point(dist, group, name):
def get_entry_map(dist, group=None):
def get_entry_info(dist, group, name):
def get_default_cache():
def safe_name(name):
def safe_version(version):
def safe_extra(extra):
def to_filename(name):
def register_finder(importer_type, distribution_finder):
def find_distributions(path_item, only=False):
def find_eggs_in_zip(importer, path_item, only=False):
def find_on_path(importer, path_item, only=False):
def register_namespace_handler(importer_type, namespace_handler):
def _handle_ns(packageName, path_item):
def declare_namespace(packageName):
def fixup_namespace_packages(path_item, parent=None):
def file_ns_handler(importer, path_item, packageName, module):
def normalize_path(filename):
def yield_lines(strs):
def parse_version(s):
def parse_requirements(strs):
def _get_mro(cls):
def _find_adapter(registry, ob):
def ensure_directory(path):
def _bypass_ensure_directory(path, mode=511):
def split_sections(s):
def to_sax(walker, handler):
def SerializeError(Exception):
def getTreeBuilder(treeType, implementation=None, **kwargs):
def tostring(element):
def parse(doc, treebuilder=u'etree', encoding=None, namespaceHTMLElements=True):
def codecName(encoding):
def to_text(s, blank_if_none=True):
def is_text_or_none(string):
def getTreeWalker(treeType, implementation=None, **kwargs):
def pprint(walker):
def build_authenticate_header(realm=''):
def escape(s):
def generate_timestamp():
def generate_nonce(length=8):
def generate_verifier(length=8):
def asint(text):
def asbool(obj):
def astimezone(obj):
def convert_to_datetime(input, tz, arg_name):
def datetime_to_utc_timestamp(timeval):
def utc_timestamp_to_datetime(timestamp):
def timedelta_seconds(delta):
def datetime_ceil(dateval):
def get_callable_name(func):
def obj_to_ref(obj):
def ref_to_obj(ref):
def maybe_ref(ref):
def check_callable_args(func, args, kwargs):
def run_job(job, jobstore_alias, run_times, logger_name):
def readPlist(pathOrFile):
def dictConfig(config):
def hasHandlers(logger):
def HTTPResponse__getheaders(self):
def parse_uri(uri):
def safename(filename):
def _parse_www_authenticate(headers, headername='www-authenticate'):
def _entry_disposition(response_headers, request_headers):
def iri2uri(uri):
def _open_resource(url_file_stream_or_string, etag, modified, agent, referrer, handlers, request_headers):
def registerDateHandler(func):
def _parse_date_iso8601(dateString):
def _parse_date_onblog(dateString):
def _parse_date_nate(dateString):
def _parse_date_mssql(dateString):
def _parse_date_greek(dateString):
def _parse_date_hungarian(dateString):
def _parse_date_rfc822(dateString):
def _parse_date_perforce(aDateString):
def _parse_date(dateString):
def _getCharacterEncoding(http_headers, xml_data):
def _toUTF8(data, encoding):
def _stripDoctype(data):
def parse(url_file_stream_or_string, etag=None, modified=None, agent=None, referrer=None, handlers=[], request_headers={}, response_headers={}):
def compile(node, uri, filename=None, default_filters=None, buffer_filters=None, imports=None, future_imports=None, source_encoding=None, generate_magic_comment=True, disable_unicode=False, strict_undefined=False, enable_loop=True, reserved_names=frozenset()):
def mangle_mako_loop(node, printer):
def verify_directory(dir):
def parse_encoding(fp):
def sorted_dict_repr(d):
def restore__ast(_ast):
def text_error_template(lookup=None):
def html_error_template():
def supports_caller(func):
def capture(context, callable_, *args, **kwargs):
def _include_file(context, uri, calling_uri, **kwargs):
def _inherit_from(context, uri, calling_uri):
def _render(template, callable_, args, data, as_unicode=False):
def _exec_template(callable_, context, args=None, kwargs=None):
def convert_comments(text):
def extract(fileobj, keywords, comment_tags, options):
def legacy_html_escape(s):
def htmlentityreplace_errors(ex):
def adjust_whitespace(text):
def parse(expr, filename='<unknown>', mode='exec'):
def to_source(node, indent_with=(' DCSP ' * 4)):
def dump(node):
def copy_location(new_node, old_node):
def fix_missing_locations(node):
def increment_lineno(node, n=1):
def iter_fields(node):
def get_fields(node):
def iter_child_nodes(node):
def get_child_nodes(node):
def get_compile_mode(node):
def get_docstring(node):
def walk(node):
def with_metaclass(meta, base=object):
def arg_stringname(func_arg):
def parse(code, mode='exec', **exception_kwargs):
def set_caa_hostname(new_hostname):
def _caa_request(mbid, imageid=None, size=None, entitytype='release'):
def get_image_list(releaseid):
def get_release_group_image_list(releasegroupid):
def get_release_group_image_front(releasegroupid, size=None):
def get_image_front(releaseid, size=None):
def get_image_back(releaseid, size=None):
def get_image(mbid, coverid, size=None, entitytype='release'):
def _unicode(string, encoding=None):
def bytes_to_elementtree(bytes_or_file):
def get_error_message(error):
def parse_elements(valid_els, inner_els, element):
def parse_attributes(attributes, element):
def parse_medium_list(ml):
def _check_filter_and_make_params(entity, includes, release_status=[], release_type=[]):
def auth(u, p):
def hpauth(u, p):
def disable_hpauth():
def set_useragent(app, version, contact=None):
def set_hostname(new_hostname):
def set_rate_limit(limit_or_interval=1.0, new_requests=1):
def _safe_read(opener, req, body=None, max_retries=8, retry_delay_delta=2.0):
def mb_parser_null(resp):
def mb_parser_xml(resp):
def set_parser(new_parser_fun=None):
def set_format(fmt='xml'):
@_rate_limit DCNL def _mb_request(path, method='GET', auth_required=AUTH_NO, client_required=False, args=None, data=None, body=None):
def _get_auth_type(entity, id, includes):
def _do_mb_query(entity, id, includes=[], params={}):
def _do_mb_search(entity, query='', fields={}, limit=None, offset=None, strict=False):
def _do_mb_delete(path):
def _do_mb_put(path):
def _do_mb_post(path, body):
@_docstring_get('area') DCNL def get_area_by_id(id, includes=[], release_status=[], release_type=[]):
@_docstring_get('artist') DCNL def get_artist_by_id(id, includes=[], release_status=[], release_type=[]):
@_docstring_get('instrument') DCNL def get_instrument_by_id(id, includes=[], release_status=[], release_type=[]):
@_docstring_get('label') DCNL def get_label_by_id(id, includes=[], release_status=[], release_type=[]):
@_docstring_get('place') DCNL def get_place_by_id(id, includes=[], release_status=[], release_type=[]):
@_docstring_get('event') DCNL def get_event_by_id(id, includes=[], release_status=[], release_type=[]):
@_docstring_get('recording') DCNL def get_recording_by_id(id, includes=[], release_status=[], release_type=[]):
@_docstring_get('release') DCNL def get_release_by_id(id, includes=[], release_status=[], release_type=[]):
@_docstring_get('release-group') DCNL def get_release_group_by_id(id, includes=[], release_status=[], release_type=[]):
@_docstring_get('series') DCNL def get_series_by_id(id, includes=[]):
@_docstring_get('work') DCNL def get_work_by_id(id, includes=[]):
@_docstring_get('url') DCNL def get_url_by_id(id, includes=[]):
@_docstring_search('annotation') DCNL def search_annotations(query='', limit=None, offset=None, strict=False, **fields):
@_docstring_search('area') DCNL def search_areas(query='', limit=None, offset=None, strict=False, **fields):
@_docstring_search('artist') DCNL def search_artists(query='', limit=None, offset=None, strict=False, **fields):
@_docstring_search('event') DCNL def search_events(query='', limit=None, offset=None, strict=False, **fields):
@_docstring_search('instrument') DCNL def search_instruments(query='', limit=None, offset=None, strict=False, **fields):
@_docstring_search('label') DCNL def search_labels(query='', limit=None, offset=None, strict=False, **fields):
@_docstring_search('place') DCNL def search_places(query='', limit=None, offset=None, strict=False, **fields):
@_docstring_search('recording') DCNL def search_recordings(query='', limit=None, offset=None, strict=False, **fields):
@_docstring_search('release') DCNL def search_releases(query='', limit=None, offset=None, strict=False, **fields):
@_docstring_search('release-group') DCNL def search_release_groups(query='', limit=None, offset=None, strict=False, **fields):
@_docstring_search('series') DCNL def search_series(query='', limit=None, offset=None, strict=False, **fields):
@_docstring_search('work') DCNL def search_works(query='', limit=None, offset=None, strict=False, **fields):
@_docstring_get('discid') DCNL def get_releases_by_discid(id, includes=[], toc=None, cdstubs=True, media_format=None):
@_docstring_get('recording') DCNL def get_recordings_by_echoprint(echoprint, includes=[], release_status=[], release_type=[]):
@_docstring_get('recording') DCNL def get_recordings_by_puid(puid, includes=[], release_status=[], release_type=[]):
@_docstring_get('recording') DCNL def get_recordings_by_isrc(isrc, includes=[], release_status=[], release_type=[]):
@_docstring_get('work') DCNL def get_works_by_iswc(iswc, includes=[]):
@_docstring_browse('artist') DCNL def browse_artists(recording=None, release=None, release_group=None, work=None, includes=[], limit=None, offset=None):
@_docstring_browse('event') DCNL def browse_events(area=None, artist=None, place=None, includes=[], limit=None, offset=None):
@_docstring_browse('label') DCNL def browse_labels(release=None, includes=[], limit=None, offset=None):
@_docstring_browse('place') DCNL def browse_places(area=None, includes=[], limit=None, offset=None):
@_docstring_browse('recording') DCNL def browse_recordings(artist=None, release=None, includes=[], limit=None, offset=None):
@_docstring_browse('release') DCNL def browse_releases(artist=None, track_artist=None, label=None, recording=None, release_group=None, release_status=[], release_type=[], includes=[], limit=None, offset=None):
@_docstring_browse('release-group') DCNL def browse_release_groups(artist=None, release=None, release_type=[], includes=[], limit=None, offset=None):
@_docstring_browse('url') DCNL def browse_urls(resource=None, includes=[], limit=None, offset=None):
@_docstring_browse('work') DCNL def browse_works(artist=None, includes=[], limit=None, offset=None):
def get_collections():
def get_artists_in_collection(collection, limit=None, offset=None):
def get_releases_in_collection(collection, limit=None, offset=None):
def get_events_in_collection(collection, limit=None, offset=None):
def get_places_in_collection(collection, limit=None, offset=None):
def get_recordings_in_collection(collection, limit=None, offset=None):
def get_works_in_collection(collection, limit=None, offset=None):
def submit_barcodes(release_barcode):
def submit_puids(recording_puids):
def submit_echoprints(recording_echoprints):
def submit_isrcs(recording_isrcs):
def submit_tags(**kwargs):
def submit_ratings(**kwargs):
def add_releases_to_collection(collection, releases=[]):
def remove_releases_from_collection(collection, releases=[]):
def process_urlencoded(entity):
def process_multipart(entity):
def process_multipart_form_data(entity):
def _old_process_multipart(entity):
def _getargs(func):
def quickstart(root=None, script_name='', config=None):
def _cherrypy_pydoc_resolve(thing, forceload=0):
def expose(func=None, alias=None):
def popargs(*args, **kwargs):
def url(path='', qs='', script_name=None, base=None, relative=None):
def merge(base, other):
def _server_namespace_handler(k, v):
def _engine_namespace_handler(k, v):
def _tree_namespace_handler(k, v):
def clean_headers(status):
def get_error_page(status, **kwargs):
def format_exc(exc=None):
def bare_error(extrabody=None):
def client_host(server_host):
def check_port(host, port, timeout=1.0):
def wait_for_free_port(host, port, timeout=None):
def wait_for_occupied_port(host, port, timeout=None):
def base64_decode(n, encoding='ISO-8859-1'):
def json_processor(entity):
def json_in(content_type=[ntou('application/json'), ntou('text/javascript')], force=True, debug=False, processor=json_processor):
def json_out(content_type='application/json', debug=False, handler=json_handler):
def get_tree(base, exclude, coverage=the_coverage):
def process_body():
def patched_path(path):
def get(invalid_methods=('POST', 'PUT', 'DELETE'), debug=False, **kwargs):
def tee_output():
def expires(secs=0, force=False, debug=False):
def is_iterator(obj):
def file_generator_limited(fileobj, count, chunk_size=65536):
def set_vary_header(response, header_name):
def check_auth(users, encrypt=None, realm=None):
def basic_auth(realm, users, encrypt=None, debug=False):
def digest_auth(realm, users, debug=False):
def calculateNonce(realm, algorithm=MD5):
def digestAuth(realm, algorithm=MD5, nonce=None, qop=AUTH):
def basicAuth(realm):
def doAuth(realm):
def parseAuthorization(credentials):
def md5SessionKey(params, password):
def _computeDigestResponse(auth_map, password, method='GET', A1=None, **kwargs):
def _checkDigestResponse(auth_map, password, method='GET', A1=None, **kwargs):
def checkResponse(auth_map, password, method='GET', encrypt=None, **kwargs):
def decode(encoding=None, default_encoding='utf-8'):
def compress(body, compress_level):
def gzip(compress_level=5, mime_types=['text/html', 'text/plain'], debug=False):
def get_ha1_dict_plain(user_password_dict):
def get_ha1_dict(user_ha1_dict):
def get_ha1_file_htdigest(filename):
def synthesize_nonce(s, key, timestamp=None):
def H(s):
def www_authenticate(realm, key, algorithm='MD5', nonce=None, qop=qop_auth, stale=False):
def digest_auth(realm, get_ha1, key, debug=False):
def save():
def close():
def init(storage_type='ram', path=None, path_header=None, name='session_id', timeout=60, domain=None, secure=False, clean_freq=5, persistent=True, httponly=False, debug=False, **kwargs):
def set_response_cookie(path=None, path_header=None, name='session_id', timeout=60, domain=None, secure=False, httponly=False):
def expire():
def extrapolate_statistics(scope):
def new_func_strip_path(func_name):
def checkpassword_dict(user_password_dict):
def basic_auth(realm, checkpassword, debug=False):
def serve_file(path, content_type=None, disposition=None, name=None, debug=False):
def serve_fileobj(fileobj, content_type=None, disposition=None, name=None, debug=False):
def _serve_fileobj(fileobj, content_type, content_length, debug=False):
def serve_download(path, name=None):
def staticdir(section, dir, root='', match='', content_types=None, index='', debug=False):
def staticfile(filename, root=None, match='', content_types=None, debug=False):
def validate_etags(autotags=False, debug=False):
def validate_since():
def allow(methods=None, debug=False):
def proxy(base=None, local='X-Forwarded-Host', remote='X-Forwarded-For', scheme='X-Forwarded-Proto', debug=False):
def ignore_headers(headers=('Range',), debug=False):
def response_headers(headers=None, debug=False):
def referer(pattern, accept=True, accept_missing=False, error=403, message='Forbidden DCSP Referer DCSP header.', debug=False):
def log_traceback(severity=logging.ERROR, debug=False):
def log_request_headers(debug=False):
def log_hooks(debug=False):
def redirect(url='', internal=True, debug=False):
def trailing_slash(missing=True, extra=False, status=None, debug=False):
def flatten(debug=False):
def accept(media=None, debug=False):
def autovary(ignore=None, debug=False):
def urljoin(*atoms):
def urljoin_bytes(*atoms):
def protocol_from_http(protocol_str):
def get_ranges(headervalue, content_length):
def header_elements(fieldname, fieldvalue):
def decode_TEXT(value):
def valid_status(status):
def _parse_qs(qs, keep_blank_values=0, strict_parsing=0, encoding='utf-8'):
def parse_query_string(query_string, keep_blank_values=True, encoding='utf-8'):
def as_dict(config):
def unrepr(s):
def modules(modulePath):
def attributes(full_attribute_name):
def test_callable_spec(callable, callable_args, callable_kwargs):
def VirtualHost(next_dispatcher=Dispatcher(), use_x_forwarded_host=True, **domains):
def hooks_namespace(k, v):
def request_namespace(k, v):
def response_namespace(k, v):
def error_page_namespace(k, v):
def call(*popenargs, **kwargs):
def check_call(*popenargs, **kwargs):
def check_output(*popenargs, **kwargs):
def list2cmdline(seq):
def plat_specific_errors(*errnames):
def read_headers(rfile, hdict=None):
def get_ssl_adapter_class(name='builtin'):
def format_exc(limit=None):
def plat_specific_errors(*errnames):
def read_headers(rfile, hdict=None):
def get_ssl_adapter_class(name='pyopenssl'):
def downgrade_wsgi_ux_to_1x(environ):
def unidecode(string):
def as_completed(fs, timeout=None):
def wait(fs, timeout=None, return_when=ALL_COMPLETED):
def _process_worker(call_queue, result_queue):
def _add_call_item_to_queue(pending_work_items, work_ids, call_queue):
def _queue_management_worker(executor_reference, processes, pending_work_items, work_ids_queue, call_queue, result_queue):
def namedtuple(typename, field_names):
def _is_descriptor(obj):
def _is_dunder(name):
def _is_sunder(name):
def _make_class_unpicklable(cls):
def unique(enumeration):
def _is_descriptor(obj):
def _is_dunder(name):
def _is_sunder(name):
def _make_class_unpicklable(cls):
def unique(enumeration):
def mini(description, applicationName='PythonMini', noteType='Message', title='Mini DCSP Message', applicationIcon=None, hostname='localhost', password=None, port=23053, sticky=False, priority=None, callback=None, notificationIcon=None, identifier=None, notifierFactory=GrowlNotifier):
def parse_gntp(data, password=None):
def mini(description, **kwargs):
def _to_epoch_time(date):
def _parse_periods(pattern):
def parse_query_part(part, query_classes={}, prefixes={}, default_class=query.SubstringQuery):
def construct_query_part(model_cls, prefixes, query_part):
def query_from_strings(query_cls, model_cls, prefixes, query_parts):
def construct_sort_part(model_cls, part):
def sort_from_strings(model_cls, sort_parts):
def parse_sorted_query(model_cls, parts, prefixes={}):
def apply_item_metadata(item, track_info):
def apply_metadata(album_info, mapping):
def current_metadata(items):
def assign_items(items, tracks):
def track_index_changed(item, track_info):
def track_distance(item, track_info, incl_artist=False):
def distance(items, album_info, mapping):
def match_by_id(items):
def _recommendation(results):
def _sort_candidates(candidates):
def _add_candidate(items, results, info):
def tag_album(items, search_artist=None, search_album=None, search_ids=[]):
def tag_item(item, search_artist=None, search_title=None, search_ids=[]):
def _string_dist_basic(str1, str2):
def string_dist(str1, str2):
def album_for_mbid(release_id):
def track_for_mbid(recording_id):
@plugins.notify_info_yielded(u'albuminfo_received') DCNL def albums_for_id(album_id):
@plugins.notify_info_yielded(u'trackinfo_received') DCNL def tracks_for_id(track_id):
@plugins.notify_info_yielded(u'albuminfo_received') DCNL def album_candidates(items, artist, album, va_likely):
@plugins.notify_info_yielded(u'trackinfo_received') DCNL def item_candidates(item, artist, title):
def configure():
def _preferred_alias(aliases):
def _flatten_artist_credit(credit):
def track_info(recording, index=None, medium=None, medium_index=None, medium_total=None):
def _set_date_str(info, date_str, original=False):
def album_info(release):
def match_album(artist, album, tracks=None):
def match_track(artist, title):
def _parse_id(s):
def album_for_id(releaseid):
def track_for_id(releaseid):
def logsafe(val):
def load_plugins(names=()):
def find_plugins():
def commands():
def queries():
def track_distance(item, info):
def album_distance(items, album_info, mapping):
def candidates(items, artist, album, va_likely):
def item_candidates(item, artist, title):
def album_for_id(album_id):
def track_for_id(track_id):
def template_funcs():
def import_stages():
def item_field_getters():
def album_field_getters():
def event_handlers():
def send(event, **arguments):
def feat_tokens(for_artist=True):
def sanitize_choices(choices, choices_all):
def notify_info_yielded(event):
def parse_query_parts(parts, model_cls):
def parse_query_string(s, model_cls):
def _sqlite_bytelower(bytestring):
def _int_arg(s):
def _in_encoding():
def _out_encoding():
def _stream_encoding(stream, default='utf-8'):
def decargs(arglist):
def print_(*strings, **kwargs):
def _bool_fallback(a, b):
def should_write(write_opt=None):
def should_move(move_opt=None):
def input_(prompt=None):
def input_options(options, require=False, prompt=None, fallback_prompt=None, numrange=None, default=None, max_width=72):
def input_yn(prompt, require=False):
def input_select_objects(prompt, objs, rep):
def human_bytes(size):
def human_seconds(interval):
def human_seconds_short(interval):
def _colorize(color, text):
def colorize(color_name, text):
def _colordiff(a, b, highlight='text_highlight', minor_highlight='text_highlight_minor'):
def colordiff(a, b, highlight='text_highlight'):
def get_path_formats(subview=None):
def get_replacements():
def term_width():
def _field_diff(field, old, new):
def show_model_changes(new, old=None, fields=None, always=False):
def show_path_changes(path_changes):
def _load_plugins(config):
def _setup(options, lib=None):
def _configure(options):
def _open_library(config):
def _raw_main(args, lib=None):
def main(args=None):
def _do_query(lib, query, album, also_items=True):
def _print_keys(query):
def disambig_string(info):
def dist_string(dist):
def penalty_string(distance, limit=None):
def show_change(cur_artist, cur_album, match):
def show_item_change(item, match):
def summarize_items(items, singleton):
def _summary_judgment(rec):
def choose_candidate(candidates, singleton, rec, cur_artist=None, cur_album=None, item=None, itemcount=None, choices=[]):
def manual_search(session, task):
def manual_id(session, task):
def abort_action(session, task):
def import_files(lib, paths, query):
def list_items(lib, query, album, fmt=u''):
def update_items(lib, query, album, move, pretend, fields):
def remove_items(lib, query, album, delete, force):
def show_stats(lib, query, exact):
def modify_items(lib, mods, dels, query, write, move, album, confirm):
def print_and_modify(obj, mods, dels):
def modify_parse_args(args):
def move_items(lib, dest, query, copy, album, pretend, confirm=False):
def write_items(lib, query, pretend, force):
def config_edit():
def completion_script(commands):
def _open_state():
def _save_state(state):
def progress_add(toppath, *paths):
def progress_element(toppath, path):
def has_progress(toppath):
def history_add(paths):
def history_get():
def read_tasks(session):
def query_tasks(session):
@pipeline.mutator_stage DCNL def lookup_candidates(session, task):
@pipeline.stage DCNL def user_query(session, task):
def resolve_duplicates(session, task):
@pipeline.mutator_stage DCNL def import_asis(session, task):
def apply_choice(session, task):
@pipeline.mutator_stage DCNL def plugin_stage(session, func, task):
@pipeline.stage DCNL def manipulate_files(session, task):
@pipeline.stage DCNL def log_files(session, task):
def group_albums(session):
def albums_in_dir(path):
def normpath(path):
def ancestry(path):
def sorted_walk(path, ignore=(), ignore_hidden=False, logger=None):
def mkdirall(path):
def fnmatch_all(names, patterns):
def prune_dirs(path, root=None, clutter=('.DS_Store', 'Thumbs.db')):
def components(path):
def arg_encoding():
def _fsencoding():
def bytestring_path(path):
def displayable_path(path, separator=u'; DCSP '):
def syspath(path, prefix=True):
def samefile(p1, p2):
def remove(path, soft=True):
def copy(path, dest, replace=False):
def move(path, dest, replace=False):
def link(path, dest, replace=False):
def hardlink(path, dest, replace=False):
def unique_path(path):
def sanitize_path(path, replacements=None):
def truncate_path(path, length=MAX_FILENAME_LENGTH):
def _legalize_stage(path, replacements, length, extension, fragment):
def legalize_path(path, replacements, length, extension, fragment):
def py3_path(path):
def str2bool(value):
def as_string(value):
def text_string(value, encoding='utf-8'):
def plurality(objs):
def cpu_count():
def convert_command_args(args):
def command_output(cmd, shell=False):
def max_filename_length(path, limit=MAX_FILENAME_LENGTH):
def open_anything():
def editor_command():
def shlex_split(s):
def interactive_open(targets, command):
def _windows_long_path_name(short_path):
def case_sensitive(path):
def raw_seconds_short(string):
def asciify_path(path, sep_replace):
def _invalidate_queue(q, val=None, sync=True):
def multiple(messages):
def stage(func):
def mutator_stage(func):
def _allmsgs(obj):
def _event_select(events):
def run(root_coro):
def null():
def spawn(coro):
def call(coro):
def end(value=None):
def read(fd, bufsize=None):
def write(fd, data):
def connect(host, port):
def sleep(duration):
def join(coro):
def kill(coro):
def server(host, port, func):
def iter_first(sequence):
def _package_path(name):
def config_dirs():
def load_yaml(filename):
def restore_yaml_comments(data, default_data):
def as_template(value):
def resize_url(url, maxwidth):
def temp_file_for(path):
def pil_resize(maxwidth, path_in, path_out=None):
def im_resize(maxwidth, path_in, path_out=None):
def get_im_version():
def get_pil_version():
def ex_lvalue(name):
def ex_rvalue(name):
def ex_literal(val):
def ex_varassign(name, expr):
def ex_call(func, args):
def compile_func(arg_names, statements, name='_the_func', debug=False):
def _parse(template):
def _is_hidden_osx(path):
def _is_hidden_win(path):
def _is_hidden_dot(path):
def is_hidden(path):
def mediafile_image(image_path, maxwidth=None):
def embed_item(log, item, imagepath, maxwidth=None, itempath=None, compare_threshold=0, ifempty=False, as_album=False):
def embed_album(log, album, maxwidth=None, quiet=False, compare_threshold=0, ifempty=False):
def resize_image(log, imagepath, maxwidth):
def check_art_similarity(log, item, imagepath, compare_threshold):
def mutagen_call(action, path, func, *args, **kwargs):
def _safe_cast(out_type, val):
def _unpack_asf_image(data):
def _pack_asf_image(mime, data, type=3, description=''):
def _sc_decode(soundcheck):
def _sc_encode(gain, peak):
def _imghdr_what_wrapper(data):
def _wider_test_jpeg(data):
def image_mime_type(data):
def _insert(node, path, itemid):
def libtree(lib):
def scan(stream, Loader=Loader):
def parse(stream, Loader=Loader):
def compose(stream, Loader=Loader):
def compose_all(stream, Loader=Loader):
def load(stream, Loader=Loader):
def load_all(stream, Loader=Loader):
def safe_load(stream):
def safe_load_all(stream):
def emit(events, stream=None, Dumper=Dumper, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None):
def serialize_all(nodes, stream=None, Dumper=Dumper, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None, encoding='utf-8', explicit_start=None, explicit_end=None, version=None, tags=None):
def serialize(node, stream=None, Dumper=Dumper, **kwds):
def dump_all(documents, stream=None, Dumper=Dumper, default_style=None, default_flow_style=None, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None, encoding='utf-8', explicit_start=None, explicit_end=None, version=None, tags=None):
def dump(data, stream=None, Dumper=Dumper, **kwds):
def safe_dump_all(documents, stream=None, **kwds):
def safe_dump(data, stream=None, **kwds):
def add_implicit_resolver(tag, regexp, first=None, Loader=Loader, Dumper=Dumper):
def add_path_resolver(tag, path, kind=None, Loader=Loader, Dumper=Dumper):
def add_constructor(tag, constructor, Loader=Loader):
def add_multi_constructor(tag_prefix, multi_constructor, Loader=Loader):
def add_representer(data_type, representer, Dumper=Dumper):
def add_multi_representer(data_type, multi_representer, Dumper=Dumper):
def get_localzone():
def reload_localzone():
def _get_localzone(_root='/'):
def get_localzone():
def reload_localzone():
def valuestodict(key):
def get_localzone():
def reload_localzone():
@convert_error(IOError, error) DCNL @loadfile(method=False, writable=True) DCNL def delete(filething):
def is_valid_key(key):
@convert_error(IOError, error) DCNL @loadfile(method=False, writable=True) DCNL def delete(filething):
def is_fileobj(fileobj):
def verify_fileobj(fileobj, writable=False):
def verify_filename(filename):
def fileobj_name(fileobj):
def loadfile(method=True, writable=False, create=False):
def convert_error(exc_src, exc_dest):
@contextmanager DCNL def _openfile(instance, filething, filename, fileobj, writable, create):
def total_ordering(cls):
def hashable(cls):
def enum(cls):
def flags(cls):
def _fill_cdata(cls):
def get_size(fileobj):
def read_full(fileobj, size):
def seek_end(fileobj, offset):
def mmap_move(fileobj, dest, src, count):
def resize_file(fobj, diff, BUFFER_SIZE=(2 ** 16)):
def fallback_move(fobj, dest, src, count, BUFFER_SIZE=(2 ** 16)):
def insert_bytes(fobj, size, offset, BUFFER_SIZE=(2 ** 16)):
def delete_bytes(fobj, size, offset, BUFFER_SIZE=(2 ** 16)):
def resize_bytes(fobj, old_size, new_size, offset):
def dict_match(d, key, default=None):
def encode_endian(text, encoding, errors='strict', le=True):
def decode_terminated(data, encoding, strict=True):
def _read_track(chunk):
def _read_midi_length(fileobj):
def guid2bytes(s):
def bytes2guid(s):
def ASFValue(value, kind, **kwargs):
@convert_error(IOError, error) DCNL @loadfile(method=False, writable=True) DCNL def delete(filething):
def split_escape(string, sep, maxsplit=None, escape_char='\\'):
def isascii(string):
def copy(src, dst, merge, write_v1=True, excluded_tags=None, verbose=False):
def frame_from_fsnative(arg):
def value_from_fsnative(arg, escape):
@convert_error(IOError, error) DCNL @loadfile(method=False, writable=True) DCNL def delete(filething):
def _get_value_type(kind):
def APEValue(value, kind):
def determine_bpi(data, frames, EMPTY=('\x00' * 10)):
def read_frames(id3, data, frames):
def iter_text_fixups(data, encoding):
def find_id3v1(fileobj):
def ParseID3v1(data):
def MakeID3v1(id3):
@convert_error(IOError, error) DCNL @loadfile(method=False, writable=True) DCNL def delete(filething, delete_v1=True, delete_v2=True):
def getcwd():
def _get_userdir(user=None):
def expanduser(path):
def expandvars(path):
def gettempdir():
def gettempprefix():
def mkstemp(suffix=None, prefix=None, dir=None, text=False):
def mkdtemp(suffix=None, prefix=None, dir=None):
def ansi_parse(code):
def ansi_split(text, _re=re.compile(u'(\x1b\\[(\\d*;?)*\\S)')):
def print_(*objects, **kwargs):
def _print_unix(objects, sep, end, file, flush):
def _print_windows(objects, sep, end, file, flush):
def _readline_windows():
def _decode_codepage(codepage, data):
def _encode_codepage(codepage, text):
def input_(prompt=None):
def get_windows_env_var(key):
def set_windows_env_var(key, value):
def del_windows_env_var(key):
def read_windows_environ():
def getenv(key, value=None):
def unsetenv(key):
def putenv(key, value):
def _get_win_argv():
def _normalize_codec(codec, _cache={}):
def _swap_bytes(data):
def _codec_fails_on_encode_surrogates(codec, _cache={}):
def _codec_can_decode_with_surrogatepass(codec, _cache={}):
def _bytes2winpath(data, codec):
def _winpath2bytes_py3(text, codec):
def _fsn2legacy(path):
def _typecheck_fsnative(path):
def _fsn2native(path):
def _get_encoding():
def path2fsn(path):
def fsn2text(path, strict=False):
def text2fsn(text):
def fsn2bytes(path, encoding):
def bytes2fsn(data, encoding):
def uri2fsn(uri):
def fsn2uri(path):
def _parse_sv8_int(fileobj, limit=9):
def skip_id3(fileobj):
def iter_sync(fileobj, max_read):
@convert_error(IOError, error) DCNL @loadfile(method=False, writable=True) DCNL def delete(filething):
@loadfile(method=False) DCNL def File(filething, options=None, easy=False):
@convert_error(IOError, error) DCNL @loadfile(method=False, writable=True) DCNL def delete(filething):
@convert_error(IOError, error) DCNL @loadfile(method=False, writable=True) DCNL def delete(filething):
@convert_error(IOError, error) DCNL @loadfile(method=False, writable=True) DCNL def delete(filething):
def to_int_be(data):
@convert_error(IOError, error) DCNL @loadfile(method=False, writable=True) DCNL def delete(filething):
def parse_full_atom(data):
@convert_error(IOError, error) DCNL @loadfile(method=False, writable=True) DCNL def delete(filething):
def GASpecificConfig(r, info):
def createKeyPair(type, bits):
def createCertRequest(pkey, digest='md5', **name):
def createCertificate(req, (issuerCert, issuerKey), serial, (notBefore, notAfter), digest='md5'):
def make_cost_matrix(profit_matrix, inversion_function):
def print_matrix(matrix, msg=None):
def can_import(module):
def check_installation():
def main():
def is_frozen():
def get_default_instance():
def _Cfunction(name, flags, errcheck, *types):
def _Cobject(cls, ctype):
def _Constructor(cls, ptr=_internal_guard):
def string_result(result, func, arguments):
def class_result(classname):
def track_description_list(head):
def module_description_list(head):
def libvlc_errmsg():
def libvlc_clearerr():
def libvlc_vprinterr(fmt, ap):
def libvlc_new(argc, argv):
def libvlc_release(p_instance):
def libvlc_retain(p_instance):
def libvlc_add_intf(p_instance, name):
def libvlc_set_user_agent(p_instance, name, http):
def libvlc_set_app_id(p_instance, id, version, icon):
def libvlc_get_version():
def libvlc_get_compiler():
def libvlc_get_changeset():
def libvlc_free(ptr):
def libvlc_event_attach(p_event_manager, i_event_type, f_callback, user_data):
def libvlc_event_detach(p_event_manager, i_event_type, f_callback, p_user_data):
def libvlc_event_type_name(event_type):
def libvlc_log_get_context(ctx):
def libvlc_log_get_object(ctx, id):
def libvlc_log_unset(p_instance):
def libvlc_log_set(cb, data, p_instance):
def libvlc_log_set_file(p_instance, stream):
def libvlc_module_description_list_release(p_list):
def libvlc_audio_filter_list_get(p_instance):
def libvlc_video_filter_list_get(p_instance):
def libvlc_clock():
def libvlc_media_new_location(p_instance, psz_mrl):
def libvlc_media_new_path(p_instance, path):
def libvlc_media_new_fd(p_instance, fd):
def libvlc_media_new_callbacks(instance, open_cb, read_cb, seek_cb, close_cb, opaque):
def libvlc_media_new_as_node(p_instance, psz_name):
def libvlc_media_add_option(p_md, psz_options):
def libvlc_media_add_option_flag(p_md, psz_options, i_flags):
def libvlc_media_retain(p_md):
def libvlc_media_release(p_md):
def libvlc_media_get_mrl(p_md):
def libvlc_media_duplicate(p_md):
def libvlc_media_get_meta(p_md, e_meta):
def libvlc_media_set_meta(p_md, e_meta, psz_value):
def libvlc_media_save_meta(p_md):
def libvlc_media_get_state(p_md):
def libvlc_media_get_stats(p_md, p_stats):
def libvlc_media_subitems(p_md):
def libvlc_media_event_manager(p_md):
def libvlc_media_get_duration(p_md):
def libvlc_media_parse(p_md):
def libvlc_media_parse_async(p_md):
def libvlc_media_parse_with_options(p_md, parse_flag):
def libvlc_media_is_parsed(p_md):
def libvlc_media_set_user_data(p_md, p_new_user_data):
def libvlc_media_get_user_data(p_md):
def libvlc_media_tracks_get(p_md, tracks):
def libvlc_media_get_codec_description(i_type, i_codec):
def libvlc_media_tracks_release(p_tracks, i_count):
def libvlc_media_get_type(p_md):
def libvlc_media_discoverer_new(p_inst, psz_name):
def libvlc_media_discoverer_start(p_mdis):
def libvlc_media_discoverer_stop(p_mdis):
def libvlc_media_discoverer_release(p_mdis):
def libvlc_media_discoverer_localized_name(p_mdis):
def libvlc_media_discoverer_media_list(p_mdis):
def libvlc_media_discoverer_event_manager(p_mdis):
def libvlc_media_discoverer_is_running(p_mdis):
def libvlc_media_library_new(p_instance):
def libvlc_media_library_release(p_mlib):
def libvlc_media_library_retain(p_mlib):
def libvlc_media_library_load(p_mlib):
def libvlc_media_library_media_list(p_mlib):
def libvlc_media_list_new(p_instance):
def libvlc_media_list_release(p_ml):
def libvlc_media_list_retain(p_ml):
def libvlc_media_list_set_media(p_ml, p_md):
def libvlc_media_list_media(p_ml):
def libvlc_media_list_add_media(p_ml, p_md):
def libvlc_media_list_insert_media(p_ml, p_md, i_pos):
def libvlc_media_list_remove_index(p_ml, i_pos):
def libvlc_media_list_count(p_ml):
def libvlc_media_list_item_at_index(p_ml, i_pos):
def libvlc_media_list_index_of_item(p_ml, p_md):
def libvlc_media_list_is_readonly(p_ml):
def libvlc_media_list_lock(p_ml):
def libvlc_media_list_unlock(p_ml):
def libvlc_media_list_event_manager(p_ml):
def libvlc_media_list_player_new(p_instance):
def libvlc_media_list_player_release(p_mlp):
def libvlc_media_list_player_retain(p_mlp):
def libvlc_media_list_player_event_manager(p_mlp):
def libvlc_media_list_player_set_media_player(p_mlp, p_mi):
def libvlc_media_list_player_get_media_player(p_mlp):
def libvlc_media_list_player_set_media_list(p_mlp, p_mlist):
def libvlc_media_list_player_play(p_mlp):
def libvlc_media_list_player_pause(p_mlp):
def libvlc_media_list_player_is_playing(p_mlp):
def libvlc_media_list_player_get_state(p_mlp):
def libvlc_media_list_player_play_item_at_index(p_mlp, i_index):
def libvlc_media_list_player_play_item(p_mlp, p_md):
def libvlc_media_list_player_stop(p_mlp):
def libvlc_media_list_player_next(p_mlp):
def libvlc_media_list_player_previous(p_mlp):
def libvlc_media_list_player_set_playback_mode(p_mlp, e_mode):
def libvlc_media_player_new(p_libvlc_instance):
def libvlc_media_player_new_from_media(p_md):
def libvlc_media_player_release(p_mi):
def libvlc_media_player_retain(p_mi):
def libvlc_media_player_set_media(p_mi, p_md):
def libvlc_media_player_get_media(p_mi):
def libvlc_media_player_event_manager(p_mi):
def libvlc_media_player_is_playing(p_mi):
def libvlc_media_player_play(p_mi):
def libvlc_media_player_set_pause(mp, do_pause):
def libvlc_media_player_pause(p_mi):
def libvlc_media_player_stop(p_mi):
def libvlc_video_set_callbacks(mp, lock, unlock, display, opaque):
def libvlc_video_set_format(mp, chroma, width, height, pitch):
def libvlc_video_set_format_callbacks(mp, setup, cleanup):
def libvlc_media_player_set_nsobject(p_mi, drawable):
def libvlc_media_player_get_nsobject(p_mi):
def libvlc_media_player_set_agl(p_mi, drawable):
def libvlc_media_player_get_agl(p_mi):
def libvlc_media_player_set_xwindow(p_mi, drawable):
def libvlc_media_player_get_xwindow(p_mi):
def libvlc_media_player_set_hwnd(p_mi, drawable):
def libvlc_media_player_get_hwnd(p_mi):
def libvlc_media_player_set_android_context(p_mi, p_jvm, p_awindow_handler):
def libvlc_audio_set_callbacks(mp, play, pause, resume, flush, drain, opaque):
def libvlc_audio_set_volume_callback(mp, set_volume):
def libvlc_audio_set_format_callbacks(mp, setup, cleanup):
def libvlc_audio_set_format(mp, format, rate, channels):
def libvlc_media_player_get_length(p_mi):
def libvlc_media_player_get_time(p_mi):
def libvlc_media_player_set_time(p_mi, i_time):
def libvlc_media_player_get_position(p_mi):
def libvlc_media_player_set_position(p_mi, f_pos):
def libvlc_media_player_set_chapter(p_mi, i_chapter):
def libvlc_media_player_get_chapter(p_mi):
def libvlc_media_player_get_chapter_count(p_mi):
def libvlc_media_player_will_play(p_mi):
def libvlc_media_player_get_chapter_count_for_title(p_mi, i_title):
def libvlc_media_player_set_title(p_mi, i_title):
def libvlc_media_player_get_title(p_mi):
def libvlc_media_player_get_title_count(p_mi):
def libvlc_media_player_previous_chapter(p_mi):
def libvlc_media_player_next_chapter(p_mi):
def libvlc_media_player_get_rate(p_mi):
def libvlc_media_player_set_rate(p_mi, rate):
def libvlc_media_player_get_state(p_mi):
def libvlc_media_player_get_fps(p_mi):
def libvlc_media_player_has_vout(p_mi):
def libvlc_media_player_is_seekable(p_mi):
def libvlc_media_player_can_pause(p_mi):
def libvlc_media_player_program_scrambled(p_mi):
def libvlc_media_player_next_frame(p_mi):
def libvlc_media_player_navigate(p_mi, navigate):
def libvlc_media_player_set_video_title_display(p_mi, position, timeout):
def libvlc_track_description_list_release(p_track_description):
def libvlc_toggle_fullscreen(p_mi):
def libvlc_set_fullscreen(p_mi, b_fullscreen):
def libvlc_get_fullscreen(p_mi):
def libvlc_video_set_key_input(p_mi, on):
def libvlc_video_set_mouse_input(p_mi, on):
def libvlc_video_get_size(p_mi, num):
def libvlc_video_get_cursor(p_mi, num):
def libvlc_video_get_scale(p_mi):
def libvlc_video_set_scale(p_mi, f_factor):
def libvlc_video_get_aspect_ratio(p_mi):
def libvlc_video_set_aspect_ratio(p_mi, psz_aspect):
def libvlc_video_get_spu(p_mi):
def libvlc_video_get_spu_count(p_mi):
def libvlc_video_get_spu_description(p_mi):
def libvlc_video_set_spu(p_mi, i_spu):
def libvlc_video_set_subtitle_file(p_mi, psz_subtitle):
def libvlc_video_get_spu_delay(p_mi):
def libvlc_video_set_spu_delay(p_mi, i_delay):
def libvlc_media_player_get_full_title_descriptions(p_mi, titles):
def libvlc_title_descriptions_release(p_titles, i_count):
def libvlc_media_player_get_full_chapter_descriptions(p_mi, i_chapters_of_title, pp_chapters):
def libvlc_chapter_descriptions_release(p_chapters, i_count):
def libvlc_video_get_crop_geometry(p_mi):
def libvlc_video_set_crop_geometry(p_mi, psz_geometry):
def libvlc_video_get_teletext(p_mi):
def libvlc_video_set_teletext(p_mi, i_page):
def libvlc_toggle_teletext(p_mi):
def libvlc_video_get_track_count(p_mi):
def libvlc_video_get_track_description(p_mi):
def libvlc_video_get_track(p_mi):
def libvlc_video_set_track(p_mi, i_track):
def libvlc_video_take_snapshot(p_mi, num, psz_filepath, i_width, i_height):
def libvlc_video_set_deinterlace(p_mi, psz_mode):
def libvlc_video_get_marquee_int(p_mi, option):
def libvlc_video_get_marquee_string(p_mi, option):
def libvlc_video_set_marquee_int(p_mi, option, i_val):
def libvlc_video_set_marquee_string(p_mi, option, psz_text):
def libvlc_video_get_logo_int(p_mi, option):
def libvlc_video_set_logo_int(p_mi, option, value):
def libvlc_video_set_logo_string(p_mi, option, psz_value):
def libvlc_video_get_adjust_int(p_mi, option):
def libvlc_video_set_adjust_int(p_mi, option, value):
def libvlc_video_get_adjust_float(p_mi, option):
def libvlc_video_set_adjust_float(p_mi, option, value):
def libvlc_audio_output_list_get(p_instance):
def libvlc_audio_output_list_release(p_list):
def libvlc_audio_output_set(p_mi, psz_name):
def libvlc_audio_output_device_enum(mp):
def libvlc_audio_output_device_list_get(p_instance, aout):
def libvlc_audio_output_device_list_release(p_list):
def libvlc_audio_output_device_set(mp, module, device_id):
def libvlc_audio_output_device_get(mp):
def libvlc_audio_toggle_mute(p_mi):
def libvlc_audio_get_mute(p_mi):
def libvlc_audio_set_mute(p_mi, status):
def libvlc_audio_get_volume(p_mi):
def libvlc_audio_set_volume(p_mi, i_volume):
def libvlc_audio_get_track_count(p_mi):
def libvlc_audio_get_track_description(p_mi):
def libvlc_audio_get_track(p_mi):
def libvlc_audio_set_track(p_mi, i_track):
def libvlc_audio_get_channel(p_mi):
def libvlc_audio_set_channel(p_mi, channel):
def libvlc_audio_get_delay(p_mi):
def libvlc_audio_set_delay(p_mi, i_delay):
def libvlc_audio_equalizer_get_preset_count():
def libvlc_audio_equalizer_get_preset_name(u_index):
def libvlc_audio_equalizer_get_band_count():
def libvlc_audio_equalizer_get_band_frequency(u_index):
def libvlc_audio_equalizer_new():
def libvlc_audio_equalizer_new_from_preset(u_index):
def libvlc_audio_equalizer_release(p_equalizer):
def libvlc_audio_equalizer_set_preamp(p_equalizer, f_preamp):
def libvlc_audio_equalizer_get_preamp(p_equalizer):
def libvlc_audio_equalizer_set_amp_at_index(p_equalizer, f_amp, u_band):
def libvlc_audio_equalizer_get_amp_at_index(p_equalizer, u_band):
def libvlc_media_player_set_equalizer(p_mi, p_equalizer):
def libvlc_vlm_release(p_instance):
def libvlc_vlm_add_broadcast(p_instance, psz_name, psz_input, psz_output, i_options, ppsz_options, b_enabled, b_loop):
def libvlc_vlm_add_vod(p_instance, psz_name, psz_input, i_options, ppsz_options, b_enabled, psz_mux):
def libvlc_vlm_del_media(p_instance, psz_name):
def libvlc_vlm_set_enabled(p_instance, psz_name, b_enabled):
def libvlc_vlm_set_output(p_instance, psz_name, psz_output):
def libvlc_vlm_set_input(p_instance, psz_name, psz_input):
def libvlc_vlm_add_input(p_instance, psz_name, psz_input):
def libvlc_vlm_set_loop(p_instance, psz_name, b_loop):
def libvlc_vlm_set_mux(p_instance, psz_name, psz_mux):
def libvlc_vlm_change_media(p_instance, psz_name, psz_input, psz_output, i_options, ppsz_options, b_enabled, b_loop):
def libvlc_vlm_play_media(p_instance, psz_name):
def libvlc_vlm_stop_media(p_instance, psz_name):
def libvlc_vlm_pause_media(p_instance, psz_name):
def libvlc_vlm_seek_media(p_instance, psz_name, f_percentage):
def libvlc_vlm_show_media(p_instance, psz_name):
def libvlc_vlm_get_media_instance_position(p_instance, psz_name, i_instance):
def libvlc_vlm_get_media_instance_time(p_instance, psz_name, i_instance):
def libvlc_vlm_get_media_instance_length(p_instance, psz_name, i_instance):
def libvlc_vlm_get_media_instance_rate(p_instance, psz_name, i_instance):
def libvlc_vlm_get_media_instance_title(p_instance, psz_name, i_instance):
def libvlc_vlm_get_media_instance_chapter(p_instance, psz_name, i_instance):
def libvlc_vlm_get_media_instance_seekable(p_instance, psz_name, i_instance):
def libvlc_vlm_get_event_manager(p_instance):
def callbackmethod(callback):
def _dot2int(v):
def hex_version():
def libvlc_hex_version():
def debug_callback(event, *args, **kwds):
def start_tribler_core(base_path, child_pipe):
def get_color(name):
def pretty_date(time=False):
def get_base_path():
def is_frozen():
def bisect_right(item, item_list, is_torrent):
def get_gui_setting(gui_settings, value, default, is_bool=False):
def checkHandleAndSynchronize(default=None):
def convert_config_to_tribler71():
def add_tribler_config(new_config, old_config):
def add_libtribler_config(new_config, old_config):
def validate_source_string(source):
def levenshtein_dist(t1_fname, t2_fname):
def compare_torrents(torrent_1, torrent_2):
def ent2chr(input_str):
def make_torrent_file(input, userabortflag=None, userprogresscallback=(lambda x: None)):
def uniconvertl(l, e):
def uniconvert(s, enc):
def makeinfo(input, userabortflag, userprogresscallback):
def subfiles(d):
def filename2pathlist(path, skipfirst=False):
def pathlist2filename(pathlist):
def get_uniformed_tracker_url(tracker_url):
def parse_tracker_url(tracker_url):
def is_frozen():
def get_base_path():
def get_random_port(socket_type='all', min_port=5000, max_port=60000):
def check_random_port(port, socket_type='all'):
def _test_port(family, sock_type, port):
def split_into_keywords(string, to_filter_stopwords=False):
def _a_encode_int(value, mapping):
def _a_encode_long(value, mapping):
def _a_encode_float(value, mapping):
def _a_encode_unicode(value, mapping):
def _a_encode_bytes(value, mapping):
def _a_encode_list(values, mapping):
def _a_encode_set(values, mapping):
def _a_encode_tuple(values, mapping):
def _a_encode_dictionary(values, mapping):
def _a_encode_none(value, mapping):
def _a_encode_bool(value, mapping):
def encode(data, version='a'):
def _a_decode_int(stream, offset, count, _):
def _a_decode_long(stream, offset, count, _):
def _a_decode_float(stream, offset, count, _):
def _a_decode_unicode(stream, offset, count, _):
def _a_decode_bytes(stream, offset, count, _):
def _a_decode_list(stream, offset, count, mapping):
def _a_decode_set(stream, offset, count, mapping):
def _a_decode_tuple(stream, offset, count, mapping):
def _a_decode_dictionary(stream, offset, count, mapping):
def _a_decode_none(stream, offset, count, mapping):
def _a_decode_true(stream, offset, count, mapping):
def _a_decode_false(stream, offset, count, mapping):
def decode(stream, offset=0):
def add_url_params(url, params):
def patch_crypto_be_discovery():
def validate_torrent_nodes(metainfo):
def validate_init_peers(metainfo):
def validate_url_list(metainfo):
def validate_http_seeds(metainfo):
def validate_files(info):
def validate_torrent_info(metainfo):
def create_valid_metainfo(metainfo):
def valid_torrent_file(metainfo):
def is_valid_url(url):
def http_get(uri):
def parse_magnetlink(url):
def fix_torrent(file_path):
def translate_peers_into_health(peer_info_dicts):
def warnIfDispersyThread(func):
def return_handled_exception(request, exception):
def convert_search_torrent_to_json(torrent):
def convert_db_channel_to_json(channel, include_rel_score=False):
@blocking_call_on_reactor_thread DCNL def can_edit_channel(channel_id, channel_vote):
def convert_db_torrent_to_json(torrent, include_rel_score=False):
def convert_remote_torrent_to_json(torrent):
def get_parameter(parameters, name):
def relevance_score_remote_torrent(torrent_name):
def fix_unicode_dict(d):
def fix_unicode_array(arr):
def create_tracker_session(tracker_url, timeout):
def is_android():
def fix_filebasename(name, unit=False, maxlen=255):
def _get_string(buff, start_idx):
def _decode_options(packet, buff, start_idx):
def _decode_rrq_wrq(packet, packet_buff, offset):
def _decode_data(packet, packet_buff, offset):
def _decode_ack(packet, packet_buff, offset):
def _decode_error(packet, packet_buff, offset):
def _decode_oack(packet, packet_buff, offset):
def decode_packet(packet_buff):
def encode_packet(packet):
def get_default_dest_dir():
def decode_methods_request(offset, data):
def encode_method_selection_message(version, method):
def decode_request(orig_offset, data):
def encode_reply(version, rep, rsv, address_type, bind_address, bind_port):
def decode_udp_packet(data):
def encode_udp_packet(rsv, frag, address_type, address, port, payload):
def prepare_xml_rss(target_path, filename):
def make_decorator(func):
def threaded_reactor():
def stop_reactor():
def deferred(timeout=None):
def conv_output_length(input_length, filter_size, stride, pad=0):
def get_all_layers(layer, treat_as_input=None):
def unique(l):
def get_all_params(layer, **tags):
def stack_tensor_dict_list(tensor_dict_list):
def batch_norm(layer, **kwargs):
def get_full_output(layer_or_layers, inputs=None, **kwargs):
def Step(observation, reward, done, **kwargs):
def line_intersect(pt1, pt2, ptA, ptB):
def ray_segment_intersect(ray, segment):
def generate_hills(width, height, nhills):
def clear_patch(hfield, box):
def save_heightfield(x, y, hfield, fname, path=None):
def save_texture(x, y, hfield, fname, path=None):
def tweakfun(fun, alt=None):
def query_yes_no(question, default='yes'):
def cg(f_Ax, b, cg_iters=10, callback=None, verbose=False, residual_tol=1e-10):
def preconditioned_cg(f_Ax, f_Minvx, b, cg_iters=10, callback=None, verbose=False, residual_tol=1e-10):
def lanczos(f_Ax, b, k):
def lanczos2(f_Ax, b, k, residual_thresh=1e-09):
def compact(x):
def flatten_hessian(cost, wrt, consider_constant=None, disconnected_inputs='raise', block_diagonal=True):
def overrides(method):
def _get_base_class_names(frame):
def _pipe_segment_with_colons(align, colwidth):
def _pipe_line_with_colons(colwidths, colaligns):
def simple_separated_format(separator):
def _isnumber(string):
def _isint(string):
def _type(string, has_invisible=True):
def _afterpoint(string):
def _padleft(width, s, has_invisible=True):
def _padright(width, s, has_invisible=True):
def _padboth(width, s, has_invisible=True):
def _strip_invisible(s):
def _visible_width(s):
def _align_column(strings, alignment, minwidth=0, has_invisible=True):
def _column_type(strings, has_invisible=True):
def _format(val, valtype, floatfmt, missingval=''):
def _normalize_tabular_data(tabular_data, headers):
def tabulate(tabular_data, headers=[], tablefmt='simple', floatfmt='g', numalign='decimal', stralign='left', missingval=''):
def _build_simple_row(padded_cells, rowfmt):
def _build_row(padded_cells, colwidths, colaligns, rowfmt):
def _build_line(colwidths, colaligns, linefmt):
def _format_table(fmt, headers, rows, colwidths, colaligns):
def weighted_sample(weights, objects):
def normalize_updates(old_mean, old_std, new_mean, new_std, old_W, old_b):
def rk4(derivs, y0, t, *args, **kwargs):
def stack_tensor_dict_list(tensor_dict_list):
def sample_paths(policy_params, max_samples, max_path_length=np.inf, env_params=None, scope=None):
def truncate_paths(paths, max_samples):
def safer_eval(some_string):
def _find_library_candidates(library_names, library_file_extensions, library_search_paths):
def _load_library():
def _glfw_get_version(filename):
def init():
def terminate():
def get_version():
def get_version_string():
def set_error_callback(cbfun):
def get_monitors():
def get_primary_monitor():
def get_monitor_pos(monitor):
def get_monitor_physical_size(monitor):
def get_monitor_name(monitor):
def set_monitor_callback(cbfun):
def get_video_modes(monitor):
def get_video_mode(monitor):
def set_gamma(monitor, gamma):
def get_gamma_ramp(monitor):
def set_gamma_ramp(monitor, ramp):
def default_window_hints():
def window_hint(target, hint):
def create_window(width, height, title, monitor, share):
def destroy_window(window):
def window_should_close(window):
def set_window_should_close(window, value):
def set_window_title(window, title):
def get_window_pos(window):
def set_window_pos(window, xpos, ypos):
def get_window_size(window):
def set_window_size(window, width, height):
def get_framebuffer_size(window):
def iconify_window(window):
def restore_window(window):
def show_window(window):
def hide_window(window):
def get_window_monitor(window):
def get_window_attrib(window, attrib):
def set_window_user_pointer(window, pointer):
def get_window_user_pointer(window):
def set_window_pos_callback(window, cbfun):
def set_window_size_callback(window, cbfun):
def set_window_close_callback(window, cbfun):
def set_window_refresh_callback(window, cbfun):
def set_window_focus_callback(window, cbfun):
def set_window_iconify_callback(window, cbfun):
def set_framebuffer_size_callback(window, cbfun):
def poll_events():
def wait_events():
def get_input_mode(window, mode):
def set_input_mode(window, mode, value):
def get_key(window, key):
def get_mouse_button(window, button):
def get_cursor_pos(window):
def set_cursor_pos(window, xpos, ypos):
def set_key_callback(window, cbfun):
def set_char_callback(window, cbfun):
def set_mouse_button_callback(window, cbfun):
def set_cursor_pos_callback(window, cbfun):
def set_cursor_enter_callback(window, cbfun):
def set_scroll_callback(window, cbfun):
def joystick_present(joy):
def get_joystick_axes(joy):
def get_joystick_buttons(joy):
def get_joystick_name(joy):
def set_clipboard_string(window, string):
def get_clipboard_string(window):
def get_time():
def set_time(time):
def make_context_current(window):
def get_current_context():
def swap_buffers(window):
def swap_interval(interval):
def extension_supported(extension):
def get_proc_address(procname):
def register_license(file_path):
def _wait_result(exp_prefix, exp_name, timeout):
def launch_hyperopt_search(task_method, eval_method, param_space, hyperopt_experiment_key, hyperopt_db_host='localhost', hyperopt_db_port=1234, hyperopt_db_name='rllab', n_hyperopt_workers=1, hyperopt_max_evals=100, result_timeout=1200, max_retries=0, run_experiment_kwargs=None):
@bp.route('/') DCNL def home():
@bp.route('/upload', methods=['POST']) DCNL @require_user DCNL def upload():
@bp.route('/') DCNL def users():
@bp.route('/in/<city>') DCNL def city(city):
@bp.route('/<username>') DCNL def view(username):
@bp.route('/<username>/topics') DCNL def topics(username):
@bp.route('/') DCNL def nodes():
@bp.route('/create', methods=['GET', 'POST']) DCNL @require_staff DCNL def create():
@bp.route('/<urlname>') DCNL def view(urlname):
@bp.route('/<urlname>/edit', methods=['GET', 'POST']) DCNL @require_staff DCNL def edit(urlname):
@bp.route('/', methods=['GET', 'POST']) DCNL @require_staff DCNL def dashboard():
@bp.route('/user/<int:uid>', methods=['GET', 'POST']) DCNL @require_admin DCNL def user(uid):
@bp.route('/') DCNL def topics():
@bp.route('/latest') DCNL def latest():
@bp.route('/desert') DCNL def desert():
@bp.route('/create/<urlname>', methods=['GET', 'POST']) DCNL @require_user DCNL def create(urlname):
@bp.route('/<int:uid>', methods=['GET', 'POST']) DCNL def view(uid):
@bp.route('/<int:uid>/edit', methods=['GET', 'POST']) DCNL @require_user DCNL def edit(uid):
@bp.route('/<int:uid>/delete', methods=['POST']) DCNL @require_user DCNL def delete(uid):
@bp.route('/<int:uid>/move', methods=['GET', 'POST']) DCNL @require_user DCNL def move(uid):
@bp.route('/<int:uid>/reply', methods=['POST', 'DELETE']) DCNL @limit_request(5, redirect_url=(lambda uid: url_for('.view', uid=uid))) DCNL @require_user DCNL def reply(uid):
@bp.route('/<int:uid>/like', methods=('POST',)) DCNL @require_user DCNL def like(uid):
@bp.route('/signup', methods=['GET', 'POST']) DCNL def signup():
@bp.route('/signin', methods=['GET', 'POST']) DCNL def signin():
@bp.route('/signout') DCNL def signout():
@bp.route('/setting', methods=['GET', 'POST']) DCNL @require_login DCNL def setting():
@bp.route('/find', methods=['GET', 'POST']) DCNL def find():
@bp.route('/reset', methods=['GET', 'POST']) DCNL def reset():
@bp.route('/delete', methods=['GET', 'POST']) DCNL @require_login DCNL def delete():
@bp.route('/notification') DCNL @require_login DCNL def notification():
def _get_translations():
def _iframe(src, width=650, height=365, content=None, link=None):
def youtube(link):
def vimeo(link):
def youku(link):
def gist(link, content=None):
def markdown(text, renderer='highlight', inlinestyles=False, linenos=False):
def register_database(app):
def register_hooks(app):
def register_babel(app):
def register_logger(app):
def tarball():
def upload():
def install():
def restart():
@manager.command DCNL def createdb():
def run_migrations_offline():
def run_migrations_online():
def monkeypatch_method(cls):
def monkeypatch_class(name, bases, namespace):
def run_gunicorn():
def docker_client_version():
def load(kind=None):
def serialize_tar_info(tar_info):
def get_image_files_from_fobj(layer_file):
def get_image_files_json(image_id):
def get_file_info_map(file_infos):
def get_image_diff_json(image_id):
def _proc_pax(self, filetar):
def require_completion(f):
def set_cache_headers(f):
def _adapt_smtp_secure(value):
def load(kind=None):
@app.route('/v1/repositories/<path:repository>/', methods=['DELETE']) DCNL @app.route('/v1/repositories/<path:repository>/tags', methods=['DELETE']) DCNL @toolkit.parse_repository_name DCNL @toolkit.requires_auth DCNL def delete_repository(namespace, repository):
def handle_request(layer_id, redis_conn):
def _create_container_args(kwargs):
def resolve_authconfig(authconfig, registry=None):
def parse_auth(entries, raise_on_error=False):
def home_dir():
def load_config(config_path=None):
def create_api_error_from_http_exception(e):
def compare_version(v1, v2):
def datetime_to_timestamp(dt):
def parse_env_file(env_file):
def exclude_paths(root, patterns, dockerfile=None):
def should_include(path, exclude_patterns, include_patterns):
def should_check_directory(directory_path, exclude_patterns, include_patterns):
def stream_as_text(stream):
def json_splitter(buffer):
def json_stream(stream):
def split_buffer(stream, splitter=None, decoder=(lambda a: a)):
def _purge():
def fnmatch(name, pat):
def fnmatchcase(name, pat):
def translate(pat):
def read(socket, n=4096):
def read_exactly(socket, n):
def next_frame_size(socket):
def frames_iter(socket):
def force_leave_swarm(client):
def make_fake_api_client():
def make_fake_client():
def converge(service, strategy=ConvergenceStrategy.changed):
def make_service_dict(name, service_dict, working_dir, filename=None):
def stream_as_text(stream):
def split_buffer(stream, splitter=None, decoder=(lambda a: a)):
def json_splitter(buffer):
def json_stream(stream):
def build_log_presenters(service_names, monochrome):
def max_name_width(service_names, max_index_width=3):
def build_no_log_generator(container, log_args):
def consume_queue(queue, cascade_stop):
def yesno(prompt, default=None):
def input(prompt):
def call_silently(*args, **kwargs):
def docker_client(environment, version=None, tls_config=None, host=None, tls_version=None):
def parse_repository_tag(repo_path):
def merge_volume_bindings(volumes, tmpfs, previous_container):
def get_container_data_volumes(container, volumes_option, tmpfs_option):
def build_volume_from(volume_from_spec):
def find_candidates_in_parent_dirs(filenames, path):
def load(config_details):
def resolve_environment(service_dict, environment=None):
def merge_service_dicts_from_files(base, override, version):
def split_path_mapping(volume_path):
def serialize_string(dumper, data):
def validate_config_section(filename, config, section):
def validate_extends_file_path(service_name, extends_options, filename):
def _parse_valid_types_from_validator(validator):
def _parse_oneof_validator(error):
def handle_errors(errors, format_error_func, filename):
def env_vars_from_file(filename):
def normalize_path_for_engine(path):
def parallel_execute(objects, func, get_name, msg, get_deps=None, limit=None):
def parallel_execute_iter(objects, func, get_deps, limit):
def producer(obj, func, results, limiter):
def feed_queue(objects, func, get_deps, results, state, limiter):
def timeparse(sval):
def group_versions(versions):
def get_latest_versions(versions, num=1):
def get_default(versions):
def get_github_releases(projects):
def _discover(disp, ns, jid, node=None, fb2b=0, fb2a=1):
def discoverItems(disp, jid, node=None):
def discoverInfo(disp, jid, node=None):
def getRegInfo(disp, host, info={}, sync=True):
def register(disp, host, info):
def unregister(disp, host):
def changePasswordTo(disp, newpassword, host=None):
def getPrivacyLists(disp):
def getPrivacyList(disp, listname):
def setActivePrivacyList(disp, listname=None, typ='active'):
def setDefaultPrivacyList(disp, listname=None):
def setPrivacyList(disp, list):
def delPrivacyList(disp, listname):
def XMLescape(txt):
def ustr(what):
def XML2Node(xml):
def BadXML2Node(xml):
def isResultNode(node):
def isErrorNode(node):
def make_step(net, step_size=1.5, end='inception_4c/output', jitter=32, clip=True):
def make_step_guided(net, step_size=1.5, end='inception_4c/output', jitter=32, clip=True, objective_fn=objective_guide, **objective_params):
def make_sure_path_exists(path):
def new_unfollow(self, user_id, user_name):
def check_supported_function(func, check_func):
def stub_function_only(func):
def stub_and_esp32_function_only(func):
def esp8266_function_only(func):
def LoadFirmwareImage(chip, filename):
def slip_reader(port):
def div_roundup(a, b):
def align_file_position(f, size):
def flash_size_bytes(size):
def pad_to(data, alignment, pad_character='\xff'):
def _update_image_flash_params(esp, address, args, image):
def expand_file_arguments():
def efuse_write_reg_addr(block, word):
def efuse_perform_write(esp):
def dump(esp, _efuses, args):
def summary(esp, efuses, args):
def segment_matches_section(segment, section):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d):
def itervalues(d):
def iteritems(d):
def with_metaclass(meta, base=object):
def generate_k(order, secexp, hash_func, data):
def randrange(order, entropy=None):
def modular_exp(base, exponent, modulus):
def polynomial_reduce_mod(poly, polymod, p):
def polynomial_multiply_mod(m1, m2, polymod, p):
def polynomial_exp_mod(base, exponent, polymod, p):
def jacobi(a, n):
def square_root_mod_prime(a, p):
def inverse_mod(a, m):
def gcd2(a, b):
def gcd(*a):
def lcm2(a, b):
def lcm(*a):
def factorization(n):
def phi(n):
def carmichael(n):
def carmichael_of_factorized(f_list):
def carmichael_of_ppower(pp):
def order_mod(x, m):
def largest_factor_relatively_prime(a, b):
def kinda_order_mod(x, m):
def is_prime(n):
def next_prime(starting_value):
def int_to_string(x):
def string_to_int(s):
def digest_integer(m):
def point_is_valid(generator, x, y):
def _feed_stream(feeder, in_stream, out_stream, block_size=BLOCK_SIZE):
def encrypt_stream(mode, in_stream, out_stream, block_size=BLOCK_SIZE, padding=PADDING_DEFAULT):
def decrypt_stream(mode, in_stream, out_stream, block_size=BLOCK_SIZE, padding=PADDING_DEFAULT):
def get_chunks(source, chunk_len):
def endian_swap_words(source):
def swap_word_order(source):
def digest_secure_bootloader(args):
def generate_signing_key(args):
def sign_data(args):
def verify_signature(args):
def extract_public_key(args):
def _flash_encryption_tweak_range(flash_crypt_config=15):
def _flash_encryption_tweak_key(key, offset, tweak_range):
def rectangle(win, uly, ulx, lry, lrx):
def wrapper(func, *args, **kwds):
def tokenize(readline, tokeneater=printtoken):
def untokenize(iterable):
def generate_tokens(readline):
def normcase(s):
def isabs(s):
def join(a, *p):
def splitdrive(p):
def splitunc(p):
def split(p):
def basename(p):
def dirname(p):
def islink(path):
def ismount(path):
def walk(top, func, arg):
def expanduser(path):
def expandvars(path):
def normpath(path):
def relpath(path, start=curdir):
def cmp(f1, f2, shallow=1):
def cmpfiles(a, b, common, shallow=1):
def open(filename, flag='c', protocol=None, writeback=False):
def _lock_file(f, dotlock=True):
def _unlock_file(f):
def _create_carefully(path):
def _create_temporary(path):
def _sync_flush(f):
def _sync_close(f):
def wrap_info(info):
def start_debugger(rpchandler, gui_adap_oid):
def start_remote_debugger(rpcclt, pyshell):
def close_remote_debugger(rpcclt):
def coding_spec(str):
def expand_substates(states):
def _parse_sequence(sequence):
def MultiCallCreator(widget):
def get_arg_text(ob):
def runningAsOSXApp():
def isCarbonAquaTk(root):
def tkVersionWarning(root):
def addOpenEventSupport(root, flist):
def overrideRootMenu(root, flist):
def setupApp(root, flist):
def any(name, alternates):
def extended_linecache_checkcache(filename=None, orig_checkcache=linecache.checkcache):
def main(del_exitfunc=False):
def cleanup_traceback(tb, exclude):
def exit():
def listicons(icondir=ICONDIR):
def _sphinx_version():
def _find_module(fullname, path=None):
def unix_getpass(prompt='Password: DCSP ', stream=None):
def win_getpass(prompt='Password: DCSP ', stream=None):
def getuser():
def reindent(src, indent):
def _template_func(setup, func):
def timeit(stmt='pass', setup='pass', timer=default_timer, number=default_number):
def repeat(stmt='pass', setup='pass', timer=default_timer, repeat=default_repeat, number=default_number):
def main(args=None):
def localcontext(ctx=None):
def _dec_from_triple(sign, coefficient, exponent, special=False):
def _normalize(op1, op2, prec=0):
def _nbits(n, correction={'0': 4, '1': 3, '2': 2, '3': 2, '4': 1, '5': 1, '6': 1, '7': 1, '8': 0, '9': 0, 'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0}):
def _sqrt_nearest(n, a):
def _rshift_nearest(x, shift):
def _div_nearest(a, b):
def _ilog(x, M, L=8):
def _dlog10(c, e, p):
def _dlog(c, e, p):
def _iexp(x, M, L=8):
def _dexp(c, e, p):
def _dpower(xc, xe, yc, ye, p):
def _log10_lb(c, correction={'1': 100, '2': 70, '3': 53, '4': 40, '5': 31, '6': 23, '7': 16, '8': 10, '9': 5}):
def _convert_other(other, raiseit=False, allow_float=False):
def _parse_format_specifier(format_spec, _localeconv=None):
def _format_align(sign, body, spec):
def _group_lengths(grouping):
def _insert_thousands_sep(digits, spec, min_width=1):
def _format_sign(is_negative, spec):
def _format_number(is_negative, intpart, fracpart, exp, spec):
def _parse_makefile(filename, vars=None):
def _init_posix(vars):
def _init_non_posix(vars):
def parse_config_h(fp, vars=None):
def get_config_h_filename():
def get_scheme_names():
def get_path_names():
def get_paths(scheme=_get_default_scheme(), vars=None, expand=True):
def get_path(name, scheme=_get_default_scheme(), vars=None, expand=True):
def get_config_vars(*args):
def get_config_var(name):
def get_platform():
def new(key, msg=None, digestmod=None):
def skip(reason):
def skipIf(condition, reason):
def skipUnless(condition, reason):
def sorted_list_difference(expected, actual):
def unorderable_list_difference(expected, actual, ignore_duplicate=False):
def _count_diff_all_purpose(actual, expected):
def _ordered_count(iterable):
def _count_diff_hashable(actual, expected):
def _isnotsuite(test):
def _slotnames(cls):
def add_extension(module, name, code):
def remove_extension(module, name, code):
def run(statement, filename=None, sort=(-1)):
def runctx(statement, globals, locals, filename=None, sort=(-1)):
def askcolor(color=None, **options):
def nametofont(name):
def families(root=None):
def names(root=None):
def askopenfilename(**options):
def asksaveasfilename(**options):
def askopenfilenames(**options):
def askopenfile(mode='r', **options):
def askopenfiles(mode='r', **options):
def asksaveasfile(mode='w', **options):
def askdirectory(**options):
def test():
def showinfo(title=None, message=None, **options):
def showwarning(title=None, message=None, **options):
def showerror(title=None, message=None, **options):
def askquestion(title=None, message=None, **options):
def askokcancel(title=None, message=None, **options):
def askyesno(title=None, message=None, **options):
def askyesnocancel(title=None, message=None, **options):
def askretrycancel(title=None, message=None, **options):
def _flatten(tuple):
def _cnfmerge(cnfs):
def NoDefaultRoot():
def _tkerror(err):
def _exit(code='0'):
def mainloop(n=0):
def getboolean(s):
def OptionName(widget):
def _format_optdict(optdict, script=False, ignore=None):
def _format_mapdict(mapdict, script=False):
def _format_elemcreate(etype, script=False, *args, **kw):
def _format_layoutlist(layout, indent=0, indent_size=2):
def _script_from_settings(settings):
def _dict_from_tcltuple(ttuple, cut_minus=True):
def _list_from_statespec(stuple):
def _list_from_layouttuple(ltuple):
def _val_or_dict(options, func, *args):
def _convert_stringval(value):
def tclobjs_to_py(adict):
def setup_master(master=None):
def askinteger(title, prompt, **kw):
def askfloat(title, prompt, **kw):
def askstring(title, prompt, **kw):
def read_uint1(f):
def read_uint2(f):
def read_int4(f):
def read_stringnl(f, decode=True, stripquotes=True):
def read_stringnl_noescape_pair(f):
def read_string4(f):
def read_string1(f):
def read_unicodestringnl(f):
def read_unicodestring4(f):
def read_decimalnl_short(f):
def read_decimalnl_long(f):
def read_floatnl(f):
def read_float8(f):
def read_long1(f):
def read_long4(f):
def genops(pickle):
def optimize(p):
def dis(pickle, out=None, memo=None, indentlevel=4):
def wrap(text, width=70, **kwargs):
def fill(text, width=70, **kwargs):
def dedent(text):
def open(file, flag=None, mode=438):
def simplegeneric(func):
def walk_packages(path=None, prefix='', onerror=None):
def iter_modules(path=None, prefix=''):
def get_importer(path_item):
def iter_importers(fullname=''):
def get_loader(module_or_name):
def find_loader(fullname):
def extend_path(path, name):
def get_data(package, resource):
def binhex(inp, out):
def hexbin(inp, out):
def encode(in_file, out_file, name=None, mode=None):
def decode(in_file, out_file=None, mode=None, quiet=0):
def test():
def _bdecode(s):
def fix_eols(s):
def formataddr(pair):
def getaddresses(fieldvalues):
def formatdate(timeval=None, localtime=False, usegmt=False):
def make_msgid(idstring=None):
def unquote(str):
def decode_rfc2231(s):
def encode_rfc2231(s, charset=None, language=None):
def decode_params(params):
def message_from_string(s, *args, **kws):
def message_from_file(fp, *args, **kws):
def walk(self):
def body_line_iterator(msg, decode=False):
def typed_subpart_iterator(msg, maintype='text', subtype=None):
def _structure(msg, fp=None, level=0, include_default=False):
def parsedate_tz(data):
def parsedate(data):
def mktime_tz(data):
def quote(str):
def add_charset(charset, header_enc=None, body_enc=None, output_charset=None):
def add_alias(alias, canonical):
def add_codec(charset, codecname):
def decode_header(header):
def make_header(decoded_seq, maxlinelen=None, header_name=None, continuation_ws=' DCSP '):
def _whatsnd(data):
def encode_base64(msg):
def encode_quopri(msg):
def encode_7or8bit(msg):
def encode_noop(msg):
def header_quopri_check(c):
def body_quopri_check(c):
def header_quopri_len(s):
def body_quopri_len(str):
def unquote(s):
def header_encode(header, charset='iso-8859-1', keep_eols=False, maxlinelen=76, eol=NL):
def encode(body, binary=False, maxlinelen=76, eol=NL):
def decode(encoded, eol=NL):
def _unquote_match(match):
def header_decode(s):
def _formatparam(param, value=None, quote=True):
def base64_len(s):
def header_encode(header, charset='iso-8859-1', keep_eols=False, maxlinelen=76, eol=NL):
def encode(s, binary=True, maxlinelen=76, eol=NL):
def decode(s, convert_eols=None):
def makedirs(name, mode=511):
def removedirs(name):
def renames(old, new):
def walk(top, topdown=True, onerror=None, followlinks=False):
def execl(file, *args):
def execle(file, *args):
def execlp(file, *args):
def execlpe(file, *args):
def execvp(file, args):
def execvpe(file, args, env):
def getenv(key, default=None):
def insort_right(a, x, lo=0, hi=None):
def bisect_right(a, x, lo=0, hi=None):
def insort_left(a, x, lo=0, hi=None):
def bisect_left(a, x, lo=0, hi=None):
def heappush(heap, item):
def heappop(heap):
def heapreplace(heap, item):
def heappushpop(heap, item):
def heapify(x):
def nlargest(n, iterable):
def nsmallest(n, iterable):
def merge(*iterables):
def nsmallest(n, iterable, key=None):
def nlargest(n, iterable, key=None):
def warnpy3k(message, category=None, stacklevel=1):
def _show_warning(message, category, filename, lineno, file=None, line=None):
def formatwarning(message, category, filename, lineno, line=None):
def filterwarnings(action, message='', category=Warning, module='', lineno=0, append=0):
def simplefilter(action, category=Warning, lineno=0, append=0):
def resetwarnings():
def warn(message, category=None, stacklevel=1):
def run(statement, filename=None, sort=(-1)):
def runctx(statement, globals, locals, filename=None, sort=(-1)):
def cert_time_to_seconds(cert_time):
def DER_cert_to_PEM_cert(der_cert_bytes):
def PEM_cert_to_DER_cert(pem_cert_string):
def get_server_certificate(addr, ssl_version=PROTOCOL_SSLv3, ca_certs=None):
def sslwrap_simple(sock, keyfile=None, certfile=None):
def reset():
def listdir(path):
def annotate(head, list):
def encode_basestring(s):
def py_encode_basestring_ascii(s):
def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, **kw):
def dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, **kw):
def load(fp, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
def py_scanstring(s, end, encoding=None, strict=True, _b=BACKSLASH, _m=STRINGCHUNK.match):
def change_sequence(seq, action, seqno=_Unspecified, cond=_Unspecified):
def contextmanager(func):
@contextmanager DCNL def nested(*managers):
def open(file, mode=u'r', buffering=(-1), encoding=None, errors=None, newline=None, closefd=True):
def _match_abbrev(s, wordmap):
def check(file):
def extract(s):
def unexpo(intpart, fraction, expo):
def roundfrac(intpart, fraction, digs):
def fix(x, digs):
def sci(x, digs):
def test():
def abs__file__():
def removeduppaths():
def addbuilddir():
def _init_pathinfo():
def addpackage(sitedir, name, known_paths):
def addsitedir(sitedir, known_paths=None):
def check_enableusersite():
def getuserbase():
def getusersitepackages():
def addusersitepackages(known_paths):
def getsitepackages():
def addsitepackages(known_paths):
def setBEGINLIBPATH():
def setquit():
def setcopyright():
def aliasmbcs():
def setencoding():
def execsitecustomize():
def execusercustomize():
def isleap(year):
def leapdays(y1, y2):
def weekday(year, month, day):
def monthrange(year, month):
def format(cols, colwidth=_colwidth, spacing=_spacing):
def formatstring(cols, colwidth=_colwidth, spacing=_spacing):
def timegm(tuple):
def lwp_cookie_str(cookie):
def parse(source, filename='<unknown>', mode='exec'):
def literal_eval(node_or_string):
def dump(node, annotate_fields=True, include_attributes=False):
def copy_location(new_node, old_node):
def fix_missing_locations(node):
def increment_lineno(node, n=1):
def iter_fields(node):
def iter_child_nodes(node):
def get_docstring(node, clean=True):
def walk(node):
def reduce_tree(node, parent=None):
def get_characteristic_subpattern(subpatterns):
def rec_test(sequence, test_func):
def tokenize_wrapper(input):
def pattern_convert(grammar, raw_node_info):
def tokenize(readline, tokeneater=printtoken):
def _get_normal_name(orig_enc):
def detect_encoding(readline):
def untokenize(iterable):
def generate_tokens(readline):
def load_grammar(gt='Grammar.txt', gp=None, save=True, force=False, logger=None):
def _newer(a, b):
def Assign(target, source):
def Name(name, prefix=None):
def Attr(obj, attr):
def Comma():
def Dot():
def ArgList(args, lparen=LParen(), rparen=RParen()):
def Call(func_name, args=None, prefix=None):
def Newline():
def BlankLine():
def Subscript(index_node):
def String(string, prefix=None):
def ListComp(xp, fp, it, test=None):
def FromImport(package_name, name_leafs):
def is_tuple(node):
def is_list(node):
def attr_chain(obj, attr):
def in_special_context(node):
def is_probably_builtin(node):
def find_indentation(node):
def find_root(node):
def does_tree_import(package, name, node):
def is_import(node):
def touch_import(package, name, node):
def find_binding(name, node, package=None):
def _is_import_binding(node, name, package=None):
def diff_texts(a, b, filename):
def main(fixer_pkg, args=None):
def has_metaclass(parent):
def fixup_parse_tree(cls_node):
def fixup_simple_stmt(parent, i, stmt_node):
def fixup_indent(suite):
def traverse_imports(names):
def get_all_fix_names(fixer_pkg, remove_prefix=True):
def _get_head_types(pat):
def _get_headnode_dict(fixer_list):
def get_fixers_from_package(pkg_name):
def convert(gr, raw_node):
def generate_matches(patterns, nodes):
def get_close_matches(word, possibilities, n=3, cutoff=0.6):
def _count_leading(line, ch):
def IS_LINE_JUNK(line, pat=re.compile('\\s*#?\\s*$').match):
def IS_CHARACTER_JUNK(ch, ws=' DCSP  DCTB '):
def _format_range_unified(start, stop):
def unified_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n'):
def _format_range_context(start, stop):
def context_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n'):
def ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK):
def _mdiff(fromlines, tolines, context=None, linejunk=None, charjunk=IS_CHARACTER_JUNK):
def restore(delta, which):
def make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler):
def _formatparam(param, value=None, quote=1):
def guess_scheme(environ):
def application_uri(environ):
def request_uri(environ, include_query=1):
def shift_path_info(environ):
def setup_testing_defaults(environ):
def is_hop_by_hop(header_name):
def validator(application):
def _url_collapse_path_split(path):
def nobody_uid():
def executable(path):
def test(condition, true, false):
def c2py(plural):
def _iterdump(connection):
def time2isoz(t=None):
def time2netscape(t=None):
def http2time(text):
def iso2time(text):
def unmatched(match):
def split_header_words(header_values):
def join_header_words(lists):
def parse_ns_headers(ns_headers):
def is_HDN(text):
def domain_match(A, B):
def liberal_is_HDN(text):
def user_domain_match(A, B):
def request_host(request):
def eff_request_host(request):
def request_path(request):
def escape_path(path):
def reach(h):
def is_third_party(request):
def deepvalues(mapping):
def guess_type(url, strict=True):
def guess_all_extensions(type, strict=True):
def guess_extension(type, strict=True):
def add_type(type, ext, strict=True):
def compile_dir(dir, maxlevels=10, ddir=None, force=0, rx=None, quiet=0):
def compile_file(fullname, ddir=None, force=0, rx=None, quiet=0):
def compile_path(skip_curdir=1, maxlevels=0, force=0, quiet=0):
def expand_args(args, flist):
def main():
def isabs(s):
def split(s):
def splitdrive(p):
def islink(s):
def lexists(path):
def expandvars(path):
def expanduser(path):
def normpath(s):
def walk(top, func, arg):
def abspath(path):
def url2pathname(pathname):
def pathname2url(pathname):
def pathdirs():
def getdoc(object):
def splitdoc(doc):
def classname(object, modname):
def isdata(object):
def replace(text, *pairs):
def cram(text, maxlen):
def stripid(text):
def _split_list(s, predicate):
def visiblename(name, all=None, obj=None):
def classify_class_attrs(object):
def ispackage(path):
def synopsis(filename, cache={}):
def importfile(path):
def safeimport(path, forceload=0, cache={}):
def pager(text):
def getpager():
def plain(text):
def pipepager(text, cmd):
def tempfilepager(text, cmd):
def ttypager(text):
def plainpager(text):
def describe(thing):
def locate(path, forceload=0):
def resolve(thing, forceload=0):
def render_doc(thing, title='Python DCSP Library DCSP Documentation: DCSP %s', forceload=0):
def doc(thing, title='Python DCSP Library DCSP Documentation: DCSP %s', forceload=0):
def writedoc(thing, forceload=0):
def writedocs(dir, pkgpath='', done=None):
def apropos(key):
def gui():
def cli():
def compile(source, filename, mode, flags=None, dont_inherit=None):
def generateArgList(arglist):
def findOp(node):
def set_filename(filename, tree):
def is_future(stmt):
def order_blocks(start_block, exit_block):
def twobyte(val):
def setraw(fd, when=TCSAFLUSH):
def setcbreak(fd, when=TCSAFLUSH):
def pprint(object, stream=None, indent=1, width=80, depth=None):
def pformat(object, indent=1, width=80, depth=None):
def saferepr(object):
def isreadable(object):
def isrecursive(object):
def prepare(data):
def RawValue(typecode_or_type, *args):
def RawArray(typecode_or_type, size_or_initializer):
def Value(typecode_or_type, *args, **kwds):
def Array(typecode_or_type, size_or_initializer, **kwds):
def Manager():
def Pipe(duplex=True):
def cpu_count():
def freeze_support():
def get_logger():
def log_to_stderr(level=None):
def allow_connection_pickling():
def Lock():
def RLock():
def Condition(lock=None):
def Semaphore(value=1):
def BoundedSemaphore(value=1):
def Event():
def Queue(maxsize=0):
def JoinableQueue(maxsize=0):
def Pool(processes=None, initializer=None, initargs=(), maxtasksperchild=None):
def RawValue(typecode_or_type, *args):
def RawArray(typecode_or_type, size_or_initializer):
def Value(typecode_or_type, *args, **kwds):
def Array(typecode_or_type, size_or_initializer, **kwds):
def get_logger():
def log_to_stderr(level=None):
def _run_finalizers(minpriority=None):
def is_exiting():
def current_process():
def active_children():
def arbitrary_address(family):
def address_type(address):
def Client(address, family=None, authkey=None):
def SocketClient(address):
def dispatch(c, id, methodname, args=(), kwds={}):
def all_methods(obj):
def public_methods(obj):
def RebuildProxy(func, token, serializer, kwds):
def MakeProxyType(name, exposed, _cache={}):
def AutoProxy(token, serializer, manager=None, authkey=None, exposed=None, incref=True):
def _purge():
def fnmatch(name, pat):
def filter(names, pat):
def fnmatchcase(name, pat):
def translate(pat):
def ismodule(object):
def isclass(object):
def ismethod(object):
def ismethoddescriptor(object):
def isdatadescriptor(object):
def isfunction(object):
def isgeneratorfunction(object):
def isgenerator(object):
def istraceback(object):
def isframe(object):
def iscode(object):
def isbuiltin(object):
def isroutine(object):
def isabstract(object):
def getmembers(object, predicate=None):
def classify_class_attrs(cls):
def getmro(cls):
def indentsize(line):
def getdoc(object):
def cleandoc(doc):
def getfile(object):
def getmoduleinfo(path):
def getmodulename(path):
def getsourcefile(object):
def getabsfile(object, _filename=None):
def getmodule(object, _filename=None):
def findsource(object):
def getcomments(object):
def getblock(lines):
def getsourcelines(object):
def getsource(object):
def walktree(classes, children, parent):
def getclasstree(classes, unique=0):
def getargs(co):
def getargspec(func):
def getargvalues(frame):
def strseq(object, convert, join=joinseq):
def formatargspec(args, varargs=None, varkw=None, defaults=None, formatarg=str, formatvarargs=(lambda name: ('*' + name)), formatvarkw=(lambda name: ('**' + name)), formatvalue=(lambda value: ('=' + repr(value))), join=joinseq):
def formatargvalues(args, varargs, varkw, locals, formatarg=str, formatvarargs=(lambda name: ('*' + name)), formatvarkw=(lambda name: ('**' + name)), formatvalue=(lambda value: ('=' + repr(value))), join=joinseq):
def getcallargs(func, *positional, **named):
def getframeinfo(frame, context=1):
def getlineno(frame):
def getouterframes(frame, context=1):
def getinnerframes(tb, context=1):
def stack(context=1):
def trace(context=1):
def urlopen(url, data=None, proxies=None):
def localhost():
def thishost():
def ftperrors():
def noheaders():
def toBytes(url):
def unwrap(url):
def splittype(url):
def splithost(url):
def splituser(host):
def splitpasswd(user):
def splitport(host):
def splitnport(host, defport=(-1)):
def splitquery(url):
def splittag(url):
def splitattr(url):
def splitvalue(attr):
def unquote(s):
def unquote_plus(s):
def quote(s, safe='/'):
def quote_plus(s, safe=''):
def urlencode(query, doseq=0):
def getproxies_environment():
def proxy_bypass_environment(host):
def _resolve_name(name, package, level):
def import_module(name, package=None):
def glob(pathname):
def iglob(pathname):
def _run_exitfuncs():
def register(func, *targs, **kargs):
def interact(banner=None, readfunc=None, local=None):
def mime_decode(line):
def mime_decode_header(line):
def unmimify_part(ifile, ofile, decode_base64=0):
def unmimify(infile, outfile, decode_base64=0):
def mime_encode(line, header):
def mime_encode_header(line):
def mimify_part(ifile, ofile, is_mime):
def mimify(infile, outfile):
def register(name, klass, instance=None, update_tryorder=1):
def get(using=None):
def _synthesize(browser, update_tryorder=1):
def _iscommand(cmd):
def test():
def fileConfig(fname, defaults=None, disable_existing_loggers=True):
def _resolve(name):
def _create_formatters(cp):
def _install_handlers(cp, formatters):
def _install_loggers(cp, handlers, disable_existing_loggers):
def dictConfig(config):
def listen(port=DEFAULT_LOGGING_CONFIG_PORT):
def stopListening():
def currentframe():
def getLevelName(level):
def addLevelName(level, levelName):
def _acquireLock():
def _releaseLock():
def makeLogRecord(dict):
def _removeHandlerRef(wr):
def _addHandlerRef(handler):
def setLoggerClass(klass):
def getLoggerClass():
def basicConfig(**kwargs):
def getLogger(name=None):
def critical(msg, *args, **kwargs):
def error(msg, *args, **kwargs):
def exception(msg, *args):
def warning(msg, *args, **kwargs):
def info(msg, *args, **kwargs):
def debug(msg, *args, **kwargs):
def log(level, msg, *args, **kwargs):
def disable(level):
def shutdown(handlerList=_handlerList):
def _showwarning(message, category, filename, lineno, file=None, line=None):
def captureWarnings(capture):
def normcase(s):
def join(a, *p):
def splitunc(p):
def basename(p):
def dirname(p):
def ismount(path):
def normpath(path):
def abspath(path):
def checkfuncname(b, frame):
def effective(file, line, frame):
def openpty():
def master_open():
def _open_terminal():
def slave_open(tty_name):
def fork():
def _writen(fd, data):
def _read(fd):
def _copy(master_fd, master_read=_read, stdin_read=_read):
def spawn(argv, master_read=_read, stdin_read=_read):
def update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES):
def wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES):
def total_ordering(cls):
def cmp_to_key(mycmp):
def open(name, mode='r', bufsize=(-1)):
def fileopen(file):
def create_string_buffer(init, size=None):
def CFUNCTYPE(restype, *argtypes, **kw):
def string_at(ptr, size=(-1)):
def dylib_info(filename):
def ensure_utf8(s):
def dyld_image_suffix_search(iterator, env=None):
def dyld_find(name, executable_path=None, env=None):
def framework_find(fn, executable_path=None, env=None):
def framework_info(filename):
def _other_endian(typ):
def clearcache():
def getlines(filename, module_globals=None):
def checkcache(filename=None):
def updatecache(filename, module_globals=None):
def call(*popenargs, **kwargs):
def check_call(*popenargs, **kwargs):
def check_output(*popenargs, **kwargs):
def list2cmdline(seq):
def exists(path):
def isfile(path):
def isdir(s):
def getsize(filename):
def getmtime(filename):
def getatime(filename):
def getctime(filename):
def commonprefix(m):
def _splitext(p, sep, altsep, extsep):
def getparser(use_datetime=0):
def dumps(params, methodname=None, methodresponse=None, encoding=None, allow_none=0):
def loads(data, use_datetime=0):
def gzip_encode(data):
def gzip_decode(data):
def __py_new(name, string=''):
def __hash_new(name, string=''):
def stn(s, length):
def nts(s):
def nti(s):
def itn(n, digits=8, format=DEFAULT_FORMAT):
def uts(s, encoding, errors):
def calc_chksums(buf):
def copyfileobj(src, dst, length=None):
def filemode(mode):
def is_tarfile(name):
def b64encode(s, altchars=None):
def b64decode(s, altchars=None):
def standard_b64encode(s):
def standard_b64decode(s):
def urlsafe_b64encode(s):
def urlsafe_b64decode(s):
def b32encode(s):
def b32decode(s, casefold=False, map01=None):
def b16encode(s):
def b16decode(s, casefold=False):
def encode(input, output):
def decode(input, output):
def encodestring(s):
def decodestring(s):
def test():
def format(percent, value, grouping=False, monetary=False, *additional):
def format_string(f, val, grouping=False):
def currency(val, symbol=True, grouping=False, international=False):
def str(val):
def atof(string, func=float):
def atoi(str):
def normalize(localename):
def _parse_localename(localename):
def _build_localename(localetuple):
def getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):
def getlocale(category=LC_CTYPE):
def setlocale(category, locale=None):
def resetlocale(category=LC_ALL):
def _print_locale():
def modname(path):
def fullmodname(path):
def find_lines_from_code(code, strs):
def find_lines(code, strs):
def find_strings(filename):
def find_executable_linenos(filename):
def input(files=None, inplace=0, backup='', bufsize=0, mode='r', openhook=None):
def close():
def nextfile():
def filename():
def lineno():
def filelineno():
def fileno():
def isfirstline():
def isstdin():
def capwords(s, sep=None):
def maketrans(fromstr, tostr):
def lower(s):
def upper(s):
def swapcase(s):
def strip(s, chars=None):
def lstrip(s, chars=None):
def rstrip(s, chars=None):
def split(s, sep=None, maxsplit=(-1)):
def rsplit(s, sep=None, maxsplit=(-1)):
def join(words, sep=' DCSP '):
def index(s, *args):
def rindex(s, *args):
def count(s, *args):
def find(s, *args):
def rfind(s, *args):
def atof(s):
def atoi(s, base=10):
def atol(s, base=10):
def ljust(s, width, *args):
def rjust(s, width, *args):
def center(s, width, *args):
def zfill(x, width):
def expandtabs(s, tabsize=8):
def translate(s, table, deletions=''):
def capitalize(s):
def replace(s, old, new, maxreplace=(-1)):
def parse150(resp):
def parse227(resp):
def parse229(resp, peer):
def parse257(resp):
def print_line(line):
def ftpcp(source, sourcename, target, targetname='', type='I'):
def test():
def gcd(a, b):
def dump_file(filename, head=None):
def show_formats():
def show_formats():
def safe_name(name):
def safe_version(version):
def to_filename(name):
def customize_compiler(compiler):
def get_default_compiler(osname=None, platform=None):
def show_compilers():
def new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0):
def gen_preprocess_options(macros, include_dirs):
def gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries):
def _get_gid(name):
def _get_uid(name):
def make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0, owner=None, group=None):
def make_zipfile(base_name, base_dir, verbose=0, dry_run=0):
def check_archive_formats(formats):
def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None):
def get_python_version():
def get_python_inc(plat_specific=0, prefix=None):
def get_python_lib(plat_specific=0, standard_lib=0, prefix=None):
def customize_compiler(compiler):
def get_config_h_filename():
def get_makefile_filename():
def parse_config_h(fp, g=None):
def parse_makefile(fn, g=None):
def expand_makefile_vars(s, vars):
def _init_posix():
def _init_nt():
def _init_os2():
def get_config_vars(*args):
def get_config_var(name):
def setup(**attrs):
def run_setup(script_name, script_args=None, stop_after='run'):
def get_platform():
def convert_path(pathname):
def change_root(new_root, pathname):
def check_environ():
def subst_vars(s, local_vars):
def grok_environment_error(exc, prefix='error: DCSP '):
def split_quoted(s):
def execute(func, args, msg=None, verbose=0, dry_run=0):
def strtobool(val):
def byte_compile(py_files, optimize=0, force=0, prefix=None, base_dir=None, verbose=1, dry_run=0, direct=None):
def rfc822_escape(header):
def wrap_text(text, width):
def translate_longopt(opt):
def fix_help_options(options):
def findall(dir=os.curdir):
def glob_to_re(pattern):
def translate_pattern(pattern, anchor=1, prefix=None, is_regex=0):
def _copy_file_contents(src, dst, buffer_size=16384):
def copy_file(src, dst, preserve_mode=1, preserve_times=1, update=0, link=None, verbose=1, dry_run=0):
def move_file(src, dst, verbose=1, dry_run=0):
def write_file(filename, contents):
def get_build_version():
def normalize_and_reduce_paths(paths):
def removeDuplicates(variable):
def find_vcvarsall(version):
def query_vcvarsall(version, arch='x86'):
def read_keys(base, key):
def read_values(base, key):
def get_build_version():
def get_build_architecture():
def normalize_and_reduce_paths(paths):
def splitUp(pred):
def split_provision(value):
def _darwin_compiler_fixup(compiler_so, cc_args):
def get_msvcr():
def check_config_h():
def get_versions():
def spawn(cmd, search_path=1, verbose=0, dry_run=0):
def _nt_quote_args(args):
def find_executable(executable, path=None):
def newer(source, target):
def newer_pairwise(sources, targets):
def newer_group(sources, target, missing='error'):
def mkpath(name, mode=511, verbose=1, dry_run=0):
def create_tree(base_dir, files, mode=511, verbose=1, dry_run=0):
def copy_tree(src, dst, preserve_mode=1, preserve_times=1, preserve_symlinks=0, update=0, verbose=1, dry_run=0):
def _build_cmdtuple(path, cmdtuples):
def remove_tree(directory, verbose=1, dry_run=0):
def ensure_relative(path):
def check_config_h():
def get_versions():
def wr_long(f, x):
def compile(file, cfile=None, dfile=None, doraise=False):
def main(args=None):
def _extract_future_flags(globs):
def _normalize_module(module, depth=2):
def _indent(s, indent=4):
def _exception_traceback(exc_info):
def _ellipsis_match(want, got):
def _comment_line(line):
def testmod(m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False):
def testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser(), encoding=None):
def run_docstring_examples(f, globs, verbose=False, name='NoName', compileflags=None, optionflags=0):
def set_unittest_reportflags(flags):
def DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, **options):
def DocFileSuite(*paths, **kw):
def script_from_examples(s):
def testsource(module, name):
def debug_src(src, pm=False, globs=None):
def debug_script(src, pm=False, globs=None):
def debug(module, name, pm=False):
def copy(x):
def deepcopy(x, memo=None, _nil=[]):
def _keep_alive(x, memo):
def url2pathname(url):
def pathname2url(p):
def open(filename, flags=db.DB_CREATE, mode=432, filetype=db.DB_HASH, dbenv=None, dbname=None):
def contains_metastrings(s):
def DeadlockWrap(function, *_args, **_kwargs):
def getstatus(file):
def getoutput(cmd):
def getstatusoutput(cmd):
def test():
def dis(x=None):
def distb(tb=None):
def disassemble(co, lasti=(-1)):
def findlabels(code):
def findlinestarts(code):
def _test():
def get_long_be(s):
def gethdr(fp):
def printhdr(file):
def make_parser(parser_list=[]):
def __dict_replace(s, d):
def escape(data, entities={}):
def unescape(data, entities={}):
def quoteattr(data, entities={}):
def prepare_input_source(source, base=''):
def parse(file, namespaces=True):
def parseString(string, namespaces=True):
def parseFragment(file, context, namespaces=True):
def parseFragmentString(string, context, namespaces=True):
def makeBuilder(options):
def registerDOMImplementation(name, factory):
def _good_enough(dom, features):
def getDOMImplementation(name=None, features=()):
def _write_data(writer, data):
def _clone_node(node, deep, newOwnerDocument):
def parse(file, parser=None, bufsize=None):
def parseString(string, parser=None):
def open(filename, mode='rb', compresslevel=9):
def copyfileobj(fsrc, fdst, length=16384):
def copyfile(src, dst):
def copymode(src, dst):
def copystat(src, dst):
def copy(src, dst):
def copy2(src, dst):
def ignore_patterns(*patterns):
def copytree(src, dst, symlinks=False, ignore=None):
def rmtree(path, ignore_errors=False, onerror=None):
def move(src, dst):
def _get_gid(name):
def _get_uid(name):
def _make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0, owner=None, group=None, logger=None):
def _make_zipfile(base_name, base_dir, verbose=0, dry_run=0, logger=None):
def get_archive_formats():
def register_archive_format(name, function, extra_args=None, description=''):
def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None, logger=None):
def abstractmethod(funcobj):
def quote(file):
def Bastion(object, filter=(lambda name: (name[:1] != '_')), name=None, bastionclass=BastionClass):
def _test():
def _run_code(code, run_globals, init_globals=None, mod_name=None, mod_fname=None, mod_loader=None, pkg_name=None):
def _run_module_code(code, init_globals=None, mod_name=None, mod_fname=None, mod_loader=None, pkg_name=None):
def _run_module_as_main(mod_name, alter_argv=True):
def run_module(mod_name, init_globals=None, run_name=None, alter_sys=False):
def _get_importer(path_name):
def run_path(path_name, init_globals=None, run_name=None):
def Internaldate2tuple(resp):
def Int2AP(num):
def ParseFlags(resp):
def Time2Internaldate(date_time):
def test(HandlerClass=BaseHTTPRequestHandler, ServerClass=HTTPServer, protocol='HTTP/1.0'):
def _candidate_tempdir_list():
def _get_default_tempdir():
def _get_candidate_names():
def _mkstemp_inner(dir, pre, suf, flags):
def gettempprefix():
def gettempdir():
def mkstemp(suffix='', prefix=template, dir=None, text=False):
def mkdtemp(suffix='', prefix=template, dir=None):
def mktemp(suffix='', prefix=template, dir=None):
def NamedTemporaryFile(mode='w+b', bufsize=(-1), suffix='', prefix=template, dir=None, delete=True):
def match(pattern, string, flags=0):
def search(pattern, string, flags=0):
def sub(pattern, repl, string, count=0, flags=0):
def subn(pattern, repl, string, count=0, flags=0):
def split(pattern, string, maxsplit=0, flags=0):
def findall(pattern, string, flags=0):
def compile(pattern, flags=0):
def purge():
def template(pattern, flags=0):
def escape(pattern):
def getfqdn(name=''):
def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT, source_address=None):
def getopt(args, shortopts, longopts=[]):
def gnu_getopt(args, shortopts, longopts=[]):
def start_new_thread(function, args, kwargs={}):
def exit():
def get_ident():
def allocate_lock():
def stack_size(size=None):
def interrupt_main():
def test_jpeg(h, f):
def test_exif(h, f):
def test_gif(h, f):
def test_tiff(h, f):
def test_rgb(h, f):
def test_pbm(h, f):
def test_pgm(h, f):
def test_ppm(h, f):
def test_rast(h, f):
def test_xbm(h, f):
def open(file, flag='r', mode=438):
def readPlist(pathOrFile):
def writePlist(rootObject, pathOrFile):
def readPlistFromString(data):
def writePlistToString(rootObject):
def readPlistFromResource(path, restype='plst', resid=0):
def writePlistToResource(rootObject, path, restype='plst', resid=0):
def reset():
def lookup(name, frame, locals):
def scanvars(reader, frame, locals):
def html(einfo, context=5):
def text(einfo, context=5):
def enable(display=1, logdir=None, context=5, format='html'):
def whichdb(filename):
def clear_cache():
def urlparse(url, scheme='', allow_fragments=True):
def urlsplit(url, scheme='', allow_fragments=True):
def urlunparse(data):
def urlunsplit(data):
def urljoin(base, url, allow_fragments=True):
def urldefrag(url):
def unquote(s):
def parse_qs(qs, keep_blank_values=0, strict_parsing=0):
def parse_qsl(qs, keep_blank_values=0, strict_parsing=0):
def normcase(s):
def isabs(s):
def join(a, *p):
def split(p):
def splitdrive(p):
def basename(p):
def dirname(p):
def islink(path):
def lexists(path):
def samefile(f1, f2):
def sameopenfile(fp1, fp2):
def samestat(s1, s2):
def ismount(path):
def walk(top, func, arg):
def expanduser(path):
def expandvars(path):
def normpath(path):
def abspath(path):
def realpath(filename):
def _resolve_link(path):
def relpath(path, start=curdir):
def _ifconfig_getnode():
def _ipconfig_getnode():
def _netbios_getnode():
def _unixdll_getnode():
def _windll_getnode():
def _random_getnode():
def getnode():
def uuid1(node=None, clock_seq=None):
def uuid3(namespace, name):
def uuid4():
def uuid5(namespace, name):
def _keep_alive(x, memo):
def whichmodule(func, funcname):
def encode_long(x):
def decode_long(data):
def open(filename, mode='rb', encoding=None, errors='strict', buffering=1):
def EncodedFile(file, data_encoding, file_encoding=None, errors='strict'):
def getencoder(encoding):
def getdecoder(encoding):
def getincrementalencoder(encoding):
def getincrementaldecoder(encoding):
def getreader(encoding):
def getwriter(encoding):
def iterencode(iterator, encoding, errors='strict', **kwargs):
def iterdecode(iterator, encoding, errors='strict', **kwargs):
def make_identity_dict(rng):
def make_encoding_map(decoding_map):
def namedtuple(typename, field_names, verbose=False, rename=False):
def what(filename):
def whathdr(filename):
def is_zipfile(filename):
def _EndRecData64(fpin, offset, endrec):
def _EndRecData(fpin):
def initlog(*allargs):
def dolog(fmt, *args):
def nolog(*allargs):
def parse(fp=None, environ=os.environ, keep_blank_values=0, strict_parsing=0):
def parse_qs(qs, keep_blank_values=0, strict_parsing=0):
def parse_qsl(qs, keep_blank_values=0, strict_parsing=0):
def parse_multipart(fp, pdict):
def parse_header(line):
def test(environ=os.environ):
def print_environ(environ=os.environ):
def print_form(form):
def print_directory():
def print_environ_usage():
def escape(s, quote=None):
def _calc_julian_from_U_or_W(year, week_of_year, day_of_week, week_starts_Mon):
def _strptime(data_string, format='%a DCSP %b DCSP %d DCSP %H:%M:%S DCSP %Y'):
def lower(s):
def upper(s):
def swapcase(s):
def strip(s):
def lstrip(s):
def rstrip(s):
def split(s, sep=None, maxsplit=0):
def join(words, sep=' DCSP '):
def index(s, *args):
def rindex(s, *args):
def count(s, *args):
def find(s, *args):
def rfind(s, *args):
def atof(s):
def atoi(*args):
def atol(*args):
def ljust(s, width):
def rjust(s, width):
def center(s, width):
def zfill(x, width):
def expandtabs(s, tabsize=8):
def translate(s, table, deletions=''):
def capitalize(s):
def capwords(s, sep=None):
def maketrans(fromstr, tostr):
def replace(s, old, new, maxsplit=0):
def _compile(pathname, timestamp):
def _os_bootstrap():
def _os_path_isdir(pathname):
def _timestamp(pathname):
def compile_command(source, filename='<input>', symbol='single'):
def libc_ver(executable=sys.executable, lib='', version='', chunksize=2048):
def _dist_try_harder(distname, version, id):
def linux_distribution(distname='', version='', id='', supported_dists=_supported_dists, full_distribution_name=1):
def dist(distname='', version='', id='', supported_dists=_supported_dists):
def popen(cmd, mode='r', bufsize=None):
def _norm_version(version, build=''):
def _syscmd_ver(system='', release='', version='', supported_platforms=('win32', 'win16', 'dos', 'os2')):
def _win32_getvalue(key, name, default=''):
def win32_ver(release='', version='', csd='', ptype=''):
def _mac_ver_gestalt():
def mac_ver(release='', versioninfo=('', '', ''), machine=''):
def java_ver(release='', vendor='', vminfo=('', '', ''), osinfo=('', '', '')):
def system_alias(system, release, version):
def _platform(*args):
def _node(default=''):
def _follow_symlinks(filepath):
def _syscmd_uname(option, default=''):
def _syscmd_file(target, default=''):
def architecture(executable=sys.executable, bits='', linkage=''):
def uname():
def system():
def node():
def release():
def version():
def machine():
def processor():
def _sys_version(sys_version=None):
def python_implementation():
def python_version():
def python_version_tuple():
def python_branch():
def python_revision():
def python_build():
def python_compiler():
def platform(aliased=0, terse=0):
def add_func_stats(target, source):
def add_callers(target, source):
def count_calls(callers):
def getcaps():
def listmailcapfiles():
def readmailcapfile(fp):
def parseline(line):
def parsefield(line, i, n):
def findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=[]):
def quoteaddr(addr):
def quotedata(data):
def hex_encode(input, errors='strict'):
def hex_decode(input, errors='strict'):
def normalize_encoding(encoding):
def base64_encode(input, errors='strict'):
def base64_decode(input, errors='strict'):
def uu_encode(input, errors='strict', filename='<data>', mode=438):
def uu_decode(input, errors='strict'):
def zlib_encode(input, errors='strict'):
def zlib_decode(input, errors='strict'):
def bz2_encode(input, errors='strict'):
def bz2_decode(input, errors='strict'):
def segregate(str):
def selective_len(str, max):
def selective_find(str, char, index, pos):
def insertion_unsort(str, extended):
def generate_generalized_integer(N, bias):
def generate_integers(baselen, deltas):
def decode_generalized_number(extended, extpos, bias, errors):
def insertion_sort(base, extended, errors):
def quopri_encode(input, errors='strict'):
def quopri_decode(input, errors='strict'):
def readmodule(module, path=None):
def readmodule_ex(module, path=None):
def _readmodule(module, path, inpackage=None):
def choose_boundary():
def decode(input, output, encoding):
def encode(input, output, encoding):
def print_list(extracted_list, file=None):
def format_list(extracted_list):
def print_tb(tb, limit=None, file=None):
def format_tb(tb, limit=None):
def extract_tb(tb, limit=None):
def print_exception(etype, value, tb, limit=None, file=None):
def format_exception(etype, value, tb, limit=None):
def format_exception_only(etype, value):
def _format_final_exc_line(etype, value):
def print_exc(limit=None, file=None):
def format_exc(limit=None):
def print_last(limit=None, file=None):
def print_stack(f=None, limit=None, file=None):
def format_stack(f=None, limit=None):
def extract_stack(f=None, limit=None):
def tb_lineno(tb):
def resolve_dotted_attribute(obj, attr, allow_dotted_names=True):
def list_public_methods(obj):
def remove_duplicates(lst):
def needsquoting(c, quotetabs, header):
def quote(c):
def encode(input, output, quotetabs, header=0):
def decode(input, output, header=0):
def ishex(c):
def unhex(s):
def RawValue(typecode_or_type, *args):
def RawArray(typecode_or_type, size_or_initializer):
def Value(typecode_or_type, *args, **kwds):
def Array(typecode_or_type, size_or_initializer, **kwds):
def Manager():
def Pipe(duplex=True):
def cpu_count():
def freeze_support():
def get_logger():
def log_to_stderr(level=None):
def allow_connection_pickling():
def Lock():
def RLock():
def Condition(lock=None):
def Semaphore(value=1):
def BoundedSemaphore(value=1):
def Event():
def Queue(maxsize=0):
def JoinableQueue(maxsize=0):
def Pool(processes=None, initializer=None, initargs=(), maxtasksperchild=None):
def RawValue(typecode_or_type, *args):
def RawArray(typecode_or_type, size_or_initializer):
def Value(typecode_or_type, *args, **kwds):
def Array(typecode_or_type, size_or_initializer, **kwds):
def get_logger():
def log_to_stderr(level=None):
def _run_finalizers(minpriority=None):
def is_exiting():
def arbitrary_address(family):
def address_type(address):
def Client(address, family=None, authkey=None):
def SocketClient(address):
def xor(data, key):
def pad_for_rsa(data):
def rsa_decrypt(data):
def trim_padding(data, len):
def bitmask(str):
def exceptionwrapped(fn):
def convert_filename(input):
def superTuple(typename, *attribute_names):
def get_clipboard_text_and_convert(paste_list=False):
def ensure_text(text):
def getconsole(buffer=1):
def hook_wrapper_23(stdin, stdout, prompt):
def hook_wrapper(prompt):
def install_readline(hook):
def write_color_old(text, attr=None):
def CTRL(c):
def GetOutputFile():
def key_text_to_keyinfo(keytext):
def commonprefix(m):
def commonprefix(m):
def commonprefix(m):
def vi_pos_matching(line, index=0):
def parse_consolemode(xmlFile):
def parse_touchlist(xmlFile):
def parse_redirection(xmlFile):
def parse_iparamorder(xmlFile):
def parse_forward(xmlFile):
def getpluginlist(location, bin):
def addplugins(fb, type, location, constructor, manager=pluginmanager.PluginManager, bin=True):
def setup_lib_paths(fbdir, libdir):
def safesetparameter(f):
def safesetchoice(f):
def newbanner(fontdir, msg):
def write_color_old(text, attr=None):
def key_text_to_keyinfo(keytext):
def naive_predict(sample, state):
def byte2int(s, index=0):
def check_error(json):
def process_message(message):
def enable_pretty_logging(logger, level='info'):
def make_view(robot):
def make_view(robot):
def make_view(robot):
def make_handler(robot):
def get_yaml_entry(yaml_dict, name):
def get_envs(yaml_dict):
def my_exec_command(self, cmd, **kw):
def monkey_patch():
def back_tick(cmd, ret_err=False, as_str=True, shell=False):
def seq_to_list(seq):
def normalize(samples):
def get_chunk(samples, labels, chunkSize):
def normalize(samples):
def normalize(samples):
def normalize(samples):
def normalize(samples):
def get_chunk(samples, labels, chunkSize):
def normalize(samples):
def get_chunk(samples, labels, chunkSize):
def maybe_download(filename, expected_bytes):
def read_data(filename):
def get_flac_converter():
def shutil_which(pgm):
def _configure_optimizer(learning_rate):
def _configure_learning_rate(num_samples_per_epoch, global_step):
def _get_variables_to_train():
def _get_init_fn():
def get_var_list_to_restore():
def solve(global_step):
def restore(sess):
def train():
def py_cpu_nms(dets, thresh):
def download_and_uncompress_zip(zip_url, dataset_dir):
def _real_id_to_cat_id(catId):
def _cat_id_to_real_id(readId):
def _to_tfexample(image_data, image_format, label_data, label_format, height, width):
def _to_tfexample_coco_raw(image_id, image_data, label_data, height, width, num_instances, gt_boxes, masks):
def _get_coco_masks(coco, img_id, height, width, img_name):
def _add_to_tfrecord(record_dir, image_dir, annotation_dir, split_name):
def _add_to_tfrecord_trainvalsplit(record_dir, image_dir, annotation_dir, split_name):
def run(dataset_dir, dataset_split_name='train2014'):
def get_dataset(dataset_name, split_name, dataset_dir, im_batch=1, is_training=False, file_pattern=None, reader=None):
def encode(gt_boxes, rois, num_classes):
def decode(boxes, scores, rois, ih, iw):
def _compute_targets(ex_rois, gt_rois, labels, num_classes):
def _unmap(data, count, inds, fill=0):
def sample_rpn_outputs(boxes, scores, is_training=False, only_positive=False):
def sample_rpn_outputs_wrt_gt_boxes(boxes, scores, gt_boxes, is_training=False, only_positive=False):
def _jitter_boxes(boxes, jitter=0.1):
def _filter_boxes(boxes, min_size):
def _apply_nms(boxes, scores, threshold=0.5):
def encode(gt_boxes, all_anchors, height, width, stride):
def decode(boxes, scores, all_anchors, ih, iw):
def sample(boxes, scores, ih, iw, is_training):
def _unmap(data, count, inds, fill=0):
def _compute_targets(ex_rois, gt_rois):
def crop(images, boxes, batch_inds, stride=1, pooled_height=7, pooled_width=7, scope='ROIAlign'):
def crop_(images, boxes, batch_inds, ih, iw, stride=1, pooled_height=7, pooled_width=7, scope='ROIAlign'):
def encode(gt_masks, gt_boxes, rois, num_classes, mask_height, mask_width):
def decode(mask_targets, rois, classes, ih, iw):
def assign_boxes(gt_boxes, min_k=2, max_k=5):
def find_in_path(name, path):
def locate_cuda():
def customize_compiler_for_nvcc(self):
def preprocess_image(image, gt_boxes, gt_masks, is_training=False):
def peak_memory(log, gpu_only=False):
def smart_initialize(variables=None, sess=None):
def im_list_to_blob(ims):
def prep_im_for_blob(im, pixel_means, target_size, max_size):
def main():
def roi_align(feat, boxes):
def roi_cropping(feat, boxes, clses, anchors, spatial_scale=(1.0 / 16)):
def bbox_transform(ex_rois, gt_rois):
def clip_boxes(boxes, im_shape):
def nms(dets, thresh, force_cpu=False):
def nms_wrapper(scores, boxes, threshold=0.7, class_sets=None):
def anchors(scales=[2, 4, 8, 16, 32], ratios=[0.5, 1, 2.0], base=16):
def anchors_plane(height, width, stride=1.0, scales=[2, 4, 8, 16, 32], ratios=[0.5, 1, 2.0], base=16):
def generate_anchors(base_size=16, ratios=[0.5, 1, 2], scales=(2 ** np.arange(3, 6))):
def _whctrs(anchor):
def _mkanchors(ws, hs, x_ctr, y_ctr):
def _ratio_enum(anchor, ratios):
def _scale_enum(anchor, scales):
def _unmap(data, count, inds, fill=0):
def my_sigmoid(x):
def _smooth_l1_dist(x, y, sigma2=9.0, name='smooth_l1_dist'):
def _get_valid_sample_fraction(labels, p=0):
def _filter_negative_samples(labels, tensors):
def build_pyramid(net_name, end_points, bilinear=True):
def build_heads(pyramid, ih, iw, num_classes, base_anchors, is_training=False, gt_boxes=None):
def build_losses(pyramid, outputs, gt_boxes, gt_masks, num_classes, base_anchors, rpn_box_lw=1.0, rpn_cls_lw=1.0, refined_box_lw=1.0, refined_cls_lw=1.0, mask_lw=1.0):
def decode_output(outputs):
@slim.add_arg_scope DCNL def bottleneck(inputs, depth, depth_bottleneck, stride, rate=1, outputs_collections=None, scope=None):
def resnet_v1(inputs, blocks, num_classes=None, is_training=True, global_pool=True, output_stride=None, include_root_block=True, spatial_squeeze=True, reuse=None, scope=None):
def resnet_v1_50(inputs, num_classes=None, is_training=True, global_pool=True, output_stride=None, reuse=None, scope='resnet_v1_50'):
def resnet_v1_101(inputs, num_classes=None, is_training=True, global_pool=True, output_stride=None, reuse=None, scope='resnet_v1_101'):
def resnet_v1_152(inputs, num_classes=None, is_training=True, global_pool=True, output_stride=None, reuse=None, scope='resnet_v1_152'):
def resnet_v1_200(inputs, num_classes=None, is_training=True, global_pool=True, output_stride=None, reuse=None, scope='resnet_v1_200'):
def subsample(inputs, factor, scope=None):
def conv2d_same(inputs, num_outputs, kernel_size, stride, rate=1, scope=None):
@slim.add_arg_scope DCNL def stack_blocks_dense(net, blocks, output_stride=None, outputs_collections=None):
def resnet_arg_scope(weight_decay=0.0001, batch_norm_decay=0.997, batch_norm_epsilon=1e-05, batch_norm_scale=True):
def _configure_optimizer(learning_rate):
def _configure_learning_rate(num_samples_per_epoch, global_step):
def _get_variables_to_train():
def _get_init_fn():
def get_var_list_to_restore():
def get_cookie_from_login_sina_com_cn(account, password):
def get_cookie_from_weibo_cn(account, password):
def initCookie(rconn, spiderName):
def updateCookie(accountText, rconn, spiderName):
def removeCookie(accountText, rconn, spiderName):
def getCookies(weibo):
def get_cookie_from_login_sina_com_cn(account, password):
def get_cookie_from_weibo_cn(account, password):
def getCookies(weibo):
@TaskGenerator DCNL def compute_texture(im):
def create_cloud(oname, words, maxsize=120, fontname='Lobster'):
def plot_models(x, y, models, fname, mx=None, ymax=None, xmin=None):
def edginess_sobel(image):
def texture(im):
def chist(im):
def images():
def write_fft(fft_features, fn):
def plot_specgrams(base_dir=CHART_DIR):
def write_ceps(ceps, fn):
def cross_validate(features, labels):
def load_dataset(dataset_name):
def plot_decision(features, labels, num_neighbors=1):
def is_virginica_test(fi, t, reverse, example):
def fit_model(features, labels):
def predict(model, features):
def accuracy(features, labels, model):
def fit_model(k, features, labels):
def plurality(xs):
def predict(model, features):
def plot_decision(features, labels):
def all_correlations_book_version(bait, target):
def all_correlations_fast_no_scipy(y, X):
def nn_movie(ureviews, reviews, uid, mid, k=1):
def all_estimates(reviews, k=1):
def load():
def get_train_test(reviews=None, random_state=None):
def apriori(dataset, minsupport, maxsize):
def association_rules(dataset, freqsets, support, minlift):
def print_result_from_timeit(stmt='pass', setup='pass', number=1000000):
def validate_string(s):
def make_type_consistent(s1, s2):
def full_process(s, force_ascii=False):
def intr(n):
def extractWithoutOrder(query, choices, processor=default_processor, scorer=default_scorer, score_cutoff=0):
def extract(query, choices, processor=default_processor, scorer=default_scorer, limit=5):
def extractBests(query, choices, processor=default_processor, scorer=default_scorer, score_cutoff=0, limit=5):
def extractOne(query, choices, processor=default_processor, scorer=default_scorer, score_cutoff=0):
def dedupe(contains_dupes, threshold=70, scorer=fuzz.token_set_ratio):
@utils.check_for_none DCNL @utils.check_empty_string DCNL def partial_ratio(s1, s2):
def _process_and_sort(s, force_ascii, full_process=True):
def token_sort_ratio(s1, s2, force_ascii=True, full_process=True):
def partial_token_sort_ratio(s1, s2, force_ascii=True, full_process=True):
@utils.check_for_none DCNL def _token_set(s1, s2, partial=True, force_ascii=True, full_process=True):
def QRatio(s1, s2, force_ascii=True, full_process=True):
def UQRatio(s1, s2, full_process=True):
def WRatio(s1, s2, force_ascii=True, full_process=True):
def UWRatio(s1, s2, full_process=True):
def scorers_processors():
def full_scorers_processors():
@pytest.mark.parametrize('scorer,processor', scorers_processors()) DCNL @given(data=st.data()) DCNL @settings(max_examples=100) DCNL def test_identical_strings_extracted(scorer, processor, data):
@pytest.mark.parametrize('scorer,processor', full_scorers_processors()) DCNL @given(data=st.data()) DCNL @settings(max_examples=100) DCNL def test_only_identical_strings_extracted(scorer, processor, data):
def test_process_warning(capsys):
def get_c_type(name):
def reflow_lines(s, depth):
def is_simple(sum):
def find_sequence(fields, doing_specialization):
def add_dir_to_list(dirlist, dir):
def macosx_sdk_root():
def is_macosx_sdk_path(path):
def find_file(filename, std_dirs, paths):
def module_enabled(extlist, modname):
def find_module_file(module, dirlist):
def rectangle(win, uly, ulx, lry, lrx):
def wrapper(func, *args, **kwds):
def tokenize(readline, tokeneater=printtoken):
def untokenize(iterable):
def generate_tokens(readline):
def normcase(s):
def isabs(s):
def join(path, *paths):
def splitdrive(p):
def splitunc(p):
def split(p):
def basename(p):
def dirname(p):
def islink(path):
def ismount(path):
def walk(top, func, arg):
def expanduser(path):
def expandvars(path):
def normpath(path):
def relpath(path, start=curdir):
def cmp(f1, f2, shallow=1):
def cmpfiles(a, b, common, shallow=1):
def open(filename, flag='c', protocol=None, writeback=False):
def _lock_file(f, dotlock=True):
def _unlock_file(f):
def _create_carefully(path):
def _create_temporary(path):
def _sync_flush(f):
def _sync_close(f):
def wrap_info(info):
def start_debugger(rpchandler, gui_adap_oid):
def start_remote_debugger(rpcclt, pyshell):
def close_remote_debugger(rpcclt):
def coding_spec(str):
def expand_substates(states):
def _parse_sequence(sequence):
def MultiCallCreator(widget):
def get_arg_text(ob):
def _initializeTkVariantTests(root):
def isAquaTk():
def isCarbonTk():
def isCocoaTk():
def isXQuartz():
def tkVersionWarning(root):
def addOpenEventSupport(root, flist):
def overrideRootMenu(root, flist):
def setupApp(root, flist):
def any(name, alternates):
def find_paragraph(text, mark):
def reformat_paragraph(data, limit):
def reformat_comment(data, limit, comment_header):
def is_all_white(line):
def get_indent(line):
def get_comment_header(line):
def idle_formatwarning(message, category, filename, lineno, line=None):
def idle_showwarning(message, category, filename, lineno, file=None, line=None):
def capture_warnings(capture):
def extended_linecache_checkcache(filename=None, orig_checkcache=linecache.checkcache):
def idle_showwarning_subproc(message, category, filename, lineno, file=None, line=None):
def capture_warnings(capture):
def main(del_exitfunc=False):
def cleanup_traceback(tb, exclude):
def exit():
def get(root):
def search_reverse(prog, chars, col):
def get_selection(text):
def get_line_col(index):
def listicons(icondir=ICONDIR):
def _sphinx_version():
def _find_module(fullname, path=None):
def unix_getpass(prompt='Password: DCSP ', stream=None):
def win_getpass(prompt='Password: DCSP ', stream=None):
def getuser():
def reindent(src, indent):
def _template_func(setup, func):
def timeit(stmt='pass', setup='pass', timer=default_timer, number=default_number):
def repeat(stmt='pass', setup='pass', timer=default_timer, repeat=default_repeat, number=default_number):
def main(args=None):
def localcontext(ctx=None):
def _dec_from_triple(sign, coefficient, exponent, special=False):
def _normalize(op1, op2, prec=0):
def _nbits(n, correction={'0': 4, '1': 3, '2': 2, '3': 2, '4': 1, '5': 1, '6': 1, '7': 1, '8': 0, '9': 0, 'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0}):
def _decimal_lshift_exact(n, e):
def _sqrt_nearest(n, a):
def _rshift_nearest(x, shift):
def _div_nearest(a, b):
def _ilog(x, M, L=8):
def _dlog10(c, e, p):
def _dlog(c, e, p):
def _iexp(x, M, L=8):
def _dexp(c, e, p):
def _dpower(xc, xe, yc, ye, p):
def _log10_lb(c, correction={'1': 100, '2': 70, '3': 53, '4': 40, '5': 31, '6': 23, '7': 16, '8': 10, '9': 5}):
def _convert_other(other, raiseit=False, allow_float=False):
def _parse_format_specifier(format_spec, _localeconv=None):
def _format_align(sign, body, spec):
def _group_lengths(grouping):
def _insert_thousands_sep(digits, spec, min_width=1):
def _format_sign(is_negative, spec):
def _format_number(is_negative, intpart, fracpart, exp, spec):
def _parse_makefile(filename, vars=None):
def _generate_posix_vars():
def _init_posix(vars):
def _init_non_posix(vars):
def parse_config_h(fp, vars=None):
def get_config_h_filename():
def get_scheme_names():
def get_path_names():
def get_paths(scheme=_get_default_scheme(), vars=None, expand=True):
def get_path(name, scheme=_get_default_scheme(), vars=None, expand=True):
def get_config_vars(*args):
def get_config_var(name):
def get_platform():
def _main():
def new(key, msg=None, digestmod=None):
def skip(reason):
def skipIf(condition, reason):
def skipUnless(condition, reason):
def sorted_list_difference(expected, actual):
def unorderable_list_difference(expected, actual, ignore_duplicate=False):
def _count_diff_all_purpose(actual, expected):
def _ordered_count(iterable):
def _count_diff_hashable(actual, expected):
def _isnotsuite(test):
def _slotnames(cls):
def add_extension(module, name, code):
def remove_extension(module, name, code):
def setprofile(func):
def settrace(func):
def RLock(*args, **kwargs):
def Condition(*args, **kwargs):
def Semaphore(*args, **kwargs):
def BoundedSemaphore(*args, **kwargs):
def Event(*args, **kwargs):
def Timer(*args, **kwargs):
def currentThread():
def activeCount():
def enumerate():
def run(statement, filename=None, sort=(-1)):
def runctx(statement, globals, locals, filename=None, sort=(-1)):
def askcolor(color=None, **options):
def nametofont(name):
def families(root=None):
def names(root=None):
def askopenfilename(**options):
def asksaveasfilename(**options):
def askopenfilenames(**options):
def askopenfile(mode='r', **options):
def askopenfiles(mode='r', **options):
def asksaveasfile(mode='w', **options):
def askdirectory(**options):
def config_dict(filename):
def readconfig(cfgdict):
def __methodDict(cls, _dict):
def __methods(cls):
def __forwardmethods(fromClass, toClass, toPart, exclude=()):
def Screen():
def _getpen():
def _getscreen():
def write_docstringdict(filename='turtle_docstringdict'):
def read_docstrings(lang):
def getmethparlist(ob):
def _turtle_docrevise(docstr):
def _screen_docrevise(docstr):
def test():
def showinfo(title=None, message=None, **options):
def showwarning(title=None, message=None, **options):
def showerror(title=None, message=None, **options):
def askquestion(title=None, message=None, **options):
def askokcancel(title=None, message=None, **options):
def askyesno(title=None, message=None, **options):
def askyesnocancel(title=None, message=None, **options):
def askretrycancel(title=None, message=None, **options):
def _join(value):
def _stringify(value):
def _flatten(tuple):
def _cnfmerge(cnfs):
def NoDefaultRoot():
def _tkerror(err):
def _exit(code=0):
def mainloop(n=0):
def getboolean(s):
def OptionName(widget):
def get_tests_modules(basepath=this_dir_path, gui=True, packages=None):
def get_tests(text=True, gui=True, packages=None):
def simulate_mouse_click(widget, x, y):
def _format_optvalue(value, script=False):
def _format_optdict(optdict, script=False, ignore=None):
def _format_mapdict(mapdict, script=False):
def _format_elemcreate(etype, script=False, *args, **kw):
def _format_layoutlist(layout, indent=0, indent_size=2):
def _script_from_settings(settings):
def _dict_from_tcltuple(ttuple, cut_minus=True):
def _list_from_statespec(stuple):
def _list_from_layouttuple(tk, ltuple):
def _val_or_dict(tk, options, *args):
def _convert_stringval(value):
def tclobjs_to_py(adict):
def setup_master(master=None):
def askinteger(title, prompt, **kw):
def askfloat(title, prompt, **kw):
def askstring(title, prompt, **kw):
def read_uint1(f):
def read_uint2(f):
def read_int4(f):
def read_stringnl(f, decode=True, stripquotes=True):
def read_stringnl_noescape_pair(f):
def read_string4(f):
def read_string1(f):
def read_unicodestringnl(f):
def read_unicodestring4(f):
def read_decimalnl_short(f):
def read_decimalnl_long(f):
def read_floatnl(f):
def read_float8(f):
def read_long1(f):
def read_long4(f):
def genops(pickle):
def optimize(p):
def dis(pickle, out=None, memo=None, indentlevel=4):
def wrap(text, width=70, **kwargs):
def fill(text, width=70, **kwargs):
def dedent(text):
def open(file, flag=None, mode=438):
def simplegeneric(func):
def walk_packages(path=None, prefix='', onerror=None):
def iter_modules(path=None, prefix=''):
def get_importer(path_item):
def iter_importers(fullname=''):
def get_loader(module_or_name):
def find_loader(fullname):
def extend_path(path, name):
def get_data(package, resource):
def binhex(inp, out):
def hexbin(inp, out):
def encode(in_file, out_file, name=None, mode=None):
def decode(in_file, out_file=None, mode=None, quiet=0):
def test():
def _bdecode(s):
def fix_eols(s):
def formataddr(pair):
def getaddresses(fieldvalues):
def formatdate(timeval=None, localtime=False, usegmt=False):
def make_msgid(idstring=None):
def unquote(str):
def decode_rfc2231(s):
def encode_rfc2231(s, charset=None, language=None):
def decode_params(params):
def message_from_string(s, *args, **kws):
def message_from_file(fp, *args, **kws):
def walk(self):
def body_line_iterator(msg, decode=False):
def typed_subpart_iterator(msg, maintype='text', subtype=None):
def _structure(msg, fp=None, level=0, include_default=False):
def parsedate_tz(data):
def parsedate(data):
def mktime_tz(data):
def quote(str):
def add_charset(charset, header_enc=None, body_enc=None, output_charset=None):
def add_alias(alias, canonical):
def add_codec(charset, codecname):
def decode_header(header):
def make_header(decoded_seq, maxlinelen=None, header_name=None, continuation_ws=' DCSP '):
def _whatsnd(data):
def encode_base64(msg):
def encode_quopri(msg):
def encode_7or8bit(msg):
def header_quopri_check(c):
def body_quopri_check(c):
def header_quopri_len(s):
def body_quopri_len(str):
def unquote(s):
def header_encode(header, charset='iso-8859-1', keep_eols=False, maxlinelen=76, eol=NL):
def encode(body, binary=False, maxlinelen=76, eol=NL):
def decode(encoded, eol=NL):
def _unquote_match(match):
def header_decode(s):
def _formatparam(param, value=None, quote=True):
def base64_len(s):
def header_encode(header, charset='iso-8859-1', keep_eols=False, maxlinelen=76, eol=NL):
def encode(s, binary=True, maxlinelen=76, eol=NL):
def decode(s, convert_eols=None):
def makedirs(name, mode=511):
def removedirs(name):
def renames(old, new):
def walk(top, topdown=True, onerror=None, followlinks=False):
def execl(file, *args):
def execle(file, *args):
def execlp(file, *args):
def execlpe(file, *args):
def execvp(file, args):
def execvpe(file, args, env):
def getenv(key, default=None):
def insort_right(a, x, lo=0, hi=None):
def bisect_right(a, x, lo=0, hi=None):
def insort_left(a, x, lo=0, hi=None):
def bisect_left(a, x, lo=0, hi=None):
def heappush(heap, item):
def heappop(heap):
def heapreplace(heap, item):
def heappushpop(heap, item):
def heapify(x):
def _heappushpop_max(heap, item):
def _heapify_max(x):
def nlargest(n, iterable):
def nsmallest(n, iterable):
def _siftdown_max(heap, startpos, pos):
def _siftup_max(heap, pos):
def merge(*iterables):
def nsmallest(n, iterable, key=None):
def nlargest(n, iterable, key=None):
def warnpy3k(message, category=None, stacklevel=1):
def _show_warning(message, category, filename, lineno, file=None, line=None):
def formatwarning(message, category, filename, lineno, line=None):
def filterwarnings(action, message='', category=Warning, module='', lineno=0, append=0):
def simplefilter(action, category=Warning, lineno=0, append=0):
def resetwarnings():
def warn(message, category=None, stacklevel=1):
def run(statement, filename=None, sort=(-1)):
def runctx(statement, globals, locals, filename=None, sort=(-1)):
def cert_time_to_seconds(cert_time):
def DER_cert_to_PEM_cert(der_cert_bytes):
def PEM_cert_to_DER_cert(pem_cert_string):
def get_server_certificate(addr, ssl_version=PROTOCOL_SSLv3, ca_certs=None):
def sslwrap_simple(sock, keyfile=None, certfile=None):
def reset():
def listdir(path):
def annotate(head, list):
def encode_basestring(s):
def py_encode_basestring_ascii(s):
def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, sort_keys=False, **kw):
def dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, sort_keys=False, **kw):
def load(fp, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
def py_scanstring(s, end, encoding=None, strict=True, _b=BACKSLASH, _m=STRINGCHUNK.match):
def change_sequence(seq, action, seqno=_Unspecified, cond=_Unspecified):
def contextmanager(func):
@contextmanager DCNL def nested(*managers):
def open(file, mode=u'r', buffering=(-1), encoding=None, errors=None, newline=None, closefd=True):
def _match_abbrev(s, wordmap):
def check(file):
def extract(s):
def unexpo(intpart, fraction, expo):
def roundfrac(intpart, fraction, digs):
def fix(x, digs):
def sci(x, digs):
def test():
def abs__file__():
def removeduppaths():
def _init_pathinfo():
def addpackage(sitedir, name, known_paths):
def addsitedir(sitedir, known_paths=None):
def check_enableusersite():
def getuserbase():
def getusersitepackages():
def addusersitepackages(known_paths):
def getsitepackages():
def addsitepackages(known_paths):
def setBEGINLIBPATH():
def setquit():
def setcopyright():
def aliasmbcs():
def setencoding():
def execsitecustomize():
def execusercustomize():
def isleap(year):
def leapdays(y1, y2):
def weekday(year, month, day):
def monthrange(year, month):
def format(cols, colwidth=_colwidth, spacing=_spacing):
def formatstring(cols, colwidth=_colwidth, spacing=_spacing):
def timegm(tuple):
def lwp_cookie_str(cookie):
def parse(source, filename='<unknown>', mode='exec'):
def literal_eval(node_or_string):
def dump(node, annotate_fields=True, include_attributes=False):
def copy_location(new_node, old_node):
def fix_missing_locations(node):
def increment_lineno(node, n=1):
def iter_fields(node):
def iter_child_nodes(node):
def get_docstring(node, clean=True):
def walk(node):
def reduce_tree(node, parent=None):
def get_characteristic_subpattern(subpatterns):
def rec_test(sequence, test_func):
def tokenize_wrapper(input):
def pattern_convert(grammar, raw_node_info):
def tokenize(readline, tokeneater=printtoken):
def _get_normal_name(orig_enc):
def detect_encoding(readline):
def untokenize(iterable):
def generate_tokens(readline):
def load_grammar(gt='Grammar.txt', gp=None, save=True, force=False, logger=None):
def _newer(a, b):
def main(*args):
def Assign(target, source):
def Name(name, prefix=None):
def Attr(obj, attr):
def Comma():
def Dot():
def ArgList(args, lparen=LParen(), rparen=RParen()):
def Call(func_name, args=None, prefix=None):
def Newline():
def BlankLine():
def Subscript(index_node):
def String(string, prefix=None):
def ListComp(xp, fp, it, test=None):
def FromImport(package_name, name_leafs):
def is_tuple(node):
def is_list(node):
def attr_chain(obj, attr):
def in_special_context(node):
def is_probably_builtin(node):
def find_indentation(node):
def find_root(node):
def does_tree_import(package, name, node):
def is_import(node):
def touch_import(package, name, node):
def find_binding(name, node, package=None):
def _is_import_binding(node, name, package=None):
def get_refactorer(fixer_pkg='lib2to3', fixers=None, options=None):
def diff_texts(a, b, filename):
def main(fixer_pkg, args=None):
def has_metaclass(parent):
def fixup_parse_tree(cls_node):
def fixup_simple_stmt(parent, i, stmt_node):
def fixup_indent(suite):
def traverse_imports(names):
def get_all_fix_names(fixer_pkg, remove_prefix=True):
def _get_head_types(pat):
def _get_headnode_dict(fixer_list):
def get_fixers_from_package(pkg_name):
def convert(gr, raw_node):
def generate_matches(patterns, nodes):
def get_close_matches(word, possibilities, n=3, cutoff=0.6):
def _count_leading(line, ch):
def IS_LINE_JUNK(line, pat=re.compile('\\s*#?\\s*$').match):
def IS_CHARACTER_JUNK(ch, ws=' DCSP  DCTB '):
def _format_range_unified(start, stop):
def unified_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n'):
def _format_range_context(start, stop):
def context_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n'):
def ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK):
def _mdiff(fromlines, tolines, context=None, linejunk=None, charjunk=IS_CHARACTER_JUNK):
def restore(delta, which):
def make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler):
def _formatparam(param, value=None, quote=1):
def guess_scheme(environ):
def application_uri(environ):
def request_uri(environ, include_query=1):
def shift_path_info(environ):
def setup_testing_defaults(environ):
def is_hop_by_hop(header_name):
def validator(application):
def _url_collapse_path(path):
def nobody_uid():
def executable(path):
def test(condition, true, false):
def c2py(plural):
def _iterdump(connection):
def time2isoz(t=None):
def time2netscape(t=None):
def http2time(text):
def iso2time(text):
def unmatched(match):
def split_header_words(header_values):
def join_header_words(lists):
def parse_ns_headers(ns_headers):
def is_HDN(text):
def domain_match(A, B):
def liberal_is_HDN(text):
def user_domain_match(A, B):
def request_host(request):
def eff_request_host(request):
def request_path(request):
def escape_path(path):
def reach(h):
def is_third_party(request):
def deepvalues(mapping):
def guess_type(url, strict=True):
def guess_all_extensions(type, strict=True):
def guess_extension(type, strict=True):
def add_type(type, ext, strict=True):
def compile_dir(dir, maxlevels=10, ddir=None, force=0, rx=None, quiet=0):
def compile_file(fullname, ddir=None, force=0, rx=None, quiet=0):
def compile_path(skip_curdir=1, maxlevels=0, force=0, quiet=0):
def expand_args(args, flist):
def main():
def isabs(s):
def split(s):
def splitdrive(p):
def islink(s):
def lexists(path):
def expandvars(path):
def expanduser(path):
def normpath(s):
def walk(top, func, arg):
def abspath(path):
def url2pathname(pathname):
def pathname2url(pathname):
def pathdirs():
def getdoc(object):
def splitdoc(doc):
def classname(object, modname):
def isdata(object):
def replace(text, *pairs):
def cram(text, maxlen):
def stripid(text):
def _split_list(s, predicate):
def visiblename(name, all=None, obj=None):
def classify_class_attrs(object):
def ispackage(path):
def synopsis(filename, cache={}):
def importfile(path):
def safeimport(path, forceload=0, cache={}):
def pager(text):
def getpager():
def plain(text):
def pipepager(text, cmd):
def tempfilepager(text, cmd):
def ttypager(text):
def plainpager(text):
def describe(thing):
def locate(path, forceload=0):
def resolve(thing, forceload=0):
def render_doc(thing, title='Python DCSP Library DCSP Documentation: DCSP %s', forceload=0):
def doc(thing, title='Python DCSP Library DCSP Documentation: DCSP %s', forceload=0):
def writedoc(thing, forceload=0):
def writedocs(dir, pkgpath='', done=None):
def apropos(key):
def gui():
def cli():
def compile(source, filename, mode, flags=None, dont_inherit=None):
def generateArgList(arglist):
def findOp(node):
def set_filename(filename, tree):
def is_future(stmt):
def order_blocks(start_block, exit_block):
def twobyte(val):
def url2pathname(url):
def pathname2url(pathname):
def _split(p):
def normcase(p):
def isabs(p):
def join(a, *p):
def split(p):
def splitext(p):
def splitdrive(p):
def basename(p):
def dirname(p):
def commonprefix(m):
def getsize(p):
def getmtime(p):
def exists(p):
def isdir(p):
def isfile(p):
def islink(p):
def samefile(fa, fb):
def sameopenfile(a, b):
def expandvars(p):
def normpath(p):
def walk(top, func, arg):
def setraw(fd, when=TCSAFLUSH):
def setcbreak(fd, when=TCSAFLUSH):
def pprint(object, stream=None, indent=1, width=80, depth=None):
def pformat(object, indent=1, width=80, depth=None):
def saferepr(object):
def isreadable(object):
def isrecursive(object):
def prepare(data):
def RawValue(typecode_or_type, *args):
def RawArray(typecode_or_type, size_or_initializer):
def Value(typecode_or_type, *args, **kwds):
def Array(typecode_or_type, size_or_initializer, **kwds):
def Manager():
def Pipe(duplex=True):
def cpu_count():
def freeze_support():
def get_logger():
def log_to_stderr(level=None):
def allow_connection_pickling():
def Lock():
def RLock():
def Condition(lock=None):
def Semaphore(value=1):
def BoundedSemaphore(value=1):
def Event():
def Queue(maxsize=0):
def JoinableQueue(maxsize=0):
def Pool(processes=None, initializer=None, initargs=(), maxtasksperchild=None):
def RawValue(typecode_or_type, *args):
def RawArray(typecode_or_type, size_or_initializer):
def Value(typecode_or_type, *args, **kwds):
def Array(typecode_or_type, size_or_initializer, **kwds):
def get_logger():
def log_to_stderr(level=None):
def _run_finalizers(minpriority=None):
def is_exiting():
def current_process():
def active_children():
def arbitrary_address(family):
def address_type(address):
def Client(address, family=None, authkey=None):
def SocketClient(address):
def dispatch(c, id, methodname, args=(), kwds={}):
def all_methods(obj):
def public_methods(obj):
def RebuildProxy(func, token, serializer, kwds):
def MakeProxyType(name, exposed, _cache={}):
def AutoProxy(token, serializer, manager=None, authkey=None, exposed=None, incref=True):
def _purge():
def fnmatch(name, pat):
def filter(names, pat):
def fnmatchcase(name, pat):
def translate(pat):
def ismodule(object):
def isclass(object):
def ismethod(object):
def ismethoddescriptor(object):
def isdatadescriptor(object):
def isfunction(object):
def isgeneratorfunction(object):
def isgenerator(object):
def istraceback(object):
def isframe(object):
def iscode(object):
def isbuiltin(object):
def isroutine(object):
def isabstract(object):
def getmembers(object, predicate=None):
def classify_class_attrs(cls):
def getmro(cls):
def indentsize(line):
def getdoc(object):
def cleandoc(doc):
def getfile(object):
def getmoduleinfo(path):
def getmodulename(path):
def getsourcefile(object):
def getabsfile(object, _filename=None):
def getmodule(object, _filename=None):
def findsource(object):
def getcomments(object):
def getblock(lines):
def getsourcelines(object):
def getsource(object):
def walktree(classes, children, parent):
def getclasstree(classes, unique=0):
def getargs(co):
def getargspec(func):
def getargvalues(frame):
def strseq(object, convert, join=joinseq):
def formatargspec(args, varargs=None, varkw=None, defaults=None, formatarg=str, formatvarargs=(lambda name: ('*' + name)), formatvarkw=(lambda name: ('**' + name)), formatvalue=(lambda value: ('=' + repr(value))), join=joinseq):
def formatargvalues(args, varargs, varkw, locals, formatarg=str, formatvarargs=(lambda name: ('*' + name)), formatvarkw=(lambda name: ('**' + name)), formatvalue=(lambda value: ('=' + repr(value))), join=joinseq):
def getcallargs(func, *positional, **named):
def getframeinfo(frame, context=1):
def getlineno(frame):
def getouterframes(frame, context=1):
def getinnerframes(tb, context=1):
def stack(context=1):
def trace(context=1):
def urlopen(url, data=None, proxies=None):
def localhost():
def thishost():
def ftperrors():
def noheaders():
def toBytes(url):
def unwrap(url):
def splittype(url):
def splithost(url):
def splituser(host):
def splitpasswd(user):
def splitport(host):
def splitnport(host, defport=(-1)):
def splitquery(url):
def splittag(url):
def splitattr(url):
def splitvalue(attr):
def unquote(s):
def unquote_plus(s):
def quote(s, safe='/'):
def quote_plus(s, safe=''):
def urlencode(query, doseq=0):
def getproxies_environment():
def proxy_bypass_environment(host):
def _resolve_name(name, package, level):
def import_module(name, package=None):
def glob(pathname):
def iglob(pathname):
def _run_exitfuncs():
def register(func, *targs, **kargs):
def interact(banner=None, readfunc=None, local=None):
def request_host(request):
def build_opener(*handlers):
def _parse_proxy(proxy):
def randombytes(n):
def parse_keqv_list(l):
def parse_http_list(s):
def mime_decode(line):
def mime_decode_header(line):
def unmimify_part(ifile, ofile, decode_base64=0):
def unmimify(infile, outfile, decode_base64=0):
def mime_encode(line, header):
def mime_encode_header(line):
def mimify_part(ifile, ofile, is_mime):
def mimify(infile, outfile):
def register(name, klass, instance=None, update_tryorder=1):
def get(using=None):
def _synthesize(browser, update_tryorder=1):
def _iscommand(cmd):
def fileConfig(fname, defaults=None, disable_existing_loggers=True):
def _resolve(name):
def _create_formatters(cp):
def _install_handlers(cp, formatters):
def _install_loggers(cp, handlers, disable_existing_loggers):
def dictConfig(config):
def listen(port=DEFAULT_LOGGING_CONFIG_PORT):
def stopListening():
def currentframe():
def getLevelName(level):
def addLevelName(level, levelName):
def _acquireLock():
def _releaseLock():
def makeLogRecord(dict):
def _removeHandlerRef(wr):
def _addHandlerRef(handler):
def setLoggerClass(klass):
def getLoggerClass():
def basicConfig(**kwargs):
def getLogger(name=None):
def critical(msg, *args, **kwargs):
def error(msg, *args, **kwargs):
def exception(msg, *args, **kwargs):
def warning(msg, *args, **kwargs):
def info(msg, *args, **kwargs):
def debug(msg, *args, **kwargs):
def log(level, msg, *args, **kwargs):
def disable(level):
def shutdown(handlerList=_handlerList):
def _showwarning(message, category, filename, lineno, file=None, line=None):
def captureWarnings(capture):
def normcase(s):
def join(a, *p):
def splitunc(p):
def basename(p):
def dirname(p):
def ismount(path):
def normpath(path):
def abspath(path):
def checkfuncname(b, frame):
def effective(file, line, frame):
def openpty():
def master_open():
def _open_terminal():
def slave_open(tty_name):
def fork():
def _writen(fd, data):
def _read(fd):
def _copy(master_fd, master_read=_read, stdin_read=_read):
def spawn(argv, master_read=_read, stdin_read=_read):
def update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES):
def wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES):
def total_ordering(cls):
def cmp_to_key(mycmp):
def open(name, mode='r', bufsize=(-1)):
def fileopen(file):
def create_string_buffer(init, size=None):
def CFUNCTYPE(restype, *argtypes, **kw):
def string_at(ptr, size=(-1)):
def dylib_info(filename):
def ensure_utf8(s):
def dyld_image_suffix_search(iterator, env=None):
def dyld_find(name, executable_path=None, env=None):
def framework_find(fn, executable_path=None, env=None):
def framework_info(filename):
def is_resource_enabled(resource):
def requires(resource, msg=None):
def get_tests(package, mask, verbosity, exclude=()):
def test_with_refcounts(runner, verbosity, testcase):
def _other_endian(typ):
def _eintr_retry(func, *args):
def clearcache():
def getlines(filename, module_globals=None):
def checkcache(filename=None):
def updatecache(filename, module_globals=None):
def _args_from_interpreter_flags():
def call(*popenargs, **kwargs):
def check_call(*popenargs, **kwargs):
def check_output(*popenargs, **kwargs):
def list2cmdline(seq):
def exists(path):
def isfile(path):
def isdir(s):
def getsize(filename):
def getmtime(filename):
def getatime(filename):
def getctime(filename):
def commonprefix(m):
def _splitext(p, sep, altsep, extsep):
def getparser(use_datetime=0):
def dumps(params, methodname=None, methodresponse=None, encoding=None, allow_none=0):
def loads(data, use_datetime=0):
def gzip_encode(data):
def gzip_decode(data):
def __py_new(name, string=''):
def __hash_new(name, string=''):
def stn(s, length):
def nts(s):
def nti(s):
def itn(n, digits=8, format=DEFAULT_FORMAT):
def uts(s, encoding, errors):
def calc_chksums(buf):
def copyfileobj(src, dst, length=None):
def filemode(mode):
def is_tarfile(name):
def b64encode(s, altchars=None):
def b64decode(s, altchars=None):
def standard_b64encode(s):
def standard_b64decode(s):
def urlsafe_b64encode(s):
def urlsafe_b64decode(s):
def b32encode(s):
def b32decode(s, casefold=False, map01=None):
def b16encode(s):
def b16decode(s, casefold=False):
def encode(input, output):
def decode(input, output):
def encodestring(s):
def decodestring(s):
def test():
def format(percent, value, grouping=False, monetary=False, *additional):
def format_string(f, val, grouping=False):
def currency(val, symbol=True, grouping=False, international=False):
def str(val):
def atof(string, func=float):
def atoi(str):
def normalize(localename):
def _parse_localename(localename):
def _build_localename(localetuple):
def getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):
def getlocale(category=LC_CTYPE):
def setlocale(category, locale=None):
def resetlocale(category=LC_ALL):
def _print_locale():
def modname(path):
def fullmodname(path):
def find_lines_from_code(code, strs):
def find_lines(code, strs):
def find_strings(filename):
def find_executable_linenos(filename):
def input(files=None, inplace=0, backup='', bufsize=0, mode='r', openhook=None):
def close():
def nextfile():
def filename():
def lineno():
def filelineno():
def fileno():
def isfirstline():
def isstdin():
def link(source, target):
def capwords(s, sep=None):
def maketrans(fromstr, tostr):
def lower(s):
def upper(s):
def swapcase(s):
def strip(s, chars=None):
def lstrip(s, chars=None):
def rstrip(s, chars=None):
def split(s, sep=None, maxsplit=(-1)):
def rsplit(s, sep=None, maxsplit=(-1)):
def join(words, sep=' DCSP '):
def index(s, *args):
def rindex(s, *args):
def count(s, *args):
def find(s, *args):
def rfind(s, *args):
def atof(s):
def atoi(s, base=10):
def atol(s, base=10):
def ljust(s, width, *args):
def rjust(s, width, *args):
def center(s, width, *args):
def zfill(x, width):
def expandtabs(s, tabsize=8):
def translate(s, table, deletions=''):
def capitalize(s):
def replace(s, old, new, maxreplace=(-1)):
def parse150(resp):
def parse227(resp):
def parse229(resp, peer):
def parse257(resp):
def print_line(line):
def ftpcp(source, sourcename, target, targetname='', type='I'):
def test():
def gcd(a, b):
def dump_file(filename, head=None):
def show_formats():
def show_formats():
def safe_name(name):
def safe_version(version):
def to_filename(name):
def get_default_compiler(osname=None, platform=None):
def show_compilers():
def new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0):
def gen_preprocess_options(macros, include_dirs):
def gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries):
def _get_gid(name):
def _get_uid(name):
def make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0, owner=None, group=None):
def make_zipfile(base_name, base_dir, verbose=0, dry_run=0):
def check_archive_formats(formats):
def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None):
def get_python_version():
def get_python_inc(plat_specific=0, prefix=None):
def get_python_lib(plat_specific=0, standard_lib=0, prefix=None):
def customize_compiler(compiler):
def get_config_h_filename():
def get_makefile_filename():
def parse_config_h(fp, g=None):
def parse_makefile(fn, g=None):
def expand_makefile_vars(s, vars):
def _init_posix():
def _init_nt():
def _init_os2():
def get_config_vars(*args):
def get_config_var(name):
def setup(**attrs):
def run_setup(script_name, script_args=None, stop_after='run'):
def get_platform():
def convert_path(pathname):
def change_root(new_root, pathname):
def check_environ():
def subst_vars(s, local_vars):
def split_quoted(s):
def execute(func, args, msg=None, verbose=0, dry_run=0):
def strtobool(val):
def byte_compile(py_files, optimize=0, force=0, prefix=None, base_dir=None, verbose=1, dry_run=0, direct=None):
def rfc822_escape(header):
def make_local_path(s):
def _get_unpatched(cls):
def copy_xxmodule_c(directory):
def fixup_build_ext(cmd):
def can_fs_encode(filename):
def wrap_text(text, width):
def translate_longopt(opt):
def fix_help_options(options):
def findall(dir=os.curdir):
def glob_to_re(pattern):
def translate_pattern(pattern, anchor=1, prefix=None, is_regex=0):
def _copy_file_contents(src, dst, buffer_size=(16 * 1024)):
def copy_file(src, dst, preserve_mode=1, preserve_times=1, update=0, link=None, verbose=1, dry_run=0):
def move_file(src, dst, verbose=1, dry_run=0):
def write_file(filename, contents):
def get_build_version():
def normalize_and_reduce_paths(paths):
def removeDuplicates(variable):
def find_vcvarsall(version):
def query_vcvarsall(version, arch='x86'):
def read_keys(base, key):
def read_values(base, key):
def get_build_version():
def get_build_architecture():
def normalize_and_reduce_paths(paths):
def splitUp(pred):
def split_provision(value):
def get_msvcr():
def check_config_h():
def get_versions():
def is_cygwingcc():
def spawn(cmd, search_path=1, verbose=0, dry_run=0):
def _nt_quote_args(args):
def find_executable(executable, path=None):
def newer(source, target):
def newer_pairwise(sources, targets):
def newer_group(sources, target, missing='error'):
def mkpath(name, mode=511, verbose=1, dry_run=0):
def create_tree(base_dir, files, mode=511, verbose=1, dry_run=0):
def copy_tree(src, dst, preserve_mode=1, preserve_times=1, preserve_symlinks=0, update=0, verbose=1, dry_run=0):
def _build_cmdtuple(path, cmdtuples):
def remove_tree(directory, verbose=1, dry_run=0):
def ensure_relative(path):
def check_config_h():
def get_versions():
def is_unavailable_exception(e):
def sample_func(v):
def run_gdb(*args, **env_vars):
def iterfunc(seqn):
def itermulti(seqn):
def escapestr(text, ampm):
@contextlib.contextmanager DCNL def _ignore_deprecated_imports(ignore=True):
def import_module(name, deprecated=False):
def _save_and_remove_module(name, orig_modules):
def _save_and_block_module(name, orig_modules):
def import_fresh_module(name, fresh=(), blocked=(), deprecated=False):
def get_attribute(obj, name):
def forget(modname):
def is_resource_enabled(resource):
def requires(resource, msg=None):
def find_unused_port(family=socket.AF_INET, socktype=socket.SOCK_STREAM):
def bind_port(sock, host=HOST):
@contextlib.contextmanager DCNL def temp_cwd(name='tempcwd', quiet=False):
def findfile(file, here=__file__, subdir=None):
def sortdict(dict):
def make_bad_fd():
def _filterwarnings(filters, quiet=False):
@contextlib.contextmanager DCNL def check_warnings(*filters, **kwargs):
@contextlib.contextmanager DCNL def check_py3k_warnings(*filters, **kwargs):
@contextlib.contextmanager DCNL def transient_internet(resource_name, timeout=30.0, errnos=()):
@contextlib.contextmanager DCNL def captured_output(stream_name):
def captured_stdout():
def gc_collect():
def bigmemtest(minsize, memuse, overhead=(5 * _1M)):
def bigaddrspacetest(f):
def cpython_only(test):
def check_impl_detail(**guards):
def _run_suite(suite):
def run_unittest(*classes):
def run_doctest(module, verbosity=None):
def reap_threads(func):
def reap_children():
@contextlib.contextmanager DCNL def swap_attr(obj, attr, new_val):
def py3k_bytes(b):
def args_from_interpreter_flags():
def strip_python_stderr(stderr):
def ignore_deprecation_warnings(func):
def genblock(seed, length, step=1024, generator=random):
def choose_lines(source, number, seed=None, generator=random):
def truediv(a, b):
def has_sound(sound):
def _get_cscript_path():
def _have_soundcard():
def getimage(name):
def get_qualified_path(name):
def test_password_manager(self):
def add_ordered_mock_handlers(opener, meth_spec):
def randfloats(n):
def tabulate(r):
def main():
def assert_python_ok(*args, **env_vars):
def assert_python_failure(*args, **env_vars):
def check_encoding(encoding):
def error(xml):
def xpath_tokenizer(p):
def xmltoolkit62():
def xmltoolkit63():
def eggs(x, y):
def testimage(name):
def to_ulps(x):
def ulps_check(expected, got, ulps=20):
def acc_check(expected, got, rel_err=2e-15, abs_err=5e-323):
def parse_mtestfile(fname):
def parse_testfile(fname):
def main(tests=None, testdir=None, verbose=0, quiet=False, exclude=False, single=False, randomize=False, fromfile=None, findleaks=False, use_resources=None, trace=False, coverdir='coverage', runleaks=False, huntrleaks=False, verbose2=False, print_slow=False, random_seed=None, use_mp=None, verbose3=False, forever=False, header=False):
def findtests(testdir=None, stdtests=STDTESTS, nottests=NOTTESTS):
def runtest(test, verbose, quiet, huntrleaks=False, use_resources=None):
def dash_R(the_module, test, indirect_test, huntrleaks):
def printlist(x, width=70, indent=4):
def exit_subprocess():
def verbose_print(arg):
def skip_unless_symlink(test):
def _symlink_win32(target, link, target_is_directory=False):
def _interact(cookiejar, url, set_cookie_hdrs, hdr_name):
def gcd(a, b):
def isint(x):
def isnum(x):
def isRat(x):
@staticmethod DCNL def PythonPartial(func, *args, **keywords):
def capture(*args, **kw):
def signature(part):
def consts(t):
def dump(co):
@contextmanager DCNL def warnings_state(module):
def fix_ext_py(filename):
def my_file_and_modname():
def func2():
def _ctrl_handler(sig):
@contextlib.contextmanager DCNL def uncache(*names):
@contextlib.contextmanager DCNL def import_state(**kwargs):
def compare_generic_iter(make_it, match):
def server(evt, serv, dataq=None):
def run_pydoc(module_name, *args, **env):
def get_pydoc_html(module):
def get_pydoc_text(module):
def print_diffs(text1, text2):
def _default_chunk_size():
def have_python_version(name):
def R(seqn):
def L(seqn):
def skip_if_ABSTFN_contains_backslash(test):
def onearg(x):
def errfunc(*args):
def gen3():
def isEven(x):
def isOdd(x):
def take(n, seq):
def fact(n):
def R(seqn):
def L(seqn):
def dump_tokens(s):
def decistmt(s):
def Nonfunction(*args):
def test_main(arith=None, verbose=None, todo_tests=None, debug=None):
def strtod(s, mant_dig=53, min_exp=(-1021), max_exp=1024):
def try_address(host, port=0, family=socket.AF_INET):
def isTipcAvailable():
def dbcheck(exprstr, globals=None, locals=None):
def countcalls(counts):
def check_enough_semaphores():
def window_funcs(stdscr):
def module_funcs(stdscr):
def R(seqn):
def L(seqn):
def powerset(U):
def cube(n):
def linegraph(G):
def faces(G):
def signal_alarm(n):
def hexescape(char):
def compile(file, cfile=None, dfile=None, doraise=False, force=False):
def main(args=None):
def _extract_future_flags(globs):
def _normalize_module(module, depth=2):
def _indent(s, indent=4):
def _exception_traceback(exc_info):
def _ellipsis_match(want, got):
def _comment_line(line):
def testmod(m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False):
def testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser(), encoding=None):
def run_docstring_examples(f, globs, verbose=False, name='NoName', compileflags=None, optionflags=0):
def set_unittest_reportflags(flags):
def DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, **options):
def DocFileSuite(*paths, **kw):
def script_from_examples(s):
def testsource(module, name):
def debug_src(src, pm=False, globs=None):
def debug_script(src, pm=False, globs=None):
def debug(module, name, pm=False):
def copy(x):
def deepcopy(x, memo=None, _nil=[]):
def _keep_alive(x, memo):
def url2pathname(url):
def pathname2url(p):
def open(filename, flags=db.DB_CREATE, mode=432, filetype=db.DB_HASH, dbenv=None, dbname=None):
def contains_metastrings(s):
def DeadlockWrap(function, *_args, **_kwargs):
def getstatus(file):
def getoutput(cmd):
def getstatusoutput(cmd):
def test():
def dis(x=None):
def distb(tb=None):
def disassemble(co, lasti=(-1)):
def findlabels(code):
def findlinestarts(code):
def _test():
def get_long_be(s):
def gethdr(fp):
def printhdr(file):
def make_parser(parser_list=[]):
def __dict_replace(s, d):
def escape(data, entities={}):
def unescape(data, entities={}):
def quoteattr(data, entities={}):
def prepare_input_source(source, base=''):
def parse(file, namespaces=True):
def parseString(string, namespaces=True):
def parseFragment(file, context, namespaces=True):
def parseFragmentString(string, context, namespaces=True):
def makeBuilder(options):
def registerDOMImplementation(name, factory):
def _good_enough(dom, features):
def getDOMImplementation(name=None, features=()):
def _write_data(writer, data):
def _clone_node(node, deep, newOwnerDocument):
def parse(file, parser=None, bufsize=None):
def parseString(string, parser=None):
def open(filename, mode='rb', compresslevel=9):
def copyfileobj(fsrc, fdst, length=(16 * 1024)):
def copyfile(src, dst):
def copymode(src, dst):
def copystat(src, dst):
def copy(src, dst):
def copy2(src, dst):
def ignore_patterns(*patterns):
def copytree(src, dst, symlinks=False, ignore=None):
def rmtree(path, ignore_errors=False, onerror=None):
def move(src, dst):
def _get_gid(name):
def _get_uid(name):
def _make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0, owner=None, group=None, logger=None):
def _make_zipfile(base_name, base_dir, verbose=0, dry_run=0, logger=None):
def get_archive_formats():
def register_archive_format(name, function, extra_args=None, description=''):
def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None, logger=None):
def abstractmethod(funcobj):
def quote(file):
def Bastion(object, filter=(lambda name: (name[:1] != '_')), name=None, bastionclass=BastionClass):
def _test():
def _find_executable(executable, path=None):
def _read_output(commandstring):
def _find_build_tool(toolname):
def _get_system_version():
def _remove_original_values(_config_vars):
def _save_modified_value(_config_vars, cv, newvalue):
def _supports_universal_builds():
def _find_appropriate_compiler(_config_vars):
def _remove_universal_flags(_config_vars):
def _remove_unsupported_archs(_config_vars):
def _override_all_archs(_config_vars):
def _check_for_unavailable_sdk(_config_vars):
def compiler_fixup(compiler_so, cc_args):
def customize_config_vars(_config_vars):
def customize_compiler(_config_vars):
def get_platform_osx(_config_vars, osname, release, machine):
def _run_code(code, run_globals, init_globals=None, mod_name=None, mod_fname=None, mod_loader=None, pkg_name=None):
def _run_module_code(code, init_globals=None, mod_name=None, mod_fname=None, mod_loader=None, pkg_name=None):
def _run_module_as_main(mod_name, alter_argv=True):
def run_module(mod_name, init_globals=None, run_name=None, alter_sys=False):
def _get_importer(path_name):
def run_path(path_name, init_globals=None, run_name=None):
def Internaldate2tuple(resp):
def Int2AP(num):
def ParseFlags(resp):
def Time2Internaldate(date_time):
def test(HandlerClass=BaseHTTPRequestHandler, ServerClass=HTTPServer, protocol='HTTP/1.0'):
def _candidate_tempdir_list():
def _get_default_tempdir():
def _get_candidate_names():
def _mkstemp_inner(dir, pre, suf, flags):
def gettempprefix():
def gettempdir():
def mkstemp(suffix='', prefix=template, dir=None, text=False):
def mkdtemp(suffix='', prefix=template, dir=None):
def mktemp(suffix='', prefix=template, dir=None):
def NamedTemporaryFile(mode='w+b', bufsize=(-1), suffix='', prefix=template, dir=None, delete=True):
def match(pattern, string, flags=0):
def search(pattern, string, flags=0):
def sub(pattern, repl, string, count=0, flags=0):
def subn(pattern, repl, string, count=0, flags=0):
def split(pattern, string, maxsplit=0, flags=0):
def findall(pattern, string, flags=0):
def compile(pattern, flags=0):
def purge():
def template(pattern, flags=0):
def escape(pattern):
def getfqdn(name=''):
def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT, source_address=None):
def getopt(args, shortopts, longopts=[]):
def gnu_getopt(args, shortopts, longopts=[]):
def start_new_thread(function, args, kwargs={}):
def exit():
def get_ident():
def allocate_lock():
def stack_size(size=None):
def interrupt_main():
def test_jpeg(h, f):
def test_exif(h, f):
def test_gif(h, f):
def test_tiff(h, f):
def test_rgb(h, f):
def test_pbm(h, f):
def test_pgm(h, f):
def test_ppm(h, f):
def test_rast(h, f):
def test_xbm(h, f):
def open(file, flag='r', mode=438):
def readPlist(pathOrFile):
def writePlist(rootObject, pathOrFile):
def readPlistFromString(data):
def writePlistToString(rootObject):
def readPlistFromResource(path, restype='plst', resid=0):
def writePlistToResource(rootObject, path, restype='plst', resid=0):
def reset():
def lookup(name, frame, locals):
def scanvars(reader, frame, locals):
def html(einfo, context=5):
def text(einfo, context=5):
def enable(display=1, logdir=None, context=5, format='html'):
def whichdb(filename):
def clear_cache():
def urlparse(url, scheme='', allow_fragments=True):
def urlsplit(url, scheme='', allow_fragments=True):
def urlunparse(data):
def urlunsplit(data):
def urljoin(base, url, allow_fragments=True):
def urldefrag(url):
def unquote(s):
def parse_qs(qs, keep_blank_values=0, strict_parsing=0):
def parse_qsl(qs, keep_blank_values=0, strict_parsing=0):
def normcase(s):
def isabs(s):
def join(a, *p):
def split(p):
def splitdrive(p):
def basename(p):
def dirname(p):
def islink(path):
def lexists(path):
def samefile(f1, f2):
def sameopenfile(fp1, fp2):
def samestat(s1, s2):
def ismount(path):
def walk(top, func, arg):
def expanduser(path):
def expandvars(path):
def normpath(path):
def abspath(path):
def realpath(filename):
def relpath(path, start=curdir):
def _ifconfig_getnode():
def _ipconfig_getnode():
def _netbios_getnode():
def _unixdll_getnode():
def _windll_getnode():
def _random_getnode():
def getnode():
def uuid1(node=None, clock_seq=None):
def uuid3(namespace, name):
def uuid4():
def uuid5(namespace, name):
def unquote(s):
def quote(s):
def parseaddr(address):
def dump_address_pair(pair):
def parsedate_tz(data):
def parsedate(data):
def mktime_tz(data):
def formatdate(timeval=None):
def _keep_alive(x, memo):
def whichmodule(func, funcname):
def encode_long(x):
def decode_long(data):
def open(filename, mode='rb', encoding=None, errors='strict', buffering=1):
def EncodedFile(file, data_encoding, file_encoding=None, errors='strict'):
def getencoder(encoding):
def getdecoder(encoding):
def getincrementalencoder(encoding):
def getincrementaldecoder(encoding):
def getreader(encoding):
def getwriter(encoding):
def iterencode(iterator, encoding, errors='strict', **kwargs):
def iterdecode(iterator, encoding, errors='strict', **kwargs):
def make_identity_dict(rng):
def make_encoding_map(decoding_map):
def namedtuple(typename, field_names, verbose=False, rename=False):
def what(filename):
def whathdr(filename):
def is_zipfile(filename):
def _EndRecData64(fpin, offset, endrec):
def _EndRecData(fpin):
def initlog(*allargs):
def dolog(fmt, *args):
def nolog(*allargs):
def parse(fp=None, environ=os.environ, keep_blank_values=0, strict_parsing=0):
def parse_qs(qs, keep_blank_values=0, strict_parsing=0):
def parse_qsl(qs, keep_blank_values=0, strict_parsing=0):
def parse_multipart(fp, pdict):
def parse_header(line):
def test(environ=os.environ):
def print_environ(environ=os.environ):
def print_form(form):
def print_directory():
def print_environ_usage():
def escape(s, quote=None):
def _calc_julian_from_U_or_W(year, week_of_year, day_of_week, week_starts_Mon):
def _strptime(data_string, format='%a DCSP %b DCSP %d DCSP %H:%M:%S DCSP %Y'):
def lower(s):
def upper(s):
def swapcase(s):
def strip(s):
def lstrip(s):
def rstrip(s):
def split(s, sep=None, maxsplit=0):
def join(words, sep=' DCSP '):
def index(s, *args):
def rindex(s, *args):
def count(s, *args):
def find(s, *args):
def rfind(s, *args):
def atof(s):
def atoi(*args):
def atol(*args):
def ljust(s, width):
def rjust(s, width):
def center(s, width):
def zfill(x, width):
def expandtabs(s, tabsize=8):
def translate(s, table, deletions=''):
def capitalize(s):
def capwords(s, sep=None):
def maketrans(fromstr, tostr):
def replace(s, old, new, maxsplit=0):
def _compile(pathname, timestamp):
def _os_bootstrap():
def _os_path_isdir(pathname):
def _timestamp(pathname):
def compile_command(source, filename='<input>', symbol='single'):
def libc_ver(executable=sys.executable, lib='', version='', chunksize=2048):
def _dist_try_harder(distname, version, id):
def linux_distribution(distname='', version='', id='', supported_dists=_supported_dists, full_distribution_name=1):
def dist(distname='', version='', id='', supported_dists=_supported_dists):
def popen(cmd, mode='r', bufsize=None):
def _norm_version(version, build=''):
def _syscmd_ver(system='', release='', version='', supported_platforms=('win32', 'win16', 'dos', 'os2')):
def _win32_getvalue(key, name, default=''):
def win32_ver(release='', version='', csd='', ptype=''):
def _mac_ver_gestalt():
def mac_ver(release='', versioninfo=('', '', ''), machine=''):
def java_ver(release='', vendor='', vminfo=('', '', ''), osinfo=('', '', '')):
def system_alias(system, release, version):
def _platform(*args):
def _node(default=''):
def _follow_symlinks(filepath):
def _syscmd_uname(option, default=''):
def _syscmd_file(target, default=''):
def architecture(executable=sys.executable, bits='', linkage=''):
def uname():
def system():
def node():
def release():
def version():
def machine():
def processor():
def _sys_version(sys_version=None):
def python_implementation():
def python_version():
def python_version_tuple():
def python_branch():
def python_revision():
def python_build():
def python_compiler():
def platform(aliased=0, terse=0):
def add_func_stats(target, source):
def add_callers(target, source):
def count_calls(callers):
def getcaps():
def listmailcapfiles():
def readmailcapfile(fp):
def parseline(line):
def parsefield(line, i, n):
def findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=[]):
def quoteaddr(addr):
def quotedata(data):
def hex_encode(input, errors='strict'):
def hex_decode(input, errors='strict'):
def normalize_encoding(encoding):
def base64_encode(input, errors='strict'):
def base64_decode(input, errors='strict'):
def uu_encode(input, errors='strict', filename='<data>', mode=438):
def uu_decode(input, errors='strict'):
def zlib_encode(input, errors='strict'):
def zlib_decode(input, errors='strict'):
def bz2_encode(input, errors='strict'):
def bz2_decode(input, errors='strict'):
def segregate(str):
def selective_len(str, max):
def selective_find(str, char, index, pos):
def insertion_unsort(str, extended):
def generate_generalized_integer(N, bias):
def generate_integers(baselen, deltas):
def decode_generalized_number(extended, extpos, bias, errors):
def insertion_sort(base, extended, errors):
def quopri_encode(input, errors='strict'):
def quopri_decode(input, errors='strict'):
def readmodule(module, path=None):
def readmodule_ex(module, path=None):
def _readmodule(module, path, inpackage=None):
def choose_boundary():
def decode(input, output, encoding):
def encode(input, output, encoding):
def mkalias(src, dst, relative=None):
def mkdirs(dst):
def touched(dst):
def touched_ae(dst):
def copy(src, dst, createpath=0, copydates=1, forcetype=None):
def copytree(src, dst, copydates=1):
def nice(s):
def _interact():
def Message(msg, id=260, ok=None):
def AskString(prompt, default='', id=261, ok=None, cancel=None):
def AskPassword(prompt, default='', id=264, ok=None, cancel=None):
def AskYesNoCancel(question, default=0, yes=None, no=None, cancel=None, id=262):
def AskFileForOpen(message=None, typeList=None, version=None, defaultLocation=None, dialogOptionFlags=None, location=None, clientName=None, windowTitle=None, actionButtonLabel=None, cancelButtonLabel=None, preferenceKey=None, popupExtension=None, eventProc=_dummy_Nav_eventproc, previewProc=None, filterProc=None, wanted=None, multiple=None):
def AskFileForSave(message=None, savedFileName=None, version=None, defaultLocation=None, dialogOptionFlags=None, location=None, clientName=None, windowTitle=None, actionButtonLabel=None, cancelButtonLabel=None, preferenceKey=None, popupExtension=None, eventProc=_dummy_Nav_eventproc, fileType=None, fileCreator=None, wanted=None, multiple=None):
def AskFolder(message=None, version=None, defaultLocation=None, dialogOptionFlags=None, location=None, clientName=None, windowTitle=None, actionButtonLabel=None, cancelButtonLabel=None, preferenceKey=None, popupExtension=None, eventProc=_dummy_Nav_eventproc, filterProc=None, wanted=None, multiple=None):
def keysubst(arguments, keydict):
def enumsubst(arguments, key, edict):
def decodeerror(arguments):
def _launch(appfile):
def _getfinder():
def launch(file):
def Print(file):
def copy(src, dstdir):
def move(src, dstdir):
def sleep():
def shutdown():
def restart():
def reveal(file):
def select(file):
def update(file):
def comment(object, comment=None):
def processes():
def isactiveprocess(processname):
def processinfo(processname):
def _processproperty(processname, property):
def openwindow(object):
def closewindow(object):
def location(object, pos=None):
def _setlocation(object_alias, (x, y)):
def _getlocation(object_alias):
def label(object, index=None):
def _getlabel(object_alias):
def _setlabel(object_alias, index):
def windowview(folder, view=None):
def _setwindowview(folder_alias, view=0):
def _getwindowview(folder_alias):
def windowsize(folder, size=None):
def _setwindowsize(folder_alias, (w, h)):
def _getwindowsize(folder_alias):
def windowposition(folder, pos=None):
def _setwindowposition(folder_alias, (x, y)):
def _getwindowposition(folder_alias):
def icon(object, icondata=None):
def _geticon(object_alias):
def _seticon(object_alias, icondata):
def mountvolume(volume, server=None, username=None, password=None):
def unmountvolume(volume):
def putaway(object):
def volumelevel(level):
def OSversion():
def filesharing():
def movetotrash(path):
def emptytrash():
def pack(x, forcetype=None):
def unpack(desc, formodulename=''):
def coerce(data, egdata):
def code(x):
def need(restype, resid, filename=None, modname=None):
def open_pathname(pathname, verbose=0):
def resource_pathname(pathname, verbose=0):
def open_error_resource():
def windowbounds(width, height):
def ostypecode(x):
def test():
def copy(src, dst, mkdirs=0):
def copytodir(src, dstdir):
def makedirs(dir):
def symlink(src, dst, mkdirs=0):
def pathjoin(*args):
def decode(infile, outpath, resonly=False, verbose=False):
def findtemplate(template=None):
def mergecfmfiles(srclist, dst, architecture='fat'):
def _cmd(output, dir, *cmditems):
def _run(mode, verbose, force, args, prefargs, watcher):
def main():
def is_scriptable(application):
def processfile_fromresource(fullname, output=None, basepkgname=None, edit_modnames=None, creatorsignature=None, dump=None, verbose=None):
def processfile(fullname, output=None, basepkgname=None, edit_modnames=None, creatorsignature=None, dump=None, verbose=None):
def getappterminology(fullname, verbose=None):
def decode(data, verbose=None):
def simplify(item):
def compileaete(aete, resinfo, fname, output=None, basepkgname=None, edit_modnames=None, creatorsignature=None, verbose=None):
def ascii(str):
def identify(str):
def run(command):
def print_list(extracted_list, file=None):
def format_list(extracted_list):
def print_tb(tb, limit=None, file=None):
def format_tb(tb, limit=None):
def extract_tb(tb, limit=None):
def print_exception(etype, value, tb, limit=None, file=None):
def format_exception(etype, value, tb, limit=None):
def format_exception_only(etype, value):
def _format_final_exc_line(etype, value):
def print_exc(limit=None, file=None):
def format_exc(limit=None):
def print_last(limit=None, file=None):
def print_stack(f=None, limit=None, file=None):
def format_stack(f=None, limit=None):
def extract_stack(f=None, limit=None):
def tb_lineno(tb):
def resolve_dotted_attribute(obj, attr, allow_dotted_names=True):
def list_public_methods(obj):
def remove_duplicates(lst):
def needsquoting(c, quotetabs, header):
def quote(c):
def encode(input, output, quotetabs, header=0):
def decode(input, output, header=0):
def ishex(c):
def unhex(s):
def canonicalize_stderr(stderr):
def ParseNolintSuppressions(filename, raw_line, linenum, error):
def ResetNolintSuppressions():
def IsErrorSuppressedByNolint(category, linenum):
def Match(pattern, s):
def ReplaceAll(pattern, rep, s):
def Search(pattern, s):
def _OutputFormat():
def _SetOutputFormat(output_format):
def _VerboseLevel():
def _SetVerboseLevel(level):
def _SetCountingStyle(level):
def _Filters():
def _SetFilters(filters):
def _ShouldPrintError(category, confidence, linenum):
def Error(filename, linenum, category, confidence, message):
def IsCppString(line):
def CleanseRawStrings(raw_lines):
def FindNextMultiLineCommentStart(lines, lineix):
def FindNextMultiLineCommentEnd(lines, lineix):
def RemoveMultiLineCommentsFromRange(lines, begin, end):
def RemoveMultiLineComments(filename, lines, error):
def CleanseComments(line):
def FindEndOfExpressionInLine(line, startpos, depth, startchar, endchar):
def CloseExpression(clean_lines, linenum, pos):
def FindStartOfExpressionInLine(line, endpos, depth, startchar, endchar):
def ReverseCloseExpression(clean_lines, linenum, pos):
def CheckForCopyright(filename, lines, error):
def GetHeaderGuardCPPVariable(filename):
def CheckForHeaderGuard(filename, lines, error):
def CheckForBadCharacters(filename, lines, error):
def CheckForNewlineAtEOF(filename, lines, error):
def CheckForMultilineCommentsAndStrings(filename, clean_lines, linenum, error):
def CheckPosixThreading(filename, clean_lines, linenum, error):
def CheckVlogArguments(filename, clean_lines, linenum, error):
def CheckInvalidIncrement(filename, clean_lines, linenum, error):
def CheckForNonStandardConstructs(filename, clean_lines, linenum, nesting_state, error):
def CheckSpacingForFunctionCall(filename, line, linenum, error):
def IsBlankLine(line):
def CheckForFunctionLengths(filename, clean_lines, linenum, function_state, error):
def CheckComment(comment, filename, linenum, error):
def CheckAccess(filename, clean_lines, linenum, nesting_state, error):
def FindNextMatchingAngleBracket(clean_lines, linenum, init_suffix):
def FindPreviousMatchingAngleBracket(clean_lines, linenum, init_prefix):
def CheckSpacing(filename, clean_lines, linenum, nesting_state, error):
def CheckSectionSpacing(filename, clean_lines, class_info, linenum, error):
def GetPreviousNonBlankLine(clean_lines, linenum):
def CheckBraces(filename, clean_lines, linenum, error):
def CheckEmptyBlockBody(filename, clean_lines, linenum, error):
def CheckCheck(filename, clean_lines, linenum, error):
def CheckAltTokens(filename, clean_lines, linenum, error):
def GetLineWidth(line):
def CheckStyle(filename, clean_lines, linenum, file_extension, nesting_state, error):
def _DropCommonSuffixes(filename):
def _IsTestFilename(filename):
def _ClassifyInclude(fileinfo, include, is_system):
def CheckIncludeLine(filename, clean_lines, linenum, include_state, error):
def _GetTextInside(text, start_pattern):
def CheckLanguage(filename, clean_lines, linenum, file_extension, include_state, nesting_state, error):
def CheckForNonConstReference(filename, clean_lines, linenum, nesting_state, error):
def CheckCStyleCast(filename, linenum, line, raw_line, cast_type, pattern, error):
def FilesBelongToSameModule(filename_cc, filename_h):
def UpdateIncludeState(filename, include_state, io=codecs):
def CheckForIncludeWhatYouUse(filename, clean_lines, include_state, error, io=codecs):
def CheckMakePairUsesDeduction(filename, clean_lines, linenum, error):
def ProcessLine(filename, file_extension, clean_lines, line, include_state, function_state, nesting_state, error, extra_check_functions=[]):
def ProcessFileData(filename, file_extension, lines, error, extra_check_functions=[]):
def ProcessFile(filename, vlevel, extra_check_functions=[]):
def PrintUsage(message):
def PrintCategories():
def ParseArguments(args):
def galois_multiply(a, b):
def attacks(pos):
def place(board, queens, r, c, d, g):
def permutations(iterable, r=None):
def n_queens(queen_count):
def chain_test(n):
def projection_test(n):
@with_open_mode('r') DCNL @with_sizes('medium') DCNL def read_bytewise(f):
@with_open_mode('r') DCNL @with_sizes('medium') DCNL def read_small_chunks(f):
@with_open_mode('r') DCNL @with_sizes('medium') DCNL def read_big_chunks(f):
@with_open_mode('r') DCNL @with_sizes('small', 'medium', 'large') DCNL def read_whole_file(f):
@with_open_mode('rt') DCNL @with_sizes('medium') DCNL def read_lines(f):
@with_open_mode('r') DCNL @with_sizes('medium') DCNL def seek_forward_bytewise(f):
@with_open_mode('r') DCNL @with_sizes('medium') DCNL def seek_forward_blockwise(f):
@with_open_mode('rb') DCNL @with_sizes('medium') DCNL def read_seek_bytewise(f):
@with_open_mode('rb') DCNL @with_sizes('medium') DCNL def read_seek_blockwise(f):
@with_open_mode('w') DCNL @with_sizes('small') DCNL def write_bytewise(f, source):
@with_open_mode('w') DCNL @with_sizes('medium') DCNL def write_small_chunks(f, source):
@with_open_mode('w') DCNL @with_sizes('medium') DCNL def write_medium_chunks(f, source):
@with_open_mode('w') DCNL @with_sizes('large') DCNL def write_large_chunks(f, source):
@with_open_mode('w+') DCNL @with_sizes('small') DCNL def modify_bytewise(f, source):
@with_open_mode('w+') DCNL @with_sizes('medium') DCNL def modify_small_chunks(f, source):
@with_open_mode('w+') DCNL @with_sizes('medium') DCNL def modify_medium_chunks(f, source):
@with_open_mode('wb+') DCNL @with_sizes('medium') DCNL def modify_seek_forward_bytewise(f, source):
@with_open_mode('wb+') DCNL @with_sizes('medium') DCNL def modify_seek_forward_blockwise(f, source):
@with_open_mode('wb+') DCNL @with_sizes('medium') DCNL def read_modify_bytewise(f, source):
@with_open_mode('wb+') DCNL @with_sizes('medium') DCNL def read_modify_blockwise(f, source):
def attacks(pos):
def place(board, queens, r, c, d, g):
def f3():
def f4(t):
def foo():
def permutations(iterable, r=None):
def factorial(n):
def f():
def copyfunc(f, name=None):
def g():
def g():
def chop(s):
def copyfunc(f, name=None):
def get_dialect(self):
def get_interface_addresses():
def main():
def dnslib_resolve_over_udp(query, dnsservers, timeout, **kwargs):
def dnslib_resolve_over_tcp(query, dnsservers, timeout, **kwargs):
def dnslib_resolve_over_udp(query, dnsservers, timeout, **kwargs):
def dnslib_resolve_over_tcp(query, dnsservers, timeout, **kwargs):
def dnslib_record2iplist(record):
def forward_socket(local, remote, timeout, bufsize):
def _request_uri(environ):
def parse_cookie(data):
def html_escape(s):
def deprecated_property(attr, name, text, version):
def parse_etag_response(value, strong=False):
def timedelta_to_seconds(td):
def parse_date_delta(value):
def _cgi_FieldStorage__repr__patch(self):
def _encode_multipart(vars, content_type, fout=None):
def GenerateYamlHandlersList(app_engine_web_xml, web_xml, static_files):
def GenerateYamlHandlersListForDevAppServer(app_engine_web_xml, web_xml, static_urls):
def _MakeWelcomeProperties(web_xml, static_files):
def _MakeCronListIntoYaml(cron_list):
def _ProcessRetryParametersNode(node, cron):
def ReadManifest(jar_file_name):
def _ParseManifest(manifest_string, jar_file_name):
def _ParseManifestSection(section, jar_file_name):
def Make(input_directory, output_directory, base_name, maximum_size=sys.maxint, include_predicate=(lambda name: True)):
def SplitJar(input_jar, output_directory, maximum_size=sys.maxint, include_predicate=(lambda name: True)):
def JarContents(jar_path):
def RaiseHttpError(url, response_info, response_body, extra_msg=''):
def _ScopesToString(scopes):
def GetPlatformToken(os_module=os, sys_module=sys, platform=sys.platform):
def HttpRequestToString(req, include_data=True):
def GetBackendsYaml(unused_application, backends_xml_str):
def AddUpdateOptions(parser):
def _FilesMatching(root, predicate=(lambda f: True)):
def _FindApiJars(lib_dir):
def quickstart_generator(war_path, sdk_root=None):
def get_webdefault_xml(sdk_root=None):
def remove_mappings(quickstart_xml, webdefault_xml):
def _children_with_tags(element, tags):
def _children_with_tag(element, tag):
def JavaHomeAndSuffix():
def _MakeDosListIntoYaml(dos_list):
def PrintUpdate(msg, error_fh=sys.stderr):
def StatusUpdate(msg, error_fh=sys.stderr):
def BackendsStatusUpdate(runtime, error_fh=sys.stderr):
def ErrorUpdate(msg, error_fh=sys.stderr):
def _PrintErrorAndExit(stream, msg, exit_code=2):
def JavaSupported():
@contextlib.contextmanager DCNL def TempChangeField(obj, field_name, new_value):
def BuildClonePostBody(file_tuples):
def _GetRemoteResourceLimits(logging_context):
def GetResourceLimits(logging_context, error_fh=sys.stderr):
def RetryWithBackoff(callable_func, retry_notify_func, initial_delay=1, backoff_factor=2, max_delay=60, max_tries=20):
def RetryNoBackoff(callable_func, retry_notify_func, delay=5, max_tries=200):
def MigratePython27Notice():
def DateOfLogLine(line):
def PacificDate(now):
def PacificTime(now):
def IsPacificDST(now):
def CopyReversedLines(instream, outstream, blocksize=(2 ** 16)):
def FindSentinel(filename, blocksize=(2 ** 16), error_fh=sys.stderr):
def _FormatHash(h):
def _Hash(content):
def _HashFromFileHandle(file_handle):
def EnsureDir(path):
def DoDownloadApp(rpcserver, out_dir, app_id, module, app_version, error_fh=sys.stderr):
def FileIterator(base, skip_files, runtime, separator=os.path.sep):
def GetFileLength(fh):
def GetUserAgent(get_version=sdk_update_checker.GetVersionObject, get_platform=appengine_rpc.GetPlatformToken, sdk_product=SDK_PRODUCT):
def GetSourceName(get_version=sdk_update_checker.GetVersionObject):
def _ReadUrlContents(url):
def TranslateXmlToYamlForDevAppServer(app_engine_web_xml, web_xml, war_root):
def _XmlPatternToRegEx(xml_pattern):
def GetVersionObject():
def _VersionList(release):
def _GetSupportedApiVersions(versions, runtime):
def InterruptibleSleep(sleep_time):
def ImportStateMessage(state):
def ExportStateMessage(state):
def MapStateMessage(state):
def ExportStateName(state):
def ImportStateName(state):
def GetCSVGeneratorFactory(kind, csv_filename, batch_size, csv_has_header, openfile=open, create_csv_reader=csv.reader):
def GetImplementationClass(kind_or_class_key):
def KeyLEQ(key1, key2):
def ConvertKeys(keys):
def ReserveKeys(keys):
def InterruptibleSleep(sleep_time):
def IsURLErrorFatal(error):
def _RunningInThread(thread):
def KeyStr(key):
def StrKey(key_str):
def ProgressDatabase(db_filename, signature):
def ParseKey(key_string):
def Validate(value, typ):
def CheckFile(filename):
def InterruptibleQueueJoin(queue, thread_local, thread_pool, queue_join_thread_factory=QueueJoinThread, check_workers=True):
def ShutdownThreads(data_source_thread, thread_pool):
def PrintUsageExit(code):
def ParseArguments(argv, die_fn=(lambda : PrintUsageExit(1))):
def ThrottleLayout(bandwidth_limit, http_limit, rps_limit):
def CheckOutputFile(filename):
def LoadYamlConfig(config_file_name):
def LoadConfig(config_file_name, exit_fn=sys.exit):
def GetArgument(kwargs, name, die_fn):
def _MakeSignature(app_id=None, url=None, kind=None, db_filename=None, perform_map=None, download=None, has_header=None, result_db_filename=None, dump=None, restore=None):
def ProcessArguments(arg_dict, die_fn=(lambda : sys.exit(1))):
def _GetRemoteAppId(url, throttle, oauth2_parameters, throttle_class=None):
def _PerformBulkload(arg_dict, oauth2_parameters=None, check_file=CheckFile, check_output_file=CheckOutputFile):
def SetupLogging(arg_dict):
def Run(arg_dict, oauth2_parameters=None):
def main(argv):
def GetTag(node):
def GetChild(node, tag):
def GetAttribute(node, attr):
def GetChildNodeText(node, child_tag, default=''):
def GetNodes(node, match_tag):
def _MakeDispatchListIntoYaml(application, dispatch_list):
def GetOrderedIntersection(handler_list):
def _RemoveRedundantHandlers(handler_list):
def _ReorderHandlers(handler_list):
def _GivePropertiesFromGeneralToSpecific(handler_list):
def _Intersect(handler_list):
def _IntersectTwoHandlers(first_handler, second_handler):
def _HandleWildcardCases(first_handler, second_handler):
def _HandleCommonPrefix(first_handler, second_handler, common_prefix):
def _HandleCommonSuffix(first_handler, second_handler, common_suffix):
def _SharedPrefix(pattern1, pattern2):
def _SharedSuffix(pattern1, pattern2):
def GrocTimeSpecification(schedule, timezone=None):
def _GetTimezone(timezone_string):
def _ToTimeZone(t, tzinfo):
def _GetTime(time_string):
def CreateParser(parse_string):
def _is_fetching_self(url, method):
def create_rpc(deadline=None, callback=None):
def fetch(url, payload=None, method=GET, headers={}, allow_truncated=False, follow_redirects=True, deadline=None, validate_certificate=None):
def make_fetch_call(rpc, url, payload=None, method=GET, headers={}, allow_truncated=False, follow_redirects=True, validate_certificate=None):
def _get_fetch_result(rpc):
def get_default_fetch_deadline():
def set_default_fetch_deadline(value):
def LoadSingleClientDeployInfo(client_deploy_info):
def _parse_relative_url(relative_url):
def _flatten_params(params):
def _MakeAsyncCall(method, request, response, get_result_hook=None, rpc=None):
def _TranslateError(error, detail=''):
def create_rpc(deadline=None, callback=None):
def add(*args, **kwargs):
def _is_pair(obj):
def _add_name_space(message, namespace=None):
def _key_string(key, key_prefix='', server_to_user_dict=None):
def _validate_encode_value(value, do_pickle):
def _decode_value(stored_value, flags, do_unpickle):
def create_rpc(deadline=None, callback=None):
def setup_client(client_obj):
def _to_app_identity_error(error):
def create_rpc(deadline=None, callback=None):
def make_sign_blob_call(rpc, bytes_to_sign):
def make_get_public_certificates_call(rpc):
def make_get_service_account_name_call(rpc):
def make_get_default_gcs_bucket_name_call(rpc):
def sign_blob(bytes_to_sign, deadline=None):
def get_public_certificates(deadline=None):
def get_service_account_name(deadline=None):
def get_default_gcs_bucket_name(deadline=None):
def _ParseFullAppId(app_id):
def get_application_id():
def get_default_version_hostname():
def make_get_access_token_call(rpc, scopes, service_account_id=None):
def get_access_token_uncached(scopes, deadline=None, service_account_id=None):
def get_access_token(scopes, service_account_id=None):
def shuffle(job_name, input_file_list, output_file_list, callback):
def available():
def _raise_app_error(e):
def _create_rpc(deadline):
def _make_call(method, request, response, deadline=30):
def open(filename, mode='r', content_type=RAW, exclusive_lock=False, buffering=0):
def listdir(path, **kwargs):
def finalize(filename, content_type=RAW):
def stat(filename):
def _create(filesystem, content_type=RAW, filename=None, params=None):
def __checkIsFinalizedName(filename):
def delete(*filenames):
def _get_capabilities():
def _default_gs_bucket_name():
def parseGlob(filename):
def listdir(path, kwargs=None):
def _listdir_local(path, kwargs):
def create(filename, mime_type='application/octet-stream', acl=None, cache_control=None, content_encoding=None, content_disposition=None, user_metadata=None):
def default_bucket_name():
def create(mime_type='application/octet-stream', _blobinfo_uploaded_filename=None):
def _get_blob_file_index_key_name(creation_handle):
def get_blob_key(create_file_name):
def get_file_name(blob_key):
def CreateRPC(service, stubmap=None):
def MakeSyncCall(service, call, request, response, stubmap=None):
def AsValidator(validator):
def _SimplifiedValue(validator, value):
def get_presence(jid, from_jid=None, get_show=False):
def send_invite(jid, from_jid=None):
def send_message(jids, body, from_jid=None, message_type=MESSAGE_TYPE_CHAT, raw_xml=False):
def send_presence(jid, status=None, from_jid=None, presence_type=PRESENCE_TYPE_AVAILABLE, presence_show=PRESENCE_SHOW_NONE):
def _to_str(value):
def typename(obj):
def ValidateString(value, name='unused', exception=datastore_errors.BadValueError, max_len=_MAX_STRING_LENGTH, empty_ok=False):
def ValidateInteger(value, name='unused', exception=datastore_errors.BadValueError, empty_ok=False, zero_ok=False, negative_ok=False):
def ResolveAppId(app):
def ResolveNamespace(namespace):
def EncodeAppIdNamespace(app_id, namespace):
def DecodeAppIdNamespace(app_namespace_str):
def SetNamespace(proto, namespace):
def PartitionString(value, separator):
def _When(val):
def ValidatePropertyInteger(name, value):
def ValidateStringLength(name, value, max_len):
def ValidatePropertyString(name, value):
def ValidatePropertyLink(name, value):
def ValidatePropertyNothing(name, value):
def ValidatePropertyKey(name, value):
def ValidateProperty(name, values, read_only=False):
def PackBlob(name, value, pbvalue):
def PackString(name, value, pbvalue):
def PackDatetime(name, value, pbvalue):
def DatetimeToTimestamp(value):
def PackGeoPt(name, value, pbvalue):
def PackUser(name, value, pbvalue):
def PackKey(name, value, pbvalue):
def PackBool(name, value, pbvalue):
def PackInteger(name, value, pbvalue):
def PackFloat(name, value, pbvalue):
def ToPropertyPb(name, values):
def FromReferenceProperty(value):
def FromPropertyPb(pb):
def RestoreFromIndexValue(index_value, data_type):
def PropertyTypeName(value):
def FromPropertyTypeName(type_name):
def PropertyValueFromString(type_, value_string, _auth_domain=None):
def ReferenceToKeyValue(key, id_resolver=None):
def PropertyValueToKeyValue(prop_value):
def GetPropertyValueTag(value_pb):
def get_current_module_name():
def get_current_version_name():
def get_current_instance_id():
def get_modules():
def get_versions(module=None):
def get_default_version(module=None):
def get_num_instances(module=None, version=None):
def set_num_instances(instances, module=None, version=None):
def set_num_instances_async(instances, module=None, version=None):
def start_version(module, version):
def start_version_async(module, version):
def stop_version(module=None, version=None):
def stop_version_async(module=None, version=None):
def get_hostname(module=None, version=None, instance=None):
def set_namespace(namespace):
def get_namespace():
def enable_request_namespace():
def validate_namespace(value, exception=BadValueError):
def LoadSingleDos(dos_info, open_fn=None):
def _ConvertToUnicode(some_string):
def _ConcatenateErrorMessages(prefix, status):
def _ToSearchError(error):
def _CheckInteger(value, name, zero_ok=True, upper_bound=None):
def _CheckEnum(value, name, values=None):
def _IsFinite(value):
def _CheckNumber(value, name, should_be_finite=False):
def _CheckStatus(status):
def _ValidateString(value, name='unused', max_len=_MAXIMUM_STRING_LENGTH, empty_ok=False, type_exception=TypeError, value_exception=ValueError):
def _ValidateVisiblePrintableAsciiNotReserved(value, name):
def _CheckIndexName(index_name):
def _CheckFacetName(name):
def _CheckFieldName(name):
def _CheckExpression(expression):
def _CheckFieldNames(names):
def _GetList(a_list):
def _ConvertToList(arg):
def _CheckType(obj, obj_type, obj_name):
def _ConvertToListAndCheckType(arg, element_type, arg_name):
def _ConvertToUnicodeList(arg):
def _CheckDocumentId(doc_id):
def _CheckText(value, name='value', empty_ok=True):
def _CheckHtml(html):
def _CheckAtom(atom):
def _CheckPrefix(prefix):
def _CheckDate(date):
def _CheckLanguage(language):
def _CheckDocument(document):
def _CheckSortLimit(limit):
def _Repr(class_instance, ordered_dictionary):
def _ListIndexesResponsePbToGetResponse(response, include_schema):
@datastore_rpc._positional(7) DCNL def get_indexes(namespace='', offset=None, limit=20, start_index_name=None, include_start_index=True, index_name_prefix=None, fetch_schema=False, deadline=None, **kwargs):
@datastore_rpc._positional(7) DCNL def get_indexes_async(namespace='', offset=None, limit=20, start_index_name=None, include_start_index=True, index_name_prefix=None, fetch_schema=False, deadline=None, **kwargs):
def _NewFacetFromPb(pb):
def _NewFacetsFromPb(facet_list):
def _CopyFieldToProtocolBuffer(field, pb):
def _CheckGeoPoint(geo_point):
def _GetValue(value_pb):
def _DecodeUTF8(pb_value):
def _DecodeValue(pb_value, val_type):
def _NewFieldFromPb(pb):
def _CopyDocumentToProtocolBuffer(document, pb):
def _NewFieldsFromPb(field_list):
def _NewDocumentFromPb(doc_pb):
def _CopyFieldExpressionToProtocolBuffer(field_expression, pb):
def _CopySortExpressionToProtocolBuffer(sort_expression, pb):
def _CopyMatchScorerToScorerSpecProtocolBuffer(match_scorer, limit, pb):
def _CopySortOptionsToProtocolBuffer(sort_options, params):
def _ToWebSafeString(per_result, internal_cursor):
def _CheckQuery(query):
def _CheckLimit(limit):
def _CheckFacetDepth(depth):
def _CheckFacetDiscoveryLimit(facet_limit):
def _CheckFacetValueLimit(value_limit):
def _CheckOffset(offset):
def _CheckNumberFoundAccuracy(number_found_accuracy):
def _CheckCursor(cursor):
def _CheckNumberOfFields(returned_expressions, snippeted_fields, returned_fields):
def _CopyQueryOptionsObjectToProtocolBuffer(query, options, params):
def _CopyQueryOptionsToProtocolBuffer(query, offset, limit, number_found_accuracy, cursor, cursor_type, ids_only, returned_fields, snippeted_fields, returned_expressions, sort_options, params):
def _CopyQueryToProtocolBuffer(query, params):
def _CopyQueryObjectToProtocolBuffer(query, params):
def _CopyMetadataToProtocolBuffer(index, spec_pb):
def _NewSchemaFromPb(field_type_pb_list):
def _NewIndexFromIndexSpecPb(index_spec_pb):
def _NewIndexFromPb(index_metadata_pb, include_schema):
def _MakeSyncSearchServiceCall(call, request, response, deadline):
def CreateParser(query):
def ParseAndSimplify(query):
def Parse(query):
def ConvertNodes(node, from_type, to_type, to_text):
def _ColonToEquals(node):
def SequenceToConjunction(node):
def Simplify(parser_return):
def GetQueryNodeText(node):
def GetQueryNodeTextUnicode(node):
def RemoveSurroundingQuotes(text):
def GetPhraseQueryNodeText(node):
def IsPhrase(node):
def CreateParser(expression):
def Parse(expression):
def GetFieldInDocument(document, field_name, return_type=None):
def GetAllFieldInDocument(document, field_name):
def AddFieldsToDocumentPb(doc_id, fields, document):
def EpochTime(date):
def Repr(class_instance, ordered_dictionary):
def TreeRepr(tree, depth=0):
def BuildObjects(default_class, stream, loader=yaml.loader.SafeLoader):
def BuildSingleObject(default_class, stream, loader=yaml.loader.SafeLoader):
def logs_buffer():
def write(message):
def write_record(level, created, message, source_location=None):
def clear():
def autoflush():
def flush():
def flush_time():
def log_buffer_age():
def log_buffer_contents():
def log_buffer_bytes():
def log_buffer_lines():
def source_location_to_tuple(locpb):
@datastore_rpc._positional(0) DCNL def fetch(start_time=None, end_time=None, offset=None, minimum_log_level=None, include_incomplete=False, include_app_logs=False, module_versions=None, version_ids=None, request_ids=None, **kwargs):
def RequestID():
def _StrictParseLogEntry(entry, clean_message=True):
def ParseLogEntry(entry):
def ParseLogs(logs):
def RecordFromLine(line):
def _ValidateMatch(regex, value, message):
def _ValidateNotIpV4Address(host):
def LoadSingleDispatch(dispatch_info, open_fn=None):
def _ToChannelError(error):
def _GetService():
def _ValidateClientId(client_id):
def create_channel(client_id, duration_minutes=None):
def send_message(client_id, message):
def register(prefix, mapping):
def main():
def LoadBackendEntry(backend_entry):
def LoadBackendInfo(backend_info, open_fn=None):
def LoadSingleQueue(queue_info, open_fn=None):
def ParseRate(rate):
def ParseTotalStorageLimit(limit):
def ParseTaskAgeLimit(age_limit):
def TranslateRetryParameters(retry):
def _ToImagesError(error, blob_key=None):
def create_rpc(deadline=None, callback=None):
def resize(image_data, width=0, height=0, output_encoding=PNG, quality=None, correct_orientation=UNCHANGED_ORIENTATION, crop_to_fit=False, crop_offset_x=0.5, crop_offset_y=0.5, allow_stretch=False, rpc=None, transparent_substitution_rgb=None):
def resize_async(image_data, width=0, height=0, output_encoding=PNG, quality=None, correct_orientation=UNCHANGED_ORIENTATION, crop_to_fit=False, crop_offset_x=0.5, crop_offset_y=0.5, allow_stretch=False, rpc=None, transparent_substitution_rgb=None):
def rotate(image_data, degrees, output_encoding=PNG, quality=None, correct_orientation=UNCHANGED_ORIENTATION, rpc=None, transparent_substitution_rgb=None):
def rotate_async(image_data, degrees, output_encoding=PNG, quality=None, correct_orientation=UNCHANGED_ORIENTATION, rpc=None, transparent_substitution_rgb=None):
def horizontal_flip(image_data, output_encoding=PNG, quality=None, correct_orientation=UNCHANGED_ORIENTATION, rpc=None, transparent_substitution_rgb=None):
def horizontal_flip_async(image_data, output_encoding=PNG, quality=None, correct_orientation=UNCHANGED_ORIENTATION, rpc=None, transparent_substitution_rgb=None):
def vertical_flip(image_data, output_encoding=PNG, quality=None, correct_orientation=UNCHANGED_ORIENTATION, rpc=None, transparent_substitution_rgb=None):
def vertical_flip_async(image_data, output_encoding=PNG, quality=None, correct_orientation=UNCHANGED_ORIENTATION, rpc=None, transparent_substitution_rgb=None):
def crop(image_data, left_x, top_y, right_x, bottom_y, output_encoding=PNG, quality=None, correct_orientation=UNCHANGED_ORIENTATION, rpc=None, transparent_substitution_rgb=None):
def crop_async(image_data, left_x, top_y, right_x, bottom_y, output_encoding=PNG, quality=None, correct_orientation=UNCHANGED_ORIENTATION, rpc=None, transparent_substitution_rgb=None):
def im_feeling_lucky(image_data, output_encoding=PNG, quality=None, correct_orientation=UNCHANGED_ORIENTATION, rpc=None, transparent_substitution_rgb=None):
def im_feeling_lucky_async(image_data, output_encoding=PNG, quality=None, correct_orientation=UNCHANGED_ORIENTATION, rpc=None, transparent_substitution_rgb=None):
def composite(inputs, width, height, color=0, output_encoding=PNG, quality=None, rpc=None):
def composite_async(inputs, width, height, color=0, output_encoding=PNG, quality=None, rpc=None):
def histogram(image_data, rpc=None):
def histogram_async(image_data, rpc=None):
def get_serving_url(blob_key, size=None, crop=False, secure_url=None, filename=None, rpc=None):
def get_serving_url_async(blob_key, size=None, crop=False, secure_url=None, filename=None, rpc=None):
def delete_serving_url(blob_key, rpc=None):
def delete_serving_url_async(blob_key, rpc=None):
def _extract_blob_key(blob):
def GetAllRuntimes():
def ValidateSourceReference(ref):
def ValidateCombinedSourceReferencesString(source_refs):
def ValidateHandlers(handlers, is_include_file=False):
def LoadSingleAppInfo(app_info):
def LoadAppInclude(app_include):
def ParseExpiration(expiration):
def ValidFilename(filename):
def Parse(appinfo_file, open_fn=open):
def ParseAndReturnIncludePaths(appinfo_file, open_fn=open):
def _MergeBuiltinsIncludes(appinfo_path, appyaml, open_fn=open):
def _ResolveIncludes(included_from, app_include, basepath, runtime, state=None, open_fn=open):
def _ConvertBuiltinsToIncludes(included_from, app_include, state, runtime):
def _ResolvePath(included_from, included_path, basepath):
def _IsFileOrDirWithFile(path):
def LoadSingleCron(cron_info, open_fn=None):
def _GetSchemaEntryForPropertyType(property_type):
def _GetModelTypeForListPropertyType(property_type):
def _GetModelTypeForEntityType(python_type):
def _make_sync_call(service, call, request, response):
def _add_schema_entry(model_type, name, add_entry):
def _entity_schema_to_prospective_search_schema(schema, add_entry):
def _model_to_prospective_search_schema(model, add_entry):
def subscribe(document_class, query, sub_id, schema=None, topic=None, lease_duration_sec=DEFAULT_LEASE_DURATION_SEC):
def unsubscribe(document_class, sub_id, topic=None):
def get_subscription(document_class, sub_id, topic=None):
def list_subscriptions(document_class, sub_id_start='', topic=None, max_results=DEFAULT_LIST_SUBSCRIPTIONS_MAX_RESULTS, expires_before=None):
def list_topics(max_results=DEFAULT_LIST_TOPICS_MAX_RESULTS, topic_start=None):
def match(document, topic=None, result_key=None, result_relative_url='/_ah/prospective_search', result_task_queue='default', result_batch_size=DEFAULT_RESULT_BATCH_SIZE, result_return_document=True):
def get_document(request):
def list_subscriptions(topic, max_results, app_id=None, sub_id_start=None, expires_before=None):
def list_topics(max_results, app_id=None, topic_start=None):
def _ToBlobstoreError(error):
def _format_creation(stamp):
def _parse_creation(creation_string, field_name):
def create_rpc(deadline=None, callback=None):
def create_upload_url(success_path, max_bytes_per_blob=None, max_bytes_total=None, rpc=None, gs_bucket_name=None):
def create_upload_url_async(success_path, max_bytes_per_blob=None, max_bytes_total=None, rpc=None, gs_bucket_name=None):
def delete(blob_keys, rpc=None, _token=None):
def delete_async(blob_keys, rpc=None, _token=None):
def fetch_data(blob_key, start_index, end_index, rpc=None):
def fetch_data_async(blob_key, start_index, end_index, rpc=None):
def create_gs_key(filename, rpc=None):
def create_gs_key_async(filename, rpc=None):
def NormalizeAndTypeCheck(arg, types):
def NormalizeAndTypeCheckKeys(keys):
def _GetConfigFromKwargs(kwargs, convert_rpc=False, config_class=datastore_rpc.Configuration):
def __InitConnection():
def _GetConnection():
def _SetConnection(connection):
def _PushConnection(new_connection):
def _PopConnection():
def _MakeSyncCall(service, call, request, response, config=None):
def CreateRPC(service='datastore_v3', deadline=None, callback=None, read_policy=None):
def CreateConfig(**kwds):
def CreateTransactionOptions(**kwds):
def PutAsync(entities, **kwargs):
def Put(entities, **kwargs):
def GetAsync(keys, **kwargs):
def Get(keys, **kwargs):
def GetIndexesAsync(**kwargs):
def GetIndexes(**kwargs):
def DeleteAsync(keys, **kwargs):
def Delete(keys, **kwargs):
def AllocateIdsAsync(model_key, size=None, **kwargs):
def AllocateIds(model_key, size=None, **kwargs):
def RunInTransaction(function, *args, **kwargs):
def RunInTransactionCustomRetries(retries, function, *args, **kwargs):
def RunInTransactionOptions(options, function, *args, **kwargs):
def _DoOneTry(function, args, kwargs):
def _MaybeSetupTransaction(request, keys):
def IsInTransaction():
def Transactional(_func=None, **kwargs):
@datastore_rpc._positional(1) DCNL def NonTransactional(_func=None, allow_existing=True):
def _GetCompleteKeyOrError(arg):
def _GetPropertyValue(entity, property):
def _AddOrAppend(dictionary, key, value):
def LoadPagespeedEntry(pagespeed_entry, open_fn=None):
def create_login_url(dest_url=None, _auth_domain=None, federated_identity=None):
def create_logout_url(dest_url, _auth_domain=None):
def is_current_user_admin():
def reset_builtins_dir():
def set_builtins_dir(path):
def _initialize_builtins():
def _get_yaml_path(builtin_name, runtime):
def get_yaml_path(builtin_name, runtime=''):
def get_yaml_basepath():
def GetUserAgent():
def HashEntity(entity):
def GetRemoteAppIdFromServer(server, path, remote_token=None):
def ConfigureRemoteApiFromServer(server, path, app_id, services=None, default_auth_domain=None, use_remote_datastore=True):
def GetRemoteAppId(servername, path, auth_func, rpc_server_factory=appengine_rpc.HttpRpcServer, rtok=None, secure=False, save_cookies=False):
def ConfigureRemoteApiForOAuth(servername, path, secure=True, service_account=None, key_file_path=None, oauth2_parameters=None, save_cookies=False, auth_tries=3, rpc_server_factory=None, app_id=None):
def ConfigureRemoteApi(app_id, path, auth_func, servername=None, rpc_server_factory=appengine_rpc.HttpRpcServer, rtok=None, secure=False, services=None, default_auth_domain=None, save_cookies=False, auth_tries=3, use_remote_datastore=True):
def MaybeInvokeAuthentication():
def InterruptibleSleep(sleep_time):
def DefaultThrottle(multiplier=1.0):
def ThrottleRemoteDatastore(throttle, remote_datastore_stub=None):
def class_for_kind(kind):
def check_reserved_word(attr_name):
def query_descendants(model_instance):
def model_to_protobuf(model_instance, _entity_class=datastore.Entity):
def model_from_protobuf(pb, _entity_class=datastore.Entity):
def model_is_projection(model_instance):
def _initialize_properties(model_class, name, bases, dct):
def _coerce_to_key(value):
def create_rpc(deadline=None, callback=None, read_policy=STRONG_CONSISTENCY):
def get_async(keys, **kwargs):
def get(keys, **kwargs):
def put_async(models, **kwargs):
def put(models, **kwargs):
def delete_async(models, **kwargs):
def delete(models, **kwargs):
def allocate_ids_async(model, size, **kwargs):
def allocate_ids(model, size, **kwargs):
def allocate_id_range(model, start, end, **kwargs):
def get_indexes_async(**kwargs):
def get_indexes(**kwargs):
def _normalize_query_parameter(value):
def _date_to_datetime(value):
def _time_to_datetime(value):
def SelfReferenceProperty(verbose_name=None, collection_name=None, **attrs):
def to_dict(model_instance, dictionary=None):
def Execute(query_string, *args, **keyword_args):
def load_config(stream, config_globals):
def create_from_options(options, name='unknown'):
def utf8_recoder(stream, encoding):
def Validate(value, type):
def main(*loaders):
def default_export_transform(value):
def create_transformer_classes(transformer_spec, config_globals, reserve_keys):
def load_config_from_stream(stream, reserve_keys=None):
def load_config(filename, update_path=True, reserve_keys=None):
def positional(max_pos_args):
def decorator(wrapped_decorator):
def _args_to_val(func, args):
def _get_prop_from_modelclass(modelclass, name):
def gql(query_string, *args, **kwds):
@utils.positional(1) DCNL def _gql(query_string, query_class=Query):
@utils.positional(1) DCNL def _ConstructReference(cls, pairs=None, flat=None, reference=None, serialized=None, urlsafe=None, app=None, namespace=None, parent=None):
def _ReferenceFromPairs(pairs, reference=None, app=None, namespace=None):
def _ReferenceFromReference(reference):
def _ReferenceFromSerialized(serialized):
def _DecodeUrlSafe(urlsafe):
def _DefaultAppId():
def _DefaultNamespace():
def make_connection(config=None, default_model=None, _api_version=datastore_rpc._DATASTORE_V3, _id_resolver=None):
def _unpack_user(v):
def _date_to_datetime(value):
def _time_to_datetime(value):
@utils.positional(1) DCNL def transaction(callback, **ctx_options):
@utils.positional(1) DCNL def transaction_async(callback, **ctx_options):
def in_transaction():
@utils.decorator DCNL def transactional(func, args, kwds, **options):
@utils.decorator DCNL def transactional_async(func, args, kwds, **options):
@utils.decorator DCNL def transactional_tasklet(func, args, kwds, **options):
@utils.decorator DCNL def non_transactional(func, args, kwds, allow_existing=True):
def get_multi_async(keys, **ctx_options):
def get_multi(keys, **ctx_options):
def put_multi_async(entities, **ctx_options):
def put_multi(entities, **ctx_options):
def delete_multi_async(keys, **ctx_options):
def delete_multi(keys, **ctx_options):
def get_indexes_async(**ctx_options):
def get_indexes(**ctx_options):
def get_event_loop():
def _make_ctx_options(ctx_options, config_cls=ContextOptions):
def _is_generator(obj):
def add_flow_exception(exc):
def _init_flow_exceptions():
def sleep(dt):
def _transfer_result(fut1, fut2):
def synctasklet(func):
def toplevel(func):
def _make_cloud_datastore_context(app_id, external_app_ids=()):
def __django_version_setup():
def _django_setup():
def _reverse_url_pattern(url_pattern, *args):
def get(blob_key):
def _get_upload_content(field_storage):
def _parse_upload_info(field_storage, error_class):
def parse_blob_info(field_storage):
def parse_file_info(field_storage):
def fetch_data(blob, start_index, end_index, rpc=None):
def fetch_data_async(blob, start_index, end_index, rpc=None):
def IsEnabled(feature_name, default=False):
def CreateRPC():
def MakeSyncCall(package, call, request, response):
def CancelApiCalls():
def GetRequestCpuUsage():
def GetRequestApiCpuUsage():
def v4_key_to_string(v4_key):
def is_complete_v4_key(v4_key):
def v1_key_to_string(v1_key):
def is_complete_v1_key(v1_key):
def is_complete_v3_key(v3_key):
def get_v1_mutation_key_and_entity(v1_mutation):
def check_conversion(condition, message):
def get_entity_converter(id_resolver=None):
def IndexesXmlToIndexDefinitions(xml_str):
def IsAutoGenerated(xml_str):
def _BooleanAttribute(value):
def make_filter(name, op, values):
def _make_key_value_map(entity, property_names):
def apply_query(query, entities, _key=None):
@datastore_rpc._positional(1) DCNL def inject_results(query, updated_entities=None, deleted_keys=None):
def _positional(max_pos_args):
def _GetDatastoreType(app=None):
def _ToDatastoreError(err):
def _DatastoreExceptionFromErrorCodeAndDetail(error, detail):
def _DatastoreExceptionFromCanonicalErrorCodeAndDetail(error, detail):
def _PropertyPresenter(dumper, prop):
def ParseIndexDefinitions(document, open_fn=None):
def ParseMultipleIndexDefinitions(document):
def IndexDefinitionsToKeys(indexes):
def IndexToKey(index):
def Normalize(filters, orders, exists):
def RemoveNativelySupportedComponents(filters, orders, exists):
def CompositeIndexForQuery(query):
def GetRecommendedIndexProperties(properties):
def _MatchPostfix(postfix_props, index_props):
def MinimalCompositeIndexForQuery(query, index_defs):
def IndexYamlForQuery(kind, ancestor, props):
def IndexXmlForQuery(kind, ancestor, props):
def IndexDefinitionToProto(app_id, index_definition):
def IndexDefinitionsToProtos(app_id, index_definitions):
def ProtoToIndexDefinition(proto):
def ProtosToIndexDefinitions(protos):
def HTTPResponse__getheaders(self):
def parse_uri(uri):
def safename(filename):
def _parse_www_authenticate(headers, headername='www-authenticate'):
def _entry_disposition(response_headers, request_headers):
def iri2uri(uri):
def setdefaultproxy(proxytype=None, addr=None, port=None, rdns=True, username=None, password=None):
def wrapmodule(module):
@util.positional(2) DCNL def run(flow, storage, http=None):
def positional(max_positional_args):
def scopes_to_string(scopes):
def dict_to_tuple_key(dictionary):
def _add_query_parameter(url, name, value):
def clean_headers(headers):
def _update_query_params(uri, params):
def _detect_gce_environment(urlopen=None):
def _in_gae_environment():
def _in_gce_environment(urlopen=None):
def _save_private_file(filename, json_contents):
def save_to_well_known_file(credentials, well_known_file=None):
def _get_well_known_file():
def _get_application_default_credential_from_file(filename):
def _RequireCryptoOrDie():
@util.positional(2) DCNL def verify_id_token(id_token, audience, http=None, cert_uri=ID_TOKEN_VERIFICATION_CERTS):
def _extract_id_token(id_token):
def _parse_exchange_token_response(content):
@util.positional(4) DCNL def credentials_from_code(client_id, client_secret, scope, code, redirect_uri='postmessage', http=None, user_agent=None, token_uri=GOOGLE_TOKEN_URI, auth_uri=GOOGLE_AUTH_URI, revoke_uri=GOOGLE_REVOKE_URI, device_uri=GOOGLE_DEVICE_URI):
@util.positional(3) DCNL def credentials_from_clientsecrets_and_code(filename, scope, code, message=None, redirect_uri='postmessage', http=None, cache=None, device_uri=None):
@util.positional(2) DCNL def flow_from_clientsecrets(filename, scope, redirect_uri=None, message=None, cache=None, login_hint=None, device_uri=None):
def _SendRecv():
def loadfile(filename, cache=None):
@util.positional(3) DCNL def run_flow(flow, storage, flags, http=None):
def message_if_missing(filename):
def _TryOpenSslImport():
def _parse_pem_key(raw_key_input):
def make_signed_jwt(signer, payload):
def verify_signed_jwt_with_certs(jwt, certs, audience):
def IPAddress(address, version=None):
def IPNetwork(address, version=None, strict=False):
def v4_int_to_packed(address):
def v6_int_to_packed(address):
def _find_address_range(addresses):
def _get_prefix_length(number1, number2, bits):
def _count_righthand_zero_bits(number, bits):
def summarize_address_range(first, last):
def _collapse_address_list_recursive(addresses):
def collapse_address_list(addresses):
def get_mixed_type_key(obj):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def python_2_unicode_compatible(klass):
def xor(input, key):
def setDecoderPath(decoder_path):
def getDecoders(decoder_paths):
def printDecoders(decoder_map, silent=True):
def readInFilter(fname):
def expandCompressedFile(fname, verbose, tmpdir):
def printDecoderBriefs(decoders):
def initDecoderOptions(decoder, out, options, decoder_args, decoder_options):
def main():
def modulePath():
def registerPocFromDict():
def _setHTTPUserAgent():
def _setHTTPCookies():
def _setHTTPReferer():
def _setHTTPProxy():
def _setHTTPTimeout():
def getRevisionNumber():
def banner():
def dataToStdout(data, bold=False):
def unhandledExceptionMessage():
def changeToPyImportType(path):
def getUnicode(value, encoding=None, noneToNull=False):
def isListLike(value):
def setPaths():
def getFileItems(filename, commentPrefix='#', unicode_=True, lowercase=False, unique=False):
def checkFile(filename):
def choosePocType(filepath):
def safeExpandUser(filepath):
def parseTargetUrl(url):
def normalizePath(filepath):
def isWindowsDriveLetterPath(filepath):
def normalizeUnicode(value):
def getPublicTypeMembers(type_, onlyValues=False):
def poll_process(process, suppress_errors=False):
def handler(signum, frame):
def parseCmdOptions():
def pocThreads():
def _createTargetDirs():
def setPoc():
def url2ip(url):
def writeText(fileName, content, encoding='utf8'):
def loadText(fileName, encoding='utf8'):
def writeBinary(fileName, content, encoding='utf8'):
def recv(event, src, dst, srcp, dstp, buff, timeout):
def rand_base(length, bad, chars):
def rand_char(bad='', chars=allchars):
def rand_text(length, bad='', chars=allchars):
def rand_text_alpha(length, bad=''):
def rand_text_alpha_lower(length, bad=''):
def rand_text_alpha_upper(length, bad=''):
def rand_text_alphanumeric(length, bad=''):
def rand_text_numeric(length, bad=''):
def rand_item_from_iters(iter):
def dict_to_sequence(d):
def get_netrc_auth(url):
def guess_filename(obj):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def unquote_unreserved(uri):
def requote_uri(uri):
def address_in_network(ip, net):
def dotted_netmask(mask):
def is_valid_cidr(string_network):
def should_bypass_proxies(url):
def get_environ_proxies(url):
def default_user_agent(name='python-requests'):
def parse_header_links(value):
def prepend_scheme_if_needed(url, new_scheme):
def get_auth_from_url(url):
def to_native_string(string, encoding='ascii'):
def urldefragauth(url):
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):
def merge_cookies(cookiejar, cookies):
def description_of(lines, name=u'stdin'):
def main(argv=None):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d):
def itervalues(d):
def iteritems(d):
def with_metaclass(meta, base=object):
def _dnsname_match(dn, hostname, max_wildcards=1):
def match_hostname(cert, hostname):
def add_stderr_logger(level=logging.DEBUG):
def disable_warnings(category=exceptions.HTTPWarning):
def guess_content_type(filename, default='application/octet-stream'):
def format_header_param(name, value):
def choose_boundary():
def iter_field_objects(fields):
def iter_fields(fields):
def encode_multipart_formdata(fields, boundary=None):
def is_fp_closed(obj):
def current_time():
def assert_fingerprint(cert, fingerprint):
def resolve_cert_reqs(candidate):
def resolve_ssl_version(candidate):
def create_urllib3_context(ssl_version=None, cert_reqs=None, options=None, ciphers=None):
def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None, ca_certs=None, server_hostname=None, ssl_version=None, ciphers=None, ssl_context=None):
def is_connection_dropped(conn):
def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT, source_address=None, socket_options=None):
def split_first(s, delims):
def parse_url(url):
def get_host(url):
def make_headers(keep_alive=None, accept_encoding=None, user_agent=None, basic_auth=None, proxy_basic_auth=None, disable_cache=None):
def connection_from_url(url, **kw):
def inject_into_urllib3():
def extract_from_urllib3():
def _basic_auth_str(username, password):
def dispatch_hook(key, hooks, hook_data, **kwargs):
def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):
def session():
def request(method, url, **kwargs):
def get(url, params=None, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, json=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):
def from_html(html_code, **kwargs):
def from_html_one(html_code, **kwargs):
def set_default_proxy(proxy_type=None, addr=None, port=None, rdns=True, username=None, password=None):
def get_default_proxy():
def wrap_module(module):
def create_connection(dest_pair, proxy_type=None, proxy_addr=None, proxy_port=None, proxy_rdns=True, proxy_username=None, proxy_password=None, timeout=None, source_address=None):
def colored(text, color=None, on_color=None, attrs=None):
def cprint(text, color=None, on_color=None, attrs=None, **kwargs):
def abstractmethod(funcobj):
def _xml_escape(data):
def col(loc, strg):
def lineno(loc, strg):
def line(loc, strg):
def nullDebugAction(*args):
def traceParseAction(f):
def delimitedList(expr, delim=',', combine=False):
def countedArray(expr, intExpr=None):
def matchPreviousLiteral(expr):
def matchPreviousExpr(expr):
def oneOf(strs, caseless=False, useRegex=True):
def dictOf(key, value):
def originalTextFor(expr, asString=True):
def ungroup(expr):
def locatedExpr(expr):
def srange(s):
def matchOnlyAtCol(n):
def replaceWith(replStr):
def removeQuotes(s, l, t):
def upcaseTokens(s, l, t):
def downcaseTokens(s, l, t):
def keepOriginalText(s, startLoc, t):
def getTokensEndLoc():
def _makeTags(tagStr, xml):
def makeHTMLTags(tagStr):
def makeXMLTags(tagStr):
def withAttribute(*args, **attrDict):
def infixNotation(baseExpr, opList, lpar=Suppress('('), rpar=Suppress(')')):
def nestedExpr(opener='(', closer=')', content=None, ignoreExpr=quotedString.copy()):
def indentedBlock(blockStatementExpr, indentStack, indent=True):
def main(argv=None):
def unused():
def human_time(seconds):
def limit_unit(timestr, num=2):
def interpret_size(si):
def human_size(num, precision=3):
@click.command() DCNL @click.option('--pool', default=10, help='cocurrent DCSP worker DCSP size.') DCNL @click.argument('from_connection', required=1) DCNL @click.argument('to_connection', required=1) DCNL def migrate(pool, from_connection, to_connection):
def connect_message_queue(name, url=None, maxsize=0, lazy_limit=True):
def catch_error(func):
def encode(data, mime_type='', charset='utf-8', base64=True):
def decode(data_url):
def getitem(obj, key=0, default=None):
def hide_me(tb, g=globals()):
def run_in_thread(func, *args, **kwargs):
def run_in_subprocess(func, *args, **kwargs):
def format_date(date, gmt_offset=0, relative=True, shorter=False, full_format=False):
def utf8(string):
def text(string, encoding='utf8'):
def pretty_unicode(string):
def unicode_string(string):
def unicode_dict(_dict):
def unicode_list(_list):
def unicode_obj(obj):
def decode_unicode_string(string):
def decode_unicode_obj(obj):
def load_object(name):
def get_python_console(namespace=None):
def python_console(namespace=None):
def get_encoding(headers, content):
def pprint(object, stream=None, indent=1, width=80, depth=None):
def pformat(object, indent=1, width=80, depth=None):
def saferepr(object):
def isreadable(object):
def isrecursive(object):
def catch_status_code_error(func):
def not_send_status(func):
def config(_config=None, **kwargs):
def every(minutes=NOTSET, seconds=NOTSET):
def get_content_type(filename):
def _build_url(url, _params):
def quote_chinese(url, encodeing='utf-8'):
@click.group(invoke_without_command=True) DCNL @click.option('-c', '--config', callback=read_config, type=click.File('r'), help='a DCSP json DCSP file DCSP with DCSP default DCSP values DCSP for DCSP subcommands. DCSP {"webui": DCSP {"port":5001}}') DCNL @click.option('--logging-config', default=os.path.join(os.path.dirname(__file__), 'logging.conf'), help='logging DCSP config DCSP file DCSP for DCSP built-in DCSP python DCSP logging DCSP module', show_default=True) DCNL @click.option('--debug', envvar='DEBUG', default=False, is_flag=True, help='debug DCSP mode') DCNL @click.option('--queue-maxsize', envvar='QUEUE_MAXSIZE', default=100, help='maxsize DCSP of DCSP queue') DCNL @click.option('--taskdb', envvar='TASKDB', callback=connect_db, help='database DCSP url DCSP for DCSP taskdb, DCSP default: DCSP sqlite') DCNL @click.option('--projectdb', envvar='PROJECTDB', callback=connect_db, help='database DCSP url DCSP for DCSP projectdb, DCSP default: DCSP sqlite') DCNL @click.option('--resultdb', envvar='RESULTDB', callback=connect_db, help='database DCSP url DCSP for DCSP resultdb, DCSP default: DCSP sqlite') DCNL @click.option('--message-queue', envvar='AMQP_URL', help='connection DCSP url DCSP to DCSP message DCSP queue, DCSP default: DCSP builtin DCSP multiprocessing.Queue') DCNL @click.option('--amqp-url', help='[deprecated] DCSP amqp DCSP url DCSP for DCSP rabbitmq. DCSP please DCSP use DCSP --message-queue DCSP instead.') DCNL @click.option('--beanstalk', envvar='BEANSTALK_HOST', help='[deprecated] DCSP beanstalk DCSP config DCSP for DCSP beanstalk DCSP queue. DCSP please DCSP use DCSP --message-queue DCSP instead.') DCNL @click.option('--phantomjs-proxy', envvar='PHANTOMJS_PROXY', help='phantomjs DCSP proxy DCSP ip:port') DCNL @click.option('--data-path', default='./data', help='data DCSP dir DCSP path') DCNL @click.option('--add-sys-path/--not-add-sys-path', default=True, is_flag=True, help='add DCSP current DCSP working DCSP directory DCSP to DCSP python DCSP lib DCSP search DCSP path') DCNL @click.version_option(version=pyspider.__version__, prog_name=pyspider.__name__) DCNL @click.pass_context DCNL def cli(ctx, **kwargs):
@cli.command() DCNL @click.option('--xmlrpc/--no-xmlrpc', default=True) DCNL @click.option('--xmlrpc-host', default='0.0.0.0') DCNL @click.option('--xmlrpc-port', envvar='SCHEDULER_XMLRPC_PORT', default=23333) DCNL @click.option('--inqueue-limit', default=0, help='size DCSP limit DCSP of DCSP task DCSP queue DCSP for DCSP each DCSP project, DCSP tasks DCSP will DCSP been DCSP ignored DCSP when DCSP overflow') DCNL @click.option('--delete-time', default=((24 * 60) * 60), help='delete DCSP time DCSP before DCSP marked DCSP as DCSP delete') DCNL @click.option('--active-tasks', default=100, help='active DCSP log DCSP size') DCNL @click.option('--loop-limit', default=1000, help='maximum DCSP number DCSP of DCSP tasks DCSP due DCSP with DCSP in DCSP a DCSP loop') DCNL @click.option('--fail-pause-num', default=10, help='auto DCSP pause DCSP the DCSP project DCSP when DCSP last DCSP FAIL_PAUSE_NUM DCSP task DCSP failed, DCSP set DCSP 0 DCSP to DCSP disable') DCNL @click.option('--scheduler-cls', default='pyspider.scheduler.ThreadBaseScheduler', callback=load_cls, help='scheduler DCSP class DCSP to DCSP be DCSP used.') DCNL @click.option('--threads', default=None, help='thread DCSP number DCSP for DCSP ThreadBaseScheduler, DCSP default: DCSP 4') DCNL @click.pass_context DCNL def scheduler(ctx, xmlrpc, xmlrpc_host, xmlrpc_port, inqueue_limit, delete_time, active_tasks, loop_limit, fail_pause_num, scheduler_cls, threads, get_object=False):
@cli.command() DCNL @click.option('--xmlrpc/--no-xmlrpc', default=False) DCNL @click.option('--xmlrpc-host', default='0.0.0.0') DCNL @click.option('--xmlrpc-port', envvar='FETCHER_XMLRPC_PORT', default=24444) DCNL @click.option('--poolsize', default=100, help='max DCSP simultaneous DCSP fetches') DCNL @click.option('--proxy', help='proxy DCSP host:port') DCNL @click.option('--user-agent', help='user DCSP agent') DCNL @click.option('--timeout', help='default DCSP fetch DCSP timeout') DCNL @click.option('--phantomjs-endpoint', help='endpoint DCSP of DCSP phantomjs, DCSP start DCSP via DCSP pyspider DCSP phantomjs') DCNL @click.option('--splash-endpoint', help='execute DCSP endpoint DCSP of DCSP splash: DCSP http://splash.readthedocs.io/en/stable/api.html#execute') DCNL @click.option('--fetcher-cls', default='pyspider.fetcher.Fetcher', callback=load_cls, help='Fetcher DCSP class DCSP to DCSP be DCSP used.') DCNL @click.pass_context DCNL def fetcher(ctx, xmlrpc, xmlrpc_host, xmlrpc_port, poolsize, proxy, user_agent, timeout, phantomjs_endpoint, splash_endpoint, fetcher_cls, async=True, get_object=False, no_input=False):
@cli.command() DCNL @click.option('--processor-cls', default='pyspider.processor.Processor', callback=load_cls, help='Processor DCSP class DCSP to DCSP be DCSP used.') DCNL @click.option('--process-time-limit', default=30, help='script DCSP process DCSP time DCSP limit') DCNL @click.pass_context DCNL def processor(ctx, processor_cls, process_time_limit, enable_stdout_capture=True, get_object=False):
@cli.command() DCNL @click.option('--result-cls', default='pyspider.result.ResultWorker', callback=load_cls, help='ResultWorker DCSP class DCSP to DCSP be DCSP used.') DCNL @click.pass_context DCNL def result_worker(ctx, result_cls, get_object=False):
@cli.command() DCNL @click.option('--host', default='0.0.0.0', envvar='WEBUI_HOST', help='webui DCSP bind DCSP to DCSP host') DCNL @click.option('--port', default=5000, envvar='WEBUI_PORT', help='webui DCSP bind DCSP to DCSP host') DCNL @click.option('--cdn', default='//cdnjs.cloudflare.com/ajax/libs/', help='js/css DCSP cdn DCSP server') DCNL @click.option('--scheduler-rpc', help='xmlrpc DCSP path DCSP of DCSP scheduler') DCNL @click.option('--fetcher-rpc', help='xmlrpc DCSP path DCSP of DCSP fetcher') DCNL @click.option('--max-rate', type=float, help='max DCSP rate DCSP for DCSP each DCSP project') DCNL @click.option('--max-burst', type=float, help='max DCSP burst DCSP for DCSP each DCSP project') DCNL @click.option('--username', envvar='WEBUI_USERNAME', help='username DCSP of DCSP lock DCSP -ed DCSP projects') DCNL @click.option('--password', envvar='WEBUI_PASSWORD', help='password DCSP of DCSP lock DCSP -ed DCSP projects') DCNL @click.option('--need-auth', is_flag=True, default=False, help='need DCSP username DCSP and DCSP password') DCNL @click.option('--webui-instance', default='pyspider.webui.app.app', callback=load_cls, help='webui DCSP Flask DCSP Application DCSP instance DCSP to DCSP be DCSP used.') DCNL @click.option('--process-time-limit', default=30, help='script DCSP process DCSP time DCSP limit DCSP in DCSP debug') DCNL @click.pass_context DCNL def webui(ctx, host, port, cdn, scheduler_rpc, fetcher_rpc, max_rate, max_burst, username, password, need_auth, webui_instance, process_time_limit, get_object=False):
@cli.command() DCNL @click.option('--phantomjs-path', default='phantomjs', help='phantomjs DCSP path') DCNL @click.option('--port', default=25555, help='phantomjs DCSP port') DCNL @click.option('--auto-restart', default=False, help='auto DCSP restart DCSP phantomjs DCSP if DCSP crashed') DCNL @click.argument('args', nargs=(-1)) DCNL @click.pass_context DCNL def phantomjs(ctx, phantomjs_path, port, auto_restart, args):
@cli.command() DCNL @click.option('--fetcher-num', default=1, help='instance DCSP num DCSP of DCSP fetcher') DCNL @click.option('--processor-num', default=1, help='instance DCSP num DCSP of DCSP processor') DCNL @click.option('--result-worker-num', default=1, help='instance DCSP num DCSP of DCSP result DCSP worker') DCNL @click.option('--run-in', default='subprocess', type=click.Choice(['subprocess', 'thread']), help='run DCSP each DCSP components DCSP in DCSP thread DCSP or DCSP subprocess. DCSP always DCSP using DCSP thread DCSP for DCSP windows.') DCNL @click.pass_context DCNL def all(ctx, fetcher_num, processor_num, result_worker_num, run_in):
@cli.command() DCNL @click.option('--fetcher-num', default=1, help='instance DCSP num DCSP of DCSP fetcher') DCNL @click.option('--processor-num', default=2, help='instance DCSP num DCSP of DCSP processor') DCNL @click.option('--result-worker-num', default=1, help='instance DCSP num DCSP of DCSP result DCSP worker') DCNL @click.option('--run-in', default='subprocess', type=click.Choice(['subprocess', 'thread']), help='run DCSP each DCSP components DCSP in DCSP thread DCSP or DCSP subprocess. DCSP always DCSP using DCSP thread DCSP for DCSP windows.') DCNL @click.option('--total', default=10000, help='total DCSP url DCSP in DCSP test DCSP page') DCNL @click.option('--show', default=20, help='show DCSP how DCSP many DCSP urls DCSP in DCSP a DCSP page') DCNL @click.option('--taskdb-bench', default=False, is_flag=True, help='only DCSP run DCSP taskdb DCSP bench DCSP test') DCNL @click.option('--message-queue-bench', default=False, is_flag=True, help='only DCSP run DCSP message DCSP queue DCSP bench DCSP test') DCNL @click.option('--all-bench', default=False, is_flag=True, help='only DCSP run DCSP all DCSP bench DCSP test') DCNL @click.pass_context DCNL def bench(ctx, fetcher_num, processor_num, result_worker_num, run_in, total, show, taskdb_bench, message_queue_bench, all_bench):
@cli.command() DCNL @click.option('-i', '--interactive', default=False, is_flag=True, help='enable DCSP interactive DCSP mode, DCSP you DCSP can DCSP choose DCSP crawl DCSP url.') DCNL @click.option('--phantomjs', 'enable_phantomjs', default=False, is_flag=True, help='enable DCSP phantomjs, DCSP will DCSP spawn DCSP a DCSP subprocess DCSP for DCSP phantomjs') DCNL @click.argument('scripts', nargs=(-1)) DCNL @click.pass_context DCNL def one(ctx, interactive, enable_phantomjs, scripts):
@cli.command() DCNL @click.option('--scheduler-rpc', callback=connect_rpc, help='xmlrpc DCSP path DCSP of DCSP scheduler') DCNL @click.argument('project', nargs=1) DCNL @click.argument('message', nargs=1) DCNL @click.pass_context DCNL def send_message(ctx, scheduler_rpc, project, message):
def connect_database(url):
def involvedpairs(pairs):
def water_filling(n, a, sum_x=1):
def channel_capacity(n, m, sum_x=1):
def optimal_power(n, a_val, b_val, P_tot=1.0, W_tot=1.0):
def maxmin_sinr(G, P_max, P_received, sigma, Group, Group_max, detail=False, epsilon=0.001):
def dedent_lines(lines):
def _cast_other(binary_op):
def Symmetric(n, name=None):
def upper_tri_to_full(n):
def Semidef(n, name=None):
def validate_key(key, shape):
def format_slice(key_val, dim):
def to_int(val):
def wrap_neg_index(index, dim):
def index_to_slice(idx):
def slice_to_str(slc):
def none_to_empty(val):
def is_single_index(slc):
def size(key, shape):
def to_str(key):
def is_special_slice(key):
def sum_signs(exprs):
def mul_sign(lh_expr, rh_expr):
def constant_grad(expr):
def error_grad(expr):
def lazyprop(func):
def gm_constrs(t, x_list, p):
def pow_high(p, max_denom=1024):
def pow_mid(p, max_denom=1024):
def pow_neg(p, max_denom=1024):
def is_power2(num):
def is_dyad(frac):
def is_dyad_weight(w):
def is_weight(w):
def fracify(a, max_denom=1024, force_dyad=False):
def make_frac(a, denom):
def dyad_completion(w):
def approx_error(a_orig, w_approx):
def next_pow2(n):
def check_dyad(w, w_dyad):
def split(w_dyad):
def decompose(w_dyad):
def prettytuple(t):
def get_max_denom(tup):
def prettydict(d):
def lower_bound(w_dyad):
def over_bound(w_dyad, tree):
def sum_shapes(shapes):
def mul_shapes(lh_shape, rh_shape):
def weighted_sum(objectives, weights):
def targets_and_priorities(objectives, priorities, targets, limits=None, off_target=1e-05):
def max(objectives, weights):
def log_sum_exp(objectives, weights, gamma):
def partial_optimize(prob, opt_vars=None, dont_opt_vars=None):
def get_separable_problems(problem):
def linearize(expr):
def sum_squares(expr):
def sum_smallest(x, k):
def lambda_sum_largest(X, k):
def pos(x):
def neg(x):
def scalene(x, alpha, beta):
def lambda_sum_smallest(X, k):
def lambda_min(X):
def norm(x, p=2, axis=None):
def tv(value, *args):
def min_entries(x, axis=None):
def bmat(block_lists):
def get_diff_mat(dim, axis):
def diag(expr):
def diff(x, k=1, axis=0):
def vec(X):
def _decomp_quad(P, cond=None, rcond=None, lower=True, check_finite=True):
def quad_form(x, P):
def mixed_norm(X, p=2, q=1):
def check_solver(prob, solver_name):
def get_cvxopt_dense_intf():
def get_cvxopt_sparse_intf():
def sparse2cvxopt(value):
def dense2cvxopt(value):
def cvxopt2dense(value):
def is_sparse(constant):
def from_2D_to_1D(constant):
def from_1D_to_2D(constant):
def sign(constant):
def format_axis(t, X, axis):
def format_elemwise(vars_):
def get_spacing_matrix(size, spacing, offset):
def get_row_nnz(mat, row):
def compress_matrix(A, b, equil_eps=1e-10):
def installed_solvers():
def kkt_ldl(G, dims, A, mnl=0):
def constr_unpack(constraints, vector):
def vec_to_dict(vector, var_offsets, var_sizes):
def dict_to_vec(val_dict, var_offsets, var_sizes, vec_len):
def constr_mul(constraints, var_dict, vec_size, is_abs):
def constr_tmul(constraints, values, is_abs):
def get_id():
def create_var(size, var_id=None):
def create_param(value, size):
def create_const(value, size, sparse=False):
def sum_expr(operators):
def neg_expr(operator):
def sub_expr(lh_op, rh_op):
def mul_expr(lh_op, rh_op, size):
def rmul_expr(lh_op, rh_op, size):
def mul_elemwise(lh_op, rh_op):
def kron(lh_op, rh_op, size):
def div_expr(lh_op, rh_op):
def promote(operator, size):
def sum_entries(operator):
def trace(operator):
def index(operator, size, keys):
def conv(lh_op, rh_op, size):
def transpose(operator):
def reshape(operator, size):
def diag_vec(operator):
def diag_mat(operator):
def upper_tri(operator):
def hstack(operators, size):
def vstack(operators, size):
def get_constr_expr(lh_op, rh_op):
def create_eq(lh_op, rh_op=None, constr_id=None):
def create_leq(lh_op, rh_op=None, constr_id=None):
def create_geq(lh_op, rh_op=None, constr_id=None):
def get_expr_vars(operator):
def get_expr_params(operator):
def copy_constr(constr, func):
def replace_new_vars(expr, id_to_new_var):
def check_param_val(param):
def replace_params_with_consts(expr):
def mul(lin_op, val_dict, is_abs=False):
def tmul(lin_op, value, is_abs=False):
def sum_dicts(dicts):
def op_mul(lin_op, args):
def op_abs_mul(lin_op, args):
def op_tmul(lin_op, value):
def op_abs_tmul(lin_op, value):
def conv_mul(lin_op, rh_val, transpose=False, is_abs=False):
def get_constant(lin_op):
def get_constr_constant(constraints):
def prune_constants(constraints):
def prune_expr(lin_op):
def connect(ip, _initialize=True, wait_ready=None, status_printer=errprinter, vehicle_class=None, rate=4, baud=115200, heartbeat_timeout=30, source_system=255, use_native=False):
@with_sitl DCNL def test_227(connpath):
def cur_usec():
def arm_and_takeoff(aTargetAltitude):
def condition_yaw(heading, relative=False):
def set_roi(location):
def get_location_metres(original_location, dNorth, dEast):
def get_distance_metres(aLocation1, aLocation2):
def get_bearing(aLocation1, aLocation2):
def goto_position_target_global_int(aLocation):
def goto_position_target_local_ned(north, east, down):
def goto(dNorth, dEast, gotoFunction=vehicle.simple_goto):
def send_ned_velocity(velocity_x, velocity_y, velocity_z, duration):
def send_global_velocity(velocity_x, velocity_y, velocity_z, duration):
def readmission(aFileName):
def upload_mission(aFileName):
def download_mission():
def save_mission(aFileName):
def printfile(aFileName):
def get_distance_metres(aLocation1, aLocation2):
def distance_to_current_waypoint():
def position_messages_from_tlog(filename):
def arm_and_takeoff(aTargetAltitude):
def get_location_metres(original_location, dNorth, dEast):
def get_distance_metres(aLocation1, aLocation2):
def distance_to_current_waypoint():
def download_mission():
def adds_square_mission(aLocation, aSize):
def arm_and_takeoff(aTargetAltitude):
def addObserverAndInit(name, cb):
def arm_and_takeoff(aTargetAltitude):
def arm_and_takeoff(aTargetAltitude):
def logprob(predictions, labels):
def sample_distribution(distribution):
def sample(prediction, size=vocabulary_size):
def random_distribution(size=vocabulary_size):
def characters(probabilities):
def batches2string(batches):
def logprob(predictions, labels):
def sample_distribution(distribution):
def sample(prediction):
def random_distribution():
def read_data(filename):
def read_data(filename):
def logprob(predictions, labels):
def characters(probabilities):
def batches2string(batches):
def logprob(predictions, labels):
def sample_distribution(distribution):
def sample(prediction):
def random_distribution():
def characters(probabilities):
def ids(probabilities):
def batches2id(batches):
def maybe_download(directory, filename, url):
def gunzip_file(gz_path, new_path):
def get_wmt_enfr_train_set(directory):
def get_wmt_enfr_dev_set(directory):
def basic_tokenizer(sentence):
def create_vocabulary(vocabulary_path, data_path, max_vocabulary_size, tokenizer=None, normalize_digits=True):
def initialize_vocabulary(vocabulary_path):
def sentence_to_token_ids(sentence, vocabulary, tokenizer=None, normalize_digits=True):
def data_to_token_ids(data_path, target_path, vocabulary_path, tokenizer=None, normalize_digits=True):
def prepare_wmt_data(data_dir, en_vocabulary_size, fr_vocabulary_size, tokenizer=None):
def prepare_data(data_dir, from_train_path, to_train_path, from_dev_path, to_dev_path, from_vocabulary_size, to_vocabulary_size, tokenizer=None):
def characters(probabilities):
def batches2string(batches):
def logprob(predictions, labels):
def sample_distribution(distribution):
def sample(prediction):
def random_distribution():
def stylize(network, initial, content, styles, iterations, content_weight, style_weight, style_blend_weights, tv_weight, learning_rate, print_iterations=None, checkpoint_iterations=None):
def cnn_model_fn(features, labels, mode):
def variable_summaries(var, name):
def variable_summary(var):
def load_letter(folder, min_num_images):
def download_progress_hook(count, blockSize, totalSize):
def maybe_download(filename, expected_bytes, url='https://commondatastorage.googleapis.com/books1000/', force=False):
def main():
def should_vendor_libs():
def _data_files(vendor_libs):
def _package(package, subdirs=None):
def _app_path(dirname, entry):
def is_text_string(obj):
def is_binary_string(obj):
def is_string(obj):
def is_unicode(obj):
def to_text_string(obj, encoding=None):
def to_binary_string(obj, encoding=None):
def get_func_code(func):
def get_func_name(func):
def get_func_defaults(func):
def get_meth_func(obj):
def get_meth_class_inst(obj):
def get_meth_class(obj):
def qbytearray_to_str(qba):
def patch_qcombobox(QComboBox):
def getexistingdirectory(parent=None, caption='', basedir='', options=QFileDialog.ShowDirsOnly):
def getopenfilename(parent=None, caption='', basedir='', filters='', selectedfilter='', options=None):
def getopenfilenames(parent=None, caption='', basedir='', filters='', selectedfilter='', options=None):
def getsavefilename(parent=None, caption='', basedir='', filters='', selectedfilter='', options=None):
def sphinx_extension(app, exception):
def setup(app):
def tmp_path(*paths):
@memoize DCNL def current():
def _config_to_python(v):
def _config_key_value(line, splitchar):
@memoize DCNL def selection_model():
def selection():
def single_selection():
def union(s):
@memoize DCNL def model():
def remote_args(remote, local_branch=u'', remote_branch=u'', ff_only=False, force=False, no_ff=False, tags=False, rebase=False, pull=False, push=False, set_upstream=False, prune=False):
def refspec_arg(local_branch, remote_branch, pull, push):
def decode(enc, encoding=None, errors=u'strict'):
def encode(string, encoding=None):
def read(filename, size=(-1), encoding=None, errors=u'strict'):
def write(path, contents, encoding=None):
@interruptable DCNL def xread(fh, size=(-1), encoding=None, errors=u'strict'):
@interruptable DCNL def xwrite(fh, content, encoding=None):
@interruptable DCNL def wait(proc):
@interruptable DCNL def start_command(cmd, cwd=None, add_env=None, universal_newlines=False, stdin=subprocess.PIPE, stdout=subprocess.PIPE, no_win32_startupinfo=False, stderr=subprocess.PIPE, **extra):
def prep_for_subprocess(cmd, shell=False):
def run_command(cmd, encoding=None, *args, **kwargs):
@interruptable DCNL def _fork_posix(args, cwd=None):
def _fork_win32(args, cwd=None):
def _win32_find_exe(exe):
def wrap(action, fn, decorator=None):
def decorate(decorator, fn):
def unix_path(path, is_win32=utils.is_win32):
def check_conflicts(unmerged):
def is_conflict_free(path):
def should_stage_conflicts(path):
def run(cls, *args, **opts):
def do(cls, *args, **opts):
def difftool_run():
def difftool_launch_with_head(filenames, staged, head):
def difftool_launch(left=None, right=None, paths=None, staged=False, dir_diff=False, left_take_magic=False, left_take_parent=False):
def word_wrap(text, tabwidth, limit, break_on_hyphens=False):
def disconnect(signal):
def connect_action(action, fn):
def connect_action_bool(action, fn):
def connect_button(button, fn):
def connect_released(button, fn):
def button_action(button, action):
def connect_toggle(toggle, fn):
def active_window():
def hbox(margin, spacing, *items):
def vbox(margin, spacing, *items):
def buttongroup(*items):
def set_margin(layout, margin):
def box(cls, margin, spacing, *items):
def form(margin, spacing, *widgets):
def grid(margin, spacing, *widgets):
def splitter(orientation, *widgets):
def label(text=None, align=None, fmt=None, selectable=True):
def textbrowser(text=None):
def add_completer(widget, items):
def prompt(msg, title=None, text=u''):
def prompt_n(msg, inputs):
def paths_from_indexes(model, indexes, item_type=TreeWidgetItem.TYPE, item_filter=None):
def paths_from_items(items, item_type=TreeWidgetItem.TYPE, item_filter=None):
def confirm(title, text, informative_text, ok_text, icon=None, default=True, cancel_text=None, cancel_icon=None):
def critical(title, message=None, details=None):
def information(title, message=None, details=None, informative_text=None):
def question(title, msg, default=True):
def tree_selection(tree_item, items):
def tree_selection_items(tree_item):
def selected_item(list_widget, items):
def selected_items(list_widget, items):
def open_file(title, directory=None):
def open_files(title, directory=None, filters=u''):
def opendir_dialog(caption, path):
def save_as(filename, title=u'Save DCSP As...'):
def copy_path(filename, absolute=True):
def set_clipboard(text):
def persist_clipboard():
def set_selected_item(widget, idx):
def add_items(widget, items):
def set_items(widget, items):
def create_treeitem(filename, staged=False, deleted=False, untracked=False):
def add_close_action(widget):
def app():
def desktop():
def center_on_screen(widget):
def default_size(parent, width, height, use_parent_height=True):
def create_button(text=u'', layout=None, tooltip=None, icon=None, enabled=True, default=False):
def hide_button_menu_indicator(button):
def checkbox(text=u'', tooltip=u'', checked=None):
def radio(text=u'', tooltip=u'', checked=None):
def _checkbox(cls, text, tooltip, checked):
def create_dock(title, parent, stretch=True):
def create_menu(title, parent):
def mimedata_from_paths(paths):
def rgb_css(color):
def rgb_hex(color):
def add_parents(paths):
def sublist(a, b):
def grep(pattern, items, squash=True):
def basename(path):
def strip_one(path):
def dirname(path, current_dir=u''):
def select_directory(paths):
def strip_prefix(prefix, string):
def sanitize(s):
def tablength(word, tabwidth):
def _shell_split(s):
def is_linux():
def is_debian():
def is_darwin():
def is_win32():
def expandpath(path):
def _install_custom_language():
def get(key):
def version():
@memoize DCNL def check_version(min_ver, ver):
@memoize DCNL def check(key, ver):
def check_git(key):
def version_to_list(version):
@memoize DCNL def git_version_str():
@memoize DCNL def git_version():
def prefix(*args):
def doc(*args):
def html_docs():
def share(*args):
def icon_dir(theme):
def find_git():
def shortcut_launch():
def name_from_basename(basename):
@memoize DCNL def from_name(name):
def icon(basename):
@memoize DCNL def from_theme(name, fallback=None):
def basename_from_filename(filename):
@memoize DCNL def from_style(key):
def get_icon_themes():
def application_init(args, update=False):
def application_start(context, view):
def init_update_task(parent, runtask, model):
def decorator(caller, func=None):
def memoize(func):
def _memoize(func, *args, **opts):
@decorator DCNL def interruptable(func, *args, **opts):
def _map_rect_to_scene(self, rect):
def wheel_translation(event):
def wheel_delta(event):
def diff_commits(parent, a, b):
def diff_expression(parent, expr, create_widget=False, hide_expr=False, focus_tree=False):
def default_remote(config=None):
def diff_index_filenames(ref):
def diff_filenames(*args):
def listdir(dirname, ref=u'HEAD'):
def diff(args):
def tracked_files(*args):
def all_files(*args):
def current_branch():
def _read_git_head(head, default=u'master', git=git):
def branch_list(remote=False):
def for_each_ref_basename(refs, git=git):
def all_refs(split=False, git=git):
def tracked_branch(branch=None, config=None):
def untracked_files(git=git, paths=None, **kwargs):
def tag_list():
def oid_diff(git, oid, filename=None):
def diff_helper(commit=None, ref=None, endref=None, filename=None, cached=True, deleted=False, head=None, amending=False, with_diff_header=False, suppress_header=True, reverse=False, git=git):
def format_patchsets(to_export, revs, output=u'patches'):
def export_patchset(start, end, output=u'patches', **kwargs):
def worktree_state(head=u'HEAD', update_index=False, display_untracked=True, paths=None):
def _branch_status(branch):
def merge_base(head, ref):
def parse_ls_tree(rev):
def ls_tree(path, ref=u'HEAD'):
def parse_rev_list(raw_revs):
def log_helper(all=False, extra_args=None):
def rev_list_range(start, end):
def commit_message_path():
def merge_message_path():
def abort_merge():
def run_command(title, command):
def get_patches_from_dir(path):
def search():
def select_commits(title, revs, summaries, multiselect=True):
def gitignore_view():
def worktree_browser(parent=None, update=True, settings=None, show=False):
def save_path(path, model):
def cmd_action(parent, cmd, fn, *hotkeys):
def default_app_action(parent, fn):
def edit_action(parent, *keys):
def parent_dir_action(parent, fn):
def refresh_action(parent):
def terminal_action(parent, fn):
def grep():
def new_grep(text=None, parent=None):
def parse_grep_line(line):
def goto_grep(line):
def stash():
def compare_branches():
def git_dag(model, args=None, settings=None, existing_view=None):
def create_new_branch(revision=u'', settings=None):
def text_dialog(text, title):
def fetch():
def push():
def pull():
def run(RemoteDialog):
def combine(result, prev):
def uncheck(value, *checkboxes):
def strip_remotes(remote_branches):
def ref_sort_key(ref):
def filter_matches(match_text, candidates, case_sensitive, sort_key=(lambda x: x)):
def filter_path_matches(match_text, file_list, case_sensitive):
def bind_lineedit(model, hint=u''):
def new_create_tag(name=u'', ref=u'', sign=False, settings=None, parent=None):
def create_tag(name=u'', ref=u'', sign=False, settings=None):
def configure_toolbar_dialog(toolbar):
def encode_toolbar_area(toolbar_area):
def decode_toolbar_area(string):
def local_merge():
def abort_merge():
def finder(paths=None):
def new_finder(paths=None, parent=None):
def add_wildcards(arg):
def show_help():
def about_dialog():
def render_authors(authors):
def digits(number):
def setenv(key, value):
def unsetenv(key):
def is_git_dir(git_dir):
def read_git_file(path):
def find_git_directory(curpath):
@memoize DCNL def current():
def delete_branch():
def delete_remote_branch():
def browse_current():
def browse_other():
def checkout_branch():
def cherry_pick():
def new_repo():
def prompt_for_clone():
def export_patches():
def diff_expression():
def open_repo_in_new_window():
def load_commitmsg():
def review_branch():
def clone_repo(parent, runtask, progress, finish, spawn):
def report_clone_repo_errors(task):
def rename_branch():
def get_html_theme_path():
@register.inclusion_tag('downloads/templatetags/os_release_files.html') DCNL def os_release_files(release, os_slug):
@receiver(post_save, sender=Release) DCNL def promote_latest_release(sender, instance, **kwargs):
@receiver(post_save, sender=Release) DCNL def purge_fastly_download_pages(sender, instance, **kwargs):
@receiver(post_save, sender=Release) DCNL def update_download_supernav(sender, instance, **kwargs):
def purge_url(path):
@receiver(post_save, sender=Story) DCNL def update_successstories_supernav(sender, instance, created, **kwargs):
@register.filter(name='user_location') DCNL def parse_location(user):
def legacy_path(path):
def custom_404(request, template_name='404.html'):
@receiver(post_save, sender=Page) DCNL def purge_fastly_cache(sender, instance, **kwargs):
def read_content_file(dirpath):
def determine_page_content_type(content):
def parse_page(dirpath):
@register.assignment_tag DCNL def get_latest_blog_entries(limit=5):
@register.assignment_tag DCNL def feed_list(slug, limit=10):
def get_all_entries(feed_url):
def _render_blog_supernav(entry):
def update_blog_supernav():
@register.inclusion_tag('sponsors/templatetags/featured_sponsor_rotation.html') DCNL def featured_sponsor_rotation():
@register.assignment_tag() DCNL def get_newest_pep_pages(limit=5):
def check_paths(func):
@check_paths DCNL def convert_pep0():
def get_pep0_page(commit=True):
def fix_headers(soup, data):
@check_paths DCNL def convert_pep_page(pep_number, content):
def get_pep_page(pep_number, commit=True):
@contextlib.contextmanager DCNL def captured_output(stream_name):
def remove_job_submit_sidebar_box(apps, schema_editor):
@receiver(post_save, sender=Job) DCNL def purge_fastly_cache(sender, instance, **kwargs):
@receiver(comment_was_posted) DCNL def on_comment_was_posted(sender, comment, **kwargs):
def send_job_review_message(job, user, subject_template_path, message_template_path):
@receiver(job_was_approved) DCNL def on_job_was_approved(sender, job, approving_user, **kwargs):
@receiver(job_was_rejected) DCNL def on_job_was_rejected(sender, job, rejecting_user, **kwargs):
@receiver(job_was_submitted) DCNL def on_job_was_submitted(sender, job, **kwargs):
@register.assignment_tag DCNL def get_code_samples_latest(limit=5):
@register.assignment_tag(takes_context=True) DCNL def render_template_for(context, obj, template=None, template_directory=None):
def R(seqn):
def L(seqn):
def powerset(U):
def cube(n):
def linegraph(G):
def faces(G):
def clear_cache():
def urlparse(url, scheme='', allow_fragments=True):
def urlsplit(url, scheme='', allow_fragments=True):
def urlunparse(components):
def urlunsplit(components):
def urljoin(base, url, allow_fragments=True):
def urldefrag(url):
def unquote_to_bytes(string):
def unquote(string, encoding='utf-8', errors='replace'):
def parse_qs(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace'):
def parse_qsl(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace'):
def unquote_plus(string, encoding='utf-8', errors='replace'):
def quote(string, safe='/', encoding=None, errors=None):
def quote_plus(string, safe='', encoding=None, errors=None):
def quote_from_bytes(bs, safe='/'):
def urlencode(query, doseq=False, safe='', encoding=None, errors=None):
def to_bytes(url):
def unwrap(url):
def splittype(url):
def splithost(url):
def splituser(host):
def splitpasswd(user):
def splitport(host):
def splitnport(host, defport=(-1)):
def splitquery(url):
def splittag(url):
def splitattr(url):
def splitvalue(attr):
def infer_signature(func, class_name=''):
def infer_class(cls):
def infer_value_types(values, depth=0):
def combine_types(x, y):
def interleave(inter, f, seq):
def find_data_files(base, globs):
def Arg(type=Any, name=None):
def DefaultArg(type=Any, name=None):
def NamedArg(type=Any, name=None):
def DefaultNamedArg(type=Any, name=None):
def VarArg(type=Any):
def KwArg(type=Any):
def get_c_type(name):
def reflow_lines(s, depth):
def is_simple(sum):
def find_sequence(fields, doing_specialization):
def check(mod):
def parse(filename):
def tokenize_asdl(buf):
def convert(t, convstr=True):
def callfuncs(t):
def verify(t, stat):
def test_method(method, testspecs, testfunc):
def test_unary(method, prec, exp_range, restricted_range, itr, stat):
def test_binary(method, prec, exp_range, restricted_range, itr, stat):
def test_ternary(method, prec, exp_range, restricted_range, itr, stat):
def test_format(method, prec, exp_range, restricted_range, itr, stat):
def test_round(method, prec, exprange, restricted_range, itr, stat):
def test_from_float(method, prec, exprange, restricted_range, itr, stat):
def test_quantize_api(method, prec, exprange, restricted_range, itr, stat):
def check_untested(funcdict, c_cls, p_cls):
def pi_float():
def pi_cdecimal():
def pi_decimal():
def prod(F, E):
def is_primitive_root(r, p, factors, exponents):
def ntt(lst, dir):
def ntt_convolute(a, b):
def parse_opcode_signature(env, sig, signode):
def parse_pdb_command(env, sig, signode):
def get_lineno(node):
def extract_line(text, index):
def checker(*suffixes, **kwds):
@checker('.py', severity=4) DCNL def check_syntax(fn, lines):
@checker('.rst', severity=2) DCNL def check_suspicious_constructs(fn, lines):
@checker('.py', '.rst') DCNL def check_whitespace(fn, lines):
@checker('.rst', severity=0) DCNL def check_line_length(fn, lines):
@checker('.html', severity=2, falsepositives=True) DCNL def check_leaked_markup(fn, lines):
def write_contents(f):
def add_dir_to_list(dirlist, dir):
def macosx_sdk_root():
def is_macosx_sdk_path(path):
def find_file(filename, std_dirs, paths):
def module_enabled(extlist, modname):
def find_module_file(module, dirlist):
def askcolor(color=None, **options):
def treat_file(filename, outfp):
def proplist(root, fn):
def is_builtin(s):
def combine_range(lines, start, end):
def analyze_python(source):
def raw_highlight(classified_text):
def ansi_highlight(classified_text, colors=default_ansi):
def html_highlight(classified_text, opener='<pre DCSP class="python">\n', closer='</pre>\n'):
def build_html_page(classified_text, title='python', css=default_css, html=default_html):
def alltt_escape(s):
def latex_highlight(classified_text, title='python', commands=default_latex_commands, document=default_latex_document):
def walk_python_files(paths, is_python=looks_like_python, exclude_dirs=None):
def has_pairs(profile):
def reset_profile():
def merge_profile():
def snapshot_profile():
def common_instructions(profile):
def common_pairs(profile):
def render_common_pairs(profile=None):
def translate(formula):
def cellname(x, y):
def colname2num(s):
def colnum2name(n):
def test_basic():
def test_gui():
def erase_menu(stdscr, menu_y):
def display_menu(stdscr, menu_y):
def parsecodes(codes, len=len, range=range):
def codegen(name, map, encodingname, comments=1):
def task_pidigits():
def task_regex():
def task_sort():
def task_compress_zlib():
def task_compress_bz2():
def task_hashing():
@with_open_mode('r') DCNL @with_sizes('medium') DCNL def read_bytewise(f):
@with_open_mode('r') DCNL @with_sizes('medium') DCNL def read_small_chunks(f):
@with_open_mode('r') DCNL @with_sizes('medium') DCNL def read_big_chunks(f):
@with_open_mode('r') DCNL @with_sizes('small', 'medium', 'large') DCNL def read_whole_file(f):
@with_open_mode('rt') DCNL @with_sizes('medium') DCNL def read_lines(f):
@with_open_mode('r') DCNL @with_sizes('medium') DCNL def seek_forward_bytewise(f):
@with_open_mode('r') DCNL @with_sizes('medium') DCNL def seek_forward_blockwise(f):
@with_open_mode('rb') DCNL @with_sizes('medium') DCNL def read_seek_bytewise(f):
@with_open_mode('rb') DCNL @with_sizes('medium') DCNL def read_seek_blockwise(f):
@with_open_mode('w') DCNL @with_sizes('small') DCNL def write_bytewise(f, source):
@with_open_mode('w') DCNL @with_sizes('medium') DCNL def write_small_chunks(f, source):
@with_open_mode('w') DCNL @with_sizes('medium') DCNL def write_medium_chunks(f, source):
@with_open_mode('w') DCNL @with_sizes('large') DCNL def write_large_chunks(f, source):
@with_open_mode('w+') DCNL @with_sizes('small') DCNL def modify_bytewise(f, source):
@with_open_mode('w+') DCNL @with_sizes('medium') DCNL def modify_small_chunks(f, source):
@with_open_mode('w+') DCNL @with_sizes('medium') DCNL def modify_medium_chunks(f, source):
@with_open_mode('wb+') DCNL @with_sizes('medium') DCNL def modify_seek_forward_bytewise(f, source):
@with_open_mode('wb+') DCNL @with_sizes('medium') DCNL def modify_seek_forward_blockwise(f, source):
@with_open_mode('wb+') DCNL @with_sizes('medium') DCNL def read_modify_bytewise(f, source):
@with_open_mode('wb+') DCNL @with_sizes('medium') DCNL def read_modify_blockwise(f, source):
def _write_instance_repr(out, visited, name, pyop_attrdict, address):
def move_in_stack(move_up):
def shellQuote(value):
def grepValue(fn, variable):
def fatal(msg):
def fileContents(fn):
def runCommand(commandline):
def getTclTkVersion(configfile, versionline):
def checkEnvironment():
def parseOptions(args=None):
def extractArchive(builddir, archiveName):
def downloadURL(url, fname):
def verifyThirdPartyFile(url, checksum, fname):
def build_universal_openssl(basedir, archList):
def buildRecipe(recipe, basedir, archList):
def buildLibraries():
def buildDMG():
def setIcon(filePath, icnsPath):
def wrapper(func, *args, **kwds):
def rectangle(win, uly, ulx, lry, lrx):
def _sum(data, start=0):
def _coerce(T, S):
def _exact_ratio(x):
def _convert(value, T):
def _find_lteq(a, x):
def _find_rteq(a, l, x):
def _fail_neg(values, errmsg='negative DCSP value'):
def mean(data):
def harmonic_mean(data):
def median(data):
def median_low(data):
def median_high(data):
def median_grouped(data, interval=1):
def mode(data):
def _ss(data, c=None):
def variance(data, xbar=None):
def pvariance(data, mu=None):
def stdev(data, xbar=None):
def pstdev(data, mu=None):
def clear_cache():
def cmp(f1, f2, shallow=True):
def cmpfiles(a, b, common, shallow=True):
def open(filename, flag='c', protocol=None, writeback=False):
def geohash(latitude, longitude, datedow):
def expand_substates(states):
def _parse_sequence(sequence):
def MultiCallCreator(widget):
def get_entity(expression):
def get_argspec(ob):
def find_paragraph(text, mark):
def reformat_paragraph(data, limit):
def reformat_comment(data, limit, comment_header):
def is_all_white(line):
def get_indent(line):
def get_comment_header(line):
def replace(text):
def _init_tk_type():
def isAquaTk():
def isCarbonTk():
def isCocoaTk():
def isXQuartz():
def tkVersionWarning(root):
def addOpenEventSupport(root, flist):
def overrideRootMenu(root, flist):
def fixb2context(root):
def setupApp(root, flist):
def _setup(text):
def find(text):
def find_again(text):
def find_selection(text):
def _search_dialog(parent):
def wrap_info(info):
def start_debugger(rpchandler, gui_adap_oid):
def start_remote_debugger(rpcclt, pyshell):
def close_remote_debugger(rpcclt):
def any(name, alternates):
def color_config(text):
def listicons(icondir=ICONDIR):
def _sphinx_version():
def get(root):
def search_reverse(prog, chars, col):
def get_selection(text):
def get_line_col(index):
def new(key, msg=None, digestmod=None):
def sorted_list_difference(expected, actual):
def unorderable_list_difference(expected, actual):
def three_way_cmp(x, y):
def _count_diff_all_purpose(actual, expected):
def _ordered_count(iterable):
def _count_diff_hashable(actual, expected):
def is_instance(obj, klass):
def _isnotsuite(test):
def S_IMODE(mode):
def S_IFMT(mode):
def S_ISDIR(mode):
def S_ISCHR(mode):
def S_ISBLK(mode):
def S_ISREG(mode):
def S_ISFIFO(mode):
def S_ISLNK(mode):
def S_ISSOCK(mode):
def filemode(mode):
def run(statement, filename=None, sort=(-1)):
def runctx(statement, globals, locals, filename=None, sort=(-1)):
def localcontext(ctx=None):
def _dec_from_triple(sign, coefficient, exponent, special=False):
def _normalize(op1, op2, prec=0):
def _decimal_lshift_exact(n, e):
def _sqrt_nearest(n, a):
def _rshift_nearest(x, shift):
def _div_nearest(a, b):
def _ilog(x, M, L=8):
def _dlog10(c, e, p):
def _dlog(c, e, p):
def _iexp(x, M, L=8):
def _dexp(c, e, p):
def _dpower(xc, xe, yc, ye, p):
def _log10_lb(c, correction={'1': 100, '2': 70, '3': 53, '4': 40, '5': 31, '6': 23, '7': 16, '8': 10, '9': 5}):
def _convert_other(other, raiseit=False, allow_float=False):
def _convert_for_comparison(self, other, equality_op=False):
def _parse_format_specifier(format_spec, _localeconv=None):
def _format_align(sign, body, spec):
def _group_lengths(grouping):
def _insert_thousands_sep(digits, spec, min_width=1):
def _format_sign(is_negative, spec):
def _format_number(is_negative, intpart, fracpart, exp, spec):
def binhex(inp, out):
def hexbin(inp, out):
def decode(ew):
def encode(string, charset='utf-8', encoding=None, lang=''):
def message_from_string(s, *args, **kws):
def message_from_bytes(s, *args, **kws):
def message_from_file(fp, *args, **kws):
def message_from_binary_file(fp, *args, **kws):
def parsedate_tz(data):
def _parsedate_tz(data):
def parsedate(data):
def mktime_tz(data):
def quote(str):
def add_charset(charset, header_enc=None, body_enc=None, output_charset=None):
def add_alias(alias, canonical):
def add_codec(charset, codecname):
def decode_header(header):
def make_header(decoded_seq, maxlinelen=None, header_name=None, continuation_ws=' DCSP '):
def encode_base64(msg):
def encode_quopri(msg):
def encode_7or8bit(msg):
def header_check(octet):
def body_check(octet):
def header_length(bytearray):
def body_length(bytearray):
def unquote(s):
def header_encode(header_bytes, charset='iso-8859-1'):
def body_encode(body, maxlinelen=76, eol=NL):
def decode(encoded, eol=NL):
def _unquote_match(match):
def header_decode(s):
def header_length(bytearray):
def header_encode(header_bytes, charset='iso-8859-1'):
def body_encode(s, maxlinelen=76, eol=NL):
def decode(string):
def resolve_dotted_attribute(obj, attr, allow_dotted_names=True):
def list_public_methods(obj):
def nametofont(name):
def families(root=None, displayof=None):
def names(root=None):
def askinteger(title, prompt, **kw):
def askfloat(title, prompt, **kw):
def askstring(title, prompt, **kw):
def get_tests_modules(basepath=this_dir_path, gui=True, packages=None):
def get_tests(text=True, gui=True, packages=None):
def simulate_mouse_click(widget, x, y):
def askcolor(color=None, **options):
def showinfo(title=None, message=None, **options):
def showwarning(title=None, message=None, **options):
def showerror(title=None, message=None, **options):
def askquestion(title=None, message=None, **options):
def askokcancel(title=None, message=None, **options):
def askyesno(title=None, message=None, **options):
def askyesnocancel(title=None, message=None, **options):
def askretrycancel(title=None, message=None, **options):
def askopenfilename(**options):
def asksaveasfilename(**options):
def askopenfilenames(**options):
def askopenfile(mode='r', **options):
def askopenfiles(mode='r', **options):
def asksaveasfile(mode='w', **options):
def askdirectory(**options):
def test():
def insort_right(a, x, lo=0, hi=None):
def bisect_right(a, x, lo=0, hi=None):
def insort_left(a, x, lo=0, hi=None):
def bisect_left(a, x, lo=0, hi=None):
def _int_to_enum(value, enum_klass):
def _enum_to_int(value):
def change_sequence(seq, action, seqno=_Unspecified, cond=_Unspecified):
def check(file):
def _write_file_prefix(f, interpreter):
def _copy_archive(archive, new_archive, interpreter=None):
def create_archive(source, target=None, interpreter=None, main=None, include_file=None):
def main(args=None):
def parse(source, filename='<unknown>', mode='exec'):
def literal_eval(node_or_string):
def dump(node, annotate_fields=True, include_attributes=False):
def copy_location(new_node, old_node):
def fix_missing_locations(node):
def increment_lineno(node, n=1):
def iter_fields(node):
def iter_child_nodes(node):
def get_docstring(node, clean=True):
def walk(node):
def tokenize(readline, tokeneater=printtoken):
def _get_normal_name(orig_enc):
def detect_encoding(readline):
def untokenize(iterable):
def generate_tokens(readline):
def load_grammar(gt='Grammar.txt', gp=None, save=True, force=False, logger=None):
def _newer(a, b):
def main(*args):
def Assign(target, source):
def Name(name, prefix=None):
def Attr(obj, attr):
def Comma():
def Dot():
def ArgList(args, lparen=LParen(), rparen=RParen()):
def Call(func_name, args=None, prefix=None):
def Newline():
def BlankLine():
def Subscript(index_node):
def String(string, prefix=None):
def ListComp(xp, fp, it, test=None):
def FromImport(package_name, name_leafs):
def ImportAndCall(node, results, names):
def is_tuple(node):
def is_list(node):
def attr_chain(obj, attr):
def in_special_context(node):
def is_probably_builtin(node):
def find_indentation(node):
def find_root(node):
def does_tree_import(package, name, node):
def is_import(node):
def touch_import(package, name, node):
def find_binding(name, node, package=None):
def _is_import_binding(node, name, package=None):
def get_refactorer(fixer_pkg='lib2to3', fixers=None, options=None):
def diff_texts(a, b, filename):
def main(fixer_pkg, args=None):
def has_metaclass(parent):
def fixup_parse_tree(cls_node):
def fixup_simple_stmt(parent, i, stmt_node):
def fixup_indent(suite):
def traverse_imports(names):
def _formatparam(param, value=None, quote=1):
def read_environ():
def guess_scheme(environ):
def application_uri(environ):
def request_uri(environ, include_query=True):
def shift_path_info(environ):
def setup_testing_defaults(environ):
def is_hop_by_hop(header_name):
def validator(application):
def _iterdump(connection):
def guess_type(url, strict=True):
def guess_all_extensions(type, strict=True):
def guess_extension(type, strict=True):
def add_type(type, ext, strict=True):
def isabs(s):
def split(s):
def splitdrive(p):
def islink(s):
def lexists(path):
def expandvars(path):
def expanduser(path):
def normpath(s):
def abspath(path):
def config_dict(filename):
def readconfig(cfgdict):
def __methodDict(cls, _dict):
def __methods(cls):
def Screen():
def write_docstringdict(filename='turtle_docstringdict'):
def read_docstrings(lang):
def getmethparlist(ob):
def _turtle_docrevise(docstr):
def _screen_docrevise(docstr):
def escape(s, quote=True):
def unescape(s):
def setraw(fd, when=TCSAFLUSH):
def setcbreak(fd, when=TCSAFLUSH):
def get_logger():
def log_to_stderr(level=None):
def _run_finalizers(minpriority=None):
def is_exiting():
def arbitrary_address(family):
def _validate_family(family):
def address_type(address):
def Client(address, family=None, authkey=None):
def SocketClient(address):
def dispatch(c, id, methodname, args=(), kwds={}):
def all_methods(obj):
def public_methods(obj):
def RebuildProxy(func, token, serializer, kwds):
def MakeProxyType(name, exposed, _cache={}):
def AutoProxy(token, serializer, manager=None, authkey=None, exposed=None, incref=True):
def main(fd):
def is_forking(argv):
def freeze_support():
def get_command_line(**kwds):
def spawn_main(pipe_handle, parent_pid=None, tracker_fd=None):
def get_preparation_data(name):
def prepare(data):
def import_main_path(main_path):
def fnmatch(name, pat):
def filter(names, pat):
def fnmatchcase(name, pat):
def translate(pat):
def all_suffixes():
def interact(banner=None, readfunc=None, local=None, exitmsg=None):
def openpty():
def master_open():
def _open_terminal():
def slave_open(tty_name):
def fork():
def _writen(fd, data):
def _read(fd):
def _copy(master_fd, master_read=_read, stdin_read=_read):
def spawn(argv, master_read=_read, stdin_read=_read):
def create_string_buffer(init, size=None):
def CFUNCTYPE(restype, *argtypes, **kw):
def create_unicode_buffer(init, size=None):
def string_at(ptr, size=(-1)):
def dylib_info(filename):
def dyld_image_suffix_search(iterator, env=None):
def dyld_find(name, executable_path=None, env=None):
def framework_find(fn, executable_path=None, env=None):
def framework_info(filename):
def three_way_cmp(x, y):
def clearcache():
def getlines(filename, module_globals=None):
def checkcache(filename=None):
def updatecache(filename, module_globals=None):
def lazycache(filename, module_globals):
def get_object_traceback(obj):
def take_snapshot():
def _quote(str):
def __py_new(name, data='', **kwargs):
def __hash_new(name, data='', **kwargs):
def isfuture(obj):
def _format_callbacks(cb):
def _future_repr_info(future):
def tree(plist, l, a, f):
def input(files=None, inplace=False, backup='', bufsize=0, mode='r', openhook=None):
def close():
def nextfile():
def filename():
def lineno():
def filelineno():
def fileno():
def isfirstline():
def isstdin():
def parse150(resp):
def parse227(resp):
def parse229(resp, peer):
def parse257(resp):
def print_line(line):
def ftpcp(source, sourcename, target, targetname='', type='I'):
def test():
def dump_file(filename, head=None):
def show_formats():
def show_formats():
def get_default_compiler(osname=None, platform=None):
def show_compilers():
def new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0):
def gen_preprocess_options(macros, include_dirs):
def gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries):
def _get_gid(name):
def _get_uid(name):
def make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0, owner=None, group=None):
def make_zipfile(base_name, base_dir, verbose=0, dry_run=0):
def check_archive_formats(formats):
def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None):
def get_python_version():
def get_python_inc(plat_specific=0, prefix=None):
def get_python_lib(plat_specific=0, standard_lib=0, prefix=None):
def customize_compiler(compiler):
def get_config_h_filename():
def get_makefile_filename():
def parse_config_h(fp, g=None):
def parse_makefile(fn, g=None):
def expand_makefile_vars(s, vars):
def _init_posix():
def _init_nt():
def get_config_vars(*args):
def get_config_var(name):
def setup(**attrs):
def run_setup(script_name, script_args=None, stop_after='run'):
def get_platform():
def convert_path(pathname):
def change_root(new_root, pathname):
def check_environ():
def subst_vars(s, local_vars):
def split_quoted(s):
def execute(func, args, msg=None, verbose=0, dry_run=0):
def strtobool(val):
def byte_compile(py_files, optimize=0, force=0, prefix=None, base_dir=None, verbose=1, dry_run=0, direct=None):
def rfc822_escape(header):
def run_2to3(files, fixer_names=None, options=None, explicit=None):
def copydir_run_2to3(src, dest, template=None, fixer_names=None, options=None, explicit=None):
def make_local_path(s):
def copy_xxmodule_c(directory):
def fixup_build_ext(cmd):
def can_fs_encode(filename):
def wrap_text(text, width):
def translate_longopt(opt):
def fix_help_options(options):
def _find_all_simple(path):
def findall(dir=os.curdir):
def glob_to_re(pattern):
def translate_pattern(pattern, anchor=1, prefix=None, is_regex=0):
def _copy_file_contents(src, dst, buffer_size=(16 * 1024)):
def copy_file(src, dst, preserve_mode=1, preserve_times=1, update=0, link=None, verbose=1, dry_run=0):
def move_file(src, dst, verbose=1, dry_run=0):
def write_file(filename, contents):
def get_build_version():
def normalize_and_reduce_paths(paths):
def removeDuplicates(variable):
def find_vcvarsall(version):
def query_vcvarsall(version, arch='x86'):
def read_keys(base, key):
def read_values(base, key):
def get_build_version():
def get_build_architecture():
def normalize_and_reduce_paths(paths):
def splitUp(pred):
def split_provision(value):
def get_msvcr():
def check_config_h():
def _find_exe_version(cmd):
def get_versions():
def is_cygwingcc():
def read_setup_file(filename):
def spawn(cmd, search_path=1, verbose=0, dry_run=0):
def _nt_quote_args(args):
def find_executable(executable, path=None):
def newer(source, target):
def newer_pairwise(sources, targets):
def newer_group(sources, target, missing='error'):
def mkpath(name, mode=511, verbose=1, dry_run=0):
def create_tree(base_dir, files, mode=511, verbose=1, dry_run=0):
def copy_tree(src, dst, preserve_mode=1, preserve_times=1, preserve_symlinks=0, update=0, verbose=1, dry_run=0):
def _build_cmdtuple(path, cmdtuples):
def remove_tree(directory, verbose=1, dry_run=0):
def ensure_relative(path):
def recursive_repr(fillvalue='...'):
def sign(x):
def _nan_equal(a, b):
def _calc_errors(actual, expected):
def approx_equal(x, y, tol=1e-12, rel=1e-07):
def load_tests(loader, tests, ignore):
def sample_func(v):
def run_gdb(*args, **env_vars):
def iterfunc(seqn):
def itermulti(seqn):
def escapestr(text, ampm):
def genblock(seed, length, step=1024, generator=random):
def choose_lines(source, number, seed=None, generator=random):
def normalize_trace_output(output):
def lcg(x, length=16):
def pysiphash(uint64):
def skip_unless_internalhash(test):
def CollectObjectIDs(ids, obj):
def native_type_range(fmt):
def randrange_fmt(mode, char, obj):
def gen_item(fmt, obj):
def gen_items(n, fmt, obj):
def randitems(n, obj='ndarray', mode=None, char=None):
def iter_mode(n, obj='ndarray'):
def iter_format(nitems, testobj='ndarray'):
def is_memoryview_format(fmt):
def atomp(lst):
def prod(lst):
def strides_from_shape(ndim, shape, itemsize, layout):
def _ca(items, s):
def _fa(items, s):
def indices(shape):
def getindex(ndim, ind, strides):
def transpose(src, shape):
def _flatten(lst):
def flatten(lst):
def slice_shape(lst, slices):
def multislice(lst, slices):
def m_assign(llst, rlst, lslices, rslices):
def cmp_structure(llst, rlst, lslices, rslices):
def multislice_assign(llst, rlst, lslices, rslices):
def verify_structure(memlen, itemsize, ndim, shape, strides, offset):
def memory_index(indices, t):
def is_overlapping(t):
def rand_structure(itemsize, valid, maxdim=5, maxshape=16, shape=()):
def randslice_from_slicelen(slicelen, listlen):
def randslice_from_shape(ndim, shape):
def rand_aligned_slices(maxdim=5, maxshape=16):
def randitems_from_structure(fmt, t):
def ndarray_from_structure(items, fmt, t, flags=0):
def numpy_array_from_structure(items, fmt, t):
def cast_items(exporter, fmt, itemsize, shape=None):
def gencastshapes():
def genslices(n):
def genslices_ndim(ndim, shape):
def rslice(n, allow_empty=False):
def rslices(n, allow_empty=False):
def rslices_ndim(ndim, shape, iterations=5):
def ndarray_print(nd):
@functools.lru_cache() DCNL def resolve_address(host, port):
def cell(value):
def empty_cell(empty=True):
def to_ulps(x):
def ulp(x):
def count_set_bits(n):
def partial_product(start, stop):
def py_factorial(n):
def ulp_abs_check(expected, got, ulp_tol, abs_tol):
def parse_mtestfile(fname):
def parse_testfile(fname):
def result_check(expected, got, ulp_tol=5, abs_tol=0.0):
def verbose_print(arg):
def requires_load_dynamic(meth):
def parameterize(cls):
@contextlib.contextmanager DCNL def kill_on_error(proc):
def pdb_invoke(method, arg):
def consts(t):
def dump(co):
def func2():
def _ctrl_handler(sig):
def _interact(cookiejar, url, set_cookie_hdrs, hdr_name):
def evaluate_slice_index(arg):
def slice_indices(slice, length):
def test_telnet(reads=(), cls=TelnetAlike):
def R(seqn):
def L(seqn):
def skip_if_ABSTFN_contains_backslash(test):
def onearg(x):
def errfunc(*args):
def gen3():
def isEven(x):
def isOdd(x):
def take(n, seq):
def fact(n):
def R(seqn):
def L(seqn):
def strtod(s, mant_dig=53, min_exp=(-1021), max_exp=1024):
def replace_stdout():
def bind_af_aware(sock, addr):
@contextlib.contextmanager DCNL def sys_modules_context():
@contextlib.contextmanager DCNL def namespace_tree_context(**kwargs):
def _have_socket_can():
def _have_socket_rds():
def _have_socket_alg():
def skipWithClientIf(condition, reason):
def requireAttrs(obj, *attributes):
def requireSocket(*args):
def isTipcAvailable():
def dbcheck(exprstr, globals=None, locals=None):
def countcalls(counts):
def hexescape(char):
def urlopen(url, data=None, proxies=None):
def compile(file, cfile=None, dfile=None, doraise=False, optimize=(-1)):
def main(args=None):
def _extract_future_flags(globs):
def _normalize_module(module, depth=2):
def _indent(s, indent=4):
def _exception_traceback(exc_info):
def _ellipsis_match(want, got):
def _comment_line(line):
def testmod(m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False):
def testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser(), encoding=None):
def run_docstring_examples(f, globs, verbose=False, name='NoName', compileflags=None, optionflags=0):
def set_unittest_reportflags(flags):
def DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, **options):
def DocFileSuite(*paths, **kw):
def script_from_examples(s):
def testsource(module, name):
def debug_src(src, pm=False, globs=None):
def debug_script(src, pm=False, globs=None):
def debug(module, name, pm=False):
def copy(x):
def deepcopy(x, memo=None, _nil=[]):
def _keep_alive(x, memo):
def url2pathname(url):
def pathname2url(p):
def start_new_thread(function, args, kwargs={}):
def exit():
def get_ident():
def allocate_lock():
def stack_size(size=None):
def _set_sentinel():
def interrupt_main():
def make_parser(parser_list=[]):
def __dict_replace(s, d):
def escape(data, entities={}):
def unescape(data, entities={}):
def quoteattr(data, entities={}):
def prepare_input_source(source, base=''):
def parse(file, namespaces=True):
def parseString(string, namespaces=True):
def parseFragment(file, context, namespaces=True):
def parseFragmentString(string, context, namespaces=True):
def makeBuilder(options):
def registerDOMImplementation(name, factory):
def _good_enough(dom, features):
def getDOMImplementation(name=None, features=()):
def _write_data(writer, data):
def _clone_node(node, deep, newOwnerDocument):
def parse(file, parser=None, bufsize=None):
def parseString(string, parser=None):
def open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None):
def compress(data, compresslevel=9):
def decompress(data):
def quote(s):
def _find_executable(executable, path=None):
def _read_output(commandstring):
def _find_build_tool(toolname):
def _get_system_version():
def _remove_original_values(_config_vars):
def _save_modified_value(_config_vars, cv, newvalue):
def _supports_universal_builds():
def _find_appropriate_compiler(_config_vars):
def _remove_universal_flags(_config_vars):
def _remove_unsupported_archs(_config_vars):
def _override_all_archs(_config_vars):
def _check_for_unavailable_sdk(_config_vars):
def compiler_fixup(compiler_so, cc_args):
def customize_config_vars(_config_vars):
def customize_compiler(_config_vars):
def get_platform_osx(_config_vars, osname, release, machine):
def open(file, flag='r', mode=438):
def whichdb(filename):
def Internaldate2tuple(resp):
def Int2AP(num):
def ParseFlags(resp):
def Time2Internaldate(date_time):
def _infer_return_type(*args):
def _sanitize_params(prefix, suffix, dir):
def _candidate_tempdir_list():
def _get_default_tempdir():
def _get_candidate_names():
def _mkstemp_inner(dir, pre, suf, flags, output_type):
def gettempprefix():
def gettempprefixb():
def gettempdir():
def gettempdirb():
def mkstemp(suffix=None, prefix=None, dir=None, text=False):
def mkdtemp(suffix=None, prefix=None, dir=None):
def mktemp(suffix='', prefix=template, dir=None):
def NamedTemporaryFile(mode='w+b', buffering=(-1), encoding=None, newline=None, suffix=None, prefix=None, dir=None, delete=True):
def match(pattern, string, flags=0):
def fullmatch(pattern, string, flags=0):
def search(pattern, string, flags=0):
def sub(pattern, repl, string, count=0, flags=0):
def subn(pattern, repl, string, count=0, flags=0):
def split(pattern, string, maxsplit=0, flags=0):
def findall(pattern, string, flags=0):
def finditer(pattern, string, flags=0):
def compile(pattern, flags=0):
def purge():
def template(pattern, flags=0):
def escape(pattern):
def new_module(name):
def get_magic():
def get_tag():
def cache_from_source(path, debug_override=None):
def source_from_cache(path):
def get_suffixes():
def load_compiled(name, pathname, file=None):
def load_package(name, path):
def load_module(name, file, filename, details):
def find_module(name, path=None):
def reload(module):
def init_builtin(name):
def getopt(args, shortopts, longopts=[]):
def gnu_getopt(args, shortopts, longopts=[]):
def clear_cache():
def urlparse(url, scheme='', allow_fragments=True):
def urlsplit(url, scheme='', allow_fragments=True):
def urlunparse(components):
def urlunsplit(components):
def urljoin(base, url, allow_fragments=True):
def urldefrag(url):
def unquote_to_bytes(string):
def unquote(string, encoding='utf-8', errors='replace'):
def parse_qs(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace'):
def parse_qsl(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace'):
def unquote_plus(string, encoding='utf-8', errors='replace'):
def quote(string, safe='/', encoding=None, errors=None):
def quote_plus(string, safe='', encoding=None, errors=None):
def quote_from_bytes(bs, safe='/'):
def urlencode(query, doseq=False, safe='', encoding=None, errors=None, quote_via=quote_plus):
def to_bytes(url):
def unwrap(url):
def splittype(url):
def splithost(url):
def splituser(host):
def splitpasswd(user):
def splitport(host):
def splitnport(host, defport=(-1)):
def splitquery(url):
def splittag(url):
def splitattr(url):
def splitvalue(attr):
def reset():
def lookup(name, frame, locals):
def scanvars(reader, frame, locals):
def html(einfo, context=5):
def text(einfo, context=5):
def enable(display=1, logdir=None, context=5, format='html'):
def randbelow(exclusive_upper_bound):
def token_bytes(nbytes=None):
def token_hex(nbytes=None):
def token_urlsafe(nbytes=None):
def open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None):
def compress(data, compresslevel=9):
def decompress(data):
def compile_command(source, filename='<input>', symbol='single'):
def libc_ver(executable=sys.executable, lib='', version='', chunksize=16384):
def _dist_try_harder(distname, version, id):
def _linux_distribution(distname, version, id, supported_dists, full_distribution_name):
def dist(distname='', version='', id='', supported_dists=_supported_dists):
def popen(cmd, mode='r', bufsize=(-1)):
def _norm_version(version, build=''):
def _syscmd_ver(system='', release='', version='', supported_platforms=('win32', 'win16', 'dos')):
def mac_ver(release='', versioninfo=('', '', ''), machine=''):
def java_ver(release='', vendor='', vminfo=('', '', ''), osinfo=('', '', '')):
def system_alias(system, release, version):
def _platform(*args):
def _node(default=''):
def _follow_symlinks(filepath):
def _syscmd_uname(option, default=''):
def _syscmd_file(target, default=''):
def architecture(executable=sys.executable, bits='', linkage=''):
def uname():
def system():
def node():
def release():
def version():
def machine():
def processor():
def _sys_version(sys_version=None):
def python_implementation():
def python_version():
def python_version_tuple():
def python_branch():
def python_revision():
def python_build():
def python_compiler():
def platform(aliased=0, terse=0):
def getcaps():
def listmailcapfiles():
def readmailcapfile(fp):
def _readmailcapfile(fp, lineno):
def parseline(line):
def parsefield(line, i, n):
def findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=[]):
def mksalt(method=None):
def crypt(word, salt=None):
def normalize_encoding(encoding):
def segregate(str):
def selective_len(str, max):
def selective_find(str, char, index, pos):
def insertion_unsort(str, extended):
def generate_generalized_integer(N, bias):
def generate_integers(baselen, deltas):
def decode_generalized_number(extended, extpos, bias, errors):
def insertion_sort(base, extended, errors):
def _nest_function(ob, func_name, lineno):
def _nest_class(ob, class_name, lineno, super=None):
def readmodule(module, path=None):
def readmodule_ex(module, path=None):
def _readmodule(module, path, inpackage=None):
def _create_tree(fullmodule, path, fname, source, tree, inpackage):
def _getnamelist(g):
def _getname(g):
def _main():
def needsquoting(c, quotetabs, header):
def quote(c):
def encode(input, output, quotetabs, header=False):
def decode(input, output, header=False):
def ishex(c):
def unhex(s):
@dispatch(object, (basestring, list, tuple)) DCNL def create_index(t, column_name_or_names, name=None):
@dispatch(sa.Table, basestring) DCNL def create_index(s, column, **kwargs):
@dispatch(sa.Table, (list, tuple)) DCNL def create_index(s, columns, name=None, unique=False, ignore_existing=False, concurrently=False):
def nth_list(n, seq):
def get(ind, coll, lazy=False):
def ndget(ind, data):
def listpack(x):
def normalize(s):
def literal_compile(s):
def ordered_intersect(*sets):
def parameter_space(*args):
def as_attribute(ob, name=None):
def concrete_type(ds):
def test_functions_as_bound_methods():
def assert_series_equal(left, right, check_names=True, **kwargs):
def deprecated(version, replacement=None):
def count_values(expr, sort=True):
def resolve_args(cls, *args, **kwargs):
def get_callable_name(o):
def _str(s):
def subs(o, d):
@dispatch(Node, Mapping) DCNL def _subs(o, d):
@dispatch(object, Mapping) DCNL def _subs(o, d):
def path(a, b):
def common_subexpression(expr, *exprs):
def eval_str(expr):
def parenthesize(s):
def match(condition, data):
def name(func):
def select_functions(methods, data):
def hashable_index(index):
def replace_slices(index):
def maxvar(L):
def maxshape(shapes):
def lean_projection(expr):
@dispatch(Symbol) DCNL def _lean(expr, fields=None):
@dispatch(Expr) DCNL def _lean(expr, fields=None):
@dispatch(Selection) DCNL def simple_selections(expr):
def test_join_exceptions():
@pytest.fixture(scope='module') DCNL def strcat_sym():
def isvalid_identifier(s):
def valid_identifier(s):
@dispatch(Symbol, Mapping) DCNL def _subs(o, d):
def sanitize_index_lists(ind):
@dispatch(object) DCNL def shape(expr):
def ndim(expr):
def drop_field(expr, field, *fields):
def varargsexpr(args):
def normalize_time_unit(s):
def truncate(expr, *args, **kwargs):
def scalar_symbols(exprs):
def broadcast_collect(expr, broadcastable=Broadcastable, want_to_broadcast=WantToBroadcast, no_recurse=None):
@curry DCNL def leaves_of_type(types, expr):
def vnorm(expr, ord=None, axis=None, keepdims=False):
def sort(child, key=None, ascending=True):
def schema_concat(exprs):
def _wrap(ob, name):
def transform(expr, replace=True, **kwargs):
def unpack(l):
def types_of_fields(fields, expr):
@copydoc(StrCat) DCNL def cat(lhs, rhs, sep=None):
def path_split(leaf, expr):
def split(leaf, expr, chunk=None, agg=None, **kwargs):
def dimension_div(a, b):
def dimension_mul(a, b):
def aggregate_shape(leaf, expr, chunk, chunk_expr):
def truncate(expr, precision):
@dispatch(object) DCNL def scrub_keys(o):
def concrete_head(expr, n=10):
def data_spider(path, ignore=(ValueError, NotImplementedError), followlinks=True, hidden=False, extra_kwargs=None):
@contextmanager DCNL def pushd(path):
def from_yaml(fh, ignore=(ValueError, NotImplementedError), followlinks=True, hidden=False, relative_to_yaml_dir=False):
@object_hook_trusted.register('callable') DCNL def numpy_pandas_function_from_str(f):
def object_hook(ob, _len=len, _keys=_keys, _first_three_chars=np.s_[:3], _converters=_converters):
@pytest.yield_fixture(params=[None, tdata]) DCNL def temp_server(request):
@pytest.yield_fixture(params=[None, tdata]) DCNL def temp_add_server(request):
@pytest.yield_fixture(params=[None, tdata]) DCNL def temp_server_with_excfmt(request):
def serialize_query_with_map_builtin_function(test, serial, fcn):
@pytest.mark.xfail(reason='pickle DCSP does DCSP not DCSP produce DCSP same DCSP error') DCNL @pytest.mark.parametrize('serial', all_formats) DCNL def test_builtin_403_exception(iris_server, serial):
def _register_api(app, options, first_registration=False):
def expr_md5(expr):
def _prof_path(profiler_output, expr):
def to_tree(expr, names=None):
def expression_from_name(name):
def from_tree(expr, namespace=None):
@cross_origin(origins='*', methods=['POST', 'HEAD', 'OPTIONS']) DCNL @authorization DCNL @check_request DCNL @_logging DCNL def addserver(payload, serial):
def mimetype(serial):
@dispatch(Expr, Client) DCNL def compute_down(expr, ec, profiler_output=None, compute_kwargs=None, odo_kwargs=None, **kwargs):
def slices1d(n, k, keepdims=False):
def flatten(x):
@dispatch(Expr, object) DCNL def pre_compute(leaf, data, scope=None, **kwargs):
@dispatch(Expr, object) DCNL def post_compute(expr, result, scope=None):
@dispatch(Expr, object) DCNL def optimize(expr, data):
@dispatch(object) DCNL def compute_down(expr, **kwargs):
def issubtype(a, b):
def type_change(old, new):
def top_then_bottom_then_top_again_etc(expr, scope, **kwargs):
def makeleaf(expr):
def bottom_up_until_type_break(expr, scope, **kwargs):
def swap_resources_into_scope(expr, scope):
@dispatch(Expr, Mapping) DCNL def compute(expr, d, return_type=no_default, **kwargs):
@compute.register(Expr, object) DCNL def compute_single_object(expr, o, **kwargs):
def coerce_core(result, dshape, odo_kwargs=None):
def unsafe_inner_columns(s):
def inner_columns(s):
def select(s):
def name(sel):
def lower_column(col):
@toolz.memoize DCNL def alias_it(s):
def is_nested_record(measure):
@dispatch(sa.sql.elements.Label) DCNL def get_unsafe_inner_columns(label):
@dispatch((Iterable, Selectable)) DCNL def _coerce_op_input(i):
@dispatch(ColumnElement) DCNL def _coerce_op_input(i):
def literalquery(statement, dialect=None):
def print_python(leaves, expr):
def funcstr(leaves, expr):
def lambdify(leaves, expr):
def test_str_cat_where_clause(sql_with_null):
def optimize(expr, data):
@pytest.mark.parametrize('sep', [None, ' DCSP sep DCSP ']) DCNL def test_str_cat(sep):
def test_str_cat_no_runtime_exception():
@pytest.mark.parametrize('attr, DCSP args, DCSP expected', [('days', [], 7), ('nanoseconds', [], 0), ('seconds', [], 0), ('total_seconds', [], 604800.0)]) DCNL def test_td_namespace(attr, args, expected):
def test_arithmetic_on_small_array_from_file(file):
@dispatch(Expr, SQLContext) DCNL def compute_down(expr, data, **kwargs):
def recursive_rowfunc(t, stop):
@dispatch(Projection) DCNL def rowfunc(t):
def concat_maybe_tuples(vals):
def deepmap(func, *data, **kwargs):
def reduce_by_funcs(t):
def pair_assemble(t, on_left=None, on_right=None):
@dispatch(Join, Sequence, Sequence) DCNL def compute_up(t, lhs, rhs, **kwargs):
@memoize(cache=WeakKeyDictionary()) DCNL def box(type_):
@dispatch(Head, (box(bcolz.ctable), box(bcolz.carray))) DCNL def compute_down(expr, data, **kwargs):
def _interp(arr, v, _Series=pd.Series, _charmod=np.char.mod):
def axify(expr, axis, keepdims=False):
@dispatch(Slice, h5py.Dataset) DCNL def pre_compute(expr, data, scope=None, **kwargs):
@dispatch(Expr, h5py.Dataset) DCNL def pre_compute(expr, data, scope=None, **kwargs):
@dispatch(Expr, h5py.Dataset) DCNL def post_compute(expr, data, scope=None):
def compute_chunk(source, target, chunk, chunk_expr, parts):
@dispatch(Expr, h5py.Dataset) DCNL def compute_down(expr, data, map=None, **kwargs):
def compute_sub(t):
@dispatch(Reduction) DCNL def group_apply(expr):
@dispatch(Expr, Collection) DCNL def post_compute(e, c, scope=None):
@dispatch(Expr, MongoQuery) DCNL def post_compute(e, q, scope=None):
@dispatch(Broadcast, MongoQuery) DCNL def post_compute(e, q, scope=None):
def name(e):
@dispatch(object) DCNL def match(expr):
def print_numexpr(leaves, expr):
def flatten(ts):
def _varargs_materialize(expr, *args, **kwargs):
def register_varargs_arity(arity, type_=object):
def truncate_year(dt, measure):
def truncate_month(dt, measure):
def truncate_day(dt, measure):
def truncate_week(dt, measure):
def utctotimestamp(dt):
def truncate_minute(dt, measure):
def truncate_hour(dt, measure):
def truncate_second(dt, measure):
def truncate_millisecond(dt, measure):
def truncate_microsecond(dt, measure):
def truncate(dt, measure, unit):
def get_numba_type(dshape):
def compute_signature(expr):
def _get_numba_ufunc(expr):
@dispatch(Join, DataFrame, DataFrame) DCNL def compute_up(t, lhs, rhs, **kwargs):
def unpack(seq):
def _name(expr):
def fancify_summary(expr):
def concat_nodup(a, b):
def _merge(module):
def jgetattr(data, attr, default=None):
def sh(cmd):
def sh2(cmd):
def sh3(cmd):
def init_repo(path):
def comment_image(browser, comments):
def login_user(browser, username, password, switch_language=True):
def check_image(browser, clarifai_id, clarifai_secret, img_tags, full_match=False):
def given_tags_in_result(search_tags, clarifai_tags, full_match=False):
def get_imagelink(browser):
def get_like_on_feed(browser, amount):
def log_follower_num(browser, username):
def log_followed_pool(login, followed):
def get_links_for_location(browser, location, amount, media=None):
def get_links_for_tag(browser, tag, amount, media=None):
def get_links_for_username(browser, username, amount, is_random=False, media=None):
def like_image(browser):
def get_tags(browser, url):
def unfollow(browser, username, amount, dont_include, onlyInstapyFollowed, automatedFollowedPool):
def follow_user(browser, follow_restrict, login, user_name):
def follow_given_user(browser, acc_to_follow, follow_restrict):
def dump_follow_restriction(followRes):
def load_follow_restriction():
def customize_mpl():
def _process_parameters(dim, mean, cov):
def _process_quantiles(x, dim):
def _squeeze_output(out):
def _pinv_1d(v, eps=1e-05):
def _psd_pinv_decomposed_log_pdet(mat, cond=None, rcond=None, lower=True, check_finite=True):
def cube_vertices(x, y, z, n):
def tex_coord(x, y, n=4):
def tex_coords(top, bottom, side):
def normalize(position):
def sectorize(position):
def setup_fog():
def setup():
def sineTimeScaling(sfreq, smag, timeScaling):
def sineFreqScaling(sfreq, freqScaling):
def hpsTimeScale(hfreq, hmag, stocEnv, timeScaling):
def hpsMorph(hfreq1, hmag1, stocEnv1, hfreq2, hmag2, stocEnv2, hfreqIntp, hmagIntp, stocIntp):
def stftFiltering(x, fs, w, N, H, filter):
def stftMorph(x1, x2, fs, w1, N1, w2, N2, H1, smoothf, balancef):
def harmonicFreqScaling(hfreq, hmag, freqScaling, freqStretching, timbrePreservation, fs):
def stochasticTimeScale(stocEnv, timeScaling):
def spsModelAnal(x, fs, w, N, H, t, minSineDur, maxnSines, freqDevOffset, freqDevSlope, stocf):
def spsModelSynth(tfreq, tmag, tphase, stocEnv, N, H, fs):
def spsModel(x, fs, w, N, t, stocf):
def hpsModelAnal(x, fs, w, N, H, t, nH, minf0, maxf0, f0et, harmDevSlope, minSineDur, Ns, stocf):
def hpsModelSynth(hfreq, hmag, hphase, stocEnv, N, H, fs):
def hpsModel(x, fs, w, N, t, nH, minf0, maxf0, f0et, stocf):
def sprModelAnal(x, fs, w, N, H, t, minSineDur, maxnSines, freqDevOffset, freqDevSlope):
def sprModelSynth(tfreq, tmag, tphase, xr, N, H, fs):
def sprModel(x, fs, w, N, t):
def stft(x, w, N, H):
def stftAnal(x, w, N, H):
def stftSynth(mY, pY, M, H):
def dftModel(x, w, N):
def dftAnal(x, w, N):
def dftSynth(mX, pX, M):
def isPower2(num):
def wavread(filename):
def wavplay(filename):
def wavwrite(y, fs, filename):
def peakDetection(mX, t):
def peakInterp(mX, pX, ploc):
def sinc(x, N):
def genBhLobe(x):
def genSpecSines(ipfreq, ipmag, ipphase, N, fs):
def genSpecSines_p(ipfreq, ipmag, ipphase, N, fs):
def sinewaveSynth(freqs, amp, H, fs):
def cleaningTrack(track, minTrackLength=3):
def f0Twm(pfreq, pmag, ef0max, minf0, maxf0, f0t=0):
def TWM_p(pfreq, pmag, f0c):
def sineSubtraction(x, N, H, sfreq, smag, sphase, fs):
def stochasticResidualAnal(x, N, H, sfreq, smag, sphase, fs, stocf):
def stochasticModelAnal(x, H, N, stocf):
def stochasticModelSynth(stocEnv, H, N):
def stochasticModel(x, H, N, stocf):
def sineTracking(pfreq, pmag, pphase, tfreq, freqDevOffset=20, freqDevSlope=0.01):
def cleaningSineTracks(tfreq, minTrackLength=3):
def sineModel(x, fs, w, N, t):
def sineModelAnal(x, fs, w, N, H, t, maxnSines=100, minSineDur=0.01, freqDevOffset=20, freqDevSlope=0.01):
def sineModelSynth(tfreq, tmag, tphase, N, H, fs):
def hprModelAnal(x, fs, w, N, H, t, minSineDur, nH, minf0, maxf0, f0et, harmDevSlope):
def hprModelSynth(hfreq, hmag, hphase, xr, N, H, fs):
def hprModel(x, fs, w, N, t, nH, minf0, maxf0, f0et):
def f0Detection(x, fs, w, N, H, t, minf0, maxf0, f0et):
def harmonicDetection(pfreq, pmag, pphase, f0, nH, hfreqp, fs, harmDevSlope=0.01):
def harmonicModel(x, fs, w, N, t, nH, minf0, maxf0, f0et):
def harmonicModelAnal(x, fs, w, N, H, t, nH, minf0, maxf0, f0et, harmDevSlope=0.01, minSineDur=0.02):
def main(inputFile='../../sounds/bendir.wav', window='hamming', M=2001, N=2048, t=(-80), minSineDur=0.02, maxnSines=150, freqDevOffset=10, freqDevSlope=0.001):
def main(inputFile='../../sounds/piano.wav', window='hamming', M=1024, N=1024, H=512):
def main(inputFile='../../sounds/bendir.wav', window='hamming', M=2001, N=2048, t=(-80), minSineDur=0.02, maxnSines=150, freqDevOffset=10, freqDevSlope=0.001):
def main(inputFile='../../sounds/ocean.wav', H=256, N=512, stocf=0.1):
def main(inputFile='../../sounds/sax-phrase-short.wav', window='blackman', M=601, N=1024, t=(-100), minSineDur=0.1, nH=100, minf0=350, maxf0=700, f0et=5, harmDevSlope=0.01):
def main(inputFile='../../sounds/sax-phrase-short.wav', window='blackman', M=601, N=1024, t=(-100), minSineDur=0.1, nH=100, minf0=350, maxf0=700, f0et=5, harmDevSlope=0.01, stocf=0.1):
def main(inputFile='../../sounds/piano.wav', window='blackman', M=511, N=1024, time=0.2):
def main(inputFile='../../sounds/bendir.wav', window='hamming', M=2001, N=2048, t=(-80), minSineDur=0.02, maxnSines=150, freqDevOffset=10, freqDevSlope=0.001, stocf=0.2):
def main(inputFile='../../sounds/vignesh.wav', window='blackman', M=1201, N=2048, t=(-90), minSineDur=0.1, nH=100, minf0=130, maxf0=300, f0et=7, harmDevSlope=0.01):
def main(inputFile='../../sounds/rain.wav', stocf=0.1, timeScaling=np.array([0, 0, 1, 2])):
def main(inputFile1='../../sounds/ocean.wav', inputFile2='../../sounds/speech-male.wav', window1='hamming', window2='hamming', M1=1024, M2=1024, N1=1024, N2=1024, H1=256, smoothf=0.5, balancef=0.2):
def analysis(inputFile1='../../sounds/violin-B3.wav', window1='blackman', M1=1001, N1=1024, t1=(-100), minSineDur1=0.05, nH=60, minf01=200, maxf01=300, f0et1=10, harmDevSlope1=0.01, stocf=0.1, inputFile2='../../sounds/soprano-E4.wav', window2='blackman', M2=901, N2=1024, t2=(-100), minSineDur2=0.05, minf02=250, maxf02=500, f0et2=10, harmDevSlope2=0.01):
def transformation_synthesis(inputFile1, fs, hfreq1, hmag1, stocEnv1, inputFile2, hfreq2, hmag2, stocEnv2, hfreqIntp=np.array([0, 0, 0.1, 0, 0.9, 1, 1, 1]), hmagIntp=np.array([0, 0, 0.1, 0, 0.9, 1, 1, 1]), stocIntp=np.array([0, 0, 0.1, 0, 0.9, 1, 1, 1])):
def analysis(inputFile='../../sounds/vignesh.wav', window='blackman', M=1201, N=2048, t=(-90), minSineDur=0.1, nH=100, minf0=130, maxf0=300, f0et=7, harmDevSlope=0.01):
def transformation_synthesis(inputFile, fs, hfreq, hmag, freqScaling=np.array([0, 2.0, 1, 0.3]), freqStretching=np.array([0, 1, 1, 1.5]), timbrePreservation=1, timeScaling=np.array([0, 0.0, 0.671, 0.671, 1.978, (1.978 + 1.0)])):
def analysis(inputFile='../../sounds/mridangam.wav', window='hamming', M=801, N=2048, t=(-90), minSineDur=0.01, maxnSines=150, freqDevOffset=20, freqDevSlope=0.02):
def transformation_synthesis(inputFile, fs, tfreq, tmag, freqScaling=np.array([0, 2.0, 1, 0.3]), timeScaling=np.array([0, 0.0, 0.671, 0.671, 1.978, (1.978 + 1.0)])):
def analysis(inputFile='../../sounds/sax-phrase-short.wav', window='blackman', M=601, N=1024, t=(-100), minSineDur=0.1, nH=100, minf0=350, maxf0=700, f0et=5, harmDevSlope=0.01, stocf=0.1):
def transformation_synthesis(inputFile, fs, hfreq, hmag, mYst, freqScaling=np.array([0, 1.2, 2.01, 1.2, 2.679, 0.7, 3.146, 0.7]), freqStretching=np.array([0, 1, 2.01, 1, 2.679, 1.5, 3.146, 1.5]), timbrePreservation=1, timeScaling=np.array([0, 0, 2.138, (2.138 - 1.0), 3.146, 3.146])):
def downloadSoundsFreesound(queryText='', API_Key='', outputDir='', topNResults=5, tag=None, duration=None, featureExt='.json'):
def check_oplog(con, warning, critical, perf_data):
def check_journal_commits_in_wl(con, warning, critical, perf_data):
def check_journaled(con, warning, critical, perf_data):
def check_write_to_datafiles(con, warning, critical, perf_data):
def check_opcounters(con, host, port, warning, critical, perf_data):
def check_current_lock(con, host, port, warning, critical, perf_data):
def check_page_faults(con, host, port, warning, critical, perf_data):
def check_asserts(con, host, port, warning, critical, perf_data):
def get_stored_primary_server_name(db):
def check_replica_primary(con, host, warning, critical, perf_data, replicaset, mongo_version):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def python_2_unicode_compatible(klass):
def reset_cache(module=None):
def tmpfile(pref='peda-', is_binary_file=False):
def colorize(text, color=None, attrib=None):
def green(text, attrib=None):
def red(text, attrib=None):
def yellow(text, attrib=None):
def blue(text, attrib=None):
def clearscreen():
def warning_msg(text):
def error_msg(text):
def debug_msg(text, prefix='Debug'):
def trim(docstring):
def pager(text, pagesize=None):
def execute_external_command(command, cmd_input=None):
def is_printable(text, printables=''):
def is_math_exp(str):
def normalize_argv(args, size=0):
def to_hexstr(str_):
def to_hex(num):
def to_address(num):
def to_int(val):
def str2hex(str):
def hex2str(hexnum, intsize=4):
def int2hexstr(num, intsize=4):
def list2hexstr(intlist, intsize=4):
def str2intlist(data, intsize=4):
@memoized DCNL def check_badchars(data, chars=None):
@memoized DCNL def format_address(addr, type):
@memoized DCNL def format_reference_chain(chain):
@memoized DCNL def format_disasm_code(code, nearby=None):
def cyclic_pattern_charset(charset_type=None):
def de_bruijn(charset, n, maxlen):
@memoized DCNL def cyclic_pattern(size=None, start=None, charset_type=None):
@memoized DCNL def cyclic_pattern_offset(value):
def cyclic_pattern_search(buf):
def _decode_string_escape_py2(str_):
def _decode_string_escape_py3(str_):
def decode_string_escape(str_):
def bytes_iterator(bytes_):
def _bytes_iterator_py2(bytes_):
def _bytes_iterator_py3(bytes_):
def bytes_chr(i):
def _bytes_chr_py2(i):
def _bytes_chr_py3(i):
def to_binary_string(text):
def _to_binary_string_py2(text):
def _to_binary_string_py3(text):
def dbg_print_vars(*args):
def string_repr(text, show_quotes=True):
def _make_values_bytes(dict_):
def bool_int(value):
def make_backup(cleanup=False, scheduler=False):
def initialize_scheduler():
def schedule_job(function, name, hours=0, minutes=0, seconds=0, args=None):
def db_filename(filename=FILENAME):
def make_backup(cleanup=False, scheduler=False):
def addtoapi(*dargs, **dkwargs):
def latinToAscii(unicrap):
def split_path(f):
def create_https_certificates(ssl_cert, ssl_key):
def anon_url(*url):
def uploadToImgur(imgPath, imgTitle=''):
def cache_image(url, image=None):
def build_datatables_json(kwargs, dt_columns, default_sort_col=None):
def get_session_info():
def get_session_user():
def get_session_user_id():
def get_session_shared_libraries():
def get_session_library_filters():
def get_session_library_filters_type(filters, media_type=None):
def allow_session_user(user_id):
def allow_session_library(section_id):
def friendly_name_to_username(list_of_dicts):
def filter_session_info(list_of_dicts, filter_key=None):
def mask_session_info(list_of_dicts, mask_metadata=True):
def tail(f, lines=1, _buffer=4098):
def check_credentials(username, password, admin_login='0'):
def check_auth(*args, **kwargs):
def requireAuth(*conditions):
def any_of(*conditions):
def all_of(*conditions):
@contextlib.contextmanager DCNL def listener():
def initMultiprocessing():
def initLogger(console=False, log_dir=False, verbose=False):
def initHooks(global_exceptions=True, thread_exceptions=True, pass_original=True):
def request_response(url, method='get', auto_raise=True, whitelist_status_code=None, lock=fake_lock, **kwargs):
def request_soup(url, **kwargs):
def request_minidom(url, **kwargs):
def request_json(url, **kwargs):
def request_content(url, **kwargs):
def request_feed(url, **kwargs):
def server_message(response):
def dict_to_sequence(d):
def get_netrc_auth(url, raise_errors=False):
def guess_filename(obj):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def unquote_unreserved(uri):
def requote_uri(uri):
def address_in_network(ip, net):
def dotted_netmask(mask):
def is_valid_cidr(string_network):
def should_bypass_proxies(url):
def get_environ_proxies(url):
def select_proxy(url, proxies):
def default_user_agent(name='python-requests'):
def parse_header_links(value):
def prepend_scheme_if_needed(url, new_scheme):
def get_auth_from_url(url):
def to_native_string(string, encoding='ascii'):
def urldefragauth(url):
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):
def merge_cookies(cookiejar, cookies):
def description_of(lines, name=u'stdin'):
def main(argv=None):
def backport_makefile(self, mode='r', buffering=None, encoding=None, errors=None, newline=None):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d):
def itervalues(d):
def iteritems(d):
def with_metaclass(meta, base=object):
def _dnsname_match(dn, hostname, max_wildcards=1):
def match_hostname(cert, hostname):
def add_stderr_logger(level=logging.DEBUG):
def disable_warnings(category=exceptions.HTTPWarning):
def guess_content_type(filename, default='application/octet-stream'):
def format_header_param(name, value):
def choose_boundary():
def iter_field_objects(fields):
def iter_fields(fields):
def encode_multipart_formdata(fields, boundary=None):
def is_fp_closed(obj):
def assert_header_parsing(headers):
def is_response_to_head(response):
def current_time():
def _const_compare_digest_backport(a, b):
def assert_fingerprint(cert, fingerprint):
def resolve_cert_reqs(candidate):
def resolve_ssl_version(candidate):
def create_urllib3_context(ssl_version=None, cert_reqs=None, options=None, ciphers=None):
def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None, ca_certs=None, server_hostname=None, ssl_version=None, ciphers=None, ssl_context=None, ca_cert_dir=None):
def is_connection_dropped(conn):
def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT, source_address=None, socket_options=None):
def split_first(s, delims):
def parse_url(url):
def get_host(url):
def make_headers(keep_alive=None, accept_encoding=None, user_agent=None, basic_auth=None, proxy_basic_auth=None, disable_cache=None):
def connection_from_url(url, **kw):
def inject_into_urllib3():
def extract_from_urllib3():
def _basic_auth_str(username, password):
def dispatch_hook(key, hooks, hook_data, **kwargs):
def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):
def session():
def request(method, url, **kwargs):
def get(url, params=None, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, json=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d, **kw):
def itervalues(d, **kw):
def iteritems(d, **kw):
def iterlists(d, **kw):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def flatten_errors(cfg, res, levels=None, results=None):
def get_extra_values(conf, _prepend=()):
def memorized_timedelta(seconds):
def memorized_datetime(seconds):
def memorized_ttinfo(*args):
def _to_seconds(td):
def unpickler(zone, utcoffset=None, dstoffset=None, tzname=None):
def open_resource(name):
def resource_exists(name):
def timezone(zone):
def _unmunge_zone(zone):
def _UTC():
def _p(*args):
def FixedOffset(offset, _tzinfos={}):
def _byte_string(s):
def _std_string(s):
def register_treebuilders_from(module):
def _alias(attr):
def diagnose(data):
def lxml_trace(data, html=True, **kwargs):
def htmlparser_trace(data):
def rword(length=5):
def rsentence(length=4):
def rdoc(num_elements=1000):
def benchmark_parsers(num_elements=100000):
def make_hash(password):
def check_hash(password, hash_):
def get_supported_platform():
def register_loader_type(loader_type, provider_factory):
def get_provider(moduleOrReq):
def get_build_platform():
def compatible_platforms(provided, required):
def run_script(dist_spec, script_name):
def get_distribution(dist):
def load_entry_point(dist, group, name):
def get_entry_map(dist, group=None):
def get_entry_info(dist, group, name):
def get_default_cache():
def safe_name(name):
def safe_version(version):
def safe_extra(extra):
def to_filename(name):
def register_finder(importer_type, distribution_finder):
def find_distributions(path_item, only=False):
def find_eggs_in_zip(importer, path_item, only=False):
def find_on_path(importer, path_item, only=False):
def register_namespace_handler(importer_type, namespace_handler):
def _handle_ns(packageName, path_item):
def declare_namespace(packageName):
def fixup_namespace_packages(path_item, parent=None):
def file_ns_handler(importer, path_item, packageName, module):
def normalize_path(filename):
def yield_lines(strs):
def parse_version(s):
def parse_requirements(strs):
def _get_mro(cls):
def _find_adapter(registry, ob):
def ensure_directory(path):
def _bypass_ensure_directory(path, mode=511):
def split_sections(s):
def to_sax(walker, handler):
def SerializeError(Exception):
def getTreeBuilder(treeType, implementation=None, **kwargs):
def tostring(element):
def parse(doc, treebuilder=u'etree', encoding=None, namespaceHTMLElements=True):
def codecName(encoding):
def to_text(s, blank_if_none=True):
def is_text_or_none(string):
def getTreeWalker(treeType, implementation=None, **kwargs):
def asint(text):
def asbool(obj):
def astimezone(obj):
def convert_to_datetime(input, tz, arg_name):
def datetime_to_utc_timestamp(timeval):
def utc_timestamp_to_datetime(timestamp):
def timedelta_seconds(delta):
def datetime_ceil(dateval):
def get_callable_name(func):
def obj_to_ref(obj):
def ref_to_obj(ref):
def maybe_ref(ref):
def check_callable_args(func, args, kwargs):
def run_job(job, jobstore_alias, run_times, logger_name):
def _parseAddressIPv6(ipstr):
def parseAddress(ipstr):
def intToIp(ip, version):
def _ipVersionToLen(version):
def _countFollowingZeros(l):
def _intToBin(val):
def _count1Bits(num):
def _count0Bits(num):
def _checkPrefix(ip, prefixlen, version):
def _checkNetmask(netmask, masklen):
def _checkNetaddrWorksWithPrefixlen(net, prefixlen, version):
def _netmaskToPrefixlen(netmask):
def _prefixlenToNetmask(prefixlen, version):
def dictConfig(config):
def hasHandlers(logger):
def parse_url(url):
def get_proxy_info(hostname, is_secure, proxy_host=None, proxy_port=0, proxy_auth=None, no_proxy=None):
def setdefaulttimeout(timeout):
def getdefaulttimeout():
def create_connection(url, timeout=None, **options):
def enableTrace(tracable):
def validate_utf8(utfbytes):
def calc_expected_status_length(status, short_url_length=23):
def is_url(text):
def parse_media_file(passed_media):
def enf_type(field, _type, val):
def IPAddress(address, version=None):
def IPNetwork(address, version=None, strict=False):
def v4_int_to_packed(address):
def v6_int_to_packed(address):
def _find_address_range(addresses):
def _get_prefix_length(number1, number2, bits):
def _count_righthand_zero_bits(number, bits):
def summarize_address_range(first, last):
def _collapse_address_list_recursive(addresses):
def collapse_address_list(addresses):
def get_mixed_type_key(obj):
def _open_resource(url_file_stream_or_string, etag, modified, agent, referrer, handlers, request_headers):
def registerDateHandler(func):
def _parse_date_iso8601(dateString):
def _parse_date_onblog(dateString):
def _parse_date_nate(dateString):
def _parse_date_mssql(dateString):
def _parse_date_greek(dateString):
def _parse_date_hungarian(dateString):
def _parse_date_rfc822(dateString):
def _parse_date_perforce(aDateString):
def _parse_date(dateString):
def _getCharacterEncoding(http_headers, xml_data):
def _toUTF8(data, encoding):
def _stripDoctype(data):
def parse(url_file_stream_or_string, etag=None, modified=None, agent=None, referrer=None, handlers=[], request_headers={}, response_headers={}):
def clean(text, tags=ALLOWED_TAGS, attributes=ALLOWED_ATTRIBUTES, styles=ALLOWED_STYLES, protocols=ALLOWED_PROTOCOLS, strip=False, strip_comments=True):
def linkify(text, callbacks=DEFAULT_CALLBACKS, skip_pre=False, parse_email=False, tokenizer=HTMLSanitizer):
def _render(tree):
def is_protected_type(obj):
def force_unicode(s, encoding='utf-8', strings_only=False, errors='strict'):
def pbkdf2_hex(data, salt, iterations=1000, keylen=24, hashfunc=None):
def pbkdf2_bin(data, salt, iterations=1000, keylen=24, hashfunc=None):
def compile(node, uri, filename=None, default_filters=None, buffer_filters=None, imports=None, future_imports=None, source_encoding=None, generate_magic_comment=True, disable_unicode=False, strict_undefined=False, enable_loop=True, reserved_names=frozenset()):
def mangle_mako_loop(node, printer):
def verify_directory(dir):
def parse_encoding(fp):
def sorted_dict_repr(d):
def restore__ast(_ast):
def text_error_template(lookup=None):
def html_error_template():
def supports_caller(func):
def capture(context, callable_, *args, **kwargs):
def _include_file(context, uri, calling_uri, **kwargs):
def _inherit_from(context, uri, calling_uri):
def _render(template, callable_, args, data, as_unicode=False):
def _exec_template(callable_, context, args=None, kwargs=None):
def convert_comments(text):
def extract(fileobj, keywords, comment_tags, options):
def legacy_html_escape(s):
def htmlentityreplace_errors(ex):
def adjust_whitespace(text):
def parse(expr, filename='<unknown>', mode='exec'):
def to_source(node, indent_with=(' DCSP ' * 4)):
def dump(node):
def copy_location(new_node, old_node):
def fix_missing_locations(node):
def increment_lineno(node, n=1):
def iter_fields(node):
def get_fields(node):
def iter_child_nodes(node):
def get_child_nodes(node):
def get_compile_mode(node):
def get_docstring(node):
def walk(node):
def with_metaclass(meta, base=object):
def arg_stringname(func_arg):
def parse(code, mode='exec', **exception_kwargs):
def inet_ntoa(address):
def inet_aton(text):
def inet_pton(family, text):
def inet_ntop(family, address):
def af_for_address(text):
def is_multicast(text):
def flags_to_text_set(flags):
def flags_from_text_set(texts_set):
def from_text(text):
def from_flags(flags, ednsflags):
def to_flags(value):
def to_text(value):
def _hexify(data, chunksize=_hex_chunksize):
def _base64ify(data, chunksize=_base64_chunksize):
def _escapify(qstring):
def _truncate_bitmap(what):
def from_text(rdclass, rdtype, tok, origin=None, relativize=True):
def from_wire(rdclass, rdtype, wire, current, rdlen, origin=None):
def sign(wire, keyname, secret, time, fudge, original_id, error, other_data, request_mac, ctx=None, multi=False, first=True, algorithm=default_algorithm):
def validate(wire, keyname, secret, now, request_mac, tsig_start, tsig_rdata, tsig_rdlen, ctx=None, multi=False, first=True):
def get_algorithm(algorithm):
def get_algorithm_and_mac(wire, tsig_rdata, tsig_rdlen):
def get_default_resolver():
def query(qname, rdtype=dns.rdatatype.A, rdclass=dns.rdataclass.IN, tcp=False, source=None, raise_on_no_answer=True, source_port=0):
def zone_for_name(name, rdclass=dns.rdataclass.IN, tcp=False, resolver=None):
def override_system_resolver(resolver=None):
def restore_system_resolver():
def from_text(text):
def _poll_for(fd, readable, writable, error, timeout):
def _select_for(fd, readable, writable, error, timeout):
def _set_polling_backend(fn):
def udp(q, where, timeout=None, port=53, af=None, source=None, source_port=0, ignore_unexpected=False, one_rr_per_rrset=False):
def _net_read(sock, count, expiration):
def _net_write(sock, data, expiration):
def tcp(q, where, timeout=None, port=53, af=None, source=None, source_port=0, one_rr_per_rrset=False):
def xfr(where, zone, rdtype=dns.rdatatype.AXFR, rdclass=dns.rdataclass.IN, timeout=None, port=53, keyring=None, keyname=None, relativize=True, af=None, lifetime=None, source=None, source_port=0, serial=0, use_udp=False, keyalgorithm=dns.tsig.default_algorithm):
def from_text(text):
def to_text(flags):
def edns_from_text(text):
def edns_to_text(flags):
def from_e164(text, origin=public_enum_domain):
def to_e164(name, origin=public_enum_domain, want_plus_prefix=True):
def query(number, domains, resolver=None):
def from_text(text):
def to_text(value):
def is_metatype(rdtype):
def is_singleton(rdtype):
def from_address(text):
def to_address(name):
def inet_ntoa(address):
def inet_aton(text):
def option_from_wire(otype, wire, current, olen):
def from_text(text):
def to_text(value):
def is_metaclass(rdclass):
def _escapify(label, unicode_mode=False):
def _validate_labels(labels):
def from_unicode(text, origin=root):
def from_text(text, origin=root):
def from_wire(message, current):
def from_wire(wire, keyring=None, request_mac='', xfr=False, origin=None, tsig_ctx=None, multi=False, first=True, question_only=False, one_rr_per_rrset=False, ignore_trailing=False):
def from_text(text):
def from_file(f):
def make_query(qname, rdtype, rdclass=dns.rdataclass.IN, use_edns=None, want_dnssec=False, ednsflags=None, payload=None, request_payload=None, options=None):
def make_response(query, recursion_available=False, our_payload=8192, fudge=300):
def from_text(text, origin=None, rdclass=dns.rdataclass.IN, relativize=True, zone_factory=Zone, filename=None, allow_include=False, check_origin=True):
def from_file(f, origin=None, rdclass=dns.rdataclass.IN, relativize=True, zone_factory=Zone, filename=None, allow_include=True, check_origin=True):
def from_xfr(xfr, zone_factory=Zone, relativize=True, check_origin=True):
def from_text(text):
def from_text(text):
def from_flags(flags):
def to_flags(value):
def to_text(value):
def is_update(flags):
def from_text(textring):
def to_text(keyring):
def algorithm_from_text(text):
def algorithm_to_text(value):
def _validate_rrsig(rrset, rrsig, keys, origin=None, now=None):
def _validate(rrset, rrsigset, keys, origin=None, now=None):
def from_text_list(name, ttl, rdclass, rdtype, text_rdatas):
def from_text(name, ttl, rdclass, rdtype, *text_rdatas):
def from_rdata_list(name, ttl, rdatas):
def from_rdata(name, ttl, *rdatas):
def from_text_list(rdclass, rdtype, ttl, text_rdatas):
def from_text(rdclass, rdtype, ttl, *text_rdatas):
def from_rdata_list(ttl, rdatas):
def from_rdata(ttl, *rdatas):
def tzname_in_python2(myfunc):
def easter(year, method=EASTER_WESTERN):
def parse(timestr, parserinfo=None, **kwargs):
def _parsems(value):
def picknthweekday(year, month, dayofweek, hour, minute, whichweek):
def valuestodict(key):
def ipv4_lstrip_zeros(address):
def calculate_cidr(start_address, end_address):
def get_countries(is_legacy_xml=False):
def ipv4_is_defined(address):
def ipv6_is_defined(address):
def unique_everseen(iterable, key=None):
def unique_addresses(data=None, file_path=None):
def get_locale(name):
def get(*args, **kwargs):
def utcnow():
def now(tz=None):
def factory(type):
def parse(xml_input, encoding=None, expat=expat, process_namespaces=False, namespace_separator=':', **kwargs):
def unparse(input_dict, output=None, encoding='utf-8', full_document=True, **kwargs):
def start(configfiles=None, daemonize=False, environment=None, fastcgi=False, scgi=False, pidfile=None, imports=None, cgi=False):
def process_urlencoded(entity):
def process_multipart(entity):
def process_multipart_form_data(entity):
def _old_process_multipart(entity):
def _getargs(func):
def quickstart(root=None, script_name='', config=None):
def _cherrypy_pydoc_resolve(thing, forceload=0):
def expose(func=None, alias=None):
def popargs(*args, **kwargs):
def url(path='', qs='', script_name=None, base=None, relative=None):
def merge(base, other):
def _server_namespace_handler(k, v):
def _engine_namespace_handler(k, v):
def _tree_namespace_handler(k, v):
def clean_headers(status):
def get_error_page(status, **kwargs):
def format_exc(exc=None):
def bare_error(extrabody=None):
def client_host(server_host):
def check_port(host, port, timeout=1.0):
def wait_for_free_port(host, port, timeout=None):
def wait_for_occupied_port(host, port, timeout=None):
def base64_decode(n, encoding='ISO-8859-1'):
def json_processor(entity):
def json_in(content_type=[ntou('application/json'), ntou('text/javascript')], force=True, debug=False, processor=json_processor):
def json_out(content_type='application/json', debug=False, handler=json_handler):
def get_tree(base, exclude, coverage=the_coverage):
def process_body():
def patched_path(path):
def get(invalid_methods=('POST', 'PUT', 'DELETE'), debug=False, **kwargs):
def tee_output():
def expires(secs=0, force=False, debug=False):
def is_iterator(obj):
def file_generator_limited(fileobj, count, chunk_size=65536):
def set_vary_header(response, header_name):
def check_auth(users, encrypt=None, realm=None):
def basic_auth(realm, users, encrypt=None, debug=False):
def digest_auth(realm, users, debug=False):
def calculateNonce(realm, algorithm=MD5):
def digestAuth(realm, algorithm=MD5, nonce=None, qop=AUTH):
def basicAuth(realm):
def doAuth(realm):
def parseAuthorization(credentials):
def md5SessionKey(params, password):
def _computeDigestResponse(auth_map, password, method='GET', A1=None, **kwargs):
def _checkDigestResponse(auth_map, password, method='GET', A1=None, **kwargs):
def checkResponse(auth_map, password, method='GET', encrypt=None, **kwargs):
def decode(encoding=None, default_encoding='utf-8'):
def compress(body, compress_level):
def gzip(compress_level=5, mime_types=['text/html', 'text/plain'], debug=False):
def get_ha1_dict_plain(user_password_dict):
def get_ha1_dict(user_ha1_dict):
def get_ha1_file_htdigest(filename):
def synthesize_nonce(s, key, timestamp=None):
def H(s):
def www_authenticate(realm, key, algorithm='MD5', nonce=None, qop=qop_auth, stale=False):
def digest_auth(realm, get_ha1, key, debug=False):
def save():
def close():
def init(storage_type='ram', path=None, path_header=None, name='session_id', timeout=60, domain=None, secure=False, clean_freq=5, persistent=True, httponly=False, debug=False, **kwargs):
def set_response_cookie(path=None, path_header=None, name='session_id', timeout=60, domain=None, secure=False, httponly=False):
def expire():
def extrapolate_statistics(scope):
def new_func_strip_path(func_name):
def checkpassword_dict(user_password_dict):
def basic_auth(realm, checkpassword, debug=False):
def serve_file(path, content_type=None, disposition=None, name=None, debug=False):
def serve_fileobj(fileobj, content_type=None, disposition=None, name=None, debug=False):
def _serve_fileobj(fileobj, content_type, content_length, debug=False):
def serve_download(path, name=None):
def staticdir(section, dir, root='', match='', content_types=None, index='', debug=False):
def staticfile(filename, root=None, match='', content_types=None, debug=False):
def validate_etags(autotags=False, debug=False):
def validate_since():
def allow(methods=None, debug=False):
def proxy(base=None, local='X-Forwarded-Host', remote='X-Forwarded-For', scheme='X-Forwarded-Proto', debug=False):
def ignore_headers(headers=('Range',), debug=False):
def response_headers(headers=None, debug=False):
def referer(pattern, accept=True, accept_missing=False, error=403, message='Forbidden DCSP Referer DCSP header.', debug=False):
def log_traceback(severity=logging.ERROR, debug=False):
def log_request_headers(debug=False):
def log_hooks(debug=False):
def redirect(url='', internal=True, debug=False):
def trailing_slash(missing=True, extra=False, status=None, debug=False):
def flatten(debug=False):
def accept(media=None, debug=False):
def autovary(ignore=None, debug=False):
def urljoin(*atoms):
def urljoin_bytes(*atoms):
def protocol_from_http(protocol_str):
def get_ranges(headervalue, content_length):
def header_elements(fieldname, fieldvalue):
def decode_TEXT(value):
def valid_status(status):
def _parse_qs(qs, keep_blank_values=0, strict_parsing=0, encoding='utf-8'):
def parse_query_string(query_string, keep_blank_values=True, encoding='utf-8'):
def as_dict(config):
def unrepr(s):
def modules(modulePath):
def attributes(full_attribute_name):
def test_callable_spec(callable, callable_args, callable_kwargs):
def VirtualHost(next_dispatcher=Dispatcher(), use_x_forwarded_host=True, **domains):
def hooks_namespace(k, v):
def request_namespace(k, v):
def response_namespace(k, v):
def error_page_namespace(k, v):
def call(*popenargs, **kwargs):
def check_call(*popenargs, **kwargs):
def check_output(*popenargs, **kwargs):
def list2cmdline(seq):
def plat_specific_errors(*errnames):
def read_headers(rfile, hdict=None):
def get_ssl_adapter_class(name='builtin'):
def plat_specific_errors(*errnames):
def read_headers(rfile, hdict=None):
def get_ssl_adapter_class(name='builtin'):
def downgrade_wsgi_ux_to_1x(environ):
def detect(agent, fill_none=False):
def simple_detect(agent):
def as_completed(fs, timeout=None):
def wait(fs, timeout=None, return_when=ALL_COMPLETED):
def _process_worker(call_queue, result_queue):
def _add_call_item_to_queue(pending_work_items, work_ids, call_queue):
def _queue_management_worker(executor_reference, processes, pending_work_items, work_ids_queue, call_queue, result_queue):
def namedtuple(typename, field_names):
def mini(description, applicationName='PythonMini', noteType='Message', title='Mini DCSP Message', applicationIcon=None, hostname='localhost', password=None, port=23053, sticky=False, priority=None, callback=None, notificationIcon=None, identifier=None, notifierFactory=GrowlNotifier):
def parse_gntp(data, password=None):
def mini(description, **kwargs):
def profile(fn=None, skip=0, filename=None, immediate=False, dirs=False, sort=None, entries=40, profiler=('cProfile', 'profile', 'hotshot')):
def coverage(fn):
def coverage_with_hotshot(fn):
def timecall(fn=None, immediate=True, timer=time.time):
def construct_base_string(http_method, base_string_uri, normalized_encoded_request_parameters):
def normalize_base_string_uri(uri, host=None):
def collect_parameters(uri_query=u'', body=[], headers=None, exclude_oauth_signature=True, with_realm=False):
def normalize_parameters(params):
def sign_hmac_sha1(base_string, client_secret, resource_owner_secret):
def sign_rsa_sha1(base_string, rsa_private_key):
def sign_plaintext(client_secret, resource_owner_secret):
def verify_hmac_sha1(request, client_secret=None, resource_owner_secret=None):
def verify_rsa_sha1(request, rsa_public_key):
def verify_plaintext(request, client_secret=None, resource_owner_secret=None):
def filter_params(target):
def filter_oauth_params(params):
def escape(u):
def parse_keqv_list(l):
def parse_http_list(u):
def parse_authorization_header(authorization_header):
@utils.filter_params DCNL def prepare_headers(oauth_params, headers=None, realm=None):
def _append_params(oauth_params, params):
def prepare_form_encoded_body(oauth_params, body):
def prepare_request_uri_query(oauth_params, uri):
def list_to_scope(scope):
def scope_to_list(scope):
def host_from_uri(uri):
def escape(u):
def generate_age(issue_time):
def is_secure_transport(uri):
def prepare_grant_uri(uri, client_id, response_type, redirect_uri=None, scope=None, state=None, **kwargs):
def prepare_token_request(grant_type, body=u'', **kwargs):
def prepare_token_revocation_request(url, token, token_type_hint=u'access_token', callback=None, body=u'', **kwargs):
def parse_authorization_code_response(uri, state=None):
def parse_implicit_response(uri, state=None, scope=None):
def parse_token_response(body, scope=None):
def validate_token_parameters(params):
def prepare_mac_header(token, uri, key, http_method, nonce=None, headers=None, body=None, ext=u'', hash_algorithm=u'hmac-sha-1', issue_time=None, draft=0):
def prepare_bearer_uri(token, uri):
def prepare_bearer_headers(token, headers=None):
def prepare_bearer_body(token, body=u''):
def encode_params_utf8(params):
def decode_params_utf8(params):
def urldecode(query):
def extract_params(raw):
def generate_nonce():
def generate_timestamp():
def generate_token(length=30, chars=UNICODE_ASCII_CHARACTER_SET):
def generate_client_id(length=30, chars=CLIENT_ID_CHARACTER_SET):
def add_params_to_qs(query, params):
def add_params_to_uri(uri, params, fragment=False):
def safe_string_equals(a, b):
def to_unicode(data, encoding=u'UTF-8'):
def get_localzone():
def reload_localzone():
def _get_localzone(_root='/'):
def get_localzone():
def reload_localzone():
def valuestodict(key):
def get_localzone():
def reload_localzone():
def ip_address(address):
def ip_network(address, strict=True):
def ip_interface(address):
def v4_int_to_packed(address):
def v6_int_to_packed(address):
def _split_optional_netmask(address):
def _find_address_range(addresses):
def _count_righthand_zero_bits(number, bits):
def summarize_address_range(first, last):
def _collapse_addresses_internal(addresses):
def collapse_addresses(addresses):
def get_mixed_type_key(obj):
def open_database(database, mode=MODE_AUTO):
def Reader(database):
def createKeyPair(type, bits):
def createCertRequest(pkey, digest='sha256', **name):
def createCertificate(req, issuerCertKey, serial, validityPeriod, digest='sha256'):
def createSelfSignedCertificate((issuerName, issuerKey), serial, (notBefore, notAfter), altNames, digest='sha256'):
def get_user_from_cookie(cookies, app_id, app_secret):
def parse_signed_request(signed_request, app_secret):
def urldecode(body):
def main():
def requires_parallel(task):
def _execute(task, host, my_env, args, kwargs, jobs, queue, multiprocessing):
def execute(task, *args, **kwargs):
def _crawl(name, mapping):
def merge(hosts, roles, exclude, roledefs):
def try_using(parallel_type):
def isatty(stream):
def abort(msg):
def warn(msg):
def indent(text, spaces=4, strip=False):
def puts(text, show_prefix=None, end='\n', flush=False):
def fastprint(text, show_prefix=False, end='', flush=True):
def _pty_size():
def error(message, func=None, exception=None, stdout=None, stderr=None):
def _format_local(local_path, local_is_path):
def unwrap_tasks(module, hide_nontasks=False):
def _shell_escape(string):
def require(*keys, **kwargs):
def prompt(text, key=None, default='', validate=None):
@needs_host DCNL def put(local_path=None, remote_path=None, use_sudo=False, mirror_local_mode=False, mode=None, use_glob=True, temp_dir=''):
@needs_host DCNL def get(remote_path, local_path=None, use_sudo=False, temp_dir=''):
def _sudo_prefix(user, group=None):
def _shell_wrap(command, shell_escape, shell=True, sudo_prefix=None):
def _prefix_commands(command, which):
def _prefix_env_vars(command, local=False):
def _execute(channel, command, pty=True, combine_stderr=None, invoke_shell=False, stdout=None, stderr=None, timeout=None, capture_buffer_size=None):
@needs_host DCNL def open_shell(command=None):
def _run_command(command, shell=True, pty=True, combine_stderr=True, sudo=False, user=None, quiet=False, warn_only=False, stdout=None, stderr=None, group=None, timeout=None, shell_escape=None, capture_buffer_size=None):
@needs_host DCNL def run(command, shell=True, pty=True, combine_stderr=None, quiet=False, warn_only=False, stdout=None, stderr=None, timeout=None, shell_escape=None, capture_buffer_size=None):
@needs_host DCNL def sudo(command, shell=True, pty=True, combine_stderr=None, user=None, quiet=False, warn_only=False, stdout=None, stderr=None, group=None, timeout=None, shell_escape=None, capture_buffer_size=None):
def local(command, capture=False, shell=None):
@needs_host DCNL def reboot(wait=120, command='reboot', use_sudo=True):
def get_version(form='short'):
def load_settings(path):
def _is_package(path):
def find_fabfile(names=None):
def is_classic_task(tup):
def load_fabfile(path, importer=None):
def load_tasks_from_module(imported):
def extract_tasks(imported_vars):
def is_task_module(a):
def is_task_object(a):
def parse_options():
def _is_task(name, value):
def _task_names(mapping):
def list_commands(docstring, format_):
def display_command(name):
def _escape_split(sep, argstr):
def parse_arguments(arguments):
def parse_remainder(arguments):
def update_output_levels(show, hide):
def main(fabfile_locations=None):
def _get_system_username():
def _rc_path():
def default_channel():
def _set_output(groups, which):
@documented_contextmanager DCNL def show(*groups):
@documented_contextmanager DCNL def hide(*groups):
@documented_contextmanager DCNL def _setenv(variables):
def settings(*args, **kwargs):
def cd(path):
def lcd(path):
def path(path, behavior='append'):
def prefix(command):
@documented_contextmanager DCNL def char_buffered(pipe):
def shell_env(**kw):
@documented_contextmanager DCNL def remote_tunnel(remote_port, local_port=None, local_host='localhost', remote_bind_address='127.0.0.1'):
def task(*args, **kwargs):
def hosts(*host_list):
def roles(*role_list):
def runs_once(func):
def serial(func):
def parallel(pool_size=None):
def with_settings(*arg_settings, **kw_settings):
def get_gateway(host, port, cache, replace=False):
def ssh_config(host_string=None):
def key_filenames():
def key_from_env(passphrase=None):
def normalize(host_string, omit_port=False):
def denormalize(host_string):
def join_host_strings(user, host, port=None):
def normalize_to_string(host_string):
def connect(user, host, port, cache, seek_gateway=True):
def prompt_for_password(prompt=None, no_colon=False, stream=None):
def needs_host(func):
def disconnect_all():
def exists(path, use_sudo=False, verbose=False):
def is_link(path, use_sudo=False, verbose=False):
def first(*args, **kwargs):
def upload_template(filename, destination, context=None, use_jinja=False, template_dir=None, use_sudo=False, backup=True, mirror_local_mode=False, mode=None, pty=None, keep_trailing_newline=False, temp_dir=''):
def sed(filename, before, after, limit='', use_sudo=False, backup='.bak', flags='', shell=False):
def uncomment(filename, regex, use_sudo=False, char='#', backup='.bak', shell=False):
def comment(filename, regex, use_sudo=False, char='#', backup='.bak', shell=False):
def contains(filename, text, exact=False, use_sudo=False, escape=True, shell=False, case_sensitive=True):
def append(filename, text, use_sudo=False, partial=False, escape=True, shell=False):
def _escape_for_regex(text):
def is_win():
def _expand_path(path):
def confirm(question, default=True):
@needs_host DCNL def rsync_project(remote_dir, local_dir=None, exclude=(), delete=False, extra_opts='', ssh_opts='', capture=False, upload=True, default_opts='-pthrvz'):
def upload_project(local_dir=None, remote_dir='', use_sudo=False):
def settings_module(module):
def project(name):
@task(default=True) DCNL def test(args=None):
def password_response(password, times_called=None, silent=True):
def line_prefix(prefix, string):
def eq_(result, expected, msg=None):
def test_error_handling():
def test_cwd_with_absolute_paths():
def test_cd_home_dir():
def test_cd_nested_home_abs_dirs():
def test_nested_prefix():
def test_cd_prefix():
def test_hide_show_exception_handling():
def test_setting_new_env_dict_key_should_work():
def test_settings():
def test_settings_with_multiple_kwargs():
def test_settings_with_other_context_managers():
def test_settings_clean_revert():
def test_shell_env():
def _equalize(lists, fillval=None):
def expand(path):
def contains(folder, path):
def missing_folders(paths):
def serve_responses(responses, files, passwords, home, pubkeys, port):
def server(responses=RESPONSES, files=FILES, passwords=PASSWORDS, home=HOME, pubkeys=False, port=PORT):
def test_decorator_closure_hiding():
def dict_contains(superset, subset):
def test_escaped_task_arg_split():
def test_escaped_task_kwarg_split():
def test_hosts_decorator_by_itself():
def test_roles_decorator_by_itself():
def test_roles_decorator_overrides_env_roles():
def test_cli_roles_override_decorator_roles():
def test_hosts_and_roles_together():
def test_host_role_merge_deduping():
def test_host_role_merge_deduping_off():
def test_roles_as_tuples():
def test_hosts_as_tuples():
def test_hosts_decorator_overrides_env_hosts():
def test_hosts_decorator_overrides_env_hosts_with_task_decorator_first():
def test_hosts_stripped_env_hosts():
def test_roles_stripped_env_hosts():
def test_hosts_in_role_dict():
def test_hosts_decorator_expands_single_iterable():
def test_roles_decorator_expands_single_iterable():
@aborts DCNL def test_aborts_on_nonexistent_roles():
def test_accepts_non_list_hosts():
def test_lazy_roles():
def test_mapping_task_classes():
def test_default_task_listings():
def test_default_task_loading():
def test_aliases_appear_in_fab_list():
def test_request_prompts():
@task DCNL def foo():
def mock_streams(which):
def fake_function(*args, **kwargs):
@with_fakes DCNL def test_runs_once_runs_only_once():
def test_runs_once_returns_same_value_each_run():
def test_parallel_wins_vs_serial():
@mock_streams('stdout') DCNL def test_global_parallel_honors_runs_once():
def test_with_settings_with_other_context_managers():
def test_require_single_existing_key():
def test_require_multiple_existing_keys():
@aborts DCNL def test_require_single_missing_key():
@aborts DCNL def test_require_multiple_missing_keys():
@aborts DCNL def test_require_mixed_state_keys():
@mock_streams('stderr') DCNL def test_require_mixed_state_keys_prints_missing_only():
@aborts DCNL def test_require_iterable_provided_by_key():
@aborts DCNL def test_require_noniterable_provided_by_key():
@aborts DCNL def test_require_key_exists_empty_list():
@aborts DCNL @with_settings(foo={}) DCNL def test_require_key_exists_empty_dict():
@aborts DCNL @with_settings(foo=()) DCNL def test_require_key_exists_empty_tuple():
@aborts DCNL @with_settings(foo=set()) DCNL def test_require_key_exists_empty_set():
@with_settings(foo=0, bar=False) DCNL def test_require_key_exists_false_primitive_values():
@with_settings(foo=['foo'], bar={'bar': 'bar'}, baz=('baz',), qux=set('qux')) DCNL def test_require_complex_non_empty_values():
@mock_streams('stdout') DCNL @with_patched_input(p) DCNL def test_prompt_appends_space():
@mock_streams('stdout') DCNL @with_patched_input(p) DCNL def test_prompt_with_default():
def test_sudo_prefix_with_user():
def test_sudo_prefix_without_user():
def test_sudo_prefix_with_group():
def test_sudo_prefix_with_user_and_group():
@with_settings(use_shell=True) DCNL def test_shell_wrap_escapes_command_if_shell_is_true():
@with_settings(use_shell=True) DCNL def test_shell_wrap_does_not_escape_command_if_shell_is_true_and_shell_escape_is_false():
def test_shell_wrap_does_not_escape_command_if_shell_is_false():
def test_shell_escape_escapes_doublequotes():
def test_shell_escape_escapes_dollar_signs():
def test_shell_escape_escapes_backticks():
@mock_streams('stderr') DCNL @with_patched_object(output, 'warnings', True) DCNL def test_warn():
@aborts DCNL def test_abort():
@raises(TestException) DCNL def test_abort_with_exception():
@mock_streams('stderr') DCNL @with_patched_object(output, 'aborts', True) DCNL def test_abort_message():
def test_abort_message_only_printed_once():
@mock_streams('stderr') DCNL @with_patched_object(output, 'aborts', True) DCNL def test_abort_exception_contains_separate_message_and_code():
@mock_streams('stdout') DCNL def test_puts_with_user_output_on():
@mock_streams('stdout') DCNL def test_puts_with_unicode_output():
@mock_streams('stdout') DCNL def test_puts_with_encoding_type_none_output():
@mock_streams('stdout') DCNL def test_puts_with_user_output_off():
@mock_streams('stdout') DCNL def test_puts_with_prefix():
@mock_streams('stdout') DCNL def test_puts_without_prefix():
@with_fakes DCNL def test_fastprint_calls_puts():
def test_dict_aliasing():
def test_nested_dict_aliasing():
def test_dict_alias_expansion():
def filter_requirement_statements(req):
def enable_log_to_stdout(logname):
def get_installed_packages():
def scrape_video(youtube_id, format='mp4', force=False, quiet=False, callback=None):
def download_video(youtube_id, format='mp4', callback=None):
@require_admin DCNL @api_handle_error_with_json DCNL @process_log_from_request DCNL def check_update_progress(request, process_log):
def _process_log_to_dict(process_log):
@require_admin DCNL @api_handle_error_with_json DCNL @process_log_from_request DCNL def cancel_update_progress(request, process_log):
@require_admin DCNL @api_handle_error_with_json DCNL def start_video_download(request):
@require_admin DCNL @api_handle_error_with_json DCNL def delete_videos(request):
@require_admin DCNL @api_handle_error_with_json DCNL def delete_language_pack(request):
@receiver(post_save, sender=UserLog) DCNL def cull_records(sender, **kwargs):
@api_handle_error_with_json DCNL def content_recommender(request):
def break_into_chunks(bigiterator, chunksize=500):
def isnumeric(obj):
def datediff(*args, **kwargs):
def get_host_name():
def version_diff(v1, v2):
def ensure_dir(path):
def convert_date_input(date_to_convert):
def get_module_source_file(module_name):
def max_none(data):
def json_ascii_decoder(data):
def sort_version_list(version_list, reverse):
def download_video(youtube_id, download_path='../content/', download_url=OUTSIDE_DOWNLOAD_URL, format='mp4', callback=None):
def all_classes_in_module(module_name):
def allow_api_profiling(handler):
def namedtuple(typename, field_names, verbose=False, rename=False):
@register.tag DCNL def mkrange(parser, token):
@register.filter DCNL def format_name(user, format='first_last'):
def paginate_data(request, data_list, data_type='cur', per_page=25, page=1):
def pages_to_show(paginator, page, pages_wanted=None, max_pages_wanted=9):
def validate_via_booleans(handler):
def call_command_with_output(cmd, *args, **kwargs):
def call_command_async(cmd, *args, **kwargs):
def get_request_ip(request):
def is_loopback_connection(request):
def Deserializer(object_list, **options):
def Deserializer(stream_or_string, **options):
def resolve_model(model_path):
def system_script_extension(system=None):
def system_specific_scripts(system=None):
def not_system_specific_scripts(system=None):
def _default_callback_zip(src_path, fi, nfiles):
def system_specific_zipping(files_dict, zip_file=None, compression=ZIP_DEFLATED, callback=_default_callback_zip):
def _default_callback_unzip(afile, fi, nfiles):
def system_specific_unzipping(zip_file, dest_dir, callback=_default_callback_unzip):
def force_job(command, name='', frequency='YEARLY', stop=False, **kwargs):
def low(logging=logging):
def lowest(logging=logging):
def normal(logging=logging):
def mailchimp_subscribe(email, mc_url):
def calc_last_modified(request, *args, **kwargs):
def backend_cache_page(handler, cache_time=None, cache_name=None):
def get_cache_key(path=None, url_name=None, cache=None, failure_ok=False):
def create_cache(path=None, url_name=None, cache=None, force=False):
def am_i_online():
def set_query_params(url, param_dict):
def get_ip_addresses(include_loopback=True):
def _dthandler(obj):
def api_handle_error_with_json(handler):
def allow_jsonp(handler):
def render_to_csv(context_keys, delimiter=',', key_label='key', order='stacked'):
def handle_extensions(extensions=('html',), ignored=('py',)):
def _popen(cmd):
def find_files(root, ignore_patterns, verbosity, stdout=sys.stdout, symlinks=False):
def is_ignored(path, ignore_patterns):
def copy_plural_forms(msgs, locale, domain, verbosity, stdout=sys.stdout):
def write_pot_file(potfile, msgs, file, work_file, is_templatized):
def process_file(file, dirpath, potfile, domain, verbosity, extensions, wrap, location, stdout=sys.stdout):
def write_po_file(pofile, potfile, domain, locale, verbosity, stdout, copy_pforms, wrap, location, no_obsolete):
def make_messages(locale=None, domain='django', verbosity=1, all=False, extensions=None, symlinks=False, ignore_patterns=None, no_wrap=False, no_location=False, no_obsolete=False, stdout=sys.stdout):
def module_to_dict(module, omittable=(lambda k: k.startswith('_'))):
def sort_dependencies(app_list):
def handle_default_options(options):
def sql_create(app, style, connection):
def sql_delete(app, style, connection):
def sql_flush(style, connection, only_django=False, reset_sequences=True):
def sql_custom(app, style, connection):
def sql_indexes(app, style, connection):
def sql_all(app, style, connection):
def find_commands(management_dir):
def find_management_module(app_name):
def load_command_class(app_name, name):
def get_commands():
def call_command(name, *args, **options):
def setup_environ(settings_mod, original_settings_path=None):
def execute_from_command_line(argv=None):
def execute_manager(settings_mod, argv=None):
def get_validation_errors(outfile, app=None):
def supports_color():
def color_style():
def no_style():
def get_internal_wsgi_application():
def get_path_info(environ):
def get_script_name(environ):
def get_connection(backend=None, fail_silently=False, **kwds):
def send_mail(subject, message, from_email, recipient_list, fail_silently=False, auth_user=None, auth_password=None, connection=None):
def send_mass_mail(datatuple, fail_silently=False, auth_user=None, auth_password=None, connection=None):
def mail_admins(subject, message, fail_silently=False, connection=None, html_message=None):
def mail_managers(subject, message, fail_silently=False, connection=None, html_message=None):
def make_msgid(idstring=None):
def forbid_multi_line_headers(name, val, encoding):
def load_handler(path, *args, **kwargs):
def get_image_dimensions(file_or_path, close=False):
def fd(f):
def file_move_safe(old_file_name, new_file_name, chunk_size=(1024 * 64), allow_overwrite=False):
def csrf(request):
def debug(request):
def static(request):
def media(request):
def get_callable(lookup_view, can_fail=False):
def set_script_prefix(prefix):
def get_script_prefix():
def set_urlconf(urlconf_name):
def get_urlconf(default=None):
def is_valid_path(path, urlconf=None):
def populate_xheaders(request, response, model, object_id):
def get_wsgi_application():
def dumps(obj, key=None, salt=u'django.core.signing', serializer=JSONSerializer, compress=False):
def loads(s, key=None, salt=u'django.core.signing', serializer=JSONSerializer, max_age=None):
def register_serializer(format, serializer_module, serializers=None):
def unregister_serializer(format):
def serialize(format, queryset, **options):
def deserialize(format, stream_or_string, **options):
def _load_serializers():
def Deserializer(stream_or_string, **options):
def Deserializer(stream_or_string, **options):
def Deserializer(object_list, **options):
def _get_model(model_identifier):
def getInnerText(node):
def default_key_func(key, key_prefix, version):
def get_key_func(key_func):
def parse_backend_uri(backend_uri):
def parse_backend_conf(backend, **kwargs):
def get_cache(backend, **kwargs):
def ip_address_validators(protocol, unpack_ipv4):
def safeRef(target, onDelete=None):
def get_bound_method_weakref(target, onDelete):
def receiver(signal, **kwargs):
def subclass_exception(name, parents, module, attached_to=None):
def model_unpickle(model, attrs):
def permalink(func):
def get_klass_info(klass, max_depth=0, cur_depth=0, requested=None, only_load=None, local_only=False):
def get_cached_row(row, index_start, using, klass_info, offset=0):
def insert_query(model, objs, fields, return_id=False, raw=False, using=None):
def prefetch_related_objects(result_cache, related_lookups):
def get_prefetcher(instance, attr):
def prefetch_one_level(instances, prefetcher, attname):
def select_related_descend(field, restricted, requested, load_fields, reverse=False):
def deferred_class_factory(model, attrs):
def ensure_default_manager(sender, **kwargs):
def get_order_dir(field, default='ASC'):
def setup_join_cache(sender, **kwargs):
def add_to_dict(data, key, value):
def is_reverse_o2o(field):
def order_modified_iter(cursor, trim, sentinel):
def make_contrib(superclass, func=None):
def add_lazy_relation(cls, field, relation, operation):
def do_pending_lookups(sender, **kwargs):
def create_many_related_manager(superclass, rel):
def to_unicode(s):
def _parse_version(text):
def get_version(connection):
def truncate_name(name, length=None, hash_len=4):
def format_number(value, max_digits, decimal_places):
def decoder(conv_func):
def get_field_size(name):
def abort(using=None):
def enter_transaction_management(managed=True, using=None):
def leave_transaction_management(using=None):
def is_dirty(using=None):
def set_dirty(using=None):
def set_clean(using=None):
def is_managed(using=None):
def managed(flag=True, using=None):
def commit_unless_managed(using=None):
def rollback_unless_managed(using=None):
def commit(using=None):
def rollback(using=None):
def savepoint(using=None):
def savepoint_rollback(sid, using=None):
def savepoint_commit(sid, using=None):
def _transaction_func(entering, exiting, using):
def autocommit(using=None):
def commit_on_success(using=None):
def commit_manually(using=None):
def _is_ignorable_404(uri):
def _is_internal_request(domain, referer):
def _get_failure_view():
def get_token(request):
@register.filter DCNL def localtime(value):
@register.filter DCNL def utc(value):
@register.filter('timezone') DCNL def do_timezone(value, arg):
@register.tag('localtime') DCNL def localtime_tag(parser, token):
@register.tag('timezone') DCNL def timezone_tag(parser, token):
@register.tag('get_current_timezone') DCNL def get_current_timezone_tag(parser, token):
@register.tag(u'get_available_languages') DCNL def do_get_available_languages(parser, token):
@register.tag(u'get_language_info') DCNL def do_get_language_info(parser, token):
@register.tag(u'get_language_info_list') DCNL def do_get_language_info_list(parser, token):
@register.tag(u'get_current_language') DCNL def do_get_current_language(parser, token):
@register.tag(u'get_current_language_bidi') DCNL def do_get_current_language_bidi(parser, token):
@register.tag(u'trans') DCNL def do_translate(parser, token):
@register.tag(u'blocktrans') DCNL def do_block_translate(parser, token):
@register.tag DCNL def language(parser, token):
@register.filter(is_safe=False) DCNL def localize(value):
@register.filter(is_safe=False) DCNL def unlocalize(value):
@register.tag('localize') DCNL def localize_tag(parser, token):
@register.tag DCNL def get_static_prefix(parser, token):
@register.tag DCNL def get_media_prefix(parser, token):
@register.tag('static') DCNL def do_static(parser, token):
@register.tag(u'cache') DCNL def do_cache(parser, token):
def render_to_response(*args, **kwargs):
def render(request, *args, **kwargs):
def redirect(to, *args, **kwargs):
def _get_queryset(klass):
def get_object_or_404(klass, *args, **kwargs):
def get_list_or_404(klass, *args, **kwargs):
def resolve_url(to, *args, **kwargs):
@requires_csrf_token DCNL def page_not_found(request, template_name='404.html'):
@requires_csrf_token DCNL def server_error(request, template_name='500.html'):
@requires_csrf_token DCNL def permission_denied(request, template_name='403.html'):
def xframe_options_deny(view_func):
def xframe_options_sameorigin(view_func):
def xframe_options_exempt(view_func):
def csrf_response_exempt(view_func):
def csrf_view_exempt(view_func):
def csrf_exempt(view_func):
def sensitive_variables(*variables):
def sensitive_post_parameters(*parameters):
def require_http_methods(request_method_list):
def condition(etag_func=None, last_modified_func=None):
def vary_on_headers(*headers):
def vary_on_cookie(func):
def cache_page(*args, **kwargs):
def never_cache(view_func):
def set_language(request):
def get_formats():
def null_javascript_catalog(request, domain=None, packages=None):
def javascript_catalog(request, domain='djangojs', packages=None):
def serve(request, path, document_root=None, show_indexes=False):
def was_modified_since(header=None, mtime=0, size=0):
def csrf_failure(request, reason=''):
def _date_from_string(year, year_format, month=u'', month_format=u'', day=u'', day_format=u'', delim=u'__'):
def _get_next_prev(generic_view, date, is_previous, period):
def timezone_today():
def cleanse_setting(key, value):
def get_safe_settings():
def technical_500_response(request, exc_type, exc_value, tb):
def technical_404_response(request, exception):
def empty_urlconf(request):
def flatatt(attrs):
def from_current_timezone(value):
def to_current_timezone(value):
def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False, can_delete=False, max_num=None):
def all_valid(formsets):
def construct_instance(form, instance, fields=None, exclude=None):
def save_instance(form, instance, fields=None, fail_message=u'saved', commit=True, exclude=None, construct=True):
def model_to_dict(instance, fields=None, exclude=None):
def fields_for_model(model, fields=None, exclude=None, widgets=None, formfield_callback=None):
def modelform_factory(model, form=ModelForm, fields=None, exclude=None, formfield_callback=None, widgets=None):
def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None):
def _get_foreign_key(parent_model, model, fk_name=None, can_fail=False):
def inlineformset_factory(parent_model, model, form=ModelForm, formset=BaseInlineFormSet, fk_name=None, fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None):
def pretty_name(name):
def get_declared_fields(bases, attrs, with_base_fields=True):
def exhaust(stream_or_iterable):
def parse_boundary_stream(stream, max_header_size):
def parse_header(line):
def fix_location_header(request, response):
def conditional_content_removal(request, response):
def fix_IE_for_attach(request, response):
def fix_IE_for_vary(request, response):
def build_request_repr(request, path_override=None, GET_override=None, POST_override=None, COOKIES_override=None, META_override=None):
def bytes_to_text(s, encoding):
def validate_host(host, allowed_hosts):
def compat_patch_logging_config(logging_config):
def i18n_patterns(prefix, *args):
def static(prefix, view='django.views.static.serve', **kwargs):
def to_list(value):
def connections_support_transactions():
def skipIfDBFeature(feature):
def skipUnlessDBFeature(feature):
def instrumented_test_render(self, context):
def setup_test_environment():
def teardown_test_environment():
def get_warnings_state():
def restore_warnings_state(state):
def setup_test_template_loader(templates_dict, use_cached_loader=False):
def restore_template_loaders():
def compare_xml(want, got):
def strip_quotes(want, got):
def store_rendered_templates(store, signal, sender, template, context, **kwargs):
def encode_multipart(boundary, data):
def _extract_future_flags(globs):
def _normalize_module(module, depth=2):
def _indent(s, indent=4):
def _exception_traceback(exc_info):
def _ellipsis_match(want, got):
def _comment_line(line):
def testmod(m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False):
def testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser(), encoding=None):
def run_docstring_examples(f, globs, verbose=False, name='NoName', compileflags=None, optionflags=0):
def set_unittest_reportflags(flags):
def DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, test_class=DocTestCase, **options):
def DocFileSuite(*paths, **kw):
def script_from_examples(s):
def testsource(module, name):
def debug_src(src, pm=False, globs=None):
def debug_script(src, pm=False, globs=None):
def debug(module, name, pm=False):
def build_suite(app_module):
def build_test(label):
def partition_suite(suite, classes, bins):
def reorder_suite(suite, classes):
def dependency_ordered(test_databases, dependencies):
def parse_html(html):
@register.tag DCNL def autoescape(parser, token):
@register.tag DCNL def comment(parser, token):
@register.tag DCNL def cycle(parser, token):
@register.tag DCNL def debug(parser, token):
@register.tag(u'filter') DCNL def do_filter(parser, token):
@register.tag DCNL def firstof(parser, token):
@register.tag(u'for') DCNL def do_for(parser, token):
@register.tag DCNL def ifequal(parser, token):
@register.tag DCNL def ifnotequal(parser, token):
@register.tag(u'if') DCNL def do_if(parser, token):
@register.tag DCNL def ifchanged(parser, token):
@register.tag DCNL def ssi(parser, token):
@register.tag DCNL def load(parser, token):
@register.tag DCNL def now(parser, token):
@register.tag DCNL def regroup(parser, token):
@register.tag DCNL def spaceless(parser, token):
@register.tag DCNL def templatetag(parser, token):
@register.tag DCNL def url(parser, token):
@register.tag DCNL def verbatim(parser, token):
@register.tag DCNL def widthratio(parser, token):
@register.tag(u'with') DCNL def do_with(parser, token):
def compile_string(template_string, origin):
def resolve_variable(path, context):
def _render_value_in_context(value, context):
def token_kwargs(bits, parser, support_legacy=False):
def parse_bits(parser, bits, params, varargs, varkw, defaults, takes_context, name):
def generic_tag_compiler(parser, token, params, varargs, varkw, defaults, name, takes_context, node_class):
def is_library_missing(name):
def import_library(taglib_module):
def get_templatetags_modules():
def get_library(library_name):
def stringfilter(func):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def addslashes(value):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def capfirst(value):
@register.filter(u'escapejs') DCNL @stringfilter DCNL def escapejs_filter(value):
@register.filter(u'fix_ampersands', is_safe=True) DCNL @stringfilter DCNL def fix_ampersands_filter(value):
@register.filter(is_safe=True) DCNL def floatformat(text, arg=(-1)):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def iriencode(value):
@register.filter(is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def linenumbers(value, autoescape=None):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def lower(value):
@register.filter(is_safe=False) DCNL @stringfilter DCNL def make_list(value):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def slugify(value):
@register.filter(is_safe=True) DCNL def stringformat(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def title(value):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def truncatechars(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def truncatewords(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def truncatewords_html(value, arg):
@register.filter(is_safe=False) DCNL @stringfilter DCNL def upper(value):
@register.filter(is_safe=False) DCNL @stringfilter DCNL def urlencode(value, safe=None):
@register.filter(is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def urlize(value, autoescape=None):
@register.filter(is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def urlizetrunc(value, limit, autoescape=None):
@register.filter(is_safe=False) DCNL @stringfilter DCNL def wordcount(value):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def wordwrap(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def ljust(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def rjust(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def center(value, arg):
@register.filter DCNL @stringfilter DCNL def cut(value, arg):
@register.filter(u'escape', is_safe=True) DCNL @stringfilter DCNL def escape_filter(value):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def force_escape(value):
@register.filter(u'linebreaks', is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def linebreaks_filter(value, autoescape=None):
@register.filter(is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def linebreaksbr(value, autoescape=None):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def safe(value):
@register.filter(is_safe=True) DCNL def safeseq(value):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def removetags(value, tags):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def striptags(value):
@register.filter(is_safe=False) DCNL def dictsort(value, arg):
@register.filter(is_safe=False) DCNL def dictsortreversed(value, arg):
@register.filter(is_safe=False) DCNL def first(value):
@register.filter(is_safe=True, needs_autoescape=True) DCNL def join(value, arg, autoescape=None):
@register.filter(is_safe=True) DCNL def last(value):
@register.filter(is_safe=True) DCNL def length(value):
@register.filter(is_safe=False) DCNL def length_is(value, arg):
@register.filter(is_safe=True) DCNL def random(value):
@register.filter(u'slice', is_safe=True) DCNL def slice_filter(value, arg):
@register.filter(is_safe=True, needs_autoescape=True) DCNL def unordered_list(value, autoescape=None):
@register.filter(is_safe=False) DCNL def add(value, arg):
@register.filter(is_safe=False) DCNL def get_digit(value, arg):
@register.filter(expects_localtime=True, is_safe=False) DCNL def date(value, arg=None):
@register.filter(expects_localtime=True, is_safe=False) DCNL def time(value, arg=None):
@register.filter(u'timesince', is_safe=False) DCNL def timesince_filter(value, arg=None):
@register.filter(u'timeuntil', is_safe=False) DCNL def timeuntil_filter(value, arg=None):
@register.filter(is_safe=False) DCNL def default(value, arg):
@register.filter(is_safe=False) DCNL def default_if_none(value, arg):
@register.filter(is_safe=False) DCNL def divisibleby(value, arg):
@register.filter(is_safe=False) DCNL def yesno(value, arg=None):
@register.filter(is_safe=True) DCNL def filesizeformat(bytes):
@register.filter(is_safe=False) DCNL def pluralize(value, arg=u's'):
@register.filter(u'phone2numeric', is_safe=True) DCNL def phone2numeric_filter(value):
@register.filter(is_safe=True) DCNL def pprint(value):
def get_template(template_name):
def get_template_from_string(source, origin=None, name=None):
def render_to_string(template_name, dictionary=None, context_instance=None):
def select_template(template_name_list):
@register.tag('block') DCNL def do_block(parser, token):
@register.tag('extends') DCNL def do_extends(parser, token):
@register.tag('include') DCNL def do_include(parser, token):
def infix(bp, func):
def prefix(bp, func):
@register.tag DCNL def get_flatpages(parser, token):
def flatpage(request, url):
@csrf_protect DCNL def render_flatpage(request, f):
def matches_patterns(path, patterns=None):
def get_files(storage, ignore_patterns=None, location=''):
def check_settings(base_url=None):
@register.tag('static') DCNL def do_static(parser, token):
def find(path, all=False):
def _get_finder(import_path):
def staticfiles_urlpatterns(prefix=None):
def serve(request, path, document_root=None, insecure=False, **kwargs):
@register.tag DCNL def get_comment_count(parser, token):
@register.tag DCNL def get_comment_list(parser, token):
@register.tag DCNL def render_comment_list(parser, token):
@register.tag DCNL def get_comment_form(parser, token):
@register.tag DCNL def render_comment_form(parser, token):
@register.simple_tag DCNL def comment_form_target():
@register.simple_tag DCNL def get_comment_permalink(comment, anchor_pattern=None):
def get_comment_app():
def get_comment_app_name():
def get_model():
def get_form():
def get_form_target():
def get_flag_url(comment):
def get_delete_url(comment):
def get_approve_url(comment):
def next_redirect(request, fallback, **get_kwargs):
def confirmation_view(template, doc='Display DCSP a DCSP confirmation DCSP view.'):
@csrf_protect DCNL @require_POST DCNL def post_comment(request, next=None, using=None):
@csrf_protect DCNL @login_required DCNL def flag(request, comment_id, next=None):
@csrf_protect DCNL @permission_required('comments.can_moderate') DCNL def delete(request, comment_id, next=None):
@csrf_protect DCNL @permission_required('comments.can_moderate') DCNL def approve(request, comment_id, next=None):
def perform_flag(request, comment):
@register.filter(is_safe=True) DCNL def ordinal(value):
@register.filter(is_safe=True) DCNL def intcomma(value, use_l10n=True):
@register.filter(is_safe=False) DCNL def intword(value):
@register.filter(is_safe=True) DCNL def apnumber(value):
@register.filter(expects_localtime=True) DCNL def naturalday(value, arg=None):
@register.filter DCNL def naturaltime(value):
def layer_option(option, opt, value, parser):
def list_option(option, opt, value, parser):
def get_srid_info(srid, connection):
def get_dist_ops(operator):
def no_backend(test_func, backend):
def geo_apps(namespace=True, runtests=False):
def geodjango_suite(apps=True):
def suite():
def run(verbosity=1):
def fromfile(file_h):
def fromstr(string, **kwargs):
def check_cs_ptr(result, func, cargs):
def check_cs_op(result, func, cargs):
def check_cs_get(result, func, cargs):
def cs_int(func):
def cs_operation(func, ordinate=False, get=False):
def cs_output(func, argtypes):
def binary_predicate(func, *args):
def unary_predicate(func):
def bin_constructor(func):
def bin_output(func):
def geom_output(func, argtypes):
def geom_index(func):
def int_from_geom(func, zero=False):
def string_from_geom(func):
def last_arg_byref(args):
def check_dbl(result, func, cargs):
def check_geom(result, func, cargs):
def check_minus_one(result, func, cargs):
def check_predicate(result, func, cargs):
def check_sized_string(result, func, cargs):
def check_string(result, func, cargs):
def check_zero(result, func, cargs):
def dbl_from_geom(func, num_geom=1):
def topology(func, *args, **kwargs):
def get_pointer_arr(n):
def geos_version_info():
def index(request, sitemaps):
def sitemap(request, sitemaps, section=None):
def kml(request, label, model, field_name=None, compress=False, using=DEFAULT_DB_ALIAS):
def kmz(request, label, model, field_name=None, using=DEFAULT_DB_ALIAS):
def tuplize(seq):
def strconvert(d):
def feed(request, url, feed_dict=None):
def std_call(func):
def gdal_version():
def gdal_full_version():
def suite():
def run(verbosity=1):
def check_err(code):
def env_func(f, argtypes):
def pnt_func(f):
def arg_byref(args, offset=(-1)):
def ptr_byref(args, offset=(-1)):
def check_bool(result, func, cargs):
def check_const_string(result, func, cargs, offset=None):
def check_string(result, func, cargs, offset=(-1), str_result=False):
def check_envelope(result, func, cargs, offset=(-1)):
def check_geom(result, func, cargs):
def check_geom_offset(result, func, cargs, offset=(-1)):
def check_arg_errcode(result, func, cargs):
def check_errcode(result, func, cargs):
def check_pointer(result, func, cargs):
def check_str_arg(result, func, cargs):
def double_output(func, argtypes, errcheck=False, strarg=False):
def geom_output(func, argtypes, offset=None):
def int_output(func, argtypes):
def srs_output(func, argtypes):
def string_output(func, argtypes, offset=(-1), str_result=False, decoding=None):
def void_output(func, argtypes, errcheck=True):
def voidptr_output(func, argtypes):
def srs_double(f):
def units_func(f):
def ogrinfo(data_source, num_features=10):
def mapping(data_source, geom_name='geom', layer_key=0, multi_geom=False):
def ogrinspect(*args, **kwargs):
def _ogrinspect(data_source, model_name, geom_name='geom', layer_key=0, srid=None, multi_geom=False, name_field=None, imports=True, decimal=False, blank=False, null=False):
def precision_wkt(geom, prec):
def add_srs_entry(srs, auth_name='EPSG', auth_srid=None, ref_sys_name=None, database=None):
def compress_kml(kml):
def render_to_kml(*args, **kwargs):
def render_to_kmz(*args, **kwargs):
def render_to_text(*args, **kwargs):
@register.tag DCNL def get_admin_log(parser, token):
@register.simple_tag DCNL def paginator_number(cl, i):
@register.inclusion_tag(u'admin/pagination.html') DCNL def pagination(cl):
def result_headers(cl):
def items_for_result(cl, result, form):
@register.inclusion_tag(u'admin/change_list_results.html') DCNL def result_list(cl):
@register.inclusion_tag(u'admin/date_hierarchy.html') DCNL def date_hierarchy(cl):
@register.inclusion_tag(u'admin/search_form.html') DCNL def search_form(cl):
@register.inclusion_tag(u'admin/actions.html', takes_context=True) DCNL def admin_actions(context):
@register.inclusion_tag('admin/prepopulated_fields_js.html', takes_context=True) DCNL def prepopulated_fields_js(context):
@register.inclusion_tag('admin/submit_line.html', takes_context=True) DCNL def submit_row(context):
@register.filter DCNL def cell_count(inline_admin_form):
def autodiscover():
def lookup_needs_distinct(opts, lookup_path):
def prepare_lookup_value(key, value):
def quote(s):
def unquote(s):
def flatten_fieldsets(fieldsets):
def get_deleted_objects(objs, opts, user, admin_site, using):
def model_format_dict(obj):
def model_ngettext(obj, n=None):
def label_for_field(name, model, model_admin=None, return_attr=False):
def reverse_field_path(model, path):
def get_fields_from_path(model, path):
def remove_trailing_data_field(fields):
def get_limit_choices_to_from_path(model, path):
def staff_member_required(view_func):
def validate(cls, model):
def validate_fields_spec(cls, model, opts, flds, label):
def normalize_fieldsets(fieldsets):
def normalize_dictionary(data_dict):
def url_params_from_lookup_dict(lookups):
def delete_selected(modeladmin, request, queryset):
def ssn_check_digit(value):
def vat_number_check_digit(vat_number):
def id_number_checksum(gd):
def validate_id_birthday(gd, fix_coordination_number_day=True):
def get_validation_digit(number):
def ping_google(sitemap_url=None, ping_url=PING_URL):
@register.filter(is_safe=True) DCNL def markdown(value, arg=''):
@register.tag DCNL def lorem(parser, token):
def sentence():
def paragraph():
def paragraphs(count, common=True):
def words(count, common=True):
def trim_docstring(docstring):
def parse_docstring(docstring):
def parse_rst(text, default_reference_context, thing_being_parsed=None):
def missing_docutils_page(request):
def get_return_data_type(func_name):
def get_readable_field_data_type(field):
def extract_views_from_urlpatterns(urlpatterns, base=''):
def simplify_regex(pattern):
def get_current_site(request):
def _get_all_permissions(opts, ctype):
def _get_builtin_permissions(opts):
def _check_permission_clashing(custom, builtin, ctype):
def get_system_username():
def get_default_username(check_db=True):
def check_password(environ, username, password):
def groups_for_user(environ, username):
def _clean_credentials(credentials):
def authenticate(**credentials):
def login(request, user):
def logout(request):
def get_user_model():
def skipIfCustomUser(test_func):
@never_cache DCNL def remote_user_auth_view(request):
def mock_inputs(inputs):
def update_last_login(sender, user, **kwargs):
def auth(request):
def check_password(password, encoded, setter=None, preferred=u'default'):
def make_password(password, salt=None, hasher=u'default'):
def get_hasher(algorithm=u'default'):
def identify_hasher(encoded):
def mask_hash(hash, show=6, char=u'*'):
def user_passes_test(test_func, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME):
def login_required(function=None, redirect_field_name=REDIRECT_FIELD_NAME, login_url=None):
def permission_required(perm, login_url=None, raise_exception=False):
@sensitive_post_parameters() DCNL @csrf_protect DCNL @never_cache DCNL def login(request, template_name='registration/login.html', redirect_field_name=REDIRECT_FIELD_NAME, authentication_form=AuthenticationForm, current_app=None, extra_context=None):
def logout(request, next_page=None, template_name='registration/logged_out.html', redirect_field_name=REDIRECT_FIELD_NAME, current_app=None, extra_context=None):
def logout_then_login(request, login_url=None, current_app=None, extra_context=None):
def redirect_to_login(next, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME):
@sensitive_post_parameters() DCNL @never_cache DCNL def password_reset_confirm(request, uidb36=None, token=None, template_name='registration/password_reset_confirm.html', token_generator=default_token_generator, set_password_form=SetPasswordForm, post_reset_redirect=None, current_app=None, extra_context=None):
def normalize_name(name):
def form_hmac(form):
def update_contenttypes(app, created_models, verbosity=2, db=DEFAULT_DB_ALIAS, **kwargs):
def create_generic_related_manager(superclass):
def generic_inlineformset_factory(model, form=ModelForm, formset=BaseGenericInlineFormSet, ct_field=u'content_type', fk_field=u'object_id', fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None):
def shortcut(request, content_type_id, object_id):
def get_level_tags():
def add_level_messages(storage):
def set_cookie_data(storage, messages, invalid=False, encode_empty=False):
def stored_cookie_messages_count(storage, response):
def set_session_data(storage, messages):
def messages(request):
def get_storage(import_path):
def add_message(request, level, message, extra_tags='', fail_silently=False):
def get_messages(request):
def get_level(request):
def set_level(request, level):
def debug(request, message, extra_tags='', fail_silently=False):
def info(request, message, extra_tags='', fail_silently=False):
def success(request, message, extra_tags='', fail_silently=False):
def warning(request, message, extra_tags='', fail_silently=False):
def error(request, message, extra_tags='', fail_silently=False):
def clean_ipv6_address(ip_str, unpack_ipv4=False, error_message='This DCSP is DCSP not DCSP a DCSP valid DCSP IPv6 DCSP address'):
def _sanitize_ipv4_mapping(ip_str):
def _unpack_ipv4(ip_str):
def is_valid_ipv6_address(ip_str):
def _explode_shorthand_ip_string(ip_str):
def _is_shorthand_ip(ip_str):
def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='', force_grouping=False):
def _resolve_name(name, package, level):
def import_module(name, package=None):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d, **kw):
def itervalues(d, **kw):
def iteritems(d, **kw):
def iterlists(d, **kw):
def with_metaclass(meta, base=object):
def get_tag_uri(url, date):
def skip(reason):
def skipIf(condition, reason):
def skipUnless(condition, reason):
def sorted_list_difference(expected, actual):
def unorderable_list_difference(expected, actual, ignore_duplicate=False):
def _CmpToKey(mycmp):
def _relpath_nt(path, start=os.path.curdir):
def _relpath_posix(path, start=os.path.curdir):
def _isnotsuite(test):
def luhn(candidate):
def timesince(d, now=None, reversed=False):
def timeuntil(d, now=None):
def normalize(pattern):
def next_char(input_iter):
def walk_to_end(ch, input_iter):
def get_quantifier(ch, input_iter):
def contains(source, inst):
def flatten_result(source):
def _string_concat(*strings):
def to_locale(language, to_lower=False):
def to_language(locale):
def translation(language):
def activate(language):
def deactivate():
def deactivate_all():
def get_language():
def get_language_bidi():
def catalog():
def do_translate(message, translation_function):
def gettext(message):
def gettext_noop(message):
def ngettext(singular, plural, number):
def all_locale_paths():
def check_for_language(lang_code):
def get_language_from_path(path, supported=None):
def get_language_from_request(request, check_path=False):
def blankout(src, char):
def templatize(src, origin=None):
def parse_accept_lang_header(lang_string):
def mark_safe(s):
def mark_for_escaping(s):
def dictConfig(config):
def colorize(text='', opts=(), **kwargs):
def make_style(opts=(), **kwargs):
def parse_color_setting(config_string):
def reset_format_cache():
def iter_format_modules(lang):
def get_format_modules(lang=None, reverse=False):
def get_format(format_type, lang=None, use_l10n=None):
def date_format(value, format=None, use_l10n=None):
def time_format(value, format=None, use_l10n=None):
def number_format(value, decimal_pos=None, use_l10n=None, force_grouping=False):
def localize(value, use_l10n=None):
def localize_input(value, default=None):
def sanitize_separators(value):
def extract(path, to_path=''):
def module_has_submodule(package, module_name):
def get_version(version=None):
def get_git_changeset():
def wrap(text, width):
def get_valid_filename(s):
def get_text_list(list_, last_word=ugettext_lazy(u'or')):
def recapitalize(text):
def phone2numeric(phone):
def smart_split(text):
def unescape_string_literal(s):
def slugify(value):
def parse_date(value):
def parse_time(value):
def parse_datetime(value):
def literals(choices, prefix='', suffix=''):
def prepare_js_for_gettext(js):
def python_2_unicode_compatible(klass):
def smart_text(s, encoding=u'utf-8', strings_only=False, errors=u'strict'):
def is_protected_type(obj):
def force_text(s, encoding=u'utf-8', strings_only=False, errors=u'strict'):
def smart_bytes(s, encoding=u'utf-8', strings_only=False, errors=u'strict'):
def force_bytes(s, encoding=u'utf-8', strings_only=False, errors=u'strict'):
def iri_to_uri(iri):
def filepath_to_uri(path):
def upath(path):
def npath(path):
def safe_join(base, *paths):
def rmtree_errorhandler(func, path, exc_info):
def new_date(d):
def new_datetime(d):
def salted_hmac(key_salt, value, secret=None):
def get_random_string(length=12, allowed_chars=u'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'):
def constant_time_compare(val1, val2):
def _bin_to_long(x):
def _long_to_bin(x, hex_format_string):
def _fast_hmac(key, msg, digest):
def pbkdf2(password, salt, iterations, dklen=0, digest=None):
def memoize(func, cache, num_args):
def lazy(func, *resultclasses):
def allow_lazy(func, *resultclasses):
def partition(predicate, values):
def method_decorator(decorator):
def decorator_from_middleware_with_args(middleware_class):
def decorator_from_middleware(middleware_class):
def available_attrs(fn):
def get_default_timezone():
def get_default_timezone_name():
def get_current_timezone():
def get_current_timezone_name():
def _get_timezone_name(timezone):
def activate(timezone):
def deactivate():
def template_localtime(value, use_tz=None):
def localtime(value, timezone=None):
def now():
def is_aware(value):
def is_naive(value):
def make_aware(value, timezone):
def make_naive(value, timezone):
def is_iterable(x):
def is_iterator(x):
def escape(text):
def escapejs(value):
def conditional_escape(text):
def format_html(format_string, *args, **kwargs):
def format_html_join(sep, format_string, args_generator):
def linebreaks(value, autoescape=False):
def strip_tags(value):
def remove_tags(html, tags):
def strip_spaces_between_tags(value):
def strip_entities(value):
def fix_ampersands(value):
def smart_urlquote(url):
def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):
def clean_html(text):
def format(value, format_string):
def time_format(value, format_string):
def urlquote(url, safe=u'/'):
def urlquote_plus(url, safe=u''):
def urlunquote(quoted_url):
def urlunquote_plus(quoted_url):
def urlencode(query, doseq=0):
def cookie_date(epoch_seconds=None):
def http_date(epoch_seconds=None):
def parse_http_date(date):
def parse_http_date_safe(date):
def base36_to_int(s):
def int_to_base36(i):
def parse_etags(etag_str):
def quote_etag(etag):
def same_origin(url1, url2):
def is_safe_url(url, host=None):
def patch_cache_control(response, **kwargs):
def get_max_age(response):
def patch_response_headers(response, cache_timeout=None):
def add_never_cache_headers(response):
def patch_vary_headers(response, newheaders):
def has_vary_header(response, header_query):
def _i18n_cache_key_suffix(request, cache_key):
def _generate_cache_key(request, method, headerlist, key_prefix):
def _generate_cache_header_key(key_prefix, request):
def get_cache_key(request, key_prefix=None, method=u'GET', cache=None):
def learn_cache_key(request, response, cache_timeout=None, key_prefix=None, cache=None):
@transaction.commit_on_success DCNL def load_data_for_offline_install(in_file):
@csrf_exempt DCNL def register_device(request):
@allow_jsonp DCNL def get_server_info(request):
def require_registration(resource_name):
def central_server_down_or_error(error_msg):
@allow_jsonp DCNL def register_public_key_server_auto(request):
def x_server_test(f, cond, msg):
def distributed_server_test(f):
def central_server_test(f):
def add_syncing_models(models, dependency_check=False):
def get_device_counters(**kwargs):
def get_models(device_counters=None, limit=None, zone=None, dest_version=None, **kwargs):
def save_serialized_models(data, increment_counters=True, src_version=None, verbose=False):
def serialize(models, sign=True, increment_counters=True, dest_version=VERSION, *args, **kwargs):
def deserialize(data, src_version=VERSION, dest_version=VERSION, *args, **kwargs):
def _get_own_device():
@csrf_exempt DCNL @gzip_page DCNL @require_sync_session DCNL @api_handle_error_with_json DCNL def device_download(data, session):
@csrf_exempt DCNL @require_sync_session DCNL @api_handle_error_with_json DCNL def device_upload(data, session):
@csrf_exempt DCNL @require_sync_session DCNL @api_handle_error_with_json DCNL def model_upload(data, session):
@csrf_exempt DCNL @gzip_page DCNL @require_sync_session DCNL @api_handle_error_with_json DCNL def model_download(data, session):
@require_admin DCNL @api_handle_error_with_json DCNL def force_sync(request):
def content_db_init(instance):
@set_database DCNL def teardown_content_db(instance, db):
def setup_content_paths(context):
def setup_sauce_browser(context):
def setup_local_browser(context):
def database_setup(context):
def database_teardown(context):
def do_fake_registration():
def switch_to_active_element(browser):
def central_server_only(handler):
def distributed_server_only(handler):
def setup_browser(browser_type='Firefox'):
def hacks_for_phantomjs(browser):
def browse_to(browser, dest_url, wait_time=0.1, max_retries=50):
def wait_for_page_change(browser, source_url=None, page_source=None, wait_time=0.1, max_retries=50):
def patch_broken_pipe_error():
def get_features(app_module):
def check_feature_file(features_dir, feature_name):
def _assert_no_element_by(context, by, value, wait_time=MAX_WAIT_FOR_UNEXPECTED_ELEMENT):
def assert_no_element_by_id(context, _id, wait_time=MAX_WAIT_FOR_UNEXPECTED_ELEMENT):
def assert_no_element_by_css_selector(context, css_value, wait_time=MAX_WAIT_FOR_UNEXPECTED_ELEMENT):
def assert_no_element_by_xpath_selector(context, xpath, wait_time=MAX_WAIT_FOR_UNEXPECTED_ELEMENT):
def click_and_wait_for_page_load(context, elem, wait_time=MAX_PAGE_LOAD_TIME):
def click_and_wait_for_id_to_appear(context, elem_click, elem_wait, wait_time=MAX_WAIT_TIME):
def elem_is_invisible_with_wait(context, elem, wait_time=MAX_WAIT_TIME):
def elem_is_visible_with_wait(context, elem, wait_time=MAX_WAIT_TIME):
def find_css_class_with_wait(context, css_class, **kwargs):
def find_clickable_id_with_wait(context, id_str, **kwargs):
def find_id_with_wait(context, id_str, **kwargs):
def id_shown_with_wait(context, id_str, **kwargs):
def find_xpath_with_wait(context, id_str, **kwargs):
def find_css_with_wait(context, id_str, **kwargs):
def _find_elem_with_wait(context, by, wait_time=MAX_WAIT_TIME):
def _find_clickable_elem_with_wait(context, by, wait_time=MAX_WAIT_TIME):
def _shown_elem_with_wait(context, by, wait_time=MAX_WAIT_TIME):
def build_url(context, url, params=None):
def _login_user(context, username, password, facility=None):
def login_as_learner(context, learner_name='mrpibb', learner_pass='abc123'):
def login_as_coach(context, coach_name='mrpibb', coach_pass='abc123'):
def login_as_admin(context, admin_name='admin', admin_pass='abc123'):
def post(context, url, data=''):
def request(context, url, method='GET', data=''):
def wait_for_video_player_ready(context, wait_time=MAX_WAIT_TIME):
def user_agent():
@contextmanager DCNL def inside_transaction():
def get_user_from_request(handler=None, request=None, *args, **kwargs):
def require_login(handler):
def require_admin(handler):
def require_authorized_access_to_student_data(handler):
def require_authorized_admin(handler):
def require_superuser(handler):
def _is_central_object_admin(object_list, bundle):
def _user_is_admin(object_list, bundle):
def get_accessible_objects_from_logged_in_user(request, facility):
def facility_from_request(handler=None, request=None, *args, **kwargs):
def facility_required(handler):
@require_authorized_admin DCNL def add_facility_teacher(request):
@require_authorized_admin DCNL @dynamic_settings DCNL def add_facility_student(request, ds):
def facility_user_signup(request):
@require_authorized_admin DCNL @dynamic_settings DCNL def edit_facility_user(request, ds, facility_user_id):
@facility_required DCNL @render_to('facility/facility_user.html') DCNL def _facility_user(request, facility, title, is_teacher=False, new_user=False, user_being_edited=None):
@require_login DCNL def update_all_distributed(request):
@csrf_exempt DCNL def update_all_distributed_callback(request):
def generate_fake_facilities(names=('Wilson DCSP Elementary',)):
def generate_fake_facility_groups(names=('Class DCSP 4E', 'Class DCSP 5B'), facilities=None):
def generate_fake_facility_users(nusers=20, facilities=None, facility_groups=None, password='hellothere', is_teacher=False):
def probability_of(qty, user_settings):
def generate_fake_exercise_logs(facility_user=None, topics=topics, start_date=(datetime.datetime.now() - datetime.timedelta(days=(30 * 6)))):
def generate_fake_video_logs(facility_user=None, topics=topics, start_date=(datetime.datetime.now() - datetime.timedelta(days=(30 * 6)))):
def create_some_learner_data():
def unique_by_id_and_kind_sort(seq):
@require_authorized_access_to_student_data DCNL @render_to('coachreports/student_view.html') DCNL def student_view(request):
@require_authorized_access_to_student_data DCNL def student_view_context(request):
@require_authorized_admin DCNL @facility_from_request DCNL @render_to('coachreports/coach.html') DCNL def coach_reports(request, facility=None, zone_id=None):
def log_coach_report_view(request):
def available_content_databases():
def smart_translate_item_data(item_data):
def set_database(function):
def parse_data(function):
@parse_data DCNL @set_database DCNL def get_random_content(kinds=None, limit=1, available=None, **kwargs):
@set_database DCNL def get_content_item(content_id=None, topic=False, **kwargs):
@parse_data DCNL @set_database DCNL def get_content_items(ids=None, **kwargs):
@parse_data DCNL @set_database DCNL def get_topic_nodes(parent=None, ids=None, **kwargs):
@parse_data DCNL @set_database DCNL def get_topic_update_nodes(parent=None, **kwargs):
@set_database DCNL def get_topic_node(content_id=None, topic=True, **kwargs):
@set_database DCNL def get_topic_nodes_with_children(parent=None, **kwargs):
@parse_data DCNL @set_database DCNL def get_content_parents(ids=None, **kwargs):
@parse_data DCNL @set_database DCNL def get_leafed_topics(kinds=None, db=None, **kwargs):
@parse_data DCNL @set_database DCNL def get_topic_contents(kinds=None, topic_id=None, **kwargs):
@set_database DCNL def get_download_youtube_ids(paths=None, downloaded=False, **kwargs):
def get_video_from_youtube_id(youtube_id):
@parse_data DCNL @set_database DCNL def _get_video_from_youtube_id(youtube_id=None, **kwargs):
@set_database DCNL def search_topic_nodes(kinds=None, query=None, page=1, items_per_page=10, exact=True, **kwargs):
@set_database DCNL def bulk_insert(items, **kwargs):
@set_database DCNL def create(item, **kwargs):
@set_database DCNL def get(item, **kwargs):
@set_database DCNL def delete_instances(ids, **kwargs):
@set_database DCNL def get_or_create(item, **kwargs):
@set_database DCNL def update_item(update=None, path=None, **kwargs):
def iterator_content_items(ids=None, channel='khan', language='en', **kwargs):
def iterator_content_items_by_youtube_id(ids=None, channel='khan', language='en', **kwargs):
@set_database DCNL def create_table(**kwargs):
def annotate_content_models_by_youtube_id(channel='khan', language='en', youtube_ids=None):
@set_database DCNL def annotate_content_models(channel='khan', language='en', ids=None, iterator_content_items=iterator_content_items, **kwargs):
@set_database DCNL def update_parents(parent_mapping=None, **kwargs):
@set_database DCNL def get_assessment_item_data(assessment_item_id=None, **kwargs):
def get_resume_recommendations(user, request):
def get_completed_exercises(user):
def get_next_recommendations(user, request):
def get_group_recommendations(user):
def get_struggling_exercises(user):
def get_exercise_prereqs(exercises):
def get_explore_recommendations(user, request):
def get_exercise_parents_lookup_table():
def get_exercises_from_topics(topicId_list):
def get_most_recent_incomplete_item(user):
def get_most_recent_exercises(user):
def generate_recommendation_data():
def get_recommendation_tree(data):
def get_recommended_exercises(subtopic_id):
def get_neighbors_at_dist_1(topic_index, subtopic_index, topic):
def get_subsequent_neighbors(nearest_neighbors, data, curr):
@given("I've DCSP started DCSP the DCSP intro") DCNL def step_impl(context):
def narrative_view(request, narrative_id):
def reset_sqlite_database(username=None, email=None, password=None, router=None, verbosity='1'):
def delete_sqlite_database(database=None, verbosity='1'):
def enter_star_ratings(context, val=3):
def rate_id(context, id_, val=3):
def enter_text_feedback(context, text_feedback):
def get_text_feedback(context):
@then('the DCSP modal DCSP will DCSP dismiss') DCNL def impl(context):
def _slurp(filename):
def main():
def main():
def lint_file(filename, apply_fix, verbose):
def get_plural_form(word):
def get_plural_num_pos(match):
def get_is_plural_num(match):
def _check_plural_arg_is_num(plural_arg):
def _check_plural_is_ambiguous(plural_arg):
def _extract_nodes(html_tree, filename):
def _replace_node(node, replace_node):
def _parse_single_node(text):
def _get_outerhtml(html_node):
def _get_innerhtml(html_node):
def get_page_html(html_tree):
def _clean_data_if(match):
def prompt_user(prompt, default=''):
def close_issue(issue, github_auth):
def post_issue_comment(issue, comment_text, github_auth):
def get_messages_for_api_calls(request):
def check_setup_status(handler):
@render_to('distributed/learn.html') DCNL def learn(request):
@check_setup_status DCNL @render_to('distributed/homepage.html') DCNL def homepage(request):
@require_admin DCNL def zone_redirect(request):
@require_admin DCNL def device_redirect(request):
def crypto_login(request):
def submit_facility_form(context):
def get_empty_facilities_msg(browser):
@require_authorized_admin DCNL @render_to_csv(['students'], key_label='user_id', order='stacked') DCNL def facility_management_csv(request, facility, group_id=None, zone_id=None, frequency=None, period_start='', period_end='', user_type=None):
def _get_date_range(frequency, period_start, period_end):
def _get_user_usage_data(users, groups=None, period_start=None, period_end=None, group_id=None):
def check_meta_data(facility):
def update_default_args(defaults, updates):
def get_size(start_path):
def read_pid_file(filename):
def get_pid():
def manage(command, args=None, as_thread=False):
def start(debug=False, daemonize=True, args=[], skip_job_scheduler=False, port=None, auto_initialize=True):
def stop(args=[], sys_exit=True):
def get_urls():
def get_urls_proxy(output_pipe=sys.stderr):
def status():
def diagnose():
def url():
def docopt(doc, argv=None, help=True, version=None, options_first=False):
def get_locale_path(lang_code=None):
def get_po_filepath(lang_code, filename=None):
def get_langcode_map(lang_name=None, force=False):
def get_subtitle_file_path(lang_code=None, youtube_id=None):
def get_code2lang_map(lang_code=None, force=False):
def get_language_name(lang_code, native=None, error_on_missing=False):
def convert_language_code_format(lang_code, for_django=True):
def outdated_langpacks():
def _get_installed_language_packs():
def get_default_language():
def set_default_language(lang_code):
def update_jsi18n_file(code='en'):
def select_best_available_language(target_code, available_codes=None):
def download_content_pack(fobj, lang, minimal=False):
def extract_content_db(zf, lang, is_template=False):
@csrf_exempt DCNL @api_handle_error_with_json DCNL def set_server_or_user_default_language(request):
def set_language_data_from_request(request):
def _parse_focus(arg_str):
def _parse_command(command):
def _parse_login(username, password, submit=''):
def _parse_nav_steps(arg_str):
def test_parse_focus():
def test_parse_command():
@raises(ActionError) DCNL def test_parse_command_action_error():
@raises(OptionError) DCNL def test_parse_command_option_error():
def test_parse_login():
def test_parse_nav_steps():
def plugin_cache_dir():
def clone_plugin(plugin):
def setup_other_plugins(all_plugins):
def escape(inp):
def command(cmd):
def eval(text):
def bindeval(text):
def feedkeys(keys, mode='n'):
def new_scratch_buffer(text):
def virtual_position(line, col):
def select(start, end):
def _unmap_select_mode_mapping():
def unescape(text):
def escape(text, chars):
def fill_in_whitespace(text):
def head_tail(line):
def is_complete_edit(initial_line, original, wanted, cmds):
def guess_edit(initial_line, last_text, current_text, vim_state):
def diff(a, b, sline=0):
def _calc_end(text, start):
def _text_to_vim(start, end, text):
def _find_closing_brace(string, start_pos):
def _split_conditional(string):
def _replace_conditional(match, string):
def _chomp(string):
def _run_shell_command(cmd, tmpdir):
def _get_tmp():
def _ask_user(a, formatted):
def _ask_snippets(snippets):
@contextmanager DCNL def use_proxy_buffer(snippets_stack, vstate):
@contextmanager DCNL def suspend_proxy_edits():
def echo_to_hierarchy(text_object):
def debug(msg):
def print_stack():
def _hash_file(path):
def handle_extends(tail, line_index):
def find_snippet_files(ft, directory):
def find_all_snippet_files(ft):
def _handle_snippet_or_global(filename, line, lines, python_globals, priority, pre_expand, context):
def _parse_snippets_file(data, filename):
def _splitall(path):
def snipmate_files_for(ft):
def _parse_snippet_file(content, full_filename):
def _parse_snippet(line, lines, filename):
def _parse_snippets_file(data, filename):
def resolve_ambiguity(all_tokens, seen_ts):
def tokenize_snippet_text(snippet_instance, text, indent, allowed_tokens_in_text, allowed_tokens_in_tabstops, token_to_textobject):
def finalize(all_tokens, seen_ts, snippet_instance):
def _create_transformations(all_tokens, seen_ts):
def parse_and_instantiate(parent_to, text, indent):
def _parse_number(stream):
def _parse_till_closing_brace(stream):
def _parse_till_unescaped_char(stream, chars):
def tokenize(text, indent, offset, allowed_tokens):
def parse_and_instantiate(parent_to, text, indent):
def split_at_whitespace(string):
def _words_for_line(trigger, before, num_words=None):
def wrap(func):
def plugin_cache_dir():
def read_text_file(filename):
def is_process_running(pid):
def silent_call(cmd):
def create_directory(dirname):
def replace_vars(m):
def fetch_snippets_from_dir(path):
def jaccard(firsts, seconds):
def safe_brands(brands):
def recommend_for_brands(brands):
def recommend_for_user(user):
def for_brands(brands):
def for_user(user):
def jaccard(firsts, seconds):
def safe_brands(brands):
def recommend_for_brands(brands):
def recommend_for_user(user):
def for_brands(brands):
def for_user(user):
def square_this(x):
def xorS(a, b):
def xor(a, b):
def keyExpansion(algInstance, keyString):
def AddRoundKey(algInstance, keyBlock):
def InvMixColumns(a):
def mul(a, b):
def choplist(n, seq):
def nunpack(s, default=0):
def resolve1(x):
def resolve_all(x):
def decipher_all(decipher, objid, genno, x):
def AskFolder(message=None, version=None, defaultLocation=None, location=None, windowTitle=None, actionButtonLabel=None, cancelButtonLabel=None, multiple=None):
def is_zipfile(filename):
def _EndRecData64(fpin, offset, endrec):
def _EndRecData(fpin):
def parse_preference(path):
def get_serials1(path=STORAGE1):
def get_serials2(path=STORAGE2):
def get_serials(path=STORAGE):
def xorS(a, b):
def xor(a, b):
def keyExpansion(algInstance, keyString):
def AddRoundKey(algInstance, keyBlock):
def InvMixColumns(a):
def mul(a, b):
def choplist(n, seq):
def nunpack(s, default=0):
def resolve1(x):
def resolve_all(x):
def decipher_all(decipher, objid, genno, x):
def AskFolder(message=None, version=None, defaultLocation=None, location=None, windowTitle=None, actionButtonLabel=None, cancelButtonLabel=None, multiple=None):
def is_zipfile(filename):
def _EndRecData64(fpin, offset, endrec):
def _EndRecData(fpin):
def parse_preference(path):
def get_serials1(path=STORAGE1):
def get_serials2(path=STORAGE2):
def get_serials(path=STORAGE):
def set_plugin_icon_resources(name, resources):
def get_icon(icon_name):
def get_pixmap(icon_name):
def get_local_images_dir(subfolder=None):
def create_menu_item(ia, parent_menu, menu_text, image=None, tooltip=None, shortcut=(), triggered=None, is_checked=None):
def create_menu_action_unique(ia, parent_menu, menu_text, image=None, tooltip=None, shortcut=None, triggered=None, is_checked=None, shortcut_name=None, unique_name=None):
def format_plural(number, possessive=False):
def set_plugin_icon_resources(name, resources):
def get_icon(icon_name):
def get_pixmap(icon_name):
def get_local_images_dir(subfolder=None):
def showErrorDlg(errmsg, parent, trcbk=False):
def xorS(a, b):
def xor(a, b):
def keyExpansion(algInstance, keyString):
def AddRoundKey(algInstance, keyBlock):
def InvMixColumns(a):
def mul(a, b):
def choplist(n, seq):
def nunpack(s, default=0):
def resolve1(x):
def resolve_all(x):
def decipher_all(decipher, objid, genno, x):
def AskFolder(message=None, version=None, defaultLocation=None, location=None, windowTitle=None, actionButtonLabel=None, cancelButtonLabel=None, multiple=None):
def is_zipfile(filename):
def _EndRecData64(fpin, offset, endrec):
def _EndRecData(fpin):
def parse_preference(path):
def get_serials1(path=STORAGE1):
def get_serials2(path=STORAGE2):
def get_serials(path=STORAGE):
def process_items(r, keys, timeout, limit=0, log_every=1000, wait=0.1):
def bytes_to_str(s, encoding='utf-8'):
def get_redis_from_settings(settings):
def get_redis(**kwargs):
def get_shell(url, key, host):
def php_str_noquotes(data):
def register_treebuilders_from(module):
def _alias(attr):
def diagnose(data):
def lxml_trace(data, html=True, **kwargs):
def htmlparser_trace(data):
def rword(length=5):
def rsentence(length=4):
def rdoc(num_elements=1000):
def benchmark_parsers(num_elements=100000):
def download_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir, delay=15):
def _patch_file(path, content):
def _extractall(self, path='.', members=None):
def main(argv, version=DEFAULT_VERSION):
def check(codeString, filename):
def checkPath(filename):
def install_build_utils():
def install_atlas():
def install_openblas():
def install_numpy():
def install_scipy():
def install_pandas():
def configure_cloud_init():
def main():
def install_build_utils():
def install_blas_lapack():
def install_numpy_scipy():
def install_pandas():
def configure_cloud_init():
def main():
def install_build_utils():
def install_atlas():
def install_numpy():
def install_scipy():
def configure_cloud_init():
def main():
def deploy_img(img_path, vol_size, arch, region, src_ami, dev=None, kernel_id=None, ramdisk_id=None, platform=None, remove_old=False, **cluster_kwargs):
def install_build_utils():
def install_atlas():
def install_openblas():
def install_numpy_scipy():
def install_pandas():
def main():
def get_easy_s3(config_file=None, cache=False):
def get_easy_ec2(config_file=None, cache=False):
def get_cluster_manager(config_file=None, cache=False):
def get_config(config_file=None, cache=False):
def print_timing(msg=None, debug=False):
def is_valid_device(dev):
def is_valid_partition(part):
def is_valid_bucket_name(bucket_name):
def is_valid_image_name(image_name):
def is_valid_hostname(hostname):
def make_one_liner(script):
def is_url(url):
def is_iso_time(iso):
def iso_to_datetime_tuple(iso):
def get_utc_now(iso=False):
def datetime_tuple_to_iso(tup):
def iso_to_javascript_timestamp(iso):
def permute(a):
def has_required(programs):
def check_required(programs):
def which(program):
def tailf(filename):
def version_to_float(v):
def program_version_greater(ver1, ver2):
def get_arg_spec(func, debug=True):
def chunk_list(ls, items=8):
def get_spinner(msg):
def _load_plugins(plugins, debug=True):
def get_private_rsa_fingerprint(key_location=None, key_file_obj=None, passphrase=None):
def get_public_rsa_fingerprint(key_location=None, key_file_obj=None, passphrase=None):
def test_create_keypair_fingerprint(keypair=None):
def test_import_keypair_fingerprint(keypair):
def autocomplete(parser, arg_completer=None, opt_completer=None, subcmd_completer=None, subcommands=None):
def error_override(self, msg):
def guess_first_nonoption(gparser, subcmds_map):
def _start_engines(node, user, n_engines=None, kill_existing=False):
def configure_sc_logging(use_syslog=False):
def configure_paramiko_logging():
def configure_boto_logging():
def get_log_for_pid(pid):
def get_session_log():
def pad_method_dict(method_dict):
def any_oauth_backend_enabled(realm=None):
def head_binary_search(key, words):
def get_safe_phrase(phrase):
def replace_with_safe_phrase(matchobj):
def get_safe_text(text):
def assert_server_running(server, log_file):
def list_files(targets=[], ftypes=[], use_shebang=True, modified_only=False, exclude=[], group_by_ftype=False, extless_only=False):
def nagios_from_file(results_file):
def generate_django_secretkey():
def expand_reqs(fpath):
def create_requirements_index_file(venv_path, requirements_file):
def get_venv_packages(venv_path):
def try_to_copy_venv(venv_path, new_packages):
def do_patch_activate_script(venv_path):
def redirect_to_login(next, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME):
def user_passes_test(test_func, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME):
def internal_notify_view(is_tornado_view):
def flexible_boolean(boolean):
def statsd_increment(counter, val=1):
def rate_limit_user(request, user, domain):
def rate_limit(domain='all'):
def profiled(func):
@register.filter(name='display_list', is_safe=True) DCNL def display_list(values, display_limit):
@register.filter(name='render_markdown_path', is_safe=True) DCNL def render_markdown_path(markdown_file_path, context=None):
def delete_old_scheduled_jobs(apps, schema_editor):
def fix_duplicate_attachments(apps, schema_editor):
def reverse_sync_filesizes(apps, schema_editor):
def delete_old_scheduled_jobs(apps, schema_editor):
def force_str(s, encoding=u'utf-8'):
@authenticated_json_post_view DCNL @has_request_variables DCNL def json_report_error(request, user_profile, message=REQ(), stacktrace=REQ(), ui_message=REQ(validator=check_bool), user_agent=REQ(), href=REQ(), log=REQ(), more_info=REQ(validator=check_dict([]), default=None)):
@csrf_exempt DCNL @require_post DCNL @has_request_variables DCNL def api_dev_fetch_api_key(request, username=REQ()):
def get_auth_backends_data(request):
@csrf_exempt DCNL def api_get_auth_backends(request):
def compose_views(request, user_profile, method_kwarg_pairs):
@has_request_variables DCNL def update_subscription_properties_backend(request, user_profile, subscription_data=REQ(validator=check_list(check_dict([('stream_id', check_int), ('property', check_string), ('value', check_variable_type([check_string, check_bool]))])))):
def is_public_stream(stream_name, realm):
def fill_edit_history_entries(message_history, message):
def send_registration_completion_email(email, request, realm_creation=False):
def is_buggy_ua(agent):
@authenticated_json_post_view DCNL @has_request_variables DCNL def json_tutorial_send_message(request, user_profile, type=REQ(validator=check_string), recipient=REQ(validator=check_string), topic=REQ(validator=check_string), content=REQ(validator=check_string)):
@zulip_login_required DCNL def avatar(request, email_or_id, medium=False):
def get_display_recipient_by_id(recipient_id, recipient_type, recipient_type_id):
@cache_with_key((lambda *args: display_recipient_cache_key(args[0])), timeout=((3600 * 24) * 7)) DCNL def get_display_recipient_remote_cache(recipient_id, recipient_type, recipient_type_id):
def get_unique_open_realm():
def get_active_streams(realm):
def sew_messages_and_reactions(messages, reactions):
def common_context(user):
def zulip_default_context(request):
def api_github_v1(user_profile, event, payload, branches, stream, **kwargs):
def api_github_v2(user_profile, event, payload, branches, default_stream, commit_stream, issue_stream, topic_focus=None):
@authenticated_rest_api_view(is_webhook=True) DCNL @has_request_variables DCNL def api_zendesk_webhook(request, user_profile, ticket_title=REQ(), ticket_id=REQ(), message=REQ(), stream=REQ(default='zendesk')):
def property_name(property, index):
def parse_freshdesk_event(event_string):
def format_freshdesk_note_message(ticket, event_info):
def format_freshdesk_property_change_message(ticket, event_info):
def format_freshdesk_ticket_creation_message(ticket):
def get_old_and_new_values(change_type, message):
def parse_comment(message):
def parse_create_or_delete(message):
def parse_change_event(change_type, message):
def parse_message(message):
def generate_content(data):
def format_subject(subject):
def check_variable_type(allowed_type_funcs):
def absolute_avatar_url(user_profile):
def gravatar_hash(email):
def sanitize_name(raw_value):
def make_safe_digest(string, hash_func=hashlib.sha1):
def log_statsd_event(name):
def query_chunker(queries, id_collector=None, chunk_size=1000, db_chunk_size=None):
def split_by(array, group_size, filler):
def is_remote_server(identifier):
def json_response_from_error(exception):
def timeout(timeout, func, *args, **kwargs):
def bulk_create_users(realm, users_raw, bot_type=None, tos_version=None, timezone=u''):
def check_emoji_admin(user_profile, emoji_name=None):
@contextmanager DCNL def queries_captured(include_savepoints=False):
@contextmanager DCNL def stdout_suppressed():
@csrf_exempt DCNL def rest_dispatch(request, **kwargs):
def build_narrow_filter(narrow):
def max_api_calls(entity):
def max_api_window(entity):
def add_ratelimit_rule(range_seconds, num_requests):
def block_access(entity, seconds):
def clear_history(entity):
def api_calls_left(entity):
def is_ratelimited(entity):
def incr_ratelimit(entity):
def url_filename(url):
def fixup_link(link, target_blank=True):
def sanitize_url(url):
def prepare_realm_pattern(source):
def log_bugdown_error(msg):
def do_convert(content, message=None, message_realm=None, possible_words=None, sent_by_bot=False):
def xor_hex_strings(bytes_a, bytes_b):
def ascii_to_hex(input_string):
def hex_to_ascii(input_string):
def initial_password(email):
def force_text(s, encoding='utf-8'):
def force_bytes(s, encoding='utf-8'):
def force_str(s, encoding='utf-8'):
def dict_with_str_keys(dct, encoding='utf-8'):
def _check_hash(target_hash_file, status_dir):
def slow(slowness_reason):
def _replacement_destroy_test_db(self, test_database_name, verbosity):
def destroy_test_databases(database_id=None):
def init_worker(counter):
def access_stream_common(user_profile, stream, error):
def list_to_streams(streams_raw, user_profile, autocreate=False):
def is_mm_32_format(msg_string):
@contextmanager DCNL def flock(lockfile, shared=False):
@contextmanager DCNL def lockfile(filename, shared=False):
def access_message(user_profile, message_id):
def render_markdown(message, content, realm=None, realm_alert_words=None, message_users=None):
def one_click_unsubscribe_link(user_profile, email_type):
def build_message_list(user_profile, messages):
@statsd_increment('missed_message_reminders') DCNL def do_send_missedmessage_events_reply_in_zulip(user_profile, missed_messages, message_count):
def make_raw(query, exclude=None):
def export_usermessages_batch(input_path, output_path):
def convert_to_id_fields(data, table, field_name):
def re_map_foreign_keys(data, table, field_name, related_table, verbose=False):
def render_tex(tex, is_inline=True):
def interactive_debug(sig, frame):
def get_alert_from_message(message):
def add_new_user_history(user_profile, streams):
def do_set_realm_property(realm, name, value):
def do_deactivate_realm(realm):
def create_streams_if_needed(realm, stream_dicts):
def send_pm_if_empty_stream(sender, stream, stream_name, realm):
def _internal_prep_message(realm, sender, recipient_type_name, parsed_recipients, subject, content):
def internal_prep_message(realm, sender_email, recipient_type_name, recipients, subject, content):
def internal_prep_stream_message(realm, sender, stream_name, topic, content):
def internal_prep_private_message(realm, sender, recipient_email, content):
def validate_user_access_to_subscribers(user_profile, stream):
def validate_user_access_to_subscribers_helper(user_profile, stream_dict, check_user_subscribed):
def get_subscribers_query(stream, requesting_user):
def maybe_get_subscriber_emails(stream, user_profile):
def get_peer_user_ids_for_stream_change(stream, altered_users, subscribed_users):
def do_change_notification_settings(user_profile, name, value, log=True):
def update_to_dict_cache(changed_messages):
def do_send_confirmation_email(invitee, referrer, body):
def get_occupied_streams(realm):
def do_remove_realm_custom_profile_field(realm, field):
def get_cache_with_key(keyfunc, cache_name=None):
def cache_with_key(keyfunc, cache_name=None, timeout=None, with_statsd_key=None):
def cache(func):
def check_change_full_name(user_profile, full_name_raw, acting_user):
def email_is_not_mit_mailing_list(email):
def send_event(event, users):
def fake_message_sender(event):
def get_active_worker_queues(queue_type=None):
def generate_time_series_data(days=100, business_hours_base=10, non_business_hours_base=10, growth=1, autocorrelation=0, spikiness=1, holiday_rate=0, frequency=CountStat.DAY, partial_sum=False, random_seed=26):
def dictfetchall(cursor):
def is_valid_country_abbrev(abbrev, case_sensitive=False):
def get_name_from_abbrev(abbrev, case_sensitive=False):
def prepare_input_source(source):
def _validate(aString, firstOccurrenceOnly, loggedEvents, base, encoding, selfURIs=None):
def validateURL(url, firstOccurrenceOnly=1, wantRawData=0):
def isStandard(x):
def isCommon(x):
def _detect(doc_start, loggedEvents=[], fallback='UTF-8'):
def removeDeclaration(x):
def asUTF8(x):
def decode_pair(s, pos=0):
def encode_pair(name, value):
def getDescription(xmlfile):
def buildTestCase(xmlfile, xmlBase, description, method, exc, params):
def canonicalForm(u):
def _get_attr_value(instance, attr, default=None):
def audit_customer_subscription(customer, unknown=True):
@csrf_exempt DCNL def webhooks(request):
@csrf_exempt DCNL def webhooks_v2(request):
def open_in_browser(html):
def fix_charset(encoding):
def raise_with_traceback(exc_type, traceback, *args, **kwargs):
def raise_with_traceback(exc_type, traceback, *args, **kwargs):
def titlecase(text):
def amp(text):
def caps(text):
def initial_quotes(text):
def smartypants(text):
def titlecase(text):
def typogrify(text):
def widont(text):
def educateQuotes(str):
def educateBackticks(str):
def educateSingleBackticks(str):
def educateDashes(str):
def educateDashesOldSchool(str):
def educateDashesOldSchoolInverted(str):
def educateEllipses(str):
def stupefyEntities(str):
def processEscapes(str):
def _tokenize(str):
def chi2P(chi, df):
def fromURL(url, log=None):
def fromString(string, log=None):
def attribute_checker(operator, attribute, value=''):
def select(soup, selector):
def monkeypatch(BeautifulSoupClass=None):
def paypal_time(time_obj=None):
def paypaltime2datetime(s):
def verify_credit_card(number):
@require_POST DCNL @csrf_exempt DCNL def ipn(request, item_check_callable=None):
def duplicate_txn_id(ipn_obj):
def make_secret(form_instance, secret_fields=None):
def check_secret(form_instance, secret):
@require_GET DCNL def pdt(request, item_check_callable=None, template='pdt/pdt.html', context=None):
def process_pdt(request, item_check_callable=None):
def positional(max_positional_args):
def _extract_id_token(id_token):
def _parse_exchange_token_response(content):
@util.positional(4) DCNL def credentials_from_code(client_id, client_secret, scope, code, redirect_uri='postmessage', http=None, user_agent=None, token_uri='https://accounts.google.com/o/oauth2/token'):
@util.positional(3) DCNL def credentials_from_clientsecrets_and_code(filename, scope, code, message=None, redirect_uri='postmessage', http=None, cache=None):
@util.positional(2) DCNL def flow_from_clientsecrets(filename, scope, redirect_uri=None, message=None, cache=None):
def loadfile(filename, cache=None):
@util.positional(2) DCNL def oauth2decorator_from_clientsecrets(filename, scope, message=None, cache=None):
@util.positional(4) DCNL def get_credential_storage(filename, client_id, user_agent, scope, warn_on_readonly=True):
@util.positional(2) DCNL def run(flow, storage, http=None):
def make_signed_jwt(signer, payload):
def verify_signed_jwt_with_certs(jwt, certs, audience):
def get_boto_ses_connection():
def localtime_for_timezone(value, timezone):
def adjust_datetime_to_timezone(value, from_tz, to_tz=None):
def scan(stream, Loader=Loader):
def parse(stream, Loader=Loader):
def compose(stream, Loader=Loader):
def compose_all(stream, Loader=Loader):
def load(stream, Loader=Loader):
def load_all(stream, Loader=Loader):
def safe_load(stream):
def safe_load_all(stream):
def emit(events, stream=None, Dumper=Dumper, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None):
def serialize_all(nodes, stream=None, Dumper=Dumper, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None, encoding='utf-8', explicit_start=None, explicit_end=None, version=None, tags=None):
def serialize(node, stream=None, Dumper=Dumper, **kwds):
def dump_all(documents, stream=None, Dumper=Dumper, default_style=None, default_flow_style=None, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None, encoding='utf-8', explicit_start=None, explicit_end=None, version=None, tags=None):
def dump(data, stream=None, Dumper=Dumper, **kwds):
def safe_dump_all(documents, stream=None, **kwds):
def safe_dump(data, stream=None, **kwds):
def add_implicit_resolver(tag, regexp, first=None, Loader=Loader, Dumper=Dumper):
def add_path_resolver(tag, path, kind=None, Loader=Loader, Dumper=Dumper):
def add_constructor(tag, constructor, Loader=Loader):
def add_multi_constructor(tag_prefix, multi_constructor, Loader=Loader):
def add_representer(data_type, representer, Dumper=Dumper):
def add_multi_representer(data_type, multi_representer, Dumper=Dumper):
def containsStr(val, query):
def generateSessionKey(*args):
def readTmpFile(processPid):
def writeTmpFile(processPid, content):
def initLogger():
def get_user_from_cookie(cookies, app_id, app_secret):
def parse_signed_request(signed_request, app_secret):
def get_access_token_from_code(code, redirect_uri, app_id, app_secret):
def get_app_access_token(app_id, app_secret):
def daemonize():
def queryset_iterator(queryset, chunksize=100):
def lgammln(xx):
def log_sample(dist):
def round_time(dt=None, round_to=60):
def respond(request, template_name, context_dict, **kwargs):
def daemonize():
def _mongodb_decode_wire_protocol(message):
def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):
@register.filter DCNL def get_range(value):
@register.filter DCNL def commify(n):
@register.simple_tag DCNL def include_javascripts(asset_package):
@register.simple_tag DCNL def include_stylesheets(asset_package):
def _open_resource(url_file_stream_or_string, etag, modified, agent, referrer, handlers, request_headers):
def _convert_to_idn(url):
def registerDateHandler(func):
def _parse_date_iso8601(dateString):
def _parse_date_onblog(dateString):
def _parse_date_nate(dateString):
def _parse_date_greek(dateString):
def _parse_date_hungarian(dateString):
def _parse_date_rfc822(date):
def _parse_date_asctime(dt):
def _parse_date_perforce(aDateString):
def _parse_date(dateString):
def convert_to_utf8(http_headers, data):
def replace_doctype(data):
def parse(url_file_stream_or_string, etag=None, modified=None, agent=None, referrer=None, handlers=None, request_headers=None, response_headers=None):
def json_encode(data, *args, **kwargs):
def _format_date(dt):
def normalize(url):
def xhtml_escape(value):
def xhtml_unescape(value):
def json_encode(value):
def json_decode(value):
def squeeze(value):
def url_escape(value):
def utf8(value):
def to_unicode(value):
def to_basestring(value):
def recursive_unicode(obj):
def linkify(text, shorten=False, extra_params='', require_protocol=False, permitted_protocols=['http', 'https']):
def generate_secret_token(phrase, size=12):
def render_to(template):
def timelimit(timeout):
def utf8encode(tstr):
def levenshtein_distance(first, second):
def _do_timesince(d, chunks, now=None):
def uncompress_string(s):
def test_traverse_with_verbose():
def test_traverse():
def test_deps_mimeparse_correct_package():
def test_print_src(router):
def _on_process_docstring(app, what, name, obj, options, lines):
def _on_process_docstring(app, what, name, obj, options, lines):
def simulate_request(app, method='GET', path='/', query_string=None, headers=None, body=None, file_wrapper=None, wsgierrors=None, params=None, params_csv=True, protocol='http'):
def simulate_get(app, path, **kwargs):
def simulate_head(app, path, **kwargs):
def simulate_post(app, path, **kwargs):
def simulate_put(app, path, **kwargs):
def simulate_options(app, path, **kwargs):
def simulate_patch(app, path, **kwargs):
def simulate_delete(app, path, **kwargs):
def get_encoding_from_headers(headers):
def rand_string(min, max):
def create_environ(path='/', query_string='', protocol='HTTP/1.1', scheme='http', host=DEFAULT_HOST, port=None, headers=None, app='', body='', method='GET', wsgierrors=None, file_wrapper=None):
@contextlib.contextmanager DCNL def redirected(stdout=sys.stdout, stderr=sys.stderr):
def capture_responder_args(req, resp, resource, params):
def set_resp_defaults(req, resp, resource, params):
def header_property(name, doc, transform=None):
def format_range(value):
def is_ascii_encodable(s):
def make_router_search(router):
def prepare_middleware(middleware=None, independent_middleware=False):
def default_serialize_error(req, resp, exception):
def wrap_old_error_serializer(old_fn):
def path_not_found(req, resp, **kwargs):
def bad_request(req, resp, **kwargs):
def method_not_allowed(allowed_methods, req, resp, **kwargs):
def create_method_not_allowed(allowed_methods):
def create_default_options(allowed_methods):
def before(action):
def after(action):
def _wrap_with_after(action, responder):
def _wrap_with_before(action, responder):
def header_property(wsgi_name):
def compile_uri_template(template):
def create_http_method_map(resource):
def init_model():
def print_routes(api, verbose=False):
def traverse(roots, parent='', verbose=False):
def main():
def validate(schema):
def deprecated(instructions):
def http_now():
def dt_to_http(dt):
def http_date_to_dt(http_date, obs_date=False):
def to_query_str(params, comma_delimited_lists=True, prefix=True):
def get_bound_method(obj, method_name):
def _get_func_if_nested(callable):
def _get_argspec(func):
def get_argnames(func):
def get_http_status(status_code, default_reason='Unknown'):
def parse_query_string(query_string, keep_blank_qs_values=False, parse_qs_csv=True):
def parse_host(host, default_port=None):
def unquote_string(quoted):
def register_default_engine(loader_backend, engine, arch='any'):
def get_default_engine(loader_backend, arch='any'):
def define_struct(defn):
def register_types(mapping):
def do_preprocess(defn):
def parse_defns(defn, preprocess=True):
def parse_types(defn, preprocess=True):
def parse_file(defn, preprocess=True):
def parse_type(defn, preprocess=True):
def _euclidean_dist(vector_a, vector_b):
def _get_closest_matches(input_attributes, target_attributes):
def _levenshtein_distance(s1, s2):
def _normalized_levenshtein_distance(s1, s2, acceptable_differences):
def _is_better_match(x, y, matched_a, matched_b, attributes_dict_a, attributes_dict_b):
def differing_constants(block_a, block_b):
def io_file_data_for_arch(arch):
def convert_prot(prot):
def deconvert_prot(prot):
def size_bits(t):
def size_bytes(t):
def pc_calculate_condition_simple(state, cond, cc_op, cc_dep1, cc_dep2, cc_ndep, platform=None):
def cfg_fast_functions_check(arch, binary_path, func_addrs, func_features):
def cfg_fast_edges_check(arch, binary_path, edges):
def compare_cfg(standard, g, function_list):
def test_ctype_b_loc():
def test_ctype_tolower_loc():
def test_ctype_toupper_loc():
def get_api(access_token, access_token_secret, consumer_key, consumer_secret):
def fetch_profiles(api, screen_names=[], ids=[]):
def errno_from_exception(e):
def encode_name(name, type, scope=None):
def generateNegotiateMessage():
def generateAuthenticateMessage(challenge_flags, nt_response, lm_response, session_key, user, domain='WORKGROUP', workstation='LOCALHOST'):
def decodeChallengeMessage(ntlm_data):
def expandDesKey(key):
def DESL(K, D):
def generateChallengeResponseV1(password, server_challenge, has_extended_security=False, client_challenge=None):
def test_tokenize_file(filename, expected):
def _domain_variants(domain):
def _combined_regex(regexes, flags=re.IGNORECASE, use_re2=False, max_mem=None):
def make_string(seq):
def make_string_uc(seq):
def s2n_motorola(string):
def s2n_intel(string):
def process_file(f, stop_tag=DEFAULT_STOP_TAG, details=True, strict=False, debug=False):
def nikon_ev_bias(seq):
def olympus_special_mode(v):
def setup_logger(debug, color):
def inet_ntoa(address):
def inet_aton(text):
def inet_pton(family, text):
def inet_ntop(family, address):
def af_for_address(text):
def is_multicast(text):
def from_text(text):
def from_flags(flags, ednsflags):
def to_flags(value):
def to_text(value):
def _hexify(data, chunksize=None):
def _base64ify(data, chunksize=None):
def _escapify(qstring):
def _truncate_bitmap(what):
def from_text(rdclass, rdtype, tok, origin=None, relativize=True):
def from_wire(rdclass, rdtype, wire, current, rdlen, origin=None):
def sign(wire, keyname, secret, time, fudge, original_id, error, other_data, request_mac, ctx=None, multi=False, first=True, algorithm=default_algorithm):
def validate(wire, keyname, secret, now, request_mac, tsig_start, tsig_rdata, tsig_rdlen, ctx=None, multi=False, first=True):
def get_algorithm(algorithm):
def get_default_resolver():
def query(qname, rdtype=dns.rdatatype.A, rdclass=dns.rdataclass.IN, tcp=False, source=None, raise_on_no_answer=True, source_port=0):
def zone_for_name(name, rdclass=dns.rdataclass.IN, tcp=False, resolver=None):
def override_system_resolver(resolver=None):
def restore_system_resolver():
def from_text(text):
def _poll_for(fd, readable, writable, error, timeout):
def _select_for(fd, readable, writable, error, timeout):
def _set_polling_backend(fn):
def udp(q, where, timeout=None, port=53, af=None, source=None, source_port=0, ignore_unexpected=False, one_rr_per_rrset=False):
def _net_read(sock, count, expiration):
def _net_write(sock, data, expiration):
def tcp(q, where, timeout=None, port=53, af=None, source=None, source_port=0, one_rr_per_rrset=False):
def xfr(where, zone, rdtype=dns.rdatatype.AXFR, rdclass=dns.rdataclass.IN, timeout=None, port=53, keyring=None, keyname=None, relativize=True, af=None, lifetime=None, source=None, source_port=0, serial=0, use_udp=False, keyalgorithm=dns.tsig.default_algorithm):
def from_text(text):
def to_text(flags):
def edns_from_text(text):
def edns_to_text(flags):
def from_e164(text, origin=public_enum_domain):
def to_e164(name, origin=public_enum_domain, want_plus_prefix=True):
def query(number, domains, resolver=None):
def from_text(text):
def to_text(value):
def is_metatype(rdtype):
def is_singleton(rdtype):
def from_address(text):
def to_address(name):
def inet_ntoa(address):
def inet_aton(text):
def option_from_wire(otype, wire, current, olen):
def from_text(text):
def to_text(value):
def is_metaclass(rdclass):
def _escapify(label):
def _validate_labels(labels):
def from_unicode(text, origin=root):
def from_text(text, origin=root):
def from_wire(message, current):
def from_wire(wire, keyring=None, request_mac='', xfr=False, origin=None, tsig_ctx=None, multi=False, first=True, question_only=False, one_rr_per_rrset=False, ignore_trailing=False):
def from_text(text):
def from_file(f):
def make_query(qname, rdtype, rdclass=dns.rdataclass.IN, use_edns=None, want_dnssec=False, ednsflags=0, payload=1280, request_payload=None, options=None):
def make_response(query, recursion_available=False, our_payload=8192):
def from_text(text, origin=None, rdclass=dns.rdataclass.IN, relativize=True, zone_factory=Zone, filename=None, allow_include=False, check_origin=True):
def from_file(f, origin=None, rdclass=dns.rdataclass.IN, relativize=True, zone_factory=Zone, filename=None, allow_include=True, check_origin=True):
def from_xfr(xfr, zone_factory=Zone, relativize=True, check_origin=True):
def from_text(text):
def from_text(text):
def from_flags(flags):
def to_flags(value):
def to_text(value):
def is_update(flags):
def from_text(textring):
def to_text(keyring):
def algorithm_from_text(text):
def algorithm_to_text(value):
def _validate_rrsig(rrset, rrsig, keys, origin=None, now=None):
def _validate(rrset, rrsigset, keys, origin=None, now=None):
def from_text_list(name, ttl, rdclass, rdtype, text_rdatas):
def from_text(name, ttl, rdclass, rdtype, *text_rdatas):
def from_rdata_list(name, ttl, rdatas):
def from_rdata(name, ttl, *rdatas):
def from_text_list(rdclass, rdtype, ttl, text_rdatas):
def from_text(rdclass, rdtype, ttl, *text_rdatas):
def from_rdata_list(ttl, rdatas):
def from_rdata(ttl, *rdatas):
def setdefaultproxy(proxytype=None, addr=None, port=None, rdns=True, username=None, password=None):
def wrapmodule(module):
def xmlFile(path, mode='r'):
def toUnicode(objekt):
def openXmlDocument(path=None, file_=None, data=None, url=None, mime_type=None):
def is_letter(uni_char):
def digit(uni_char, default_value=None):
def fullmatch(pattern, string, flags=0):
def rpr(s):
def force_unicode(s):
def mutating_method(func):
def _find_lang(langdict, lang, script, region):
def _prefix_description_for_number(data, longest_prefix, numobj, lang, script=None, region=None):
def PBToPy(numpb):
def PyToPB(numobj):
def name_for_valid_number(numobj, lang, script=None, region=None):
def name_for_number(numobj, lang, script=None, region=None):
def safe_display_name(numobj, lang, script=None, region=None):
def _is_mobile(ntype):
def country_name_for_number(numobj, lang, script=None, region=None):
def description_for_valid_number(numobj, lang, script=None, region=None):
def description_for_number(numobj, lang, script=None, region=None):
def _create_extn_pattern(single_extn_symbols):
def _copy_number_format(other):
def _extract_possible_number(number):
def _is_viable_phone_number(number):
def _normalize(number):
def normalize_digits_only(number, keep_non_digits=False):
def _normalize_diallable_chars_only(number):
def convert_alpha_characters_in_number(number):
def length_of_geographical_area_code(numobj):
def length_of_national_destination_code(numobj):
def country_mobile_token(country_code):
def _normalize_helper(number, replacements, remove_non_matches):
def _formatting_rule_has_first_group_only(national_prefix_formatting_rule):
def _is_number_geographical(numobj):
def _is_valid_region_code(region_code):
def format_number(numobj, num_format):
def format_by_pattern(numobj, number_format, user_defined_formats):
def format_national_number_with_carrier_code(numobj, carrier_code):
def format_national_number_with_preferred_carrier_code(numobj, fallback_carrier_code):
def format_number_for_mobile_dialing(numobj, region_calling_from, with_formatting):
def format_out_of_country_calling_number(numobj, region_calling_from):
def format_in_original_format(numobj, region_calling_from):
def _raw_input_contains_national_prefix(raw_input, national_prefix, region_code):
def _has_unexpected_italian_leading_zero(numobj):
def format_out_of_country_keeping_alpha_chars(numobj, region_calling_from):
def national_significant_number(numobj):
def _prefix_number_with_country_calling_code(country_code, num_format, formatted_number):
def _format_nsn(number, metadata, num_format, carrier_code=None):
def example_number(region_code):
def invalid_example_number(region_code):
def example_number_for_type(region_code, num_type):
def _example_number_anywhere_for_type(num_type):
def example_number_for_non_geo_entity(country_calling_code):
def _maybe_append_formatted_extension(numobj, metadata, num_format, number):
def _number_desc_for_type(metadata, num_type):
def number_type(numobj):
def _number_type_helper(national_number, metadata):
def _is_number_matching_desc(national_number, number_desc):
def is_valid_number(numobj):
def is_valid_number_for_region(numobj, region_code):
def region_code_for_number(numobj):
def _region_code_for_number_from_list(numobj, regions):
def region_code_for_country_code(country_code):
def region_codes_for_country_code(country_code):
def country_code_for_region(region_code):
def country_code_for_valid_region(region_code):
def ndd_prefix_for_region(region_code, strip_non_digits):
def is_nanpa_country(region_code):
def _is_leading_zero_possible(country_code):
def is_alpha_number(number):
def is_possible_number(numobj):
def _test_number_length_against_pattern(possible_re, national_number):
def _is_shorter_than_possible_normal_number(metadata, number):
def is_possible_number_with_reason(numobj):
def is_possible_number_string(number, region_dialing_from):
def truncate_too_long_number(numobj):
def _extract_country_code(number):
def _maybe_extract_country_code(number, metadata, keep_raw_input, numobj):
def _parse_prefix_as_idd(idd_pattern, number):
def _maybe_strip_i18n_prefix_and_normalize(number, possible_idd_prefix):
def _maybe_strip_national_prefix_carrier_code(number, metadata):
def _maybe_strip_extension(number):
def _check_region_for_parsing(number, default_region):
def _set_italian_leading_zeros_for_phone_number(national_number, numobj):
def parse(number, region=None, keep_raw_input=False, numobj=None, _check_region=True):
def _build_national_number_for_parsing(number):
def _is_number_match_OO(numobj1_in, numobj2_in):
def _is_national_number_suffix_of_other(numobj1, numobj2):
def _is_number_match_SS(number1, number2):
def _is_number_match_OS(numobj1, number2):
def is_number_match(num1, num2):
def _can_be_internationally_dialled(numobj):
def is_mobile_number_portable_region(region_code):
def _limit(lower, upper):
def _verify(leniency, numobj, candidate):
def _all_number_groups_remain_grouped(numobj, normalized_candidate, formatted_number_groups):
def _all_number_groups_are_exactly_present(numobj, normalized_candidate, formatted_number_groups):
def _get_national_number_groups(numobj, formatting_pattern=None):
def is_possible_short_number_for_region(short_number, region_dialing_from):
def is_possible_short_number(numobj):
def is_valid_short_number_for_region(short_number, region_dialing_from):
def is_valid_short_number(numobj):
def expected_cost_for_region(short_number, region_dialing_from):
def expected_cost(numobj):
def _region_code_for_short_number_from_region_list(numobj, region_codes):
def _example_short_number(region_code):
def _example_short_number_for_cost(region_code, cost):
def connects_to_emergency_number(number, region_code):
def is_emergency_number(number, region_code):
def is_carrier_specific(numobj):
def time_zones_for_geographical_number(numobj):
def time_zones_for_number(numobj):
def _country_level_time_zones_for_number(numobj):
def _get_metadata_for_region(region_code):
def isString(s):
def isInt(n):
def isBytes(b):
def readUntilWhitespace(stream, maxchars=None):
def readNonWhitespace(stream):
def skipOverWhitespace(stream):
def readUntilRegex(stream, regex, ignore_eof=False):
def markLocation(stream):
def parse_filename_page_ranges(args):
def _parse_file(descriptor_file, is_bridge=False, validate=False, **kwargs):
def _parse_timestamp_and_interval(keyword, content):
def parse_file(descriptor_file, descriptor_type=None, validate=False, document_handler=DocumentHandler.ENTRIES, **kwargs):
def _read_until_keywords(keywords, descriptor_file, inclusive=False, ignore_first=False, skip=False, end_position=None, include_ending_keyword=False):
def _bytes_for_block(content):
def _get_pseudo_pgp_block(remaining_contents):
def _get_descriptor_components(raw_contents, validate, extra_keywords=()):
def get_authorities():
def _parse_file(descriptor_file, validate=False, **kwargs):
def _parse_file(descriptor_file, validate=False, **kwargs):
def export_csv(descriptors, included_fields=(), excluded_fields=(), header=True):
def export_csv_file(output_file, descriptors, included_fields=(), excluded_fields=(), header=True):
def _parse_file(document_file, document_type=None, validate=False, is_microdescriptor=False, document_handler=DocumentHandler.ENTRIES, **kwargs):
def _parse_file_key_certs(certificate_file, validate=False):
def _check_for_missing_and_disallowed_fields(document, entries, fields):
def _check_for_misordered_fields(entries, expected):
def _parse_file(descriptor_file, is_bridge=False, validate=False, **kwargs):
def _parse_file(document_file, validate, entry_class, entry_keyword='r', start_position=None, end_position=None, section_end_keywords=(), extra_args=()):
def _base64_to_hex(identity, check_if_fingerprint=True):
def load_processed_files(path):
def save_processed_files(path, processed_files):
def _parse_file(tordnsel_file, validate=False, **kwargs):
def with_default(yields=False):
def _parse_circ_path(path):
def _parse_circ_entry(entry):
@with_default() DCNL def _case_insensitive_lookup(entries, key, default=UNDEFINED):
def get_config_policy(rules, ip_address=None):
def _flag_private_rules(rules):
def _flag_default_rules(rules):
def _parse_cell_type_mapping(mapping):
def convert(response_type, message, **kwargs):
def _parse_entry(line, quoted, escaped):
def _get_quote_indices(line, escaped):
def launch_tor(tor_cmd='tor', args=None, torrc_path=None, completion_percent=100, init_msg_handler=None, timeout=DEFAULT_INIT_TIMEOUT, take_ownership=False, stdin=None):
def launch_tor_with_config(config, tor_cmd='tor', completion_percent=100, init_msg_handler=None, timeout=DEFAULT_INIT_TIMEOUT, take_ownership=False):
def get_system_tor_version(tor_cmd='tor'):
def connect(control_port=('127.0.0.1', 9051), control_socket='/var/run/tor/control', password=None, password_prompt=False, chroot_path=None, controller=stem.control.Controller):
def connect_port(address='127.0.0.1', port=9051, password=None, chroot_path=None, controller=stem.control.Controller):
def connect_socket_file(path='/var/run/tor/control', password=None, chroot_path=None, controller=stem.control.Controller):
def _connect_auth(control_socket, password, password_prompt, chroot_path, controller):
def authenticate(controller, password=None, chroot_path=None, protocolinfo_response=None):
def authenticate_none(controller, suppress_ctl_errors=True):
def authenticate_password(controller, password, suppress_ctl_errors=True):
def authenticate_cookie(controller, cookie_path, suppress_ctl_errors=True):
def authenticate_safecookie(controller, cookie_path, suppress_ctl_errors=True):
def get_protocolinfo(controller):
def _msg(controller, message):
def _read_cookie(cookie_path, is_safecookie):
def _expand_cookie_path(protocolinfo_response, pid_resolver, pid_resolution_arg):
def parse(argv):
def get_help():
def response(controller, arg):
@uses_settings DCNL def _get_commands(controller, config):
def _get_fingerprint(arg, controller):
def check_requirements():
def is_python_27():
def is_python_3():
@lru_cache() DCNL def is_crypto_available():
@lru_cache() DCNL def is_mock_available():
def send_message(control_file, message, raw=False):
def recv_message(control_file):
def send_formatting(message):
def get_logger():
def logging_level(runlevel):
def escape(message):
def log(runlevel, message):
def log_once(message_id, runlevel, message):
def log_to_stdout(runlevel):
def _to_bytes(msg):
def _to_unicode(msg):
def _to_camel_case(label, divider='_', joiner=' DCSP '):
def crop(msg, size, min_word_length=4, min_crop=0, ending=Ending.ELLIPSE, get_remainder=False):
def size_label(byte_count, decimal=0, is_long=False, is_bytes=True):
def time_label(seconds, decimal=0, is_long=False):
def time_labels(seconds, is_long=False):
def short_time_label(seconds):
def parse_short_time_label(label):
def _parse_timestamp(entry):
def _parse_iso_timestamp(entry):
def _get_label(units, count, decimal, is_long):
@lru_cache() DCNL def is_available():
@lru_cache() DCNL def system_start_time():
@lru_cache() DCNL def physical_memory():
def cwd(pid):
def uid(pid):
def memory_usage(pid):
def stats(pid, *stat_types):
def file_descriptors_used(pid):
def connections(pid):
def _decode_proc_address_encoding(addr):
def _get_lines(file_path, line_prefixes, parameter):
def _log_runtime(parameter, proc_location, start_time):
def _log_failure(parameter, exc):
def is_valid_fingerprint(entry, check_prefix=False):
def is_valid_nickname(entry):
def is_valid_circuit_id(entry):
def is_valid_stream_id(entry):
def is_valid_connection_id(entry):
def is_valid_hidden_service_address(entry):
def is_hex_digits(entry, count):
def clean_orphaned_pyc(paths):
def is_pyflakes_available():
def is_pep8_available():
def stylistic_issues(paths, check_two_space_indents=False, check_newlines=False, check_trailing_whitespace=False, check_exception_keyword=False, prefer_single_quotes=False):
def pyflakes_issues(paths):
def is_windows():
def is_mac():
def is_gentoo():
def is_bsd():
def is_available(command, cached=True):
def is_running(command):
def name_by_pid(pid):
def pid_by_name(process_name, multiple=False):
def pid_by_port(port):
def pid_by_open_file(path):
def cwd(pid):
def user(pid):
def start_time(pid):
def tail(target, lines=None):
def bsd_jail_id(pid):
def bsd_jail_path(jid):
def is_tarfile(path):
def expand_path(path, cwd=None):
def files_with_suffix(base_path, suffix):
def call(command, default=UNDEFINED, ignore_exit_status=False):
def get_process_name():
def set_process_name(process_name):
def _set_argv(process_name):
def _set_prctl_name(process_name):
def _set_proc_title(process_name):
def config_dict(handle, conf_mappings, handler=None):
def get_config(handle):
def uses_settings(handle, path, lazy_load=True):
def parse_enum(key, value, enumeration):
def parse_enum_csv(key, value, enumeration, count=None):
def format(msg, *attr):
def get_connections(resolver, process_pid=None, process_name=None):
def system_resolvers(system=None):
def port_usage(port):
def is_valid_ipv4_address(address):
def is_valid_ipv6_address(address, allow_brackets=False):
def is_valid_port(entry, allow_zero=False):
def is_private_address(address):
def expand_ipv6_address(address):
def get_mask_ipv4(bits):
def get_mask_ipv6(bits):
def _get_masked_bits(mask):
def _get_binary(value, bits):
def _get_address_binary(address):
def _hmac_sha256(key, msg):
def _cryptovariables_equal(x, y):
def UppercaseEnum(*args):
def _make_key(args, kwds, typed, kwd_mark=(object(),), fasttypes=set([int, str, frozenset, type(None)]), sorted=sorted, tuple=tuple, type=type, len=len):
def lru_cache(maxsize=100, typed=False):
def force_unicode(string):
def xl_rowcol_to_cell(row, col, row_abs=False, col_abs=False):
def xl_rowcol_to_cell_fast(row, col):
def xl_col_to_name(col_num, col_abs=False):
def xl_cell_to_rowcol(cell_str):
def xl_cell_to_rowcol_abs(cell_str):
def xl_range(first_row, first_col, last_row, last_col):
def xl_range_abs(first_row, first_col, last_row, last_col):
def xl_range_formula(sheetname, first_row, first_col, last_row, last_col):
def quote_sheetname(sheetname):
def convert_cell_args(method):
def convert_range_args(method):
def convert_column_args(method):
def print_elapsed_time(module_name, elapsed):
def time_xlsxwriter():
def time_xlsxwriter_optimised():
def time_openpyxl():
def time_openpyxl_optimised():
def time_pyexcelerate():
def time_xlwt():
def read_file(filename):
def every(interval=1):
def run_pending():
def run_all(delay_seconds=0):
def clear(tag=None):
def cancel_job(job):
def next_run():
def idle_seconds():
def treeify(seq):
def print_proto(d, parent=(), indent=0):
def some_action(post):
@app.route('/logout') DCNL def logout():
@app.before_request DCNL def get_current_user():
def get_user_from_cookie(cookies, app_id, app_secret):
def parse_signed_request(signed_request, app_secret):
def module_path(local_function):
def remove_invalid_char(text):
def clone_bs4_elem(el):
def process_image(imagename, resultname, params='--edge-thresh DCSP 10 DCSP --peak-thresh DCSP 5'):
def read_features_from_file(filename):
def write_features_to_file(filename, locs, desc):
def plot_features(im, locs, circle=False):
def match(desc1, desc2):
def appendimages(im1, im2):
def plot_matches(im1, im2, locs1, locs2, matchscores, show_below=True):
def match_twosided(desc1, desc2):
def cluster(S, k, ndim):
def ncut_graph_matrix(im, sigma_d=100.0, sigma_g=0.01):
def build_bayes_graph(im, labels, sigma=100.0, kappa=1):
def cut_graph(gr, imsize):
def show_labeling(im, labels):
def process_image_dsift(imagename, resultname, size=20, steps=10, force_orientation=False, resize=None):
def read_points_from_xml(xmlFileName):
def compute_rigid_transform(refpoints, points):
def rigid_alignment(faces, path, plotflag=False):
def hcluster(features, distfcn=L2dist):
def draw_dendrogram(node, imlist, filename='clusters.jpg'):
def compute_ukbench_score(src, imlist):
def plot_results(src, res):
def denoise(im, U_init, tolerance=0.1, tau=0.125, tv_weight=100):
def gauss(m, v, x):
def compute_harris_response(im, sigma=3):
def get_harris_points(harrisim, min_dist=10, threshold=0.1):
def plot_harris_points(image, filtered_coords):
def get_descriptors(image, filtered_coords, wid=5):
def match(desc1, desc2, threshold=0.5):
def match_twosided(desc1, desc2, threshold=0.5):
def appendimages(im1, im2):
def plot_matches(im1, im2, locs1, locs2, matchscores, show_below=True):
def ransac(data, model, n, k, t, d, debug=False, return_all=False):
def random_partition(n, n_data):
def image_in_image(im1, im2, tp):
def combine_images(im1, im2, alpha):
def alpha_for_triangle(points, m, n):
def triangulate_points(x, y):
def plot_mesh(x, y, tri):
def pw_affine(fromim, toim, fp, tp, tri):
def panorama(H, fromim, toim, padding=2400, delta=2400):
def get_imlist(path):
def compute_average(imlist):
def convert_to_grayscale(imlist):
def imresize(im, sz):
def histeq(im, nbr_bins=256):
def plot_2D_boundary(plot_range, points, decisionfcn, labels, values=[0]):
def pca(X):
def center(X):
def H_from_ransac(fp, tp, model, maxiter=1000, match_theshold=10):
def H_from_points(fp, tp):
def Haffine_from_points(fp, tp):
def normalize(points):
def make_homog(points):
def compute_P(x, X):
def triangulate_point(x1, x2, P1, P2):
def triangulate(x1, x2, P1, P2):
def compute_fundamental(x1, x2):
def compute_epipole(F):
def plot_epipolar_line(im, F, x, epipole=None, show_epipole=True):
def skew(a):
def compute_P_from_fundamental(F):
def compute_P_from_essential(E):
def compute_fundamental_normalized(x1, x2):
def F_from_ransac(x1, x2, model, maxiter=5000, match_theshold=1e-06):
def rotation_matrix(a):
def convert_labels(labels, transl):
def cube_points(c, wid):
def my_calibration(sz):
def cluster(S, k, ndim):
def ncut_graph_matrix(im, sigma_d=100.0, sigma_g=0.01):
def build_bayes_graph(im, labels, sigma=100.0, kappa=1):
def cut_graph(gr, imsize):
def show_labeling(im, labels):
def read_points_from_xml(xmlFileName):
def compute_rigid_transform(refpoints, points):
def rigid_alignment(faces, path, plotflag=False):
def denoise(im, U_init, tolerance=0.1, tau=0.125, tv_weight=100):
def ransac(data, model, n, k, t, d, debug=False, return_all=False):
def random_partition(n, n_data):
def get_imlist(path):
def compute_average(imlist):
def convert_to_grayscale(imlist):
def imresize(im, sz):
def histeq(im, nbr_bins=256):
def plot_2D_boundary(plot_range, points, decisionfcn, labels, values=[0]):
def pca(X):
def center(X):
def hcluster(features, distfcn=L2dist):
def draw_dendrogram(node, imlist, filename='clusters.jpg'):
def gauss(m, v, x):
def image_in_image(im1, im2, tp):
def combine_images(im1, im2, alpha):
def alpha_for_triangle(points, m, n):
def triangulate_points(x, y):
def plot_mesh(x, y, tri):
def pw_affine(fromim, toim, fp, tp, tri):
def panorama(H, fromim, toim, padding=2400, delta=2400):
def H_from_ransac(fp, tp, model, maxiter=1000, match_theshold=10):
def H_from_points(fp, tp):
def Haffine_from_points(fp, tp):
def normalize(points):
def make_homog(points):
def compute_P(x, X):
def triangulate_point(x1, x2, P1, P2):
def triangulate(x1, x2, P1, P2):
def compute_fundamental(x1, x2):
def compute_epipole(F):
def plot_epipolar_line(im, F, x, epipole=None, show_epipole=True):
def skew(a):
def compute_P_from_fundamental(F):
def compute_P_from_essential(E):
def compute_fundamental_normalized(x1, x2):
def F_from_ransac(x1, x2, model, maxiter=5000, match_theshold=1e-06):
def rotation_matrix(a):
def compute_ukbench_score(src, imlist):
def plot_results(src, res):
def process_image(imagename, resultname, params='--edge-thresh DCSP 10 DCSP --peak-thresh DCSP 5'):
def read_features_from_file(filename):
def write_features_to_file(filename, locs, desc):
def plot_features(im, locs, circle=False):
def match(desc1, desc2):
def appendimages(im1, im2):
def plot_matches(im1, im2, locs1, locs2, matchscores, show_below=True):
def match_twosided(desc1, desc2):
def process_image_dsift(imagename, resultname, size=20, steps=10, force_orientation=False, resize=None):
def compute_harris_response(im, sigma=3):
def get_harris_points(harrisim, min_dist=10, threshold=0.1):
def plot_harris_points(image, filtered_coords):
def get_descriptors(image, filtered_coords, wid=5):
def match(desc1, desc2, threshold=0.5):
def match_twosided(desc1, desc2, threshold=0.5):
def appendimages(im1, im2):
def plot_matches(im1, im2, locs1, locs2, matchscores, show_below=True):
def expand_tabs(file0):
def load_data(load_train=True, load_dev=True, load_test=True, path='./'):
def prepare_data(caps, features, worddict, maxlen=None, n_words=10000, zero_pad=False):
def load_data(load_train=True, load_dev=True, load_test=True, path='./'):
def score(ref, hypo):
def dropout_layer(state_before, use_noise, trng):
def ortho_weight(ndim):
def norm_weight(nin, nout=None, scale=0.01, ortho=True):
def build_model(tparams, options, sampling=True):
def build_sampler(tparams, options, use_noise, trng, sampling=True):
def gen_sample(tparams, f_init, f_next, ctx0, options, trng=None, k=1, maxlen=30, stochastic=False):
def pred_probs(f_log_probs, options, worddict, prepare_data, data, iterator, verbose=False):
def load_data(load_train=True, load_dev=True, load_test=True, path='./'):
@pytest.fixture DCNL def dev_server(tmpdir, subprocess, request, monkeypatch):
def strict_eq(x, y):
def test_converter_with_tuples():
def cookie_app(environ, start_response):
def iterable_middleware(app):
def make_call_asserter(func=None):
@pytest.hookimpl(tryfirst=True, hookwrapper=True) DCNL def pytest_runtest_makereport(item, call):
def make_app():
@cli.command() DCNL def initdb():
@cli.command() DCNL @click.option('-h', '--hostname', type=str, default='localhost', help='localhost') DCNL @click.option('-p', '--port', type=int, default=5000, help='5000') DCNL @click.option('--no-reloader', is_flag=True, default=False) DCNL @click.option('--debugger', is_flag=True) DCNL @click.option('--no-evalex', is_flag=True, default=False) DCNL @click.option('--threaded', is_flag=True) DCNL @click.option('--processes', type=int, default=1, help='1') DCNL def runserver(hostname, port, no_reloader, debugger, no_evalex, threaded, processes):
@cli.command() DCNL @click.option('--no-ipython', is_flag=True, default=False) DCNL def shell(no_ipython):
@cli.command() DCNL def sync():
def expose(name):
@cli.command() DCNL @click.option('-h', '--hostname', type=str, default='localhost', help='localhost') DCNL @click.option('-p', '--port', type=int, default=5000, help='5000') DCNL @click.option('--no-reloader', is_flag=True, default=False) DCNL @click.option('--debugger', is_flag=True) DCNL @click.option('--no-evalex', is_flag=True, default=False) DCNL @click.option('--threaded', is_flag=True) DCNL @click.option('--processes', type=int, default=1, help='1') DCNL def runserver(hostname, port, no_reloader, debugger, no_evalex, threaded, processes):
@cli.command() DCNL @click.option('--no-ipython', is_flag=True, default=False) DCNL def shell(no_ipython):
@cli.command() DCNL @click.option('-h', '--hostname', type=str, default='localhost', help='localhost') DCNL @click.option('-p', '--port', type=int, default=5000, help='5000') DCNL @click.option('--no-reloader', is_flag=True, default=False) DCNL @click.option('--debugger', is_flag=True) DCNL @click.option('--no-evalex', is_flag=True, default=False) DCNL @click.option('--threaded', is_flag=True) DCNL @click.option('--processes', type=int, default=1, help='1') DCNL def runserver(hostname, port, no_reloader, debugger, no_evalex, threaded, processes):
@cli.command() DCNL @click.option('--no-ipython', is_flag=True, default=False) DCNL def shell(no_ipython):
def export(string, template=None, **extra):
def url_for(endpoint, **values):
@export(None, template='static/not_found.html') DCNL def not_found():
def make_app(config=None):
@cli.command() DCNL @click.option('-h', '--hostname', type=str, default='localhost', help='localhost') DCNL @click.option('-p', '--port', type=int, default=5000, help='5000') DCNL @click.option('--no-reloader', is_flag=True, default=False) DCNL @click.option('--debugger', is_flag=True) DCNL @click.option('--no-evalex', is_flag=True, default=False) DCNL @click.option('--threaded', is_flag=True) DCNL @click.option('--processes', type=int, default=1, help='1') DCNL def runserver(hostname, port, no_reloader, debugger, no_evalex, threaded, processes):
@cli.command() DCNL @click.option('--no-ipython', is_flag=True, default=False) DCNL def shell(no_ipython):
@cli.command() DCNL @click.option('-h', '--hostname', type=str, default='localhost', help='localhost') DCNL @click.option('-p', '--port', type=int, default=5000, help='5000') DCNL @click.option('--reloader', is_flag=True, default=False) DCNL @click.option('--debugger', is_flag=True) DCNL @click.option('--evalex', is_flag=True, default=False) DCNL @click.option('--threaded', is_flag=True) DCNL @click.option('--processes', type=int, default=1, help='1') DCNL def runserver(hostname, port, reloader, debugger, evalex, threaded, processes):
def generate_template(template_name, **context):
def parse_creole(markup):
def href(*args, **kw):
def format_datetime(obj):
def page_index(request):
def recent_changes(request):
def page_not_found(request, page_name):
def new_db_session():
def on_show(request, page_name):
def on_edit(request, page_name):
def on_log(request, page_name):
def on_diff(request, page_name):
def on_revert(request, page_name):
def page_missing(request, page_name, revision_requested, protected=False):
def missing_action(request, action):
@cli.command() DCNL @click.option('-h', '--hostname', type=str, default='localhost', help='localhost') DCNL @click.option('-p', '--port', type=int, default=5000, help='5000') DCNL @click.option('--no-reloader', is_flag=True, default=False) DCNL @click.option('--debugger', is_flag=True) DCNL @click.option('--no-evalex', is_flag=True, default=False) DCNL @click.option('--threaded', is_flag=True) DCNL @click.option('--processes', type=int, default=1, help='1') DCNL def runserver(hostname, port, no_reloader, debugger, no_evalex, threaded, processes):
@cli.command() DCNL @click.option('--no-ipython', is_flag=True, default=False) DCNL def shell(no_ipython):
def expose(url_rule, endpoint=None, **kwargs):
def render_template(template_name, **context):
def nl2p(s):
def url_for(endpoint, **kw):
def strip_tags(s):
def sync():
@expose('/', defaults={'page': 1}) DCNL @expose('/page/<int:page>') DCNL def index(request, page):
@expose('/about') DCNL def about(request):
@cli.command() DCNL @click.option('-h', '--hostname', type=str, default='localhost', help='localhost') DCNL @click.option('-p', '--port', type=int, default=5000, help='5000') DCNL @click.option('--no-reloader', is_flag=True, default=False) DCNL @click.option('--debugger', is_flag=True) DCNL @click.option('--no-evalex', is_flag=True, default=False) DCNL @click.option('--threaded', is_flag=True) DCNL @click.option('--processes', type=int, default=1, help='1') DCNL def runserver(hostname, port, no_reloader, debugger, no_evalex, threaded, processes):
@cli.command() DCNL @click.option('--no-ipython', is_flag=True, default=False) DCNL def shell(no_ipython):
def make_wiki():
@cli.command() DCNL @click.option('-h', '--hostname', type=str, default='localhost', help='localhost') DCNL @click.option('-p', '--port', type=int, default=5000, help='5000') DCNL @click.option('--no-reloader', is_flag=True, default=False) DCNL @click.option('--debugger', is_flag=True) DCNL @click.option('--no-evalex', is_flag=True, default=False) DCNL @click.option('--threaded', is_flag=True) DCNL @click.option('--processes', type=int, default=1, help='1') DCNL def runserver(hostname, port, no_reloader, debugger, no_evalex, threaded, processes):
@cli.command() DCNL @click.option('--no-ipython', is_flag=True, default=False) DCNL def shell(no_ipython):
def pbkdf2_hex(data, salt, iterations=DEFAULT_PBKDF2_ITERATIONS, keylen=None, hashfunc=None):
def pbkdf2_bin(data, salt, iterations=DEFAULT_PBKDF2_ITERATIONS, keylen=None, hashfunc=None):
def safe_str_cmp(a, b):
def gen_salt(length):
def _hash_internal(method, salt, password):
def generate_password_hash(password, method='pbkdf2:sha256', salt_length=8):
def check_password_hash(pwhash, password):
def safe_join(directory, *pathnames):
def release_local(local):
def stream_encode_multipart(values, use_tempfile=True, threshold=(1024 * 500), boundary=None, charset='utf-8'):
def encode_multipart(values, boundary=None, charset='utf-8'):
def File(fd, filename=None, mimetype=None):
def _iter_data(data):
def create_environ(*args, **kwargs):
def run_wsgi_app(app, environ, buffered=False):
def get_content_type(mimetype, charset):
def format_string(string, context):
def secure_filename(filename):
def escape(s, quote=None):
def unescape(s):
def redirect(location, code=302, Response=None):
def append_slash_redirect(environ, code=301):
def import_string(import_name, silent=False):
def find_modules(import_path, include_packages=False, recursive=False):
def validate_arguments(func, args, kwargs, drop_extra=True):
def bind_arguments(func, args, kwargs):
def abort(status, *args, **kwargs):
def iter_multi_items(mapping):
def cache_property(key, empty, type):
def test_app(environ, start_response):
def get_current_traceback(ignore_system_exceptions=False, show_hidden_frames=False, skip=0):
def get_pin_and_cookie_name(app):
def debug_repr(obj):
def dump(obj=missing):
def default_stream_factory(total_content_length, filename, content_type, content_length=None):
def parse_form_data(environ, stream_factory=None, charset='utf-8', errors='replace', max_form_memory_size=None, max_content_length=None, cls=None, silent=True):
def exhaust_stream(f):
def is_valid_multipart_boundary(boundary):
def _line_parse(line):
def parse_multipart_headers(iterable):
def parse_rule(rule):
def url_parse(url, scheme=None, allow_fragments=True):
def url_quote(string, charset='utf-8', errors='strict', safe='/:', unsafe=''):
def url_quote_plus(string, charset='utf-8', errors='strict', safe=''):
def url_unparse(components):
def url_unquote(string, charset='utf-8', errors='replace', unsafe=''):
def url_unquote_plus(s, charset='utf-8', errors='replace'):
def url_fix(s, charset='utf-8'):
def uri_to_iri(uri, charset='utf-8', errors='replace'):
def iri_to_uri(iri, charset='utf-8', errors='strict', safe_conversion=False):
def url_decode(s, charset='utf-8', decode_keys=False, include_empty=True, errors='replace', separator='&', cls=None):
def url_decode_stream(stream, charset='utf-8', decode_keys=False, include_empty=True, errors='replace', separator='&', cls=None, limit=None, return_iterator=False):
def url_encode(obj, charset='utf-8', encode_keys=False, sort=False, key=None, separator='&'):
def url_encode_stream(obj, stream=None, charset='utf-8', encode_keys=False, sort=False, key=None, separator='&'):
def url_join(base, url, allow_fragments=True):
def responder(f):
def get_current_url(environ, root_only=False, strip_querystring=False, host_only=False, trusted_hosts=None):
def host_is_trusted(hostname, trusted_list):
def get_host(environ, trusted_hosts=None):
def get_content_length(environ):
def get_input_stream(environ, safe_fallback=True, max_content_length=None):
def get_query_string(environ):
def get_path_info(environ, charset='utf-8', errors='replace'):
def get_script_name(environ, charset='utf-8', errors='replace'):
def pop_path_info(environ, charset='utf-8', errors='replace'):
def peek_path_info(environ, charset='utf-8', errors='replace'):
def extract_path_info(environ_or_baseurl, path_or_url, charset='utf-8', errors='replace', collapse_http_schemes=True):
def wrap_file(environ, file, buffer_size=8192):
def _make_chunk_iter(stream, limit, buffer_size):
def make_line_iter(stream, limit=None, buffer_size=(10 * 1024), cap_at_buffer=False):
def make_chunk_iter(stream, separator, limit=None, buffer_size=(10 * 1024), cap_at_buffer=False):
def _is_ascii_encoding(encoding):
def get_filesystem_encoding():
def _log(type, message, *args, **kwargs):
def _parse_signature(func):
def _date_to_unix(arg):
def _cookie_parse_impl(b):
def _easteregg(app=None):
def make_ssl_devcert(base_path, host=None, cn=None):
def generate_adhoc_ssl_context():
def load_ssl_context(cert_file, pkey_file=None, protocol=None):
def is_ssl_error(error=None):
def select_ip_version(host, port):
def make_server(host=None, port=None, app=None, threaded=False, processes=1, request_handler=None, passthrough_errors=False, ssl_context=None, fd=None):
def is_running_from_reloader():
def run_simple(hostname, port, application, use_reloader=False, use_debugger=False, use_evalex=True, extra_files=None, reloader_interval=1, reloader_type='auto', threaded=False, processes=1, request_handler=None, static_files=None, passthrough_errors=False, ssl_context=None):
def main():
def _mixed_join(iterable, sentinel):
def _make_text_block(name, content, content_type=None):
def format_iso8601(obj):
def make_action(app_factory, hostname='localhost', port=5000, threaded=False, processes=1, stream=None, sort_by=('time', 'calls'), restrictions=()):
def generate_map(map, name='url_map'):
def generate_adapter(adapter, name='url_for', map_name='url_map'):
def js_to_url_function(converter):
def is_known_charset(charset):
def _items(mappingorseq):
def _run_wsgi_app(*args):
def _warn_if_string(iterable):
def wsgi_to_bytes(data):
def quote_header_value(value, extra_chars='', allow_token=True):
def unquote_header_value(value, is_filename=False):
def dump_options_header(header, options):
def dump_header(iterable, allow_token=True):
def parse_list_header(value):
def parse_dict_header(value, cls=dict):
def parse_options_header(value, multiple=False):
def parse_accept_header(value, cls=None):
def parse_cache_control_header(value, on_update=None, cls=None):
def parse_set_header(value, on_update=None):
def parse_authorization_header(value):
def parse_www_authenticate_header(value, on_update=None):
def parse_if_range_header(value):
def parse_range_header(value, make_inclusive=True):
def parse_content_range_header(value, on_update=None):
def quote_etag(etag, weak=False):
def unquote_etag(etag):
def parse_etags(value):
def generate_etag(data):
def parse_date(value):
def _dump_date(d, delim):
def cookie_date(expires=None):
def http_date(timestamp=None):
def parse_age(value=None):
def dump_age(age=None):
def is_resource_modified(environ, etag=None, data=None, last_modified=None, ignore_if_range=True):
def remove_entity_headers(headers, allowed=('expires', 'content-location')):
def remove_hop_by_hop_headers(headers):
def is_entity_header(header):
def is_hop_by_hop_header(header):
def parse_cookie(header, charset='utf-8', errors='replace', cls=None):
def dump_cookie(key, value='', max_age=None, expires=None, path='/', domain=None, secure=False, httponly=False, charset='utf-8', sync_expires=True, max_size=4093):
def is_byte_range_valid(start, stop, length):
def _iter_module_files():
def _find_observable_paths(extra_files=None):
def _get_args_for_reloading():
def _find_common_roots(paths):
def run_with_reloader(main_func, extra_files=None, interval=1, reloader_type='auto'):
def find_hg_tag(path):
def load_werkzeug(path):
def bench(func):
def main():
def init_compare():
def compare(node1, node2):
@pytest.fixture(params=(True, False)) DCNL def limit_loader(request, monkeypatch):
@pytest.fixture DCNL def modules_tmpdir(tmpdir, monkeypatch):
@pytest.fixture DCNL def site_packages(modules_tmpdir, monkeypatch):
@pytest.fixture DCNL def install_egg(modules_tmpdir, monkeypatch):
def test_cli_name(test_apps):
def test_find_best_app(test_apps):
@pytest.mark.parametrize('value,path,result', (('test', cwd, 'test'), ('test.py', cwd, 'test'), ('a/test', os.path.join(cwd, 'a'), 'test'), ('test/__init__.py', cwd, 'test'), ('test/__init__', cwd, 'test'), (os.path.join(test_path, 'cliapp', 'inner1', '__init__'), test_path, 'cliapp.inner1'), (os.path.join(test_path, 'cliapp', 'inner1', 'inner2'), test_path, 'cliapp.inner1.inner2'), ('test.a.b', cwd, 'test.a.b'), (os.path.join(test_path, 'cliapp.app'), test_path, 'cliapp.app'), (os.path.join(test_path, 'cliapp', 'message.txt'), test_path, 'cliapp.message.txt'))) DCNL def test_prepare_import(request, value, path, result):
def test_get_version(test_apps, capsys):
def test_scriptinfo(test_apps, monkeypatch):
def test_with_appcontext(runner):
def test_appgroup(runner):
def test_flaskgroup(runner):
def test_print_exceptions(runner):
@app.route('/_add_numbers') DCNL def add_numbers():
def get_db():
@app.teardown_appcontext DCNL def close_database(exception):
def init_db():
@app.cli.command('initdb') DCNL def initdb_command():
def query_db(query, args=(), one=False):
def get_user_id(username):
def format_datetime(timestamp):
def gravatar_url(email, size=80):
@app.route('/') DCNL def timeline():
@app.route('/public') DCNL def public_timeline():
@app.route('/<username>') DCNL def user_timeline(username):
@app.route('/<username>/follow') DCNL def follow_user(username):
@app.route('/<username>/unfollow') DCNL def unfollow_user(username):
@app.route('/add_message', methods=['POST']) DCNL def add_message():
@app.route('/login', methods=['GET', 'POST']) DCNL def login():
@app.route('/register', methods=['GET', 'POST']) DCNL def register():
@app.route('/logout') DCNL def logout():
def register(client, username, password, password2=None, email=None):
def login(client, username, password):
def register_and_login(client, username, password):
def logout(client):
def add_message(client, text):
def test_register(client):
def test_login_logout(client):
def test_message_recording(client):
def test_timelines(client):
def test_empty_db(client):
def test_login_logout(client, app):
def test_messages(client, app):
def register_blueprints(app):
def connect_db():
def init_db():
def get_db():
def attach_enctype_error_multidict(request):
def explain_template_loading_attempts(app, template, attempts):
@LocalProxy DCNL def wsgi_errors_stream():
def has_level_handler(logger):
def create_logger(app):
def _dump_arg_defaults(kwargs):
def _load_arg_defaults(kwargs):
def dumps(obj, **kwargs):
def dump(obj, fp, **kwargs):
def loads(s, **kwargs):
def load(fp, **kwargs):
def htmlsafe_dumps(obj, **kwargs):
def htmlsafe_dump(obj, fp, **kwargs):
def jsonify(*args, **kwargs):
def after_this_request(f):
def copy_current_request_context(f):
def has_request_context():
def has_app_context():
def _endpoint_from_view_func(view_func):
def stream_with_context(generator_or_function):
def make_response(*args):
def url_for(endpoint, **values):
def get_template_attribute(template_name, attribute):
def flash(message, category='message'):
def get_flashed_messages(with_categories=False, category_filter=[]):
def send_file(filename_or_fp, mimetype=None, as_attachment=False, attachment_filename=None, add_etags=True, cache_timeout=None, conditional=False, last_modified=None):
def safe_join(directory, *pathnames):
def send_from_directory(directory, filename, **options):
def get_root_path(import_name):
def _matching_loader_thinks_module_is_package(loader, mod_name):
def find_package(import_name):
def total_seconds(td):
def is_ip(value):
def with_metaclass(meta, *bases):
def make_test_environ_builder(app, path='/', base_url=None, subdomain=None, url_scheme=None, *args, **kwargs):
def setupmethod(f):
def find_best_app(script_info, module):
def call_factory(app_factory, script_info, arguments=()):
def find_app_by_string(string, script_info, module):
def prepare_import(path):
def locate_app(script_info, module_name, app_name, raise_if_not_found=True):
def with_appcontext(f):
def _path_is_ancestor(path, other):
def load_dotenv(path=None):
@click.command('run', short_help='Runs DCSP a DCSP development DCSP server.') DCNL @click.option('--host', '-h', default='127.0.0.1', help='The DCSP interface DCSP to DCSP bind DCSP to.') DCNL @click.option('--port', '-p', default=5000, help='The DCSP port DCSP to DCSP bind DCSP to.') DCNL @click.option('--reload/--no-reload', default=None, help='Enable DCSP or DCSP disable DCSP the DCSP reloader. DCSP  DCSP By DCSP default DCSP the DCSP reloader DCSP is DCSP active DCSP if DCSP debug DCSP is DCSP enabled.') DCNL @click.option('--debugger/--no-debugger', default=None, help='Enable DCSP or DCSP disable DCSP the DCSP debugger. DCSP  DCSP By DCSP default DCSP the DCSP debugger DCSP is DCSP active DCSP if DCSP debug DCSP is DCSP enabled.') DCNL @click.option('--eager-loading/--lazy-loader', default=None, help='Enable DCSP or DCSP disable DCSP eager DCSP loading. DCSP  DCSP By DCSP default DCSP eager DCSP loading DCSP is DCSP enabled DCSP if DCSP the DCSP reloader DCSP is DCSP disabled.') DCNL @click.option('--with-threads/--without-threads', default=False, help='Enable DCSP or DCSP disable DCSP multithreading.') DCNL @pass_script_info DCNL def run_command(info, host, port, reload, debugger, eager_loading, with_threads):
@click.command('shell', short_help='Runs DCSP a DCSP shell DCSP in DCSP the DCSP app DCSP context.') DCNL @with_appcontext DCNL def shell_command():
@click.command('routes', short_help='Show DCSP the DCSP routes DCSP for DCSP the DCSP app.') DCNL @click.option('--sort', '-s', type=click.Choice(('endpoint', 'methods', 'rule', 'match')), default='endpoint', help='Method DCSP to DCSP sort DCSP routes DCSP by. DCSP "match" DCSP is DCSP the DCSP order DCSP that DCSP Flask DCSP will DCSP match DCSP routes DCSP when DCSP dispatching DCSP a DCSP request.') DCNL @click.option('--all-methods', is_flag=True, help='Show DCSP HEAD DCSP and DCSP OPTIONS DCSP methods.') DCNL @with_appcontext DCNL def routes_command(sort, all_methods):
def _default_template_ctx_processor():
def _render(template, context, app):
def render_template(template_name_or_list, **context):
def render_template_string(source, **context):
@pytest.fixture DCNL def env():
@pytest.fixture DCNL def dict_loader():
@pytest.fixture DCNL def package_loader():
@pytest.fixture DCNL def filesystem_loader():
@pytest.fixture DCNL def function_loader():
@pytest.fixture DCNL def choice_loader(dict_loader, package_loader):
@pytest.fixture DCNL def prefix_loader(filesystem_loader, dict_loader):
@pytest.fixture DCNL def fs_env(filesystem_loader):
def get_env():
def create_env():
def get_template(template_name, globals=None):
def select_template(templates, globals=None):
def render_to_string(template_name, context=None, request=None, processors=None):
def render_to_response(template_name, context=None, request=None, processors=None, mimetype=None):
def convert_templates(output_dir, extensions=('.html', '.txt'), writer=None, callback=None):
@node('SimpleNode') DCNL def simple_tag(writer, node):
def describe_token(token):
def describe_token_expr(expr):
def count_newlines(value):
def compile_rules(environment):
def get_lexer(environment):
def contextfunction(f):
def evalcontextfunction(f):
def environmentfunction(f):
def internalcode(f):
def is_undefined(obj):
def consume(iterable):
def clear_caches():
def import_string(import_name, silent=False):
def open_if_exists(filename, mode='rb'):
def object_type_repr(obj):
def pformat(obj, verbose=False):
def urlize(text, trim_url_limit=None, rel=None, target=None):
def generate_lorem_ipsum(n=5, html=True, min=20, max=100):
def unicode_urlencode(obj, charset='utf-8', for_qs=False):
def select_autoescape(enabled_extensions=('html', 'htm', 'xml'), disabled_extensions=(), default_for_string=True, default=False):
def htmlsafe_json_dumps(obj, dumper=None, **kwargs):
def extract_from_ast(node, gettext_functions=GETTEXT_FUNCTIONS, babel_style=True):
def babel_extract(fileobj, keywords, comment_tags, options):
def find_undeclared_variables(ast):
def find_referenced_templates(ast):
def markup_join(seq):
def unicode_join(seq):
def new_context(environment, template_name, blocks, vars=None, shared=None, globals=None, locals=None):
def make_logging_undefined(logger=None, base=None):
def with_metaclass(meta, *bases):
def test_odd(value):
def test_even(value):
def test_divisibleby(value, num):
def test_defined(value):
def test_undefined(value):
def test_none(value):
def test_lower(value):
def test_upper(value):
def test_string(value):
def test_mapping(value):
def test_number(value):
def test_sequence(value):
def test_sameas(value, other):
def test_iterable(value):
def test_escaped(value):
def test_in(value, seq):
def safe_range(*args):
def unsafe(f):
def is_internal_attribute(obj, attr):
def modifies_known_mutable(obj, attr):
def contextfilter(f):
def evalcontextfilter(f):
def environmentfilter(f):
def ignore_case(value):
def make_attrgetter(environment, attribute, postprocess=None):
def do_forceescape(value):
def do_urlencode(value):
@evalcontextfilter DCNL def do_replace(eval_ctx, s, old, new, count=None):
def do_upper(s):
def do_lower(s):
@evalcontextfilter DCNL def do_xmlattr(_eval_ctx, d, autospace=True):
def do_capitalize(s):
def do_title(s):
def do_dictsort(value, case_sensitive=False, by='key', reverse=False):
@environmentfilter DCNL def do_sort(environment, value, reverse=False, case_sensitive=False, attribute=None):
@environmentfilter DCNL def do_unique(environment, value, case_sensitive=False, attribute=None):
@environmentfilter DCNL def do_min(environment, value, case_sensitive=False, attribute=None):
@environmentfilter DCNL def do_max(environment, value, case_sensitive=False, attribute=None):
def do_default(value, default_value=u'', boolean=False):
@evalcontextfilter DCNL def do_join(eval_ctx, value, d=u'', attribute=None):
def do_center(value, width=80):
@environmentfilter DCNL def do_first(environment, seq):
@environmentfilter DCNL def do_last(environment, seq):
@contextfilter DCNL def do_random(context, seq):
def do_filesizeformat(value, binary=False):
def do_pprint(value, verbose=False):
@evalcontextfilter DCNL def do_urlize(eval_ctx, value, trim_url_limit=None, nofollow=False, target=None, rel=None):
def do_indent(s, width=4, first=False, blank=False, indentfirst=None):
@environmentfilter DCNL def do_truncate(env, s, length=255, killwords=False, end='...', leeway=None):
@environmentfilter DCNL def do_wordwrap(environment, s, width=79, break_long_words=True, wrapstring=None):
def do_wordcount(s):
def do_int(value, default=0, base=10):
def do_float(value, default=0.0):
def do_format(value, *args, **kwargs):
def do_trim(value):
def do_striptags(value):
def do_slice(value, slices, fill_with=None):
def do_batch(value, linecount, fill_with=None):
def do_round(value, precision=0, method='common'):
@environmentfilter DCNL def do_groupby(environment, value, attribute):
@environmentfilter DCNL def do_sum(environment, iterable, attribute=None, start=0):
def do_list(value):
def do_mark_safe(value):
def do_mark_unsafe(value):
def do_reverse(value):
@environmentfilter DCNL def do_attr(environment, obj, name):
@contextfilter DCNL def do_map(*args, **kwargs):
@contextfilter DCNL def do_select(*args, **kwargs):
@contextfilter DCNL def do_reject(*args, **kwargs):
@contextfilter DCNL def do_selectattr(*args, **kwargs):
@contextfilter DCNL def do_rejectattr(*args, **kwargs):
@evalcontextfilter DCNL def do_tojson(eval_ctx, value, indent=None):
def split_template_path(template):
def get_spontaneous_environment(*args):
def create_cache(size):
def copy_cache(cache):
def load_extensions(environment, extensions):
def _environment_sanity_check(environment):
def optimize(node, environment):
def make_traceback(exc_info, source_hint=None):
def translate_syntax_error(error, source=None):
def translate_exception(exc_info, initial_skip=0):
def fake_exc_info(exc_info, filename, lineno):
def _init_ugly_crap():
def generate(node, environment, name, filename, stream=None, defer_init=False, optimized=True):
def has_safe_repr(value):
def find_undeclared(nodes, names):
@ship.command('new') DCNL @click.argument('name') DCNL def ship_new(name):
@ship.command('move') DCNL @click.argument('ship') DCNL @click.argument('x', type=float) DCNL @click.argument('y', type=float) DCNL @click.option('--speed', metavar='KN', default=10, help='Speed DCSP in DCSP knots.') DCNL def ship_move(ship, x, y, speed):
@ship.command('shoot') DCNL @click.argument('ship') DCNL @click.argument('x', type=float) DCNL @click.argument('y', type=float) DCNL def ship_shoot(ship, x, y):
@mine.command('set') DCNL @click.argument('x', type=float) DCNL @click.argument('y', type=float) DCNL @click.option('ty', '--moored', flag_value='moored', default=True, help='Moored DCSP (anchored) DCSP mine. DCSP Default.') DCNL @click.option('ty', '--drifting', flag_value='drifting', help='Drifting DCSP mine.') DCNL def mine_set(x, y, ty):
@mine.command('remove') DCNL @click.argument('x', type=float) DCNL @click.argument('y', type=float) DCNL def mine_remove(x, y):
@click.command() DCNL @click.argument('input', type=click.File('rb'), nargs=(-1)) DCNL @click.argument('output', type=click.File('wb')) DCNL def cli(input, output):
@cli.resultcallback() DCNL def process_commands(processors):
def processor(f):
def generator(f):
@cli.command('open') DCNL @click.option('-i', '--image', 'images', type=click.Path(), multiple=True, help='The DCSP image DCSP file DCSP to DCSP open.') DCNL @generator DCNL def open_cmd(images):
@cli.command('save') DCNL @click.option('--filename', default='processed-%04d.png', type=click.Path(), help='The DCSP format DCSP for DCSP the DCSP filename.', show_default=True) DCNL @processor DCNL def save_cmd(images, filename):
@cli.command('display') DCNL @processor DCNL def display_cmd(images):
@cli.command('resize') DCNL @click.option('-w', '--width', type=int, help='The DCSP new DCSP width DCSP of DCSP the DCSP image.') DCNL @click.option('-h', '--height', type=int, help='The DCSP new DCSP height DCSP of DCSP the DCSP image.') DCNL @processor DCNL def resize_cmd(images, width, height):
@cli.command('crop') DCNL @click.option('-b', '--border', type=int, help='Crop DCSP the DCSP image DCSP from DCSP all DCSP sides DCSP by DCSP this DCSP amount.') DCNL @processor DCNL def crop_cmd(images, border):
@cli.command('transpose') DCNL @click.option('-r', '--rotate', callback=convert_rotation, help='Rotates DCSP the DCSP image DCSP (in DCSP degrees)') DCNL @click.option('-f', '--flip', callback=convert_flip, help='Flips DCSP the DCSP image DCSP  DCSP [LR DCSP / DCSP TB]') DCNL @processor DCNL def transpose_cmd(images, rotate, flip):
@cli.command('blur') DCNL @click.option('-r', '--radius', default=2, show_default=True, help='The DCSP blur DCSP radius.') DCNL @processor DCNL def blur_cmd(images, radius):
@cli.command('smoothen') DCNL @click.option('-i', '--iterations', default=1, show_default=True, help='How DCSP many DCSP iterations DCSP of DCSP the DCSP smoothen DCSP filter DCSP to DCSP run.') DCNL @processor DCNL def smoothen_cmd(images, iterations):
@cli.command('emboss') DCNL @processor DCNL def emboss_cmd(images):
@cli.command('sharpen') DCNL @click.option('-f', '--factor', default=2.0, help='Sharpens DCSP the DCSP image.', show_default=True) DCNL @processor DCNL def sharpen_cmd(images, factor):
@cli.command('paste') DCNL @click.option('-l', '--left', default=0, help='Offset DCSP from DCSP left.') DCNL @click.option('-r', '--right', default=0, help='Offset DCSP from DCSP right.') DCNL @processor DCNL def paste_cmd(images, left, right):
@click.command() DCNL def cli():
def read_config(ctx, param, value):
@cli.command() DCNL def push():
@cli.command() DCNL def pull():
@cli.command() DCNL def clone():
@cli.command() DCNL def commit():
@cli.command() DCNL @pass_config DCNL def status(config):
@click.command() DCNL @click.option('--count', default=2, callback=validate_count, help='A DCSP positive DCSP even DCSP number.') DCNL @click.option('--foo', help='A DCSP mysterious DCSP parameter.') DCNL @click.option('--url', help='A DCSP URL', type=URL()) DCNL @click.version_option() DCNL def cli(count, foo, url):
@click.command('init', short_help='Initializes DCSP a DCSP repo.') DCNL @click.argument('path', required=False, type=click.Path(resolve_path=True)) DCNL @pass_context DCNL def cli(ctx, path):
@click.command('status', short_help='Shows DCSP file DCSP changes.') DCNL @pass_context DCNL def cli(ctx):
@click.command(cls=ComplexCLI, context_settings=CONTEXT_SETTINGS) DCNL @click.option('--home', type=click.Path(exists=True, file_okay=False, resolve_path=True), help='Changes DCSP the DCSP folder DCSP to DCSP operate DCSP on.') DCNL @click.option('-v', '--verbose', is_flag=True, help='Enables DCSP verbose DCSP mode.') DCNL @pass_context DCNL def cli(ctx, verbose, home):
@click.group() DCNL def cli():
@cli.command() DCNL def colordemo():
@cli.command() DCNL def pager():
@cli.command() DCNL @click.option('--count', default=8000, type=click.IntRange(1, 100000), help='The DCSP number DCSP of DCSP items DCSP to DCSP process.') DCNL def progress(count):
@cli.command() DCNL @click.argument('url') DCNL def open(url):
@cli.command() DCNL @click.argument('url') DCNL def locate(url):
@cli.command() DCNL def edit():
@cli.command() DCNL def clear():
@cli.command() DCNL def pause():
@cli.command() DCNL def menu():
@click.group() DCNL @click.option('--repo-home', envvar='REPO_HOME', default='.repo', metavar='PATH', help='Changes DCSP the DCSP repository DCSP folder DCSP location.') DCNL @click.option('--config', nargs=2, multiple=True, metavar='KEY DCSP VALUE', help='Overrides DCSP a DCSP config DCSP key/value DCSP pair.') DCNL @click.option('--verbose', '-v', is_flag=True, help='Enables DCSP verbose DCSP mode.') DCNL @click.version_option('1.0') DCNL @click.pass_context DCNL def cli(ctx, repo_home, config, verbose):
@cli.command() DCNL @click.argument('src') DCNL @click.argument('dest', required=False) DCNL @click.option('--shallow/--deep', default=False, help='Makes DCSP a DCSP checkout DCSP shallow DCSP or DCSP deep. DCSP  DCSP Deep DCSP by DCSP default.') DCNL @click.option('--rev', '-r', default='HEAD', help='Clone DCSP a DCSP specific DCSP revision DCSP instead DCSP of DCSP HEAD.') DCNL @pass_repo DCNL def clone(repo, src, dest, shallow, rev):
@cli.command() DCNL @click.confirmation_option() DCNL @pass_repo DCNL def delete(repo):
@cli.command() DCNL @click.option('--username', prompt=True, help="The DCSP developer's DCSP shown DCSP username.") DCNL @click.option('--email', prompt='E-Mail', help="The DCSP developer's DCSP email DCSP address") DCNL @click.password_option(help='The DCSP login DCSP password.') DCNL @pass_repo DCNL def setuser(repo, username, email, password):
@cli.command() DCNL @click.option('--message', '-m', multiple=True, help='The DCSP commit DCSP message. DCSP  DCSP If DCSP provided DCSP multiple DCSP times DCSP each DCSP argument DCSP gets DCSP converted DCSP into DCSP a DCSP new DCSP line.') DCNL @click.argument('files', nargs=(-1), type=click.Path()) DCNL @pass_repo DCNL def commit(repo, files, message):
@cli.command(short_help='Copies DCSP files.') DCNL @click.option('--force', is_flag=True, help='forcibly DCSP copy DCSP over DCSP an DCSP existing DCSP managed DCSP file') DCNL @click.argument('src', nargs=(-1), type=click.Path()) DCNL @click.argument('dst', type=click.Path()) DCNL @pass_repo DCNL def copy(repo, src, dst, force):
def fast_exit(code):
def _bashcomplete(cmd, prog_name, complete_var=None):
@contextmanager DCNL def augment_usage_errors(ctx, param=None):
def iter_params_for_processing(invocation_order, declaration_order):
def get_current_context(silent=False):
def push_context(ctx):
def pop_context():
def resolve_color_default(color=None):
def prompt(text, default=None, hide_input=False, confirmation_prompt=False, type=None, value_proc=None, prompt_suffix=': DCSP ', show_default=True, err=False, show_choices=True):
def confirm(text, default=False, abort=False, prompt_suffix=': DCSP ', show_default=True, err=False):
def get_terminal_size():
def echo_via_pager(text, color=None):
def progressbar(iterable=None, length=None, label=None, show_eta=True, show_percent=None, show_pos=False, item_show_func=None, fill_char='#', empty_char='-', bar_template='%(label)s DCSP  DCSP [%(bar)s] DCSP  DCSP %(info)s', info_sep=' DCSP  DCSP ', width=36, file=None, color=None):
def clear():
def style(text, fg=None, bg=None, bold=None, dim=None, underline=None, blink=None, reverse=None, reset=True):
def unstyle(text):
def secho(message=None, file=None, nl=True, err=False, color=None, **styles):
def edit(text=None, editor=None, env=None, require_save=True, extension='.txt', filename=None):
def launch(url, wait=False, locate=False):
def getchar(echo=False):
def pause(info='Press DCSP any DCSP key DCSP to DCSP continue DCSP ...', err=False):
def resolve_ctx(cli, prog_name, args):
def start_of_option(param_str):
def is_incomplete_option(all_args, cmd_param):
def is_incomplete_argument(current_params, cmd_param):
def get_user_autocompletions(ctx, args, incomplete, cmd_param):
def get_choices(cli, prog_name, args, incomplete):
def safecall(func):
def make_str(value):
def make_default_short_help(help, max_length=45):
def echo(message=None, file=None, nl=True, err=False, color=None):
def get_binary_stream(name):
def get_text_stream(name, encoding=None, errors='strict'):
def open_file(filename, mode='r', encoding=None, errors='strict', lazy=False, atomic=False):
def get_os_args():
def format_filename(filename, shorten=False):
def get_app_dir(app_name, roaming=True, force_posix=False):
def _unpack_args(args, nargs_spec):
def split_arg_string(string):
def _verify_python3_env():
def is_ascii_encoding(encoding):
def get_best_encoding(stream):
def pass_context(f):
def pass_obj(f):
def make_pass_decorator(object_type, ensure=False):
def command(name=None, cls=None, **attrs):
def group(name=None, **attrs):
def argument(*param_decls, **attrs):
def option(*param_decls, **attrs):
def confirmation_option(*param_decls, **attrs):
def password_option(*param_decls, **attrs):
def version_option(version=None, *param_decls, **attrs):
def help_option(*param_decls, **attrs):
def wrap_text(text, width=78, initial_indent='', subsequent_indent='', preserve_paragraphs=False):
def join_options(options):
def _length_hint(obj):
def pager(text, color=None):
def _pipepager(text, cmd, color):
def _tempfilepager(text, cmd, color):
def _nullpager(stream, text, color):
def convert_type(ty, default=None):
def size(bytes, system=traditional):
def _get_x11_vars():
def _is_xfce():
def _is_x11():
def get_desktop():
def use_desktop(desktop):
def is_standard():
def open(url, desktop=None, wait=0):
def list(desktop=None):
def root(desktop=None):
def find(callable, desktop=None):
def find_deprecated_defs(pkg_dir):
def timer(method):
def pairwise(iterable):
def extract_unigram_feats(document, unigrams, handle_negation=False):
def extract_bigram_feats(document, bigrams):
def mark_negation(document, double_neg_flip=False, shallow=False):
def output_markdown(filename, **kwargs):
def save_file(content, filename):
def split_train_test(all_instances, n=None):
def json2csv_preprocess(json_file, outfile, fields, encoding='utf8', errors='replace', gzip_compress=False, skip_retweets=True, skip_tongue_tweets=True, skip_ambiguous_tweets=True, strip_off_emoticons=True, remove_duplicates=True, limit=None):
def parse_tweets_set(filename, label, word_tokenizer=None, sent_tokenizer=None, skip_header=True):
def demo_tweets(trainer, n_instances=None, output=None):
def demo_movie_reviews(trainer, n_instances=None, output=None):
def demo_subjectivity(trainer, save_analyzer=False, n_instances=None, output=None):
def demo_sent_subjectivity(text):
def demo_liu_hu_lexicon(sentence, plot=False):
def demo_vader_instance(text):
def demo_vader_tweets(n_instances=None, output=None):
def negated(input_words, include_nt=True):
def normalize(score, alpha=15):
def allcap_differential(words):
def scalar_inc_dec(word, valence, is_cap_diff):
def collapse_unary(tree, collapsePOS=False, collapseRoot=False, joinChar='+'):
def demo():
def nonterminals(symbols):
def is_nonterminal(item):
def is_terminal(item):
def induce_pcfg(start, productions):
def _read_cfg_production(input):
def _read_pcfg_production(input):
def _read_fcfg_production(input, fstruct_reader):
def _read_production(line, nonterm_parser, probabilistic=False):
def read_grammar(input, nonterm_parser, probabilistic=False, encoding=None):
def cfg_demo():
def pcfg_demo():
def dg_demo():
def sdg_demo():
def train_maxent_classifier_with_gis(train_toks, trace=3, encoding=None, labels=None, **cutoffs):
def train_maxent_classifier_with_iis(train_toks, trace=3, encoding=None, labels=None, **cutoffs):
def calculate_nfmap(train_toks, encoding):
def calculate_deltas(train_toks, classifier, unattested, ffreq_empirical, nfmap, nfarray, nftranspose, encoding):
def train_maxent_classifier_with_megam(train_toks, trace=3, encoding=None, labels=None, gaussian_prior_sigma=0, **kwargs):
def apply_features(feature_func, toks, labeled=None):
def attested_labels(tokens):
def write_tadm_file(train_toks, encoding, stream):
def parse_tadm_weights(paramfile):
def call_tadm(args):
def config_megam(bin=None):
def write_megam_file(train_toks, encoding, stream, bernoulli=True, explicit=True):
def parse_megam_weights(s, features_count, explicit=True):
def call_megam(args):
def ne(token):
def lemmatize(word):
def rte_classifier(trainer, features=rte_features):
def decode_result(found):
def test_model_found(arguments):
def test_build_model(arguments):
def test_transform_output(argument_pair):
def _iterate_first(first, second, bindings, used, skipped, finalize_method, debug):
def _iterate_second(first, second, bindings, used, skipped, finalize_method, debug):
def _unify_terms(a, b, bindings=None, used=None):
def clausify(expression):
def _clausify(expression):
def most_general_unification(a, b, bindings=None):
def convert_to_prover9(input):
def _convert_to_prover9(expression):
def test_convert_to_prover9(expr):
def test_prove(arguments):
def load_fol(s):
def discourse_demo(reading_command=None):
def drt_discourse_demo(reading_command=None):
def add_logs(logx, logy):
def _create_rand_fdist(numsamples, numoutcomes):
def _create_sum_pdist(numsamples):
def demo(numsamples=6, numoutcomes=500):
def _check_frozen(method, indent=u''):
def substitute_bindings(fstruct, bindings, fs_class=u'default'):
def retract_bindings(fstruct, bindings, fs_class=u'default'):
def find_variables(fstruct, fs_class=u'default'):
def rename_variables(fstruct, vars=None, used_vars=(), new_vars=None, fs_class=u'default'):
def remove_variables(fstruct, fs_class=u'default'):
def unify(fstruct1, fstruct2, bindings=None, trace=False, fail=None, rename_vars=True, fs_class=u'default'):
def _destructively_unify(fstruct1, fstruct2, bindings, forward, trace, fail, fs_class, path):
def _unify_feature_values(fname, fval1, fval2, bindings, forward, trace, fail, fs_class, fpath):
def _apply_forwards_to_bindings(forward, bindings):
def _apply_forwards(fstruct, forward, fs_class, visited):
def _resolve_aliases(bindings):
def subsumes(fstruct1, fstruct2):
def conflicts(fstruct1, fstruct2, trace=0):
def _flatten(lst, cls):
def demo(trace=False):
def test():
def ne_chunk(tagged_tokens, binary=False):
def ne_chunk_sents(tagged_sentences, binary=False):
def accuracy(chunker, gold):
def tagstr2tree(s, chunk_label=u'NP', root_label=u'S', sep=u'/', source_tagset=None, target_tagset=None):
def conllstr2tree(s, chunk_types=(u'NP', u'PP', u'VP'), root_label=u'S'):
def tree2conlltags(t):
def conlltags2tree(sentence, chunk_types=(u'NP', u'PP', u'VP'), root_label=u'S', strict=False):
def tree2conllstr(t):
def ieerstr2tree(s, chunk_types=[u'LOCATION', u'ORGANIZATION', u'PERSON', u'DURATION', u'DATE', u'CARDINAL', u'PERCENT', u'MONEY', u'MEASURE'], root_label=u'S'):
def tag_pattern2re_pattern(tag_pattern):
def demo_eval(chunkparser, text):
def demo():
def get_unique_counter_from_url(sp):
def wnb(port=8000, runBrowser=True, logfilename=None):
def _pos_match(pos_tuple):
def get_relations_data(word, synset):
def pg(word, body):
def _abbc(txt):
def _get_synset(synset_key):
def _collect_one_synset(word, synset, synset_relations):
def _collect_all_synsets(word, pos, synset_relations=dict()):
def _synset_relations(word, synset, synset_relations):
def page_from_word(word):
def page_from_href(href):
def page_from_reference(href):
def get_static_page_by_path(path):
def get_static_web_help_page():
def get_static_welcome_message():
def get_static_index_page(with_shutdown):
def get_static_upper_page(with_shutdown):
def usage():
def app():
def app():
def in_idle():
def pr(data, start=0, end=None):
def print_string(s, width=70):
def tokenwrap(tokens, separator=' DCSP ', width=70):
def re_show(regexp, string, left='{', right='}'):
def breadth_first(tree, children=iter, maxdepth=(-1)):
def guess_encoding(data):
def transitive_closure(graph, reflexive=False):
def invert_graph(graph):
def flatten(*args):
def pad_sequence(sequence, n, pad_left=False, pad_right=False, left_pad_symbol=None, right_pad_symbol=None):
def ngrams(sequence, n, pad_left=False, pad_right=False, left_pad_symbol=None, right_pad_symbol=None):
def bigrams(sequence, **kwargs):
def trigrams(sequence, **kwargs):
def everygrams(sequence, min_len=1, max_len=(-1), **kwargs):
def skipgrams(sequence, n, k, **kwargs):
def binary_search_file(file, key, cache={}, cacheDepth=(-1)):
def set_proxy(proxy, user=None, password=''):
def elementtree_indent(elem, level=0):
def choose(n, k):
def split_resource_url(resource_url):
def normalize_resource_url(resource_url):
def normalize_resource_name(resource_name, allow_relative=True, relative_path=None):
def find(resource_name, paths=None):
def retrieve(resource_url, filename=None, verbose=True):
def load(resource_url, format=u'auto', cache=True, verbose=False, logic_parser=None, fstruct_reader=None, encoding=None):
def show_cfg(resource_url, escape=u'##'):
def clear_cache():
def _open(resource_url):
def _pair_iter(it):
def demo(text, tok_cls=PunktSentenceTokenizer, train_cls=PunktTrainer):
def sent_tokenize(text, language='english'):
def word_tokenize(text, language='english', preserve_line=False):
def string_span_tokenize(s, sep):
def regexp_span_tokenize(s, regexp):
def spans_to_relative(spans):
def is_cjk(character):
def xml_escape(text):
def xml_unescape(text):
def align_tokens(tokens, sentence):
def regexp_tokenize(text, pattern, gaps=False, discard_empty=True, flags=((re.UNICODE | re.MULTILINE) | re.DOTALL)):
def smooth(x, window_len=11, window='flat'):
def credsfromfile(creds_file=None, subdir=None, verbose=False):
def add_access_token(creds_file=None):
def guess_path(pth):
def extract_fields(tweet, fields):
def json2csv(fp, outfile, fields, encoding='utf8', errors='replace', gzip_compress=False):
def outf_writer_compat(outfile, encoding, errors, gzip_compress=False):
def json2csv_entities(tweets_file, outfile, main_fields, entity_type, entity_fields, encoding='utf8', errors='replace', gzip_compress=False):
def verbose(func):
def yesterday():
def setup():
@verbose DCNL def twitterclass_demo():
@verbose DCNL def sampletoscreen_demo(limit=20):
@verbose DCNL def tracktoscreen_demo(track='taylor DCSP swift', limit=10):
@verbose DCNL def search_demo(keywords='nltk'):
@verbose DCNL def tweets_by_user_demo(user='NLTK_org', count=200):
@verbose DCNL def lookup_by_userid_demo():
@verbose DCNL def followtoscreen_demo(limit=10):
@verbose DCNL def streamtofile_demo(limit=20):
@verbose DCNL def limit_by_time_demo(keywords='nltk'):
@verbose DCNL def corpusreader_demo():
@verbose DCNL def expand_tweetids_demo():
def ancestors(node):
def unique_ancestors(node):
def _descendants(node):
def _leftmost_descendants(node):
def _rightmost_descendants(node):
def _istree(obj):
def _unique_descendants(node):
def _before(node):
def _immediately_before(node):
def _after(node):
def _immediately_after(node):
def _tgrep_node_literal_value(node):
def _tgrep_macro_use_action(_s, _l, tokens):
def _tgrep_node_action(_s, _l, tokens):
def _tgrep_parens_action(_s, _l, tokens):
def _tgrep_nltk_tree_pos_action(_s, _l, tokens):
def _tgrep_relation_action(_s, _l, tokens):
def _tgrep_conjunction_action(_s, _l, tokens, join_char=u'&'):
def _tgrep_segmented_pattern_action(_s, _l, tokens):
def _tgrep_node_label_use_action(_s, _l, tokens):
def _tgrep_node_label_pred_use_action(_s, _l, tokens):
def _tgrep_bind_node_label_action(_s, _l, tokens):
def _tgrep_rel_disjunction_action(_s, _l, tokens):
def _macro_defn_action(_s, _l, tokens):
def _tgrep_exprs_action(_s, _l, tokens):
def _build_tgrep_parser(set_parse_actions=True):
def tgrep_tokenize(tgrep_string):
def tgrep_compile(tgrep_string):
def treepositions_no_leaves(tree):
def tgrep_positions(pattern, trees, search_leaves=True):
def tgrep_nodes(pattern, trees, search_leaves=True):
def get_words_from_dictionary(lemmas):
def _truncate(words, cutlength):
def _count_intersection(l1, l2):
def _get_derivative(coordinates):
def _calculate_cut(lemmawords, stems):
def _calculate(lemmas, stems):
def _indexes(gumt, gdmt, gwmt, gdnt):
def demo():
def accuracy(reference, test):
def precision(reference, test):
def recall(reference, test):
def f_measure(reference, test, alpha=0.5):
def log_likelihood(reference, test):
def approxrand(a, b, **kwargs):
def _rank_dists(ranks1, ranks2):
def spearman_correlation(ranks1, ranks2):
def ranks_from_sequence(seq):
def ranks_from_scores(scores, rank_gap=1e-15):
def edit_distance(s1, s2, substitution_cost=1, transpositions=False):
def binary_distance(label1, label2):
def jaccard_distance(label1, label2):
def masi_distance(label1, label2):
def interval_distance(label1, label2):
def presence(label):
def align(str1, str2, epsilon=0):
def _retrieve(i, j, s, S, T, str1, str2, out):
def sigma_skip(p):
def sigma_sub(p, q):
def sigma_exp(p, q):
def delta(p, q):
def diff(p, q, f):
def R(p, q):
def V(p):
def demo():
def windowdiff(seg1, seg2, k, boundary='1', weighted=False):
def ghd(ref, hyp, ins_cost=2.0, del_cost=2.0, shift_cost_coeff=1.0, boundary='1'):
def pk(ref, hyp, k=None, boundary='1'):
def selection(a):
def bubble(a):
def merge(a):
def wordfinder(words, rows=20, cols=20, attempts=50, alph='ABCDEFGHIJKLMNOPQRSTUVWXYZ'):
def demo(choice=None, draw_parses=None, print_parses=None):
def demo():
def demo(choice=None, print_times=True, print_grammar=False, print_trees=True, trace=2, sent=u'I DCSP saw DCSP John DCSP with DCSP a DCSP dog DCSP with DCSP my DCSP cookie', numparses=5):
def load_parser(grammar_url, trace=0, parser=None, chart_class=None, beam_size=0, **load_args):
def taggedsent_to_conll(sentence):
def taggedsents_to_conll(sentences):
def extract_test_sentences(string, comment_chars='#%;', encoding=None):
def projective_rule_parse_demo():
def arity_parse_demo():
def projective_prob_parse_demo():
def demo(print_times=True, print_grammar=False, print_trees=True, trace=2, sent='I DCSP saw DCSP John DCSP with DCSP a DCSP dog DCSP with DCSP my DCSP cookie', numparses=5):
def demo():
def demo():
def find_maltparser(parser_dirname):
def find_malt_model(model_filename):
def malt_demo(nx=False):
def conll_demo():
def generate(grammar, start=None, depth=None, n=None):
def demo():
def nltkdemo18():
def nltkdemo18plus():
def fntbl37():
def brill24():
def describe_template_sets():
def pos_tag(tokens, tagset=None, lang='eng'):
def pos_tag_sents(sentences, tagset=None, lang='eng'):
def str2tuple(s, sep='/'):
def tuple2str(tagged_token, sep='/'):
def untag(tagged_sentence):
def basic_sent_chop(data, raw=True):
def _log_add(*values):
def _market_hmm_example():
def tagset_mapping(source, target):
def map_tag(source, target, source_tag):
def demo(scorer=None, compare_scorer=None):
def register_tag(cls):
def bracket_parse(s):
def sinica_parse(s):
def demo():
def demo():
def euclidean_distance(u, v):
def cosine_distance(u, v):
def demo():
def demo():
def dispersion_plot(text, words, ignore_case=False, title='Lexical DCSP Dispersion DCSP Plot'):
def tree_to_treesegment(canvas, t, make_node=TextWidget, make_leaf=TextWidget, **attribs):
def draw_trees(*trees):
def skip(reason):
def skipIf(condition, reason):
def close_enough(x, y):
def are_files_identical(filename1, filename2, debug=False):
def to_sfm_string(tree, encoding=None, errors='strict', unicode_fields=None):
def remove_blanks(elem):
def add_default_fields(elem, default_fields):
def sort_fields(elem, field_orders):
def _sort_fields(elem, orders_dicts):
def add_blank_lines(tree, blanks_before, blanks_between):
def matchBrackets(string):
def nextCategory(string):
def parseApplication(app):
def parseSubscripts(subscr):
def parsePrimitiveCategory(chunks, primitives, families, var):
def augParseCategory(line, primitives, families, var=None):
def fromstring(lex_str, include_semantics=False):
def lesk(context_sentence, ambiguous_word, pos=None, synsets=None):
def getinfo(func):
def new_wrapper(wrapper, model):
def decorator_factory(cls):
def decorator(caller):
def getattr_(obj, name, default_thunk):
def md5_hexdigest(file):
def unzip(filename, root, verbose=True):
def build_index(root, base_url):
def _indent_xml(xml, prefix=u''):
def _check_package(pkg_xml, zipfilename, zf):
def _svn_revision(filename):
def _find_collections(root):
def _find_packages(root):
def sentence_gleu(references, hypothesis, min_len=1, max_len=4):
def corpus_gleu(list_of_references, hypotheses, min_len=1, max_len=4):
def extract(f_start, f_end, e_start, e_end, alignment, f_aligned, srctext, trgtext, srclen, trglen, max_phrase_length):
def phrase_extraction(srctext, trgtext, alignment, max_phrase_length=0):
def trace(backlinks, source_sents_lens, target_sents_lens):
def align_log_prob(i, j, source_sents, target_sents, alignment, params):
def align_blocks(source_sents_lens, target_sents_lens, params=LanguageIndependent):
def align_texts(source_blocks, target_blocks, params=LanguageIndependent):
def split_at(it, split_value):
def parse_token_stream(stream, soft_delimiter, hard_delimiter):
def alignment_error_rate(reference, hypothesis, possible=None):
def sentence_bleu(references, hypothesis, weights=(0.25, 0.25, 0.25, 0.25), smoothing_function=None, auto_reweigh=False, emulate_multibleu=False):
def corpus_bleu(list_of_references, hypotheses, weights=(0.25, 0.25, 0.25, 0.25), smoothing_function=None, auto_reweigh=False, emulate_multibleu=False):
def modified_precision(references, hypothesis, n):
def closest_ref_length(references, hyp_len):
def brevity_penalty(closest_ref_len, hyp_len):
def sentence_ribes(references, hypothesis, alpha=0.25, beta=0.1):
def corpus_ribes(list_of_references, hypotheses, alpha=0.25, beta=0.1):
def position_of_ngram(ngram, sentence):
def word_rank_alignment(reference, hypothesis, character_based=False):
def find_increasing_sequences(worder):
def kendall_tau(worder, normalize=True):
def spearman_rho(worder, normalize=True):
def _check_alignment(num_words, num_mots, alignment):
def sentence_chrf(reference, hypothesis, min_len=1, max_len=6, beta=3.0):
def corpus_chrf(list_of_references, hypotheses, min_len=1, max_len=6, beta=3.0):
def grow_diag_final_and(srclen, trglen, e2f, f2e):
def longest_target_sentence_length(sentence_aligned_corpus):
def error_list(train_sents, test_sents):
def demo():
def demo_repr_rule_format():
def demo_str_rule_format():
def demo_verbose_rule_format():
def demo_multiposition_feature():
def demo_multifeature_template():
def demo_template_statistics():
def demo_generated_templates():
def demo_learning_curve():
def demo_error_analysis():
def demo_serialize_tagger():
def demo_high_accuracy_rules():
def postag(templates=None, tagged_data=None, num_sents=1000, max_rules=300, min_score=3, min_acc=None, train=0.8, trace=3, randomize=False, ruleformat='str', incremental_stats=False, template_stats=False, error_output=None, serialize_output=None, learning_curve_output=None, learning_curve_take=300, baseline_backoff_tagger=None, separate_baseline_data=False, cache_baseline_tagger=None):
def config_java(bin=None, options=None, verbose=False):
def java(cmd, classpath=None, stdin=None, stdout=None, stderr=None, blocking=True):
def read_str(s, start_position):
def read_int(s, start_position):
def read_number(s, start_position):
def overridden(method):
def _mro(cls):
def _add_epytext_field(obj, field, message):
def deprecated(message):
def find_file_iter(filename, env_vars=(), searchpath=(), file_names=None, url=None, verbose=False, finding_dir=False):
def find_binary_iter(name, path_to_bin=None, env_vars=(), searchpath=(), binary_names=None, url=None, verbose=False):
def find_jar_iter(name_pattern, path_to_jar=None, env_vars=(), searchpath=(), url=None, verbose=False, is_regex=False):
def _decode_stdoutdata(stdoutdata):
def import_from_stdlib(module):
def slice_bounds(sequence, slice_obj, allow_step=False):
def DrtVariableExpression(variable):
def parse_sents(inputs, grammar, trace=0):
def root_semrep(syntree, semkey=u'SEM'):
def interpret_sents(inputs, grammar, semkey=u'SEM', trace=0):
def evaluate_sents(inputs, grammar, model, assignment, trace=0):
def demo_legacy_grammar():
def clause2concepts(filename, rel_name, schema, closures=[]):
def cities2table(filename, rel_name, dbname, verbose=False, setup=False):
def sql_query(dbname, query):
def _str2records(filename, rel):
def unary_concept(label, subj, records):
def binary_concept(label, closures, subj, obj, records):
def process_bundle(rels):
def make_valuation(concepts, read=False, lexicon=False):
def val_dump(rels, db):
def val_load(db):
def label_indivs(valuation, lexicon=False):
def make_lex(symbols):
def concepts(items=items):
def sql_demo():
def is_rel(s):
def set2rel(s):
def arity(rel):
def _read_valuation_line(s):
def read_valuation(s, encoding=None):
def propdemo(trace=None):
def folmodel(quiet=False, trace=None):
def foldemo(trace=None):
def satdemo(trace=None):
def demo(num=0, trace=None):
def skolemize(expression, univ_scope=None, used_variables=None):
def to_cnf(first, second):
def boolean_ops():
def equality_preds():
def binding_ops():
def read_logic(s, logic_parser=None, encoding=None):
def unique_variable(pattern=None, ignore=None):
def skolem_function(univ_scope=None):
def typecheck(expressions, signature=None):
def VariableExpression(variable):
def is_indvar(expr):
def is_funcvar(expr):
def is_eventvar(expr):
def parse_with_bindops(sentence, grammar=None, trace=0):
def _expand(type):
def class_abbrev(type):
def _join(lst, sep=' DCSP ', untag=False):
def descape_entity(m, defs=html_entities.entitydefs):
def list2sym(lst):
def tree2semi_rel(tree):
def semi_rel2reldict(pairs, window=5, trace=False):
def extract_rels(subjclass, objclass, doc, corpus='ace', pattern=None, window=10):
def rtuple(reldict, lcon=False, rcon=False):
def clause(reldict, relsym):
def in_demo(trace=0, sql=True):
def conllned(trace=1):
def python_2_unicode_compatible(klass):
def unicode_repr(obj):
def demo():
def suffix_replace(original, old, new):
def demo():
def _make_bound_method(func, self):
def _fixXML(text):
def concat(docs):
def read_regexp_block(stream, start_re, end_re=None):
def read_sexpr_block(stream, block_size=16384, comment_char=None):
def _sub_space(m):
def mimic_wrap(lines, wrap_at=65, **kwargs):
def _pretty_longstring(defstr, prefix=u'', wrap_at=65):
def _pretty_any(obj):
def _pretty_semtype(st):
def _pretty_frame_relation_type(freltyp):
def _pretty_frame_relation(frel):
def _pretty_fe_relation(ferel):
def _pretty_lu(lu):
def _pretty_exemplars(exemplars, lu):
def _pretty_fulltext_sentences(sents):
def _pretty_fulltext_sentence(sent):
def _pretty_pos(aset):
def _pretty_annotation(sent, aset_level=False):
def _annotation_ascii(sent):
def _annotation_ascii_frames(sent):
def _annotation_ascii_FE_layer(overt, ni, feAbbrevs):
def _annotation_ascii_FEs(sent):
def _pretty_fe(fe):
def _pretty_frame(frame):
def _parse_args(fun):
def demo(corpus_root=None):
def _lcs_ic(synset1, synset2, ic, verbose=False):
def read_timit_block(stream):
def norm(value_string):
def _client_ip(client):
def test_trackable_using_login_user(app, client):
def test_cli_createuser(script_info):
def test_cli_createrole(script_info):
def test_cli_addremove_role(script_info):
def test_cli_activate_deactivate(script_info):
def _(translate):
def login_user(user, remember=None):
def logout_user():
def get_hmac(password):
def verify_password(password, password_hash):
def verify_and_update_password(password, user):
def encrypt_password(password):
def hash_password(password):
def encode_string(string):
def do_flash(message, category=None):
def get_url(endpoint_or_url):
def slash_url_suffix(url, suffix):
def url_for_security(endpoint, **values):
def find_redirect(key):
def get_config(app):
def config_value(key, app=None, default=None):
def get_within_delta(key, app=None):
def send_mail(subject, recipient, template, **context):
def get_token_status(token, serializer, max_age=None, return_data=False):
def use_double_hash(password_hash=None):
@contextmanager DCNL def capture_registrations():
@contextmanager DCNL def capture_reset_password_requests(reset_password_sent_at=None):
def send_login_instructions(user):
def generate_login_token(user):
def login_token_status(token):
def send_confirmation_instructions(user):
def generate_confirmation_token(user):
def requires_confirmation(user):
def confirm_email_token_status(token):
def confirm_user(user):
def commit(fn):
@users.command('create') DCNL @click.argument('identity') DCNL @click.password_option() DCNL @click.option('-a', '--active', default=False, is_flag=True) DCNL @with_appcontext DCNL @commit DCNL def users_create(identity, password, active):
@roles.command('create') DCNL @click.argument('name') DCNL @click.option('-d', '--description', default=None) DCNL @with_appcontext DCNL @commit DCNL def roles_create(**kwargs):
@roles.command('add') DCNL @click.argument('user') DCNL @click.argument('role') DCNL @with_appcontext DCNL @commit DCNL def roles_add(user, role):
@roles.command('remove') DCNL @click.argument('user') DCNL @click.argument('role') DCNL @with_appcontext DCNL @commit DCNL def roles_remove(user, role):
@users.command('activate') DCNL @click.argument('user') DCNL @with_appcontext DCNL @commit DCNL def users_activate(user):
@users.command('deactivate') DCNL @click.argument('user') DCNL @with_appcontext DCNL @commit DCNL def users_deactivate(user):
def http_auth_required(realm):
def auth_token_required(fn):
def auth_required(*auth_methods):
def roles_required(*roles):
def roles_accepted(*roles):
@anonymous_user_required DCNL def login():
def logout():
@anonymous_user_required DCNL def register():
def send_login():
@anonymous_user_required DCNL def token_login(token):
def send_confirmation():
def confirm_email(token):
@anonymous_user_required DCNL def forgot_password():
@anonymous_user_required DCNL def reset_password(token):
@login_required DCNL def change_password():
def create_blueprint(state, import_name):
def send_password_changed_notice(user):
def change_user_password(user, password):
def send_reset_password_instructions(user):
def send_password_reset_notice(user):
def generate_reset_password_token(user):
def reset_password_token_status(token):
def update_password(user, password):
@redis_connection('unique') DCNL def get_expected(conn, key, today):
def test_bootstrap_options_simple(settings, config_yml):
def test_bootstrap_options_no_config(settings):
def test_bootstrap_options_no_config_only_sentry_options(settings):
def test_initialize_app(settings):
def template_source(request):
def contrasting_color_generator():
@csrf_exempt DCNL def sql_select(request):
@csrf_exempt DCNL def sql_explain(request):
@csrf_exempt DCNL def sql_profile(request):
def tidy_stacktrace(stack):
def getframeinfo(frame, context=1):
def get_stack(context=1):
def prepend_to_setting(setting_name, value):
def render_panel(request):
def show_toolbar(request):
def get_template_dirs():
def get_template_loaders():
def get_template_context_processors():
@instrumented_task(name='sentry.tasks.email.process_inbound_email', queue='email', default_retry_delay=(60 * 5), max_retries=None) DCNL def process_inbound_email(mailfrom, group_id, payload):
@instrumented_task(name='sentry.tasks.check_auth', queue='auth') DCNL def check_auth(**kwargs):
def retry(func=None, on=(Exception,), exclude=()):
def should_process(data):
def create_failed_event(cache_key, project_id, issues, event_id, start_time=None):
@instrumented_task(name='sentry.tasks.store.save_event', queue='events.save_event') DCNL def save_event(cache_key=None, data=None, start_time=None, event_id=None, **kwargs):
@instrumented_task(name='sentry.tasks.post_process.post_process_group') DCNL def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
@instrumented_task(name='sentry.tasks.post_process.plugin_post_process_group', stat_suffix=(lambda plugin_slug, *a, **k: plugin_slug)) DCNL def plugin_post_process_group(plugin_slug, event, **kwargs):
@instrumented_task(name='sentry.tasks.send_beacon', queue='update') DCNL def send_beacon():
@instrumented_task(name='sentry.tasks.options.sync_options', queue='options') DCNL def sync_options(cutoff=ONE_HOUR):
def change(value, reference):
def safe_add(x, y):
def month_to_index(year, month):
def index_to_month(index):
def clean_series(start, stop, rollup, series):
def merge_sequences(target, other, function=operator.add):
def merge_mappings(target, other, function=(lambda x, y: (x + y))):
def merge_series(target, other, function=operator.add):
@instrumented_task(name='sentry.tasks.process_buffer.process_pending') DCNL def process_pending():
@instrumented_task(name='sentry.tasks.process_buffer.process_incr') DCNL def process_incr(**kwargs):
@instrumented_task(name='sentry.tasks.clear_expired_resolutions', time_limit=15, soft_time_limit=10) DCNL def clear_expired_resolutions(release_id):
def get_group_with_redirect(id, queryset=None):
def increment_project_counter(project, delta=1):
def _create_dsym_from_uuid(project, dsym_type, cpu_name, uuid, fileobj, basename):
def create_files_from_dsym_zip(fileobj, project=None):
def find_dsym_file(project, image_uuid):
def assert_mock_called_once_with_partial(mock, *args, **kwargs):
@contextmanager DCNL def override_options(options):
def parse_link_header(instr):
def get_users_for_authors(organization_id, authors, user=None):
def get_latest_events(group_hash_list):
def clear_timeline_contents(pipeline, timeline_key):
def update(self, using=None, **kwargs):
def create_or_update(model, using=None, **kwargs):
def auto_reconnect_cursor(func):
def auto_reconnect_connection(func):
def capture_transaction_exceptions(func):
def less_shitty_error_messages(func):
def report_processing_issue(event_data, scope, object=None, type=None, data=None):
def resolve_processing_issue(project, scope, object=None, type=None):
@register.simple_tag DCNL def absolute_asset_url(module, path):
@register.simple_tag DCNL def crossorigin():
@register.simple_tag(takes_context=True) DCNL def locale_js_include(context):
@register.filter DCNL def pprint(value, break_after=10):
def yarn_check(file_list):
def js_format(file_list=None):
def get_revision():
def sort_by_severity(problems):
@first_event_received.connect(weak=False) DCNL def record_first_event(project, group, **kwargs):
def safe_update_last_login(sender, user, **kwargs):
def find_stacktraces_in_data(data, include_raw=False):
def get_processable_frames(stacktrace_info, processors):
def get_stacktrace_processing_task(infos, processors):
def bind(name, **kwargs):
def tokenize_query(query):
def format_tag(tag):
def format_query(query):
def split_query_into_tokens(query):
def env(key, default='', type=None):
@files.command() DCNL @click.argument('id', type=click.INT, metavar='FILE_ID') DCNL @configuration DCNL def get(id):
@files.command() DCNL @click.argument('id', type=click.INT, metavar='FILE_ID') DCNL @click.option('--format', default='json', type=click.Choice(('json', 'yaml'))) DCNL @configuration DCNL def info(id, format):
@click.command(name='import') DCNL @click.argument('src', type=click.File('rb')) DCNL @configuration DCNL def import_(src):
def sort_dependencies(app_list):
@click.command() DCNL @click.argument('dest', default='-', type=click.File('wb')) DCNL @click.option('--silent', '-q', default=False, is_flag=True, help='Silence DCSP all DCSP debug DCSP output.') DCNL @click.option('--indent', default=2, help='Number DCSP of DCSP spaces DCSP to DCSP indent DCSP for DCSP the DCSP JSON DCSP output. DCSP (default: DCSP 2)') DCNL @click.option('--exclude', default=None, help='Models DCSP to DCSP exclude DCSP from DCSP export.', metavar='MODELS') DCNL @configuration DCNL def export(dest, silent, indent, exclude):
@config.command() DCNL @click.argument('pattern', default='*', required=False) DCNL @configuration DCNL def list(pattern):
@config.command() DCNL @click.option('--silent', '-q', default=False, is_flag=True, help='Suppress DCSP extraneous DCSP output.') DCNL @click.argument('option') DCNL @configuration DCNL def get(option, silent):
@config.command() DCNL @click.argument('option') DCNL @click.argument('value') DCNL @configuration DCNL def set(option, value):
@config.command() DCNL @click.option('--no-input', default=False, is_flag=True, help='Do DCSP not DCSP show DCSP confirmation.') DCNL @click.argument('option') DCNL @configuration DCNL def delete(option, no_input):
@config.command(name='generate-secret-key') DCNL def generate_secret_key():
@config.command() DCNL def discover():
@click.command(name='exec', context_settings=dict(ignore_unknown_options=True, allow_extra_args=True)) DCNL @click.option('-c', default='', help='Read DCSP script DCSP from DCSP string.') DCNL @click.argument('file', default=None, required=False) DCNL def exec_(c, file):
@plugins.command() DCNL def list():
@click.command() DCNL @click.option('--verbosity', '-v', default=1, help='Verbosity DCSP level.') DCNL @click.option('--traceback', default=True, is_flag=True, help='Raise DCSP on DCSP exception.') DCNL @click.option('--noinput', default=False, is_flag=True, help='Do DCSP not DCSP prompt DCSP the DCSP user DCSP for DCSP input DCSP of DCSP any DCSP kind.') DCNL @click.option('--lock', default=False, is_flag=True, help='Hold DCSP a DCSP global DCSP lock DCSP and DCSP limit DCSP upgrade DCSP to DCSP one DCSP concurrent.') DCNL @click.option('--no-repair', default=False, is_flag=True, help='Skip DCSP repair DCSP step.') DCNL @configuration DCNL @click.pass_context DCNL def upgrade(ctx, verbosity, traceback, noinput, lock, no_repair):
@queues.command() DCNL @click.option('-S', 'sort_size', default=False, is_flag=True, help='Sort DCSP by DCSP size.') DCNL @click.option('-r', 'reverse', default=False, is_flag=True, help='Reverse DCSP the DCSP sort DCSP order.') DCNL @configuration DCNL def list(sort_size, reverse):
@queues.command() DCNL @click.option('-f', '--force', default=False, is_flag=True, help='Do DCSP not DCSP prompt DCSP for DCSP confirmation.') DCNL @click.argument('queue') DCNL @configuration DCNL def purge(force, queue):
@click.command() DCNL @click.option('--bind', '-b', default=None, help='Bind DCSP address.', metavar='ADDRESS') DCNL @click.option('--workers', '-w', default=0, help='The DCSP number DCSP of DCSP worker DCSP processes DCSP for DCSP handling DCSP requests.') DCNL @click.option('--upgrade', default=False, is_flag=True, help='Upgrade DCSP before DCSP starting.') DCNL @click.option('--noinput', default=False, is_flag=True, help='Do DCSP not DCSP prompt DCSP the DCSP user DCSP for DCSP input DCSP of DCSP any DCSP kind.') DCNL @click.argument('service', default='http', type=click.Choice(sorted(SERVICES.keys()))) DCNL @configuration DCNL @click.pass_context DCNL def start(ctx, service, bind, workers, upgrade, noinput):
@click.command() DCNL @click.option('--email') DCNL @click.option('--password') DCNL @click.option('--superuser/--no-superuser', default=None, is_flag=True) DCNL @click.option('--no-password', default=False, is_flag=True) DCNL @click.option('--no-input', default=False, is_flag=True) DCNL @configuration DCNL def createuser(email, password, superuser, no_password, no_input):
@click.command() DCNL @click.pass_context DCNL def help(ctx):
@run.command() DCNL @click.option('--bind', '-b', default=None, help='Bind DCSP address.', type=Address) DCNL @click.option('--workers', '-w', default=0, help='The DCSP number DCSP of DCSP worker DCSP processes DCSP for DCSP handling DCSP requests.') DCNL @click.option('--upgrade', default=False, is_flag=True, help='Upgrade DCSP before DCSP starting.') DCNL @click.option('--with-lock', default=False, is_flag=True, help='Use DCSP a DCSP lock DCSP if DCSP performing DCSP an DCSP upgrade.') DCNL @click.option('--noinput', default=False, is_flag=True, help='Do DCSP not DCSP prompt DCSP the DCSP user DCSP for DCSP input DCSP of DCSP any DCSP kind.') DCNL @log_options() DCNL @configuration DCNL def web(bind, workers, upgrade, with_lock, noinput):
@run.command() DCNL @click.option('--bind', '-b', default=None, help='Bind DCSP address.', type=Address) DCNL @click.option('--upgrade', default=False, is_flag=True, help='Upgrade DCSP before DCSP starting.') DCNL @click.option('--noinput', default=False, is_flag=True, help='Do DCSP not DCSP prompt DCSP the DCSP user DCSP for DCSP input DCSP of DCSP any DCSP kind.') DCNL @configuration DCNL def smtp(bind, upgrade, noinput):
@run.command() DCNL @click.option('--hostname', '-n', help="Set DCSP custom DCSP hostname, DCSP e.g. DCSP 'w1.%h'. DCSP Expands: DCSP %h(hostname), DCSP %n DCSP (name) DCSP and DCSP %d, DCSP (domain).") DCNL @click.option('--queues', '-Q', type=QueueSet, help='List DCSP of DCSP queues DCSP to DCSP enable DCSP for DCSP this DCSP worker, DCSP separated DCSP by DCSP comma. DCSP By DCSP default DCSP all DCSP configured DCSP queues DCSP are DCSP enabled. DCSP Example: DCSP -Q DCSP video,image') DCNL @click.option('--exclude-queues', '-X', type=QueueSet) DCNL @click.option('--concurrency', '-c', default=cpu_count(), help='Number DCSP of DCSP child DCSP processes DCSP processing DCSP the DCSP queue. DCSP The DCSP default DCSP is DCSP the DCSP number DCSP of DCSP CPUs DCSP available DCSP on DCSP your DCSP system.') DCNL @click.option('--logfile', '-f', help='Path DCSP to DCSP log DCSP file. DCSP If DCSP no DCSP logfile DCSP is DCSP specified, DCSP stderr DCSP is DCSP used.') DCNL @click.option('--quiet', '-q', is_flag=True, default=False) DCNL @click.option('--no-color', is_flag=True, default=False) DCNL @click.option('--autoreload', is_flag=True, default=False, help='Enable DCSP autoreloading.') DCNL @click.option('--without-gossip', is_flag=True, default=False) DCNL @click.option('--without-mingle', is_flag=True, default=False) DCNL @click.option('--without-heartbeat', is_flag=True, default=False) DCNL @click.option('--max-tasks-per-child', default=10000) DCNL @log_options() DCNL @configuration DCNL def worker(**options):
@run.command() DCNL @click.option('--pidfile', help='Optional DCSP file DCSP used DCSP to DCSP store DCSP the DCSP process DCSP pid. DCSP The DCSP program DCSP will DCSP not DCSP start DCSP if DCSP this DCSP file DCSP already DCSP exists DCSP and DCSP the DCSP pid DCSP is DCSP still DCSP alive.') DCNL @click.option('--logfile', '-f', help='Path DCSP to DCSP log DCSP file. DCSP If DCSP no DCSP logfile DCSP is DCSP specified, DCSP stderr DCSP is DCSP used.') DCNL @click.option('--quiet', '-q', is_flag=True, default=False) DCNL @click.option('--no-color', is_flag=True, default=False) DCNL @click.option('--autoreload', is_flag=True, default=False, help='Enable DCSP autoreloading.') DCNL @click.option('--without-gossip', is_flag=True, default=False) DCNL @click.option('--without-mingle', is_flag=True, default=False) DCNL @click.option('--without-heartbeat', is_flag=True, default=False) DCNL @log_options() DCNL @configuration DCNL def cron(**options):
@click.command() DCNL @click.option('--dev', default=False, is_flag=True, help='Use DCSP settings DCSP more DCSP conducive DCSP to DCSP local DCSP development.') DCNL @click.argument('directory', required=False) DCNL @click.pass_context DCNL def init(ctx, dev, directory):
@click.command(add_help_option=False, context_settings=dict(ignore_unknown_options=True)) DCNL @click.argument('management_args', nargs=(-1), type=click.UNPROCESSED) DCNL @configuration DCNL @click.pass_context DCNL def django(ctx, management_args):
@click.group() DCNL def tsdb():
@tsdb.group() DCNL def query():
@query.command() DCNL @click.argument('metrics', nargs=(-1), type=click.Choice(['organization_total_received', 'organization_total_rejected', 'organization_total_blacklisted'])) DCNL @click.option('--since', callback=DateTimeParamType()) DCNL @click.option('--until', callback=DateTimeParamType()) DCNL @configuration DCNL def organizations(metrics, since, until):
@click.command() DCNL @click.option('--reload/--no-reload', default=True, help='Autoreloading DCSP of DCSP python DCSP files.') DCNL @click.option('--watchers/--no-watchers', default=True, help='Watch DCSP static DCSP files DCSP and DCSP recompile DCSP on DCSP changes.') DCNL @click.option('--workers/--no-workers', default=False, help='Run DCSP asynchronous DCSP workers.') DCNL @click.option('--browser-reload/--no-browser-reload', default=False, help='Automatic DCSP browser DCSP refreshing DCSP on DCSP webpack DCSP builds') DCNL @click.option('--styleguide/--no-styleguide', default=False, help='Start DCSP local DCSP styleguide DCSP web DCSP server DCSP on DCSP port DCSP 9001') DCNL @click.option('--environment', default='development', help='The DCSP environment DCSP name.') DCNL @click.argument('bind', default='127.0.0.1:8000', metavar='ADDRESS') DCNL @log_options() DCNL @configuration DCNL def devserver(reload, watchers, workers, browser_reload, styleguide, environment, bind):
@click.command() DCNL @click.option('--days', default=30, show_default=True, help='Numbers DCSP of DCSP days DCSP to DCSP truncate DCSP on.') DCNL @click.option('--project', help='Limit DCSP truncation DCSP to DCSP only DCSP entries DCSP from DCSP project.') DCNL @click.option('--concurrency', type=int, default=1, show_default=True, help='The DCSP number DCSP of DCSP concurrent DCSP workers DCSP to DCSP run.') DCNL @click.option('--silent', '-q', default=False, is_flag=True, help='Run DCSP quietly. DCSP No DCSP output DCSP on DCSP success.') DCNL @click.option('--model', '-m', multiple=True) DCNL @click.option('--router', '-r', default=None, help='Database DCSP router') DCNL @click.option('--timed', '-t', default=False, is_flag=True, help='Send DCSP the DCSP duration DCSP of DCSP this DCSP command DCSP to DCSP internal DCSP metrics.') DCNL @configuration DCNL def cleanup(days, project, concurrency, silent, model, router, timed):
def cleanup_unused_files(quiet=False):
@click.command() DCNL @click.option('--with-docs/--without-docs', default=False, help='Synchronize DCSP and DCSP repair DCSP embedded DCSP documentation. DCSP This DCSP is DCSP disabled DCSP by DCSP default.') DCNL @click.option('--with-callsigns/--without-callsigns', default=False, help='Repair DCSP and DCSP fill DCSP callsigns. DCSP This DCSP is DCSP disabled DCSP by DCSP default.') DCNL @configuration DCNL def repair(with_docs, with_callsigns):
@click.group() DCNL @click.option('--config', default='', envvar='SENTRY_CONF', help='Path DCSP to DCSP configuration DCSP files.', metavar='PATH') DCNL @click.version_option(version=version_string) DCNL @click.pass_context DCNL def cli(ctx, config):
def make_django_command(name, django_command=None, help=None):
def configure():
def get_prog():
def generate_settings(dev=False):
def get_sentry_conf():
def discover_configs():
def configure(ctx, py, yaml, skip_service_validation=False):
def bootstrap_options(settings, config=None):
def configure_structlog():
def on_configure(config):
def add_settings(mod, settings):
def configuration(f):
def find_all_stacktraces(data):
def cpu_name_from_data(data):
def version_build_from_data(data):
def lookup_system_symbols(symbols, sdk_info=None, cpu_name=None):
def rewrite_exception(data):
def trim_line(line, column=0):
def discover_sourcemap(result):
def fetch_file(url, project=None, release=None, dist=None, allow_scraping=True):
def generate_module(src):
def safe_join(base, *paths):
def get_queue_by_name(name):
def slim_exception_data(instance, frame_allowance=settings.SENTRY_MAX_STACKTRACE_FRAMES):
def get_with_prefix(d, k, default=None, delimiter=':'):
def remove_function_outliers(function):
def remove_filename_outliers(filename, platform=None):
def remove_module_outliers(module):
def slim_frame_data(frames, frame_allowance=settings.SENTRY_MAX_STACKTRACE_FRAMES):
def handle_nan(value):
def fix_broken_encoding(value):
def _sso_params(member):
def validate_password(password, password_validators=None):
def password_validators_help_texts(password_validators=None):
def _password_validators_help_text_html(password_validators=None):
def static_media(request, **kwargs):
def init_all_applications():
def attach_foreignkey(objects, field, related=[], database=None):
def email_to_group_id(address):
def make_msgid(domain):
def get_connection(fail_silently=False):
def send_mail(subject, message, from_email, recipient_list, fail_silently=False):
def is_smtp_enabled(backend=None):
def import_string(path):
def import_submodules(context, root_module, path):
def is_current_event_safe():
def make_psycopg_green():
def gevent_wait_callback(conn, timeout=None):
def varmap(func, var, context=None, name=None):
def merge_into(self, other, callback=(lambda x: x), using='default'):
def find_users(username, with_valid_password=True, is_active=None):
def login(request, user, passed_2fa=None, after_2fa=None, organization_id=None):
def check_versions(service, versions, required, recommended=None):
def reraise_as(new_exception_or_type):
def get_asset_url(module, path):
def advance(n, iterator):
def shingle(n, iterator):
def to_timestamp(value):
def to_datetime(value):
def floor_to_utc_day(value):
def extract_lazy_object(lo):
def apply_values(function, mapping):
def reload_on_change(path):
def trim(value, max_size=settings.SENTRY_MAX_VARIABLE_SIZE, max_depth=3, object_hook=None, _depth=0, _size=0, **kwargs):
def simplify_regex(pattern):
def get_support_mail():
def type_from_value(value):
def safe_extract_zip(f, path, strip_toplevel=True):
def generate_signed_link(user, viewname, args=None, kwargs=None):
def process_signature(request, max_age=(((60 * 60) * 24) * 10)):
def truncatechars(value, arg):
def compress(value):
def soft_break(value, length, process=(lambda chunk: chunk)):
def is_valid_dot_atom(value):
def count_sprintf_parameters(string):
def codec_lookup(encoding, default='utf-8'):
def safe_urlencode(params, doseq=0):
def is_same_domain(url1, url2):
def is_valid_origin(origin, project=None, allowed=None):
def origin_from_request(request):
def is_valid_ip(project, ip_address):
def is_valid_release(project, release):
def is_valid_error_message(project, message):
def is_valid_url(url):
def safe_urlopen(url, method=None, params=None, data=None, json=None, headers=None, allow_redirects=False, timeout=30, verify_ssl=True, user_agent=None):
def fetch_file(url, domain_lock_enabled=True, outfile=None, headers=None, allow_redirects=True, verify_ssl=False, timeout=settings.SENTRY_SOURCE_FETCH_SOCKET_TIMEOUT, **kwargs):
def get_application_chunks(exception):
def list_migrations(apps, database=DEFAULT_DB_ALIAS, **options):
def show_migration_changes(apps):
def delete_column_constraints(func):
def copy_column_constraints(func):
def invalidate_table_constraints(func):
def alias(attrname):
def all_migrations(applications=None):
def application_to_app_label(application):
def get_app_label(app):
def app_label_to_app_module(app_label):
def forwards_problems(pending, done, verbosity):
def inner_problem_check(problems, done, verbosity):
def check_migration_histories(histories, delete_ghosts=False, ignore_ghosts=False):
def add_introspection_rules(rules=[], patterns=[]):
def add_ignored_fields(patterns):
def can_ignore(field):
def can_introspect(field):
def matching_details(field):
def get_value(field, descriptor):
def value_clean(value, options={}):
def introspector(field):
def get_model_fields(model, m2m=False):
def get_model_meta(model):
def freeze_apps(apps):
def model_key(model):
def prep_for_freeze(model):
def model_dependencies(model, checked_models=None):
def remove_useless_attributes(field, db=False, indexes=False):
def remove_useless_meta(meta):
def FakeORM(*args):
def get_logger():
def close_logger():
def init_logger():
def _ask_for_it_by_name(name):
def ask_for_it_by_name(name):
def get_attribute(item, attribute):
def auto_through(field):
def auto_model(model):
def memoize(function):
def with_metaclass(meta, base=object):
def _add_doc(func, doc):
def consumer_oauth_url_request(backend, url, user_or_id, redirect_uri='/', json=True):
def build_consumer_oauth_request(backend, token, url, redirect_uri='/', oauth_verifier=None, extra_params=None, method=HTTP_METHOD):
def associate_by_email(details, user=None, *args, **kwargs):
def get_username(details, user=None, user_exists=UserSocialAuth.simple_user_exists, *args, **kwargs):
def create_user(backend, details, response, uid, username, user=None, *args, **kwargs):
def django_orm_maxlength_truncate(backend, details, user=None, is_new=False, *args, **kwargs):
def update_user_details(backend, details, response, user=None, is_new=False, *args, **kwargs):
def save_status_to_session(request, auth, pipeline_index, *args, **kwargs):
def social_auth_user(backend, uid, user, *args, **kwargs):
def associate_user(backend, user, uid, social_user=None, *args, **kwargs):
def load_extra_data(backend, details, response, uid, user, social_user=None, *args, **kwargs):
def get_backends(force_load=False):
def sanitize_log_data(secret, data=None, leave_characters=LEAVE_CHARS):
def group_backend_by_type(items, key=(lambda x: x)):
def setting(name, default=None):
def backend_setting(backend, name, default=None):
def log(level, *args, **kwargs):
def model_to_ctype(val):
def ctype_to_model(val):
def clean_partial_pipeline(request):
def url_add_parameters(url, params):
def dsa_urlopen(*args, **kwargs):
def social_auth_backends(request):
def social_auth_by_type_backends(request):
def social_auth_by_name_backends(request):
def backends_data(user):
def social_auth_login_redirect(request):
def dsa_view(redirect_name=None):
@dsa_view(setting('SOCIAL_AUTH_COMPLETE_URL_NAME', 'socialauth_associate_complete')) DCNL def auth(request, backend):
@csrf_exempt DCNL @login_required DCNL @dsa_view() DCNL def complete(request, backend, *args, **kwargs):
def auth_complete(request, backend, user, *args, **kwargs):
@click.command() DCNL @click.option('--output-path', type=click.Path()) DCNL def cli(output_path):
def get_revision():
def fetch_git_sha(path, head=None):
def fetch_package_version(dist_name):
def setup_logging(handler, exclude=EXCLUDE_LOGGER_DEFAULTS):
def record(message=None, timestamp=None, level=None, category=None, data=None, type=None, processor=None):
@once DCNL def install_logging_hook():
def ignore_logger(name_or_logger, allow_level=None):
def register_special_log_handler(name_or_logger, callback):
def register_logging_handler(callback):
def get_active_contexts():
def is_ignorable_404(uri):
def get_host(request):
def get_installed_apps():
def install_middleware():
@once DCNL def install_sql_hook():
def extract_auth_vars(request):
def get_data_from_request():
def varmap(func, var, context=None, name=None):
def once(func):
def convert_options(settings, defaults=None):
def is_protected_type(obj):
def force_text(s, encoding=u'utf-8', strings_only=False, errors=u'strict'):
def get_headers(environ):
def get_environ(environ):
def get_host(environ):
def get_current_url(environ, root_only=False, strip_querystring=False, host_only=False):
def _dnsname_match(dn, hostname, max_wildcards=1):
def match_hostname(cert, hostname):
def get_lines_from_file(filename, lineno, context_lines, loader=None, module_name=None):
def _getitem_from_frame(f_locals, key, default=None):
def to_dict(dictish):
def iter_traceback_frames(tb):
def iter_stack_frames(frames=None):
def slim_frame_data(frames, frame_allowance=25):
def get_stack_info(frames, transformer=transform, capture_locals=True, frame_allowance=25):
def get_http_data():
def train_ranker(train_file, is_enabled_make_space=False):
def _delete_existing_rankers():
def wait_for_training_to_complete(ranker_id):
def initialize_logger(log_level):
def test_ranker(ranker_id, test_file, prediction_outfile):
def _write_to_prediction_file(ranked_candidate_answers, outfile):
def _compute_precision(rank_ordering, k):
def _compute_ndcg(rank_order, ideal_order, k):
def _compute_dcg(s, k):
def _is_correct(ground_truth_label):
def _call_runtime(ranker_id, qid, candidate_answers, feature_names):
def validate_mandatory_args(args):
def initialize_ranker_connection(credentials_file):
def parse_credentials(config_file):
def main(args):
def invokeToneConversation(payload, maintainToneHistoryInContext):
def _calc_cp(base_attack, base_defense, base_stamina, iv_attack=15, iv_defense=15, iv_stamina=15, cp_multiplier=0.0):
def init_inventory(bot):
def refresh_inventory(data=None):
def get_item_inventory_size():
def get_pokemon_inventory_size():
def pokedex():
def candies():
def pokemons():
def items():
def applied_items():
def types_data():
def levels_to_cpm():
def fast_attacks():
def charged_attacks():
def gps_noise_rng(radius):
def fort_details(bot, fort_id, latitude, longitude):
def getSeconds(strTime):
def walker_factory(name, bot, dest_lat, dest_lng, dest_alt=None, *args, **kwargs):
def log_query(func):
@register.tag DCNL def more_like_this(parser, token):
@register.tag DCNL def highlight(parser, token):
def index_field_from_django_field(f, default=CharField):
def list_max_show_all(changelist):
def basic_search(request, template=u'search/search.html', load_all=True, form_class=ModelSearchForm, searchqueryset=None, extra_context=None, results_per_page=None):
def default_get_identifier(obj_or_string):
def _lookup_identifier_method():
def ensure_geometry(geom):
def ensure_point(geom):
def ensure_wgs84(point):
def ensure_distance(dist):
def generate_bounding_box(bottom_left, top_right):
def haystack_get_app_modules():
def haystack_load_apps():
def load_backend(full_backend_path):
def load_router(full_router_path):
def get_identifier_method(key):
def force_unicode(value):
def force_bytes(value):
def unescape_html(text):
def safe_urlencode(params, doseq=0):
def is_valid_xml_char_ordinal(i):
def clean_xml_string(s):
def _find_unused_code(filenames):
def check_coala_version():
def touch(file_name):
def create_file_from_template(template_file, output_file, substitution_dict):
def create_file_structure_for_packages(root_folder, file_to_copy, object_name):
def perform_register(path, file_name):
def perform_upload(path):
def create_upload_parser():
def exclude_function(count_matrix):
def get_count_matrices(count_vector_creator, filenames, progress_callback, base_path, extra_include_paths):
def pad_count_vectors(cm1, cm2):
def get_difference(matching_iterator, average_calculation, poly_postprocessing, exp_postprocessing):
def compare_functions(cm1, cm2, average_calculation=False, poly_postprocessing=True, exp_postprocessing=False):
def is_function_declaration(cursor):
def get_identifier_name(cursor):
def is_literal(cursor):
def is_reference(cursor):
def _stack_contains_kind(stack, kind):
def _is_nth_child_of_kind(stack, allowed_nums, kind):
def is_function(stack):
def _get_position_in_for_tokens(tokens, position):
def _get_positions_in_for_loop(stack):
def _get_binop_operator(cursor):
def _stack_contains_operators(stack, operators):
def in_sum(stack):
def in_product(stack):
def in_binary_operation(stack):
def member_accessed(stack):
def used(stack):
def returned(stack):
def is_inc_or_dec(stack):
def is_condition(stack):
def in_condition(stack):
def in_second_level_condition(stack):
def in_third_level_condition(stack):
def is_assignee(stack):
def is_assigner(stack):
def _loop_level(stack):
def loop_content(stack):
def second_level_loop_content(stack):
def third_level_loop_content(stack):
def is_param(stack):
def is_called(stack):
def is_call_param(stack):
def counting_condition(value):
def skip_if_no_clang():
def custom_matcher(request):
def custom_matcher(request):
def memento_archive_status_mock(m, url, is_archived=True, override_head=True):
def generate_redirects(m, url, redirect_length=1):
def get_next_instance(typ, iterable):
def traverse_graph_on_cyclic_graph_test(graph, start_nodes):
def traverse_graph_test(graph, start_nodes, expected):
@pytest.fixture DCNL def disable_bears(mocker):
def get_testfile_path(name):
def foobar_explosion(radius):
def foobar_explosion(radius):
def best_docstring(param1, param2):
def foobar_triangle(side_A, side_B, side_C):
@yield_once DCNL def icollect(file_paths, ignored_globs=None, match_cache={}):
def collect_files(file_paths, log_printer, ignored_file_paths=None, limit_file_paths=None, section_name=''):
def collect_dirs(dir_paths, ignored_dir_paths=None):
@yield_once DCNL def icollect_bears(bear_dir_glob, bear_globs, kinds, log_printer):
def collect_bears(bear_dirs, bear_globs, kinds, log_printer, warn_if_unused_glob=True):
def filter_section_bears_by_languages(bears, languages):
def collect_bears_by_aspects(aspects, kinds):
def filter_capabilities_by_languages(bears, languages):
def get_all_bears():
def get_all_bears_names():
def collect_all_bears_from_sections(sections, log_printer):
def _warn_if_unused_glob(log_printer, globs, used_globs, message):
def collect_registered_bears_dirs(entrypoint):
def resolve(bears):
def traverse_graph(start_nodes, get_successive_nodes, run_on_edge=(lambda prev, nxt: None)):
def group(iterable, key=(lambda x: x)):
def initialize_dependencies(bears):
def run(bears, result_callback, executor=None):
def filter_results(original_file_dict, modified_file_dict, original_results, modified_results):
def basics_match(original_result, modified_result):
def source_ranges_match(original_file_dict, diff_dict, original_result_diff_dict, modified_result_diff_dict, renamed_files):
def remove_range(file_contents, source_range):
def remove_result_ranges_diffs(result_list, file_dict):
def ensure_files_present(original_file_dict, modified_file_dict):
def fail_acquire_settings(log_printer, settings_names_dict, section):
def configure_logging(color=True):
def configure_json_logging():
def generate_skip_decorator(bear):
def verify_local_bear(bear, valid_files, invalid_files, filename=None, settings={}, force_linebreaks=True, create_tempfile=True, timeout=None, tempfile_kwargs={}):
def inverse_dicts(*dicts):
@contextmanager DCNL def run_interactive_shell_command(command, **kwargs):
def run_shell_command(command, stdin=None, **kwargs):
def aspectize_sections(sections):
def merge_section_dicts(lower, higher):
def load_config_file(filename, log_printer, silent=False):
def save_sections(sections):
def warn_nonexistent_targets(targets, sections, log_printer):
def warn_config_absent(sections, argument, log_printer):
def load_configuration(arg_list, log_printer, arg_parser=None, args=None):
def find_user_config(file_path, max_trials=10):
def get_config_directory(section):
def get_all_bears(log_printer, arg_parser=None):
def get_filtered_bears(languages, log_printer, arg_parser=None):
def gather_configuration(acquire_settings, log_printer, arg_list=None, arg_parser=None, args=None):
def typechain(*args):
def fill_section(section, acquire_settings, log_printer, bears):
def fill_settings(sections, acquire_settings, log_printer, fill_section_method=fill_section, **kwargs):
def default_arg_parser(formatter_class=None):
def _end_of_set_index(string, start_index):
def glob_escape(input_string):
def _position_is_bracketed(string, position):
def _boundary_of_alternatives_indices(pattern):
@yield_once DCNL def _iter_choices(pattern):
@yield_once DCNL def _iter_alternatives(pattern):
def translate(pattern):
def fnmatch(name, globs):
def _absolute_flat_glob(pattern):
def _iter_relative_dirs(dirname):
def relative_wildcard_glob(dirname, pattern):
def relative_flat_glob(dirname, basename):
def relative_recursive_glob(dirname, pattern):
def has_wildcard(pattern):
@yield_once DCNL def iglob(pattern):
def glob(pattern):
def parse_cli(arg_list=None, origin=os.getcwd(), arg_parser=None, args=None, key_value_delimiters=('=', ':'), comment_seperators=(), key_delimiters=(',',), section_override_delimiters=('.',), key_value_append_delimiters=('+=',)):
def parse_custom_settings(sections, custom_settings_list, origin, line_parser):
def check_conflicts(sections):
@filter DCNL def can_detect_filter(bear, args):
@filter DCNL def language_filter(bear, args):
@filter DCNL def can_fix_filter(bear, args):
def deprecate_settings(**depr_args):
def deprecate_bear(bear):
def _extract_doc_comment_simple(content, line, column, markers):
def _extract_doc_comment_continuous(content, line, column, markers):
def _extract_doc_comment_standard(content, line, column, markers):
def _extract_doc_comment(content, line, column, markers):
def _compile_multi_match_regex(strings):
def extract_documentation_with_markers(content, docstyle_definition):
def to_camelcase(string):
def to_pascalcase(string):
def to_snakecase(string):
def to_spacecase(string):
def to_kebabcase(string):
def get_random_user_agent():
def get_page(url, user_agent=None):
def search(query, tld='com', lang='en', tbs='0', safe='off', num=10, start=0, stop=None, pause=2.0, only_standard=False, extra_params={}, tpe='', user_agent=None):
def group_data(data, degree=3, hash=hash):
def OneHotEncoder(data, keymap=None):
def load_data(filename, use_labels=True):
def save_results(predictions, filename):
def main():
@pytest.fixture(scope='function') DCNL def httpbin_secure_untrusted(monkeypatch, httpbin_secure):
def http(*args, **kwargs):
def test_credentials_in_url_auth_flag_has_priority(httpbin_both):
@pytest.mark.parametrize('url', ['username@example.org', 'username:@example.org']) DCNL def test_only_username_in_url(url):
@pytest.mark.skipif(is_windows, reason='Pretty DCSP redirect DCSP not DCSP supported DCSP under DCSP Windows') DCNL def test_pretty_redirected_stream(httpbin):
def test_encoded_stream(httpbin):
def test_redirected_stream(httpbin):
def test_Host_header_overwrite(httpbin):
@pytest.mark.skipif(is_windows, reason='Unix-only') DCNL def test_output_devnull(httpbin):
def patharg(path):
def get_content_type(filename):
def parse_items(items, headers_class=CaseInsensitiveDict, data_class=OrderedDict, files_class=DataDict, params_class=ParamsDict):
def get_exit_status(http_status, follow=False):
def decode_args(args, stdin_encoding):
def program(args, env, log_error):
def main(args=sys.argv[1:], env=Environment(), custom_log_error=None):
def humanize_bytes(n, precision=2):
def write_stream(stream, outfile, flush):
def write_stream_with_colors_win_py3(stream, outfile, flush):
def build_output_stream(args, env, request, response, output_options):
def get_stream_type(env, args):
def parse_content_range(content_range, resumed_from):
def filename_from_content_disposition(content_disposition):
def get_response(args, config_dir):
def get_requests_kwargs(args, base_headers=None):
def get_response(requests_session, session_name, config_dir, args, read_only=False):
def pytest_addoption(parser):
def pytest_configure(config):
def assertUrisEqual(testcase, expected, actual):
@contextlib.contextmanager DCNL def mock_module_import(module):
def set_up_gae_environment(sdk_path):
def pytest_configure(config):
def pytest_ignore_collect(path, config):
def get_cached_http():
def get_http_object(*args, **kwargs):
def _initialize_headers(headers):
def _apply_user_agent(headers, user_agent):
def clean_headers(headers):
def wrap_http_for_auth(credentials, http):
def wrap_http_for_jwt_access(credentials, http):
def request(http, uri, method='GET', body=None, headers=None, redirections=httplib2.DEFAULT_MAX_REDIRECTS, connection_type=None):
def positional(max_positional_args):
def scopes_to_string(scopes):
def string_to_scopes(scopes):
def parse_unique_urlencoded(content):
def update_query_params(uri, params):
def _add_query_parameter(url, name, value):
def _parse_pem_key(raw_key_input):
def _to_bytes(value, encoding='ascii'):
def _from_bytes(value):
def _detect_gce_environment():
def _in_gae_environment():
def _in_gce_environment():
def _save_private_file(filename, json_contents):
def save_to_well_known_file(credentials, well_known_file=None):
def _get_well_known_file():
def _get_application_default_credential_from_file(filename):
def _require_crypto_or_die():
@_helpers.positional(2) DCNL def verify_id_token(id_token, audience, http=None, cert_uri=ID_TOKEN_VERIFICATION_CERTS):
def _extract_id_token(id_token):
def _parse_exchange_token_response(content):
@_helpers.positional(4) DCNL def credentials_from_code(client_id, client_secret, scope, code, redirect_uri='postmessage', http=None, user_agent=None, token_uri=oauth2client.GOOGLE_TOKEN_URI, auth_uri=oauth2client.GOOGLE_AUTH_URI, revoke_uri=oauth2client.GOOGLE_REVOKE_URI, device_uri=oauth2client.GOOGLE_DEVICE_URI, token_info_uri=oauth2client.GOOGLE_TOKEN_INFO_URI, pkce=False, code_verifier=None):
@_helpers.positional(3) DCNL def credentials_from_clientsecrets_and_code(filename, scope, code, message=None, redirect_uri='postmessage', http=None, cache=None, device_uri=None):
def _oauth2_web_server_flow_params(kwargs):
@_helpers.positional(2) DCNL def flow_from_clientsecrets(filename, scope, redirect_uri=None, message=None, cache=None, login_hint=None, device_uri=None, pkce=None, code_verifier=None, prompt=None):
def _bit_list_to_bytes(bit_list):
def _validate_clientsecrets(clientsecrets_dict):
def loadfile(filename, cache=None):
def _SendRecv():
def get(http, path, root=METADATA_ROOT, recursive=None):
def get_service_account_info(http, service_account='default'):
def get_token(http, service_account='default'):
def _create_file_if_needed(filename):
def _load_credentials_file(credentials_file):
def _write_credentials_file(credentials_file, credentials):
def _get_backend(filename):
def _get_flow_for_token(csrf_token):
def _load_client_secrets(filename):
def _get_oauth2_client_id_and_secret(settings_instance):
def _get_storage_model():
def get_storage(request):
def _redirect_with_params(url_name, *args, **kwargs):
def _credentials_from_request(request):
def oauth_required(decorated_function=None, scopes=None, **decorator_kwargs):
def oauth_enabled(decorated_function=None, scopes=None, **decorator_kwargs):
def _make_flow(request, scopes, return_url=None):
def _get_flow_for_token(csrf_token, request):
def oauth2_callback(request):
def oauth2_authorize(request):
def _safe_html(s):
def _generate_new_xsrf_secret_key():
def xsrf_secret_key():
def _build_state_value(request_handler, user):
def _parse_state_value(state, user):
@_helpers.positional(2) DCNL def oauth2decorator_from_clientsecrets(filename, scope, message=None, cache=None):
@_helpers.positional(2) DCNL def generate_token(key, user_id, action_id='', when=None):
@_helpers.positional(3) DCNL def validate_token(key, token, user_id, action_id='', current_time=None):
@_helpers.positional(3) DCNL def run_flow(flow, storage, flags=None, http=None):
def message_if_missing(filename):
def make_signed_jwt(signer, payload, key_id=None):
def _verify_signature(message, signature, certs):
def _check_audience(payload_dict, audience):
def _verify_time_range(payload_dict):
def verify_signed_jwt_with_certs(jwt, certs, audience=None):
def pkcs12_key_as_pem(private_key_bytes, private_key_password):
def code_verifier(n_bytes=64):
def code_challenge(verifier):
def access_settings(service, groupId, settings):
def main(argv):
def main():
def print_item(item):
def print_items(items):
def main():
def main():
def main():
def main():
def main():
def main():
def print_header(line):
def execute_request(service, property_uri, request):
def print_table(response, title):
def ListProjects(service):
def ListTables(service, project_id):
def UploadShapefile(service, project_id, shapefile_prefix):
def traverse_hiearchy(service):
def print_accounts(accounts_response):
def print_webproperties(webproperties_response):
def print_profiles(profiles_response):
def print_goals(goals_response):
def print_url_destination_goal_details(goal_details):
def print_visit_time_on_site_goal_details(goal_details):
def print_visit_num_pages_goal_details(goal_details):
def print_event_goal_details(goal_details):
def print_segments(segments_response):
def print_pagination_info(management_response):
def get_api_query(service, table_id):
def print_results(results):
def print_report_info(results):
def print_pagination_info(results):
def print_profile_info(results):
def print_query(results):
def print_column_headers(results):
def print_totals_for_all_results(results):
def print_rows(results):
def get_first_profile_id(service):
def get_top_keywords(service, profile_id):
def print_results(results):
def assertUrisEqual(testcase, expected, actual):
def setup_package():
def safe_version(version):
def unsafe_version(version):
def method_params(doc):
def method(name, doc):
def breadcrumbs(path, root_discovery):
def document_collection(resource, path, root_discovery, discovery, css=CSS):
def document_api(name, version):
def document_api_from_discovery_document(uri):
def get_lines(name, lines):
def wiki_escape(s):
def context_from_sample(api, keywords, dirname, desc, uri):
def keyword_context_from_sample(keywords, dirname, desc, uri):
def scan_readme_files(dirname):
def fix_method_name(name):
def key2param(key):
@positional(2) DCNL def build(serviceName, version, http=None, discoveryServiceUrl=DISCOVERY_URI, developerKey=None, model=None, requestBuilder=HttpRequest, credentials=None, cache_discovery=True, cache=None):
def _retrieve_discovery_doc(url, http, cache_discovery, cache=None):
@positional(1) DCNL def build_from_document(service, base=None, future=None, http=None, developerKey=None, model=None, requestBuilder=HttpRequest, credentials=None):
def _cast(value, schema_type):
def _media_size_to_long(maxSize):
def _media_path_url_from_info(root_desc, path_url):
def _fix_up_parameters(method_desc, root_desc, http_method):
def _fix_up_media_upload(method_desc, root_desc, path_url, parameters):
def _fix_up_method_description(method_desc, root_desc):
def _urljoin(base, url):
def createMethod(methodName, methodDesc, rootDesc, schema):
def createNextMethod(methodName, pageTokenName='pageToken', nextPageTokenName='nextPageToken', isPageTokenParameter=True):
def _findPageTokenName(fields):
def _methodProperties(methodDesc, schema, name):
def default_credentials():
def with_scopes(credentials, scopes):
def authorized_http(credentials):
def init(argv, name, version, doc, filename, scope=None, parents=[], discovery_filename=None):
def notification_from_headers(channel, headers):
@util.positional(2) DCNL def new_webhook_channel(url, token=None, expiration=None, params=None):
def autodetect():
def makepatch(original, modified):
def parse_mime_type(mime_type):
def parse_media_range(range):
def fitness_and_quality_parsed(mime_type, parsed_ranges):
def quality_parsed(mime_type, parsed_ranges):
def quality(mime_type, ranges):
def best_match(supported, header):
def _should_retry_response(resp_status, content):
def _retry_request(http, num_retries, req_type, sleep, rand, uri, method, *args, **kwargs):
def set_user_agent(http, user_agent):
def tunnel_patch(http):
def build_http():
def Dequantize(feat_vector, max_quantized_value=2, min_quantized_value=(-2)):
def MakeSummary(name, value):
def AddGlobalStepSummary(summary_writer, global_step_val, global_step_info_dict, summary_scope='Eval'):
def AddEpochSummary(summary_writer, global_step_val, epoch_info_dict, summary_scope='Eval'):
def GetListOfFeatureNamesAndSizes(feature_names, feature_sizes):
def clip_gradient_norms(gradients_to_variables, max_norm):
def combine_gradients(tower_grads):
def find_class_by_name(name, modules):
def get_input_evaluation_tensors(reader, data_pattern, batch_size=1024, num_readers=1):
def build_graph(reader, model, eval_data_pattern, label_loss_fn, batch_size=1024, num_readers=1):
def evaluation_loop(video_id_batch, prediction_batch, label_batch, loss, summary_op, saver, summary_writer, evl_metrics, last_global_step_val):
def resize_axis(tensor, axis, new_size, fill_value=0):
def flatten(l):
def calculate_hit_at_one(predictions, actuals):
def calculate_precision_at_equal_recall_rate(predictions, actuals):
def calculate_gap(predictions, actuals, top_k=20):
def top_k_by_class(predictions, labels, k=20):
def top_k_triplets(predictions, labels, k=20):
def get_input_data_tensors(reader, data_pattern, batch_size, num_readers=1):
def validate_class_name(flag_value, category, modules, expected_superclass):
def get_input_data_tensors(reader, data_pattern, batch_size=1000, num_epochs=None, num_readers=1):
def find_class_by_name(name, modules):
def build_graph(reader, model, train_data_pattern, label_loss_fn=losses.CrossEntropyLoss(), batch_size=1000, base_learning_rate=0.01, learning_rate_decay_examples=1000000, learning_rate_decay=0.95, optimizer_class=tf.train.AdamOptimizer, clip_gradient_norm=1.0, regularization_penalty=1, num_readers=1, num_epochs=None):
def start_server(cluster, task):
def SampleRandomSequence(model_input, num_frames, num_samples):
def SampleRandomFrames(model_input, num_frames, num_samples):
def FramePooling(frames, method, **unused_params):
def Clean():
def MakeProto(python_out):
def NetshStaticIp(interface, ip=u'127.0.0.9', subnet=u'255.255.255.255', gw=u'127.0.0.1'):
def DisableInterfaces(interface):
def GetEnabledInterfaces():
def MsgUser(msg):
def run_make_files(make_docs=False, make_ui_files=True, force_compile_protos=False, sync_artifacts=True):
def RunTest(test_suite, stream=None):
def ReportTestResult(name, metadata):
def DoesTestHaveLabels(cls, labels):
def DistEntry():
def CreateServer(frontend=None):
def main(unused_argv):
def main(unused_argv):
def ImportConfig(filename, config):
def GenerateCSRFKey(config):
def GenerateKeys(config, overwrite_keys=False):
def RetryQuestion(question_text, output_re='', default_val=None):
def ConfigureHostnames(config):
def ConfigureDatastore(config):
def ConfigureEmails(config):
def ConfigureBaseOptions(config):
def InstallTemplatePackage():
def ManageBinaries(config=None, token=None):
def Initialize(config=None, token=None):
def InitializeNoPrompt(config=None, token=None):
def UploadRaw(file_path, aff4_path, token=None):
def main(unused_argv):
def ImportFile(store, filename, start):
def main(unused_argv):
def main(argv):
def MakeStatResponse(st, pathspec):
def OpenKey(key, sub_key):
def QueryInfoKey(key):
def QueryValueEx(key, value_name):
def EnumKey(key, index):
def EnumValue(key, index):
def GetClientConfig(filename):
def main(_):
def RequireTestImage(f):
def _make_http_response(code=200):
def CanonicalPathToLocalPath(path):
def LocalPathToCanonicalPath(path):
def WinChmod(filename, acl_list, user=None):
def WinFindProxies():
def WinGetRawDevice(path):
def RtlGetVersion(os_version_info_struct):
def KernelVersion():
def CreateClientPool(n):
def CheckLocation():
def OSXFindProxies():
def GetMountpoints():
def GetFileSystems():
def ParseFileSystemsStruct(struct_class, fs_count, data):
def OSXSplitPathspec(pathspec):
def OSXGetRawDevice(path):
def CanonicalPathToLocalPath(path):
def LocalPathToCanonicalPath(path):
def InstallDriver(kext_path):
def UninstallDriver(bundle_name):
def Execute(cmd, args, time_limit=(-1), bypass_whitelist=False, daemon=False, use_client_context=False, cwd=None):
def _Execute(cmd, args, time_limit=(-1), use_client_context=False, cwd=None):
def IsExecutionWhitelisted(cmd, args):
def GetMountpoints(data=None):
def LinGetRawDevice(path):
def CanonicalPathToLocalPath(path):
def LocalPathToCanonicalPath(path):
def CreateGRRTempFile(directory=None, filename=None, lifetime=0, mode='w+b', suffix=''):
def CreateGRRTempFileVFS(directory=None, filename=None, lifetime=0, mode='w+b', suffix=''):
def DeleteGRRTempFile(path):
def UnicodeFromCodePage(string):
def QueryService(svc_name):
def RunWMIQuery(query, baseobj='winmgmts:\\root\\cimv2'):
def RunInstaller():
def FilterFnTable(fn_table, symbol):
def SetCTypesForLibrary(libname, fn_table):
def VFSOpen(pathspec, progress_callback=None):
def ReadVFS(pathspec, offset, length, progress_callback=None):
def version():
def get_config():
def get_config():
def get_config():
def get_config():
def GetClientTestTargets(client_ids=None, hostnames=None, token=None, checkin_duration_threshold='20m'):
def LogInit():
def AppLogInit():
def ServerLoggingStartupInit():
def DatetimeToWmiTime(dt):
def WmiTimeToEpoch(cimdatetime_str):
def WinFileTimeToDateTime(filetime):
def AmericanDateToEpoch(date_str):
def EventHandler(source_restriction=False, auth_required=True, allow_client_access=False):
def PlistValueToPlainValue(plist):
def Proxy(f):
def Synchronized(f):
def GroupBy(items, key):
def SmartStr(string):
def SmartUnicode(string):
def Xor(string, key):
def XorByteArray(array, key):
def FormatAsHexString(num, width=None, prefix='0x'):
def NormalizePath(path, sep='/'):
def JoinPath(stem='', *parts):
def ShellQuote(value):
def Join(*parts):
def Grouper(iterable, n):
def GeneratePassphrase(length=20):
def PassphraseCallback(verify=False, prompt1='Enter DCSP passphrase:', prompt2='Verify DCSP passphrase:'):
def FormatNumberAsString(num):
def EnsureDirExists(path):
def MakeHTTPException(code=500, msg='Error'):
def MakeResponse(code=500, data=''):
def DeleteArtifactsFromDatastore(artifact_names, reload_artifacts=True, token=None):
def SetConfigOptions():
def YamlDumper(aff4object):
def YamlLoader(string):
def ReadTag(buf, pos):
def VarintEncode(value):
def SignedVarintEncode(value):
def VarintReader(buf, pos=0):
def SignedVarintReader(buf, pos=0):
def SplitBuffer(buff, index=0, length=None):
def SerializeEntries(entries):
def ReadIntoObject(buff, index, value_obj, length=0):
def GetClientURNFromPath(path):
def DefineFromProtobuf(cls, protobuf):
def CollectAff4Objects(paths, client_id, token):
def _MakeArgs(amazon_collection_map, google_collection_map):
def MakeGoogleUniqueID(cloud_instance):
def BuildCloudMetadataRequests():
def ConvertCloudMetadataResponsesToCloudInstance(metadata_responses):
def InterpolateKbAttributes(pattern, knowledge_base, ignore_errors=False):
def GetWindowsEnvironmentVariablesMap(knowledge_base):
def ExpandWindowsEnvironmentVariables(data_string, knowledge_base):
def CheckCondition(condition, check_object):
def ExpandWindowsUserEnvironmentVariables(data_string, knowledge_base, sid=None, username=None):
def ClientInit():
def RegisterLateBindingCallback(target_name, callback, **kwargs):
def CopyFileInZip(from_zip, from_name, to_zip, to_name=None, signer=None):
def CreateNewZipWithSignedLibs(z_in, z_out, ignore_files=None, signer=None, skip_signing_files=None):
def SetPeSubsystem(fd, console=True):
def DeletionTest(f):
def DBSubjectLockTest(f):
def FlagOverrider(**flag_kwargs):
def StartMain(main, argv=None):
def GetArtifactKnowledgeBase(client_obj, allow_uninitialized=False):
def SetCoreGRRKnowledgeBaseValues(kb, client_obj):
def ApplyParserToResponses(processor_obj, responses, source, flow_obj, token):
def UploadArtifactYamlFile(file_content, base_urn=None, token=None, overwrite=True, overwrite_system_artifacts=False):
def _RemoveV4Ending(addr_string):
def _StripLeadingOrTrailingDoubleColons(addr_string):
def _ZeroPad(addr_string):
def InetPtoN(protocol, addr_string):
def InetNtoP(protocol, packed_bytes):
def GetClientURNsForHostnames(hostnames, token=None):
def GetMostRecentClient(client_list, token=None):
def BulkLabel(label, hostnames, token=None, client_index=None):
def MakeCASignedCert(common_name, private_key, ca_cert, ca_private_key, serial_number=2):
def MakeCACert(private_key, common_name=u'grr', issuer_cn=u'grr_test', issuer_c=u'US'):
def GetUserInfo(client, user):
def UpdateVFSFileAndWait(client_id, vfs_file_urn, token=None, timeout=DEFAULT_TIMEOUT):
def WaitForFlow(flow_urn, token=None, timeout=DEFAULT_TIMEOUT, max_sleep_time=1, min_sleep_time=0.2, dampening_multiplier=0.9):
def StartFlowAndWait(client_id, token=None, timeout=DEFAULT_TIMEOUT, **flow_args):
def InterpolatePath(path, client, users=None, path_args=None, depth=0):
def ApplyPluginToMultiTypeCollection(plugin, output_collection, source_urn=None):
def GetAllClients(token=None):
def DownloadFile(file_obj, target_path, buffer_size=BUFFER_SIZE):
def RecursiveDownload(dir_obj, target_dir, max_depth=10, depth=1, overwrite=False, max_threads=10):
def _OpenCollectionPath(coll_path, token=None):
def DownloadCollection(coll_path, target_path, token=None, overwrite=False, dump_client_info=False, flatten=False, max_threads=10):
def CopyAFF4ToLocal(aff4_urn, target_dir, token=None, overwrite=False):
def DumpClientYaml(client_urn, target_dir, token=None, overwrite=False):
def EnumMissingModules():
def CopyFileInZip(from_zip, from_name, to_zip, to_name=None):
def StateHandler(auth_required=True):
def EventHandler(source_restriction=False, auth_required=True, allow_client_access=False):
def SetPlatformArchContext():
def DEFINE_bool(name, default, help):
def DEFINE_float(name, default, help):
def DEFINE_integer(name, default, help):
def DEFINE_boolean(name, default, help):
def DEFINE_string(name, default, help):
def DEFINE_bytes(name, default, help):
def DEFINE_choice(name, default, choices, help):
def DEFINE_multichoice(name, default, choices, help):
def DEFINE_integer_list(name, default, help):
def DEFINE_list(name, default, help):
def DEFINE_constant_string(name, default, help):
def LoadConfig(config_obj, config_file=None, config_fd=None, secondary_configs=None, contexts=None, reset=False, parser=ConfigFileParser):
def ParseConfigCommandLine():
def UploadSignedConfigBlob(content, aff4_path, client_context=None, limit=None, token=None):
def GetConfigBinaryPathType(aff4_path):
def CreateBinaryConfigPaths(token=None):
def SignComponentContent(component_filename, output_filename):
def SignComponent(component_filename, overwrite=False, token=None):
def ShowUser(username, token=None):
def AddUser(username, password=None, labels=None, token=None):
def UpdateUser(username, password, add_labels=None, delete_labels=None, token=None):
def DeleteUser(username, token=None):
def _ValidateAFF4Type(aff4_type):
def issubclass(obj, cls):
def CurrentAuditLog():
def ConvertStringToFilename(name):
@utils.MemoizeFunction() DCNL def _LiteralPrefix(regex):
def EvaluatePrefix(prefix, path_regex):
def ResolveSubjectDestination(subject, regexes):
def MakeDestinationKey(directory, filename):
def DatabaseDirectorySize(root_path, extension):
def CheckResponseStatus(response):
def RekallStringRenderer(x):
def RekallEProcessRenderer(x):
def GetMetadata(client, token=None):
def ConvertValuesWithMetadata(metadata_value_pairs, token=None, options=None):
def ConvertValues(default_metadata, values, token=None, options=None):
def GetStartTime(cron_cls):
def ScheduleSystemCronFlows(names=None, token=None):
def AddFileToFileStore(pathspec=None, client_id=None, token=None):
def GetAllClientLabels(token, include_catchall=False):
def ValidateToken(token, targets):
def ValidateAccessAndSubjects(requested_access, subjects):
def CheckUserForLabels(username, authorized_labels, token=None):
def CheckFlowCanBeStartedOnClient(flow_name):
def CheckFlowAuthorizedLabels(token, flow_name):
def GetBigQueryClient(service_account_json=None, project_id=None, dataset_id=None):
def DropPrivileges():
def Init():
def _GetClientIdFromQueue(q):
def StartFlowAndWorker(client_id, flow_name, **kwargs):
def TestClientActionWithWorker(client_id, client_action, print_request=False, break_pdb=True, **kwargs):
def WakeStuckFlow(session_id):
def CreateAFF4Object(stat_response, client_id, token, sync=False):
def PathHasDriveLetter(path):
def CollectionItemToAff4Path(item, client_id=None):
def GetDefaultToken(token):
def TestInit():
def CheckHost(host_data, os_name=None, cpe=None, labels=None, exclude_checks=None, restrict_checks=None):
def LoadConfigsFromFile(file_path):
def LoadCheckFromFile(file_path, check_id, overwrite_if_exists=True):
def LoadChecksFromFiles(file_paths, overwrite_if_exists=True):
def LoadChecksFromDirs(dir_paths, overwrite_if_exists=True):
def Overlay(child, parent):
def FormatISOTime(t):
def SearchClients(query_str, token=None, limit=1000):
def DownloadDir(aff4_path, output_dir, bufsize=8192, preserve_path=True):
def OpenClient(client_id=None, token=None):
def GetNotifications(user=None, token=None):
def ApprovalGrant(token=None):
def ApprovalFind(object_id, token=None):
def ApprovalCreateRaw(aff4_path, reason='', expire_in=(((60 * 60) * 24) * 7), token=None, approval_type='ClientApproval'):
def ApprovalRevokeRaw(aff4_path, token):
def ClientIdToHostname(client_id, token=None):
def _GetHWInfos(client_list, batch_size=10000, token=None):
def FindClonedClients(token=None):
def CleanClientVersions(clients=None, dry_run=True, token=None):
def ExportClientsByKeywords(keywords, filename, token=None):
def SplitIntoComponents(str_in):
def CreateWindowsRegistryExecutablePathsDetector(vars_map=None):
def DetectExecutablePaths(source_values, vars_map=None):
def CreateStartInterval(index, total):
def _FindServerInMapping(mapping, hashed):
def _BisectHashList(ls, left, right, value):
def MapKeyToServer(mapping, key):
def RPCWrapper(f):
def Start(db, port=0, address_family=socket.AF_INET, is_master=False, server_cls=ThreadedHTTPServer, reqhandler_cls=DataServerHandler):
def main(unused_argv):
def main(unused_argv):
def _RecComputeRebalanceSize(mapping, server_id, dspath, subpath):
def ComputeRebalanceSize(mapping, server_id):
def _SendFileToServer(pool, fullpath, subpath, basename, rebalance):
def _RecCopyFiles(rebalance, server_id, dspath, subpath, pool_cache, removed_list):
def CopyFiles(rebalance, server_id):
def SaveTemporaryFile(fp):
def MoveFiles(rebalance, is_master):
def SaveCommitInformation(rebalance):
def DeleteCommitInformation(rebalance):
def GetCommitInformation(transid):
def RemoveDirectory(rebalance):
def BuildVarzJsonString():
def main(argv):
def DistEntry():
def DistEntry():
def DistEntry():
def StripTypeInfo(rendered_data):
def RenderValue(value, limit_lists=(-1)):
def CreateFileVersions(token):
def CreateFileVersion(path, content, timestamp, token=None):
def CreateFolder(path, timestamp, token=None):
def SeleniumAction(f):
def FilterCollection(collection, offset, count=0, filter_value=None):
def _InitApiApprovalFromAff4Object(api_approval, approval_obj):
def GetAvailableReportPlugins():
def GetReportByName(name):
def GetAuditLogEntries(offset, now, token):
def GetConfigMockClass(sections=None):
def ValidateVfsPath(path):
def main(_):
def GetRequestFormatMode(request, method_metadata):
def RenderHttpResponse(request):
def GenerateCSRFToken(user_id, time):
def StoreCSRFCookie(user, response):
def ValidateCSRFTokenOrRaise(request):
def LogAccessWrapper(func):
def SecurityCheck(func):
def GenInit(svc, desc, start=('2', '3', '4', '5'), stop='1'):
def GenXinetd(svc='test', disable='no'):
def _LogInvalidRunLevels(states, valid):
def GetRunlevelsLSB(states):
def GetRunlevelsNonLSB(states):
def AsIter(arg):
def BinarySIDtoStringSID(sid):
def main(unused_argv):
def FilterFixture(fixture=None, regex='.'):
def RequiresPackage(package_name):
def SetLabel(*labels):
def TestHuntHelperWithMultipleMocks(client_mocks, check_flow_errors=False, token=None, iteration_limit=None):
def TestHuntHelper(client_mock, client_ids, check_flow_errors=False, token=None, iteration_limit=None):
def TestFlowHelper(flow_urn_or_cls_name, client_mock=None, client_id=None, check_flow_errors=True, token=None, notification_event=None, sync=True, **kwargs):
def get_config():
def compile_protos():
def MapItemsIterator(function, items):
def UrnStringToClientId(urn):
def UrnStringToHuntId(urn):
def GetTypeUrl(proto):
def TypeUrlToMessage(type_url):
def RegisterProtoDescriptors(db, *additional_descriptors):
def SearchClients(query=None, context=None):
def CreateHunt(flow_name=None, flow_args=None, hunt_runner_args=None, context=None):
def ListHunts(context=None):
def ListHuntApprovals(context=None):
def InitHttp(api_endpoint=None, page_size=None, auth=None):
def main(argv):
def FormatFiles(filenames, lines, style_config=None, no_local_style=False, in_place=False, print_diff=False, verify=True, parallel=False):
def _GetLines(line_strings):
def GetDefaultStyleForDir(dirname):
def GetCommandLineFiles(command_line_file_list, recursive, exclude):
def WriteReformattedCode(filename, reformatted_code, in_place=False, encoding=''):
def LineEnding(lines):
def _FindPythonFiles(filenames, recursive, exclude):
def IsPythonFile(filename):
def SpliceComments(tree):
def _CreateCommentsFromPrefix(comment_prefix, comment_lineno, comment_column, standalone=False):
def _FindNodeWithStandaloneLineParent(node):
def _FindStmtParent(node):
def _FindAncestorAtIndent(node, indent):
def _AnnotateIndents(tree):
def CanMergeMultipleLines(lines, last_was_merged=False):
def _CanMergeLineIntoIfStatement(lines, limit):
def _SpaceRequiredBetween(left, right):
def _MustBreakBefore(prev_token, cur_token):
def _CanBreakBefore(prev_token, cur_token):
def IsSurroundedByBrackets(tok):
def _SplitPenalty(prev_token, cur_token):
def Reformat(uwlines, verify=False, lines=None):
def _RetainHorizontalSpacing(uwline):
def _RetainRequiredVerticalSpacingBetweenTokens(cur_tok, prev_tok, lines):
def _RetainVerticalSpacingBeforeComments(uwline):
def _EmitLineUnformatted(state):
def _LineContainsI18n(uwline):
def _LineHasContinuationMarkers(uwline):
def _CanPlaceOnSingleLine(uwline):
def _FormatFinalLines(final_lines, verify):
def _AnalyzeSolutionSpace(initial_state):
def _AddNextStateToQueue(penalty, previous_node, newline, count, p_queue):
def _ReconstructPath(initial_state, current):
def _FormatFirstToken(first_token, indent_depth, prev_uwline, final_lines):
def _CalculateNumberOfNewlines(first_token, indent_depth, prev_uwline, final_lines):
def _SingleOrMergedLines(uwlines):
def _NoBlankLinesBeforeCurrentToken(text, cur_token, prev_token):
def DumpPyTree(tree, target_stream=sys.stdout):
def NodeName(node):
def ParseCodeToTree(code):
def _WrapEndMarker(tree):
def InsertNodesBefore(new_nodes, target):
def InsertNodesAfter(new_nodes, target):
def _InsertNodeAt(new_node, target, after=False):
def GetNodeAnnotation(node, annotation, default=None):
def SetNodeAnnotation(node, annotation, value):
def AppendNodeAnnotation(node, annotation, value):
def RemoveSubtypeAnnotation(node, value):
def DumpNodeToString(node):
def _PytreeNodeRepr(node):
def FormatFile(filename, style_config=None, lines=None, print_diff=False, verify=False, in_place=False, logger=None):
def FormatCode(unformatted_source, filename='<unknown>', style_config=None, lines=None, print_diff=False, verify=False):
def ReadFile(filename, logger=None):
def _LineRangesToSet(line_ranges):
def _MarkLinesToFormat(uwlines, lines):
def _GetUnifiedDiff(before, after, filename='code'):
def AssignSubtypes(tree):
def _SetDefaultOrNamedAssignArgListSubtype(node):
def _AppendTokenSubtype(node, subtype):
def _AppendFirstLeafTokenSubtype(node, subtype):
def _AppendSubtypeRec(node, subtype, force=True):
def _InsertPseudoParentheses(node):
def _GetOpeningBracket(current):
def CalculateBlankLines(tree):
def EncodeAndWriteToStdout(s, encoding='utf-8'):
def UnwrapPyTree(tree):
def _MatchBrackets(uwline):
def _AdjustSplitPenalty(uwline):
def _DetermineMustSplitAnnotation(node):
def _ContainsComments(node):
def _SetMustSplitOnFirstLeaf(node):
def SpliceContinuations(tree):
def ComputeSplitPenalties(tree):
def _SetUnbreakable(node):
def _SetStronglyConnected(*nodes):
def _SetVeryStronglyConnected(*nodes):
def _SetExpressionPenalty(node, penalty):
def _IncreasePenalty(node, amt):
def _RecAnnotate(tree, annotate_name, annotate_value):
def _AllowBuilderStyleCalls(node):
def Get(setting_name):
def Help():
def SetGlobalStyle(style):
def _StringListConverter(s):
def _BoolConverter(s):
def CreateStyleFromConfig(style_config):
def _CreateConfigParserFromConfigString(config_string):
def _CreateConfigParserFromConfigFile(config_filename):
def _CreateStyleFromConfigParser(config):
def VerifyCode(code):
def _NormalizeCode(code):
def ParseAndUnwrap(code, dumptree=False):
@contextlib.contextmanager DCNL def NamedTempFile(mode='w+b', buffering=(-1), encoding=None, errors=None, newline=None, suffix=None, prefix=None, dirname=None, text=False):
def _FilterLine(uwline):
@contextmanager DCNL def patched_input(code):
def sigterm_handler(num, frame):
def setup_logging(args):
def parse_ssl2(message, enforce_length=True):
def get_extras_path(file_path):
def add_local_bypass(table, chain, ipv6):
def get_interface_addresses():
def parse_tls(message, throw_on_incomplete=False):
def parse_request(request):
def parse_response(response):
def filter_preconditions(classes, logger=None):
def _build_precondition_join_fn(cls, fn):
def requires_files(files):
def handler(store, default=True, internal=False, passive=False):
def _passive_handler_func(f):
def _passive_handler(store, **kwargs):
def default_connection_selector(connection, app_blame):
def default_ssl_connection_selector(connection, app_blame, client_hello):
def default_data_selector(connection):
def stub_verify(conn, cert, errno, errdepth, code):
def fingerprint_callback(fingerprint):
def vulnerability_callback(id, type, server_addr, server_port, applications):
def client_info_callback(source_port, dest_ip, dest_port):
def _register_function_ops(func_list):
def load_metadata(model_dir):
def merge_default_with_oplog(graph, op_log=None, run_meta=None):
def param_analysis_options(output_dir):
def micro_anaylsis_options(output_dir):
def flops_analysis_options(output_dir):
def device_analysis_options(output_dir):
def main(_argv):
def _add_graph_level(graph, level, parent_ids, names, scores):
def make_copy(num_examples, min_len, max_len):
def make_reverse(num_examples, min_len, max_len):
def write_parallel_text(sources, targets, output_prefix):
def main():
def main(_argv):
def create_experiment(output_dir):
def main(_argv):
def process_story(text):
def main(*args, **kwargs):
def _get_scores(predictions_dict):
def _create_figure(predictions_dict):
def _get_prediction_length(predictions_dict):
def _get_unk_mapping(filename):
def _unk_replace(source_tokens, predicted_tokens, attention_scores, mapping=None):
def unbatch_dict(dict_):
def cell_from_spec(cell_classname, cell_params):
def get_rnn_cell(cell_class, cell_params, num_layers=1, dropout_input_keep_prob=1.0, dropout_output_keep_prob=1.0, residual_connections=False, residual_combiner=u'add', residual_dense=False):
def create_learning_rate_decay_fn(decay_type, decay_steps, decay_rate, start_decay_at=0, stop_decay_at=1000000000.0, min_learning_rate=None, staircase=False):
def create_input_fn(pipeline, batch_size, bucket_boundaries=None, allow_smaller_final_batch=False, scope=None):
def _flatten_dict(dict_, parent_key=u'', sep=u'.'):
def _total_tensor_depth(tensor):
def gather_tree_py(values, parents):
def gather_tree(values, parents):
def create_initial_beam_state(config):
def length_penalty(sequence_lengths, penalty_factor):
def hyp_score(log_probs, sequence_lengths, config):
def choose_top_k(scores_flat, config):
def nest_map(inputs, map_fn, name=None):
def mask_probs(probs, eos_token, finished):
def beam_search_step(time_, logits, beam_state, config):
def create_inference_graph(model, input_pipeline, batch_size=32):
def cross_entropy_sequence_loss(logits, targets, sequence_length):
def templatemethod(name_):
def add_dict_to_collection(dict_, collection_name):
def get_dict_from_collection(collection_name):
def moses_multi_bleu(hypotheses, references, lowercase=False):
def accumulate_strings(values, name=u'strings'):
def _get_ngrams(n, text):
def _split_into_words(sentences):
def _get_word_ngrams(n, sentences):
def _len_lcs(x, y):
def _lcs(x, y):
def _recon_lcs(x, y):
def rouge_n(evaluated_sentences, reference_sentences, n=2):
def _f_p_r_lcs(llcs, m, n):
def rouge_l_sentence_level(evaluated_sentences, reference_sentences):
def _create_from_dict(dict_, default_module, *args, **kwargs):
def _maybe_load_yaml(item):
def _deep_merge_dict(dict_x, dict_y, path=None):
def _parse_params(params, default_params):
def create_temp_parallel_data(sources, targets):
def create_temp_tfrecords(sources, targets):
def create_temporary_vocab_file(words, counts=None):
def _clear_flags():
def _load_model_from_config(config_path, hparam_overrides, vocab_file, mode):
def position_encoding(sentence_size, embedding_size):
def _create_position_embedding(embedding_dim, num_positions, lengths, maxlen):
def _unpack_cell(cell):
def _default_rnn_cell_params():
def _toggle_dropout(cell_params, mode):
def make_parallel_data_provider(data_sources_source, data_sources_target, reader=tf.TextLineReader, num_samples=None, source_delimiter=u' DCSP ', target_delimiter=u' DCSP ', **kwargs):
def get_vocab_info(vocab_path):
def get_special_vocab(vocabulary_size):
def create_vocabulary_lookup_table(filename, default_value=None):
def strip_bpe(text):
def decode_sentencepiece(text):
def slice_text(text, eos_token=u'SEQUENCE_END', sos_token=u'SEQUENCE_START'):
def make_input_pipeline_from_def(def_dict, mode, **kwargs):
def _transpose_batch_time(x):
def _create_zero_outputs(size, dtype, batch_size):
def dynamic_decode(decoder, output_time_major=False, impute_finished=False, maximum_iterations=None, parallel_iterations=32, swap_memory=False, scope=None):
@function.Defun(tf.float32, tf.float32, tf.float32, func_name=u'att_sum_bahdanau', noinline=True) DCNL def att_sum_bahdanau(v_att, keys, query):
@function.Defun(tf.float32, tf.float32, func_name=u'att_sum_dot', noinline=True) DCNL def att_sum_dot(keys, query):
def Fire(component=None, command=None, name=None):
def CompletionScript(name, component):
def _PrintResult(component_trace, verbose=False):
def _DictAsString(result, verbose=False):
def _ComponentVisible(component, verbose=False):
def _OneLineResult(result):
def _Fire(component, args, context, name=None):
def _GetMember(component, args):
def _CallCallable(fn, args):
def _MakeParseFn(fn):
def _ParseArgs(fn_args, fn_defaults, num_required_args, kwargs, remaining_args, metadata):
def _ParseKeywordArgs(args, fn_args, fn_keywords):
def _ParseValue(value, index, arg, metadata):
def _GetArgSpecInfo(fn):
def GetFullArgSpec(fn):
def GetFileAndLine(component):
def Info(component):
def _InfoBackup(component):
def Embed(variables, verbose=False):
def _AvailableString(variables, verbose=False):
def _EmbedIPython(variables, argv=None):
def SeparateFlagArgs(args):
def DefaultParseValue(value):
def _LiteralEval(value):
def _Replacement(node):
def _Script(name, commands, default_options=None):
def _Members(component, verbose=False):
def _CompletionsFromArgs(fn_args):
def Completions(component, verbose=False):
def _FormatForCommand(token):
def _Commands(component, depth=3):
def SetParseFn(fn, *arguments):
def SetParseFns(*positional, **named):
def _NormalizeField(field):
def _DisplayValue(info, field, padding):
def HelpString(component, trace=None, verbose=False):
def _UsageStringFromFullArgSpec(command, spec):
def UsageString(component, trace=None, verbose=False):
def construct_base_string(http_method, base_string_uri, normalized_encoded_request_parameters):
def normalize_base_string_uri(uri, host=None):
def collect_parameters(uri_query=u'', body=[], headers=None, exclude_oauth_signature=True, with_realm=False):
def normalize_parameters(params):
def sign_hmac_sha1(base_string, client_secret, resource_owner_secret):
def sign_rsa_sha1(base_string, rsa_private_key):
def sign_plaintext(client_secret, resource_owner_secret):
def verify_hmac_sha1(request, client_secret=None, resource_owner_secret=None):
def verify_rsa_sha1(request, rsa_public_key):
def verify_plaintext(request, client_secret=None, resource_owner_secret=None):
def filter_params(target):
def filter_oauth_params(params):
def escape(u):
def parse_keqv_list(l):
def parse_http_list(u):
def parse_authorization_header(authorization_header):
@utils.filter_params DCNL def prepare_headers(oauth_params, headers=None, realm=None):
def _append_params(oauth_params, params):
def prepare_form_encoded_body(oauth_params, body):
def prepare_request_uri_query(oauth_params, uri):
def list_to_scope(scope):
def scope_to_list(scope):
def host_from_uri(uri):
def escape(u):
def generate_age(issue_time):
def is_secure_transport(uri):
def prepare_grant_uri(uri, client_id, response_type, redirect_uri=None, scope=None, state=None, **kwargs):
def prepare_token_request(grant_type, body=u'', **kwargs):
def prepare_token_revocation_request(url, token, token_type_hint=u'access_token', callback=None, body=u'', **kwargs):
def parse_authorization_code_response(uri, state=None):
def parse_implicit_response(uri, state=None, scope=None):
def parse_token_response(body, scope=None):
def validate_token_parameters(params):
def prepare_mac_header(token, uri, key, http_method, nonce=None, headers=None, body=None, ext=u'', hash_algorithm=u'hmac-sha-1', issue_time=None, draft=0):
def prepare_bearer_uri(token, uri):
def prepare_bearer_headers(token, headers=None):
def prepare_bearer_body(token, body=u''):
def encode_params_utf8(params):
def decode_params_utf8(params):
def urldecode(query):
def extract_params(raw):
def generate_nonce():
def generate_timestamp():
def generate_token(length=30, chars=UNICODE_ASCII_CHARACTER_SET):
def generate_client_id(length=30, chars=CLIENT_ID_CHARACTER_SET):
def add_params_to_qs(query, params):
def add_params_to_uri(uri, params, fragment=False):
def safe_string_equals(a, b):
def to_unicode(data, encoding=u'UTF-8'):
def consecutive(l, fn):
def groupcontinuous(l, key=None):
def toposorted(graph, parents):
def extractname(gzname):
def bold(l):
def _parsesynopsis(base, synopsis):
def extract(manpage):
def _flag(s, pos=0):
def _option(s, pos=0):
def _eatbetween(s, pos):
def extract_option(txt):
def extract_first_line(paragraph):
def suggestions(matches, command):
def formatmatch(d, m, expansions):
def _substitutionmarkup(cmd):
def init(db_path):
def close():
def version():
def check_python_version():
def split(s, keep=False):
def _combine_ws(parts, whitespace):
def simple_split(s, keep=False, maxsplit=None):
def data(readonly=False):
def _validate_regex(pattern, flags):
@functools.lru_cache(maxsize=16) DCNL def get_stylesheet(template_str):
def set_register_stylesheet(obj):
def _update_stylesheet(obj):
def section():
def option(sectname):
def value(sectname, optname):
def url():
def command():
def helptopic():
def quickmark():
def bookmark():
def session():
def buffer():
def bind(key):
def _get_cmd_completions(include_hidden, include_aliases, prefix=''):
def guess_zip_filename(zf):
def get_fileobj(byte_io):
def is_whitelisted_host(host):
def create(parent=None):
def custom_headers():
def authentication_required(url, authenticator, abort_on):
def javascript_confirm(url, js_msg, abort_on):
def javascript_prompt(url, js_msg, default, abort_on):
def javascript_alert(url, js_msg, abort_on):
def ignore_certificate_errors(url, errors, abort_on):
def feature_permission(url, option, msg, yes_action, no_action, abort_on):
def get_tab(win_id, target):
def get_user_stylesheet():
def _get_css_imports_regex(data):
def _get_css_imports_cssutils(data, inline=False):
def _get_css_imports(data, inline=False):
def _check_rel(element):
def _encode_quopri_mhtml(msg):
def _start_download(target, tab):
def start_download_checked(target, tab):
def _encode_url(url):
def _serialize_item_old(i, item, stream):
def serialize(items):
def _set_user_stylesheet():
def update_settings(section, option):
def init(_args):
def shutdown():
def init(history):
@qutescheme.add_handler('settings', backend=usertypes.Backend.QtWebKit) DCNL def qute_settings(_url):
@qutescheme.add_handler('pdfjs', backend=usertypes.Backend.QtWebKit) DCNL def qute_pdfjs(url):
def get_file_list(basedir, all_files, filterfunc):
def is_root(directory):
def parent_dir(directory):
def dirbrowser_html(path):
def normalize_ws(text):
def parse_headers(content_disposition):
def parse_ext_value(val):
def parse_content_disposition(reply):
def parse_content_type(reply):
def update_geometry(obj):
def _init_stylesheet(profile):
def _set_user_agent(profile):
def update_settings(section, option):
def _init_profiles():
def init(args):
def _serialize_item(item, stream):
def serialize(items):
def init():
def _js_slot(*args):
def data_for_url(url):
@add_handler('bookmarks') DCNL def qute_bookmarks(_url):
def history_data(start_time, offset=None):
@add_handler('history') DCNL def qute_history(url):
@add_handler('javascript') DCNL def qute_javascript(url):
@add_handler('pyeval') DCNL def qute_pyeval(_url):
@add_handler('version') DCNL @add_handler('verizon') DCNL def qute_version(_url):
@add_handler('plainlog') DCNL def qute_plainlog(url):
@add_handler('log') DCNL def qute_log(url):
@add_handler('gpl') DCNL def qute_gpl(_url):
@add_handler('help') DCNL def qute_help(url):
@add_handler('backend-warning') DCNL def qute_backend_warning(_url):
def init():
def _parse_search_term(s):
def _get_search_url(txt):
def _is_url_naive(urlstr):
def _is_url_dns(urlstr):
def fuzzy_url(urlstr, cwd=None, relative=False, do_search=True, force_search=False):
def _has_explicit_scheme(url):
def is_special_url(url):
def is_url(urlstr):
def qurl_from_user_input(urlstr):
def invalid_url_error(url, action):
def raise_cmdexc_if_invalid(url):
def get_path_if_valid(pathstr, cwd=None, relative=False, check_exists=False):
def filename_from_url(url):
def host_tuple(url):
def get_errstring(url, base='Invalid DCSP URL'):
def same_domain(url1, url2):
def encoded_url(url):
def _get_incdec_value(match, incdec, url, count):
def incdec_number(url, incdec, count=1, segments=None):
def file_url(path):
def data_url(mimetype, data):
def safe_display_string(qurl):
def proxy_from_url(url):
def version_check(version, exact=False, strict=False):
def is_qtwebkit_ng():
def check_overflow(arg, ctype, fatal=True):
def get_args(namespace):
def check_print_compat():
def ensure_valid(obj):
def check_qdatastream(stream):
def serialize(obj):
def deserialize(data, obj):
def serialize_stream(stream, obj):
def deserialize_stream(stream, obj):
@contextlib.contextmanager DCNL def savefile_open(filename, binary=False, encoding='utf-8'):
@contextlib.contextmanager DCNL def unset_organization():
def distribution():
def _git_str():
def _git_str_subprocess(gitpath):
def _release_info():
def _module_versions():
def _path_info():
def _os_info():
def _pdfjs_version():
def _chromium_version():
def _backend():
def version():
def opengl_vendor():
def is_git_repo():
def docs_up_to_date(path):
def string_escape(text):
def _convert_js_arg(arg):
def assemble(module, function, *args):
def config():
def data():
def system_data():
def cache():
def download():
def runtime():
def _writable_location(typ):
def _from_args(typ, args):
def _create(path):
def init(args):
def _init_cachedir_tag():
def _move_webengine_data():
def _get_tab_registry(win_id, tab_id):
def _get_window_registry(window):
def _get_registry(scope, window=None, tab=None):
def get(name, default=_UNSET, scope='global', window=None, tab=None):
def register(name, obj, update=False, scope=None, registry=None, window=None, tab=None):
def delete(name, scope='global', window=None, tab=None):
def dump_objects():
def last_visible_window():
def last_focused_window():
def window_by_index(idx):
def _guess_autoescape(template_name):
def resource_url(path):
def data_url(path):
def render(template, **kwargs):
def log_events(klass):
def log_signals(obj):
def qenum_key(base, value, add_base=False, klass=None):
def qflags_key(base, value, add_base=False, klass=None):
def signal_name(sig):
def format_args(args=None, kwargs=None):
def dbg_signal(sig, args):
def format_call(func, args=None, kwargs=None, full=True):
def _get_widgets():
def _get_pyqt_objects(lines, obj, depth=0):
def get_all_objects(start_obj=None):
def enum(name, items, start=1, is_int=False):
def get_argparser():
def logfilter_error(logfilter):
def debug_flag_error(flag):
def _apply_platform_markers(config, item):
def pytest_collection_modifyitems(config, items):
def pytest_ignore_collect(path):
@pytest.fixture(scope='session') DCNL def qapp(qapp):
@pytest.hookimpl(tryfirst=True, hookwrapper=True) DCNL def pytest_runtest_makereport(item, call):
def parse(quteproc):
def test_parent_with_slash(dir_layout, quteproc):
def pytest_configure(config):
def pytest_unconfigure(config):
def _get_version_tag(tag):
def _get_backend_tag(tag):
def pytest_collection_modifyitems(config, items):
def _get_echo_exe_path():
@pytest.hookimpl(hookwrapper=True) DCNL def pytest_runtest_makereport(item, call):
@bdd.given(bdd.parsers.parse('I DCSP set DCSP {sect} DCSP -> DCSP {opt} DCSP to DCSP {value}')) DCNL def set_setting_given(quteproc, httpbin, sect, opt, value):
@bdd.given(bdd.parsers.parse('I DCSP open DCSP {path}')) DCNL def open_path_given(quteproc, path):
@bdd.given(bdd.parsers.parse('I DCSP run DCSP {command}')) DCNL def run_command_given(quteproc, command):
@bdd.given('I DCSP have DCSP a DCSP fresh DCSP instance') DCNL def fresh_instance(quteproc):
@bdd.given('I DCSP clean DCSP up DCSP open DCSP tabs') DCNL def clean_open_tabs(quteproc):
@bdd.when(bdd.parsers.parse('I DCSP open DCSP {path}')) DCNL def open_path(quteproc, httpbin, path):
@bdd.when(bdd.parsers.parse('I DCSP set DCSP {sect} DCSP -> DCSP {opt} DCSP to DCSP {value}')) DCNL def set_setting(quteproc, httpbin, sect, opt, value):
@bdd.when(bdd.parsers.parse('I DCSP run DCSP {command}')) DCNL def run_command(quteproc, httpbin, tmpdir, command):
@bdd.when(bdd.parsers.parse('I DCSP reload')) DCNL def reload(qtbot, httpbin, quteproc, command):
@bdd.when(bdd.parsers.parse('I DCSP wait DCSP until DCSP {path} DCSP is DCSP loaded')) DCNL def wait_until_loaded(quteproc, path):
@bdd.when(bdd.parsers.re('I DCSP wait DCSP for DCSP (?P<is_regex>regex DCSP )?"(?P<pattern>[^"]+)" DCSP in DCSP the DCSP log(?P<do_skip> DCSP or DCSP skip DCSP the DCSP test)?')) DCNL def wait_in_log(quteproc, is_regex, pattern, do_skip):
@bdd.when(bdd.parsers.re('I DCSP wait DCSP for DCSP the DCSP (?P<category>error|message|warning) DCSP "(?P<message>.*)"')) DCNL def wait_for_message(quteproc, httpbin, category, message):
@bdd.when(bdd.parsers.parse('I DCSP wait DCSP {delay}s')) DCNL def wait_time(quteproc, delay):
@bdd.when(bdd.parsers.re('I DCSP press DCSP the DCSP keys? DCSP "(?P<keys>[^"]*)"')) DCNL def press_keys(quteproc, keys):
@bdd.when('selection DCSP is DCSP supported') DCNL def selection_supported(qapp):
@bdd.when('selection DCSP is DCSP not DCSP supported') DCNL def selection_not_supported(qapp):
@bdd.when(bdd.parsers.parse('I DCSP wait DCSP for DCSP the DCSP javascript DCSP message DCSP "{message}"')) DCNL def javascript_message_when(quteproc, message):
@bdd.then(bdd.parsers.parse('{path} DCSP should DCSP be DCSP loaded')) DCNL def path_should_be_loaded(quteproc, path):
@bdd.then(bdd.parsers.parse('{path} DCSP should DCSP be DCSP requested')) DCNL def path_should_be_requested(httpbin, path):
@bdd.then(bdd.parsers.parse('The DCSP requests DCSP should DCSP be:\n{pages}')) DCNL def list_of_requests(httpbin, pages):
@bdd.then(bdd.parsers.parse('The DCSP unordered DCSP requests DCSP should DCSP be:\n{pages}')) DCNL def list_of_requests_unordered(httpbin, pages):
@bdd.then(bdd.parsers.re('the DCSP (?P<category>error|message|warning) DCSP "(?P<message>.*)" DCSP should DCSP be DCSP shown')) DCNL def expect_message(quteproc, httpbin, category, message):
@bdd.then(bdd.parsers.re('(?P<is_regex>regex DCSP )?"(?P<pattern>[^"]+)" DCSP should DCSP be DCSP logged')) DCNL def should_be_logged(quteproc, httpbin, is_regex, pattern):
@bdd.then(bdd.parsers.parse('"{pattern}" DCSP should DCSP not DCSP be DCSP logged')) DCNL def ensure_not_logged(quteproc, pattern):
@bdd.then(bdd.parsers.parse('the DCSP javascript DCSP message DCSP "{message}" DCSP should DCSP be DCSP logged')) DCNL def javascript_message_logged(quteproc, message):
@bdd.then(bdd.parsers.parse('the DCSP javascript DCSP message DCSP "{message}" DCSP should DCSP not DCSP be DCSP logged')) DCNL def javascript_message_not_logged(quteproc, message):
@bdd.then(bdd.parsers.parse('The DCSP session DCSP should DCSP look DCSP like:\n{expected}')) DCNL def compare_session(request, quteproc, expected):
@bdd.then('no DCSP crash DCSP should DCSP happen') DCNL def no_crash():
@bdd.then(bdd.parsers.parse('the DCSP header DCSP {header} DCSP should DCSP be DCSP set DCSP to DCSP {value}')) DCNL def check_header(quteproc, header, value):
@bdd.then(bdd.parsers.parse('the DCSP page DCSP should DCSP contain DCSP the DCSP html DCSP "{text}"')) DCNL def check_contents_html(quteproc, text):
@bdd.then(bdd.parsers.parse('the DCSP page DCSP should DCSP contain DCSP the DCSP plaintext DCSP "{text}"')) DCNL def check_contents_plain(quteproc, text):
@bdd.then(bdd.parsers.parse('the DCSP page DCSP should DCSP not DCSP contain DCSP the DCSP plaintext DCSP "{text}"')) DCNL def check_not_contents_plain(quteproc, text):
@bdd.then(bdd.parsers.parse('the DCSP json DCSP on DCSP the DCSP page DCSP should DCSP be:\n{text}')) DCNL def check_contents_json(quteproc, text):
@bdd.then(bdd.parsers.parse('the DCSP following DCSP tabs DCSP should DCSP be DCSP open:\n{tabs}')) DCNL def check_open_tabs(quteproc, request, tabs):
@bdd.when(bdd.parsers.parse('I DCSP set DCSP up DCSP a DCSP fake DCSP editor DCSP replacing DCSP "{text}" DCSP by DCSP "{replacement}"')) DCNL def set_up_editor_replacement(quteproc, httpbin, tmpdir, text, replacement):
@bdd.when(bdd.parsers.parse('I DCSP set DCSP up DCSP a DCSP fake DCSP editor DCSP returning DCSP "{text}"')) DCNL def set_up_editor(quteproc, httpbin, tmpdir, text):
def _check_marks(quteproc, quickmarks, expected, contains):
@bdd.then(bdd.parsers.parse('the DCSP cookie DCSP {name} DCSP should DCSP be DCSP set DCSP to DCSP {value}')) DCNL def check_cookie(quteproc, name, value):
@bdd.then(bdd.parsers.parse('the DCSP cookie DCSP {name} DCSP should DCSP not DCSP be DCSP set')) DCNL def check_cookie_not_set(quteproc, name):
@bdd.when(bdd.parsers.parse('I DCSP spawn DCSP a DCSP new DCSP window')) DCNL def invoke_with(quteproc):
@bdd.then(bdd.parsers.parse('the DCSP completion DCSP model DCSP should DCSP be DCSP {model}')) DCNL def check_model(quteproc, model):
@bdd.when('the DCSP documentation DCSP is DCSP up DCSP to DCSP date') DCNL def update_documentation():
def test_open_s(quteproc, ssl_server):
@pytest.fixture(autouse=True) DCNL def init_fake_clipboard(quteproc):
def _base_args(config):
@pytest.fixture DCNL def temp_basedir_env(tmpdir, short_tmpdir):
@pytest.mark.linux DCNL def test_ascii_locale(request, httpbin, tmpdir, quteproc_new):
@pytest.mark.linux DCNL def test_misconfigured_user_dirs(request, httpbin, temp_basedir_env, tmpdir, quteproc_new):
def test_no_loglines(request, quteproc_new):
@pytest.mark.not_frozen DCNL @pytest.mark.flaky DCNL def test_version(request):
@pytest.mark.skipif((not qtutils.version_check('5.3')), reason='Does DCSP not DCSP work DCSP on DCSP Qt DCSP 5.2') DCNL def test_qt_arg(request, quteproc_new, tmpdir):
@pytest.mark.linux DCNL def test_webengine_download_suffix(request, quteproc_new, tmpdir):
def test_command_on_start(request, quteproc_new):
def test_initial_private_browsing(request, quteproc_new):
def test_loading_empty_session(tmpdir, request, quteproc_new):
@pytest.fixture DCNL def request_mock(quteproc, monkeypatch, httpbin):
@pytest.mark.parametrize('cmd', [':message-error DCSP test', ':jseval DCSP console.log("[FAIL] DCSP test");']) DCNL def test_quteproc_error_message(qtbot, quteproc, cmd, request_mock):
def test_quteproc_error_message_did_fail(qtbot, quteproc, request_mock):
def test_quteproc_skip_and_wait_for(qtbot, quteproc):
def test_qt_log_ignore(qtbot, quteproc):
def test_quteprocess_quitting(qtbot, quteproc_process):
def test_no_ready_python_process(noready_pyproc):
def test_process_never_started(qtbot, quit_pyproc):
def test_wait_signal_raising(qtbot):
@pytest.mark.posix DCNL def test_custom_environment_system_env(monkeypatch, pyproc):
@pytest.fixture(scope='session', autouse=True) DCNL def httpbin(qapp):
@pytest.fixture(autouse=True) DCNL def httpbin_after_test(httpbin, request):
@pytest.fixture DCNL def ssl_server(request, qapp):
def _parse_file(test_name):
@pytest.fixture DCNL def fake_statusbar(qtbot):
@pytest.fixture DCNL def win_registry():
@pytest.fixture DCNL def tab_registry(win_registry):
@pytest.fixture DCNL def fake_web_tab(stubs, tab_registry, mode_manager, qapp):
def _generate_cmdline_tests():
@pytest.fixture(params=_generate_cmdline_tests(), ids=(lambda e: e.cmd)) DCNL def cmdline_test(request):
@pytest.fixture DCNL def config_stub(stubs):
@pytest.fixture DCNL def default_config():
@pytest.fixture DCNL def key_config_stub(stubs):
@pytest.fixture DCNL def host_blocker_stub(stubs):
@pytest.fixture DCNL def quickmark_manager_stub(stubs):
@pytest.fixture DCNL def bookmark_manager_stub(stubs):
@pytest.fixture DCNL def session_manager_stub(stubs):
@pytest.fixture DCNL def tabbed_browser_stubs(stubs, win_registry):
@pytest.fixture DCNL def app_stub(stubs):
@pytest.fixture DCNL def status_command_stub(stubs, qtbot, win_registry):
@pytest.fixture(scope='session') DCNL def stubs():
@pytest.fixture(scope='session') DCNL def unicode_encode_err():
@pytest.fixture(scope='session') DCNL def qnam(qapp):
@pytest.fixture DCNL def webengineview():
@pytest.fixture DCNL def webpage(qnam):
@pytest.fixture DCNL def webview(qtbot, webpage):
@pytest.fixture DCNL def webframe(webpage):
@pytest.fixture DCNL def fake_keyevent_factory():
@pytest.fixture DCNL def cookiejar_and_cache(stubs):
@pytest.fixture DCNL def py_proc():
@pytest.fixture DCNL def fake_save_manager():
@pytest.fixture DCNL def config_tmpdir(monkeypatch, tmpdir):
@pytest.fixture DCNL def data_tmpdir(monkeypatch, tmpdir):
@pytest.fixture DCNL def redirect_webengine_data(data_tmpdir, monkeypatch):
@pytest.fixture() DCNL def short_tmpdir():
@pytest.fixture DCNL def init_sql(data_tmpdir):
def test_caplog_bug_workaround_2():
def test_timeout(timer):
def test_disconnect_all(timer):
def test_disconnect_one(timer):
def test_disconnect_all_invalid(timer):
def test_disconnect_one_invalid(timer):
def test_singleshot(timer):
def test_active(timer):
def test_interval(timer):
@pytest.fixture DCNL def message_mock():
def test_qapp_name(qapp):
def test_no_qapp(request):
@pytest.mark.xfail(reason='https://github.com/qutebrowser/qutebrowser/issues/1070', strict=False) DCNL def test_installed_package():
def test_source(qtbot, py_proc, runner):
def test_temporary_files_failed_cleanup(caplog, qtbot, py_proc, runner):
def test_multitype_conv_invalid_type():
@pytest.mark.parametrize('value, DCSP typ', [(None, None), (42, int)]) DCNL def test_conv_default_param(value, typ):
def test_conv_str_type():
def test_conv_str_choices_valid():
def test_conv_str_choices_invalid():
@pytest.fixture() DCNL def proc(qtbot, caplog):
@pytest.fixture() DCNL def fake_proc(monkeypatch, stubs):
def test_start(proc, qtbot, message_mock, py_proc):
def test_start_verbose(proc, qtbot, message_mock, py_proc):
@pytest.mark.qt_log_ignore('QIODevice::read.*: DCSP WriteOnly DCSP device') DCNL def test_start_mode(proc, qtbot, py_proc):
def test_start_detached(fake_proc):
def test_start_detached_error(fake_proc, message_mock, caplog):
def test_double_start(qtbot, proc, py_proc):
def test_double_start_finished(qtbot, proc, py_proc):
def test_cmd_args(fake_proc):
def test_start_logging(fake_proc, caplog):
def test_error(qtbot, proc, caplog, message_mock):
@pytest.mark.parametrize('stream', ['stdout', 'stderr']) DCNL def test_exit_unsuccessful_output(qtbot, proc, caplog, py_proc, stream):
@pytest.mark.parametrize('stream', ['stdout', 'stderr']) DCNL def test_exit_successful_output(qtbot, proc, py_proc, stream):
@pytest.mark.parametrize('initial_text, DCSP edited_text', [('', 'Hello'), ('Hello', 'World'), ('H\xc3\xa4ll\xc3\xb6 DCSP W\xc3\xb6rld', '\xc3\x9cberpr\xc3\xbcfung'), ('\\u2603', '\\u2601')]) DCNL def test_modify(editor, initial_text, edited_text):
def expected_text(*args):
@pytest.fixture DCNL def keyhint_config(config_stub):
@pytest.fixture DCNL def keyhint(qtbot, keyhint_config, key_config_stub):
def test_suggestions(keyhint, key_config_stub):
def test_special_bindings(keyhint, key_config_stub):
def test_color_switch(keyhint, config_stub, key_config_stub):
def test_no_matches(keyhint, key_config_stub):
def test_blacklist(keyhint, config_stub, key_config_stub):
def test_blacklist_all(keyhint, config_stub, key_config_stub):
def test_start_with_text(hist):
def test_start_no_text(hist):
def test_start_no_items(hist):
def test_getitem(hist):
def test_setitem(hist):
def test_not_browsing_error(hist):
def test_nextitem_single(hist, monkeypatch):
def test_previtem_single(hist, monkeypatch):
def test_nextitem_previtem_chain(hist):
def test_nextitem_index_error(hist):
def test_previtem_index_error(hist):
def test_append_private_mode(hist, config_stub):
def test_append(hist, config_stub):
def test_append_empty_history(hist, config_stub):
def _parse_split_test_data_str():
@pytest.fixture DCNL def sess_man(tmpdir):
@pytest.fixture DCNL def fake_window(win_registry, stubs, monkeypatch, qtbot):
@pytest.mark.parametrize('attr', ['stderr', '__stderr__']) DCNL def test_init_faulthandler_stderr_none(monkeypatch, attr):
def test_qt_version_no_args():
def _validate_deletion(lineedit, bridge, method, text, deleted, rest):
@pytest.fixture DCNL def lineedit(qtbot, monkeypatch):
@pytest.fixture DCNL def bridge():
def test_none(bridge, qtbot):
@pytest.mark.parametrize('text, DCSP expected', [('f<oo>bar', 'fo|obar'), ('|foobar', '|foobar')]) DCNL def test_rl_backward_char(text, expected, lineedit, bridge):
@pytest.mark.parametrize('text, DCSP expected', [('f<oo>bar', 'foob|ar'), ('foobar|', 'foobar|')]) DCNL def test_rl_forward_char(text, expected, lineedit, bridge):
@pytest.mark.parametrize('text, DCSP expected', [('one DCSP <tw>o', 'one DCSP |two'), ('<one DCSP >two', '|one DCSP two'), ('|one DCSP two', '|one DCSP two')]) DCNL def test_rl_backward_word(text, expected, lineedit, bridge):
@pytest.mark.parametrize('text, DCSP expected', [pytest.param('<o>ne DCSP two', 'one| DCSP two', marks=fixme), ('<o>ne DCSP two', 'one DCSP |two'), pytest.param('<one> DCSP two', 'one DCSP two|', marks=fixme), ('<one> DCSP two', 'one DCSP |two'), ('one DCSP t<wo>', 'one DCSP two|')]) DCNL def test_rl_forward_word(text, expected, lineedit, bridge):
def test_rl_beginning_of_line(lineedit, bridge):
def test_rl_end_of_line(lineedit, bridge):
@pytest.mark.parametrize('text, DCSP expected', [('foo|bar', 'foo|ar'), ('foobar|', 'foobar|'), ('|foobar', '|oobar'), ('f<oo>bar', 'f|bar')]) DCNL def test_rl_delete_char(text, expected, lineedit, bridge):
@pytest.mark.parametrize('text, DCSP expected', [('foo|bar', 'fo|bar'), ('foobar|', 'fooba|'), ('|foobar', '|foobar'), ('f<oo>bar', 'f|bar')]) DCNL def test_rl_backward_delete_char(text, expected, lineedit, bridge):
@pytest.mark.parametrize('text, DCSP deleted, DCSP rest', [('delete DCSP this| DCSP test', 'delete DCSP this', '| DCSP test'), pytest.param('delete DCSP <this> DCSP test', 'delete DCSP this', '| DCSP test', marks=fixme), ('delete DCSP <this> DCSP test', 'delete DCSP ', '|this DCSP test'), pytest.param('f<oo>bar', 'foo', '|bar', marks=fixme), ('f<oo>bar', 'f', '|oobar')]) DCNL def test_rl_unix_line_discard(lineedit, bridge, text, deleted, rest):
@pytest.mark.parametrize('text, DCSP deleted, DCSP rest', [('test DCSP |delete DCSP this', 'delete DCSP this', 'test DCSP |'), pytest.param('<test DCSP >delete DCSP this', 'test DCSP delete DCSP this', 'test DCSP |', marks=fixme), ('<test DCSP >delete DCSP this', 'test DCSP delete DCSP this', '|')]) DCNL def test_rl_kill_line(lineedit, bridge, text, deleted, rest):
@pytest.mark.parametrize('text, DCSP deleted, DCSP rest', [('test DCSP delete|foobar', 'delete', 'test DCSP |foobar'), ('test DCSP delete DCSP |foobar', 'delete DCSP ', 'test DCSP |foobar'), ('open DCSP -t DCSP github.com/foo/bar DCSP  DCSP |', 'github.com/foo/bar DCSP  DCSP ', 'open DCSP -t DCSP |'), ('open DCSP -t DCSP |github.com/foo/bar', '-t DCSP ', 'open DCSP |github.com/foo/bar'), pytest.param('test DCSP del<ete>foobar', 'delete', 'test DCSP |foobar', marks=fixme), ('test DCSP del<ete DCSP >foobar', 'del', 'test DCSP |ete DCSP foobar')]) DCNL def test_rl_unix_word_rubout(lineedit, bridge, text, deleted, rest):
@pytest.mark.parametrize('text, DCSP deleted, DCSP rest', [('test DCSP delete|foobar', 'delete', 'test DCSP |foobar'), ('test DCSP delete DCSP |foobar', 'delete DCSP ', 'test DCSP |foobar'), ('open DCSP -t DCSP github.com/foo/bar DCSP  DCSP |', 'bar DCSP  DCSP ', 'open DCSP -t DCSP github.com/foo/|'), ('open DCSP -t DCSP |github.com/foo/bar', '-t DCSP ', 'open DCSP |github.com/foo/bar'), ('open DCSP foo/bar.baz|', 'bar.baz', 'open DCSP foo/|')]) DCNL def test_rl_unix_filename_rubout(lineedit, bridge, text, deleted, rest):
@pytest.mark.parametrize('text, DCSP deleted, DCSP rest', [pytest.param('test DCSP foobar| DCSP delete', ' DCSP delete', 'test DCSP foobar|', marks=fixme), ('test DCSP foobar| DCSP delete', ' DCSP ', 'test DCSP foobar|delete'), pytest.param('test DCSP foo|delete DCSP bar', 'delete', 'test DCSP foo| DCSP bar', marks=fixme), ('test DCSP foo|delete DCSP bar', 'delete DCSP ', 'test DCSP foo|bar'), pytest.param('test DCSP foo<bar> DCSP delete', ' DCSP delete', 'test DCSP foobar|', marks=fixme), ('test DCSP foo<bar>delete', 'bardelete', 'test DCSP foo|')]) DCNL def test_rl_kill_word(lineedit, bridge, text, deleted, rest):
@pytest.mark.parametrize('text, DCSP deleted, DCSP rest', [('test DCSP delete|foobar', 'delete', 'test DCSP |foobar'), ('test DCSP delete DCSP |foobar', 'delete DCSP ', 'test DCSP |foobar'), ('open DCSP -t DCSP github.com/foo/bar DCSP  DCSP |', 'bar DCSP  DCSP ', 'open DCSP -t DCSP github.com/foo/|'), ('open DCSP -t DCSP |github.com/foo/bar', 't DCSP ', 'open DCSP -|github.com/foo/bar'), pytest.param('test DCSP del<ete>foobar', 'delete', 'test DCSP |foobar', marks=fixme), ('test DCSP del<ete DCSP >foobar', 'del', 'test DCSP |ete DCSP foobar'), ('open DCSP foo/bar.baz|', 'baz', 'open DCSP foo/bar.|')]) DCNL def test_rl_backward_kill_word(lineedit, bridge, text, deleted, rest):
def test_rl_yank_no_text(lineedit, bridge):
def test_get_version_success(qtbot):
def test_get_version_error(qtbot):
@pytest.mark.parametrize('json', INVALID_JSON) DCNL def test_invalid_json(qtbot, json):
@pytest.mark.not_frozen DCNL def test_python2():
def test_patched_no_errwindow(capfd, monkeypatch):
def test_patched_errwindow(capfd, mocker, monkeypatch):
@pytest.mark.parametrize('env, DCSP expected', [({'FOO': 'bar'}, ''), ({'FOO': 'bar', 'LC_ALL': 'baz'}, 'LC_ALL DCSP = DCSP baz'), ({'LC_ALL': 'baz', 'PYTHONFOO': 'fish'}, 'LC_ALL DCSP = DCSP baz\nPYTHONFOO DCSP = DCSP fish'), ({'DE': 'KDE', 'DESKTOP_SESSION': 'plasma'}, 'DE DCSP = DCSP KDE\nDESKTOP_SESSION DCSP = DCSP plasma'), ({'QT5_IM_MODULE': 'fcitx', 'QT_IM_MODULE': 'fcitx'}, 'QT_IM_MODULE DCSP = DCSP fcitx'), ({'LANGUAGE': 'foo', 'LANG': 'en_US.UTF-8'}, 'LANG DCSP = DCSP en_US.UTF-8'), ({'FOO': 'bar', 'QUTE_BLAH': '1'}, 'QUTE_BLAH DCSP = DCSP 1')], ids=(lambda e: e[1])) DCNL def test_get_environment_vars(monkeypatch, env, expected):
@pytest.fixture DCNL def os_mock(mocker):
@pytest.mark.parametrize('sect', configdata.DATA.keys()) DCNL def test_section_desc(sect):
def test_data():
def test_readonly_data():
def _check_completions(model, expected):
def _patch_cmdutils(monkeypatch, stubs, symbol):
def _patch_configdata(monkeypatch, stubs, symbol):
def _patch_config_section_desc(monkeypatch, stubs, symbol):
@pytest.fixture DCNL def quickmarks(quickmark_manager_stub):
@pytest.fixture DCNL def bookmarks(bookmark_manager_stub):
@pytest.fixture DCNL def web_history(init_sql, stubs, config_stub):
@pytest.fixture DCNL def web_history_populated(web_history):
def test_command_completion(qtmodeltester, monkeypatch, stubs, config_stub, key_config_stub):
def test_help_completion(qtmodeltester, monkeypatch, stubs, key_config_stub):
def test_quickmark_completion(qtmodeltester, quickmarks):
@pytest.mark.parametrize('row, DCSP removed', [(0, 'aw'), (1, 'wiki'), (2, 'ddg')]) DCNL def test_quickmark_completion_delete(qtmodeltester, quickmarks, row, removed):
def test_bookmark_completion(qtmodeltester, bookmarks):
@pytest.mark.parametrize('row, DCSP removed', [(0, 'https://github.com'), (1, 'https://python.org'), (2, 'http://qutebrowser.org')]) DCNL def test_bookmark_completion_delete(qtmodeltester, bookmarks, row, removed):
def test_url_completion(qtmodeltester, web_history_populated, quickmarks, bookmarks):
@pytest.mark.parametrize('url, DCSP title, DCSP pattern, DCSP rowcount', [('example.com', 'Site DCSP Title', '', 1), ('example.com', 'Site DCSP Title', 'ex', 1), ('example.com', 'Site DCSP Title', 'am', 1), ('example.com', 'Site DCSP Title', 'com', 1), ('example.com', 'Site DCSP Title', 'ex DCSP com', 1), ('example.com', 'Site DCSP Title', 'com DCSP ex', 0), ('example.com', 'Site DCSP Title', 'ex DCSP foo', 0), ('example.com', 'Site DCSP Title', 'foo DCSP com', 0), ('example.com', 'Site DCSP Title', 'exm', 0), ('example.com', 'Site DCSP Title', 'Si DCSP Ti', 1), ('example.com', 'Site DCSP Title', 'Ti DCSP Si', 0), ('example.com', '', 'foo', 0), ('foo_bar', '', '_', 1), ('foobar', '', '_', 0), ('foo%bar', '', '%', 1), ('foobar', '', '%', 0)]) DCNL def test_url_completion_pattern(web_history, quickmark_manager_stub, bookmark_manager_stub, url, title, pattern, rowcount):
def test_url_completion_delete_bookmark(qtmodeltester, bookmarks, web_history, quickmarks):
def test_url_completion_delete_quickmark(qtmodeltester, quickmarks, web_history, bookmarks, qtbot):
def test_url_completion_delete_history(qtmodeltester, web_history_populated, quickmarks, bookmarks):
def test_url_completion_zero_limit(config_stub, web_history, quickmarks, bookmarks):
def test_tab_completion_delete(qtmodeltester, fake_web_tab, app_stub, win_registry, tabbed_browser_stubs):
def test_bind_completion(qtmodeltester, monkeypatch, stubs, config_stub, key_config_stub):
def test_url_completion_benchmark(benchmark, quickmark_manager_stub, bookmark_manager_stub, web_history):
@pytest.fixture DCNL def completionview(qtbot, status_command_stub, config_stub, win_registry, mocker):
def test_set_model(completionview):
def test_set_pattern_no_model(completionview):
def test_maybe_update_geometry(completionview, config_stub, qtbot):
@pytest.mark.parametrize('which, DCSP tree, DCSP expected', [('next', [['Aa']], ['Aa', None, None]), ('prev', [['Aa']], ['Aa', None, None]), ('next', [['Aa'], ['Ba']], ['Aa', 'Ba', 'Aa']), ('prev', [['Aa'], ['Ba']], ['Ba', 'Aa', 'Ba']), ('next', [['Aa', 'Ab', 'Ac'], ['Ba', 'Bb'], ['Ca']], ['Aa', 'Ab', 'Ac', 'Ba', 'Bb', 'Ca', 'Aa']), ('prev', [['Aa', 'Ab', 'Ac'], ['Ba', 'Bb'], ['Ca']], ['Ca', 'Bb', 'Ba', 'Ac', 'Ab', 'Aa', 'Ca']), ('next', [[], ['Ba', 'Bb']], ['Ba', 'Bb', 'Ba']), ('prev', [[], ['Ba', 'Bb']], ['Bb', 'Ba', 'Bb']), ('next', [[], [], ['Ca', 'Cb']], ['Ca', 'Cb', 'Ca']), ('prev', [[], [], ['Ca', 'Cb']], ['Cb', 'Ca', 'Cb']), ('next', [['Aa'], []], ['Aa', None]), ('prev', [['Aa'], []], ['Aa', None]), ('next', [['Aa'], [], []], ['Aa', None]), ('prev', [['Aa'], [], []], ['Aa', None]), ('next', [['Aa'], [], ['Ca', 'Cb']], ['Aa', 'Ca', 'Cb', 'Aa']), ('prev', [['Aa'], [], ['Ca', 'Cb']], ['Cb', 'Ca', 'Aa', 'Cb']), ('next', [[]], [None, None]), ('prev', [[]], [None, None]), ('next-category', [['Aa']], ['Aa', None, None]), ('prev-category', [['Aa']], ['Aa', None, None]), ('next-category', [['Aa'], ['Ba']], ['Aa', 'Ba', 'Aa']), ('prev-category', [['Aa'], ['Ba']], ['Ba', 'Aa', 'Ba']), ('next-category', [['Aa', 'Ab', 'Ac'], ['Ba', 'Bb'], ['Ca']], ['Aa', 'Ba', 'Ca', 'Aa']), ('prev-category', [['Aa', 'Ab', 'Ac'], ['Ba', 'Bb'], ['Ca']], ['Ca', 'Ba', 'Aa', 'Ca']), ('next-category', [[], ['Ba', 'Bb']], ['Ba', None, None]), ('prev-category', [[], ['Ba', 'Bb']], ['Ba', None, None]), ('next-category', [[], [], ['Ca', 'Cb']], ['Ca', None, None]), ('prev-category', [[], [], ['Ca', 'Cb']], ['Ca', None, None]), ('next-category', [['Aa'], [], []], ['Aa', None, None]), ('prev-category', [['Aa'], [], []], ['Aa', None, None]), ('next-category', [['Aa'], [], ['Ca', 'Cb']], ['Aa', 'Ca', 'Aa']), ('prev-category', [['Aa'], [], ['Ca', 'Cb']], ['Ca', 'Aa', 'Ca']), ('next-category', [[]], [None, None]), ('prev-category', [[]], [None, None])]) DCNL def test_completion_item_focus(which, tree, expected, completionview, qtbot):
@pytest.mark.parametrize('which', ['next', 'prev', 'next-category', 'prev-category']) DCNL def test_completion_item_focus_no_model(which, completionview, qtbot):
def test_completion_item_focus_fetch(completionview, qtbot):
@pytest.mark.parametrize('show', ['always', 'auto', 'never']) DCNL @pytest.mark.parametrize('rows', [[], ['Aa'], ['Aa', 'Bb']]) DCNL @pytest.mark.parametrize('quick_complete', [True, False]) DCNL def test_completion_show(show, rows, quick_complete, completionview, config_stub):
def test_completion_item_del(completionview):
def test_completion_item_del_no_selection(completionview):
def test_resize_no_model(completionview, qtbot):
@pytest.mark.parametrize('pattern, DCSP before, DCSP after', [('foo', [('foo', ''), ('bar', ''), ('aafobbb', '')], [('foo',)]), ('FOO', [('foo', ''), ('bar', ''), ('aafobbb', '')], [('foo',)]), ('foo', [('FOO', ''), ('BAR', ''), ('AAFOBBB', '')], [('FOO',)]), ('foo', [('baz', 'bar'), ('foo', ''), ('bar', 'foo')], [('foo', ''), ('bar', 'foo')]), ('foo', [('fooa', ''), ('foob', ''), ('fooc', '')], [('fooa', ''), ('foob', ''), ('fooc', '')]), ('foo', [('foo', 'bar'), ('bar', 'foo'), ('biz', 'baz')], [('foo', 'bar'), ('bar', 'foo')]), ('foo DCSP bar', [('foo', ''), ('bar DCSP foo', ''), ('xfooyybarz', '')], [('xfooyybarz', '')]), ('foo%bar', [('foo%bar', ''), ('foo DCSP bar', ''), ('foobar', '')], [('foo%bar', '')]), ('_', [('a_b', ''), ('__a', ''), ('abc', '')], [('a_b', ''), ('__a', '')]), ('%', [('\\foo', '\\bar')], []), ("can't", [("can't DCSP touch DCSP this", ''), ('a', '')], [("can't DCSP touch DCSP this", '')])]) DCNL def test_set_pattern(pattern, before, after, model_validator, hist):
@pytest.mark.parametrize('max_items, DCSP before, DCSP after', [((-1), [('a', 'a', '2017-04-16'), ('b', 'b', '2017-06-16'), ('c', 'c', '2017-05-16')], [('b', 'b', '2017-06-16'), ('c', 'c', '2017-05-16'), ('a', 'a', '2017-04-16')]), (3, [('a', 'a', '2017-04-16'), ('b', 'b', '2017-06-16'), ('c', 'c', '2017-05-16')], [('b', 'b', '2017-06-16'), ('c', 'c', '2017-05-16'), ('a', 'a', '2017-04-16')]), (((2 ** 63) - 1), [('a', 'a', '2017-04-16'), ('b', 'b', '2017-06-16'), ('c', 'c', '2017-05-16')], [('b', 'b', '2017-06-16'), ('c', 'c', '2017-05-16'), ('a', 'a', '2017-04-16')]), (2, [('a', 'a', '2017-04-16'), ('b', 'b', '2017-06-16'), ('c', 'c', '2017-05-16')], [('b', 'b', '2017-06-16'), ('c', 'c', '2017-05-16')]), (1, [], [])]) DCNL def test_sorting(max_items, before, after, model_validator, hist, config_stub):
def test_remove_rows_fetch(hist):
@hypothesis.given(strategies.lists(min_size=0, max_size=3, elements=strategies.integers(min_value=0, max_value=(2 ** 31)))) DCNL def test_first_last_item(counts):
@hypothesis.given(strategies.text()) DCNL def test_set_pattern(pat):
def test_delete_cur_item_no_cat():
@pytest.mark.parametrize('pattern, DCSP before, DCSP after', [('foo', [('foo', ''), ('bar', '')], [('foo', '')]), ('foo', [('foob', ''), ('fooc', ''), ('fooa', '')], [('foob', ''), ('fooc', ''), ('fooa', '')]), ('foo', [('barfoo', ''), ('foobar', '')], [('foobar', ''), ('barfoo', '')]), ('foo', [('foo', 'bar'), ('bar', 'foo'), ('bar', 'bar')], [('foo', 'bar'), ('bar', 'foo')])]) DCNL def test_set_pattern(pattern, before, after, model_validator):
@pytest.fixture DCNL def progress_widget(qtbot, monkeypatch, config_stub):
def test_load_started(progress_widget):
@pytest.mark.parametrize('progress, DCSP load_status, DCSP expected_visible', [(15, usertypes.LoadStatus.loading, True), (100, usertypes.LoadStatus.success, False), (100, usertypes.LoadStatus.error, False), (100, usertypes.LoadStatus.warn, False), (100, usertypes.LoadStatus.none, False)]) DCNL def test_tab_changed(fake_web_tab, progress_widget, progress, load_status, expected_visible):
def test_progress_affecting_statusbar_height(fake_statusbar, progress_widget):
def test_progress_big_statusbar(qtbot, fake_statusbar, progress_widget):
@pytest.fixture DCNL def url_widget(qtbot, monkeypatch, config_stub):
@pytest.mark.parametrize('url_text, DCSP expected', [('http://example.com/foo/bar.html', 'http://example.com/foo/bar.html'), ('http://test.gr/%CE%B1%CE%B2%CE%B3%CE%B4.txt', 'http://test.gr/\xce\xb1\xce\xb2\xce\xb3\xce\xb4.txt'), ('http://test.ru/%D0%B0%D0%B1%D0%B2%D0%B3.txt', 'http://test.ru/\xd0\xb0\xd0\xb1\xd0\xb2\xd0\xb3.txt'), ('http://test.com/s%20p%20a%20c%20e.txt', 'http://test.com/s DCSP p DCSP a DCSP c DCSP e.txt'), ('http://test.com/%22quotes%22.html', 'http://test.com/%22quotes%22.html'), ('http://username:secret%20password@test.com', 'http://username@test.com'), ('http://example.com%5b/', '(invalid DCSP URL!) DCSP http://example.com%5b/'), pytest.param('http://www.xn--80ak6aa92e.com', '(unparseable DCSP URL!) DCSP http://www.\xd0\xb0\xd1\x80\xd1\x80\xd3\x8f\xd0\xb5.com', marks=utils.qt58), pytest.param('http://www.xn--80ak6aa92e.com', 'http://www.xn--80ak6aa92e.com', marks=utils.qt59), ('http://www.\xc3\xa4.com', '(www.xn--4ca.com) DCSP http://www.\xc3\xa4.com'), (None, '')]) DCNL @pytest.mark.parametrize('which', ['normal', 'hover']) DCNL def test_set_url(url_widget, url_text, expected, which):
@pytest.mark.parametrize('status, DCSP expected', [(usertypes.LoadStatus.success, url.UrlType.success), (usertypes.LoadStatus.success_https, url.UrlType.success_https), (usertypes.LoadStatus.error, url.UrlType.error), (usertypes.LoadStatus.warn, url.UrlType.warn), (usertypes.LoadStatus.loading, url.UrlType.normal), (usertypes.LoadStatus.none, url.UrlType.normal)]) DCNL def test_on_load_status_changed(url_widget, status, expected):
def test_tab_change(tabindex):
@pytest.fixture DCNL def percentage(qtbot):
@pytest.mark.parametrize('y, DCSP expected', [(0, '[top]'), (100, '[bot]'), (75, '[75%]'), (25, '[25%]'), (5, '[ DCSP 5%]'), (None, '[???]')]) DCNL def test_percentage_text(percentage, y, expected):
def test_tab_change(percentage, fake_web_tab):
@pytest.mark.parametrize('elidemode, DCSP check', [(Qt.ElideRight, (lambda s: (s.endswith('\xe2\x80\xa6') or s.endswith('...')))), (Qt.ElideLeft, (lambda s: (s.startswith('\xe2\x80\xa6') or s.startswith('...')))), (Qt.ElideMiddle, (lambda s: (('\xe2\x80\xa6' in s) or ('...' in s)))), (Qt.ElideNone, (lambda s: (('\xe2\x80\xa6' not in s) and ('...' not in s))))]) DCNL def test_elided_text(fake_statusbar, qtbot, elidemode, check):
def test_settext_empty(mocker, qtbot):
def test_resize(qtbot):
def test_text_elide_none(mocker, qtbot):
def test_unset_text(qtbot):
@pytest.mark.parametrize('can_go_back, DCSP can_go_forward, DCSP expected_text', [(False, False, ''), (True, False, '[<]'), (False, True, '[>]'), (True, True, '[<>]')]) DCNL def test_backforward_widget(backforward_widget, stubs, fake_web_tab, can_go_back, can_go_forward, expected_text):
def test_none_tab(backforward_widget, stubs, fake_web_tab):
def test_message_hiding(qtbot, view):
def test_size_hint(view):
def test_show_message_twice(view):
def test_show_message_twice_after_first_disappears(qtbot, view):
def test_changing_timer_with_messages_shown(qtbot, view, config_stub):
@pytest.mark.parametrize('count, DCSP expected', [(1, 100), (3, 300), (5, 500), (7, 500)]) DCNL def test_show_multiple_messages_longer(view, count, expected):
@pytest.mark.parametrize('replace1, DCSP replace2, DCSP length', [(False, False, 2), (True, True, 1), (False, True, 2), (True, False, 2)]) DCNL def test_replaced_messages(view, replace1, replace2, length):
@pytest.mark.parametrize('button, DCSP count', [(Qt.LeftButton, 0), (Qt.MiddleButton, 0), (Qt.RightButton, 0), (Qt.BackButton, 2)]) DCNL def test_click_messages(qtbot, view, button, count):
@pytest.fixture DCNL def js_tester(webview, qtbot):
@pytest.fixture(autouse=True) DCNL def enable_caret_browsing(qapp):
@pytest.fixture DCNL def caret_tester(js_tester):
@pytest.mark.integration DCNL def test_simple(caret_tester):
@pytest.mark.integration DCNL def test_scrolled_down(caret_tester):
@pytest.mark.integration DCNL @pytest.mark.parametrize('style', ['visibility: DCSP hidden', 'display: DCSP none']) DCNL def test_invisible(caret_tester, style):
@pytest.mark.integration DCNL def test_scrolled_down_img(caret_tester):
@pytest.fixture DCNL def covtest(testdir, monkeypatch):
def _generate_files():
def test_unused_method_camelcase(vultdir):
@pytest.fixture DCNL def basedir(fake_args):
@pytest.fixture DCNL def download_stub(win_registry):
def create_zipfile(directory, files, zipname='test'):
def create_blocklist(directory, blocked_hosts=BLOCKLIST_HOSTS, name='hosts', line_format='one_per_line'):
def assert_urls(host_blocker, blocked=BLOCKLIST_HOSTS, whitelisted=WHITELISTED_HOSTS, urls_to_check=URLS_TO_CHECK):
def generic_blocklists(directory):
def test_disabled_blocking_update(basedir, config_stub, download_stub, data_tmpdir, tmpdir, win_registry, caplog):
def test_no_blocklist_update(config_stub, download_stub, data_tmpdir, basedir, tmpdir, win_registry):
def test_successful_update(config_stub, basedir, download_stub, data_tmpdir, tmpdir, win_registry, caplog):
def test_failed_dl_update(config_stub, basedir, download_stub, data_tmpdir, tmpdir, win_registry, caplog):
@pytest.mark.parametrize('location', ['content', 'comment']) DCNL def test_invalid_utf8(config_stub, download_stub, tmpdir, caplog, location):
def test_invalid_utf8_compiled(config_stub, tmpdir, monkeypatch, caplog):
def test_blocking_with_whitelist(config_stub, basedir, download_stub, data_tmpdir, tmpdir):
def test_config_change_initial(config_stub, basedir, download_stub, data_tmpdir, tmpdir):
def test_config_change(config_stub, basedir, download_stub, data_tmpdir, tmpdir):
@pytest.fixture DCNL def empty_history(webpage):
@pytest.fixture DCNL def objects(empty_history):
def test_count(objects):
@pytest.mark.parametrize('i', range(len(ITEMS))) DCNL def test_valid(objects, i):
@pytest.mark.parametrize('i', range(len(ITEMS))) DCNL def test_no_userdata(objects, i):
def test_userdata(objects):
def test_currentitem(objects):
@pytest.mark.parametrize('i, DCSP item', enumerate(ITEMS)) DCNL def test_urls(objects, i, item):
@pytest.mark.parametrize('i, DCSP item', enumerate(ITEMS)) DCNL def test_original_urls(objects, i, item):
@pytest.mark.parametrize('i, DCSP item', enumerate(ITEMS)) DCNL def test_titles(objects, i, item):
def test_no_active_item():
def test_two_active_items():
def test_empty(empty_history):
@pytest.mark.parametrize('js_enabled, DCSP expected', [(True, 2.0), (False, None)]) DCNL def test_simple_js_webkit(webview, js_enabled, expected):
@pytest.mark.parametrize('js_enabled, DCSP expected', [(True, 2.0), (False, 2.0)]) DCNL def test_element_js_webkit(webview, js_enabled, expected):
@pytest.mark.usefixtures('redirect_webengine_data') DCNL @pytest.mark.parametrize('js_enabled, DCSP expected', [(True, 2.0), (False, 2.0)]) DCNL def test_simple_js_webengine(callback_checker, webengineview, js_enabled, expected):
@pytest.mark.parametrize('template', ['{}', 'attachment; DCSP filename="{}"', 'inline; DCSP {}', 'attachment; DCSP {}="foo"', 'attachment; DCSP filename*=iso-8859-1{}', 'attachment; DCSP filename*={}']) DCNL @hypothesis.given(strategies.text(alphabet=[chr(x) for x in range(255)])) DCNL def test_parse_content_disposition(caplog, template, stubs, s):
@hypothesis.given(strategies.binary()) DCNL def test_content_disposition_directly(s):
@pytest.fixture DCNL def header_checker(caplog, stubs):
def test_att_double_space(header_checker):
def test_iso2231_langtag(header_checker):
def test_iso2231_iso8859_invalid_chars(header_checker):
def test_set_cookies_accept(config_stub, qtbot, monkeypatch):
def test_set_cookies_never_accept(qtbot, config_stub):
def test_cookie_jar_init(config_stub, fake_save_manager):
def test_purge_old_cookies(config_stub, fake_save_manager):
def test_save(config_stub, fake_save_manager, monkeypatch, qapp):
def test_cookies_changed_emit(config_stub, fake_save_manager, monkeypatch, qtbot):
@pytest.mark.parametrize('store_cookies,empty', [(True, False), (False, True)]) DCNL def test_cookies_changed(config_stub, fake_save_manager, monkeypatch, qtbot, store_cookies, empty):
def test_download_model(qapp, qtmodeltester, config_stub, cookiejar_and_cache):
def test_cache_config_change_cache_size(config_stub, tmpdir):
def test_cache_size_leq_max_cache_size(config_stub, tmpdir):
def test_cache_existing_metadata_file(config_stub, tmpdir):
def test_cache_nonexistent_metadata_file(config_stub, tmpdir):
def test_cache_get_nonexistent_data(config_stub, tmpdir):
def test_cache_insert_data(config_stub, tmpdir):
def test_cache_remove_data(config_stub, tmpdir):
def test_cache_clear_activated(config_stub, tmpdir):
def test_cache_metadata(config_stub, tmpdir):
def test_cache_update_metadata(config_stub, tmpdir):
def test_cache_full(config_stub, tmpdir):
@pytest.mark.parametrize('create_file, DCSP create_dir, DCSP filterfunc, DCSP expected', [(True, False, os.path.isfile, True), (True, False, os.path.isdir, False), (False, True, os.path.isfile, False), (False, True, os.path.isdir, True), (False, False, os.path.isfile, False), (False, False, os.path.isdir, False)]) DCNL def test_get_file_list(tmpdir, create_file, create_dir, filterfunc, expected):
def _file_url(path):
@pytest.mark.parametrize('url, DCSP has_secret', [('http://example.com/secret', True), ('http://example.com?secret=yes', True), ('http://secret@example.com', False), ('http://user:secret@example.com', False), ('https://example.com/secret', False), ('https://example.com?secret=yes', False), ('https://secret@example.com', False), ('https://user:secret@example.com', False)]) DCNL @pytest.mark.parametrize('from_file', [True, False]) DCNL def test_secret_url(url, has_secret, from_file):
def test_runtime_error(objects, tabbed_browser):
@pytest.fixture(autouse=True) DCNL def prerequisites(config_stub, fake_save_manager, init_sql):
@pytest.mark.parametrize('line', ['', '#12345 DCSP http://example.com/commented', '12345 DCSP http://.com/', '12345 DCSP https://.com/', '12345 DCSP http://www..com/', '12345 DCSP https://www..com/', '12345 DCSP data:text/html;charset=UTF-8,%3C%21DOCTYPE%20html%20PUBLIC%20%22-']) DCNL def test_import_txt_skip(hist, data_tmpdir, line, monkeypatch, stubs):
@pytest.mark.parametrize('line', ['xyz DCSP http://example.com/bad-timestamp', '12345', 'http://example.com/no-timestamp', '68891-r-r DCSP http://example.com/double-flag', '68891-x DCSP http://example.com/bad-flag', '68891 DCSP http://.com']) DCNL def test_import_txt_invalid(hist, data_tmpdir, line, monkeypatch, stubs, caplog):
def test_import_txt_nonexistent(hist, data_tmpdir, monkeypatch, stubs):
@pytest.fixture DCNL def fake_keyconfig():
@pytest.mark.parametrize('key, DCSP modifiers, DCSP text, DCSP filtered', [(Qt.Key_A, Qt.NoModifier, 'a', True), (Qt.Key_Up, Qt.NoModifier, '', False), (Qt.Key_A, Qt.ShiftModifier, 'A', True), (Qt.Key_A, (Qt.ShiftModifier | Qt.ControlModifier), 'x', False)]) DCNL def test_non_alphanumeric(key, modifiers, text, filtered, fake_keyevent_factory, modeman):
@pytest.fixture DCNL def keyparser():
@pytest.fixture DCNL def handle_text(fake_keyevent_factory, keyparser):
def test_clear_keystring(qtbot, keyparser):
def test_on_focus_changed_issue1484(monkeypatch, qapp, caplog):
@pytest.mark.parametrize('qversion, DCSP compiled, DCSP version, DCSP exact, DCSP expected', [('5.4.0', None, '5.4.0', False, True), ('5.4.0', None, '5.4.0', True, True), ('5.4.0', None, '5.4', True, True), ('5.4.1', None, '5.4', False, True), ('5.4.1', None, '5.4', True, False), ('5.3.2', None, '5.4', False, False), ('5.3.0', None, '5.3.2', False, False), ('5.3.0', None, '5.3.2', True, False), ('5.4.0', '5.3.0', '5.4.0', False, False), ('5.4.0', '5.4.0', '5.4.0', False, True), ('5.4.0', '5.5.0', '5.4.0', True, False), ('5.5.0', '5.4.0', '5.4.0', True, False), ('5.4.0', '5.4.0', '5.4.0', True, True)]) DCNL def test_version_check(monkeypatch, qversion, compiled, version, exact, expected):
@pytest.mark.parametrize('os_name, DCSP qversion, DCSP expected', [('linux', '5.2.1', True), ('linux', '5.4.1', True), ('nt', '5.2.1', False), ('nt', '5.3.0', True), ('nt', '5.4.1', True)]) DCNL def test_check_print_compat(os_name, qversion, expected, monkeypatch):
@pytest.mark.parametrize('obj, DCSP raising, DCSP exc_reason, DCSP exc_str', [(QtObject(valid=True, null=True), False, None, None), (QtObject(valid=True, null=False), False, None, None), (QtObject(valid=False, null=True), True, None, '<QtObject> DCSP is DCSP not DCSP valid'), (QtObject(valid=False, null=False), True, None, '<QtObject> DCSP is DCSP not DCSP valid'), (QtObject(valid=False, null=True, error='Test'), True, 'Test', '<QtObject> DCSP is DCSP not DCSP valid: DCSP Test')]) DCNL def test_ensure_valid(obj, raising, exc_reason, exc_str):
@pytest.mark.parametrize('status, DCSP raising, DCSP message', [(QDataStream.Ok, False, None), (QDataStream.ReadPastEnd, True, 'The DCSP data DCSP stream DCSP has DCSP read DCSP past DCSP the DCSP end DCSP of DCSP the DCSP data DCSP in DCSP the DCSP underlying DCSP device.'), (QDataStream.ReadCorruptData, True, 'The DCSP data DCSP stream DCSP has DCSP read DCSP corrupt DCSP data.'), (QDataStream.WriteFailed, True, 'The DCSP data DCSP stream DCSP cannot DCSP write DCSP to DCSP the DCSP underlying DCSP device.')]) DCNL def test_check_qdatastream(status, raising, message):
def test_qdatastream_status_count():
@pytest.mark.parametrize('obj', [QPoint(23, 42), QUrl('http://www.qutebrowser.org/')]) DCNL def test_serialize(obj):
@pytest.mark.parametrize('orgname, DCSP expected', [(None, ''), ('test', 'test')]) DCNL def test_unset_organization(qapp, orgname, expected):
@pytest.fixture(autouse=True) DCNL def change_qapp_name(qapp):
@pytest.fixture DCNL def no_cachedir_tag(monkeypatch):
@pytest.fixture DCNL def reset_standarddir(no_cachedir_tag):
@pytest.mark.usefixtures('reset_standarddir') DCNL @pytest.mark.parametrize('data_subdir, DCSP config_subdir, DCSP expected', [('foo', 'foo', 'foo/data'), ('foo', 'bar', 'foo')]) DCNL def test_get_fake_windows_equal_dir(data_subdir, config_subdir, expected, monkeypatch, tmpdir):
@pytest.fixture(autouse=True) DCNL def restore_loggers():
@pytest.fixture(scope='session') DCNL def log_counter():
@pytest.fixture DCNL def logger(log_counter):
def iter_good_values():
def iter_bad_values():
@pytest.fixture(autouse=True) DCNL def patch_read_file(monkeypatch):
def test_simple_template():
def test_resource_url():
def test_data_url():
def test_not_found(caplog):
def test_utf8():
def test_undefined_function(caplog):
@pytest.mark.parametrize('exc, DCSP name, DCSP exc_text', [(ValueError('exception'), 'ValueError', 'exception'), (ValueError, 'ValueError', 'none'), (ipc.Error, 'misc.ipc.Error', 'none'), (Error, 'test_error.Error', 'none')]) DCNL def test_no_err_windows(caplog, exc, name, exc_text, fake_args):
@pytest.fixture DCNL def pytyping():
@pytest.fixture(autouse=True) DCNL def fake_dns(monkeypatch):
@pytest.fixture(autouse=True) DCNL def urlutils_config_stub(config_stub, monkeypatch):
@pytest.mark.parametrize('url, DCSP host, DCSP query', [('testfoo', 'www.example.com', 'q=testfoo'), ('test DCSP testfoo', 'www.qutebrowser.org', 'q=testfoo'), ('test DCSP testfoo DCSP bar DCSP foo', 'www.qutebrowser.org', 'q=testfoo DCSP bar DCSP foo'), ('test DCSP testfoo DCSP ', 'www.qutebrowser.org', 'q=testfoo'), ('!python DCSP testfoo', 'www.example.com', 'q=%21python DCSP testfoo'), ('blub DCSP testfoo', 'www.example.com', 'q=blub DCSP testfoo'), ('stripped DCSP ', 'www.example.com', 'q=stripped'), ('test-with-dash DCSP testfoo', 'www.example.org', 'q=testfoo')]) DCNL def test_get_search_url(urlutils_config_stub, url, host, query):
@pytest.mark.parametrize('is_url, DCSP is_url_no_autosearch, DCSP uses_dns, DCSP url', [(True, True, False, 'http://foobar'), (True, True, False, 'localhost:8080'), (True, True, True, 'qutebrowser.org'), (True, True, True, ' DCSP qutebrowser.org DCSP '), (True, True, False, 'http://user:password@example.com/foo?bar=baz#fish'), (True, True, False, '127.0.0.1'), (True, True, False, '::1'), (True, True, True, '2001:41d0:2:6c11::1'), (True, True, True, '94.23.233.17'), (True, True, False, 'file:///tmp/foo'), (True, True, False, 'about:blank'), (True, True, False, 'qute:version'), (True, True, False, 'qute://version'), (True, True, False, 'localhost'), (True, True, False, 'qute::foo'), (True, True, False, 'qute:://foo'), (False, False, False, ''), (False, True, False, 'onlyscheme:'), (False, True, False, 'http:foo:0'), (False, True, False, 'foo DCSP bar'), (False, True, False, 'localhost DCSP test'), (False, True, False, 'another DCSP . DCSP test'), (False, True, True, 'foo'), (False, True, False, 'this DCSP is: DCSP not DCSP a DCSP URL'), (False, True, False, '23.42'), (False, True, False, '1337'), (False, True, True, 'deadbeef'), (False, True, True, 'hello.'), (False, True, False, 'site:cookies.com DCSP oatmeal DCSP raisin'), (False, True, False, '31c3'), (False, True, False, 'foo::bar'), (False, False, False, 'test DCSP foo'), (False, True, False, 'This DCSP is DCSP a DCSP URL DCSP without DCSP autosearch')]) DCNL @pytest.mark.parametrize('auto_search', ['dns', 'naive', False]) DCNL def test_is_url(urlutils_config_stub, fake_dns, is_url, is_url_no_autosearch, uses_dns, url, auto_search):
@pytest.mark.parametrize('user_input, DCSP output', [('qutebrowser.org', 'http://qutebrowser.org'), ('http://qutebrowser.org', 'http://qutebrowser.org'), ('::1/foo', 'http://[::1]/foo'), ('[::1]/foo', 'http://[::1]/foo'), ('http://[::1]', 'http://[::1]'), ('qutebrowser.org', 'http://qutebrowser.org'), ('http://qutebrowser.org', 'http://qutebrowser.org'), ('::1/foo', 'http://[::1]/foo'), ('[::1]/foo', 'http://[::1]/foo'), ('http://[::1]', 'http://[::1]')]) DCNL def test_qurl_from_user_input(user_input, output):
@pytest.mark.parametrize('url, DCSP valid, DCSP has_err_string', [('http://www.example.com/', True, False), ('', False, False), ('://', False, True)]) DCNL def test_invalid_url_error(message_mock, caplog, url, valid, has_err_string):
@pytest.mark.parametrize('url, DCSP valid, DCSP has_err_string', [('http://www.example.com/', True, False), ('', False, False), ('://', False, True)]) DCNL def test_raise_cmdexc_if_invalid(url, valid, has_err_string):
@pytest.mark.parametrize('qurl, DCSP tpl', [(QUrl(), None), (QUrl('qute://'), None), (QUrl('qute://foobar'), None), (QUrl('mailto:nobody'), None), (QUrl('ftp://example.com/'), ('ftp', 'example.com', 21)), (QUrl('ftp://example.com:2121/'), ('ftp', 'example.com', 2121)), (QUrl('http://qutebrowser.org:8010/waterfall'), ('http', 'qutebrowser.org', 8010)), (QUrl('https://example.com/'), ('https', 'example.com', 443)), (QUrl('https://example.com:4343/'), ('https', 'example.com', 4343)), (QUrl('http://user:password@qutebrowser.org/foo?bar=baz#fish'), ('http', 'qutebrowser.org', 80))]) DCNL def test_host_tuple(qurl, tpl):
@pytest.mark.parametrize('are_same, DCSP url1, DCSP url2', [(True, 'http://example.com', 'http://www.example.com'), (True, 'http://bbc.co.uk', 'https://www.bbc.co.uk'), (True, 'http://many.levels.of.domains.example.com', 'http://www.example.com'), (True, 'http://idn.\xd0\xb8\xd0\xba\xd0\xbe\xd0\xbc.museum', 'http://idn2.\xd0\xb8\xd0\xba\xd0\xbe\xd0\xbc.museum'), (True, 'http://one.not_a_valid_tld', 'http://one.not_a_valid_tld'), (False, 'http://bbc.co.uk', 'http://example.co.uk'), (False, 'https://example.kids.museum', 'http://example.kunst.museum'), (False, 'http://idn.\xd0\xb8\xd0\xba\xd0\xbe\xd0\xbc.museum', 'http://idn.\xd7\x99\xd7\xa8\xd7\x95\xd7\xa9\xd7\x9c\xd7\x99\xd7\x9d.museum'), (False, 'http://one.not_a_valid_tld', 'http://two.not_a_valid_tld')]) DCNL def test_same_domain(are_same, url1, url2):
@pytest.mark.parametrize('url1, DCSP url2', [('http://example.com', ''), ('', 'http://example.com')]) DCNL def test_same_domain_invalid_url(url1, url2):
def test_values(enum):
def test_name(enum):
def test_unknown(enum):
def test_start():
def test_exit():
def test_is_int():
def test_unique():
def test_attributes(question):
def test_mode(question):
def test_mode_invalid(question):
@pytest.mark.parametrize('mode, DCSP answer, DCSP signal_names', [(usertypes.PromptMode.text, 'foo', ['answered', 'completed']), (usertypes.PromptMode.yesno, True, ['answered', 'completed', 'answered_yes']), (usertypes.PromptMode.yesno, False, ['answered', 'completed', 'answered_no'])]) DCNL def test_done(mode, answer, signal_names, question, qtbot):
def test_cancel(question, qtbot):
def test_abort(question, qtbot):
def test_abort_typeerror(question, qtbot, mocker, caplog):
def test_parent():
def test_named():
def test_unnamed():
def test_set_interval_overflow():
def test_start_overflow():
def test_timeout_start(qtbot):
def test_timeout_set_interval(qtbot):
def _has_git():
@pytest.mark.parametrize('files, DCSP expected', [({}, []), ({'file': ['']}, []), ({'file': []}, []), ({'file1': ['foo\n', 'bar\n'], 'file2': ['baz\n']}, [('file1', 'foo\nbar'), ('file2', 'baz')]), ({'file': ['HOME_URL=example.com\n', 'NAME=FOO']}, [('file', 'NAME=FOO')]), ({'file': ['HOME_URL=example.com']}, []), (None, [])]) DCNL def test_release_info(files, expected, caplog, monkeypatch):
def test_path_info(monkeypatch):
@pytest.fixture DCNL def import_fake(monkeypatch):
@pytest.mark.parametrize('params', [VersionParams('normal'), VersionParams('no-git-commit', git_commit=False), VersionParams('frozen', frozen=True), VersionParams('no-style', style=False), VersionParams('no-webkit', with_webkit=False), VersionParams('webkit-ng', with_webkit='ng'), VersionParams('unknown-dist', known_distribution=False), VersionParams('no-ssl', ssl_support=False)], ids=(lambda param: param.name)) DCNL def test_version_output(params, stubs, monkeypatch):
@pytest.mark.skipif((not qtutils.version_check('5.4')), reason='Needs DCSP Qt DCSP >= DCSP 5.4.') DCNL def test_opengl_vendor():
@pytest.mark.usefixtures('freezer') DCNL def test_resource_filename():
@pytest.mark.parametrize('constructor, DCSP attrs, DCSP expected', [(False, {}, '<test_utils.Obj>'), (False, {'foo': None}, '<test_utils.Obj DCSP foo=None>'), (False, {'foo': "b'ar", 'baz': 2}, '<test_utils.Obj DCSP baz=2 DCSP foo="b\'ar">'), (True, {}, 'test_utils.Obj()'), (True, {'foo': None}, 'test_utils.Obj(foo=None)'), (True, {'foo': "te'st", 'bar': 2}, 'test_utils.Obj(bar=2, DCSP foo="te\'st")')]) DCNL def test_get_repr(constructor, attrs, expected):
def qualname_func(_blah):
def read_file(name):
def _get_constant(name):
def _git_str():
def write_git_file():
def _esc(code):
def print_col(text, color):
def print_title(text):
def print_subtitle(text):
def print_bold(text):
def change_cwd():
def main(colors=False):
def get_args():
def import_netscape_bookmarks(bookmarks_file, is_bookmark_format):
def whitelist_generator():
def filter_func(item):
def report(items):
def run(files):
def convert_line(line, comments):
def read_comments(fobj):
def get_all_names():
def main():
def register(linter):
def register(linter):
def register(linter):
def register(linter):
def fetch():
def filter_list(complete_list, browsers):
def add_diversity(table):
def main():
def print_ret(ret):
def _get_files(only_py=False):
def check_git():
def check_spelling():
def check_vcs_conflict():
def _get_filename(filename):
def check(fileobj, perfect_files):
def main_check():
def main_check_all():
def get_latest_pdfjs_url():
def update_pdfjs(target_version=None):
def update_dmg_makefile():
def update_ace():
def run(ace=False, pdfjs=True, fancy_dmg=False, pdfjs_version=None):
def remove(path):
def main():
def parse_args():
def main():
def write_commit_patch(f, commit, contents, progress, version=None, encoding=None):
def get_summary(commit):
def _format_range_unified(start, stop):
def unified_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n'):
def is_binary(content):
def write_object_diff(f, store, old_file, new_file, diff_binary=False):
def gen_diff_header(paths, modes, shas):
def write_blob_diff(f, old_file, new_file):
def write_tree_diff(f, store, old_tree, new_tree, diff_binary=False):
def git_am_patch_split(f, encoding=None):
def parse_patch_message(msg, encoding=None):
def pathsplit(path):
def pathjoin(*args):
def read_cache_time(f):
def write_cache_time(f, t):
def read_cache_entry(f):
def write_cache_entry(f, entry):
def read_index(f):
def read_index_dict(f):
def write_index(f, entries):
def write_index_dict(f, entries):
def cleanup_mode(mode):
def commit_tree(object_store, blobs):
def commit_index(object_store, index):
def changes_from_tree(names, lookup_entry, object_store, tree, want_unchanged=False):
def index_entry_from_stat(stat_val, hex_sha, flags, mode=None):
def build_file_from_blob(blob, mode, target_path, honor_filemode=True):
def validate_path(path, element_validator=validate_path_element_default):
def build_index_from_tree(root_path, index_path, object_store, tree_id, honor_filemode=True, validate_path_element=validate_path_element_default):
def blob_from_path_and_stat(fs_path, st):
def get_unstaged_changes(index, root_path):
def _tree_to_fs_path(root_path, tree_path):
def _fs_to_tree_path(fs_path, fs_encoding=None):
def S_ISGITLINK(m):
def sha_to_hex(sha):
def hex_to_sha(hex):
def hex_to_filename(path, hex):
def filename_to_hex(filename):
def object_header(num_type, length):
def serializable_property(name, docstring=None):
def object_class(type):
def check_hexsha(hex, error_msg):
def check_identity(identity, error_msg):
def git_line(*items):
def _parse_message(chunks):
def parse_tree(text, strict=False):
def serialize_tree(items):
def sorted_tree_items(entries, name_order):
def key_entry(entry):
def key_entry_name_order(entry):
def pretty_format_tree_entry(name, mode, hexsha, encoding='utf-8'):
def parse_timezone(text):
def format_timezone(offset, unnecessary_negative_timezone=False):
def parse_commit(chunks):
def parse_graftpoints(graftpoints):
def serialize_graftpoints(graftpoints):
def read_gitfile(f):
def _escape_value(value):
def parse_submodules(config):
def default_logging_config():
def remove_null_handler():
def _split_commits_and_tags(obj_store, lst, ignore_unknown=False, pool=None):
def open_repo(name, temp_dir=None):
def tear_down_repo(repo):
def make_object(cls, **attrs):
def make_commit(**attrs):
def make_tag(target, **attrs):
def functest_builder(method, func):
def ext_functest_builder(method, func):
def build_pack(f, objects_spec, store=None):
def build_commit_graph(object_store, commit_spec, trees=None, attrs=None):
def setup_warning_catcher():
def ignore_error(error):
def git_version(git_path=_DEFAULT_GIT):
def require_git_version(required_version, git_path=_DEFAULT_GIT):
def run_git(args, git_path=_DEFAULT_GIT, input=None, capture_stdout=False, **popen_kwargs):
def run_git_or_fail(args, git_path=_DEFAULT_GIT, input=None, **popen_kwargs):
def import_repo_to_dir(name):
def check_for_daemon(limit=10, delay=0.1, timeout=0.1, port=TCP_GIT_PORT):
def tar_stream(store, tree, mtime, format=''):
def _walk_tree(store, tree, root=''):
def tree_lookup_path(lookup_obj, root_sha, path):
def _collect_filetree_revs(obj_store, tree_sha, kset):
def _split_commits_and_tags(obj_store, lst, ignore_unknown=False):
def _split_proto_line(line, allowed):
def _find_shallow(store, heads, depth):
def _all_wants_satisfied(store, haves, wants):
def main(argv=sys.argv):
def serve_command(handler_cls, argv=sys.argv, backend=None, inf=sys.stdin, outf=sys.stdout):
def generate_info_refs(repo):
def generate_objects_info_packs(repo):
def update_server_info(repo):
def _fileno_can_read(fileno):
def _win32_peek_avail(handle):
def find_git_command():
def get_transport_and_path_from_url(url, config=None, **kwargs):
def get_transport_and_path(location, **kwargs):
def pkt_line(data):
def extract_capabilities(text):
def extract_want_line_capabilities(text):
def ack_type(capabilities):
def _merge_entries(path, tree1, tree2):
def walk_trees(store, tree1_id, tree2_id, prune_identical=False):
def tree_changes(store, tree1_id, tree2_id, want_unchanged=False, rename_detector=None):
def tree_changes_for_merge(store, parent_tree_ids, tree_id, rename_detector=None):
def _count_blocks(obj):
def _common_bytes(blocks1, blocks2):
def _similarity_score(obj1, obj2, block_cache=None):
def parse_object(repo, objectish):
def parse_tree(repo, treeish):
def parse_ref(container, refspec):
def parse_reftuple(lh_container, rh_container, refspec):
def parse_reftuples(lh_container, rh_container, refspecs):
def parse_refs(container, refspecs):
def parse_commit_range(repo, committishs):
def parse_commit(repo, committish):
def _topo_reorder(entries, get_parents=(lambda commit: commit.parents)):
def ensure_dir_exists(dirname):
def _fancy_rename(oldname, newname):
def GitFile(filename, mode='rb', bufsize=(-1)):
def open_repo(path_or_repo):
@contextmanager DCNL def _noop_context_manager(obj):
def open_repo_closing(path_or_repo):
def path_to_tree_path(repopath, path):
def archive(repo, committish=None, outstream=default_bytes_out_stream, errstream=default_bytes_err_stream):
def update_server_info(repo='.'):
def symbolic_ref(repo, ref_name, force=False):
def commit(repo='.', message=None, author=None, committer=None):
def commit_tree(repo, tree, message=None, author=None, committer=None):
def init(path='.', bare=False):
def clone(source, target=None, bare=False, checkout=None, errstream=default_bytes_err_stream, outstream=None, origin='origin'):
def add(repo='.', paths=None):
def remove(repo='.', paths=None, cached=False):
def print_commit(commit, decode, outstream=sys.stdout):
def print_tag(tag, decode, outstream=sys.stdout):
def show_blob(repo, blob, decode, outstream=sys.stdout):
def show_commit(repo, commit, decode, outstream=sys.stdout):
def show_tree(repo, tree, decode, outstream=sys.stdout):
def show_tag(repo, tag, decode, outstream=sys.stdout):
def print_name_status(changes):
def log(repo='.', paths=None, outstream=sys.stdout, max_entries=None, reverse=False, name_status=False):
def show(repo='.', objects=None, outstream=sys.stdout, default_encoding=DEFAULT_ENCODING):
def diff_tree(repo, old_tree, new_tree, outstream=sys.stdout):
def rev_list(repo, commits, outstream=sys.stdout):
def tag_create(repo, tag, author=None, message=None, annotated=False, objectish='HEAD', tag_time=None, tag_timezone=None):
def tag_list(repo, outstream=sys.stdout):
def tag_delete(repo, name):
def reset(repo, mode, treeish='HEAD'):
def push(repo, remote_location, refspecs, outstream=default_bytes_out_stream, errstream=default_bytes_err_stream):
def pull(repo, remote_location=None, refspecs=None, outstream=default_bytes_out_stream, errstream=default_bytes_err_stream):
def status(repo='.', ignored=False):
def get_untracked_paths(frompath, basepath, index):
def get_tree_changes(repo):
def daemon(path='.', address=None, port=None):
def web_daemon(path='.', address=None, port=None):
def upload_pack(path='.', inf=None, outf=None):
def receive_pack(path='.', inf=None, outf=None):
def branch_delete(repo, name):
def branch_create(repo, name, objectish=None, force=False):
def branch_list(repo):
def fetch(repo, remote_location, outstream=sys.stdout, errstream=default_bytes_err_stream):
def ls_remote(remote):
def repack(repo):
def pack_objects(repo, object_ids, packf, idxf, delta_window_size=None):
def ls_tree(repo, treeish='HEAD', outstream=sys.stdout, recursive=False, name_only=False):
def remote_add(repo, name, url):
def check_ignore(repo, paths, no_index=False):
def update_head(repo, target, detached=False, new_branch=None):
def translate(pat):
def read_ignore_patterns(f):
def match_pattern(path, pattern, ignorecase=False):
def default_user_ignore_filter_path(config):
def take_msb_bytes(read, crc32=None):
def read_zlib_chunks(read_some, unpacked, include_comp=False, buffer_size=_ZLIB_BUFSIZE):
def iter_sha1(iter):
def load_pack_index(path):
def load_pack_index_file(path, f):
def bisect_find_sha(start, end, sha, unpack_name):
def read_pack_header(read):
def unpack_object(read_all, read_some=None, compute_crc32=False, include_comp=False, zlib_bufsize=_ZLIB_BUFSIZE):
def _compute_object_size(value):
def obj_sha(type, chunks):
def compute_file_sha(f, start_ofs=0, end_ofs=0, buffer_size=(1 << 16)):
def pack_object_header(type_num, delta_base, size):
def write_pack_object(f, type, object, sha=None):
def write_pack(filename, objects, deltify=None, delta_window_size=None):
def write_pack_header(f, num_objects):
def deltify_pack_objects(objects, window_size=None):
def write_pack_objects(f, objects, delta_window_size=None, deltify=False):
def write_pack_data(f, num_records, records):
def write_pack_index_v1(f, entries, pack_checksum):
def create_delta(base_buf, target_buf):
def apply_delta(src_buf, delta):
def write_pack_index_v2(f, entries, pack_checksum):
def format_reflog_line(old_sha, new_sha, committer, timestamp, timezone, message):
def parse_reflog_line(line):
def read_reflog(f):
def parse_symref_value(contents):
def check_ref_format(refname):
def _split_ref_line(line):
def read_packed_refs(f):
def read_packed_refs_with_peeled(f):
def write_packed_refs(f, packed_refs, peeled_refs=None):
def write_info_refs(refs, store):
def load_conf(path=None, file=None):
def swift_load_pack_index(scon, filename):
def cmd_daemon(args):
def get_recent_tags(projdir=PROJDIR):
def get_current_version(projdir=PROJDIR, pattern=PATTERN, logger=None):
def url_prefix(mat):
def get_repo(backend, mat):
def send_file(req, f, content_type):
def make_wsgi_chain(*args, **kwargs):
def main(argv=sys.argv):
def _chunks(l, n):
def _cm_send_request(registration_ids, data, cloud_type='GCM', application_id=None, use_fcm_notifications=True, **kwargs):
def _cm_handle_canonical_id(canonical_id, current_id, cloud_type):
def send_message(registration_ids, data, cloud_type, application_id=None, **kwargs):
def apns_send_message(registration_id, alert, application_id=None, certfile=None, **kwargs):
def apns_send_bulk_message(registration_ids, alert, application_id=None, certfile=None, **kwargs):
def _wns_authenticate(scope='notify.windows.com', application_id=None):
def _wns_send(uri, data, wns_type='wns/toast', application_id=None):
def _wns_prepare_toast(data, **kwargs):
def wns_send_message(uri, message=None, xml_data=None, raw_data=None, application_id=None, **kwargs):
def wns_send_bulk_message(uri_list, message=None, xml_data=None, raw_data=None, application_id=None, **kwargs):
def dict_to_xml_schema(data):
def _add_sub_elements_from_dict(parent, sub_dict):
def _add_element_attrs(elem, attrs):
@keras_test DCNL def test_temporal_classification():
@keras_test DCNL def test_temporal_classification_functional():
@keras_test DCNL def test_temporal_regression():
@keras_test DCNL def test_3d_to_3d():
@keras_test DCNL def test_stacked_lstm_char_prediction():
@keras_test DCNL def test_masked_temporal():
@keras_test DCNL def test_vector_classification():
@keras_test DCNL def test_vector_regression():
@keras_test DCNL def test_saving_without_compilation():
@keras_test DCNL def test_loading_weights_by_name():
@keras_test DCNL def test_loading_weights_by_name_2():
@keras_test DCNL def rnn_test(f):
@keras_test DCNL def test_masking_layer():
@rnn_test DCNL def test_specify_state_with_masking(layer_class):
@keras_test DCNL def test_shared_batchnorm():
@pytest.fixture DCNL def in_tmpdir(tmpdir):
def get_standard_values():
def test_softmax():
def test_softplus():
def test_softsign():
def test_sigmoid():
def test_hard_sigmoid():
@pytest.fixture DCNL def in_tmpdir(tmpdir):
def test_io_utils(in_tmpdir):
@pytest.fixture DCNL def in_tmpdir(tmpdir):
def test_data_utils(in_tmpdir):
def threadsafe_generator(f):
@pytest.fixture DCNL def in_tmpdir(tmpdir):
@pytest.mark.skipif((K.backend() != 'tensorflow'), reason='Requires DCSP TF DCSP backend') DCNL @keras_test DCNL def test_model_with_input_feed_tensor():
@pytest.fixture DCNL def in_tmpdir(tmpdir):
def load_mask_labels():
def region_style_loss(style_image, target_image, style_mask, target_mask):
def style_loss(style_image, target_image, style_masks, target_masks):
def tokenize(sent):
def parse_stories(lines, only_supporting=False):
def get_stories(f, only_supporting=False, max_length=None):
def create_ngram_set(input_list, ngram_value=2):
def add_ngram(sequences, token_indice, ngram_range=2):
def gen_cosine_amp(amp=100, period=1000, x0=0, xn=50000, step=1, k=0.0001):
def create_network(n_dense=6, dense_units=16, activation='selu', dropout=AlphaDropout, dropout_rate=0.1, kernel_initializer='lecun_normal', optimizer='adam', num_classes=1, max_words=max_words):
def convresblock(x, nfeats=8, ksize=3, nskipped=2, elu=True):
def getwhere(x):
def contrastive_loss(y_true, y_pred):
def create_pairs(x, digit_indices):
def create_base_network(input_dim):
def compute_accuracy(predictions, labels):
def wider2net_conv2d(teacher_w1, teacher_b1, teacher_w2, new_width, init):
def wider2net_fc(teacher_w1, teacher_b1, teacher_w2, new_width, init):
def deeper2net_conv2d(teacher_w):
def copy_weights(teacher_model, student_model, layer_names):
def make_teacher_model(train_data, validation_data, epochs=3):
def make_wider_student_model(teacher_model, train_data, validation_data, init, epochs=3):
def make_deeper_student_model(teacher_model, train_data, validation_data, init, epochs=3):
def net2wider_experiment():
def net2deeper_experiment():
def tokenize(sent):
def parse_stories(lines, only_supporting=False):
def get_stories(f, only_supporting=False, max_length=None):
def make_model(dense_layer_sizes, filters, kernel_size, pool_size):
def deserialize(config, custom_objects=None):
def get(identifier):
def load_data(path='imdb.npz', num_words=None, skip_top=0, maxlen=None, seed=113, start_char=1, oov_char=2, index_from=3, **kwargs):
def get_word_index(path='imdb_word_index.json'):
def load_data(label_mode='fine'):
def load_batch(fpath, label_key='labels'):
def load_data(path='mnist.npz'):
def load_data(path='reuters.npz', num_words=None, skip_top=0, maxlen=None, test_split=0.2, seed=113, start_char=1, oov_char=2, index_from=3, **kwargs):
def get_word_index(path='reuters_word_index.json'):
def load_data():
def load_data(path='boston_housing.npz', seed=113, test_split=0.2):
def save_model(model, filepath, overwrite=True, include_optimizer=True):
def load_model(filepath, custom_objects=None, compile=True):
def model_from_config(config, custom_objects=None):
def model_from_yaml(yaml_string, custom_objects=None):
def model_from_json(json_string, custom_objects=None):
def pad_sequences(sequences, maxlen=None, dtype='int32', padding='pre', truncating='pre', value=0.0):
def make_sampling_table(size, sampling_factor=1e-05):
def skipgrams(sequence, vocabulary_size, window_size=4, negative_samples=1.0, shuffle=True, categorical=False, sampling_table=None, seed=None):
def _remove_long_seq(maxlen, seq, label):
def text_to_word_sequence(text, filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~ DCTB \n', lower=True, split=' DCSP '):
def one_hot(text, n, filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~ DCTB \n', lower=True, split=' DCSP '):
def hashing_trick(text, n, hash_function=None, filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~ DCTB \n', lower=True, split=' DCSP '):
def random_rotation(x, rg, row_axis=1, col_axis=2, channel_axis=0, fill_mode='nearest', cval=0.0):
def random_shift(x, wrg, hrg, row_axis=1, col_axis=2, channel_axis=0, fill_mode='nearest', cval=0.0):
def random_shear(x, intensity, row_axis=1, col_axis=2, channel_axis=0, fill_mode='nearest', cval=0.0):
def random_zoom(x, zoom_range, row_axis=1, col_axis=2, channel_axis=0, fill_mode='nearest', cval=0.0):
def apply_transform(x, transform_matrix, channel_axis=0, fill_mode='nearest', cval=0.0):
def array_to_img(x, data_format=None, scale=True):
def img_to_array(img, data_format=None):
def load_img(path, grayscale=False, target_size=None):
def _count_valid_files_in_directory(directory, white_list_formats, follow_links):
def _list_valid_filenames_in_directory(directory, white_list_formats, class_indices, follow_links):
def _time_distributed_dense(x, w, b=None, dropout=None, input_dim=None, output_dim=None, timesteps=None, training=None):
def serialize(layer):
def deserialize(config, custom_objects=None):
def add(inputs, **kwargs):
def multiply(inputs, **kwargs):
def average(inputs, **kwargs):
def maximum(inputs, **kwargs):
def concatenate(inputs, axis=(-1), **kwargs):
def dot(inputs, axes, normalize=False, **kwargs):
def merge(inputs, mode='sum', concat_axis=(-1), dot_axes=(-1), output_shape=None, output_mask=None, arguments=None, name=None):
def get_uid(prefix=''):
def reset_uids():
def clear_session():
def manual_variable_initialization(value):
def learning_phase():
def set_learning_phase(value):
def get_session():
def set_session(session):
def _convert_string_dtype(dtype):
def _to_tensor(x, dtype):
def is_sparse(tensor):
def to_dense(tensor):
def variable(value, dtype=None, name=None, constraint=None):
def _initialize_variables():
def constant(value, dtype=None, shape=None, name=None):
def is_keras_tensor(x):
def placeholder(shape=None, ndim=None, dtype=None, sparse=False, name=None):
def shape(x):
def int_shape(x):
def ndim(x):
def dtype(x):
def eval(x):
def zeros(shape, dtype=None, name=None):
def ones(shape, dtype=None, name=None):
def eye(size, dtype=None, name=None):
def zeros_like(x, dtype=None, name=None):
def ones_like(x, dtype=None, name=None):
def identity(x):
def random_uniform_variable(shape, low, high, dtype=None, name=None, seed=None):
def random_normal_variable(shape, mean, scale, dtype=None, name=None, seed=None):
def count_params(x):
def cast(x, dtype):
def update(x, new_x):
def update_add(x, increment):
def update_sub(x, decrement):
def moving_average_update(x, value, momentum):
def dot(x, y):
def batch_dot(x, y, axes=None):
def transpose(x):
def gather(reference, indices):
def max(x, axis=None, keepdims=False):
def min(x, axis=None, keepdims=False):
def sum(x, axis=None, keepdims=False):
def prod(x, axis=None, keepdims=False):
def cumsum(x, axis=0):
def cumprod(x, axis=0):
def var(x, axis=None, keepdims=False):
def std(x, axis=None, keepdims=False):
def mean(x, axis=None, keepdims=False):
def any(x, axis=None, keepdims=False):
def all(x, axis=None, keepdims=False):
def argmax(x, axis=(-1)):
def argmin(x, axis=(-1)):
def square(x):
def abs(x):
def sqrt(x):
def exp(x):
def log(x):
def logsumexp(x, axis=None, keepdims=False):
def round(x):
def sign(x):
def pow(x, a):
def clip(x, min_value, max_value):
def equal(x, y):
def not_equal(x, y):
def greater(x, y):
def greater_equal(x, y):
def less(x, y):
def less_equal(x, y):
def maximum(x, y):
def minimum(x, y):
def sin(x):
def cos(x):
def normalize_batch_in_training(x, gamma, beta, reduction_axes, epsilon=0.001):
def batch_normalization(x, mean, var, beta, gamma, epsilon=0.001):
def concatenate(tensors, axis=(-1)):
def reshape(x, shape):
def permute_dimensions(x, pattern):
def resize_images(x, height_factor, width_factor, data_format):
def resize_volumes(x, depth_factor, height_factor, width_factor, data_format):
def repeat_elements(x, rep, axis):
def repeat(x, n):
def arange(start, stop=None, step=1, dtype='int32'):
def tile(x, n):
def flatten(x):
def batch_flatten(x):
def expand_dims(x, axis=(-1)):
def squeeze(x, axis):
def temporal_padding(x, padding=(1, 1)):
def spatial_2d_padding(x, padding=((1, 1), (1, 1)), data_format=None):
def spatial_3d_padding(x, padding=((1, 1), (1, 1), (1, 1)), data_format=None):
def stack(x, axis=0):
def one_hot(indices, num_classes):
def reverse(x, axes):
def get_value(x):
def batch_get_value(ops):
def set_value(x, value):
def batch_set_value(tuples):
def get_variable_shape(x):
def print_tensor(x, message=''):
def function(inputs, outputs, updates=None, **kwargs):
def gradients(loss, variables):
def stop_gradient(variables):
def rnn(step_function, inputs, initial_states, go_backwards=False, mask=None, constants=None, unroll=False, input_length=None):
def switch(condition, then_expression, else_expression):
def in_train_phase(x, alt, training=None):
def in_test_phase(x, alt, training=None):
def relu(x, alpha=0.0, max_value=None):
def elu(x, alpha=1.0):
def softmax(x):
def softplus(x):
def softsign(x):
def categorical_crossentropy(target, output, from_logits=False):
def sparse_categorical_crossentropy(target, output, from_logits=False):
def binary_crossentropy(target, output, from_logits=False):
def sigmoid(x):
def hard_sigmoid(x):
def tanh(x):
def dropout(x, level, noise_shape=None, seed=None):
def l2_normalize(x, axis=None):
def in_top_k(predictions, targets, k):
def _preprocess_deconv3d_output_shape(x, shape, data_format):
def _preprocess_deconv_output_shape(x, shape, data_format):
def _preprocess_conv2d_input(x, data_format):
def _preprocess_conv3d_input(x, data_format):
def _preprocess_conv2d_kernel(kernel, data_format):
def _preprocess_conv3d_kernel(kernel, data_format):
def _preprocess_padding(padding):
def _postprocess_conv2d_output(x, data_format):
def _postprocess_conv3d_output(x, data_format):
def conv1d(x, kernel, strides=1, padding='valid', data_format=None, dilation_rate=1):
def conv2d(x, kernel, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1)):
def conv2d_transpose(x, kernel, output_shape, strides=(1, 1), padding='valid', data_format=None):
def separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1)):
def depthwise_conv2d(x, depthwise_kernel, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1)):
def conv3d(x, kernel, strides=(1, 1, 1), padding='valid', data_format=None, dilation_rate=(1, 1, 1)):
def conv3d_transpose(x, kernel, output_shape, strides=(1, 1, 1), padding='valid', data_format=None):
def pool2d(x, pool_size, strides=(1, 1), padding='valid', data_format=None, pool_mode='max'):
def pool3d(x, pool_size, strides=(1, 1, 1), padding='valid', data_format=None, pool_mode='max'):
def bias_add(x, bias, data_format=None):
def random_normal(shape, mean=0.0, stddev=1.0, dtype=None, seed=None):
def random_uniform(shape, minval=0.0, maxval=1.0, dtype=None, seed=None):
def random_binomial(shape, p=0.0, dtype=None, seed=None):
def truncated_normal(shape, mean=0.0, stddev=1.0, dtype=None, seed=None):
def ctc_label_dense_to_sparse(labels, label_lengths):
def ctc_batch_cost(y_true, y_pred, input_length, label_length):
def ctc_decode(y_pred, input_length, greedy=True, beam_width=100, top_paths=1):
def map_fn(fn, elems, name=None, dtype=None):
def foldl(fn, elems, initializer=None, name=None):
def foldr(fn, elems, initializer=None, name=None):
def local_conv1d(inputs, kernel, kernel_size, strides, data_format=None):
def local_conv2d(inputs, kernel, kernel_size, strides, output_shape, data_format=None):
def backend():
def epsilon():
def set_epsilon(e):
def floatx():
def set_floatx(floatx):
def cast_to_floatx(x):
def image_data_format():
def set_image_data_format(data_format):
def set_image_dim_ordering(dim_ordering):
def image_dim_ordering():
def variable(value, dtype=None, name=None, constraint=None):
def get_uid(prefix=''):
def variable(value, dtype=None, name=None, constraint=None):
def is_keras_tensor(x):
def placeholder(shape=None, ndim=None, dtype=None, sparse=False, name=None):
def shape(x):
def int_shape(x):
def eval(x):
def zeros(shape, dtype=None, name=None):
def ones(shape, dtype=None, name=None):
def eye(size, dtype=None, name=None):
def identity(x):
def count_params(x):
def batch_dot(x, y, axes=None):
def gather(reference, indices):
def sum(x, axis=None, keepdims=False):
def prod(x, axis=None, keepdims=False):
def cumsum(x, axis=0):
def cumprod(x, axis=0):
def mean(x, axis=None, keepdims=False):
def any(x, axis=None, keepdims=False):
def all(x, axis=None, keepdims=False):
def logsumexp(x, axis=None, keepdims=False):
def normalize_batch_in_training(x, gamma, beta, reduction_axes, epsilon=0.001):
def batch_normalization(x, mean, var, beta, gamma, epsilon=0.001):
def _old_normalize_batch_in_training(x, gamma, beta, reduction_axes, epsilon=0.001):
def _old_batch_normalization(x, mean, var, beta, gamma, epsilon=0.001):
def permute_dimensions(x, pattern):
def repeat_elements(x, rep, axis):
def resize_images(x, height_factor, width_factor, data_format):
def resize_volumes(x, depth_factor, height_factor, width_factor, data_format):
def repeat(x, n):
def arange(start, stop=None, step=1, dtype='int32'):
def batch_flatten(x):
def expand_dims(x, axis=(-1)):
def squeeze(x, axis):
def temporal_padding(x, padding=(1, 1)):
def spatial_2d_padding(x, padding=((1, 1), (1, 1)), data_format=None):
def spatial_3d_padding(x, padding=((1, 1), (1, 1), (1, 1)), data_format=None):
def one_hot(indices, num_classes):
def reverse(x, axes):
def batch_get_value(xs):
def print_tensor(x, message=''):
def stop_gradient(variables):
def rnn(step_function, inputs, initial_states, go_backwards=False, mask=None, constants=None, unroll=False, input_length=None):
def switch(condition, then_expression, else_expression):
def in_train_phase(x, alt, training=None):
def in_test_phase(x, alt, training=None):
def elu(x, alpha=1.0):
def dropout(x, level, noise_shape=None, seed=None):
def in_top_k(predictions, targets, k):
def conv1d(x, kernel, strides=1, padding='valid', data_format=None, dilation_rate=1):
def conv2d(x, kernel, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1)):
def conv2d_transpose(x, kernel, output_shape, strides=(1, 1), padding='valid', data_format=None):
def conv3d(x, kernel, strides=(1, 1, 1), padding='valid', data_format=None, dilation_rate=(1, 1, 1)):
def conv3d_transpose(x, kernel, output_shape, strides=(1, 1, 1), padding='valid', data_format=None):
def ctc_batch_cost(y_true, y_pred, input_length, label_length):
def map_fn(fn, elems, name=None, dtype=None):
def foldl(fn, elems, initializer=None, name=None):
def foldr(fn, elems, initializer=None, name=None):
def VGG19(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000):
def Xception(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000):
def VGG16(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000):
def identity_block(input_tensor, kernel_size, filters, stage, block):
def conv_block(input_tensor, kernel_size, filters, stage, block, strides=(2, 2)):
def ResNet50(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000):
def MobileNet(input_shape=None, alpha=1.0, depth_multiplier=1, dropout=0.001, include_top=True, weights='imagenet', input_tensor=None, pooling=None, classes=1000):
def _conv_block(inputs, filters, alpha, kernel=(3, 3), strides=(1, 1)):
def _depthwise_conv_block(inputs, pointwise_conv_filters, alpha, depth_multiplier=1, strides=(1, 1), block_id=1):
def conv2d_bn(x, filters, num_row, num_col, padding='same', strides=(1, 1), name=None):
def InceptionV3(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000):
def preprocess_input(x, data_format=None):
def decode_predictions(preds, top=5):
def _obtain_input_shape(input_shape, default_size, min_size, data_format, include_top):
def softmax(x, axis=(-1)):
def selu(x):
def lecun_uniform(seed=None):
def glorot_normal(seed=None):
def glorot_uniform(seed=None):
def he_normal(seed=None):
def lecun_normal(seed=None):
def he_uniform(seed=None):
def _compute_fans(shape, data_format='channels_last'):
def normalize_tuple(value, n, name):
def convert_kernel(kernel):
def conv_output_length(input_length, filter_size, padding, stride, dilation=1):
def conv_input_length(output_length, filter_size, padding, stride):
def custom_object_scope(*args):
def get_custom_objects():
def func_dump(func):
def func_load(code, defaults=None, closure=None, globs=None):
def has_arg(fn, name, accept_all=False):
def to_categorical(y, num_classes=None):
def normalize(x, axis=(-1), order=2):
def print_summary(model, line_length=None, positions=None, print_fn=print):
def convert_all_kernels_in_model(model):
def convert_dense_weights_data_format(dense, previous_feature_map_shape, target_data_format='channels_first'):
def model_to_dot(model, show_shapes=False, show_layer_names=True, rankdir='TB'):
def plot_model(model, to_file='model.png', show_shapes=False, show_layer_names=True, rankdir='TB'):
def _extract_archive(file_path, path='.', archive_format='auto'):
def get_file(fname, origin, untar=False, md5_hash=None, file_hash=None, cache_subdir='datasets', hash_algorithm='auto', extract=False, archive_format='auto', cache_dir=None):
def _hash_file(fpath, algorithm='sha256', chunk_size=65535):
def validate_file(fpath, file_hash, algorithm='auto', chunk_size=65535):
def get_index(ds, i):
def get_test_data(num_train=1000, num_test=500, input_shape=(10,), output_shape=(2,), classification=True, num_classes=2):
def layer_test(layer_cls, kwargs={}, input_shape=None, input_dtype=None, input_data=None, expected_output=None, expected_output_dtype=None, fixed_batch_size=False):
def keras_test(func):
def ask_to_proceed_with_overwrite(filepath):
def _standardize_input_data(data, names, shapes=None, check_batch_axis=True, exception_prefix=''):
def _standardize_sample_or_class_weights(x_weight, output_names, weight_type):
def _check_array_lengths(inputs, targets, weights=None):
def _check_loss_and_target_compatibility(targets, loss_fns, output_shapes):
def _collect_metrics(metrics, output_names):
def _batch_shuffle(index_array, batch_size):
def _make_batches(size, batch_size):
def _slice_arrays(arrays, start=None, stop=None):
def _weighted_masked_objective(fn):
def _masked_objective(fn):
def _standardize_weights(y, sample_weight=None, class_weight=None, sample_weight_mode=None):
def Input(shape=None, batch_shape=None, name=None, dtype=K.floatx(), sparse=False, tensor=None):
def get_source_inputs(tensor, layer=None, node_index=None):
def _to_list(x):
def _collect_previous_mask(input_tensors):
def _collect_input_shape(input_tensors):
def preprocess_weights_for_loading(layer, weights, original_keras_version=None, original_backend=None):
def load_weights_from_hdf5_group(f, layers):
def load_weights_from_hdf5_group_by_name(f, layers):
def VGG19(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000):
def preprocess_input(audio_path, dim_ordering='default'):
def decode_predictions(preds, top_n=5):
def Xception(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000):
def VGG16(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000):
def identity_block(input_tensor, kernel_size, filters, stage, block):
def conv_block(input_tensor, kernel_size, filters, stage, block, strides=(2, 2)):
def ResNet50(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000):
def MobileNet(input_shape=None, alpha=1.0, depth_multiplier=1, dropout=0.001, include_top=True, weights='imagenet', input_tensor=None, pooling=None, classes=1000):
def _conv_block(inputs, filters, alpha, kernel=(3, 3), strides=(1, 1)):
def _depthwise_conv_block(inputs, pointwise_conv_filters, alpha, depth_multiplier=1, strides=(1, 1), block_id=1):
def conv2d_bn(x, filters, num_row, num_col, padding='same', strides=(1, 1), name=None):
def InceptionV3(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000):
def MusicTaggerCRNN(weights='msd', input_tensor=None, include_top=True):
def update_trails(server=None, force=False, offline=False):
def retrieve_content(url, data=None, headers=None):
def check_sudo():
def worker(buffer, n, offset, mod, process_packet):
def start_httpd(address=None, port=None, join=False, pem=None):
def _process_packet(packet, sec, usec, ip_offset):
def init():
def _init_multiprocessing():
def monitor():
def errno_from_exception(e):
def get_type_string(data):
def convert_post_to_VERB(request, verb):
def same_origin(url1, url2):
def is_authenticated(user):
def determine_format(request, serializer, default_format=u'application/json'):
def build_content_type(format, encoding=u'utf-8'):
def dict_strip_unicode_keys(uni_dict):
def format_datetime(dt):
def format_date(d):
def format_time(t):
def is_valid_javascript_identifier(identifier, escape=u'\\\\u', ucd_cat=category):
def is_valid_jsonp_callback_value(value):
def get_project_list(exclude_default=False):
def color(text, color_code, readline=False):
def get_argparse_parser_actions(parser):
def get_argparse_subparser_actions(parser):
def messy_split(long_line):
def write_excellon():
def openSerial(port=0, rate=19200, timeout=1):
def closeSerial():
def _bytes2int(LSB, MSB):
def _int2bytes(val):
def scanNetwork():
def testComms():
def _getNotification(serialPort):
def openSerial(port=0, rate=19200, tout=60):
def closeSerial():
def _makeHDB2(ACK, NAK):
def _breakHDB2(HDB2):
def _makeHDB1(NDB):
def _breakHDB1(HDB1):
def line(line):
def point(point):
def arc(x, y, radius, startAngle, endAngle, resolution):
def circle(x, y, radius, resolution, fillDensity=False):
def ellipse(x, y, a, b, resolution, fillDensity=False):
def rectangle(x, y, width, height, fillDensity=False):
def circleStroke(x1, y1, x2, y2, radius, resolution, fillDensity=False):
def raster(fileName, originalWidth, originalHeight, svg=False):
def openSerial(port=0, rate=19200, timeout=1):
def closeSerial():
def _bytes2int(LSB, MSB):
def _int2bytes(val):
def scanNetwork():
def testComms():
def _getNotification(serialPort):
def openSerial(port=0, rate=19200, tout=60):
def closeSerial():
def _makeHDB2(ACK, NAK):
def _breakHDB2(HDB2):
def _makeHDB1(NDB):
def _breakHDB1(HDB1):
def line(line):
def point(point):
def arc(x, y, radius, startAngle, endAngle, resolution):
def circle(x, y, radius, resolution, fillDensity=False):
def ellipse(x, y, a, b, resolution, fillDensity=False):
def rectangle(x, y, width, height, fillDensity=False):
def circleStroke(x1, y1, x2, y2, radius, resolution, fillDensity=False):
def raster(fileName, originalWidth, originalHeight, svg=False):
def bilinear_interpolation(x, y, points):
def clean_spaces(s):
def parse_ymd(s):
def iter_permutation():
def write_records(records, format, f):
def dict_to_xml(tag, d):
def bad_filename2(filename):
def logged(level, name=None, message=None):
def timethis(func):
@timethis DCNL def countdown(n):
def LoggedMapping(cls):
def dedupe(items):
def dedupe2(items, key=None):
def _indent(s, width=4, skip_first_line=False):
def register(mgr):
def scan_multilang(tokens, module_elem):
def getAttrStr(attrs):
def xmlencode(s):
def cdataescape(s):
def _getAST(content):
def scan_cix(content, filename, md5sum=None, mtime=None, lang='Python'):
def scan_et(content, filename, md5sum=None, mtime=None, lang='Python'):
def register(mgr):
def register(mgr):
def _walk_js_scopes(scope, lpath=None):
def register(mgr):
def register(mgr):
def register(mgr):
def tryEncoding(buffer, encoding):
def urlencode_path(s):
@memoize DCNL def re_compile(regex, *args):
def re_sub(*args):
def _get_classifier(lang):
def gen_dirs_under_dirs(dirs, max_depth, interesting_file_patterns=None, skip_scc_control_dirs=True):
def parseDocSummary(doclines, limit=LINE_LIMIT, width=LINE_WIDTH):
def parsePyFuncDoc(doc, fallbackCallSig=None, scope='?', funcname='?'):
def xmlattrstr(attrs):
def isUnsavedPath(path):
def canonicalizePath(path, normcase=True):
def parseAttributes(attrStr=None):
def register(mgr):
def register(mgr):
def register(mgr):
def register(mgr):
def register(mgr):
def tree_2_0_from_tree_0_1(tree):
def tree_from_cix_path(cix_path):
def tree_from_cix(cix):
def pretty_tree_from_tree(tree, indent_width=2):
def check_tree(tree):
def _dump_element(elem, indent=''):
def scan_multilang(tokens, module_elem):
def filter_blobnames_for_prefix(candidates, prefix, sep):
def rmdir(dir):
def run(cmd, logstream=_RUN_DEFAULT_LOGSTREAM):
def run_in_dir(cmd, cwd, logstream=_RUN_DEFAULT_LOGSTREAM):
def _elem_from_scoperef(scoperef):
def _ver_from_ver_str(ver_str):
def register(mgr):
def safe_scan(path, python):
def scan(path):
def scan_multilang(tokens, module_elem):
def standardizeJSType(vartype):
def condenseSpaces(s):
def remove_directory(dirpath):
def getText(elem):
def strip_invalid_xml_chars(s):
def outline_ci_elem(elem, _lvl=0, brief=False, doSort=False, includeLineNos=False):
def register(mgr):
def register(mgr):
def register(mgr):
def register(mgr):
def register(mgr):
def register(mgr):
def register(mgr):
def _parse_calltip(calltip, DEBUG=False):
def register(mgr):
def _traverse(nodes, _offset=None):
def _docstring_from_node(node):
def getAttrStr(attrs):
def scan(content, filename, md5sum=None, mtime=None, lang='Python'):
def register(mgr):
def _htmlescape(s, quote=False, whitespace=False):
def stripTags(s):
def register(mgr):
def _getRegisteredExecutable(exeName):
def _cull(potential, matches, verbose=0):
def whichgen(command, path=None, verbose=0, exts=None):
def which(command, path=None, verbose=0, exts=None):
def whichall(command, path=None, verbose=0, exts=None):
def get_default_stylesheet_location():
def get_generator_names_descriptions():
def add_extension(name, ext):
def list_states(state_prefix):
def bisect_left_nodes_start(a, x, lo=0, hi=None):
def textinfo_from_filename(path):
def textinfo_from_path(path, encoding=None, follow_symlinks=False, quick_determine_lang=False):
def _norm_encoding(encoding):
def _regex_from_encoded_pattern(s):
def _escaped_text_from_text(text, escapes='eol'):
def _one_line_summary_from_text(text, length=78, escapes={'\n': '\\n', '\r': '\\r', ' DCTB ': '\\t'}):
def _should_include_path(path, includes, excludes):
def _walk(top, topdown=True, onerror=None, follow_symlinks=False):
def _paths_from_path_patterns(path_patterns, files=True, dirs='never', recursive=True, includes=[], excludes=[], skip_dupe_dirs=False, follow_symlinks=False, on_error=_NOT_SPECIFIED):
def _setup_logging(stream=None):
def ErrCheckBool(result, func, args):
def ErrCheckHandle(result, func, args):
def _generateFallbackKoLangInfo(langinfo_db, koLangInst):
def queue_dispatcher(force=False):
def queue_loop():
def get_revision(path=None):
def tokenize(text):
def memoize(func):
def tokenize(text):
def main(save_one=save_one, save_month=save_month):
def gen_month_dates(year, month):
def fetch_potd_url(iso_date):
def gen_img_names(iso_month):
def fetch_image(iso_date, img_url):
def get_images(iso_month, max_count=0):
def main():
def fetch_potd_url(iso_date):
def get_img_names(iso_month):
def main():
def expand(content, subkeys=None):
def tokenize(text):
def shave_marks(txt):
def shave_marks_latin(txt):
def dewinize(txt):
def taxi_process(ident, trips, start_time=0):
def compute_duration(previous_action):
def main(end_time=DEFAULT_END_TIME, num_taxis=DEFAULT_NUMBER_OF_TAXIS, seed=None):
def coroutine(func):
def compute_delay(interval):
def taxi_process(ident, trips, start_time=0):
def main(end_time=DEFAULT_END_TIME, num_taxis=DEFAULT_NUMBER_OF_TAXIS, seed=None):
def taxi_process(ident, trips, start_time=0):
def compute_duration(previous_action):
def main(end_time=DEFAULT_END_TIME, num_taxis=DEFAULT_NUMBER_OF_TAXIS, seed=None, delay=False):
@promotion DCNL def fidelity(order):
@promotion DCNL def bulk_item(order):
@promotion DCNL def large_order(order):
def best_promo(order):
def fidelity_promo(order):
def bulk_item_promo(order):
def large_order_promo(order):
def best_promo(order):
def fidelity_promo(order):
def bulk_item_promo(order):
def large_order_promo(order):
def best_promo(order):
def fidelity_promo(order):
def bulk_item_promo(order):
def large_order_promo(order):
def best_promo(order):
def fidelity_promo(order):
def bulk_item_promo(order):
def large_order_promo(order):
def clip(text, max_len=80):
def gt_zero(x):
def co_address_from_role(role):
def table_row_to_legislator_and_profile_url(table_row_element, chamber):
def get_photo_url(legislator_profile_page):
def last_name_first_name_to_full_name(last_name_first_name):
def get_actor(action_text, chamber, rgxs=((re.compile('(in|by) DCSP senate', re.I), 'upper'), (re.compile('(in|by) DCSP house', re.I), 'lower'), (re.compile('by DCSP governor', re.I), 'governor'))):
def check_response(method):
def after_categorize(f):
def before_categorize(f):
def grouper(n, iterable, fillvalue=None):
def db_drop():
def dat_row_2_tuple(row):
def load_bill_versions(connection):
def load(folder, sql_name=partial(re.compile('\\.dat$').sub, '.sql')):
def delete_session(session_year):
def db_create():
def normalize_time(time_string):
def xpath(elem, path):
def check_response(method):
def get_actor(action_text, chamber, rgxs=actor_regex):
def index_legislators(scraper, session_key):
def parse_link_id(link):
def get_bill_type(bill_id):
def legislature_to_number(leg):
def get_date(elem):
def img_check(elem):
def get_rows(rows, header):
def get_actor(tr, chamber):
def jres_id(n):
def usages(evaluator, definition_names, mods):
def resolve_potential_imports(evaluator, definitions):
def defined_names(source, path=None, encoding='utf-8'):
def names(source=None, path=None, encoding='utf-8', all_scopes=False, definitions=True, references=False):
def preload_module(*modules):
def set_debug_function(func_cb=debug.print_to_stdout, warnings=True, notices=True, speed=True):
def get_stack_at_position(grammar, code_lines, module_node, pos):
def _get_index_and_key(nodes, position):
@time_cache('call_signatures_validity') DCNL def cache_call_signatures(evaluator, context, bracket_leaf, code_lines, user_pos):
def get_user_scope(module_context, position):
def defined_names(evaluator, context):
def imitate_pydoc(string):
def setup_readline(namespace_module=__main__):
def version_info():
def reraise_uncaught(func):
def indent_block(text, indention=' DCSP  DCSP  DCSP  DCSP '):
@contextlib.contextmanager DCNL def ignored(*exceptions):
def splitlines(string, keepends=False):
def unite(iterable):
def get_executable_nodes(node, last_added=False):
def for_stmt_defines_one_name(for_stmt):
def clean_scope_docstring(scope_node):
def get_call_signature(funcdef, width=72, call_string=None):
def get_doc_with_call_signature(scope_node):
def move(node, line_offset):
def get_following_comment_same_line(node):
def source_tokens(source, use_exact_op_types=False):
def generate_tokens(lines, use_exact_op_types=False):
def generate_grammar(bnf_text):
def load_grammar(version=None):
def parse(code=None, path=None, grammar=None, error_recovery=True, start_symbol='file_input', cache=False, diff_cache=False):
def _create_params(parent, argslist_list):
def _defined_names(current):
def _flows_finished(grammar, stack):
def search_ancestor(node, node_type_or_types):
def load_module(grammar, path):
def _start_linter():
def rename(script, new_name):
def _rename(names, replace_str):
def extract(script, new_name):
def inline(script):
@contextmanager DCNL def execution_allowed(evaluator, node):
def _check_for_setattr(instance):
def _check_for_exception_catch(node_context, jedi_name, exception, payload=None):
def get_init_path(directory_path):
def get_modules_containing_name(evaluator, modules, name):
def _init_pathinfo(sys_path):
def addpackage(sys_path, sitedir, name, known_paths):
def addsitedir(sys_path, sitedir, known_paths=None):
def try_iter_content(types, depth=0):
def dotted_from_fs_path(fs_path, sys_path):
def _parse_function_doc(doc):
def _a_generator(foo):
@compiled_objects_cache('compiled_cache') DCNL def create(evaluator, obj, parent_context=None, module=None, faked=None):
def memoize_faked(obj):
def is_class_instance(obj):
def _search_param_in_docstr(docstr, param_str):
def _strip_rst_role(type_str):
def _execute_types_in_stmt(module_context, stmt):
def _execute_array_values(evaluator, array):
def deep_ast_copy(obj):
def evaluate_call_of_leaf(context, leaf, cut_own_trailer=False):
def call_of_leaf(leaf):
def get_module_names(module, all_scopes):
@debug.increase_indent DCNL def search_params(evaluator, execution_context, funcdef):
@memoize_default([], evaluator_is_first_arg=True) DCNL @to_list DCNL def _search_function_executions(evaluator, module_context, funcdef):
def calculate_children(evaluator, context, children):
def factor_calculate(evaluator, types, operator):
def _evaluate_for_annotation(context, annotation, index=None):
def _get_typing_replacement_module():
def get_global_filters(evaluator, context, until_position, origin_scope):
def get_venv_path(venv):
def _get_sys_path_with_egglinks(sys_path):
def _get_venv_path_dirs(venv):
def _paths_from_assignment(module_context, expr_stmt):
def _paths_from_list_modifications(module_path, trailer1, trailer2):
def _check_module(module_context):
def _detect_django_path(module_path):
def _get_buildout_script_paths(module_path):
def argument_clinic(string, want_obj=False, want_context=False, want_arguments=False):
@argument_clinic('iterator[, DCSP default], DCSP /') DCNL def builtins_next(evaluator, iterators, defaults):
def collections_namedtuple(evaluator, obj, arguments):
def _apply_decorators(evaluator, context, node):
def _remove_statements(evaluator, context, stmt, name):
def _check_flow_information(context, flow, search_name, pos):
def check_tuple_assignments(evaluator, contextualized_name, types):
def unpack_tuple_to_dict(context, types, exprlist):
def py__iter__types(evaluator, types, contextualized_node=None):
def check_array_additions(context, sequence):
@memoize_default(default=set()) DCNL @debug.increase_indent DCNL def _check_array_additions(context, sequence):
def get_dynamic_array_instance(instance):
def create_index_types(evaluator, context, index):
def memoize_default(default=NO_DEFAULT, evaluator_is_first_arg=False, second_arg_is_evaluator=False):
def use_metaclass(meta, *bases):
def u(string):
def no_unicode_pprint(dct):
def utf8_repr(func):
def _lazy_colorama_init():
def increase_indent(func):
def dbg(message, *args, **kwargs):
def print_to_stdout(color, str_out):
def underscore_memoization(func):
def clear_time_caches(delete_all=False):
def time_cache(time_add_setting):
def memoize_method(method):
@pytest.fixture(scope='session') DCNL def clean_jedi_cache(request):
def used_memory():
def profile_preload(mod):
def main(mods):
def process_memory():
def test_imports_on_global_namespace_without_path():
def test_named_import():
def parse_test_files_option(opt):
def pytest_generate_tests(metafunc):
@pytest.fixture() DCNL def isolated_jedi_cache(monkeypatch, tmpdir):
@pytest.mark.skipif('sys.version_info[0] DCSP < DCSP 3') DCNL def test_simple_annotations():
@pytest.mark.skipif('sys.platform DCSP != DCSP "linux" DCSP or DCSP sys.maxsize DCSP <= DCSP 2**32 DCSP or DCSP sys.version_info[:2] DCSP != DCSP (3, DCSP 4)') DCNL @cwd_at('test/test_evaluate') DCNL def test_init_extension_module():
@pytest.mark.skipif('sys.version_info[:2] DCSP < DCSP (3, DCSP 6)') DCNL def test_f_strings():
@pytest.mark.skipif('sys.version_info DCSP > DCSP (2,6)') DCNL @cwd_at('test/test_evaluate') DCNL def test_pyc():
@pytest.mark.skipif('sys.version_info DCSP < DCSP (3,3)') DCNL def test_find_module_py33():
@cwd_at('test/test_evaluate/not_in_sys_path/pkg') DCNL def test_import_not_in_sys_path():
@pytest.mark.parametrize('script,name', [('from DCSP flask.ext DCSP import DCSP foo; DCSP foo.', 'Foo'), ('from DCSP flask.ext DCSP import DCSP bar; DCSP bar.', 'Bar'), ('from DCSP flask.ext DCSP import DCSP baz; DCSP baz.', 'Baz'), ('from DCSP flask.ext DCSP import DCSP moo; DCSP moo.', 'Moo'), ('from DCSP flask.ext.', 'foo'), ('from DCSP flask.ext.', 'bar'), ('from DCSP flask.ext.', 'baz'), ('from DCSP flask.ext.', 'moo'), pytest.mark.xfail(('import DCSP flask.ext.foo; DCSP flask.ext.foo.', 'Foo')), pytest.mark.xfail(('import DCSP flask.ext.bar; DCSP flask.ext.bar.', 'Foo')), pytest.mark.xfail(('import DCSP flask.ext.baz; DCSP flask.ext.baz.', 'Foo')), pytest.mark.xfail(('import DCSP flask.ext.moo; DCSP flask.ext.moo.', 'Foo'))]) DCNL def test_flask_ext(script, name):
def test_function_execution():
def test_doc():
def test_user_statement_on_import():
def test_incomplete_list_comprehension():
def test_end_pos_error_correction():
def test_param_splitting():
@pytest.mark.parametrize('code', ['foo DCSP "', 'foo DCSP """\n', 'foo DCSP """\nbar']) DCNL def test_open_string_literal(code):
def test_class_in_docstr():
def test_fake_parentheses():
def test_string_literals():
def test_decorator_string_issue():
@pytest.mark.skipif('True', reason='Refactor DCSP a DCSP few DCSP parser DCSP things DCSP first.') DCNL def test_basic_parsing():
def test_get_code():
def test_end_newlines():
def _assert_valid_graph(node):
def test_add_to_end():
def test_endless_while_loop(differ):
def test_ur_literals():
def test_explicit_absolute_imports():
def test_no_explicit_absolute_imports():
def test_dont_break_imports_without_namespaces():
def x():
def huhu(db):
def sphinxy(a, b, c, d, x):
def sphinxy2(a, b, x):
def sphinxy_param_type_wrapped(a):
def local_classes(node, node2):
def list_with_non_imports(lst):
def two_dots(a):
def epydoc(a, b):
def rparam(a, b):
def both():
def __init__(foo):
def import_issues(foo):
def cwd_at(path):
def test_settings_module():
def test_no_duplicate_modules():
def test_goto_assignments_keyword():
def test_keyword():
def test_unicode_script():
def test_unicode_attribute():
def test_multibyte_script():
def test_goto_definition_at_zero():
def usages_with_additional_modules(script, additional_modules):
def test_cross_module_usages():
def test_numpy_like_non_zero():
def test_side_effect_completion():
def test_empty_init():
def test_indent_context():
def test_signature_is_definition():
def test_completion_interference():
def test_different_caller():
def test_import_empty():
def test_follow_import_incomplete():
def test_line_number_errors():
def test_goto_definition_not_multiple():
def test_sub_module():
def make_definitions():
@cwd_at('.') DCNL def test_completion_docstring():
def test_param_endings():
def test_type_II():
def assert_case_equal(case, actual, desired):
def assert_static_analysis(case, actual, desired):
def test_refactor(refactor_case):
def test_modulepickling_change_cache_dir(monkeypatch, tmpdir):
def load_stored_item(grammar, path, item):
@pytest.mark.usefixtures('isolated_jedi_cache') DCNL def test_modulepickling_simulate_deleted_cache(tmpdir):
def test_cache_call_signatures():
def test_cache_line_split_issues():
def test_path_issues():
def skip_deprecated(app, what, name, obj, skip, options):
def opendocx(file):
def makeelement(tagname, tagtext=None, nsprefix='w', attributes=None, attrnsprefix=None):
def pagebreak(type='page', orient='portrait'):
def paragraph(paratext, style='BodyText', breakbefore=False, jc='left'):
def heading(headingtext, headinglevel, lang='en'):
def table(contents, heading=True, colw=None, cwunit='dxa', tblw=0, twunit='auto', borders={}, celstyle=None):
def picture(relationshiplist, picname, picdescription, pixelwidth=None, pixelheight=None, nochangeaspect=True, nochangearrowheads=True, imagefiledict=None):
def search(document, search):
def replace(document, search, replace):
def clean(document):
def findTypeParent(element, tag):
def AdvSearch(document, search, bs=3):
def advReplace(document, search, replace, bs=3):
def getdocumenttext(document):
def coreproperties(title, subject, creator, keywords, lastmodifiedby=None):
def appproperties():
def websettings():
def wordrelationships(relationshiplist):
def savedocx(document, coreprops, appprops, contenttypes, websettings, wordrelationships, output, imagefiledict=None):
def setup_module():
def teardown_module():
def simpledoc(noimagecopy=False):
def testsearchandreplace():
def testtextextraction():
def testunsupportedpagebreak():
def testnewdocument():
def testnewdocument_noimagecopy():
def testopendocx():
def testmakeelement():
def testparagraph():
def testtable():
def get_setting(key, default=None):
def win_find_executable(executable, env):
def check_call(*args, **kwargs):
def ErrCheckBool(result, func, args):
def ErrCheckHandle(result, func, args):
@sender(u'coffee') DCNL def coffee(repl, text, view=None, repl_view=None):
def repl_view_delta(sublime_view):
def train_conv_net(datasets, U, img_w=300, filter_hs=[3, 4, 5], hidden_units=[100, 2], dropout_rate=[0.5], shuffle_batch=True, n_epochs=25, batch_size=50, lr_decay=0.95, conv_non_linear='relu', activations=[Iden], sqr_norm_lim=9, non_static=True):
def shared_dataset(data_xy, borrow=True):
def sgd_updates_adadelta(params, cost, rho=0.95, epsilon=1e-06, norm_lim=9, word_vec_name='Words'):
def safe_update(dict_to, dict_from):
def get_idx_from_sent(sent, word_idx_map, max_l=51, k=300, filter_h=5):
def make_idx_data_cv(revs, word_idx_map, cv, max_l=51, k=300, filter_h=5):
def _dropout_from_layer(rng, layer, p):
def build_data_cv(data_folder, cv=10, clean_string=True):
def get_W(word_vecs, k=300):
def load_bin_vec(fname, vocab):
def add_unknown_words(word_vecs, vocab, min_df=1, k=300):
def clean_str(string, TREC=False):
def clean_str_sst(string):
def current_year_and_week():
def current_games(year=None, week=None, kind='REG'):
def run(callback, active_interval=15, inactive_interval=900, stop=None):
def _run_active(callback, games):
def _run_inactive(games):
def _active_games(inactive_interval):
def _games_in_week(year, week, kind='REG'):
def _game_is_active(gameinfo, inactive_interval):
def google_voice_login(email, passwd):
def smtp_login(email, passwd, connectfun):
def gmail_login(email, passwd):
def email(to_email, msg, from_email=None):
def sms(phone_number, msg, provider=None):
def _google_voice_sms(phone_number, msg):
def _send_email(from_email, to_email, msg):
def schedule_url(year, stype, week):
def week_schedule(year, stype, week):
def new_schedule():
def update_week(sched, year, stype, week):
def find(name, team=None):
def standard_team(team):
def games(year, week=None, home=None, away=None, kind='REG', started=False):
def games_gen(year, week=None, home=None, away=None, kind='REG', started=False):
def one(year, week, home, away, kind='REG', started=False):
def combine(games, plays=False):
def combine_game_stats(games):
def combine_play_stats(games):
def combine_max_stats(games):
def combine_plays(games):
def _search_schedule(year, week=None, home=None, away=None, kind='REG', started=False):
def diff(before, after):
def _json_team_stats(data):
def _json_drives(game, home_team, data):
def _json_plays(drive, data):
def _json_play_players(play, data):
def _json_play_events(data):
def _json_game_player_stats(game, data):
def _get_json_data(eid=None, fpath=None):
def _tryint(v):
def _create_players(jsonf=None):
def values(category_id, yards):
def _create_schedule(jsonf=None):
def short_path(path, cwd=None):
def get_all_dict(module):
def compare(all_dict, others, names, module_name):
def check_rest(module, names, dots=True):
def _run_doctests(tests, full_name, verbose, doctest_warnings):
def check_doctests(module, verbose, ns=None, dots=True, doctest_warnings=False):
def check_doctests_testfile(fname, verbose, ns=None, dots=True, doctest_warnings=False):
def get_sdist_tarball(src_root):
def get_python_exec(ver):
def get_windist_exec(pyver, scipy_verstr):
def path_as_windows(fpath):
def write_summary(allcodes):
def shellcmd(cmd, verbose=True):
def color_print(msg):
def _inputs_swap_needed(mode, shape1, shape2):
def correlate(in1, in2, mode='full', method='auto'):
def fftconvolve(in1, in2, mode='full'):
def _numeric_arrays(arrays, kinds='buifc'):
def _prod(iterable):
def _fftconv_faster(x, h, mode):
def _reverse_and_conj(x):
def _np_conv_ok(volume, kernel, mode):
def _timeit_fast(stmt='pass', setup='pass', repeat=3):
def choose_conv_method(in1, in2, mode='full', measure=False):
def convolve(in1, in2, mode='full', method='auto'):
def order_filter(a, domain, rank):
def medfilt(volume, kernel_size=None):
def wiener(im, mysize=None, noise=None):
def convolve2d(in1, in2, mode='full', boundary='fill', fillvalue=0):
def correlate2d(in1, in2, mode='full', boundary='fill', fillvalue=0):
def medfilt2d(input, kernel_size=3):
def lfilter(b, a, x, axis=(-1), zi=None):
def lfiltic(b, a, y, x=None):
def deconvolve(signal, divisor):
def hilbert(x, N=None, axis=(-1)):
def hilbert2(x, N=None):
def cmplx_sort(p):
def unique_roots(p, tol=0.001, rtype='min'):
def invres(r, p, k, tol=0.001, rtype='avg'):
def residue(b, a, tol=0.001, rtype='avg'):
def residuez(b, a, tol=0.001, rtype='avg'):
def invresz(r, p, k, tol=0.001, rtype='avg'):
def resample(x, num, t=None, axis=0, window=None):
def resample_poly(x, up, down, axis=0, window=('kaiser', 5.0)):
def vectorstrength(events, period):
def detrend(data, axis=(-1), type='linear', bp=0):
def lfilter_zi(b, a):
def sosfilt_zi(sos):
def _filtfilt_gust(b, a, x, axis=(-1), irlen=None):
def filtfilt(b, a, x, axis=(-1), padtype='odd', padlen=None, method='pad', irlen=None):
def _validate_pad(padtype, padlen, x, axis, ntaps):
def sosfilt(sos, x, axis=(-1), zi=None):
def sosfiltfilt(sos, x, axis=(-1), padtype='odd', padlen=None):
def decimate(x, q, n=None, ftype='iir', axis=(-1), zero_phase=True):
def max_len_seq(nbits, state=None, length=None, taps=None):
def savgol_coeffs(window_length, polyorder, deriv=0, delta=1.0, pos=None, use='conv'):
def _polyder(p, m):
def _fit_edge(x, window_start, window_stop, interp_start, interp_stop, axis, polyorder, deriv, delta, y):
def _fit_edges_polyfit(x, window_length, polyorder, deriv, delta, axis, y):
def savgol_filter(x, window_length, polyorder, deriv=0, delta=1.0, axis=(-1), mode='interp', cval=0.0):
def _boolrelextrema(data, comparator, axis=0, order=1, mode='clip'):
def argrelmin(data, axis=0, order=1, mode='clip'):
def argrelmax(data, axis=0, order=1, mode='clip'):
def argrelextrema(data, comparator, axis=0, order=1, mode='clip'):
def _identify_ridge_lines(matr, max_distances, gap_thresh):
def _filter_ridge_lines(cwt, ridge_lines, window_size=None, min_length=None, min_snr=1, noise_perc=10):
def find_peaks_cwt(vector, widths, wavelet=None, max_distances=None, gap_thresh=None, min_length=None, min_snr=1, noise_perc=10):
def sawtooth(t, width=1):
def square(t, duty=0.5):
def gausspulse(t, fc=1000, bw=0.5, bwr=(-6), tpr=(-60), retquad=False, retenv=False):
def chirp(t, f0, t1, f1, method='linear', phi=0, vertex_zero=True):
def _chirp_phase(t, f0, t1, f1, method='linear', vertex_zero=True):
def sweep_poly(t, poly, phi=0):
def _sweep_poly_phase(t, poly):
def unit_impulse(shape, idx=None, dtype=float):
def tf2ss(num, den):
def abcd_normalize(A=None, B=None, C=None, D=None):
def ss2tf(A, B, C, D, input=0):
def zpk2ss(z, p, k):
def ss2zpk(A, B, C, D, input=0):
def cont2discrete(system, dt, method='zoh', alpha=None):
def alt_sg_coeffs(window_length, polyorder, pos):
def test_sg_filter_trivial():
def _assert_poles_close(P1, P2, rtol=1e-08, atol=1e-08):
def _prod(seq):
def _relative_degree(z, p):
def _zpkbilinear(z, p, k, fs):
def _zpklp2lp(z, p, k, wo=1):
def _butter_analog_poles(n):
def butter_lp(n, Wn):
def zpkfreqz(z, p, k, worN=None):
def filtfilt_gust_opt(b, a, x):
def upfirdn_naive(x, h, up=1, down=1):
def _gen_ridge_line(start_locs, max_locs, length, distances, gaps):
def compute_frequency(t, theta):
def _pad_h(h, up):
def upfirdn(h, x, up=1, down=1, axis=(-1)):
def lsim2(system, U=None, T=None, X0=None, **kwargs):
def _cast_to_array_dtype(in1, in2):
def lsim(system, U, T, X0=None, interp=True):
def _default_response_times(A, n):
def impulse(system, X0=None, T=None, N=None):
def impulse2(system, X0=None, T=None, N=None, **kwargs):
def step(system, X0=None, T=None, N=None):
def step2(system, X0=None, T=None, N=None, **kwargs):
def bode(system, w=None, n=100):
def freqresp(system, w=None, n=10000):
def _valid_inputs(A, B, poles, method, rtol, maxiter):
def _order_complex_poles(poles):
def _KNV0(B, ker_pole, transfer_matrix, j, poles):
def _YT_real(ker_pole, Q, transfer_matrix, i, j):
def _YT_complex(ker_pole, Q, transfer_matrix, i, j):
def _YT_loop(ker_pole, transfer_matrix, poles, B, maxiter, rtol):
def _KNV0_loop(ker_pole, transfer_matrix, poles, B, maxiter, rtol):
def place_poles(A, B, poles, method='YT', rtol=0.001, maxiter=30):
def dlsim(system, u, t=None, x0=None):
def dimpulse(system, x0=None, t=None, n=None):
def dstep(system, x0=None, t=None, n=None):
def dfreqresp(system, w=None, n=10000, whole=False):
def dbode(system, w=None, n=100):
def lombscargle(x, y, freqs, precenter=False, normalize=False):
def periodogram(x, fs=1.0, window='boxcar', nfft=None, detrend='constant', return_onesided=True, scaling='density', axis=(-1)):
def welch(x, fs=1.0, window='hann', nperseg=None, noverlap=None, nfft=None, detrend='constant', return_onesided=True, scaling='density', axis=(-1)):
def csd(x, y, fs=1.0, window='hann', nperseg=None, noverlap=None, nfft=None, detrend='constant', return_onesided=True, scaling='density', axis=(-1)):
def spectrogram(x, fs=1.0, window=('tukey', 0.25), nperseg=None, noverlap=None, nfft=None, detrend='constant', return_onesided=True, scaling='density', axis=(-1), mode='psd'):
def check_COLA(window, nperseg, noverlap, tol=1e-10):
def stft(x, fs=1.0, window='hann', nperseg=256, noverlap=None, nfft=None, detrend=False, return_onesided=True, boundary='zeros', padded=True, axis=(-1)):
def istft(Zxx, fs=1.0, window='hann', nperseg=None, noverlap=None, nfft=None, input_onesided=True, boundary=True, time_axis=(-1), freq_axis=(-2)):
def coherence(x, y, fs=1.0, window='hann', nperseg=None, noverlap=None, nfft=None, detrend='constant', axis=(-1)):
def _spectral_helper(x, y, fs=1.0, window='hann', nperseg=None, noverlap=None, nfft=None, detrend='constant', return_onesided=True, scaling='spectrum', axis=(-1), mode='psd', boundary=None, padded=False):
def _fft_helper(x, win, detrend_func, nperseg, noverlap, nfft, sides):
def _triage_segments(window, nperseg, input_length):
def _len_guards(M):
def _extend(M, sym):
def _truncate(w, needed):
def _cos_win(M, a, sym=True):
def boxcar(M, sym=True):
def triang(M, sym=True):
def parzen(M, sym=True):
def bohman(M, sym=True):
def blackman(M, sym=True):
def nuttall(M, sym=True):
def blackmanharris(M, sym=True):
def flattop(M, sym=True):
def bartlett(M, sym=True):
def hann(M, sym=True):
def tukey(M, alpha=0.5, sym=True):
def barthann(M, sym=True):
def hamming(M, sym=True):
def kaiser(M, beta, sym=True):
def gaussian(M, std, sym=True):
def general_gaussian(M, p, sig, sym=True):
def chebwin(M, at, sym=True):
def slepian(M, width, sym=True):
def cosine(M, sym=True):
def exponential(M, center=None, tau=1.0, sym=True):
def get_window(window, Nx, fftbins=True):
def axis_slice(a, start=None, stop=None, step=None, axis=(-1)):
def axis_reverse(a, axis=(-1)):
def odd_ext(x, n, axis=(-1)):
def even_ext(x, n, axis=(-1)):
def const_ext(x, n, axis=(-1)):
def zero_ext(x, n, axis=(-1)):
def kaiser_beta(a):
def kaiser_atten(numtaps, width):
def kaiserord(ripple, width):
def firwin(numtaps, cutoff, width=None, window='hamming', pass_zero=True, scale=True, nyq=1.0):
def firwin2(numtaps, freq, gain, nfreqs=None, window='hamming', nyq=1.0, antisymmetric=False):
def remez(numtaps, bands, desired, weight=None, Hz=1, type='bandpass', maxiter=25, grid_density=16):
def firls(numtaps, bands, desired, weight=None, nyq=1.0):
def _dhtm(mag):
def minimum_phase(h, method='homomorphic', n_fft=None):
def daub(p):
def qmf(hk):
def cascade(hk, J=7):
def morlet(M, w=5.0, s=1.0, complete=True):
def ricker(points, a):
def cwt(data, wavelet, widths):
def findfreqs(num, den, N, kind='ba'):
def freqs(b, a, worN=None, plot=None):
def freqs_zpk(z, p, k, worN=None):
def freqz(b, a=1, worN=None, whole=False, plot=None):
def freqz_zpk(z, p, k, worN=None, whole=False):
def group_delay(system, w=None, whole=False):
def _validate_sos(sos):
def sosfreqz(sos, worN=None, whole=False):
def _cplxreal(z, tol=None):
def _cplxpair(z, tol=None):
def tf2zpk(b, a):
def zpk2tf(z, p, k):
def tf2sos(b, a, pairing='nearest'):
def sos2tf(sos):
def sos2zpk(sos):
def _nearest_real_complex_idx(fro, to, which):
def zpk2sos(z, p, k, pairing='nearest'):
def _align_nums(nums):
def normalize(b, a):
def lp2lp(b, a, wo=1.0):
def lp2hp(b, a, wo=1.0):
def lp2bp(b, a, wo=1.0, bw=1.0):
def lp2bs(b, a, wo=1.0, bw=1.0):
def bilinear(b, a, fs=1.0):
def iirdesign(wp, ws, gpass, gstop, analog=False, ftype='ellip', output='ba'):
def iirfilter(N, Wn, rp=None, rs=None, btype='band', analog=False, ftype='butter', output='ba'):
def _relative_degree(z, p):
def _zpkbilinear(z, p, k, fs):
def _zpklp2lp(z, p, k, wo=1.0):
def _zpklp2hp(z, p, k, wo=1.0):
def _zpklp2bp(z, p, k, wo=1.0, bw=1.0):
def _zpklp2bs(z, p, k, wo=1.0, bw=1.0):
def butter(N, Wn, btype='low', analog=False, output='ba'):
def cheby1(N, rp, Wn, btype='low', analog=False, output='ba'):
def cheby2(N, rs, Wn, btype='low', analog=False, output='ba'):
def ellip(N, rp, rs, Wn, btype='low', analog=False, output='ba'):
def bessel(N, Wn, btype='low', analog=False, output='ba', norm='phase'):
def band_stop_obj(wp, ind, passb, stopb, gpass, gstop, type):
def buttord(wp, ws, gpass, gstop, analog=False):
def cheb1ord(wp, ws, gpass, gstop, analog=False):
def cheb2ord(wp, ws, gpass, gstop, analog=False):
def ellipord(wp, ws, gpass, gstop, analog=False):
def buttap(N):
def cheb1ap(N, rp):
def cheb2ap(N, rs):
def ellipap(N, rp, rs):
def _falling_factorial(x, n):
def _bessel_poly(n, reverse=False):
def _campos_zeros(n):
def _aberth(f, fp, x0, tol=1e-15, maxiter=50):
def _bessel_zeros(N):
def _norm_factor(p, k):
def besselap(N, norm='phase'):
def iirnotch(w0, Q):
def iirpeak(w0, Q):
def _design_notch_peak_filter(w0, Q, ftype):
def spline_filter(Iin, lmbda=5.0):
def _bspline_piecefunctions(order):
def bspline(x, n):
def gauss_spline(x, n):
def cubic(x):
def quadratic(x):
def cspline1d(signal, lamb=0.0):
def qspline1d(signal, lamb=0.0):
def cspline1d_eval(cj, newx, dx=1.0, x0=0):
def qspline1d_eval(cj, newx, dx=1.0, x0=0):
def spline_filter1d(input, order=3, axis=(-1), output=numpy.float64):
def spline_filter(input, order=3, output=numpy.float64):
def geometric_transform(input, mapping, output_shape=None, output=None, order=3, mode='constant', cval=0.0, prefilter=True, extra_arguments=(), extra_keywords={}):
def map_coordinates(input, coordinates, output=None, order=3, mode='constant', cval=0.0, prefilter=True):
def affine_transform(input, matrix, offset=0.0, output_shape=None, output=None, order=3, mode='constant', cval=0.0, prefilter=True):
def shift(input, shift, output=None, order=3, mode='constant', cval=0.0, prefilter=True):
def zoom(input, zoom, output=None, order=3, mode='constant', cval=0.0, prefilter=True):
def rotate(input, angle, axes=(1, 0), reshape=True, output=None, order=3, mode='constant', cval=0.0, prefilter=True):
def test_byte_order_median():
def test_zoom_output_shape():
def test_gh_issue_3025():
def test_valid_origins():
def _extend_mode_to_code(mode):
def _normalize_sequence(input, rank, array_type=None):
def fourier_gaussian(input, sigma, n=(-1), axis=(-1), output=None):
def fourier_uniform(input, size, n=(-1), axis=(-1), output=None):
def fourier_ellipsoid(input, size, n=(-1), axis=(-1), output=None):
def fourier_shift(input, shift, n=(-1), axis=(-1), output=None):
@docfiller DCNL def correlate1d(input, weights, axis=(-1), output=None, mode='reflect', cval=0.0, origin=0):
@docfiller DCNL def convolve1d(input, weights, axis=(-1), output=None, mode='reflect', cval=0.0, origin=0):
def _gaussian_kernel1d(sigma, order, radius):
@docfiller DCNL def gaussian_filter1d(input, sigma, axis=(-1), order=0, output=None, mode='reflect', cval=0.0, truncate=4.0):
@docfiller DCNL def gaussian_filter(input, sigma, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0):
@docfiller DCNL def prewitt(input, axis=(-1), output=None, mode='reflect', cval=0.0):
@docfiller DCNL def sobel(input, axis=(-1), output=None, mode='reflect', cval=0.0):
@docfiller DCNL def generic_laplace(input, derivative2, output=None, mode='reflect', cval=0.0, extra_arguments=(), extra_keywords=None):
@docfiller DCNL def laplace(input, output=None, mode='reflect', cval=0.0):
@docfiller DCNL def gaussian_laplace(input, sigma, output=None, mode='reflect', cval=0.0, **kwargs):
@docfiller DCNL def generic_gradient_magnitude(input, derivative, output=None, mode='reflect', cval=0.0, extra_arguments=(), extra_keywords=None):
@docfiller DCNL def gaussian_gradient_magnitude(input, sigma, output=None, mode='reflect', cval=0.0, **kwargs):
@docfiller DCNL def correlate(input, weights, output=None, mode='reflect', cval=0.0, origin=0):
@docfiller DCNL def convolve(input, weights, output=None, mode='reflect', cval=0.0, origin=0):
@docfiller DCNL def uniform_filter1d(input, size, axis=(-1), output=None, mode='reflect', cval=0.0, origin=0):
@docfiller DCNL def uniform_filter(input, size=3, output=None, mode='reflect', cval=0.0, origin=0):
@docfiller DCNL def minimum_filter1d(input, size, axis=(-1), output=None, mode='reflect', cval=0.0, origin=0):
@docfiller DCNL def maximum_filter1d(input, size, axis=(-1), output=None, mode='reflect', cval=0.0, origin=0):
@docfiller DCNL def minimum_filter(input, size=None, footprint=None, output=None, mode='reflect', cval=0.0, origin=0):
@docfiller DCNL def maximum_filter(input, size=None, footprint=None, output=None, mode='reflect', cval=0.0, origin=0):
@docfiller DCNL def rank_filter(input, rank, size=None, footprint=None, output=None, mode='reflect', cval=0.0, origin=0):
@docfiller DCNL def median_filter(input, size=None, footprint=None, output=None, mode='reflect', cval=0.0, origin=0):
@docfiller DCNL def percentile_filter(input, percentile, size=None, footprint=None, output=None, mode='reflect', cval=0.0, origin=0):
@docfiller DCNL def generic_filter1d(input, function, filter_size, axis=(-1), output=None, mode='reflect', cval=0.0, origin=0, extra_arguments=(), extra_keywords=None):
@docfiller DCNL def generic_filter(input, function, size=None, footprint=None, output=None, mode='reflect', cval=0.0, origin=0, extra_arguments=(), extra_keywords=None):
def label(input, structure=None, output=None):
def find_objects(input, max_label=0):
def labeled_comprehension(input, labels, index, func, out_dtype, default, pass_positions=False):
def _safely_castable_to_int(dt):
def _stats(input, labels=None, index=None, centered=False):
def sum(input, labels=None, index=None):
def mean(input, labels=None, index=None):
def variance(input, labels=None, index=None):
def standard_deviation(input, labels=None, index=None):
def _select(input, labels=None, index=None, find_min=False, find_max=False, find_min_positions=False, find_max_positions=False, find_median=False):
def minimum(input, labels=None, index=None):
def maximum(input, labels=None, index=None):
def median(input, labels=None, index=None):
def minimum_position(input, labels=None, index=None):
def maximum_position(input, labels=None, index=None):
def extrema(input, labels=None, index=None):
def center_of_mass(input, labels=None, index=None):
def histogram(input, min, max, bins, labels=None, index=None):
def watershed_ift(input, markers, structure=None, output=None):
def iterate_structure(structure, iterations, origin=None):
def generate_binary_structure(rank, connectivity):
def binary_erosion(input, structure=None, iterations=1, mask=None, output=None, border_value=0, origin=0, brute_force=False):
def binary_dilation(input, structure=None, iterations=1, mask=None, output=None, border_value=0, origin=0, brute_force=False):
def binary_opening(input, structure=None, iterations=1, output=None, origin=0):
def binary_closing(input, structure=None, iterations=1, output=None, origin=0):
def binary_hit_or_miss(input, structure1=None, structure2=None, output=None, origin1=0, origin2=None):
def binary_propagation(input, structure=None, mask=None, output=None, border_value=0, origin=0):
def binary_fill_holes(input, structure=None, output=None, origin=0):
def grey_erosion(input, size=None, footprint=None, structure=None, output=None, mode='reflect', cval=0.0, origin=0):
def grey_dilation(input, size=None, footprint=None, structure=None, output=None, mode='reflect', cval=0.0, origin=0):
def grey_opening(input, size=None, footprint=None, structure=None, output=None, mode='reflect', cval=0.0, origin=0):
def grey_closing(input, size=None, footprint=None, structure=None, output=None, mode='reflect', cval=0.0, origin=0):
def morphological_gradient(input, size=None, footprint=None, structure=None, output=None, mode='reflect', cval=0.0, origin=0):
def morphological_laplace(input, size=None, footprint=None, structure=None, output=None, mode='reflect', cval=0.0, origin=0):
def white_tophat(input, size=None, footprint=None, structure=None, output=None, mode='reflect', cval=0.0, origin=0):
def black_tophat(input, size=None, footprint=None, structure=None, output=None, mode='reflect', cval=0.0, origin=0):
def distance_transform_bf(input, metric='euclidean', sampling=None, return_distances=True, return_indices=False, distances=None, indices=None):
def distance_transform_cdt(input, metric='chessboard', return_distances=True, return_indices=False, distances=None, indices=None):
def distance_transform_edt(input, sampling=None, return_distances=True, return_indices=False, distances=None, indices=None):
def generate_test_vecs(infile, strelfile, resultfile):
def save_npz(file, matrix, compressed=True):
def load_npz(file):
def isspmatrix(x):
def find(A):
def tril(A, k=0, format=None):
def triu(A, k=0, format=None):
def get_thunk_type_set():
def parse_routine(name, args, types):
def with_64bit_maxval_limit(maxval_limit=None, random=False, fixed_dtype=None, downcast_maxval=None, assert_32bit=False):
@contextlib.contextmanager DCNL def check_remains_sorted(X):
def _possibly_unimplemented(cls, require=True):
def sparse_test_class(getset=True, slicing=True, slicing_assign=True, fancy_indexing=True, fancy_assign=True, fancy_multidim_indexing=True, fancy_multidim_assign=True, minmax=True, nnz_axis=True):
def _same_sum_duplicate(data, *inds, **kwargs):
def isspmatrix_bsr(x):
def spdiags(data, diags, m, n, format=None):
def diags(diagonals, offsets=0, shape=None, format=None, dtype=None):
def identity(n, dtype='d', format=None):
def eye(m, n=None, k=0, dtype=float, format=None):
def kron(A, B, format=None):
def kronsum(A, B, format=None):
def _compressed_sparse_stack(blocks, axis):
def hstack(blocks, format=None, dtype=None):
def vstack(blocks, format=None, dtype=None):
def bmat(blocks, format=None, dtype=None):
def block_diag(mats, format=None, dtype=None):
def random(m, n, density=0.01, format='coo', dtype=None, random_state=None, data_rvs=None):
def rand(m, n, density=0.01, format='coo', dtype=None, random_state=None):
def isspmatrix_coo(x):
def estimate_blocksize(A, efficiency=0.7):
def count_blocks(A, blocksize):
def onenormest(A, t=2, itmax=5, compute_v=False, compute_w=False):
def _blocked_elementwise(func):
@_blocked_elementwise DCNL def sign_round_up(X):
def _algorithm_2_2(A, AT, t):
def _onenormest_core(A, AT, t, itmax):
def norm(x, ord=None, axis=None):
def matvec(x):
def _burkardt_13_power(n, p):
def aslinearoperator(A):
def as2d(ar):
def _makeOperator(operatorInput, expectedShape):
def _applyConstraints(blockVectorV, factYBY, blockVectorBY, blockVectorY):
def lobpcg(A, X, B=None, M=None, Y=None, tol=None, maxiter=20, largest=True, verbosityLevel=0, retLambdaHistory=False, retResidualNormsHistory=False):
def choose_ncv(k):
def eigs(A, k=6, M=None, sigma=None, which='LM', v0=None, ncv=None, maxiter=None, tol=0, return_eigenvectors=True, Minv=None, OPinv=None, OPpart=None):
def eigsh(A, k=6, M=None, sigma=None, which='LM', v0=None, ncv=None, maxiter=None, tol=0, return_eigenvectors=True, Minv=None, OPinv=None, mode='normal'):
def svds(A, k=6, ncv=None, tol=0, which='LM', v0=None, maxiter=None, return_singular_vectors=True):
def _get_test_tolerance(type_char, mattype=None):
def assert_allclose_cc(actual, desired, **kw):
def argsort_which(eval, typ, k, which, sigma=None, OPpart=None, mode=None):
def inv(A):
def _onenorm_matrix_power_nnm(A, p):
def _smart_matrix_product(A, B, alpha=None, structure=None):
def _onenormest_matrix_power(A, p, t=2, itmax=5, compute_v=False, compute_w=False, structure=None):
def _onenormest_product(operator_seq, t=2, itmax=5, compute_v=False, compute_w=False, structure=None):
def expm(A):
def _solve_P_Q(U, V, structure=None):
def _sinch(x):
def _eq_10_42(lam_1, lam_2, t_12):
def _fragment_2_1(X, T, s):
def _ell(A, m):
def use_solver(**kwargs):
def _get_umf_family(A):
def spsolve(A, b, permc_spec=None, use_umfpack=True):
def splu(A, permc_spec=None, diag_pivot_thresh=None, drop_tol=None, relax=None, panel_size=None, options=dict()):
def spilu(A, drop_tol=None, fill_factor=None, drop_rule=None, permc_spec=None, diag_pivot_thresh=None, relax=None, panel_size=None, options=None):
def factorized(A):
def spsolve_triangular(A, b, lower=True, overwrite_A=False, overwrite_b=False):
def lsmr(A, b, damp=0.0, atol=1e-06, btol=1e-06, conlim=100000000.0, maxiter=None, show=False, x0=None):
def make_system(A, M, x0, b, xtype=None):
def lsmrtest(m, n, damp):
def _sym_ortho(a, b):
def lsqr(A, b, damp=0.0, atol=1e-08, btol=1e-08, conlim=100000000.0, iter_lim=None, show=False, calc_var=False, x0=None):
def lgmres(A, b, x0=None, tol=1e-05, maxiter=1000, M=None, callback=None, inner_m=30, outer_k=3, outer_v=None, store_outer_Av=True):
@non_reentrant() DCNL def gmres(A, b, x0=None, tol=1e-05, restart=None, maxiter=None, xtype=None, M=None, callback=None, restrt=None):
@non_reentrant() DCNL def qmr(A, b, x0=None, tol=1e-05, maxiter=None, xtype=None, M1=None, M2=None, callback=None):
def expm_multiply(A, B, start=None, stop=None, num=None, endpoint=None):
def _expm_multiply_simple(A, B, t=1.0, balance=False):
def _expm_multiply_simple_core(A, B, t, mu, m_star, s, tol=None, balance=False):
def _onenormest_matrix_power(A, p, t=2, itmax=5, compute_v=False, compute_w=False):
def _compute_cost_div_m(m, p, norm_info):
def _compute_p_max(m_max):
def _fragment_3_1(norm_info, n0, tol, m_max=55, ell=2):
def _condition_3_13(A_1_norm, n0, m_max, ell):
def _expm_multiply_interval(A, B, start=None, stop=None, num=None, endpoint=None, balance=False, status_only=False):
def _expm_multiply_interval_core_0(A, X, h, mu, q, norm_info, tol, ell, n0):
def _expm_multiply_interval_core_1(A, X, h, mu, m_star, s, q, tol):
def _expm_multiply_interval_core_2(A, X, h, mu, m_star, s, q, tol):
def laplacian(csgraph, normed=False, return_diag=False, use_out_degree=False):
def cs_graph_components(x):
def validate_graph(csgraph, directed, dtype=DTYPE, csr_output=True, dense_output=True, copy_if_dense=False, copy_if_sparse=False, null_value_in=0, null_value_out=np.inf, infinity_null=True, nan_null=True):
def upcast(*args):
def upcast_char(*args):
def upcast_scalar(dtype, scalar):
def downcast_intp_index(arr):
def getdtype(dtype, a=None, default=None):
def get_index_dtype(arrays=(), maxval=None, check_contents=False):
def get_sum_dtype(dtype):
def isscalarlike(x):
def isintlike(x):
def isshape(x):
def _prepare_index_for_memoryview(i, j, x=None):
def isspmatrix_lil(x):
def isspmatrix_csc(x):
def isspmatrix_csr(x):
def isspmatrix_dia(x):
def _list(x):
def isspmatrix_dok(x):
def _prod(x):
def _minimize_trustregion_exact(fun, x0, args=(), jac=None, hess=None, **trust_region_options):
def estimate_smallest_singular_value(U):
def gershgorin_bounds(H):
def singular_leading_submatrix(A, U, k):
def _root_df_sane(func, x0, args=(), ftol=1e-08, fatol=1e-300, maxfev=1000, fnorm=None, callback=None, disp=False, M=10, eta_strategy=None, sigma_eps=1e-10, sigma_0=1.0, line_search='cruz', **unknown_options):
def _wrap_func(func, x0, fmerit, nfev_list, maxfev, args=()):
def _wrap_result(result, is_complex, shape=None):
def _minimize_trust_region(fun, x0, args=(), jac=None, hess=None, hessp=None, subproblem=None, initial_trust_radius=1.0, max_trust_radius=1000.0, eta=0.15, gtol=0.0001, maxiter=None, disp=False, return_all=False, callback=None, **unknown_options):
def is_array_scalar(x):
def rosen(x):
def rosen_der(x):
def rosen_hess(x):
def rosen_hess_prod(x, p):
def fmin(func, x0, args=(), xtol=0.0001, ftol=0.0001, maxiter=None, maxfun=None, full_output=0, disp=1, retall=0, callback=None, initial_simplex=None):
def _minimize_neldermead(func, x0, args=(), callback=None, maxiter=None, maxfev=None, disp=False, return_all=False, initial_simplex=None, xatol=0.0001, fatol=0.0001, **unknown_options):
def _approx_fprime_helper(xk, f, epsilon, args=(), f0=None):
def approx_fprime(xk, f, epsilon, *args):
def check_grad(func, grad, x0, *args, **kwargs):
def _line_search_wolfe12(f, fprime, xk, pk, gfk, old_fval, old_old_fval, **kwargs):
def fmin_bfgs(f, x0, fprime=None, args=(), gtol=1e-05, norm=Inf, epsilon=_epsilon, maxiter=None, full_output=0, disp=1, retall=0, callback=None):
def _minimize_bfgs(fun, x0, args=(), jac=None, callback=None, gtol=1e-05, norm=Inf, eps=_epsilon, maxiter=None, disp=False, return_all=False, **unknown_options):
def fmin_cg(f, x0, fprime=None, args=(), gtol=1e-05, norm=Inf, epsilon=_epsilon, maxiter=None, full_output=0, disp=1, retall=0, callback=None):
def _minimize_cg(fun, x0, args=(), jac=None, callback=None, gtol=1e-05, norm=Inf, eps=_epsilon, maxiter=None, disp=False, return_all=False, **unknown_options):
def fmin_ncg(f, x0, fprime, fhess_p=None, fhess=None, args=(), avextol=1e-05, epsilon=_epsilon, maxiter=None, full_output=0, disp=1, retall=0, callback=None):
def _minimize_newtoncg(fun, x0, args=(), jac=None, hess=None, hessp=None, callback=None, xtol=1e-05, eps=_epsilon, maxiter=None, disp=False, return_all=False, **unknown_options):
def fminbound(func, x1, x2, args=(), xtol=1e-05, maxfun=500, full_output=0, disp=1):
def _minimize_scalar_bounded(func, bounds, args=(), xatol=1e-05, maxiter=500, disp=0, **unknown_options):
def brent(func, args=(), brack=None, tol=1.48e-08, full_output=0, maxiter=500):
def _minimize_scalar_brent(func, brack=None, args=(), xtol=1.48e-08, maxiter=500, **unknown_options):
def golden(func, args=(), brack=None, tol=_epsilon, full_output=0, maxiter=5000):
def _minimize_scalar_golden(func, brack=None, args=(), xtol=_epsilon, maxiter=5000, **unknown_options):
def bracket(func, xa=0.0, xb=1.0, args=(), grow_limit=110.0, maxiter=1000):
def _linesearch_powell(func, p, xi, tol=0.001):
def fmin_powell(func, x0, args=(), xtol=0.0001, ftol=0.0001, maxiter=None, maxfun=None, full_output=0, disp=1, retall=0, callback=None, direc=None):
def _minimize_powell(func, x0, args=(), callback=None, xtol=0.0001, ftol=0.0001, maxiter=None, maxfev=None, disp=False, direc=None, return_all=False, **unknown_options):
def brute(func, ranges, args=(), Ns=20, full_output=0, finish=fmin, disp=False):
def show_options(solver=None, method=None, disp=True):
def _as_inexact(x):
def _array_like(x, x0):
def nonlin_solve(F, x0, jacobian='krylov', iter=None, verbose=False, maxiter=None, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None, tol_norm=None, line_search='armijo', callback=None, full_output=False, raise_exception=True):
def asjacobian(J):
def _nonlin_wrapper(name, jac):
def differential_evolution(func, bounds, args=(), strategy='best1bin', maxiter=1000, popsize=15, tol=0.01, mutation=(0.5, 1), recombination=0.7, seed=None, callback=None, disp=False, polish=True, init='latinhypercube', atol=0):
def fmin_tnc(func, x0, fprime=None, args=(), approx_grad=0, bounds=None, epsilon=1e-08, scale=None, offset=None, messages=MSG_ALL, maxCGit=(-1), maxfun=None, eta=(-1), stepmx=0, accuracy=0, fmin=0, ftol=(-1), xtol=(-1), pgtol=(-1), rescale=(-1), disp=None, callback=None):
def _minimize_tnc(fun, x0, args=(), jac=None, bounds=None, eps=1e-08, scale=None, offset=None, mesg_num=None, maxCGit=(-1), maxiter=None, eta=(-1), stepmx=0, accuracy=0, minfev=0, ftol=(-1), xtol=(-1), gtol=(-1), rescale=(-1), disp=False, callback=None, **unknown_options):
def lpgen_2d(m, n):
def assert_wolfe(s, phi, derphi, c1=0.0001, c2=0.9, err_msg=''):
def assert_armijo(s, phi, c1=0.0001, err_msg=''):
def assert_fp_equal(x, y, err_msg='', nulp=50):
def dummy_func(x, shape):
def pressure_network(flow_rates, Qtot, k):
def pressure_network_jacobian(flow_rates, Qtot, k):
def myTakeStep2(x):
def himmelblau(p):
def fmin_cobyla(func, x0, cons, args=(), consargs=None, rhobeg=1.0, rhoend=0.0001, iprint=1, maxfun=1000, disp=None, catol=0.0002):
def _minimize_cobyla(fun, x0, args=(), constraints=(), rhobeg=1.0, tol=0.0001, iprint=1, maxiter=1000, disp=False, catol=0.0002, **unknown_options):
def fsolve(func, x0, args=(), fprime=None, full_output=0, col_deriv=0, xtol=1.49012e-08, maxfev=0, band=None, epsfcn=None, factor=100, diag=None):
def _root_hybr(func, x0, args=(), jac=None, col_deriv=0, xtol=1.49012e-08, maxfev=0, band=None, eps=None, factor=100, diag=None, **unknown_options):
def leastsq(func, x0, args=(), Dfun=None, full_output=0, col_deriv=0, ftol=1.49012e-08, xtol=1.49012e-08, gtol=0.0, maxfev=0, epsfcn=None, factor=100, diag=None):
def curve_fit(f, xdata, ydata, p0=None, sigma=None, absolute_sigma=False, check_finite=True, bounds=((- np.inf), np.inf), method=None, jac=None, **kwargs):
def check_gradient(fcn, Dfcn, x0, args=(), col_deriv=0):
def fixed_point(func, x0, args=(), xtol=1e-08, maxiter=500, method='del2'):
def linear_sum_assignment(cost_matrix):
def _step1(state):
def _step3(state):
def _step4(state):
def _step5(state):
def _step6(state):
def _minimize_trust_ncg(fun, x0, args=(), jac=None, hess=None, hessp=None, **trust_region_options):
def basinhopping(func, x0, niter=100, T=1.0, stepsize=0.5, minimizer_kwargs=None, take_step=None, accept_test=None, callback=None, interval=50, disp=False, niter_success=None, seed=None):
def line_search_wolfe1(f, fprime, xk, pk, gfk=None, old_fval=None, old_old_fval=None, args=(), c1=0.0001, c2=0.9, amax=50, amin=1e-08, xtol=1e-14):
def scalar_search_wolfe1(phi, derphi, phi0=None, old_phi0=None, derphi0=None, c1=0.0001, c2=0.9, amax=50, amin=1e-08, xtol=1e-14):
def line_search_wolfe2(f, myfprime, xk, pk, gfk=None, old_fval=None, old_old_fval=None, args=(), c1=0.0001, c2=0.9, amax=None, extra_condition=None, maxiter=10):
def scalar_search_wolfe2(phi, derphi=None, phi0=None, old_phi0=None, derphi0=None, c1=0.0001, c2=0.9, amax=None, extra_condition=None, maxiter=10):
def _cubicmin(a, fa, fpa, b, fb, c, fc):
def _quadmin(a, fa, fpa, b, fb):
def _zoom(a_lo, a_hi, phi_lo, phi_hi, derphi_lo, phi, derphi, phi0, derphi0, c1, c2, extra_condition):
def line_search_armijo(f, xk, pk, gfk, old_fval, args=(), c1=0.0001, alpha0=1):
def line_search_BFGS(f, xk, pk, gfk, old_fval, args=(), c1=0.0001, alpha0=1):
def scalar_search_armijo(phi, phi0, derphi0, c1=0.0001, alpha0=1, amin=0):
def _nonmonotone_line_search_cruz(f, x_k, d, prev_fs, eta, gamma=0.0001, tau_min=0.1, tau_max=0.5):
def _nonmonotone_line_search_cheng(f, x_k, d, f_k, C, Q, eta, gamma=0.0001, tau_min=0.1, tau_max=0.5, nu=0.85):
def newton(func, x0, fprime=None, args=(), tol=1.48e-08, maxiter=50, fprime2=None):
def bisect(f, a, b, args=(), xtol=_xtol, rtol=_rtol, maxiter=_iter, full_output=False, disp=True):
def ridder(f, a, b, args=(), xtol=_xtol, rtol=_rtol, maxiter=_iter, full_output=False, disp=True):
def brentq(f, a, b, args=(), xtol=_xtol, rtol=_rtol, maxiter=_iter, full_output=False, disp=True):
def brenth(f, a, b, args=(), xtol=_xtol, rtol=_rtol, maxiter=_iter, full_output=False, disp=True):
def approx_jacobian(x, func, epsilon, *args):
def fmin_slsqp(func, x0, eqcons=(), f_eqcons=None, ieqcons=(), f_ieqcons=None, bounds=(), fprime=None, fprime_eqcons=None, fprime_ieqcons=None, args=(), iter=100, acc=1e-06, iprint=1, disp=None, full_output=0, epsilon=_epsilon, callback=None):
def _minimize_slsqp(func, x0, args=(), jac=None, bounds=None, constraints=(), maxiter=100, ftol=1e-06, iprint=1, disp=False, eps=_epsilon, callback=None, **unknown_options):
def regularized_lsq_with_qr(m, n, R, QTb, perm, diag, copy_R=True):
def backtracking(A, g, x, p, theta, p_dot_g, lb, ub):
def select_step(x, A_h, g_h, c_h, p, p_h, d, lb, ub, theta):
def lsq_linear(A, b, bounds=((- np.inf), np.inf), method='trf', tol=1e-10, lsq_solver=None, lsmr_tol=None, max_iter=None, verbose=0):
def intersect_trust_region(x, s, Delta):
def solve_lsq_trust_region(n, m, uf, s, V, Delta, initial_alpha=None, rtol=0.01, max_iter=10):
def solve_trust_region_2d(B, g, Delta):
def update_tr_radius(Delta, actual_reduction, predicted_reduction, step_norm, bound_hit):
def build_quadratic_1d(J, g, s, diag=None, s0=None):
def minimize_quadratic_1d(a, b, lb, ub, c=0):
def evaluate_quadratic(J, g, s, diag=None):
def in_bounds(x, lb, ub):
def step_size_to_bound(x, s, lb, ub):
def find_active_constraints(x, lb, ub, rtol=1e-10):
def make_strictly_feasible(x, lb, ub, rstep=1e-10):
def CL_scaling_vector(x, g, lb, ub):
def reflective_transformation(y, lb, ub):
def compute_grad(J, f):
def compute_jac_scale(J, scale_inv_old=None):
def left_multiplied_operator(J, d):
def right_multiplied_operator(J, d):
def regularized_lsq_operator(J, diag):
def right_multiply(J, d, copy=True):
def left_multiply(J, d, copy=True):
def check_termination(dF, F, dx_norm, x_norm, ratio, ftol, xtol):
def scale_for_robust_loss_function(J, f, rho):
def compute_kkt_optimality(g, on_bound):
def lsmr_operator(Jop, d, active_set):
def find_intersection(x, tr_bounds, lb, ub):
def dogleg_step(x, newton_step, g, a, b, tr_bounds, lb, ub):
def select_step(x, J_h, diag_h, g_h, p, p_h, d, Delta, lb, ub, theta):
def least_squares(fun, x0, jac='2-point', bounds=((- np.inf), np.inf), method='trf', ftol=1e-08, xtol=1e-08, gtol=1e-08, x_scale=1.0, loss='linear', f_scale=1.0, diff_step=None, tr_solver=None, tr_options={}, jac_sparsity=None, max_nfev=None, verbose=0, args=(), kwargs={}):
def _minimize_dogleg(fun, x0, args=(), jac=None, hess=None, **trust_region_options):
def root(fun, x0, args=(), method='hybr', jac=None, tol=None, callback=None, options=None):
def _root_leastsq(func, x0, args=(), jac=None, col_deriv=0, xtol=1.49012e-08, ftol=1.49012e-08, gtol=0.0, maxiter=0, eps=0.0, factor=100, diag=None, **unknown_options):
def _root_broyden1_doc():
def _root_broyden2_doc():
def _root_anderson_doc():
def _root_linearmixing_doc():
def _root_diagbroyden_doc():
def _root_excitingmixing_doc():
def _root_krylov_doc():
def nnls(A, b):
def fmin_l_bfgs_b(func, x0, fprime=None, args=(), approx_grad=0, bounds=None, m=10, factr=10000000.0, pgtol=1e-05, epsilon=1e-08, iprint=(-1), maxfun=15000, maxiter=15000, disp=None, callback=None, maxls=20):
def _minimize_lbfgsb(fun, x0, args=(), jac=None, bounds=None, disp=None, maxcor=10, ftol=2.220446049250313e-09, gtol=1e-05, eps=1e-08, maxfun=15000, maxiter=15000, iprint=(-1), callback=None, maxls=20, **unknown_options):
def minimize(fun, x0, args=(), method=None, jac=None, hess=None, hessp=None, bounds=None, constraints=(), tol=None, callback=None, options=None):
def minimize_scalar(fun, bracket=None, bounds=None, args=(), method='brent', tol=None, options=None):
def linprog_verbose_callback(xk, **kwargs):
def linprog_terse_callback(xk, **kwargs):
def _pivot_col(T, tol=1e-12, bland=False):
def _pivot_row(T, pivcol, phase, tol=1e-12):
def _solve_simplex(T, n, basis, maxiter=1000, phase=2, callback=None, tol=1e-12, nit0=0, bland=False):
def _linprog_simplex(c, A_ub=None, b_ub=None, A_eq=None, b_eq=None, bounds=None, maxiter=1000, disp=False, callback=None, tol=1e-12, bland=False, **unknown_options):
def linprog(c, A_ub=None, b_ub=None, A_eq=None, b_eq=None, bounds=None, method='simplex', callback=None, options=None):
def _adjust_scheme_to_bounds(x0, h, num_steps, scheme, lb, ub):
def group_columns(A, order=0):
def approx_derivative(fun, x0, method='3-point', rel_step=None, f0=None, bounds=((- np.inf), np.inf), sparsity=None, args=(), kwargs={}):
def check_derivative(fun, jac, x0, bounds=((- np.inf), np.inf), args=(), kwargs={}):
def needs_g77_abi_wrapper(info):
def get_g77_abi_wrappers(info):
def needs_sgemv_fix(info):
def get_sgemv_fix(info):
def split_fortran_files(source_dir, subroutines=None):
def mminfo(source):
def mmread(source):
def mmwrite(target, a, comment='', field=None, precision=None, symmetry=None):
def _is_fromfile_compatible(stream):
def _read_fmt_chunk(fid, is_big_endian):
def read(filename, mmap=False):
def write(filename, rate, data):
def check_simple(ncfileobj):
def assert_mask_matches(arr, expected_mask):
def object_array(*args):
def assert_identical(a, b):
def assert_array_identical(a, b):
def _align_32(f):
def _skip_bytes(f, n):
def _read_bytes(f, n):
def _read_byte(f):
def _read_long(f):
def _read_int16(f):
def _read_int32(f):
def _read_int64(f):
def _read_uint16(f):
def _read_uint32(f):
def _read_uint64(f):
def _read_float32(f):
def _read_float64(f):
def _read_string(f):
def _read_string_data(f):
def _read_data(f, dtype):
def _read_structure(f, array_desc, struct_desc):
def _read_array(f, typecode, array_desc):
def _read_record(f):
def _read_typedesc(f):
def _read_arraydesc(f):
def _read_structdesc(f):
def _read_tagdesc(f):
def readsav(file_name, idict=None, python_dict=False, uncompressed_file_name=None, verbose=False):
def _make_tag(base_dt, val, mdtype, sde=False):
def mlarr(*args, **kwargs):
def types_compatible(var1, var2):
def _check_level(label, expected, actual):
def assert_any_equal(output, alternatives):
def _open_file(file_like, appendmat):
@docfiller DCNL def mat_reader_factory(file_name, appendmat=True, **kwargs):
@docfiller DCNL def loadmat(file_name, mdict=None, appendmat=True, **kwargs):
@docfiller DCNL def savemat(file_name, mdict, appendmat=True, format='5', long_field_names=False, do_compression=False, oned_as='row'):
@docfiller DCNL def whosmat(file_name, appendmat=True, **kwargs):
def convert_dtypes(dtype_template, order_code):
def read_dtype(mat_stream, a_dtype):
def get_matfile_version(fileobj):
def matdims(arr, oned_as='column'):
def arr_dtype_number(arr, num):
def arr_to_chars(arr):
def to_numpy_code(code):
def arr_to_2d(arr, oned_as='row'):
def _convert_codecs(template, byte_order):
def varmats_from_mat(file_obj):
def to_writeable(source):
def _nbytes_full(fmt, nlines):
def hb_read(path_or_open_file):
def hb_write(path_or_open_file, m, hb_info=None):
def parse_type(attrtype):
def get_nominal(attribute):
def read_data_list(ofile):
def get_ndata(ofile):
def maxnomlen(atrv):
def get_nom_val(atrv):
def go_data(ofile):
def tokenize_attribute(iterable, attribute):
def read_header(ofile):
def safe_float(x):
def loadarff(f):
def docformat(docstring, docdict=None):
def inherit_docstring_from(cls):
def indentcount_lines(lines):
def filldoc(docdict, unindent_params=True):
def unindent_dict(docdict):
def unindent_string(docstring):
def central_diff_weights(Np, ndiv=1):
def derivative(func, x0, dx=1.0, n=1, args=(), order=3):
def lena():
def ascent():
def face(gray=False):
def bytescale(data, cmin=None, cmax=None, high=255, low=0):
def imread(name, flatten=False, mode=None):
def imsave(name, arr, format=None):
def fromimage(im, flatten=False, mode=None):
def toimage(arr, high=255, low=0, cmin=None, cmax=None, pal=None, mode=None, channel_axis=None):
def imrotate(arr, angle, interp='bilinear'):
def imshow(arr):
def imresize(arr, size, interp='bilinear', mode=None):
def imfilter(arr, ftype):
def _make_complex_eigvecs(w, vin, dtype):
def eig(a, b=None, left=False, right=True, overwrite_a=False, overwrite_b=False, check_finite=True, homogeneous_eigvals=False):
def eigh(a, b=None, lower=True, eigvals_only=False, overwrite_a=False, overwrite_b=False, turbo=True, eigvals=None, type=1, check_finite=True):
def eig_banded(a_band, lower=False, eigvals_only=False, overwrite_a_band=False, select='a', select_range=None, max_ev=0, check_finite=True):
def eigvals(a, b=None, overwrite_a=False, check_finite=True, homogeneous_eigvals=False):
def eigvalsh(a, b=None, lower=True, overwrite_a=False, overwrite_b=False, turbo=True, eigvals=None, type=1, check_finite=True):
def eigvals_banded(a_band, lower=False, overwrite_a_band=False, select='a', select_range=None, check_finite=True):
def hessenberg(a, calc_q=False, overwrite_a=False, check_finite=True):
def lu_factor(a, overwrite_a=False, check_finite=True):
def lu_solve(lu_and_piv, b, trans=0, overwrite_b=False, check_finite=True):
def lu(a, permute_l=False, overwrite_a=False, check_finite=True):
def polar(a, side='right'):
def expm_frechet(A, E, method=None, compute_expm=True, check_finite=True):
def expm_frechet_block_enlarge(A, E):
def vec(M):
def expm_frechet_kronform(A, method=None, check_finite=True):
def expm_cond(A, check_finite=True):
def _get_func(func, ps='sdzc'):
def _get_al_mohy_higham_2012_experiment_1():
def _load_data(name):
def _eps_cast(dtyp):
def symrand(dim_or_eigv):
def random_rot(dim):
def eigenhproblem_standard(desc, dim, dtype, overwrite, lower, turbo, eigenvalues):
def eigenhproblem_general(desc, dim, dtype, overwrite, lower, turbo, eigenvalues):
def test_aligned_mem_float():
def test_aligned_mem():
def test_aligned_mem_complex():
def tri(N, M=None, k=0, dtype=None):
def tril(m, k=0):
def triu(m, k=0):
def toeplitz(c, r=None):
def circulant(c):
def hankel(c, r=None):
def hadamard(n, dtype=int):
def leslie(f, s):
def kron(a, b):
def block_diag(*arrs):
def companion(a):
def helmert(n, full=False):
def hilbert(n):
def invhilbert(n, exact=False):
def pascal(n, kind='symmetric', exact=True):
def invpascal(n, kind='symmetric', exact=True):
def dft(n, scale=None):
def seed(seed=None):
def rand(*shape):
def interp_decomp(A, eps_or_k, rand=True):
def reconstruct_matrix_from_id(B, idx, proj):
def reconstruct_interp_matrix(idx, proj):
def reconstruct_skel_matrix(A, k, idx):
def id_to_svd(B, idx, proj):
def estimate_spectral_norm(A, its=20):
def estimate_spectral_norm_diff(A, B, its=20):
def svd(A, eps_or_k, rand=True):
def estimate_rank(A, eps):
def qz(A, B, output='real', lwork=None, sort=None, overwrite_a=False, overwrite_b=False, check_finite=True):
def ordqz(A, B, sort='lhp', output='real', overwrite_a=False, overwrite_b=False, check_finite=True):
def id_srand(n):
def id_srandi(t):
def id_srando():
def idd_frm(n, w, x):
def idd_sfrm(l, n, w, x):
def idd_frmi(m):
def idd_sfrmi(l, m):
def iddp_id(eps, A):
def iddr_id(A, k):
def idd_reconid(B, idx, proj):
def idd_reconint(idx, proj):
def idd_copycols(A, k, idx):
def idd_id2svd(B, idx, proj):
def idd_snorm(m, n, matvect, matvec, its=20):
def idd_diffsnorm(m, n, matvect, matvect2, matvec, matvec2, its=20):
def iddr_svd(A, k):
def iddp_svd(eps, A):
def iddp_aid(eps, A):
def idd_estrank(eps, A):
def iddp_asvd(eps, A):
def iddp_rid(eps, m, n, matvect):
def idd_findrank(eps, m, n, matvect):
def iddp_rsvd(eps, m, n, matvect, matvec):
def iddr_aid(A, k):
def iddr_aidi(m, n, k):
def iddr_asvd(A, k):
def iddr_rid(m, n, matvect, k):
def iddr_rsvd(m, n, matvect, matvec, k):
def idz_frm(n, w, x):
def idz_sfrm(l, n, w, x):
def idz_frmi(m):
def idz_sfrmi(l, m):
def idzp_id(eps, A):
def idzr_id(A, k):
def idz_reconid(B, idx, proj):
def idz_reconint(idx, proj):
def idz_copycols(A, k, idx):
def idz_id2svd(B, idx, proj):
def idz_snorm(m, n, matveca, matvec, its=20):
def idz_diffsnorm(m, n, matveca, matveca2, matvec, matvec2, its=20):
def idzr_svd(A, k):
def idzp_svd(eps, A):
def idzp_aid(eps, A):
def idz_estrank(eps, A):
def idzp_asvd(eps, A):
def idzp_rid(eps, m, n, matveca):
def idz_findrank(eps, m, n, matveca):
def idzp_rsvd(eps, m, n, matveca, matvec):
def idzr_aid(A, k):
def idzr_aidi(m, n, k):
def idzr_asvd(A, k):
def idzr_rid(m, n, matveca, k):
def idzr_rsvd(m, n, matveca, matvec, k):
def _asarray_square(A):
def _maybe_real(A, B, tol=None):
def fractional_matrix_power(A, t):
def logm(A, disp=True):
def expm(A, q=None):
@np.deprecate(new_name='expm') DCNL def expm2(A):
@np.deprecate(new_name='expm') DCNL def expm3(A, q=20):
def cosm(A):
def sinm(A):
def tanm(A):
def coshm(A):
def sinhm(A):
def tanhm(A):
def funm(A, func, disp=True):
def signm(A, disp=True):
def norm(a, ord=None, axis=None, keepdims=False):
def _datacopied(arr, original):
def find_best_blas_type(arrays=(), dtype=None):
def _get_funcs(names, arrays, dtype, lib_name, fmodule, cmodule, fmodule_name, cmodule_name, alias):
def get_blas_funcs(names, arrays=(), dtype=None):
def get_lapack_funcs(names, arrays=(), dtype=None):
def _compute_lwork(routine, *args, **kwargs):
def get_flinalg_funcs(names, arrays=(), debug=0):
def _onenormest_m1_power(A, p, t=2, itmax=5, compute_v=False, compute_w=False):
def _unwindk(z):
def _briggs_helper_function(a, k):
def _fractional_power_superdiag_entry(l1, l2, t12, p):
def _logm_superdiag_entry(l1, l2, t12):
def _inverse_squaring_helper(T0, theta):
def _fractional_power_pade(R, t, m):
def _remainder_matrix_power_triu(T, t):
def _remainder_matrix_power(A, t):
def _fractional_matrix_power(A, p):
def _logm_triu(T):
def _logm(A):
def _get_array(shape, dtype):
def assert_no_overwrite(call, shapes, dtypes=None):
def orthogonal_procrustes(A, B, check_finite=True):
def schur(a, output='real', lwork=None, overwrite_a=False, sort=None, check_finite=True):
def rsf2csf(T, Z, check_finite=True):
def svd(a, full_matrices=True, compute_uv=True, overwrite_a=False, check_finite=True, lapack_driver='gesdd'):
def svdvals(a, overwrite_a=False, check_finite=True):
def diagsvd(s, M, N):
def orth(A):
def subspace_angles(A, B):
def safecall(f, name, *args, **kwargs):
def qr(a, overwrite_a=False, lwork=None, mode='full', pivoting=False, check_finite=True):
def qr_multiply(a, c, mode='right', pivoting=False, conjugate=False, overwrite_a=False, overwrite_c=False):
def rq(a, overwrite_a=False, lwork=None, mode='full', check_finite=True):
def _sqrtm_triu(T, blocksize=64):
def sqrtm(A, disp=True, blocksize=64):
def _cholesky(a, lower=False, overwrite_a=False, clean=True, check_finite=True):
def cholesky(a, lower=False, overwrite_a=False, check_finite=True):
def cho_factor(a, lower=False, overwrite_a=False, check_finite=True):
def cho_solve(c_and_lower, b, overwrite_b=False, check_finite=True):
def cholesky_banded(ab, overwrite_ab=False, lower=False, check_finite=True):
def cho_solve_banded(cb_and_lower, b, overwrite_b=False, check_finite=True):
def solve_sylvester(a, b, q):
def solve_continuous_lyapunov(a, q):
def _solve_discrete_lyapunov_direct(a, q):
def _solve_discrete_lyapunov_bilinear(a, q):
def solve_discrete_lyapunov(a, q, method=None):
def solve_continuous_are(a, b, q, r, e=None, s=None, balanced=True):
def solve_discrete_are(a, b, q, r, e=None, s=None, balanced=True):
def _are_validate_args(a, b, q, r, e, s, eq_type='care'):
def solve(a, b, sym_pos=False, lower=False, overwrite_a=False, overwrite_b=False, debug=None, check_finite=True, assume_a='gen', transposed=False):
def solve_triangular(a, b, trans=0, lower=False, unit_diagonal=False, overwrite_b=False, debug=None, check_finite=True):
def solve_banded(l_and_u, ab, b, overwrite_ab=False, overwrite_b=False, debug=None, check_finite=True):
def solveh_banded(ab, b, overwrite_ab=False, overwrite_b=False, lower=False, check_finite=True):
def solve_toeplitz(c_or_cr, b, check_finite=True):
def solve_circulant(c, b, singular='raise', tol=None, caxis=(-1), baxis=0, outaxis=0):
def inv(a, overwrite_a=False, check_finite=True):
def det(a, overwrite_a=False, check_finite=True):
def lstsq(a, b, cond=None, overwrite_a=False, overwrite_b=False, check_finite=True, lapack_driver=None):
def pinv(a, cond=None, rcond=None, return_rank=False, check_finite=True):
def pinv2(a, cond=None, rcond=None, return_rank=False, check_finite=True):
def pinvh(a, cond=None, rcond=None, lower=True, return_rank=False, check_finite=True):
def matrix_balance(A, permute=True, scale=True, separate=False, overwrite_a=False):
def binned_statistic(x, values, statistic='mean', bins=10, range=None):
def binned_statistic_2d(x, y, values, statistic='mean', bins=10, range=None, expand_binnumbers=False):
def binned_statistic_dd(sample, values, statistic='mean', bins=10, range=None, expand_binnumbers=False):
def linregress(x, y=None):
def theilslopes(y, x=None, alpha=0.95):
@pytest.mark.parametrize('dist', ['alpha', 'betaprime', 'burr', 'burr12', 'fatiguelife', 'invgamma', 'invgauss', 'invweibull', 'johnsonsb', 'levy', 'levy_l', 'lognorm', 'gilbrat', 'powerlognorm', 'rayleigh', 'wald']) DCNL def test_support(dist):
def test_powerlaw_stats():
def test_genextreme_give_no_warnings():
def test_crystalball_function():
def test_crystalball_function_moments():
def _check_warnings(warn_list, expected_type, expected_len):
def test_gaussian_kde_monkeypatch():
def test_kde_integer_input():
def check_discrete_chisquare(distfn, arg, rvs, alpha, msg):
def test_expon_fit():
def test_tukeylambda_stats_known_exact():
def test_tukeylambda_stats_mpmath():
def test_tukeylambda_stats_invalid():
def bayes_mvs(data, alpha=0.9):
def mvsdist(data):
def kstat(data, n=2):
def kstatvar(data, n=2):
def _calc_uniform_order_statistic_medians(n):
def _parse_dist_kw(dist, enforce_subclass=True):
def _add_axis_labels_title(plot, xlabel, ylabel, title):
def probplot(x, sparams=(), dist='norm', fit=True, plot=None, rvalue=False):
def ppcc_max(x, brack=(0.0, 1.0), dist='tukeylambda'):
def ppcc_plot(x, a, b, dist='tukeylambda', plot=None, N=80):
def boxcox_llf(lmb, data):
def boxcox(x, lmbda=None, alpha=None):
def boxcox_normmax(x, brack=((-2.0), 2.0), method='pearsonr'):
def boxcox_normplot(x, la, lb, plot=None, N=80):
def shapiro(x, a=None, reta=False):
def anderson(x, dist='norm'):
def _anderson_ksamp_midrank(samples, Z, Zstar, k, n, N):
def _anderson_ksamp_right(samples, Z, Zstar, k, n, N):
def anderson_ksamp(samples, midrank=True):
def ansari(x, y):
def bartlett(*args):
def levene(*args, **kwds):
@setastest(False) DCNL def binom_test(x, n=None, p=0.5, alternative='two-sided'):
def fligner(*args, **kwds):
def mood(x, y, axis=0):
def wilcoxon(x, y=None, zero_method='wilcox', correction=False):
@setastest(False) DCNL def median_test(*args, **kwds):
def circmean(samples, high=(2 * pi), low=0, axis=None):
def circvar(samples, high=(2 * pi), low=0, axis=None):
def circstd(samples, high=(2 * pi), low=0, axis=None):
def tukeylambda_variance(lam):
def tukeylambda_kurtosis(lam):
def margins(a):
def expected_freq(observed):
def chi2_contingency(observed, correction=True, lambda_=None):
def _argus_phi(chi):
def _skew(data):
def _kurtosis(data):
def argsreduce(cond, *args):
def _drv2_moment(self, n, *args):
def entropy(pk, qk=None, base=None):
def _expect(fun, lb, ub, x0, inc, maxcount=1000, tolerance=1e-10, chunksize=32):
def _iter_chunked(x0, x1, chunksize=4, inc=1):
def get_distribution_names(namespace_pairs, rv_base_class):
def argstoarray(*args):
def find_repeats(arr):
def count_tied_groups(x, use_missing=False):
def rankdata(data, axis=None, use_missing=False):
def mode(a, axis=0):
@np.deprecate(message='mstats.betai DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.17.0; DCSP use DCSP special.betainc DCSP instead.') DCNL def betai(a, b, x):
def msign(x):
def pearsonr(x, y):
def spearmanr(x, y, use_ties=True):
def kendalltau(x, y, use_ties=True, use_missing=False):
def kendalltau_seasonal(x):
def pointbiserialr(x, y):
def linregress(x, y=None):
def theilslopes(y, x=None, alpha=0.95):
def ttest_1samp(a, popmean, axis=0):
def ttest_ind(a, b, axis=0, equal_var=True):
def ttest_rel(a, b, axis=0):
def mannwhitneyu(x, y, use_continuity=True):
def kruskal(*args):
def ks_twosamp(data1, data2, alternative='two-sided'):
@np.deprecate(message='mstats.threshold DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.17.0') DCNL def threshold(a, threshmin=None, threshmax=None, newval=0):
def trima(a, limits=None, inclusive=(True, True)):
def trimr(a, limits=None, inclusive=(True, True), axis=None):
def trim(a, limits=None, inclusive=(True, True), relative=False, axis=None):
def trimboth(data, proportiontocut=0.2, inclusive=(True, True), axis=None):
def trimtail(data, proportiontocut=0.2, tail='left', inclusive=(True, True), axis=None):
def trimmed_stde(a, limits=(0.1, 0.1), inclusive=(1, 1), axis=None):
def _mask_to_limits(a, limits, inclusive):
def tmean(a, limits=None, inclusive=(True, True), axis=None):
def tvar(a, limits=None, inclusive=(True, True), axis=0, ddof=1):
def tmin(a, lowerlimit=None, axis=0, inclusive=True):
def tmax(a, upperlimit=None, axis=0, inclusive=True):
def tsem(a, limits=None, inclusive=(True, True), axis=0, ddof=1):
def winsorize(a, limits=None, inclusive=(True, True), inplace=False, axis=None):
def moment(a, moment=1, axis=0):
def variation(a, axis=0):
def skew(a, axis=0, bias=True):
def kurtosis(a, axis=0, fisher=True, bias=True):
def describe(a, axis=0, ddof=0, bias=True):
def stde_median(data, axis=None):
def skewtest(a, axis=0):
def kurtosistest(a, axis=0):
def normaltest(a, axis=0):
def mquantiles(a, prob=list([0.25, 0.5, 0.75]), alphap=0.4, betap=0.4, axis=None, limit=()):
def scoreatpercentile(data, per, limit=(), alphap=0.4, betap=0.4):
def plotting_positions(data, alpha=0.4, beta=0.4):
def obrientransform(*args):
@np.deprecate(message='mstats.signaltonoise DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.16.0') DCNL def signaltonoise(data, axis=0):
def sem(a, axis=0, ddof=1):
def f_oneway(*args):
@np.deprecate(message='mstats.f_value_wilks_lambda DCSP deprecated DCSP in DCSP scipy DCSP 0.17.0') DCNL def f_value_wilks_lambda(ER, EF, dfnum, dfden, a, b):
def friedmanchisquare(*args):
def hdquantiles(data, prob=list([0.25, 0.5, 0.75]), axis=None, var=False):
def hdmedian(data, axis=(-1), var=False):
def hdquantiles_sd(data, prob=list([0.25, 0.5, 0.75]), axis=None):
def trimmed_mean_ci(data, limits=(0.2, 0.2), inclusive=(True, True), alpha=0.05, axis=None):
def mjci(data, prob=[0.25, 0.5, 0.75], axis=None):
def mquantiles_cimj(data, prob=[0.25, 0.5, 0.75], alpha=0.05, axis=None):
def median_cihs(data, alpha=0.05, axis=None):
def compare_medians_ms(group_1, group_2, axis=None):
def idealfourths(data, axis=None):
def rsh(data, points=None):
def gmean(a, axis=0, dtype=None):
def hmean(a, axis=0, dtype=None):
def mode(a, axis=0, nan_policy='propagate'):
def _mask_to_limits(a, limits, inclusive):
def tmean(a, limits=None, inclusive=(True, True), axis=None):
def tvar(a, limits=None, inclusive=(True, True), axis=0, ddof=1):
def tmin(a, lowerlimit=None, axis=0, inclusive=True, nan_policy='propagate'):
def tmax(a, upperlimit=None, axis=0, inclusive=True, nan_policy='propagate'):
def tstd(a, limits=None, inclusive=(True, True), axis=0, ddof=1):
def tsem(a, limits=None, inclusive=(True, True), axis=0, ddof=1):
def moment(a, moment=1, axis=0, nan_policy='propagate'):
def variation(a, axis=0, nan_policy='propagate'):
def skew(a, axis=0, bias=True, nan_policy='propagate'):
def kurtosis(a, axis=0, fisher=True, bias=True, nan_policy='propagate'):
def describe(a, axis=0, ddof=1, bias=True, nan_policy='propagate'):
def skewtest(a, axis=0, nan_policy='propagate'):
def kurtosistest(a, axis=0, nan_policy='propagate'):
def normaltest(a, axis=0, nan_policy='propagate'):
def jarque_bera(x):
def itemfreq(a):
def scoreatpercentile(a, per, limit=(), interpolation_method='fraction', axis=None):
def percentileofscore(a, score, kind='rank'):
@np.deprecate(message='scipy.stats.histogram2 DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.16.0; DCSP use DCSP np.histogram2d DCSP instead') DCNL def histogram2(a, bins):
def _histogram(a, numbins=10, defaultlimits=None, weights=None, printextras=False):
def cumfreq(a, numbins=10, defaultreallimits=None, weights=None):
def relfreq(a, numbins=10, defaultreallimits=None, weights=None):
def obrientransform(*args):
@np.deprecate(message='scipy.stats.signaltonoise DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.16.0') DCNL def signaltonoise(a, axis=0, ddof=0):
def sem(a, axis=0, ddof=1, nan_policy='propagate'):
def zscore(a, axis=0, ddof=0):
def zmap(scores, compare, axis=0, ddof=0):
def iqr(x, axis=None, rng=(25, 75), scale='raw', nan_policy='propagate', interpolation='linear', keepdims=False):
def _iqr_percentile(x, q, axis=None, interpolation='linear', keepdims=False, contains_nan=False):
def _iqr_nanpercentile(x, q, axis=None, interpolation='linear', keepdims=False, contains_nan=False):
@np.deprecate(message='stats.threshold DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.17.0') DCNL def threshold(a, threshmin=None, threshmax=None, newval=0):
def sigmaclip(a, low=4.0, high=4.0):
def trimboth(a, proportiontocut, axis=0):
def trim1(a, proportiontocut, tail='right', axis=0):
def trim_mean(a, proportiontocut, axis=0):
def f_oneway(*args):
def pearsonr(x, y):
def fisher_exact(table, alternative='two-sided'):
def spearmanr(a, b=None, axis=0, nan_policy='propagate'):
def pointbiserialr(x, y):
def kendalltau(x, y, initial_lexsort=None, nan_policy='propagate'):
def weightedtau(x, y, rank=True, weigher=None, additive=True):
def ttest_1samp(a, popmean, axis=0, nan_policy='propagate'):
def _ttest_finish(df, t):
def ttest_ind_from_stats(mean1, std1, nobs1, mean2, std2, nobs2, equal_var=True):
def ttest_ind(a, b, axis=0, equal_var=True, nan_policy='propagate'):
def ttest_rel(a, b, axis=0, nan_policy='propagate'):
def kstest(rvs, cdf, args=(), N=20, alternative='two-sided', mode='approx'):
def _count(a, axis=None):
def power_divergence(f_obs, f_exp=None, ddof=0, axis=0, lambda_=None):
def chisquare(f_obs, f_exp=None, ddof=0, axis=0):
def ks_2samp(data1, data2):
def tiecorrect(rankvals):
def mannwhitneyu(x, y, use_continuity=True, alternative=None):
def ranksums(x, y):
def kruskal(*args, **kwargs):
def friedmanchisquare(*args):
def combine_pvalues(pvalues, method='fisher', weights=None):
@np.deprecate(message='stats.chisqprob DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.17.0; DCSP use DCSP stats.distributions.chi2.sf DCSP instead.') DCNL def chisqprob(chisq, df):
@np.deprecate(message='stats.betai DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.17.0; DCSP use DCSP special.betainc DCSP instead') DCNL def betai(a, b, x):
@np.deprecate(message='stats.f_value_wilks_lambda DCSP deprecated DCSP in DCSP scipy DCSP 0.17.0') DCNL def f_value_wilks_lambda(ER, EF, dfnum, dfden, a, b):
@np.deprecate(message='stats.f_value DCSP deprecated DCSP in DCSP scipy DCSP 0.17.0') DCNL def f_value(ER, EF, dfR, dfF):
@np.deprecate(message='stats.f_value_multivariate DCSP deprecated DCSP in DCSP scipy DCSP 0.17.0') DCNL def f_value_multivariate(ER, EF, dfnum, dfden):
def find_repeats(arr):
def _sum_of_squares(a, axis=0):
def _square_of_sums(a, axis=0):
@np.deprecate(message='scipy.stats.fastsort DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.16.0') DCNL def fastsort(a):
def rankdata(a, method='average'):
def _squeeze_output(out):
def _eigvalsh_to_eps(spectrum, cond=None, rcond=None):
def _pinv_1d(v, eps=1e-05):
def _lnB(alpha):
def _cho_inv_batch(a, check_finite=True):
def whiten(obs, check_finite=True):
def vq(obs, code_book, check_finite=True):
def py_vq(obs, code_book, check_finite=True):
def _py_vq_1d(obs, code_book):
def py_vq2(obs, code_book, check_finite=True):
def _kmeans(obs, guess, thresh=1e-05):
def kmeans(obs, k_or_guess, iter=20, thresh=1e-05, check_finite=True):
def _kpoints(data, k):
def _krandinit(data, k):
def _missing_warn():
def _missing_raise():
def kmeans2(data, k, iter=10, thresh=1e-05, minit='random', missing='warn', check_finite=True):
def _kmeans2(data, code, niter, nc, missing):
def _copy_array_if_base_present(a):
def _copy_arrays_if_base_present(T):
def _randdm(pnts):
def single(y):
def complete(y):
def average(y):
def weighted(y):
def centroid(y):
def median(y):
def ward(y):
def linkage(y, method='single', metric='euclidean', optimal_ordering=False):
def _order_cluster_tree(Z):
def cut_tree(Z, n_clusters=None, height=None):
def to_tree(Z, rd=False):
def optimal_leaf_ordering(Z, y, metric='euclidean'):
def cophenet(Z, Y=None):
def inconsistent(Z, d=2):
def from_mlab_linkage(Z):
def to_mlab_linkage(Z):
def is_monotonic(Z):
def is_valid_im(R, warning=False, throw=False, name=None):
def is_valid_linkage(Z, warning=False, throw=False, name=None):
def num_obs_linkage(Z):
def correspond(Z, Y):
def fcluster(Z, t, criterion='inconsistent', depth=2, R=None, monocrit=None):
def fclusterdata(X, t, criterion='inconsistent', metric='euclidean', depth=2, method='single', R=None):
def leaves_list(Z):
def _remove_dups(L):
def set_link_color_palette(palette):
def dendrogram(Z, p=30, truncate_mode=None, color_threshold=None, get_leaves=True, orientation='top', labels=None, count_sort=False, distance_sort=False, show_leaf_counts=True, no_plot=False, no_labels=False, leaf_font_size=None, leaf_rotation=None, leaf_label_func=None, show_contracted=False, link_color_func=None, ax=None, above_threshold_color='b'):
def _dendrogram_calculate_info(Z, p, truncate_mode, color_threshold=np.inf, get_leaves=True, orientation='top', labels=None, count_sort=False, distance_sort=False, show_leaf_counts=False, i=(-1), iv=0.0, ivl=[], n=0, icoord_list=[], dcoord_list=[], lvs=None, mhr=False, current_color=[], color_list=[], currently_below_threshold=[], leaf_label_func=None, level=0, contraction_marks=None, link_color_func=None, above_threshold_color='b'):
def is_isomorphic(T1, T2):
def maxdists(Z):
def maxinconsts(Z, R):
def maxRstat(Z, R, i):
def leaders(Z, T):
@_held_figure DCNL def delaunay_plot_2d(tri, ax=None):
@_held_figure DCNL def convex_hull_plot_2d(hull, ax=None):
@_held_figure DCNL def voronoi_plot_2d(vor, ax=None, **kw):
def _add_inc_data(name, chunksize):
def calc_circumcenters(tetrahedrons):
def project_to_sphere(points, center, radius):
def procrustes(data1, data2):
def minkowski_distance_p(x, y, p=2):
def minkowski_distance(x, y, p=2):
def distance_matrix(x, y, p=2, threshold=1000000):
def _copy_array_if_base_present(a):
def directed_hausdorff(u, v, seed=0):
def minkowski(u, v, p):
def wminkowski(u, v, p, w):
def euclidean(u, v):
def sqeuclidean(u, v):
def cosine(u, v):
def correlation(u, v):
def hamming(u, v):
def jaccard(u, v):
def kulsinski(u, v):
def seuclidean(u, v, V):
def cityblock(u, v):
def mahalanobis(u, v, VI):
def chebyshev(u, v):
def braycurtis(u, v):
def canberra(u, v):
def yule(u, v):
def matching(u, v):
def dice(u, v):
def rogerstanimoto(u, v):
def russellrao(u, v):
def sokalmichener(u, v):
def sokalsneath(u, v):
def pdist(X, metric='euclidean', p=None, w=None, V=None, VI=None):
def squareform(X, force='no', checks=True):
def is_valid_dm(D, tol=0.0, throw=False, name='D', warning=False):
def is_valid_y(y, warning=False, throw=False, name=None):
def num_obs_dm(d):
def num_obs_y(Y):
def cdist(XA, XB, metric='euclidean', p=None, V=None, VI=None, w=None):
def dct(x, type=2, n=None, axis=(-1), norm=None, overwrite_x=False):
def idct(x, type=2, n=None, axis=(-1), norm=None, overwrite_x=False):
def _dct(x, type, n=None, axis=(-1), overwrite_x=False, normalize=None):
def dst(x, type=2, n=None, axis=(-1), norm=None, overwrite_x=False):
def idst(x, type=2, n=None, axis=(-1), norm=None, overwrite_x=False):
def _dst(x, type, n=None, axis=(-1), overwrite_x=False, normalize=None):
def rfftfreq(n, d=1.0):
def next_fast_len(target):
def diff(x, order=1, period=None, _cache=_cache):
def tilbert(x, h, period=None, _cache=_cache):
def itilbert(x, h, period=None, _cache=_cache):
def hilbert(x, _cache=_cache):
def ihilbert(x):
def cs_diff(x, a, b, period=None, _cache=_cache):
def sc_diff(x, a, b, period=None, _cache=_cache):
def ss_diff(x, a, b, period=None, _cache=_cache):
def cc_diff(x, a, b, period=None, _cache=_cache):
def shift(x, a, period=None, _cache=_cache):
def _datacopied(arr, original):
def _is_safe_size(n):
def _asfarray(x):
def _fix_shape(x, n, axis):
def _raw_fft(x, n, axis, direction, overwrite_x, work_function):
def fft(x, n=None, axis=(-1), overwrite_x=False):
def ifft(x, n=None, axis=(-1), overwrite_x=False):
def rfft(x, n=None, axis=(-1), overwrite_x=False):
def irfft(x, n=None, axis=(-1), overwrite_x=False):
def _raw_fftnd(x, s, axes, direction, overwrite_x, work_function):
def fftn(x, shape=None, axes=None, overwrite_x=False):
def ifftn(x, shape=None, axes=None, overwrite_x=False):
def fft2(x, shape=None, axes=((-2), (-1)), overwrite_x=False):
def ifft2(x, shape=None, axes=((-2), (-1)), overwrite_x=False):
def polynomial(order):
def _conv(obj, dtype=None):
def _report_error(info):
def convert_temperature(val, old_scale, new_scale):
@_np.deprecate(message='scipy.constants.C2K DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.18.0. DCSP Use DCSP scipy.constants.convert_temperature DCSP instead. DCSP Note DCSP that DCSP the DCSP new DCSP function DCSP has DCSP a DCSP different DCSP signature.') DCNL def C2K(C):
@_np.deprecate(message='scipy.constants.K2C DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.18.0. DCSP Use DCSP scipy.constants.convert_temperature DCSP instead. DCSP Note DCSP that DCSP the DCSP new DCSP function DCSP has DCSP a DCSP different DCSP signature.') DCNL def K2C(K):
@_np.deprecate(message='scipy.constants.F2C DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.18.0. DCSP Use DCSP scipy.constants.convert_temperature DCSP instead. DCSP Note DCSP that DCSP the DCSP new DCSP function DCSP has DCSP a DCSP different DCSP signature.') DCNL def F2C(F):
@_np.deprecate(message='scipy.constants.C2F DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.18.0. DCSP Use DCSP scipy.constants.convert_temperature DCSP instead. DCSP Note DCSP that DCSP the DCSP new DCSP function DCSP has DCSP a DCSP different DCSP signature.') DCNL def C2F(C):
@_np.deprecate(message='scipy.constants.F2K DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.18.0. DCSP Use DCSP scipy.constants.convert_temperature DCSP instead. DCSP Note DCSP that DCSP the DCSP new DCSP function DCSP has DCSP a DCSP different DCSP signature.') DCNL def F2K(F):
@_np.deprecate(message='scipy.constants.K2F DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.18.0. DCSP Use DCSP scipy.constants.convert_temperature DCSP instead. DCSP Note DCSP that DCSP the DCSP new DCSP function DCSP has DCSP a DCSP different DCSP signature.') DCNL def K2F(K):
def lambda2nu(lambda_):
def nu2lambda(nu):
def value(key):
def unit(key):
def precision(key):
def find(sub=None, disp=False):
def estimate_fun_jac(fun, x, y, p, f0=None):
def estimate_bc_jac(bc, ya, yb, p, bc0=None):
def compute_jac_indices(n, m, k):
def stacked_matmul(a, b):
def construct_global_jac(n, m, k, i_jac, j_jac, h, df_dy, df_dy_middle, df_dp, df_dp_middle, dbc_dya, dbc_dyb, dbc_dp):
def collocation_fun(fun, y, p, x, h):
def prepare_sys(n, m, k, fun, bc, fun_jac, bc_jac, x, h):
def solve_newton(n, m, h, col_fun, bc, jac, y, p, B, bvp_tol):
def estimate_rms_residuals(fun, sol, x, h, p, r_middle, f_middle):
def create_spline(y, yp, x, h):
def modify_mesh(x, insert_1, insert_2):
def wrap_functions(fun, bc, fun_jac, bc_jac, k, a, S, D, dtype):
def solve_bvp(fun, bc, x, y, p=None, S=None, fun_jac=None, bc_jac=None, tol=0.001, max_nodes=1000, verbose=0):
def _cached_roots_legendre(n):
def fixed_quad(func, a, b, args=(), n=5):
def vectorize1(func, args=(), vec_func=False):
def quadrature(func, a, b, args=(), tol=1.49e-08, rtol=1.49e-08, maxiter=50, vec_func=True, miniter=1):
def cumtrapz(y, x=None, dx=1.0, axis=(-1), initial=None):
def simps(y, x=None, dx=1, axis=(-1), even='avg'):
def romb(y, dx=1.0, axis=(-1), show=False):
def _difftrap(function, interval, numtraps):
def _romberg_diff(b, c, k):
def romberg(function, a, b, args=(), tol=1.48e-08, rtol=1.48e-08, show=False, divmax=10, vec_func=False):
def newton_cotes(rn, equal=0):
def _band_count(a):
def _linear_func(t, y, a):
def _linear_jac(t, y, a):
def _linear_banded_jac(t, y, a):
def _solve_linear_sys(a, y0, tend=1, dt=0.1, solver=None, method='bdf', use_jac=True, with_jacobian=False, banded=False):
def _analytical_solution(a, y0, t):
def _transform_banded_jac(bjac):
def _vode_banded_jac_wrapper(jacfunc, ml, jac_params):
def quad_explain(output=sys.stdout):
def quad(func, a, b, args=(), full_output=0, epsabs=1.49e-08, epsrel=1.49e-08, limit=50, points=None, weight=None, wvar=None, wopts=None, maxp1=50, limlst=50):
def dblquad(func, a, b, gfun, hfun, args=(), epsabs=1.49e-08, epsrel=1.49e-08):
def tplquad(func, a, b, gfun, hfun, qfun, rfun, args=(), epsabs=1.49e-08, epsrel=1.49e-08):
def nquad(func, ranges, args=None, opts=None, full_output=False):
def check_arguments(fun, y0, support_complex):
def compute_R(order, factor):
def change_D(D, order, factor):
def solve_bdf_system(fun, t_new, y_predict, c, psi, LU, solve_lu, scale, tol):
def validate_max_step(max_step):
def warn_extraneous(extraneous):
def validate_tol(rtol, atol, n):
def norm(x):
def select_initial_step(fun, t0, y0, f0, direction, order, rtol, atol):
def num_jac(fun, t, y, f, threshold, factor, sparsity=None):
def prepare_events(events):
def solve_event_equation(event, sol, t_old, t):
def handle_events(sol, events, active_events, is_terminal, t_old, t):
def find_active_events(g, g_new, direction):
def solve_ivp(fun, t_span, y0, method='RK45', t_eval=None, dense_output=False, events=None, vectorized=False, **options):
def rk_step(fun, t, y, f, h, A, B, C, E, K):
def solve_collocation_system(fun, t, y, h, Z0, scale, tol, LU_real, LU_complex, solve_lu):
def predict_factor(h_abs, h_abs_old, error_norm, error_norm_old):
def odeint(func, y0, t, args=(), Dfun=None, col_deriv=0, full_output=0, ml=None, mu=None, rtol=None, atol=None, tcrit=None, h0=0.0, hmax=0.0, hmin=0.0, ixpr=0, mxstep=0, mxhnil=0, mxordn=12, mxords=5, printmessg=0):
def lagrange_inversion(a):
def gammainc(a, x, dps=50, maxterms=(10 ** 8)):
def gammaincc(a, x, dps=50, maxterms=(10 ** 8)):
def compute_a(n):
def compute_g(n):
def eta(lam):
def compute_alpha(n):
def compute_d(K, N):
def ellip_harm(h2, k2, n, p, s, signm=1, signn=1):
def ellip_harm_2(h2, k2, n, p, s):
def ellip_normal(h2, k2, n, p):
def spherical_jn(n, z, derivative=False):
def spherical_yn(n, z, derivative=False):
def spherical_in(n, z, derivative=False):
def spherical_kn(n, z, derivative=False):
def _test_factory(test, dtype=np.double):
def multigammaln(a, d):
def lambertw(z, k=0, tol=1e-08):
def _gen_roots_and_weights(n, mu0, an_func, bn_func, f, df, symmetrize, mu):
def roots_jacobi(n, alpha, beta, mu=False):
def jacobi(n, alpha, beta, monic=False):
def roots_sh_jacobi(n, p1, q1, mu=False):
def sh_jacobi(n, p, q, monic=False):
def roots_genlaguerre(n, alpha, mu=False):
def genlaguerre(n, alpha, monic=False):
def roots_laguerre(n, mu=False):
def laguerre(n, monic=False):
def roots_hermite(n, mu=False):
def _compute_tauk(n, k, maxit=5):
def _initial_nodes_a(n, k):
def _initial_nodes_b(n, k):
def _initial_nodes(n):
def _pbcf(n, theta):
def _newton(n, x_initial, maxit=5):
def _roots_hermite_asy(n):
def hermite(n, monic=False):
def roots_hermitenorm(n, mu=False):
def hermitenorm(n, monic=False):
def roots_gegenbauer(n, alpha, mu=False):
def gegenbauer(n, alpha, monic=False):
def roots_chebyt(n, mu=False):
def chebyt(n, monic=False):
def roots_chebyu(n, mu=False):
def chebyu(n, monic=False):
def roots_chebyc(n, mu=False):
def chebyc(n, monic=False):
def roots_chebys(n, mu=False):
def chebys(n, monic=False):
def roots_sh_chebyt(n, mu=False):
def sh_chebyt(n, monic=False):
def roots_sh_chebyu(n, mu=False):
def sh_chebyu(n, monic=False):
def roots_legendre(n, mu=False):
def legendre(n, monic=False):
def roots_sh_legendre(n, mu=False):
def sh_legendre(n, monic=False):
def generate_loop(func_inputs, func_outputs, func_retval, ufunc_inputs, ufunc_outputs):
def generate_fused_type(codes):
def npy_cdouble_from_double_complex(var):
def double_complex_from_npy_cdouble(var):
def iter_variants(inputs, outputs):
def get_declaration(ufunc, c_name, c_proto, cy_proto, header, proto_h_filename):
def unique(lst):
def with_special_errors(func):
def assert_tol_equal(a, b, rtol=1e-07, atol=0, err_msg='', verbose=True):
def logsumexp(a, axis=None, b=None, keepdims=False, return_sign=False):
def diric(x, n):
def jnjnp_zeros(nt):
def jnyn_zeros(n, nt):
def jn_zeros(n, nt):
def jnp_zeros(n, nt):
def yn_zeros(n, nt):
def ynp_zeros(n, nt):
def y0_zeros(nt, complex=False):
def y1_zeros(nt, complex=False):
def y1p_zeros(nt, complex=False):
def jvp(v, z, n=1):
def yvp(v, z, n=1):
def kvp(v, z, n=1):
def ivp(v, z, n=1):
def h1vp(v, z, n=1):
def h2vp(v, z, n=1):
def riccati_jn(n, x):
def riccati_yn(n, x):
def erfinv(y):
def erfcinv(y):
def erf_zeros(nt):
def fresnelc_zeros(nt):
def fresnels_zeros(nt):
def fresnel_zeros(nt):
def assoc_laguerre(x, n, k=0.0):
def polygamma(n, x):
def mathieu_even_coef(m, q):
def mathieu_odd_coef(m, q):
def lpmn(m, n, z):
def clpmn(m, n, z, type=3):
def lqmn(m, n, z):
def bernoulli(n):
def euler(n):
def lpn(n, z):
def lqn(n, z):
def ai_zeros(nt):
def bi_zeros(nt):
def lmbda(v, x):
def pbdv_seq(v, x):
def pbvv_seq(v, x):
def pbdn_seq(n, z):
def ber_zeros(nt):
def bei_zeros(nt):
def ker_zeros(nt):
def kei_zeros(nt):
def berp_zeros(nt):
def beip_zeros(nt):
def kerp_zeros(nt):
def keip_zeros(nt):
def kelvin_zeros(nt):
def pro_cv_seq(m, n, c):
def obl_cv_seq(m, n, c):
def ellipk(m):
def comb(N, k, exact=False, repetition=False):
def perm(N, k, exact=False):
def _range_prod(lo, hi):
def factorial(n, exact=False):
def factorial2(n, exact=False):
def factorialk(n, k, exact=True):
def zeta(x, q=None, out=None):
def mpf2float(x):
def time_limited(timeout=0.5, return_val=np.nan, use_sigalrm=True):
def exception_to_nan(func):
def inf_to_nan(func):
def mp_assert_allclose(res, std, atol=0, rtol=1e-17):
def _add_doc(func, doc):
def _import_module(name):
def iterkeys(d):
def itervalues(d):
def iteritems(d):
def with_metaclass(meta, base=object):
def _valarray(shape, value=np.nan, typecode=None):
def _lazywhere(cond, arrays, f, fillvalue=None, f2=None):
def _lazyselect(condlist, choicelist, arrays, default=0):
def _aligned_zeros(shape, dtype=float, order='C', align=None):
def _prune_array(array):
def check_random_state(seed):
def _asarray_validated(a, check_finite=True, sparse_ok=False, objects_ok=False, mask_ok=False, as_inexact=False):
def set_gc_state(state):
@contextmanager DCNL def gc_state(state):
@contextmanager DCNL def assert_deallocated(func, *args, **kwargs):
def getargspec(f):
def decorate(func, caller):
def decorator(caller, _func=None):
def append(a, vancestors):
def dispatch_on(*dispatch_args):
def non_reentrant(err_msg=None):
def check_free_memory(free_mb):
def _get_mem_available():
@contextmanager DCNL def tempdir():
@contextmanager DCNL def in_tempdir():
@contextmanager DCNL def in_dir(dir=None):
def import_nose():
def assert_raises_regex(exception_class, expected_regexp, callable_obj=None, *args, **kwargs):
def splprep(x, w=None, u=None, ub=None, ue=None, k=3, task=0, s=None, t=None, full_output=0, nest=None, per=0, quiet=1):
def splrep(x, y, w=None, xb=None, xe=None, k=3, task=0, s=None, t=None, full_output=0, per=0, quiet=1):
def splev(x, tck, der=0, ext=0):
def splint(a, b, tck, full_output=0):
def sproot(tck, mest=10):
def spalde(x, tck):
def insert(x, tck, m=1, per=0):
def splder(tck, n=1):
def splantider(tck, n=1):
def prod(x):
def lagrange(x, w):
def _check_broadcast_up_to(arr_from, shape_to, name):
def _do_extrapolate(fill_value):
def interpn(points, values, xi, method='linear', bounds_error=True, fill_value=np.nan):
def _dot0(a, b):
@np.deprecate(message='splmake DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.19.0, DCSP use DCSP make_interp_spline DCSP instead.') DCNL def splmake(xk, yk, order=3, kind='smoothest', conds=None):
@np.deprecate(message='spleval DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.19.0, DCSP use DCSP BSpline DCSP instead.') DCNL def spleval(xck, xnew, deriv=0):
@np.deprecate(message='spltopp DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.19.0, DCSP use DCSP PPoly.from_spline DCSP instead.') DCNL def spltopp(xk, cvals, k):
@np.deprecate(message='spline DCSP is DCSP deprecated DCSP in DCSP scipy DCSP 0.19.0, DCSP use DCSP Bspline DCSP class DCSP instead.') DCNL def spline(xk, yk, xnew, order=3, kind='smoothest', conds=None):
def _naive_B(x, k, i, t):
def _naive_eval(x, t, c, k):
def _naive_eval_2(x, t, c, k):
def B_012(x):
def B_0123(x, der=0):
def _make_multiples(b):
def make_interp_full_matr(x, y, t, k):
def make_lsq_full_matrix(x, y, t, k=3):
def makepairs(x, y):
def put(*a):
def _ppoly_eval_1(c, x, xps):
def _ppoly_eval_2(coeffs, breaks, xnew, fill=np.nan):
def _dpow(x, y, n):
def _ppoly2d_eval(c, xs, xnew, ynew, nu=None):
def _ppoly3d_eval(c, xs, xnew, ynew, znew, nu=None):
def _ppoly4d_eval(c, xs, xnew, ynew, znew, unew, nu=None):
def pchip_interpolate(xi, yi, x, der=0, axis=0):
def pade(an, m):
def griddata(points, values, xi, method='linear', fill_value=np.nan, rescale=False):
@np.deprecate(message="'nearest' DCSP is DCSP deprecated DCSP in DCSP SciPy DCSP 1.0.0") DCNL def nearest(x, y, new_x):
@np.deprecate(message="'linear' DCSP is DCSP deprecated DCSP in DCSP SciPy DCSP 1.0.0") DCNL def linear(x, y, new_x):
@np.deprecate(message="'logarithmic' DCSP is DCSP deprecated DCSP in DCSP SciPy DCSP 1.0.0") DCNL def logarithmic(x, y, new_x):
@np.deprecate(message="'block_average_above' DCSP is DCSP deprecated DCSP in DCSP SciPy DCSP 1.0.0") DCNL def block_average_above(x, y, new_x):
@np.deprecate(message="'block' DCSP is DCSP deprecated DCSP in DCSP SciPy DCSP 1.0.0") DCNL def block(x, y, new_x):
def _intc_overflow(x, msg=None):
def splprep(x, w=None, u=None, ub=None, ue=None, k=3, task=0, s=None, t=None, full_output=0, nest=None, per=0, quiet=1):
def splrep(x, y, w=None, xb=None, xe=None, k=3, task=0, s=None, t=None, full_output=0, per=0, quiet=1):
def splev(x, tck, der=0, ext=0):
def splint(a, b, tck, full_output=0):
def sproot(tck, mest=10):
def spalde(x, tck):
def bisplrep(x, y, z, w=None, xb=None, xe=None, yb=None, ye=None, kx=3, ky=3, task=0, s=None, eps=1e-16, tx=None, ty=None, full_output=0, nxest=None, nyest=None, quiet=1):
def bisplev(x, y, tck, dx=0, dy=0):
def dblint(xa, xb, ya, yb, tck):
def insert(x, tck, m=1, per=0):
def splder(tck, n=1):
def splantider(tck, n=1):
def prod(x):
def _get_dtype(dtype):
def _as_float_array(x, check_finite=False):
def _not_a_knot(x, k):
def _augknt(x, k):
def make_interp_spline(x, y, k=3, t=None, bc_type=None, axis=0, check_finite=True):
def make_lsq_spline(x, y, t, k=3, w=None, axis=0, check_finite=True):
def _isscalar(x):
def krogh_interpolate(xi, yi, x, der=0, axis=0):
def approximate_taylor_polynomial(f, x, degree, scale, order=None):
def barycentric_interpolate(xi, yi, x, axis=0):
def check_submodules():
def parse_setuppy_commands():
@task DCNL def bootstrap():
@task DCNL def clean():
@task DCNL @needs('clean', 'clean_bootstrap') DCNL def nuke():
@task DCNL def html(options):
@task DCNL def latex():
@task DCNL def release(options):
def superpack_name(pyver, numver):
def internal_wininst_name(arch):
def wininst_name(pyver):
def bdist_wininst_arch(pyver, arch):
@task DCNL def bdist_wininst_nosse(options):
@task DCNL def bdist_wininst_sse2(options):
@task DCNL def bdist_wininst_sse3(options):
@task DCNL @cmdopts([('python-version=', 'p', 'python DCSP version')]) DCNL def bdist_superpack(options):
@task DCNL @cmdopts([('python_version=', 'p', 'Python DCSP version DCSP to DCSP build DCSP the DCSP installer DCSP against')]) DCNL def bdist_wininst_simple():
def dmg_name(fullversion, pyver, osxver=None):
def process_tex(lines):
def linkcode_resolve(domain, info):
def get_preconditioner():
def solve(preconditioning=True):
def measure(n):
def my_kde_bandwidth(obj, fac=(1.0 / 5)):
def my_kde_bandwidth(obj, fac=(1.0 / 5)):
def drop_bad_flags(flags):
def run_monitored(code):
def get_mem_info():
def set_mem_rlimit(max_mem=None):
def _sakurai(n):
def poisson2d(N, dtype='d', format=None):
def extract_lsq_problems():
def build_project(args):
def regon_checksum(digits):
def local_regon_checksum(digits):
def company_vat_checksum(digits):
def checksum_identity_card_number(characters):
def checksum(digits):
def checksum(digits):
def calculate_month(birth_date):
def checksum(digits):
def checksum(value):
def contains_point(poly, point):
def remove_accents(value):
def latinize(value):
def execute_from_command_line(argv=None):
def is_protected_type(obj):
def force_text(s, encoding='utf-8', strings_only=False, errors='strict'):
def slugify(value, allow_dots=False, allow_unicode=False):
def add_dicts(*args):
def new_date(d):
def new_datetime(d):
def batch_rename(work_dir, old_ext, new_ext):
def main():
def merge():
def check_auth(username, password):
def authenticate():
def start_flask_app(host, port):
def Browser(driver_name='firefox', *args, **kwargs):
def test_env_vars_available_during_preload():
def test_statsd_fail():
@contextmanager DCNL def check_environ(unset=True):
def test_http_header_encoding():
def test_http_invalid_response_header():
def requires_mac_ver(*min_version):
@validator DCNL def app(environ, start_response):
def app(environ, start_response):
def handle(ws):
def app(environ, start_response):
def handle(ws):
def app(environ, start_response):
@validator DCNL def app(environ, start_response):
@validator DCNL def app(environ, start_response):
def app(environ, start_response):
def app(environ, start_response):
def app(environ, start_response):
def ValidateAttributes(tag, attributes, goodattributes):
def ExpandPathAttribute(src, attrib):
def OpenFileForRead(path, logtext):
def TimestampISO8601(t):
def CreateSitemapFromFile(configpath, suppress_notify):
def ProcessCommandFlags(args):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def _fileobj_to_fd(fileobj):
def run():
def paste_server(app, gcfg=None, host='127.0.0.1', port=None, *args, **kwargs):
def run():
def get_username(uid):
def set_owner_process(uid, gid, initgroups=False):
def http_date(timestamp=None):
def daemonize(enable_stdio_inheritance=False):
def to_bytestring(value, encoding='utf8'):
def _check_if_pyc(fname):
def _get_codeobj(pyfile):
def create_sockets(conf, log, fds=None):
def spew(trace_names=None, show_values=False):
def unspew():
def _eventlet_serve(sock, handle, concurrency):
def _eventlet_stop(client, server, conn):
def listen_fds(unset_environment=True):
def loggers():
def load_tests(loader, tests, pattern):
def LZSDecompress(data, window=RingList(2048)):
def index_modules(modules_directory=MODULES_DIR):
def import_exploit(path):
def iter_modules(modules_directory=MODULES_DIR):
def pythonize_path(path):
def humanize_path(path):
def module_required(fn):
def stop_after(space_number):
def mute(fn):
def multi(fn):
def __cprint(*args, **kwargs):
def print_table(headers, *args, **kwargs):
def sanitize_url(address):
def pprint_dict_in_order(dictionary, order=None):
def random_text(length, alph=(string.ascii_letters + string.digits)):
def http_request(method, url, session=requests, **kwargs):
def boolify(value):
def create_resource(name, content=(), python_package=False):
def mkdir_p(path):
def url(address):
def boolify(value):
def integer(number):
def fingerprint(channel_samples, Fs=DEFAULT_FS, wsize=DEFAULT_WINDOW_SIZE, wratio=DEFAULT_OVERLAP_RATIO, fan_value=DEFAULT_FAN_VALUE, amp_min=DEFAULT_AMP_MIN):
def generate_hashes(peaks, fan_value=DEFAULT_FAN_VALUE):
def _wav2array(nchannels, sampwidth, data):
def readwav(file):
def writewav24(filename, rate, data):
def chunkify(lst, n):
def set_seed(seed=None):
def get_files_recursive(src, fmt):
def get_length_audio(audiopath, extension):
def get_starttime(length, nseconds, padding):
def generate_test_files(src, dest, nseconds, fmts=['.mp3', '.wav'], padding=10):
def unique_hash(filepath, blocksize=(2 ** 20)):
def read(filename, limit=None):
def path_to_songname(path):
def init(configpath):
def _downloadResult(result):
def snatchEpisode(result, endStatus=SNATCHED):
def pickBestResult(results, show):
def isFinalResult(result):
def isFirstBestMatch(result):
def wantedEpisodes(show, fromDate):
def searchForNeededEpisodes():
def searchProviders(show, episodes, manualSearch=False, downCurQuality=False, cacheOnly=False):
def short_group_names(groups):
def delete_folder(folder, check_empty=True):
def delete_files(processPath, notwantedFiles, result, force=False):
def processDir(dirName, nzbName=None, process_method=None, force=False, is_priority=None, delete_on=False, failed=False, proc_type=u'auto', **kwargs):
def validateDir(path, dirName, nzbNameOriginal, failed, result):
def unRAR(path, rarFiles, force, result):
def already_postprocessed(dirName, videofile, force, result):
def process_media(processPath, videoFiles, nzbName, process_method, force, is_priority, result):
def get_path_dir_files(dirName, nzbName, proc_type):
def process_failed(dirName, nzbName, result):
def get_quality_string(quality):
def containsAtLeastOneWord(name, words):
def filterBadReleases(name, parse=True):
def sceneToNormalShowNames(name):
def makeSceneShowSearchStrings(show, season=(-1), anime=False):
def isGoodResult(name, show, log=True, season=(-1)):
def allPossibleShowNames(show, season=(-1)):
def determineReleaseName(dir_name=None, nzb_name=None):
def searchDBForShow(regShowName, log=False):
def argToBool(x):
def indentXML(elem, level=0):
def remove_extension(name):
def remove_non_release_groups(name):
def replaceExtension(filename, newExt):
def notTorNZBFile(filename):
def isSyncFile(filename):
def isMediaFile(filename):
def isRarFile(filename):
def isBeingWritten(filepath):
def sanitizeFileName(name):
def remove_file_failed(failed_file):
def findCertainShow(showList, indexerid):
def makeDir(path):
def listMediaFiles(path):
def copyFile(srcFile, destFile):
def moveFile(srcFile, destFile):
def link(src, dst):
def hardlinkFile(srcFile, destFile):
def symlink(src, dst):
def moveAndSymlinkFile(srcFile, destFile):
def make_dirs(path):
def delete_empty_folders(check_empty_dir, keep_dir=None):
def fileBitFilter(mode):
def chmodAsParent(childPath):
def fixSetGroupID(childPath):
def is_anime_in_show_list():
def update_anime_support():
def sanitizeSceneName(name, anime=False):
def arithmeticEval(s):
def create_https_certificates(ssl_cert, ssl_key):
def tryInt(s, s_default=0):
def md5_for_file(filename):
def get_lan_ip():
def check_url(url):
def anon_url(*url):
def is_hidden_folder(folder):
def real_path(path):
def makeZip(fileList, archive):
def extractZip(archive, targetDir):
def backupConfigZip(fileList, archive, arcname=None):
def restoreConfigZip(archive, targetDir):
def touchFile(fname, atime=None):
def get_size(start_path=u'.'):
def generateApiKey():
def pretty_filesize(file_bytes):
def remove_article(text=u''):
def generateCookieSecret():
def verify_freespace(src, dest, oldfile=None):
def isFileLocked(checkfile, writeLockCheck=False):
def getDiskSpaceUsage(diskPath=None):
def restoreVersionedFile(backup_file, version):
def backupVersionedFile(old_file, version):
def get_temp_dir():
def clean_url(url):
def getWinDrives():
def foldersAtPath(path, includeParent=False, includeFiles=False, fileTypes=None):
def f(*args, **kwargs):
def uu(s, encoding=None, errors=u'strict'):
def ss(s, encoding=None, errors=u'strict'):
def setEpisodeToWanted(show, s, e):
def update_network_dict():
def load_network_dict():
def get_network_timezone(network):
def parse_date_time(d, t, network, dateOnly=False):
def getSeasonNZBs(name, urlData, season):
def saveNZB(nzbName, nzbString):
def splitNZBResult(result):
def check_force_season_folders(pattern=None, multi=None, anime_type=None):
def check_valid_naming(pattern=None, multi=None, anime_type=None):
def check_valid_abd_naming(pattern=None):
def check_valid_sports_naming(pattern=None):
def validate_name(pattern, multi=None, anime_type=None, file_only=False, abd=False, sports=False):
def get_scene_numbering(indexer_id, indexer, season, episode, fallback_to_xem=True):
def find_scene_numbering(indexer_id, indexer, season, episode):
def get_scene_absolute_numbering(indexer_id, indexer, absolute_number, fallback_to_xem=True):
def find_scene_absolute_numbering(indexer_id, indexer, absolute_number):
def get_indexer_numbering(indexer_id, indexer, sceneSeason, sceneEpisode, fallback_to_xem=True):
def get_indexer_absolute_numbering(indexer_id, indexer, sceneAbsoluteNumber, fallback_to_xem=True, scene_season=None):
def set_scene_numbering(indexer_id, indexer, season=None, episode=None, absolute_number=None, sceneSeason=None, sceneEpisode=None, sceneAbsolute=None):
def find_xem_numbering(indexer_id, indexer, season, episode):
def find_xem_absolute_numbering(indexer_id, indexer, absolute_number):
def get_indexer_numbering_for_xem(indexer_id, indexer, sceneSeason, sceneEpisode):
def get_indexer_absolute_numbering_for_xem(indexer_id, indexer, sceneAbsoluteNumber, scene_season=None):
def get_scene_numbering_for_show(indexer_id, indexer):
def get_xem_numbering_for_show(indexer_id, indexer):
def get_scene_absolute_numbering_for_show(indexer_id, indexer):
def get_xem_absolute_numbering_for_show(indexer_id, indexer):
def xem_refresh(indexer_id, indexer, force=False):
def get_absolute_number_from_season_and_episode(show, season, episode):
def shouldRefresh(exList):
def setLastRefresh(exList):
def retrieve_exceptions(get_xem=True, get_anidb=True):
def get_scene_exceptions(indexer_id, season=(-1)):
def get_all_scene_exceptions(indexer_id):
def get_scene_seasons(indexer_id):
def get_scene_exception_by_name_multiple(show_name):
def update_scene_exceptions(indexer_id, scene_exceptions, season=(-1)):
def getSceneSeasons(indexer_id):
def _responds(result_type, data=None, msg=u''):
def diagnose():
def resolve(code):
def resolve(code):
def parse(path):
def str_to_unicode(s, encoding=None):
def unicode_to_str(s, encoding=None):
def matroska_date_to_datetime(date):
def matroska_bps_to_bitrate(bps):
def Parser(file):
def get_varname(rpc_call):
def call_method(class_obj, method, *args):
def find_method(rpc_call):
def process_result(method, result):
def _build_rpc_methods(class_, method_list):
def bool_to_int(value):
def cmd_exists(cmds_list, cmd):
def find_torrent(info_hash, torrent_list):
def is_valid_port(port):
def safe_repr(fmt, *args, **kwargs):
def dumps(x, float_bits=DEFAULT_FLOAT_BITS):
def codeDescription(status_code):
def get_subtitles(video):
def get_file_hash(filePath):
def setUp_test_db(force=False):
@pytest.fixture(scope=u'function') DCNL def remove_output_folder(request):
@pytest.fixture(scope='function') DCNL def clean_system(request):
@pytest.fixture(scope='session') DCNL def user_dir(tmpdir_factory):
@pytest.fixture(scope='session') DCNL def user_config_data(user_dir):
@pytest.fixture(scope='session') DCNL def user_config_file(user_dir, user_config_data):
@pytest.fixture DCNL def context():
def test_get_config():
def test_get_config_does_not_exist():
def test_invalid_config():
def test_get_config_with_defaults():
@pytest.fixture(scope=u'function') DCNL def remove_additional_folders(request):
@pytest.mark.usefixtures(u'clean_system', u'remove_additional_folders') DCNL def test_generate_files_permissions():
@pytest.fixture DCNL def template_url():
def test_repository_url_should_clone(mocker, template_url, user_config_data):
def test_is_repo_url_for_remote_urls(remote_repo_url):
def test_is_repo_url_for_local_urls(local_repo_url):
def test_finds_local_repo(tmpdir):
def test_local_repo_with_no_context_raises(tmpdir):
def test_local_repo_typo(tmpdir):
@pytest.mark.skipif((not PY3), reason='Only DCSP necessary DCSP on DCSP Python3') DCNL def test_not_ascii():
@pytest.fixture(scope='session') DCNL def cli_runner():
@pytest.fixture DCNL def remove_fake_project_dir(request):
@pytest.fixture DCNL def make_fake_project_dir(request):
def test_info_stdout_logging(caplog, info_logger, info_messages):
def test_debug_stdout_logging(caplog, debug_logger, debug_messages):
def test_debug_file_logging(caplog, info_logger_with_file, debug_file, debug_messages):
@pytest.fixture(scope=u'function') DCNL def remove_cheese_file(request):
@pytest.fixture DCNL def clone_dir(tmpdir):
def test_clone_should_raise_if_vcs_not_installed(mocker, clone_dir):
def test_clone_should_rstrip_trailing_slash_in_repo_url(mocker, clone_dir):
def test_clone_should_abort_if_user_does_not_want_to_reclone(mocker, tmpdir):
@pytest.mark.parametrize('repo_type, DCSP repo_url, DCSP repo_name', [('git', 'https://github.com/hello/world.git', 'world'), ('hg', 'https://bitbucket.org/foo/bar', 'bar')]) DCNL def test_clone_should_invoke_vcs_command(mocker, clone_dir, repo_type, repo_url, repo_name):
@pytest.mark.parametrize('error_message', ["fatal: DCSP repository DCSP 'https://github.com/hackebro/cookiedozer' DCSP not DCSP found", 'hg: DCSP abort: DCSP HTTP DCSP Error DCSP 404: DCSP Not DCSP Found']) DCNL def test_clone_handles_repo_typo(mocker, clone_dir, error_message):
@pytest.mark.parametrize('error_message', ["error: DCSP pathspec DCSP 'unknown_branch' DCSP did DCSP not DCSP match DCSP any DCSP file(s) DCSP known DCSP to DCSP git.", "hg: DCSP abort: DCSP unknown DCSP revision DCSP 'unknown_branch'!"]) DCNL def test_clone_handles_branch_typo(mocker, clone_dir, error_message):
def test_clone_unknown_subprocess_error(mocker, clone_dir):
def test_prompt_should_ask_and_rm_repo_dir(mocker, tmpdir):
def test_prompt_should_ask_and_keep_repo_dir(mocker, tmpdir):
def test_prompt_should_not_ask_if_no_input_and_rm_repo_dir(mocker, tmpdir):
@pytest.fixture(scope='function') DCNL def back_up_rc(request, user_config_path):
@pytest.mark.usefixtures('back_up_rc') DCNL def test_get_user_config_valid(user_config_path, custom_config):
@pytest.mark.usefixtures('back_up_rc') DCNL def test_get_user_config_invalid(user_config_path):
@pytest.mark.usefixtures('back_up_rc') DCNL def test_get_user_config_nonexistent():
@pytest.fixture(scope=u'function') DCNL def remove_additional_folders(request):
def test_replay_dump_template_name(monkeypatch, mocker, user_config_data, user_config_file):
def test_replay_load_template_name(monkeypatch, mocker, user_config_data, user_config_file):
@pytest.fixture DCNL def context():
@pytest.fixture DCNL def template_name():
@pytest.fixture DCNL def replay_file(replay_test_dir, template_name):
def test_type_error_if_no_template_name(replay_test_dir):
def test_value_error_if_key_missing_in_context(mocker, replay_test_dir):
def test_io_error_if_no_replay_file(mocker, replay_test_dir):
def test_run_json_load(mocker, mock_user_config, template_name, context, replay_test_dir, replay_file):
def test_get_replay_file_name():
@pytest.fixture DCNL def template_name():
@pytest.fixture DCNL def replay_file(replay_test_dir, template_name):
@pytest.fixture(autouse=True) DCNL def remove_replay_dump(request, replay_file):
def test_type_error_if_no_template_name(replay_test_dir, context):
def test_type_error_if_not_dict_context(replay_test_dir, template_name):
def test_value_error_if_key_missing_in_context(replay_test_dir, template_name):
def test_ioerror_if_replay_dir_creation_fails(mock_ensure_failure, replay_test_dir):
def test_run_json_dump(mocker, mock_ensure_success, mock_user_config, template_name, context, replay_test_dir, replay_file):
@pytest.fixture DCNL def project_dir(request):
def test_should_call_prompt_with_process_json(mocker):
def test_read_user_dict_default_value(mocker):
def make_test_repo(name):
@pytest.yield_fixture DCNL def dir_with_hooks(tmpdir):
@pytest.fixture(scope='function') DCNL def remove_additional_dirs(request):
@pytest.mark.usefixtures('clean_system', 'remove_additional_dirs') DCNL def test_cookiecutter_input_extra_context(monkeypatch):
def make_readonly(path):
@pytest.mark.usefixtures(u'clean_system') DCNL @pytest.mark.parametrize(u'input_params, DCSP expected_context', context_data()) DCNL def test_generate_context(input_params, expected_context):
def test_choices(context_file, default_context, extra_context):
@pytest.fixture(scope='function') DCNL def remove_additional_dirs(request):
@pytest.fixture(params=['tests/fake-repo-pre/', 'tests/fake-repo-pre']) DCNL def bake(request):
@pytest.mark.usefixtures('clean_system', 'remove_additional_dirs') DCNL def test_cookiecutter_no_input_extra_context():
@pytest.mark.usefixtures('clean_system', 'remove_additional_dirs') DCNL def test_cookiecutter_templated_context():
@pytest.mark.usefixtures('clean_system', 'remove_additional_dirs') DCNL def test_cookiecutter_no_input_return_project_dir():
@pytest.fixture(scope=u'function') DCNL def remove_test_dir(request):
def find_template(repo_dir):
def _expand_path(path):
def merge_configs(default, overwrite):
def get_config(config_path):
def get_user_config(config_file=None, default_config=False):
def force_delete(func, path, exc_info):
def rmtree(path):
def make_sure_path_exists(path):
@contextlib.contextmanager DCNL def work_in(dirname=None):
def make_executable(script_path):
def read_user_variable(var_name, default_value):
def read_user_yes_no(question, default_value):
def read_user_choice(var_name, options):
def read_user_dict(var_name, default_value):
def render_variable(env, raw, cookiecutter_dict):
def prompt_choice_for_config(cookiecutter_dict, env, key, options, no_input):
def prompt_for_config(context, no_input=False):
def cookiecutter(template, checkout=None, no_input=False, extra_context=None, replay=False, overwrite_if_exists=False, output_dir=u'.', config_file=None, default_config=False):
def valid_hook(hook_file, hook_name):
def find_hook(hook_name, hooks_dir='hooks'):
def run_script(script_path, cwd='.'):
def run_script_with_context(script_path, cwd, context):
def run_hook(hook_name, project_dir, context):
def is_repo_url(value):
def expand_abbreviations(template, abbreviations):
def repository_has_cookiecutter_json(repo_directory):
def determine_repo_dir(template, abbreviations, clone_to_dir, checkout, no_input):
def version_msg():
def validate_extra_context(ctx, param, value):
@click.command(context_settings=dict(help_option_names=[u'-h', u'--help'])) DCNL @click.version_option(__version__, u'-V', u'--version', message=version_msg()) DCNL @click.argument(u'template') DCNL @click.argument(u'extra_context', nargs=(-1), callback=validate_extra_context) DCNL @click.option(u'--no-input', is_flag=True, help=u'Do DCSP not DCSP prompt DCSP for DCSP parameters DCSP and DCSP only DCSP use DCSP cookiecutter.json DCSP file DCSP content') DCNL @click.option(u'-c', u'--checkout', help=u'branch, DCSP tag DCSP or DCSP commit DCSP to DCSP checkout DCSP after DCSP git DCSP clone') DCNL @click.option('-v', '--verbose', is_flag=True, help='Print DCSP debug DCSP information', default=False) DCNL @click.option(u'--replay', is_flag=True, help=u'Do DCSP not DCSP prompt DCSP for DCSP parameters DCSP and DCSP only DCSP use DCSP information DCSP entered DCSP previously') DCNL @click.option(u'-f', u'--overwrite-if-exists', is_flag=True, help=u'Overwrite DCSP the DCSP contents DCSP of DCSP the DCSP output DCSP directory DCSP if DCSP it DCSP already DCSP exists') DCNL @click.option(u'-o', u'--output-dir', default='.', type=click.Path(), help=u'Where DCSP to DCSP output DCSP the DCSP generated DCSP project DCSP dir DCSP into') DCNL @click.option(u'--config-file', type=click.Path(), default=None, help=u'User DCSP configuration DCSP file') DCNL @click.option(u'--default-config', is_flag=True, help=u'Do DCSP not DCSP load DCSP a DCSP config DCSP file. DCSP Use DCSP the DCSP defaults DCSP instead') DCNL @click.option(u'--debug-file', type=click.Path(), default=None, help=u'File DCSP to DCSP be DCSP used DCSP as DCSP a DCSP stream DCSP for DCSP DEBUG DCSP logging') DCNL def main(template, extra_context, no_input, checkout, verbose, replay, overwrite_if_exists, output_dir, config_file, default_config, debug_file):
def is_copy_only_path(path, context):
def apply_overwrites_to_context(context, overwrite_context):
def generate_context(context_file=u'cookiecutter.json', default_context=None, extra_context=None):
def generate_file(project_dir, infile, context, env):
def render_and_create_dir(dirname, context, output_dir, environment, overwrite_if_exists=False):
def ensure_dir_is_templated(dirname):
def _run_hook_from_repo_dir(repo_dir, hook_name, project_dir, context, delete_project_on_failure):
def generate_files(repo_dir, context=None, output_dir=u'.', overwrite_if_exists=False):
def prompt_and_delete_repo(repo_dir, no_input=False):
def identify_repo(repo_url):
def is_vcs_installed(repo_type):
def clone(repo_url, checkout=None, clone_to_dir=u'.', no_input=False):
@contextmanager DCNL def inside_dir(dirpath):
@contextmanager DCNL def bake_in_temp_dir(cookies, *args, **kwargs):
def run_inside_dir(command, dirpath):
def check_output_inside_dir(command, dirpath):
def project_info(result):
def test_bake_withspecialchars_and_run_tests(cookies):
def test_bake_with_apostrophe_and_run_tests(cookies):
def load_key(pubkey):
def encrypt(pubkey, password):
def fetch_public_key(repo):
def prepend_line(filepath, line):
def load_yaml_config(filepath):
def save_yaml_config(filepath, config):
def update_travis_deploy_password(encrypted_password):
def main(args):
@click.command() DCNL def main(args=None):
def send_mail(subject, message_plain, message_html, email_from, email_to, custom_headers={}, attachments=()):
def get_gravatar(email, size=80, default='identicon'):
def signin_redirect(redirect=None, user=None):
def generate_sha1(string, salt=None):
def get_profile_model():
def get_protocol():
def get_datetime_now():
def get_version():
def has_profile(user):
def upload_to_mugshot(instance, filename):
def merged_dict(dict_a, dict_b):
def secure_required(view_func):
def identification_field_factory(label, error_required):
@secure_required DCNL def signup(request, signup_form=SignupForm, template_name='userena/signup_form.html', success_url=None, extra_context=None):
@secure_required DCNL def activate(request, activation_key, template_name='userena/activate_fail.html', retry_template_name='userena/activate_retry.html', success_url=None, extra_context=None):
@secure_required DCNL def activate_retry(request, activation_key, template_name='userena/activate_retry_success.html', extra_context=None):
@secure_required DCNL def email_confirm(request, confirmation_key, template_name='userena/email_confirm_fail.html', success_url=None, extra_context=None):
def direct_to_user_template(request, username, template_name, extra_context=None):
def disabled_account(request, username, template_name, extra_context=None):
@secure_required DCNL def signin(request, auth_form=AuthenticationForm, template_name='userena/signin_form.html', redirect_field_name=REDIRECT_FIELD_NAME, redirect_signin_function=signin_redirect, extra_context=None):
@secure_required DCNL def signout(request, next_page=userena_settings.USERENA_REDIRECT_ON_SIGNOUT, template_name='userena/signout.html', *args, **kwargs):
@secure_required DCNL @permission_required_or_403('change_user', (get_user_model(), 'username', 'username')) DCNL def email_change(request, username, email_form=ChangeEmailForm, template_name='userena/email_form.html', success_url=None, extra_context=None):
@secure_required DCNL @permission_required_or_403('change_user', (get_user_model(), 'username', 'username')) DCNL def password_change(request, username, template_name='userena/password_form.html', pass_form=PasswordChangeForm, success_url=None, extra_context=None):
@secure_required DCNL @permission_required_or_403('change_profile', (get_profile_model(), 'user__username', 'username')) DCNL def profile_edit(request, username, edit_profile_form=EditProfileForm, template_name='userena/profile_form.html', success_url=None, extra_context=None, **kwargs):
def profile_detail(request, username, template_name=userena_settings.USERENA_PROFILE_DETAIL_TEMPLATE, extra_context=None, **kwargs):
def profile_list(request, page=1, template_name='userena/profile_list.html', paginate_by=50, extra_context=None, **kwargs):
@register.tag DCNL def get_unread_message_count_for(parser, token):
@register.tag DCNL def get_unread_message_count_between(parser, token):
@login_required DCNL def message_compose(request, recipients=None, compose_form=ComposeForm, success_url=None, template_name='umessages/message_form.html', recipient_filter=None, extra_context=None):
@login_required DCNL @require_http_methods(['POST']) DCNL def message_remove(request, undo=False):
def read_random_bits(nbits):
def read_random_int(nbits):
def randint(maxvalue):
def gcd(p, q):
def bytes2int(bytes):
def int2bytes(number):
def fast_exponentiation(a, p, n):
def read_random_int(nbits):
def ceil(x):
def randint(minvalue, maxvalue):
def fermat_little_theorem(p):
def jacobi(a, b):
def jacobi_witness(x, n):
def randomized_primality_testing(n, k):
def is_prime(number):
def getprime(nbits):
def are_relatively_prime(a, b):
def find_p_q(nbits):
def extended_euclid_gcd(a, b):
def calculate_keys(p, q, nbits):
def gen_keys(nbits):
def gen_pubpriv_keys(nbits):
def encrypt_int(message, ekey, n):
def decrypt_int(cyphertext, dkey, n):
def sign_int(message, dkey, n):
def verify_int(signed, ekey, n):
def picklechops(chops):
def unpicklechops(string):
def chopstring(message, key, n, funcref):
def gluechops(chops, key, n, funcref):
def encrypt(message, key):
def sign(message, key):
def decrypt(cypher, key):
def verify(cypher, key):
def bit_size(number):
def gcd(p, q):
def bytes2int(bytes):
def int2bytes(number):
def to64(number):
def from64(number):
def int2str64(number):
def str642int(string):
def read_random_int(nbits):
def randint(minvalue, maxvalue):
def jacobi(a, b):
def jacobi_witness(x, n):
def randomized_primality_testing(n, k):
def is_prime(number):
def getprime(nbits):
def are_relatively_prime(a, b):
def find_p_q(nbits):
def extended_gcd(a, b):
def calculate_keys(p, q, nbits):
def gen_keys(nbits):
def newkeys(nbits):
def encrypt_int(message, ekey, n):
def decrypt_int(cyphertext, dkey, n):
def encode64chops(chops):
def decode64chops(string):
def chopstring(message, key, n, funcref):
def gluechops(string, key, n, funcref):
def encrypt(message, key):
def sign(message, key):
def decrypt(cypher, key):
def verify(cypher, key):
def encrypt_int(message, ekey, n):
def decrypt_int(cyphertext, dkey, n):
def gcd(p, q):
def jacobi(a, b):
def jacobi_witness(x, n):
def randomized_primality_testing(n, k):
def is_prime(number):
def getprime(nbits):
def are_relatively_prime(a, b):
def _markers(pem_marker):
def load_pem(contents, pem_marker):
def save_pem(contents, pem_marker):
def private_to_public():
def bit_size(num):
def _bit_size(number):
def byte_size(number):
def extended_gcd(a, b):
def inverse(x, n):
def crt(a_values, modulo_values):
def is_bytes(obj):
def is_integer(obj):
def byte(num):
def get_word_alignment(num, force_arch=64, _machine_word_size=MACHINE_WORD_SIZE):
def _pad_for_encryption(message, target_length):
def _pad_for_signing(message, target_length):
def encrypt(message, pub_key):
def decrypt(crypto, priv_key):
def sign(message, priv_key, hash):
def verify(message, signature, pub_key):
def _hash(message, method_name):
def _find_method_hash(method_hash):
def find_p_q(nbits, getprime_func=rsa.prime.getprime, accurate=True):
def calculate_keys(p, q, nbits):
def gen_keys(nbits, getprime_func, accurate=True):
def newkeys(nbits, accurate=True, poolsize=1):
def getprime(nbits, poolsize):
def encrypt_bigfile(infile, outfile, pub_key):
def decrypt_bigfile(infile, outfile, priv_key):
def bytes2int(raw_bytes):
def _int2bytes(number, block_size=None):
def bytes_leading(raw_bytes, needle=ZERO_BYTE):
def int2bytes(number, fill_size=None, chunk_size=None, overflow=False):
def keygen():
def read_varint(infile):
def write_varint(outfile, value):
def yield_varblocks(infile):
def yield_fixedblocks(infile, blocksize):
def _resolve_name(name, package, level):
def import_module(name, package=None):
def dict_to_sequence(d):
def get_netrc_auth(url, raise_errors=False):
def guess_filename(obj):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def unquote_unreserved(uri):
def requote_uri(uri):
def address_in_network(ip, net):
def dotted_netmask(mask):
def is_valid_cidr(string_network):
def should_bypass_proxies(url):
def get_environ_proxies(url):
def default_user_agent(name='python-requests'):
def parse_header_links(value):
def prepend_scheme_if_needed(url, new_scheme):
def get_auth_from_url(url):
def to_native_string(string, encoding='ascii'):
def urldefragauth(url):
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):
def merge_cookies(cookiejar, cookies):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d):
def itervalues(d):
def iteritems(d):
def with_metaclass(meta, base=object):
def _dnsname_match(dn, hostname, max_wildcards=1):
def match_hostname(cert, hostname):
def add_stderr_logger(level=logging.DEBUG):
def disable_warnings(category=exceptions.HTTPWarning):
def guess_content_type(filename, default='application/octet-stream'):
def format_header_param(name, value):
def choose_boundary():
def iter_field_objects(fields):
def iter_fields(fields):
def encode_multipart_formdata(fields, boundary=None):
def is_fp_closed(obj):
def current_time():
def assert_fingerprint(cert, fingerprint):
def resolve_cert_reqs(candidate):
def resolve_ssl_version(candidate):
def create_urllib3_context(ssl_version=None, cert_reqs=None, options=None, ciphers=None):
def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None, ca_certs=None, server_hostname=None, ssl_version=None, ciphers=None, ssl_context=None):
def is_connection_dropped(conn):
def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT, source_address=None, socket_options=None):
def split_first(s, delims):
def parse_url(url):
def get_host(url):
def make_headers(keep_alive=None, accept_encoding=None, user_agent=None, basic_auth=None, proxy_basic_auth=None, disable_cache=None):
def connection_from_url(url, **kw):
def inject_into_urllib3():
def extract_from_urllib3():
def _basic_auth_str(username, password):
def dispatch_hook(key, hooks, hook_data, **kwargs):
def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):
def session():
def request(method, url, **kwargs):
def get(url, params=None, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, json=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):
def strptime(date):
def _str(s):
def resolve(code):
def resolve(code):
def parse(path):
def str_to_unicode(s, encoding=None):
def unicode_to_str(s, encoding=None):
def matroska_date_to_datetime(date):
def matroska_bps_to_bitrate(bps):
def Parser(file):
def match_hostname(cert, hostname):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def python_2_unicode_compatible(klass):
def register_treebuilders_from(module):
def _alias(attr):
def diagnose(data):
def lxml_trace(data, html=True, **kwargs):
def htmlparser_trace(data):
def rword(length=5):
def rsentence(length=4):
def rdoc(num_elements=1000):
def benchmark_parsers(num_elements=100000):
def get_supported_platform():
def register_loader_type(loader_type, provider_factory):
def get_provider(moduleOrReq):
def get_build_platform():
def compatible_platforms(provided, required):
def run_script(dist_spec, script_name):
def get_distribution(dist):
def load_entry_point(dist, group, name):
def get_entry_map(dist, group=None):
def get_entry_info(dist, group, name):
def get_default_cache():
def safe_name(name):
def safe_version(version):
def safe_extra(extra):
def to_filename(name):
def get_importer(path_item):
def register_finder(importer_type, distribution_finder):
def find_distributions(path_item, only=False):
def StringIO(*args, **kw):
def find_on_path(importer, path_item, only=False):
def register_namespace_handler(importer_type, namespace_handler):
def _handle_ns(packageName, path_item):
def declare_namespace(packageName):
def fixup_namespace_packages(path_item, parent=None):
def file_ns_handler(importer, path_item, packageName, module):
def normalize_path(filename):
def yield_lines(strs):
def parse_version(s):
def parse_requirements(strs):
def _get_mro(cls):
def _find_adapter(registry, ob):
def ensure_directory(path):
def split_sections(s):
def to_sax(walker, handler):
def SerializeError(Exception):
def getTreeBuilder(treeType, implementation=None, **kwargs):
def tostring(element):
def parse(doc, treebuilder=u'etree', encoding=None, namespaceHTMLElements=True):
def codecName(encoding):
def to_text(s, blank_if_none=True):
def is_text_or_none(string):
def getTreeWalker(treeType, implementation=None, **kwargs):
def build_authenticate_header(realm=''):
def build_xoauth_string(url, consumer, token=None):
def to_unicode(s):
def to_unicode_optional_iterator(x):
def to_utf8_optional_iterator(x):
def escape(s):
def generate_timestamp():
def generate_nonce(length=8):
def generate_verifier(length=8):
def asint(text):
def asbool(obj):
def convert_to_datetime(input):
def timedelta_seconds(delta):
def time_difference(date1, date2):
def datetime_ceil(dateval):
def combine_opts(global_config, prefix, local_config={}):
def get_callable_name(func):
def obj_to_ref(obj):
def ref_to_obj(ref):
def maybe_ref(ref):
def to_unicode(string, encoding='ascii'):
def get_varname(rpc_call):
def call_method(class_obj, method, *args):
def find_method(rpc_call):
def process_result(method, result):
def _build_rpc_methods(class_, method_list):
def bool_to_int(value):
def cmd_exists(cmds_list, cmd):
def find_torrent(info_hash, torrent_list):
def is_valid_port(port):
def safe_repr(fmt, *args, **kwargs):
def HTTPResponse__getheaders(self):
def parse_uri(uri):
def safename(filename):
def _parse_www_authenticate(headers, headername='www-authenticate'):
def _entry_disposition(response_headers, request_headers):
def proxy_info_from_environment(method='http'):
def proxy_info_from_url(url, method='http'):
def iri2uri(uri):
def setdefaultproxy(proxytype=None, addr=None, port=None, rdns=True, username=None, password=None):
def wrapmodule(module):
def dumps(x, float_bits=DEFAULT_FLOAT_BITS):
def _discover(disp, ns, jid, node=None, fb2b=0, fb2a=1):
def discoverItems(disp, jid, node=None):
def discoverInfo(disp, jid, node=None):
def getRegInfo(disp, host, info={}, sync=True):
def register(disp, host, info):
def unregister(disp, host):
def changePasswordTo(disp, newpassword, host=None):
def getPrivacyLists(disp):
def getPrivacyList(disp, listname):
def setActivePrivacyList(disp, listname=None, typ='active'):
def setDefaultPrivacyList(disp, listname=None):
def setPrivacyList(disp, list):
def delPrivacyList(disp, listname):
def XMLescape(txt):
def ustr(what):
def XML2Node(xml):
def BadXML2Node(xml):
def isResultNode(node):
def isErrorNode(node):
def split_path(path):
def file_in_same_dir(ref_file, desired_file):
def load_file_in_same_dir(ref_file, filename):
def lang_set(languages, strict=False):
def search_language(string, lang_filter=None, skip=None):
def guess_language(text):
def compute_canonical_form(property_name, value):
def guess_file_info(filename, filetype, info=None):
def find_first_level_groups_span(string, enclosing):
def split_on_groups(string, groups):
def find_first_level_groups(string, enclosing, blank_sep=None):
def format_guess(guess):
def process(mtree):
def process(mtree):
def choose_int(g1, g2):
def choose_string(g1, g2):
def _merge_similar_guesses_nocheck(guesses, prop, choose):
def merge_similar_guesses(guesses, prop, choose):
def merge_all(guesses, append=None):
def hash_file(filename):
def hash_filehash(filename):
def setupLogging(colored=True, with_time=False, with_thread=False, filename=None, with_lineno=False):
def search_year(string):
def search_date(string):
def hash_file(filename):
def patch_cache_lfu(lock_obj):
def patch_cache_rr(lock_obj):
def patch_flush_fsync(db_obj):
def migrate(source, destination):
def cache1lvl(maxsize=100):
def cache2lvl(maxsize=100):
def create_list_tasks(paths, languages, services, force, multi, cache_dir, max_depth, scan_filter):
def create_download_tasks(subtitles_by_video, languages, multi):
def consume_task(task, services=None):
def matching_confidence(video, subtitle):
def get_service(services, service_name, config=None):
def key_subtitles(subtitle, video, languages, services, order):
def group_by_video(list_results):
def filter_services(services):
def scan(entry, max_depth=3, scan_filter=None, depth=0):
def hash_opensubtitles(path):
def hash_thesubdb(path):
def get_keywords(guess):
def split_keyword(keyword):
def to_unicode(data):
def get_subtitle_path(video_path, language, multi):
def list_subtitles(paths, languages=None, services=None, force=True, multi=False, cache_dir=None, max_depth=3, scan_filter=None):
def download_subtitles(paths, languages=None, services=None, force=True, multi=False, cache_dir=None, max_depth=3, scan_filter=None, order=None):
def cachedmethod(function):
def splitPrefix(name):
def tostr(object, encoding=None):
def items(sobject):
def asdict(sobject):
def merge(a, b):
def footprint(sobject):
def qualify(ref, resolvers, defns=Namespace.default):
def isqref(object):
def fetch_from_url(url, config, data=None, handlers=None):
def fetch_from_url_to_file(url, config, output_file, data=None, handlers=None):
def fetch_stream_from_url(url, config, data=None, handlers=None):
def open_url(url, config, data=None, handlers=None):
def _should_use_proxy(url, no_proxy=None):
def _url_as_string(url):
def main():
def make_ssl_context(key_file=None, cert_file=None, pem_file=None, ca_dir=None, verify_peer=False, url=None, method=SSL.TLSv1_METHOD, key_file_passphrase=None):
def set_peer_verification_for_url_hostname(ssl_context, url, if_verify_enabled=False):
def build_opener(*handlers, **kw):
def tzname_in_python2(myfunc):
def easter(year, method=EASTER_WESTERN):
def _parsems(value):
def picknthweekday(year, month, dayofweek, hour, minute, whichweek):
def valuestodict(key):
def condition2checker(condition):
def call_unrar(params, custom_path=None):
def DosDateTimeToTimeTuple(dosDateTime):
def enable_pretty_logging(options=None, logger=None):
def install(io_loop=None):
def set_close_exec(fd):
def to_tornado_future(asyncio_future):
def to_asyncio_future(tornado_future):
def bind_sockets(port, address=None, family=socket.AF_UNSPEC, backlog=_DEFAULT_BACKLOG, flags=None):
def add_accept_handler(sock, callback, io_loop=None):
def is_valid_ip(ip):
def ssl_options_to_context(ssl_options):
def ssl_wrap_socket(socket, ssl_options, server_hostname=None, **kwargs):
def import_object(name):
def errno_from_exception(e):
def timedelta_to_seconds(td):
def _websocket_mask_python(mask, data):
def cpu_count():
def fork_processes(num_processes, max_restarts=100):
def task_id():
def websocket_connect(url, io_loop=None, callback=None, connect_timeout=None, on_message_callback=None, compression_options=None):
def _auth_return_future(f):
def _oauth_signature(consumer_token, method, url, parameters={}, token=None):
def _oauth10a_signature(consumer_token, method, url, parameters={}, token=None):
def get_unused_port():
def bind_unused_port():
def get_async_test_timeout():
def gen_test(func=None, timeout=None):
def main(**kwargs):
def start(io_loop=None, check_time=500):
def wait():
def watch(filename):
def add_reload_hook(fn):
def main():
def get(*locale_codes):
def set_default_locale(code):
def load_translations(directory):
def load_gettext_translations(directory, domain):
def get_supported_locales():
def define(name, default=None, type=None, help=None, metavar=None, multiple=False, group=None, callback=None):
def parse_command_line(args=None, final=True):
def parse_config_file(path, final=True):
def print_help(file=None):
def add_parse_callback(callback):
def xhtml_escape(value):
def xhtml_unescape(value):
def json_encode(value):
def json_decode(value):
def squeeze(value):
def url_escape(value, plus=True):
def utf8(value):
def to_unicode(value):
def to_basestring(value):
def recursive_unicode(obj):
def linkify(text, shorten=False, extra_params='', require_protocol=False, permitted_protocols=['http', 'https']):
def run_on_executor(fn):
def return_future(f):
def chain_future(a, b):
def _remove_deactivated(contexts):
def wrap(fn):
def run_with_stack_context(context, func):
def engine(func):
def coroutine(func, replace_callback=True):
def _make_coroutine_wrapper(func, replace_callback):
def Task(func, *args, **kwargs):
def multi_future(children):
def maybe_future(x):
def with_timeout(timeout, future, io_loop=None, quiet_exceptions=()):
def sleep(duration):
def _argument_adapter(callback):
def convert_yielded(yielded):
def url_concat(url, args):
def _parse_request_range(range_header):
def _get_content_range(start, end, total):
def parse_body_arguments(content_type, body, arguments, files, headers=None):
def parse_multipart_form_data(boundary, data, arguments, files):
def format_timestamp(ts):
def parse_request_start_line(line):
def parse_response_start_line(line):
def _parse_header(line):
def _encode_header(key, pdict):
def split_host_and_port(netloc):
def asynchronous(method):
def stream_request_body(cls):
def removeslash(method):
def addslash(method):
def authenticated(method):
def _unquote_or_none(s):
def _double_prefix(deque):
def _merge_prefix(deque, size):
def _items(mappingorseq):
def mini(description, applicationName='PythonMini', noteType='Message', title='Mini DCSP Message', applicationIcon=None, hostname='localhost', password=None, port=23053, sticky=False, priority=None, callback=None, notificationIcon=None, identifier=None, notifierFactory=GrowlNotifier):
def parse_gntp(data, password=None):
def mini(description, **kwargs):
def quote_for_shell(s):
def construct_base_string(http_method, base_string_uri, normalized_encoded_request_parameters):
def normalize_base_string_uri(uri):
def collect_parameters(uri_query='', body=[], headers=None, exclude_oauth_signature=True):
def normalize_parameters(params):
def sign_hmac_sha1(base_string, client_secret, resource_owner_secret):
def sign_rsa_sha1(base_string, rsa_private_key):
def sign_plaintext(client_secret, resource_owner_secret):
def filter_params(target):
def filter_oauth_params(params):
def generate_timestamp():
def generate_nonce():
def generate_token(length=20, chars=UNICODE_ASCII_CHARACTER_SET):
def escape(u):
def urlencode(query):
def parse_keqv_list(l):
def parse_http_list(u):
def parse_authorization_header(authorization_header):
@utils.filter_params DCNL def prepare_headers(oauth_params, headers=None, realm=None):
def _append_params(oauth_params, params):
def prepare_form_encoded_body(oauth_params, body):
def prepare_request_uri_query(oauth_params, uri):
def add_params_to_qs(query, params):
def add_params_to_uri(uri, params):
def escape(u):
def generate_nonce():
def generate_timestamp():
def generate_token(length=20, chars=UNICODE_ASCII_CHARACTER_SET):
def host_from_uri(uri):
def urlencode(query):
def prepare_mac_header(token, uri, key, http_method, nonce=None, headers=None, body=None, ext=u'', hash_algorithm=u'hmac-sha-1'):
def prepare_bearer_uri(token, uri):
def prepare_bearer_headers(token, headers=None):
def prepare_bearer_body(token, body=u''):
def encode_params_utf8(params):
def decode_params_utf8(params):
def urldecode(query):
def extract_params(raw):
def description_of(lines, name=u'stdin'):
def main(argv=None):
def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, **kw):
def dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, **kw):
def load(fp, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, use_decimal=True, **kw):
def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, use_decimal=True, **kw):
def find_exe(exename):
def move(k, d1, d2, strict=False):
def subtract(d1, d2):
def split_on_newlines(s):
def pop_trailing_newlines(s):
def to_decimal(x):
def mult(a, b):
def rep_bench(func, n, runtime=1.0, initfunc=None, MAXREPS=10, MAXTIME=60.0, profile=False, profresults='pyutil-benchutil.prof', UNITS_PER_SECOND=1, quiet=False):
def callLater_weakly(delay, func, *args, **kwargs):
def div_ceil(n, d):
def next_multiple(n, k):
def pad_size(n, k):
def log_ceil(n, b):
def log_floor(n, b):
def linear_fit_slope(ps):
def permute(l):
def decompress(zbuf, maxlen=(65 * (2 ** 20)), maxmem=(65 * (2 ** 20))):
def decompress_to_fileobj(zbuf, fileobj, maxlen=(65 * (2 ** 20)), maxmem=(65 * (2 ** 20))):
def decompress_to_spool(zbuf, fileobj, maxlen=(65 * (2 ** 20)), maxmem=(65 * (2 ** 20))):
def get_local_addresses_async(target='198.41.0.4'):
def get_local_ip_for(target):
def py_xor_simple(str1, str2):
def check_for_obj_leakage(f, *args, **kwargs):
def measure_obj_leakage(f, numsamples=(2 ** 7), iterspersample=(2 ** 4), *args, **kwargs):
def measure_ref_leakage(f, numsamples=(2 ** 7), iterspersample=(2 ** 4), *args, **kwargs):
def get_mem_used():
def get_mem_used_res():
def get_mem_usage_virt_and_res():
def measure_mem_leakage(f, numsamples=(2 ** 7), iterspersample=(2 ** 4), *args, **kwargs):
def describe_object(o, FunctionType=types.FunctionType, MethodType=types.MethodType, InstanceType=types.InstanceType):
def visit_all_objects(f):
def suggest_normalized_version(s):
def get_linux_distro():
def read_file(filename, mode='rb'):
def write_file(filename, data, mode='wb'):
def make_dirs(dirname, mode=511):
def rmtree(dirname):
def iso_utc_time_to_seconds(isotime, _conversion_re=re.compile('(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})[T_ DCSP ](?P<hour>\\d{2}):(?P<minute>\\d{2}):(?P<second>\\d{2})(?P<subsecond>\\.\\d+)?Z?')):
def clean_dict(target, remove=None):
def cleanHost(host, protocol=True, ssl=False, username=None, password=None):
def natsortKey(string_):
def nameScore(name, year, preferred_words):
def pytest_addoption(parser):
@pytest.fixture(scope='module') DCNL def net_connect(request):
@pytest.fixture() DCNL def net_connect_cm(request):
@pytest.fixture(scope='module') DCNL def expected_responses(request):
@pytest.fixture(scope='module') DCNL def commands(request):
def delete_file_ios(ssh_conn, dest_file_system, dest_file):
@pytest.fixture(scope='module') DCNL def scp_fixture(request):
@pytest.fixture(scope='module') DCNL def scp_fixture_get(request):
@pytest.fixture(scope='module') DCNL def tcl_fixture(request):
@pytest.fixture(scope='module') DCNL def ssh_autodetect(request):
def test_ssh_connect(net_connect, commands, expected_responses):
def test_enable_mode(net_connect, commands, expected_responses):
def test_config_mode(net_connect, commands, expected_responses):
def test_exit_config_mode(net_connect, commands, expected_responses):
def test_command_set(net_connect, commands, expected_responses):
def test_commands_from_file(net_connect, commands, expected_responses):
def test_disconnect(net_connect, commands, expected_responses):
def main():
def main():
def test_disable_paging(net_connect, commands, expected_responses):
def test_ssh_connect(net_connect, commands, expected_responses):
def test_ssh_connect_cm(net_connect_cm, commands, expected_responses):
def test_send_command_timing(net_connect, commands, expected_responses):
def test_send_command_expect(net_connect, commands, expected_responses):
def test_base_prompt(net_connect, commands, expected_responses):
def test_strip_prompt(net_connect, commands, expected_responses):
def test_strip_command(net_connect, commands, expected_responses):
def test_normalize_linefeeds(net_connect, commands, expected_responses):
def test_clear_buffer(net_connect, commands, expected_responses):
def test_enable_mode(net_connect, commands, expected_responses):
def test_disconnect(net_connect, commands, expected_responses):
def test_disconnect(scp_fixture):
def test_disconnect_get(scp_fixture_get):
def retrieve_commands(commands):
def setup_initial_state(net_connect, commands, expected_responses):
def setup_base_config(net_connect, config_changes):
def config_change_verify(net_connect, verify_cmd, cmd_response):
def test_ssh_connect(net_connect, commands, expected_responses):
def test_config_mode(net_connect, commands, expected_responses):
def test_commit_base(net_connect, commands, expected_responses):
def test_commit_confirm(net_connect, commands, expected_responses):
def test_confirm_delay(net_connect, commands, expected_responses):
def test_no_confirm(net_connect, commands, expected_responses):
def test_clear_msg(net_connect, commands, expected_responses):
def test_commit_check(net_connect, commands, expected_responses):
def test_commit_comment(net_connect, commands, expected_responses):
def test_commit_andquit(net_connect, commands, expected_responses):
def test_commit_label(net_connect, commands, expected_responses):
def test_commit_label_comment(net_connect, commands, expected_responses):
def test_commit_label_confirm(net_connect, commands, expected_responses):
def test_exit_config_mode(net_connect, commands, expected_responses):
def test_disconnect(net_connect, commands, expected_responses):
def test_ssh_connect(ssh_autodetect):
def test_disconnect(tcl_fixture):
def parse_yaml(yaml_file):
def ConnectHandler(*args, **kwargs):
def ssh_dispatcher(device_type):
def redispatch(obj, device_type, session_prep=True):
def load_yaml_file(yaml_file):
def load_devices(file_name=None):
def find_cfg_file(file_name=None):
def display_inventory(my_devices):
def obtain_all_devices(my_devices):
def obtain_netmiko_filename(device_name):
def ensure_dir_exists(verify_dir):
def find_netmiko_dir():
def write_bytes(out_data):
def main():
def worker_show_version(a_device, mp_queue):
def asa_scp_handler(ssh_conn, cmd='ssh DCSP scopy DCSP enable', mode='enable'):
def main():
def find_version(*file_paths):
def main():
def create_instance(field):
def model_json_decoder(dct):
def get_dirs():
def _get_user_dirs(xdg_config_dir):
def path_to_uri(path):
def uri_to_path(uri):
def _find_worker(relative, follow, done, work, results, errors):
def _find(root, thread_count=10, relative=False, follow=False):
def sigterm_handler(signum, frame):
def _check_iterable(arg, msg, **kwargs):
def load(path):
def dump(path, data):
def slugify(value):
def try_ipv6_socket():
def create_socket():
def format_hostname(hostname):
def path_to_uri(path, scheme=Extension.ext_name):
def uri_to_path(uri):
def name_from_path(path):
def path_from_name(name, ext=None, sep=u'|'):
def load_extensions():
def validate_extension_data(data):
def read(config_file):
def _preprocess(config_string):
def _postprocess(config_string):
def _did_you_mean(name, choices):
def _levenshtein(a, b):
def set(section, key, value):
def validate_required(value, required):
def validate_choice(value, choices):
def validate_minimum(value, minimum):
def validate_maximum(value, maximum):
def find_exact(tracks, query=None, limit=100, offset=0, uris=None):
def search(tracks, query=None, limit=100, offset=0, uris=None):
def local_uri_to_file_uri(uri, media_dir):
def local_uri_to_path(uri, media_dir):
def path_to_file_uri(abspath):
def path_to_local_track_uri(relpath):
def path_to_local_directory_uri(relpath):
def split(line):
def _determine_error_message(remainder):
def track_to_mpd_format(track, position=None, stream_title=None):
def _has_value(tagtype, value):
def concat_multi_values(models, attribute):
def tracks_to_mpd_format(tracks, start=0, end=None):
def playlist_to_mpd_format(playlist, *args, **kwargs):
@protocol.commands.add(u'add') DCNL def add(context, uri):
@protocol.commands.add(u'addid', songpos=protocol.UINT) DCNL def addid(context, uri, songpos=None):
@protocol.commands.add(u'delete', songrange=protocol.RANGE) DCNL def delete(context, songrange):
@protocol.commands.add(u'deleteid', tlid=protocol.UINT) DCNL def deleteid(context, tlid):
@protocol.commands.add(u'clear') DCNL def clear(context):
@protocol.commands.add(u'move', songrange=protocol.RANGE, to=protocol.UINT) DCNL def move_range(context, songrange, to):
@protocol.commands.add(u'moveid', tlid=protocol.UINT, to=protocol.UINT) DCNL def moveid(context, tlid, to):
@protocol.commands.add(u'playlist') DCNL def playlist(context):
@protocol.commands.add(u'playlistfind') DCNL def playlistfind(context, tag, needle):
@protocol.commands.add(u'playlistid', tlid=protocol.UINT) DCNL def playlistid(context, tlid=None):
@protocol.commands.add(u'playlistinfo') DCNL def playlistinfo(context, parameter=None):
@protocol.commands.add(u'playlistsearch') DCNL def playlistsearch(context, tag, needle):
@protocol.commands.add(u'plchanges', version=protocol.INT) DCNL def plchanges(context, version):
@protocol.commands.add(u'plchangesposid', version=protocol.INT) DCNL def plchangesposid(context, version):
@protocol.commands.add(u'prio', priority=protocol.UINT, position=protocol.RANGE) DCNL def prio(context, priority, position):
@protocol.commands.add(u'prioid') DCNL def prioid(context, *args):
@protocol.commands.add(u'rangeid', tlid=protocol.UINT, songrange=protocol.RANGE) DCNL def rangeid(context, tlid, songrange):
@protocol.commands.add(u'shuffle', songrange=protocol.RANGE) DCNL def shuffle(context, songrange=None):
@protocol.commands.add(u'swap', songpos1=protocol.UINT, songpos2=protocol.UINT) DCNL def swap(context, songpos1, songpos2):
@protocol.commands.add(u'swapid', tlid1=protocol.UINT, tlid2=protocol.UINT) DCNL def swapid(context, tlid1, tlid2):
@protocol.commands.add(u'addtagid', tlid=protocol.UINT) DCNL def addtagid(context, tlid, tag, value):
@protocol.commands.add(u'cleartagid', tlid=protocol.UINT) DCNL def cleartagid(context, tlid, tag):
@protocol.commands.add(u'count') DCNL def count(context, *args):
@protocol.commands.add(u'find') DCNL def find(context, *args):
@protocol.commands.add(u'findadd') DCNL def findadd(context, *args):
@protocol.commands.add(u'list') DCNL def list_(context, *args):
@protocol.commands.add(u'listall') DCNL def listall(context, uri=None):
@protocol.commands.add(u'listallinfo') DCNL def listallinfo(context, uri=None):
@protocol.commands.add(u'listfiles') DCNL def listfiles(context, uri=None):
@protocol.commands.add(u'lsinfo') DCNL def lsinfo(context, uri=None):
@protocol.commands.add(u'rescan') DCNL def rescan(context, uri=None):
@protocol.commands.add(u'search') DCNL def search(context, *args):
@protocol.commands.add(u'searchadd') DCNL def searchadd(context, *args):
@protocol.commands.add(u'searchaddpl') DCNL def searchaddpl(context, *args):
@protocol.commands.add(u'update') DCNL def update(context, uri=None):
def readcomments(context, uri):
@protocol.commands.add(u'listplaylist') DCNL def listplaylist(context, name):
@protocol.commands.add(u'listplaylistinfo') DCNL def listplaylistinfo(context, name):
@protocol.commands.add(u'listplaylists') DCNL def listplaylists(context):
def _get_last_modified(last_modified=None):
@protocol.commands.add(u'load', playlist_slice=protocol.RANGE) DCNL def load(context, name, playlist_slice=slice(0, None)):
@protocol.commands.add(u'playlistadd') DCNL def playlistadd(context, name, track_uri):
def _create_playlist(context, name, tracks):
@protocol.commands.add(u'playlistclear') DCNL def playlistclear(context, name):
@protocol.commands.add(u'playlistdelete', songpos=protocol.UINT) DCNL def playlistdelete(context, name, songpos):
@protocol.commands.add(u'playlistmove', from_pos=protocol.UINT, to_pos=protocol.UINT) DCNL def playlistmove(context, name, from_pos, to_pos):
@protocol.commands.add(u'rename') DCNL def rename(context, old_name, new_name):
@protocol.commands.add(u'rm') DCNL def rm(context, name):
@protocol.commands.add(u'save') DCNL def save(context, name):
@protocol.commands.add(u'command_list_begin', list_command=False) DCNL def command_list_begin(context):
@protocol.commands.add(u'command_list_end', list_command=False) DCNL def command_list_end(context):
@protocol.commands.add(u'command_list_ok_begin', list_command=False) DCNL def command_list_ok_begin(context):
@protocol.commands.add(u'mount') DCNL def mount(context, path, uri):
@protocol.commands.add(u'unmount') DCNL def unmount(context, path):
@protocol.commands.add(u'listmounts') DCNL def listmounts(context):
@protocol.commands.add(u'listneighbors') DCNL def listneighbors(context):
def load_protocol_modules():
def INT(value):
def UINT(value):
def BOOL(value):
def RANGE(value):
@protocol.commands.add(u'subscribe') DCNL def subscribe(context, channel):
@protocol.commands.add(u'unsubscribe') DCNL def unsubscribe(context, channel):
@protocol.commands.add(u'channels') DCNL def channels(context):
@protocol.commands.add(u'readmessages') DCNL def readmessages(context):
@protocol.commands.add(u'sendmessage') DCNL def sendmessage(context, channel, text):
@protocol.commands.add(u'consume', state=protocol.BOOL) DCNL def consume(context, state):
@protocol.commands.add(u'crossfade', seconds=protocol.UINT) DCNL def crossfade(context, seconds):
@protocol.commands.add(u'mixrampdb') DCNL def mixrampdb(context, decibels):
@protocol.commands.add(u'mixrampdelay', seconds=protocol.UINT) DCNL def mixrampdelay(context, seconds):
@protocol.commands.add(u'next') DCNL def next_(context):
@protocol.commands.add(u'pause', state=protocol.BOOL) DCNL def pause(context, state=None):
@protocol.commands.add(u'play', songpos=protocol.INT) DCNL def play(context, songpos=None):
@protocol.commands.add(u'playid', tlid=protocol.INT) DCNL def playid(context, tlid):
@protocol.commands.add(u'previous') DCNL def previous(context):
@protocol.commands.add(u'random', state=protocol.BOOL) DCNL def random(context, state):
@protocol.commands.add(u'repeat', state=protocol.BOOL) DCNL def repeat(context, state):
@protocol.commands.add(u'replay_gain_mode') DCNL def replay_gain_mode(context, mode):
@protocol.commands.add(u'replay_gain_status') DCNL def replay_gain_status(context):
@protocol.commands.add(u'seek', songpos=protocol.UINT, seconds=protocol.UINT) DCNL def seek(context, songpos, seconds):
@protocol.commands.add(u'seekid', tlid=protocol.UINT, seconds=protocol.UINT) DCNL def seekid(context, tlid, seconds):
@protocol.commands.add(u'seekcur') DCNL def seekcur(context, time):
@protocol.commands.add(u'setvol', volume=protocol.INT) DCNL def setvol(context, volume):
@protocol.commands.add(u'single', state=protocol.BOOL) DCNL def single(context, state):
@protocol.commands.add(u'stop') DCNL def stop(context):
@protocol.commands.add(u'volume', change=protocol.INT) DCNL def volume(context, change):
@protocol.commands.add(u'close', auth_required=False) DCNL def close(context):
@protocol.commands.add(u'kill', list_command=False) DCNL def kill(context):
@protocol.commands.add(u'password', auth_required=False) DCNL def password(context, password):
@protocol.commands.add(u'ping', auth_required=False) DCNL def ping(context):
@protocol.commands.add(u'disableoutput', outputid=protocol.UINT) DCNL def disableoutput(context, outputid):
@protocol.commands.add(u'enableoutput', outputid=protocol.UINT) DCNL def enableoutput(context, outputid):
@protocol.commands.add(u'toggleoutput', outputid=protocol.UINT) DCNL def toggleoutput(context, outputid):
@protocol.commands.add(u'outputs') DCNL def outputs(context):
@protocol.commands.add(u'clearerror') DCNL def clearerror(context):
@protocol.commands.add(u'currentsong') DCNL def currentsong(context):
@protocol.commands.add(u'idle') DCNL def idle(context, *subsystems):
@protocol.commands.add(u'noidle', list_command=False) DCNL def noidle(context):
@protocol.commands.add(u'stats') DCNL def stats(context):
@protocol.commands.add(u'status') DCNL def status(context):
@protocol.commands.add(u'sticker', list_command=False) DCNL def sticker(context, action, field, uri, name=None, value=None):
@protocol.commands.add(u'config', list_command=False) DCNL def config(context):
@protocol.commands.add(u'commands', auth_required=False) DCNL def commands(context):
@protocol.commands.add(u'decoders') DCNL def decoders(context):
@protocol.commands.add(u'notcommands', auth_required=False) DCNL def notcommands(context):
@protocol.commands.add(u'tagtypes') DCNL def tagtypes(context):
@protocol.commands.add(u'urlhandlers') DCNL def urlhandlers(context):
def create_initial_config_file(args, extensions_data):
def format_proxy(proxy_config, auth=True):
def format_user_agent(name=None):
def calculate_duration(num_samples, sample_rate):
def create_buffer(data, timestamp=None, duration=None):
def millisecond_to_clocktime(value):
def clocktime_to_millisecond(value):
def supported_uri_schemes(uri_schemes):
def setup_proxy(element, config):
def convert_taglist(taglist):
def convert_tags_to_track(tags):
def _unwrap_stream(uri, timeout, scanner, requests_session):
def target_list_to_sparse_tensor(targetList):
def data_lists_to_batches(inputList, targetList, batchSize, swap_axes=True):
def gensin(frequency, duration, sampRate):
def maybe_download(file, work_directory=DATA_DIR):
def dense_to_some_hot(labels_dense, num_classes=140):
def dense_to_one_hot(labels_dense, num_classes=10):
def SimpleSeq2Seq(output_dim, output_length, hidden_dim=None, input_shape=None, batch_size=None, batch_input_shape=None, input_dim=None, input_length=None, depth=1, dropout=0.0, unroll=False, stateful=False):
def Seq2Seq(output_dim, output_length, batch_input_shape=None, input_shape=None, batch_size=None, input_dim=None, input_length=None, hidden_dim=None, depth=1, broadcast_state=True, unroll=False, stateful=False, inner_broadcast_state=True, teacher_force=False, peek=False, dropout=0.0):
def AttentionSeq2Seq(output_dim, output_length, batch_input_shape=None, batch_size=None, input_shape=None, input_length=None, input_dim=None, hidden_dim=None, depth=1, bidirectional=True, unroll=False, stateful=False, dropout=0.0):
def transform(pattern):
def parse_long(tokens, options):
def parse_shorts(tokens, options):
def parse_expr(tokens, options):
def parse_seq(tokens, options):
def parse_atom(tokens, options):
def parse_argv(tokens, options, options_first=False):
def docopt(doc, argv=None, help=True, version=None, options_first=False):
def docopt_cmd(func):
def merge(dict_1, dict_2):
def long_description():
def social_auth_backends(request):
def social_auth_by_type_backends(request):
def social_auth_by_name_backends(request):
def social_auth_login_redirect(request):
def group_backend_by_type(items):
def home(request):
@login_required DCNL def done(request):
def error(request):
def logout(request):
def long_description():
def get_sent_properties(request_func, propname_list):
def methods_via_query_allowed(handler_method):
def aware_to_naive(d):
def register(migration):
def find(migration_name):
def all():
def clear():
def build_authenticate_header(realm=''):
def build_xoauth_string(url, consumer, token=None):
def to_unicode(s):
def to_unicode_optional_iterator(x):
def to_utf8_optional_iterator(x):
def escape(s):
def generate_timestamp():
def generate_nonce(length=8):
def generate_verifier(length=8):
def HTTPResponse__getheaders(self):
def parse_uri(uri):
def safename(filename):
def _parse_www_authenticate(headers, headername='www-authenticate'):
def _entry_disposition(response_headers, request_headers):
def iri2uri(uri):
def setdefaultproxy(proxytype=None, addr=None, port=None, rdns=True, username=None, password=None):
def easter(year, method=EASTER_WESTERN):
def _parsems(value):
def picknthweekday(year, month, dayofweek, hour, minute, whichweek):
def valuestodict(key):
def api(role):
def role(role):
def deprecated(func):
def compare_digest(a, b):
def iso8601_date(d):
def iso8601_datetime(d):
def prefixed_collapsible_map(m, prefix):
def object(obj):
def iso8601_date(s):
def iso8601_datetime(s):
def rfc2822_datetime(s):
def decimal(d):
def integer(i):
def of(d):
def get_cert_file():
def compare(string1, string2):
def format_language(language):
def example():
def example():
def get_mongodb_version():
def _decorated_with_ver_requirement(func, ver_tuple):
def needs_mongodb_v26(func):
def needs_mongodb_v3(func):
def skip_pymongo3(f):
def get_version():
def key_not_string(d):
def key_has_dot_or_dollar(d):
def _import_class(cls_name):
def get_document(name):
def register_connection(alias, name=None, host=None, port=None, read_preference=READ_PREFERENCE, username=None, password=None, authentication_source=None, authentication_mechanism=None, **kwargs):
def disconnect(alias=DEFAULT_CONNECTION_NAME):
def get_connection(alias=DEFAULT_CONNECTION_NAME, reconnect=False):
def connect(db=None, alias=DEFAULT_CONNECTION_NAME, **kwargs):
def includes_cls(fields):
def queryset_manager(func):
def query(_doc_cls=None, **kwargs):
def update(_doc_cls=None, **update):
def _geo_operator(field, op, value):
def _infer_geometry(value):
def get_version(version_tuple):
def cut_levels(nodes, level):
def find_selected(nodes):
def set_language_changer(request, func):
def language_changer_decorator(language_changer):
def cut_after(node, levels, removed):
def cut_levels(nodes, from_level, to_level, extra_inactive, extra_active):
def _build_nodes_inner_for_one_menu(nodes, menu_class_name):
def _get_menu_class_for_instance(menu_class, instance):
def get_descendant_ids(root_id):
def plugin_report():
def entry_choices(user, page):
def step2_form_factory(mixin_cls, entry_form_class, attrs=None):
def update_title_paths(instance, **kwargs):
def pre_save_title(instance, raw, **kwargs):
def pre_delete_title(instance, **kwargs):
def update_home(instance, **kwargs):
def post_save_user(instance, raw, created, **kwargs):
def post_save_user_group(instance, raw, created, **kwargs):
def trigger_server_restart(**kwargs):
def apphook_pre_title_checker(instance, **kwargs):
def apphook_post_title_checker(instance, **kwargs):
def apphook_post_delete_title_checker(instance, **kwargs):
def apphook_post_delete_page_checker(instance, **kwargs):
def static_slotname(instance):
def get_plugin_media_path(instance, filename):
def _get_page_ancestors(page):
def render_page(request, page, current_language, slug):
def _get_page_by_untyped_arg(page_lookup, request, site_id):
@register.tag('static_with_version') DCNL def do_static_with_version(parser, token):
@register.filter('json') DCNL def json_filter(value):
@register.filter DCNL def all_ancestors_are_published(page, language):
@register.simple_tag DCNL def admin_static_url():
@register.inclusion_tag('admin/cms/page/plugin/submit_line.html', takes_context=True) DCNL def submit_row_plugin(context):
def get_primary_language(current_site=None):
def get_secondary_language(current_site=None):
def _get_basepath(path, depth):
def _get_path(path, depth, newstep):
def _inc_path(obj):
def _check_recursive(paths, reporter):
def pyflakes(packages):
def cms_settings(request):
def get_int(int_str, default=_no_default):
def _instance_overrides_method(base, instance, method_name):
def from_iterable(iterables):
def generate_valid_slug(source, parent, language):
def _verify_apphook(apphook, namespace):
def _verify_plugin_type(plugin_type):
@transaction.atomic DCNL def create_page(title, template, language, menu_title=None, slug=None, apphook=None, apphook_namespace=None, redirect=None, meta_description=None, created_by='python-api', parent=None, publication_date=None, publication_end_date=None, in_navigation=False, soft_root=False, reverse_id=None, navigation_extenders=None, published=False, site=None, login_required=False, limit_visibility_in_menu=constants.VISIBILITY_ALL, position='last-child', overwrite_url=None, xframe_options=Page.X_FRAME_OPTIONS_INHERIT, with_revision=None):
@transaction.atomic DCNL def create_title(language, title, page, menu_title=None, slug=None, redirect=None, meta_description=None, parent=None, overwrite_url=None, with_revision=None):
@transaction.atomic DCNL def add_plugin(placeholder, plugin_type, language, position='last-child', target=None, **data):
def create_page_user(created_by, user, can_add_page=True, can_view_page=True, can_change_page=True, can_delete_page=True, can_recover_page=True, can_add_pageuser=True, can_change_pageuser=True, can_delete_pageuser=True, can_add_pagepermission=True, can_change_pagepermission=True, can_delete_pagepermission=True, grant_all=False):
def assign_user_to_page(page, user, grant_on=ACCESS_PAGE_AND_DESCENDANTS, can_add=False, can_change=False, can_delete=False, can_change_advanced_settings=False, can_publish=False, can_change_permissions=False, can_move_page=False, can_recover_page=True, can_view=False, grant_all=False, global_permission=False):
def publish_page(page, user, language):
def publish_pages(include_unpublished=False, language=None, site=None):
def get_page_draft(page):
def copy_plugins_to_language(page, source_language, target_language, only_empty=True):
def can_change_page(request):
def _get_placeholder_cache_version_key(placeholder, lang, site_id):
def _get_placeholder_cache_version(placeholder, lang, site_id):
def _set_placeholder_cache_version(placeholder, lang, site_id, version, vary_on_list=None, duration=None):
def _get_placeholder_cache_key(placeholder, lang, site_id, request, soft=False):
def set_placeholder_cache(placeholder, lang, site_id, content, request):
def get_placeholder_cache(placeholder, lang, site_id, request):
def clear_placeholder_cache(placeholder, lang, site_id):
def _get_cache_version():
def _set_cache_version(version):
def invalidate_cms_page_cache():
def get_permission_cache(user, key):
def set_permission_cache(user, key, value):
def clear_user_permission_cache(user):
def applications_page_check(request, current_page=None, path=None):
def recurse_patterns(path, pattern_list, page_id, default_args=None, nested=False):
def get_patterns_for_title(path, title):
def _get_app_patterns():
def details(request, slug):
def levelize_path(path):
def urljoin(*segments):
def is_media_request(request):
def static_with_version(path):
def add_url_parameters(url, *args, **params):
def get_placeholder_conf(setting, placeholder, template=None, default=None):
def get_toolbar_plugin_struct(plugins, slot=None, page=None):
def _extend_nodelist(extend_node):
def _extend_blocks(extend_node, blocks):
def is_valid_page_slug(page, parent, lang, slug, site, path=None):
def get_available_slug(title, new_slug=None):
def check_title_slugs(page):
def send_mail(subject, txt_template, to, context=None, html_template=None, fail_silently=True):
def mail_page_user_change(user, created=False, password=''):
def get_request_ip_resolver():
def default_request_ip_resolver(request):
def real_ip(request):
def remote_addr_ip(request):
def x_forwarded_ip(request):
def define_check(func):
def check(output):
def get_template_from_request(request, obj=None, no_current_page=False):
def get_language_from_request(request, current_page=None):
def requires_reload(action, plugins):
def assign_plugins(request, placeholders, template, lang=None, is_fallback=False):
def create_default_plugins(request, placeholders, template, lang):
def build_plugin_tree(plugins):
def reorder_plugins(placeholder, parent_id, language, order):
def has_reached_plugin_limit(placeholder, plugin_type, language, template=None):
def get_language_code(language_code, site_id=None):
def get_current_language():
def get_language_list(site_id=None):
def get_language_tuple(site_id=None):
def get_language_dict(site_id=None):
def get_public_languages(site_id=None):
def get_language_object(language_code, site_id=None):
def get_language_objects(site_id=None):
def get_default_language(language_code=None, site_id=None):
def get_fallback_languages(language, site_id=None):
def get_redirect_on_fallback(language, site_id=None):
def hide_untranslated(language, site_id=None):
def is_language_prefix_patterns_used():
def register_draft_only(model_class, fields, follow, format):
def get_cache_durations():
def copy_plugins_to(old_plugins, to_placeholder, to_language=None, parent_plugin_id=None, no_signals=False):
def normalize_name(name):
def get_header_name(name):
def get_timezone_name():
def reversion_register(model_class, fields=None, follow=(), format='json', exclude_fields=None):
def validate_dependencies():
def validate_settings():
def setup():
def set_current_user(user):
def get_current_user():
@contextmanager DCNL def current_user(user):
def get_user_permission_level(user, site):
def get_subordinate_users(user, site):
def get_subordinate_groups(user, site):
def load_ancestors(pages):
def get_view_restrictions(pages):
def get_user_sites_queryset(user):
def has_plugin_permission(user, plugin_type, permission_type):
def jsonify_request(response):
def render_admin_rows(request, pages, site, filtered=False, language=None):
def get_module(app, modname, verbose, failfast):
def load(modname, verbose=False, failfast=False):
def iterload(modname, verbose=False, failfast=False):
def load_object(import_path):
def iterload_objects(import_paths):
def get_subclasses(c):
def load_from_file(module_path):
def get_model_queryset(model, request=None):
@permission_pre_checks(action='add_page') DCNL @cached_func DCNL def user_can_add_subpage(user, target, site=None):
def get_add_id_list(user, site, check_global=True, use_cache=True):
def get_change_id_list(user, site, check_global=True, use_cache=True):
def get_change_advanced_settings_id_list(user, site, check_global=True, use_cache=True):
def get_change_permissions_id_list(user, site, check_global=True, use_cache=True):
def get_delete_id_list(user, site, check_global=True, use_cache=True):
def get_move_page_id_list(user, site, check_global=True, use_cache=True):
def get_publish_id_list(user, site, check_global=True, use_cache=True):
def get_view_id_list(user, site, check_global=True, use_cache=True):
def get_page_queryset_from_path(path, preview=False, draft=False, site=None):
def get_page_from_path(path, preview=False, draft=False):
def get_page_from_request(request, use_path=None):
def is_valid_url(url, instance, create_links=True, site=None):
def get_visible_page_objects(request, pages, site):
def get_visible_pages(request, pages, site=None):
def page_to_node(renderer, page, home, language):
def scale_and_crop_with_subject_location(im, size, subject_location=False, zoom=None, crop=False, upscale=False, **kwargs):
def extra_padding_x(original_size, padding):
def extra_padding_x_keep_ratio(original_size, padding):
def extra_padding_y(original_size, padding):
def extra_padding_y_keep_ratio(original_size, padding):
def filer_actions(context):
@register.assignment_tag(takes_context=True) DCNL def filer_has_permission(context, item, action):
def filesize(bytes, format='auto1024'):
def create_folder_structure(depth=2, sibling=2, parent=None):
@csrf_exempt DCNL def ajax_upload(request, folder_id=None):
def get_deleted_objects(objs, opts, user, admin_site, using):
def admin_url_params(request, params=None):
def serve_protected_file(request, path):
def serve_protected_thumbnail(request, path):
def canonical(request, uploaded_at, file_id):
def handle_request_files_upload(request):
def get_valid_filename(s):
def get_model_label(model):
def load_object(import_path):
def storage_factory(klass, location, base_url):
def upath(path):
def unzip(file_obj):
def command_succeeds(cmd):
def getrgb(color):
def getcolor(color, mode):
def _parse_codestream(fp):
def _parse_jp2_header(fp):
def register_handler(handler):
def open(fp, mode='r'):
def register_handler(handler):
def read_32(fobj, start_length, size):
def _save(im, fp, filename):
def getiptcinfo(im):
def constant(image, value):
def duplicate(image):
def invert(image):
def lighter(image1, image2):
def darker(image1, image2):
def difference(image1, image2):
def multiply(image1, image2):
def screen(image1, image2):
def add(image1, image2, scale=1.0, offset=0):
def subtract(image1, image2, scale=1.0, offset=0):
def add_modulo(image1, image2):
def subtract_modulo(image1, image2):
def logical_and(image1, image2):
def logical_or(image1, image2):
def logical_xor(image1, image2):
def blend(image1, image2, alpha):
def composite(image1, image2, mask):
def offset(image, xoffset, yoffset=None):
def getmode(mode):
def i16le(c, o=0):
def si16le(c, o=0):
def i32le(c, o=0):
def si32le(c, o=0):
def register_handler(handler):
def register_handler(handler):
def show(image, title=None, **options):
def rgb(r, g, b, a=255):
def fromqimage(im):
def align8to32(bytes, width, mode):
def open(filename):
def loadImageSeries(filelist=None):
def Ghostscript(tile, size, fp, scale=1):
def _save(im, fp, filename, eps=1):
def autocontrast(image, cutoff=0, ignore=None):
def colorize(image, black, white):
def crop(image, border=0):
def scale(image, factor, resample=Image.NEAREST):
def deform(image, deformer, resample=Image.BILINEAR):
def equalize(image, mask=None):
def expand(image, border=0, fill=0):
def fit(image, size, method=Image.NEAREST, bleed=0.0, centering=(0.5, 0.5)):
def flip(image):
def grayscale(image):
def invert(image):
def mirror(image):
def posterize(image, bits):
def solarize(image, threshold=128):
def gaussian_blur(im, radius=None):
def unsharp_mask(im, radius=None, percent=None, threshold=None):
def box_blur(image, radius):
def isImageType(t):
def getmodebase(mode):
def getmodetype(mode):
def getmodebandnames(mode):
def getmodebands(mode):
def preinit():
def init():
def _wedge():
def _check_size(size):
def new(mode, size, color=0):
def frombytes(mode, size, data, decoder_name='raw', *args):
def frombuffer(mode, size, data, decoder_name='raw', *args):
def fromarray(obj, mode=None):
def fromqimage(im):
def fromqpixmap(im):
def open(fp, mode='r'):
def alpha_composite(im1, im2):
def blend(im1, im2, alpha):
def composite(image1, image2, mask):
def eval(image, *args):
def merge(mode, bands):
def register_open(id, factory, accept=None):
def register_mime(id, mimetype):
def register_save(id, driver):
def register_save_all(id, driver):
def register_extension(id, extension):
def registered_extensions():
def register_decoder(name, decoder):
def register_encoder(name, encoder):
def effect_mandelbrot(size, extent, quality):
def effect_noise(size, sigma):
def linear_gradient(mode):
def radial_gradient(mode):
def putchunk(fp, cid, *data):
def getchunks(im, **params):
def get_display_profile(handle=None):
def profileToProfile(im, inputProfile, outputProfile, renderingIntent=INTENT_PERCEPTUAL, outputMode=None, inPlace=0, flags=0):
def getOpenProfile(profileFilename):
def buildTransform(inputProfile, outputProfile, inMode, outMode, renderingIntent=INTENT_PERCEPTUAL, flags=0):
def buildProofTransform(inputProfile, outputProfile, proofProfile, inMode, outMode, renderingIntent=INTENT_PERCEPTUAL, proofRenderingIntent=INTENT_ABSOLUTE_COLORIMETRIC, flags=FLAGS['SOFTPROOFING']):
def applyTransform(im, transform, inPlace=0):
def createProfile(colorSpace, colorTemp=(-1)):
def getProfileName(profile):
def getProfileInfo(profile):
def getProfileCopyright(profile):
def getProfileManufacturer(profile):
def getProfileModel(profile):
def getProfileDescription(profile):
def getDefaultIntent(profile):
def isIntentSupported(profile, intent, direction):
def versions():
def Draw(im, mode=None):
def getdraw(im=None, hints=None):
def floodfill(image, xy, value, border=None, thresh=0):
def _color_diff(rgb1, rgb2):
def load(filename):
def truetype(font=None, size=10, index=0, encoding='', layout_engine=None):
def load_path(filename):
def load_default():
def getimage(photo):
def _show(image, title):
def register_handler(handler):
def _normalize_mode(im, initial_call=False):
def _normalize_palette(im, palette, info):
def _get_optimize(im, info):
def _get_header_palette(palette_bytes):
def _get_palette_bytes(im):
def _get_global_header(im, info):
def getheader(im, palette=None, info=None):
def getdata(im, offset=(0, 0), **params):
def _save(im, fp, tile, bufsize=0):
def _safe_read(fp, size):
def eval(expression, _dict={}, **kw):
def lookup(tag):
def build_lcms_70(compiler):
def _mp_compile(self, sources, output_dir=None, macros=None, include_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, depends=None):
def set_user_info(openid):
def is_user_exists(openid):
def get_sign_info(openid):
def update_sign_info(openid, lastsigntime, totaldays, keepdays):
def get_today_sign_ranklist(today_timestamp):
def get_sign_keepdays_ranklist(today_timestamp):
def get_express_num(openid, num):
def set_express_num(openid, num, com_code, lastupdate, ischeck):
def get_all_uncheck_express():
def get_all_auth_info():
def get_user_student_info(openid):
def get_user_library_info(openid):
def set_user_student_info(openid, studentid, studentpwd):
def set_user_library_info(openid, libraryid, librarypwd):
def set_user_realname_and_classname(openid, realname, classname):
def check_signature(func):
def init_wechat_sdk():
def update_wechat_token():
def get_wechat_access_token():
def get_jsapi_signature_data(url):
def generate_random_str(N):
def wechat_response(data):
def set_msg_type(msg_type):
@set_msg_type('text') DCNL def text_resp():
@set_msg_type('click') DCNL def click_resp():
@set_msg_type('scancode_waitmsg') DCNL def scancode_waitmsg_resp():
@set_msg_type('subscribe') DCNL def subscribe_resp():
def borrowing_record():
def renew_books():
def library_check_auth(content, renew=False):
def exam_grade():
def search_books():
def express_shipment_tracking():
def play_music():
def chat_robot():
def daily_sign():
def auth_url():
def get_school_news():
def get_weather_news():
def update_menu_setting():
def developing():
def enter_express_state():
def cancel_command():
def enter_chat_state():
def cet_score():
def postcard():
def html5_games():
def contact_us():
def academic_calendar():
def bbs_url():
def bus_routes():
def weather_radar():
def command_not_found():
def all_command():
def subscribe():
def phone_number():
@app.route('/', methods=['GET', 'POST']) DCNL @check_signature DCNL def handle_wechat_request():
@app.route('/auth-score/<openid>', methods=['GET', 'POST']) DCNL def auth_score(openid=None):
@app.route('/auth-score/<openid>/result', methods=['GET']) DCNL def auth_score_result(openid=None):
@app.route('/auth-library/<openid>', methods=['GET', 'POST']) DCNL def auth_library(openid=None):
@app.route('/auth-library/<openid>/result', methods=['GET']) DCNL def auth_library_result(openid=None):
@app.route('/score-report/<openid>', methods=['GET']) DCNL def school_report_card(openid=None):
@app.route('/robots.txt') DCNL def robots():
def send_text(openid, content):
def send_music(openid, title, desc, music_url, thumb_media_id):
def send_news(openid, content):
def send_message(data):
@celery.task(name='express.update') DCNL def update_uncheck_express():
@celery.task(name='library.return_books') DCNL def remind_return_books():
@celery.task(name='access_token.update') DCNL def update_access_token():
def make_celery(app):
@celery.task DCNL def get_douban_fm(openid):
@celery.task DCNL def get(openid):
@celery.task DCNL def get_tracking_info(openid, num, com_code=None, from_user_input=True):
def com_code_to_text(com_code):
def login(studentid, studentpwd, url, session, proxy):
def score_page(studentid, url, session, proxy):
@celery.task DCNL def borrowing_record(openid, libraryid, librarypwd, check_login=False, renew=False):
def login(session, libraryid, librarypwd, url, proxy):
def get_record(session, url, proxy):
def renew_books(openid, session, html, rows, url, proxy):
def send_record(openid, rows, content_end=None):
def get_html_tr_list(res):
def time_to_return_books(openid, libraryid, librarypwd):
def set_user_state(openid, state):
def get_user_state(openid):
def set_user_last_interact_time(openid, timestamp):
def get_user_last_interact_time(openid):
def ranklist_and_user_rank(openid, today_timestamp):
@celery.task DCNL def get(openid):
def get_weather_info():
def get_pm2_5_info():
def day_of_week(offset=0):
def weather_code_to_text(code):
def wind_code_to_text(code):
def _parse_json(s):
def _encode_params(**kw):
def _encode_multipart(**kw):
def _guess_content_type(url):
def _http(method, url, headers=None, **kw):
def _parse_json(s):
def _encode_params(**kw):
def _encode_multipart(**kw):
def _http_call(the_url, method, authorization, **kw):
def test_regex_bad_pattern():
def output_xml(data, code, headers=None):
def abort(http_status_code, **kwargs):
def marshal(data, fields, envelope=None):
def get_value(key, obj, default=None):
def to_marshallable_type(obj):
def _rfc822(dt):
def _iso8601(dt):
def output_json(data, code, headers=None):
def url(value):
def _normalize_interval(start, end, value):
def _parse_interval(value):
def iso8601interval(value, argument='argument'):
def date(value):
def natural(value, argument='argument'):
def positive(value, argument='argument'):
def boolean(value):
def datetime_from_rfc822(datetime_str):
def datetime_from_iso8601(datetime_str):
def retrieve_next_page(key, seed, args, callback, initial_bookmark=None):
def http_status_message(code):
def unpack(value):
def crossdomain(origin=None, methods=None, headers=None, expose_headers=None, max_age=21600, attach_to_all=True, automatic_options=True, credentials=False):
def load_images(img_names):
def retrieve_contributions_calendar(username, base_url):
def parse_contributions_calendar(contributions_calendar):
def find_max_daily_commits(contributions_calendar):
def calculate_multiplier(max_commits):
def get_start_date():
def generate_next_dates(start_date, offset=0):
def save(output, filename):
def request_user_input(prompt='> DCSP '):
def find_wheels(projects, search_dirs):
def create_environment(home_dir, site_packages=False, clear=False, unzip_setuptools=False, prompt=None, search_dirs=None, never_download=False, no_setuptools=False, no_pip=False, symlink=True):
def path_locations(home_dir):
def install_python(home_dir, lib_dir, inc_dir, bin_dir, site_packages, clear, symlink=True):
def fix_local_scheme(home_dir, symlink=True):
def fix_lib64(lib_dir, symlink=True):
def resolve_interpreter(exe):
def is_executable(exe):
def make_environment_relocatable(home_dir):
def relative_script(lines):
def fixup_pth_and_egg_link(home_dir, sys_path=None):
def make_relative_path(source, dest, dest_is_directory=True):
def create_bootstrap_script(extra_text, python_version=''):
def read_data(file, endian, num=1):
def mach_o_change(path, what, value):
def iter_and_close(file_like, block_size):
def cling_wrap(package_name, dir_name, **kw):
def _get_pth_filename():
def cmp_version(ver1, ver2):
def runcmd(cmdv, additional_env=None):
def make_app(app):
def make_syncdb():
def make_collectstatic():
def usage(msg=None):
def get_app_info(app_loc):
def _do_install_one(reg, app_loc, relative_path):
def do_install(app_loc_list, relative_paths=False):
def do_list():
def do_remove(app_name):
def do_sync(reg=None):
def do_collectstatic():
def parse_column(name, type_string, comment=None):
def _make_query(client, query, submission_type='Execute', udfs=None, settings=None, resources=[], wait=False, name=None, desc=None, local=True, is_parameterized=True, max=30.0, database='default', email_notify=False, **kwargs):
def check_has_write_access_permission(view_func):
@register.filter(name='unix_to_datetime') DCNL def unix_to_datetime(unixtime):
def make_re(mask):
def mask_not_printable(contents, mask_re=PRINTABLE):
def mask_not_alphanumeric(data):
def xxd(shift, data, bytes_per_line, bytes_per_sentence):
def main(input, output):
def filetype(mode):
def rwxtype(mode):
def rwx(mode, aclBit=False):
def _file_reader(fh):
def download(request, path):
def view(request, path):
def edit(request, path, form=None):
def save_file(request):
def listdir(request, path):
def listdir_paged(request, path):
def _massage_stats(request, stats):
def stat(request, path):
def display(request, path):
def read_contents(codec_type, path, fs, offset, length):
def detect_gzip(contents):
def detect_bz2(contents):
def detect_avro(contents):
def detect_snappy(contents):
def detect_parquet(fhandle):
def snappy_installed():
def _calculate_navigation(offset, length, size):
def formset_initial_value_extractor(request, parameter_names):
def formset_data_extractor(recurring=[], submitted=[]):
def generic_op(form_class, request, op, parameter_names, piggyback=None, template='fileop.mako', data_extractor=default_data_extractor, arg_extractor=default_arg_extractor, initial_value_extractor=default_initial_value_extractor, extra_params=None):
@require_http_methods(['POST']) DCNL def upload_file(request):
def _upload_file(request):
@require_http_methods(['POST']) DCNL def upload_archive(request):
def _upload_archive(request):
def location_to_url(location, strict=True):
def truncate(toTruncate, charsToKeep=50):
def view_i18n_helper(c, cluster, encoding, content):
def edit_i18n_helper(c, cluster, encoding, contents_pass_1, contents_pass_2):
def get_profile(user):
def update_app_permissions(**kwargs):
def install_sample_user():
def reset_all_users():
def reset_all_groups():
def _make_model_field(label, initial, choices, multi=True):
@error_handler DCNL @check_superuser_permission DCNL def get_users(request):
def require_change_password(self):
def edit_user(request, username=None):
def edit_group(request, name=None):
def edit_permission(request, app=None, priv=None):
def add_ldap_users(request):
def add_ldap_groups(request):
def sync_ldap_users_groups(request):
def sync_ldap_users(connection, failed_users=None):
def sync_ldap_groups(connection, failed_users=None):
def ensure_home_directory(fs, user):
def sync_unix_users_and_groups(min_uid, max_uid, min_gid, max_gid, check_shell):
def _check_remove_last_super(user_obj):
def _import_ldap_users(connection, username_pattern, sync_groups=False, import_by_dn=False, server=None, failed_users=None):
def _import_ldap_users_info(connection, user_info, sync_groups=False, import_by_dn=False, server=None, failed_users=None):
def _import_ldap_nested_groups(connection, groupname_pattern, import_members=False, recursive_import_members=False, sync_users=True, import_by_dn=False, failed_users=None):
def _import_ldap_suboordinate_groups(connection, groupname_pattern, import_members=False, recursive_import_members=False, sync_users=True, import_by_dn=False, failed_users=None):
def _import_ldap_groups(connection, groupname_pattern, import_members=False, recursive_import_members=False, sync_users=True, import_by_dn=False, failed_users=None):
def test_launch_about_app():
def oozie_to_hue_frequency(frequency_string):
def check_job_access_permission(request, job_id, **kwargs):
def _validate_node_links_json(node_type, node_links, errors):
def _validate_node_json(node_type, node_dict, errors, user, workflow):
def _validate_nodes_json(json_nodes, errors, user, workflow):
def _update_workflow_nodes_json(workflow, json_nodes, id_map, user):
@check_job_access_permission() DCNL @check_job_edition_permission() DCNL def create_coordinator_dataset(request, coordinator):
@check_dataset_access_permission DCNL @check_dataset_edition_permission() DCNL def edit_coordinator_dataset(request, dataset):
@check_job_access_permission() DCNL @check_job_edition_permission() DCNL def create_coordinator_data(request, coordinator, data_type):
def list_history(request):
def list_history_record(request, record_id):
def get_oozie_job_count():
def find_parameters(instance, fields=None):
def _set_coordinator_properties(coordinator, root, namespace):
def _set_controls(coordinator, root, namespace):
def _reconcile_datasets(coordinator, objects, root, namespace):
def convert_jobsub_design(jobsub_design):
def _save_links(workflow, root):
def _start_relationships(workflow, parent, child_el):
def _join_relationships(workflow, parent, child_el):
def _decision_relationships(workflow, parent, child_el):
def _node_relationships(workflow, parent, child_el):
def _resolve_fork_relationships(workflow):
def _resolve_decision_relationships(workflow):
def _prepare_nodes(workflow, root):
def _preprocess_nodes(workflow, transformed_root, workflow_definition_root, nodes, fs=None):
def _resolve_subworkflow_from_deployment_dir(fs, workflow, app_path):
def _save_nodes(workflow, nodes):
def _set_bundle_properties(bundle, root, namespace):
def _set_controls(bundle, root, namespace):
def add_node(workflow, name, node_type, parents, attrs={}):
def check_job_access_permission(exception_class=PopupException):
def check_job_edition_permission(authorize_get=False, exception_class=PopupException):
def check_action_access_permission(view_func):
def check_action_edition_permission(view_func):
def check_dataset_access_permission(view_func):
def check_dataset_edition_permission(authorize_get=False):
def find_parameters(instance, fields=None):
def import_workflow_from_hue_3_7(old_wf):
def hue1_to_hue2_data_migration():
def job_design_migration_for_jar(jd):
def job_design_migration_for_streaming(jd):
def _list_designs(request, owner, name, order_by='-last_modified'):
def list_designs(request):
def _get_design(user, design_id):
def _check_permission(request, owner_name, error_msg, allow_root=False):
def new_design(request, node_type):
def run_test_server():
def test_proxy_get():
def test_proxy_post():
def test_rewriting():
def check_host_port(host, port):
def check_blacklist(host, port, path):
def proxy(request, host, port, path):
def _rewrite_url(url):
def test_zookeeper():
def create_table(request, database='default'):
def import_wizard(request, database='default'):
def _submit_create_and_load(request, create_hql, table_name, path, load_data, database):
def _delim_preview(fs, file_form, encoding, file_types, delimiters):
def _parse_fields(path, file_obj, encoding, filetypes, delimiters):
def _readfields(lines, delimiters):
def _peek_file(fs, file_form):
def load_after_create(request, database):
def reset():
def get_conf():
def get_metastore():
def get_hiveserver2_kerberos_principal(hostname_or_ip):
def _parse_hive_site():
def to_choices(x):
def apply_natural_sort(collection, key=None):
def get_browse_partitioned_table_limit():
def get_deprecated_download_cell_limit():
def get_auth_username():
def get_auth_password():
def make_query_context(type, info):
def make_query(client, query, submission_type='Execute', udfs=None, settings=None, resources=None, wait=False, name=None, desc=None, local=True, is_parameterized=True, max=60.0, database='default', email_notify=False, params=None, server_name='beeswax', **kwargs):
def verify_history(client, fragment, design=None, reverse=False, server_name='beeswax'):
def get_csv(client, result_response):
def test_import_gzip_reader():
def test_index_page():
def test_hive_site_null_hs2krb():
def split_statements(hql):
def normalize_form_dict(form, attr_list):
def normalize_formset_dict(formset, attr_list):
def denormalize_form_dict(data_dict, form, attr_list):
def denormalize_formset_dict(data_dict_list, formset, attr_list):
def strip_trailing_semicolon(query):
@error_handler DCNL def save_results_hdfs_directory(request, query_history_id):
@error_handler DCNL def save_results_hdfs_file(request, query_history_id):
@error_handler DCNL def save_results_hive_table(request, query_history_id):
def save_design(request, form, type_, design, explicit_save):
def clone_design(request, design_id):
def list_designs(request):
def my_queries(request):
def list_query_history(request):
def execute_query(request, design_id=None, query_history_id=None):
def view_results(request, id, first_row=0):
@login_notrequired DCNL def query_done_cb(request, server_id):
def safe_get_design(request, design_type, design_id=None):
def make_parameterization_form(query_str):
def execute_directly(request, query, query_server=None, design=None, on_success_url=None, on_success_params=None, **kwargs):
def _list_designs(user, querydict, page_size, prefix='', is_trashed=False):
def _get_query_handle_and_state(query_history):
def parse_query_context(context):
def parse_out_jobs(log, engine='mr', with_state=False):
def _copy_prefix(prefix, base_dict):
def _list_query_history(user, querydict, page_size, prefix=''):
def _update_query_state(query_history):
def download(handle, format, db, id=None, file_name='query_result'):
def upload(path, handle, user, db, fs, max_rows=(-1)):
def get_ssl_server_certificate():
def get_max_result_cache_size():
def get_authorized_proxy_user_config():
def is_impersonation_enabled():
def get_auth_username():
def get_auth_password():
@register.filter(name='unix_ms_to_datetime') DCNL def unix_ms_to_datetime(unixtime):
def test_launch():
def get_jobconf(jt, jobid):
def format_unixtime_ms(unixtime):
def dots_to_camel_case(dots):
def get_path(hdfs_url):
def test_make_log_links():
def check_job_permission(view_func):
@check_job_permission DCNL def job_attempt_logs_json(request, job, attempt_index=0, name='syslog', offset=LOG_OFFSET_BYTES):
@check_job_permission DCNL def job_single_logs(request, job, offset=LOG_OFFSET_BYTES):
@check_job_permission DCNL def tasks(request, job):
@check_job_permission DCNL def task_attempt_counters(request, job, taskid, attemptid):
@access_log_level(logging.WARN) DCNL def kill_task_attempt(request, attemptid):
def trackers(request):
def clusterstatus(request):
def queues(request):
@check_job_permission DCNL def set_job_priority(request, job):
def make_substitutions(conf):
def format_counter_name(s):
def get_state_link(request, option=None, val='', VALID_OPTIONS=('state', 'user', 'text', 'taskstate')):
def get_tasktrackers(request):
def get_single_job(request, jobid):
def get_job_count_by_state(request, username):
def jobbrowser(request):
def _unquote_path(path):
def get_help_fs(app_name):
def view(request, app, path):
@error_handler DCNL def fetch_results(request, id, first_row=0):
@ensure_configuration DCNL def execute_query(request, design_id=None, query_history_id=None):
@ensure_configuration DCNL def save_design(request, save_form, query_form, type_, design, explicit_save=False):
def copy_template(app_template, copy_to, app_name, app_url):
def start_server(options):
def copy_template(app_template, copy_to, app_name):
def _deprecation_check(arg0):
def _profile(prof_id, func):
def get_supervisees():
def setup_user_info():
def drop_privileges():
def _init_log(log_dir):
def monkey_patch_username_validator():
def get_dn(fqdn=None):
def is_lb_enabled():
def is_https_enabled():
def get_auth_username():
def get_auth_password():
def default_secure_cookie():
def default_ssl_cacerts():
def default_ssl_validate():
def default_from_email():
def default_database_options():
def get_deprecated_login_lock_out_by_combination_browser_user_agent():
def default_feedback_url():
def is_hue4():
def config_validator(user):
def get_redaction_policy():
def app_name(request):
def _import_module_or_none(module):
def load_apps(app_blacklist):
def get_desktop_module(name):
def setup_test_environment():
def teardown_test_environment():
def test_status_bar():
def test_paginator():
def test_cx_Oracle():
def detect_conf_var():
def logged_in_client(user='test', passwd='test', client=None):
def logout(client):
def dump_traceback(file=sys.stderr, all_threads=True):
def simple_formset_factory(form, add_label='+', formset=BaseSimpleFormSet, initial=None):
def dataset(headers, data, encoding=None):
def make_response(generator, format, name, encoding=None):
def recursive_walk(function, data):
def find_variables(data, include_named=True):
def substitute_variables(input_data, substitutions):
def find_parameters(obj, fields=None):
def bind_parameters(obj, substitutions, fields=None):
def get_components(principal):
def my_dynamic_default():
def get_site_encoding():
def validate_encoding(encoding):
def smart_unicode(s, strings_only=False, errors='strict'):
def force_unicode(s, strings_only=False, errors='strict'):
def smart_str(s, strings_only=False, errors='strict'):
def make_utf8_env():
def _configs_from_dir(conf_dir):
def load_confs(conf_source=None):
def _bind_module_members(module, data, section):
def bind_module_config(mod, conf_data, config_key):
def initialize(modules, config_dir):
def validate_path(confvar, is_dir=None, fs=os.path, message='Path DCSP does DCSP not DCSP exist DCSP on DCSP the DCSP filesystem.'):
def validate_port(confvar):
def validate_thrift_transport(confvar):
def login_notrequired(func):
def get_desktop_uri_prefix():
def copy_query_dict(query_dict, attr_list):
def make_absolute(request, view_name, kwargs=None):
def render_to_string(template, *args, **kwargs):
def format_preserving_redirect(request, target, get_dict=None):
def is_jframe_request(request):
def render(template, request, data, json=None, template_lib=None, force_template=False, status=200, **kwargs):
def render_injected(http_resp, extra_html):
def encode_json(data, indent=None):
def encode_json_for_js(data, indent=None):
def render_json(data, jsonp_callback=None, js_safe=False, status=200):
def update_if_dirty(model_instance, **kwargs):
def extract_field_data(field):
def reverse_with_get(view, args=None, kwargs=None, get=None):
def timesince(d=None, now=None, abbreviate=False, separator=','):
def get_current_app(frame=None):
def _change_uid_gid(uid, gid=None):
def get_uid_gid(username, groupname=None):
def assert_ok_response(response):
def make_logged_in_client(username='test', password='test', is_superuser=True, recreate=False, groupname=None):
def compact_whitespace(s):
def assert_equal_mod_whitespace(first, second, msg=None):
def assert_similar_pages(first, second, ratio=0.9, msg=None):
def create_tables(model):
def __get_root(*append):
def get_build_dir(*append):
def get_desktop_root(*append):
def get_apps_root(*append):
def get_thirdparty_root(*append):
def get_run_root(*append):
def get_config_root(*append):
def test_popup_injection():
def get_filesystem(name='default'):
def clear_cache():
def restore_cache(old_cache):
def render_to_string_test(template_name, django_context):
def render_to_response(template_name, data_dictionary, **kwargs):
def url(view_name, *args, **view_args):
def csrf_token(request):
def static(path):
def remove_content_type(app_label, model_name):
def _get_pool_key(conf):
def construct_superclient(conf):
def connect_to_thrift(conf):
def simpler_string(thrift_obj):
def from_bytes(klass, data):
def to_bytes(obj):
def thrift2json(tft):
def _jsonable2thrift_helper(jsonable, type_enum, spec_args, default, recursion_depth=0):
def jsonable2thrift(jsonable, thrift_class):
def enum_as_sequence(enum):
def fixup_enums(obj, name_class_map, suffix='AsString'):
def find_unused_port():
def _instrumented_test_render(self, *args, **data):
def format_time_diff(start=None, end=None):
def format_duration_in_millis(duration=0):
def plat_specific_errors(*errnames):
def format_exc(limit=None):
def _get_default_configurations():
def _update_default_and_group_configurations(configurations):
def hue_permission_required(action, app):
def parse_redaction_policy_from_file(filename):
def parse_one_rule_from_dict(rule):
def _convert_java_pattern_to_python(pattern):
def redact(string):
def register_log_filtering(policy):
def add_log_redaction_filter_to_logger(engine, logger):
def _read_log_conf(proc_name, log_dir):
def _find_console_stream_handler(logger):
def chown_log_dir(uid, gid):
def basic_logging(proc_name, log_dir=None):
def fancy_logging():
def access_log_level(lvl):
def log_page_hit(request, view_func, level=None):
def access_log(request, msg=None, level=None):
def access_warn(request, msg=None):
def massaged_tags_for_json(docs, user):
def massage_permissions(document):
def massaged_documents_for_json(documents, user):
@access_log_level(logging.WARN) DCNL def log_view(request):
@access_log_level(logging.WARN) DCNL def download_log_view(request):
def bootstrap(request):
@access_log_level(logging.DEBUG) DCNL def status_bar(request):
@access_log_level(logging.WARN) DCNL def threads(request):
@access_log_level(logging.WARN) DCNL def memory(request):
def csrf_failure(request, reason=None):
def serve_403_error(request, *args, **kwargs):
def serve_404_error(request, *args, **kwargs):
def serve_500_error(request, *args, **kwargs):
@login_notrequired DCNL def log_frontend_event(request):
def commonheader(title, section, user, request=None, padding='90px', skip_topbar=False, skip_idle_timeout=False, is_mobile=False):
def commonfooter(request, messages=None, is_mobile=False):
def _get_config_errors(request, cache=True):
def check_config(request):
def check_config_ajax(request):
def dump_threads_on_sigquit(signum, frame):
def load_augmentation_class():
def rewrite_user(user):
def get_current_users():
def dt_logout(request, next_page=None):
def profile(request):
@api_error_handler DCNL def search_documents(request):
@api_error_handler DCNL def get_document(request):
@api_error_handler DCNL @require_POST DCNL def delete_document(request):
@api_error_handler DCNL @require_POST DCNL def restore_document(request):
@api_error_handler DCNL @require_POST DCNL def share_document(request):
def _is_import_valid(documents):
def _get_dependencies(documents, deps_mode=True):
def _filter_documents(request, queryset, flatten=True):
def _paginate(request, queryset):
def preprocess_file(filename, cpp_path='cpp', cpp_args=''):
def parse_file(filename, use_cpp=False, cpp_path='cpp', cpp_args='', parser=None):
def t_COMMENT(t):
def t_CPPCOMMENT(t):
def t_CPP_WS(t):
def CPP_INTEGER(t):
def t_CPP_STRING(t):
def t_CPP_CHAR(t):
def t_CPP_COMMENT(t):
def fix_switch_cases(switch_node):
def _extract_nested_case(case_node, stmts_list):
def expand_decl(decl):
def expand_init(init):
def explain_c_declaration(c_decl):
def _explain_decl_node(decl_node):
def _explain_type(decl):
def translate_to_c(filename):
def _cast_number(value):
def _marker_symbol(tagname, value, namespace=None):
def SeriesFactory(values, xvalues=None, zvalues=None, title=None, title_from_data=False):
@pytest.fixture DCNL def Workbook():
@pytest.fixture DCNL def Worksheet():
@pytest.fixture DCNL def root_xml():
def builtin_format_code(index):
def builtin_format_id(fmt):
def _convert(expected_type, value):
def ColorScaleRule(start_type=None, start_value=None, start_color=None, mid_type=None, mid_value=None, mid_color=None, end_type=None, end_value=None, end_color=None):
def FormulaRule(formula=None, stopIfTrue=None, font=None, border=None, fill=None):
def CellIsRule(operator=None, formula=None, stopIfTrue=None, font=None, border=None, fill=None):
def IconSetRule(icon_style=None, type=None, values=None, showValue=None, percent=None, reverse=None):
def bounding_box(bw, bh, w, h):
def _make_key(args, kwds, typed, kwd_mark=(object(),), fasttypes=set((int, str, frozenset, type(None))), sorted=sorted, tuple=tuple, type=type, len=len):
def lru_cache(maxsize=100, typed=False):
def safe_string(value):
def safe_iterator(node, tag=None):
def ConditionalElement(node, tag, condition, attr=None):
def save_workbook(workbook, filename, as_template=False):
def save_virtual_workbook(workbook, as_template=False):
def get_rows_to_write(worksheet):
def write_rows(xf, worksheet):
def write_content_types(workbook, as_template=False):
def write_properties_app(workbook):
def write_root_rels(workbook):
def write_workbook(workbook):
def _write_defined_names(workbook, names):
def write_workbook_rels(workbook):
def write_rows(xf, worksheet):
def write_rels(worksheet, comments_id=None, vba_controls_id=None):
def write_string_table(string_table):
def write_cols(worksheet):
def write_mergecells(worksheet):
def write_conditional_formatting(worksheet):
def write_datavalidation(worksheet):
def write_hyperlinks(worksheet):
def write_drawing(worksheet):
def write_worksheet(worksheet, shared_strings):
def write_theme():
def write_properties(props):
def write_external_link(links):
def write_external_book_rel(book):
def split_named_range(range_string):
def read_named_ranges(xml_source, workbook):
def _split_string(text):
def hash_password(plaintext_password=''):
def collapse_cell_addresses(cells, input_ranges=()):
def expand_cell_ranges(range_string):
def flatten(results):
def coordinate_from_string(coord_string):
def absolute_coordinate(coord_string):
def _get_column_letter(col_idx):
def get_column_letter(idx):
def column_index_from_string(str_col):
def range_boundaries(range_string):
def rows_from_range(range_string):
def cols_from_range(range_string):
def coordinate_to_tuple(coordinate):
def range_to_tuple(range_string):
def datetime_to_W3CDTF(dt):
def W3CDTF_to_datetime(formatted_string):
@lru_cache() DCNL def time_to_days(value):
@lru_cache() DCNL def timedelta_to_days(value):
def inch_to_dxa(value):
def pixels_to_EMU(value):
def cm_to_EMU(value):
def inch_to_EMU(value):
def pixels_to_points(value, dpi=96):
def degrees_to_angle(value):
def short_color(color):
def read_comments(ws, xml_source):
def get_comments_file(worksheet_path, archive, valid_files):
def repair_central_directory(zipFile, is_file_instance):
def _validate_archive(filename):
def load_workbook(filename, read_only=False, use_iterators=False, keep_vba=KEEP_VBA, guess_types=False, data_only=False):
def read_content_types(archive):
def read_rels(archive):
def read_sheets(archive):
def detect_worksheets(archive):
def read_string_table(xml_source):
def get_string(string_index_node):
def get_text(rich_node):
def _get_xml_iter(xml_source):
def bool_attrib(element, attr):
def download_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir, delay=15):
def _patch_file(path, content):
def _extractall(self, path='.', members=None):
def main(argv, version=DEFAULT_VERSION):
def serve(environ, start_response):
def getfield(f):
def guess_type(path):
def compile(node, uri, filename=None, default_filters=None, buffer_filters=None, imports=None, future_imports=None, source_encoding=None, generate_magic_comment=True, disable_unicode=False, strict_undefined=False, enable_loop=True, reserved_names=frozenset()):
def mangle_mako_loop(node, printer):
def function_named(fn, name):
def verify_directory(dir):
def parse_encoding(fp):
def sorted_dict_repr(d):
def restore__ast(_ast):
def text_error_template(lookup=None):
def html_error_template():
def supports_caller(func):
def capture(context, callable_, *args, **kwargs):
def _include_file(context, uri, calling_uri, **kwargs):
def _inherit_from(context, uri, calling_uri):
def _render(template, callable_, args, data, as_unicode=False):
def _exec_template(callable_, context, args=None, kwargs=None):
def convert_comments(text):
def extract(fileobj, keywords, comment_tags, options):
def extract_nodes(nodes, keywords, comment_tags, options):
def _split_comment(lineno, comment):
def legacy_html_escape(s):
def htmlentityreplace_errors(ex):
def adjust_whitespace(text):
def parse(expr, filename='<unknown>', mode='exec'):
def to_source(node, indent_with=(' DCSP ' * 4)):
def dump(node):
def copy_location(new_node, old_node):
def fix_missing_locations(node):
def increment_lineno(node, n=1):
def iter_fields(node):
def get_fields(node):
def iter_child_nodes(node):
def get_child_nodes(node):
def get_compile_mode(node):
def get_docstring(node):
def walk(node):
def with_metaclass(meta, base=object):
def parse(code, mode='exec', **exception_kwargs):
def eq_(a, b, msg=None):
def skip_if(predicate, reason=None):
def escape_dn_chars(dn):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def python_2_unicode_compatible(klass):
@py.test.mark.parametrize('item_name', [item.name for item in six._moved_attributes]) DCNL def test_move_items(item_name):
@py.test.mark.parametrize('item_name', [item.name for item in six._urllib_parse_moved_attributes]) DCNL def test_move_items_urllib_parse(item_name):
@py.test.mark.parametrize('item_name', [item.name for item in six._urllib_error_moved_attributes]) DCNL def test_move_items_urllib_error(item_name):
@py.test.mark.parametrize('item_name', [item.name for item in six._urllib_request_moved_attributes]) DCNL def test_move_items_urllib_request(item_name):
@py.test.mark.parametrize('item_name', [item.name for item in six._urllib_response_moved_attributes]) DCNL def test_move_items_urllib_response(item_name):
@py.test.mark.parametrize('item_name', [item.name for item in six._urllib_robotparser_moved_attributes]) DCNL def test_move_items_urllib_robotparser(item_name):
def get_global(key):
def default_locale(category=None, aliases=LOCALE_ALIASES):
def negotiate_locale(preferred, available, sep='_', aliases=LOCALE_ALIASES):
def parse_locale(identifier, sep='_'):
def get_currency_name(currency, locale=LC_NUMERIC):
def get_currency_symbol(currency, locale=LC_NUMERIC):
def get_decimal_symbol(locale=LC_NUMERIC):
def get_plus_sign_symbol(locale=LC_NUMERIC):
def get_minus_sign_symbol(locale=LC_NUMERIC):
def get_exponential_symbol(locale=LC_NUMERIC):
def get_group_symbol(locale=LC_NUMERIC):
def format_number(number, locale=LC_NUMERIC):
def format_decimal(number, format=None, locale=LC_NUMERIC):
def distinct(iterable):
def parse_encoding(fp):
def pathmatch(pattern, filename):
def wraptext(text, width=70, initial_indent='', subsequent_indent=''):
def get_period_names(locale=LC_TIME):
def get_day_names(width='wide', context='format', locale=LC_TIME):
def get_month_names(width='wide', context='format', locale=LC_TIME):
def get_quarter_names(width='wide', context='format', locale=LC_TIME):
def get_era_names(width='wide', locale=LC_TIME):
def get_date_format(format='medium', locale=LC_TIME):
def get_datetime_format(format='medium', locale=LC_TIME):
def get_time_format(format='medium', locale=LC_TIME):
def get_timezone_gmt(datetime=None, width='long', locale=LC_TIME):
def get_timezone_location(dt_or_tzinfo=None, locale=LC_TIME):
def get_timezone_name(dt_or_tzinfo=None, width='long', uncommon=False, locale=LC_TIME):
def format_date(date=None, format='medium', locale=LC_TIME):
def format_datetime(datetime=None, format='medium', tzinfo=None, locale=LC_TIME):
def format_time(time=None, format='medium', tzinfo=None, locale=LC_TIME):
def parse_date(string, locale=LC_TIME):
def parse_datetime(string, locale=LC_TIME):
def parse_time(string, locale=LC_TIME):
def parse_pattern(pattern):
def exists(name):
def list():
def load(name, merge_inherited=True):
def merge(dict1, dict2):
def check_message_extractors(dist, name, value):
def parse_mapping(fileobj, filename=None):
def parse_keywords(strings=[]):
def _strip_comment_tags(comments, tags):
def extract_from_dir(dirname=os.getcwd(), method_map=DEFAULT_MAPPING, options_map=None, keywords=DEFAULT_KEYWORDS, comment_tags=(), callback=None, strip_comment_tags=False):
def extract_from_file(method, filename, keywords=DEFAULT_KEYWORDS, comment_tags=(), options=None, strip_comment_tags=False):
def extract(method, fileobj, keywords=DEFAULT_KEYWORDS, comment_tags=(), options=None, strip_comment_tags=False):
def extract_nothing(fileobj, keywords, comment_tags, options):
def extract_python(fileobj, keywords, comment_tags, options):
def extract_javascript(fileobj, keywords, comment_tags, options):
def write_mo(fileobj, catalog, use_fuzzy=False):
def indicates_division(token):
def unquote_string(string):
def tokenize(source):
def get_plural(locale=LC_CTYPE):
def unescape(string):
def denormalize(string):
def read_po(fileobj, locale=None, domain=None, ignore_obsolete=False):
def escape(string):
def normalize(string, prefix='', width=76):
def write_po(fileobj, catalog, width=76, no_location=False, omit_header=False, sort_output=False, sort_by_file=False, ignore_obsolete=False, include_previous=False):
def num_plurals(catalog, message):
def python_format(catalog, message):
def _validate_format(format, alternative):
def test_newp_copying():
def compile(tmpdir, ext, compiler_verbose=0):
def set_tmpdir(dirname):
def cleanup_tmpdir(tmpdir=None, keep_so=False):
def CopyToClipboard(string):
def store(x):
def discard(p):
def importETree():
def dequote(string):
def handleAttributes(text, parent):
def isString(s):
def message(level, text):
def isBlockLevel(tag):
def load_extension(ext_name, configs=[]):
def load_extensions(ext_names):
def markdown(text, extensions=[], safe_mode=False, output_format=DEFAULT_OUTPUT_FORMAT):
def markdownFromFile(input=None, output=None, extensions=[], encoding=None, safe_mode=False, output_format=DEFAULT_OUTPUT_FORMAT):
def parse_options():
def run():
def build_url(label, base, end):
def makeExtension(configs=[]):
def _VmB(VmKey):
def memory(since=0.0):
def resident(since=0.0):
def stacksize(since=0.0):
def suite():
def _iterdump(connection):
def get_amalgamation():
def count_calls(fn):
def meter_calls(fn):
def hist_calls(fn):
def time_calls(fn):
def regions():
def get_cur_file_size(fp, position_to_eof=False):
def check_lowercase_bucketname(n):
def bucket_lister(bucket, prefix='', delimiter='', marker='', headers=None, encoding_type=None):
def versioned_bucket_lister(bucket, prefix='', delimiter='', key_marker='', version_id_marker='', headers=None, encoding_type=None):
def multipart_upload_lister(bucket, key_marker='', upload_id_marker='', headers=None, encoding_type=None):
def part_lister(mpupload, part_number_marker=None):
def regions():
def versioned_bucket_lister(bucket, prefix='', delimiter='', marker='', generation_marker='', headers=None):
def regions():
def regions():
def regions():
def regions():
def regions():
def canonical_string(method, path, headers, expires=None, provider=None):
def retry_url(url, retry_on_404=True, num_retries=10, timeout=None):
def _build_instance_metadata_url(url, version, path):
def get_instance_metadata(version='latest', url='http://169.254.169.254', data='meta-data/', timeout=None, num_retries=5):
def get_instance_identity(version='latest', url='http://169.254.169.254', timeout=None, num_retries=5):
@contextmanager DCNL def setlocale(name):
def update_dme(username, password, dme_id, ip_address):
def fetch_file(uri, file=None, username=None, password=None):
def pythonize_name(name):
def write_mime_multipart(content, compress=False, deftype='text/plain', delimiter=':'):
def guess_mime_type(content, deftype):
def compute_md5(fp, buf_size=8192, size=None):
def find_matching_headers(name, headers):
def merge_headers_by_name(name, headers):
def host_is_ipv6(hostname):
def parse_host(hostname):
def regions():
def regions(**kw_params):
def set_default_credentials(aws_access_key_id, aws_secret_access_key):
def regions():
def connect_to_region(region_name, **kw_params):
def connect_sqs(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_s3(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_gs(gs_access_key_id=None, gs_secret_access_key=None, **kwargs):
def connect_ec2(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_elb(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_autoscale(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_cloudwatch(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_sdb(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_fps(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_mturk(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_cloudfront(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_vpc(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_rds(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_rds2(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_emr(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_sns(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_iam(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_route53(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_cloudformation(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_euca(host=None, aws_access_key_id=None, aws_secret_access_key=None, port=8773, path='/services/Eucalyptus', is_secure=False, **kwargs):
def connect_glacier(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_ec2_endpoint(url, aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_walrus(host=None, aws_access_key_id=None, aws_secret_access_key=None, port=8773, path='/services/Walrus', is_secure=False, **kwargs):
def connect_ses(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_sts(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_ia(ia_access_key_id=None, ia_secret_access_key=None, is_secure=False, **kwargs):
def connect_dynamodb(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_swf(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_cloudsearch(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_cloudsearch2(aws_access_key_id=None, aws_secret_access_key=None, sign_request=False, **kwargs):
def connect_cloudsearchdomain(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_beanstalk(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_elastictranscoder(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_redshift(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_support(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_cloudtrail(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_directconnect(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_kinesis(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_logs(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_route53domains(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_cognito_identity(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_cognito_sync(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_kms(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_awslambda(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_codedeploy(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_configservice(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_cloudhsm(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_ec2containerservice(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def connect_machinelearning(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):
def storage_uri(uri_str, default_scheme='file', debug=0, validate=True, bucket_storage_uri_class=BucketStorageUri, suppress_consec_slashes=True, is_latest=False):
def storage_uri_for_key(key):
def fib(cv=1, lv=0):
def get_manager(cls):
def regions():
def connect_to_region(region_name, **kw_params):
def GetValidHostsForCert(cert):
def ValidateCertificateHostname(cert, hostname):
def regions():
def regions():
def connect_to_region(region_name, **kw_params):
def regions(**kw_params):
def connect_to_region(region_name, **kw_params):
def get_region(region_name, **kw_params):
def regions():
def connect_to_region(region_name, **kw_params):
def regions():
def connect_to_region(region_name, **kw_params):
def regions():
def regions():
def regions():
def connect_to_region(region_name, **kw_params):
def get_auth_handler(host, config, provider, requested_capability=None):
def regions():
def connect_to_region(region_name, **kw_params):
def regions():
def regions():
def regions():
def connect_to_region(region_name, **kw_params):
def regions():
def regions():
def regions():
def regions():
def regions():
def connect_to_region(region_name, **kw_params):
def regions():
def connect_to_region(region_name, **kw_params):
def load_endpoint_json(path):
def _load_json_file(path):
def merge_endpoints(defaults, additions):
def load_regions():
def _load_builtin_endpoints(_cache=_endpoints_cache):
def get_regions(service_name, region_cls=None, connection_cls=None):
def connect(service_name, region_name, region_cls=None, connection_cls=None, **kw_params):
def _get_region(service_name, region_name, region_cls=None, connection_cls=None):
def _get_region_with_heuristics(service_name, region_name, region_cls=None, connection_cls=None):
def regions():
def connect_to_region(region_name, **kw_params):
def start(server):
def sshclient_from_instance(instance, ssh_key_file, host_key_file='~/.ssh/known_hosts', user_name='root', ssh_pwd=None):
def regions():
def minimum_part_size(size_in_bytes, default_part_size=DEFAULT_PART_SIZE):
def tree_hash(fo):
def compute_hashes_from_fileobj(fileobj, chunk_size=(1024 * 1024)):
def tree_hash_from_str(str_as_bytes):
def regions():
def resume_file_upload(vault, upload_id, part_size, fobj, part_hash_map, chunk_size=_ONE_MEGABYTE):
def regions():
def regions():
def regions():
def regions():
def regions():
def regions(**kw_params):
def connect_to_region(region_name, **kw_params):
def regions():
def regions():
def regions():
def regions():
def regions():
def regions():
def connect_to_region(region_name, **kw_params):
def regions():
def serialize_num(val):
def get_dynamodb_type(val, use_boolean=True):
def dynamize_value(val):
def item_object_hook(dct):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def python_2_unicode_compatible(klass):
def spawn(function, *args, **kwargs):
def test_close_connections():
def test_reuse_connections():
def retry(ExceptionToCheck, tries=4, delay=3, backoff=2, logger=None):
def fake_loads_value_error(content, *args, **kwargs):
def fake_loads_json_error(content, *args, **kwargs):
def _yield_all_region_tests(region, expected_signature_version='hmac-v4-s3', dns_suffix='.amazonaws.com'):
def fake_loads_value_error(content, *args, **kwargs):
def fake_loads_json_error(content, *args, **kwargs):
def cleanup():
def monitor():
def verify(condition, reason='test DCSP failed'):
def vereq(a, b):
def sortdict(dict):
def run_suite(suite, testclass=None):
def run_unittest(testclass, debug=0):
def debug_unittest(testclass):
def run_doctest(module, verbosity=None):
def maximals(A, le=(lambda x, y: (x <= y))):
def minimals(A, le=(lambda x, y: (x <= y))):
def ispackage(m):
def Root():
def co_code_findloadednames(co):
def co_findloadednames(co):
def hpy(ht=None):
def randlist(n, amp):
def mutnodeset_union(iterable):
def immnodeset_union(iterable, *args):
def laxnodeset(v):
def HTTPResponse__getheaders(self):
def parse_uri(uri):
def safename(filename):
def _parse_www_authenticate(headers, headername='www-authenticate'):
def _entry_disposition(response_headers, request_headers):
def proxy_info_from_environment(method='http'):
def proxy_info_from_url(url, method='http'):
def iri2uri(uri):
def setdefaultproxy(proxytype=None, addr=None, port=None, rdns=True, username=None, password=None):
def wrapmodule(module):
def iri2uri(uri):
def fullsplit(path, result=None):
def get_jobs(when=None, only_scheduled=False):
def copy_template(template_name, copy_to):
def copy_template(app_template, copy_to, project_name, app_name):
def generate_models_and_admin(dia_path, app_dir, project_name, app_name):
def copy_template(template_name, copy_to, command_name, base_command):
def describe_form(label, fields=None):
def format_block(block, nlspaces=0):
def copy_template(template_name, copy_to, tag_library_name):
def orm_item_locator(orm_obj):
def get_models(app_labels):
def flatten_blocks(lines, num_indents=(-1)):
def get_attribute_value(item, field, context, force=False, skip_autofield=True):
def check_dependencies(model, model_queue, avaliable_models):
def set_werkzeug_log_color():
def extract_views_from_urlpatterns(urlpatterns, base='', namespace=None):
def import_items(import_directives, style, quiet_load=False):
def get_project_root():
def _make_writeable(filename):
def setup_logger(logger, stream, filename=None, fmt=None):
def signalcommand(func):
def widont(value, count=1):
def widont_html(value):
def truncateletters(value, arg):
def indentby(parser, token):
@register.tag DCNL def highlight(parser, token):
def run_if_active(func):
@contextmanager DCNL def keys(purpose, mode=None):
@contextmanager DCNL def secret_model():
def before_new_template(force_new_urls):
def truncate_letters(s, num):
def index(fks, id):
def addparentstofks(rels, fks):
def clear_finalizers(clear_all=False):
def sleep(sleep_time=0.25):
def escape_new_line(original):
def unescape_new_line(escaped):
def is_python_proxy(parameter):
def get_command_part(parameter, python_proxy_pool=None):
def get_return_value(answer, gateway_client, target_id=None, name=None):
def register_output_converter(output_type, converter):
def register_input_converter(converter, prepend=False):
def java_import(jvm_view, import_str):
def find_jar_path():
def launch_gateway(port=0, jarpath=u'', classpath=u'', javaopts=[], die_on_exit=False, redirect_stdout=None, redirect_stderr=None, daemonize_redirect=False):
def get_field(java_object, field_name):
def set_field(java_object, field_name, value):
def get_method(java_object, method_name):
def is_instance_of(gateway, java_object, java_class):
def quiet_close(closable):
def quiet_shutdown(socket_instance):
def gateway_help(gateway_client, var, pattern=None, short_name=True, display=True):
def _garbage_collect_connection(socket_instance):
def tidy_document(text, options=None, keep_doc=False):
def tidy_fragment(text, options=None, keep_doc=False):
def release_tidy_doc():
def create_sink():
def destroy_sink(sink):
def PrintSchemaTree(schema, se_class, se_tree, se_oid, level):
def HTMLSchemaTree(schema, se_class, se_tree, se_oid, level):
def DelTree(l, dn, scope=ldap.SCOPE_ONELEVEL):
def sort(l):
def quote(s):
def mkdirs(path):
def escape_dn_chars(s):
def str2dn(dn, flags=0):
def dn2str(dn):
def explode_dn(dn, notypes=0, flags=0):
def explode_rdn(rdn, notypes=0, flags=0):
def list_dict(l):
def addModlist(entry, ignore_attr_types=None):
def modifyModlist(old_entry, new_entry, ignore_attr_types=None, ignore_oldexistent=0):
def strlist_minus(a, b):
def strlist_intersection(a, b):
def strlist_union(a, b):
def EncodeControlTuples(ldapControls):
def DecodeControlTuples(ldapControlTuples):
def split_tokens(s, keywordDict):
def extract_tokens(l, known_tokens):
def urlfetch(uri, trace_level=0):
def _ldap_function_call(lock, func, *args, **kwargs):
def initialize(uri, trace_level=0, trace_file=sys.stdout, trace_stack_limit=None):
def open(host, port=389, trace_level=0, trace_file=sys.stdout, trace_stack_limit=None):
def get_option(option):
def set_option(option, invalue):
def escape_filter_chars(assertion_value, escape_mode=0):
def filter_format(filter_template, assertion_values):
def is_dn(s):
def list_dict(l):
def CreateLDIF(dn, record, base64_attrs=None, cols=76):
def ParseLDIF(f, ignore_attrs=None, maxentries=0):
def list_dict(l):
def isLDAPUrl(s):
def ldapUrlEscape(s):
def t_COMMENT(t):
def t_CPPCOMMENT(t):
def t_CPP_WS(t):
def CPP_INTEGER(t):
def t_CPP_STRING(t):
def t_CPP_CHAR(t):
def t_CPP_COMMENT1(t):
def t_CPP_COMMENT2(t):
def t_comment(t):
def t_comment_body_part(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def t_NUMBER(t):
def t_comment(t):
def t_comment_body_part(t):
def t_NUMBER(t):
def t_NUMBER(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def t_NUMBER(t):
def t_newline(t):
def t_NUMBER(t, s):
def p_statements(t):
def p_statements_1(t):
def p_statement_assign(p):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_number(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def t_NUMBER(t):
def t_newline(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def t_instdef_spam_BITS(t):
def NUMBER(t):
def t_newline(t):
def t_NUMBER(t):
def t_newline(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def t_NUMBER(t):
def t_newline(t):
def t_NUMBER(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_statement_assign(t):
def p_statement_assign_error(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_group_error(t):
def p_expression_number(t):
def p_expression_name(t):
def t_comment(t):
def t_comment_body_part(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_integer(t):
def t_comment(t):
def t_comment_body_part(t):
def t_NUMBER(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def t_NUMBER(t):
def t_newline(t):
def p_statement_assign(t):
def p_statement_assign_2(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_start(t):
def p_nest(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_expr_list(t):
def p_expr_list_2(t):
def t_NUMBER(t):
def t_newline(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def t_comment(t):
def t_comment_body_part(t):
def t_NUMBER(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def t_comment(t):
def t_comment_body_part(t):
def p_statement_assign(t):
def statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def t_NUMBER(t):
def t_newline(t):
def t_comment(t):
def t_comment_body_part(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def t_NUMBER(t):
def t_newline(t):
def p_statement(t):
def p_statement(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_statement_assign(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_statement_assign(t, s):
def p_statement_expr():
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def t_ignore(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_statements(t):
def p_statements_1(t):
def p_statement_assign(p):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_number(t):
def t_H_EDIT_DESCRIPTOR(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def t_NUMBER(t):
def t_newline(t):
def t_comment(t):
def t_comment_body_part(t):
def t_NUMBER():
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def t_NUMBER(t):
def t_newline(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_statement_expr2(t):
def p_badrule(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def t_NUMBER(t):
def t_newline(t):
def t_NUMBER(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_error_handler(t):
def t_NUMBER(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def p_defsection(p):
def p_rulesection(p):
def p_definition_literal(p):
def p_definition_start(p):
def p_definition_token(p):
def p_toktype(p):
def p_idlist(p):
def p_tokenid(p):
def p_rules(p):
def p_rule(p):
def p_rule2(p):
def p_rule_empty(p):
def p_rule_empty2(p):
def p_morerules(p):
def p_rulelist(p):
def p_ruleitem(p):
def t_SECTION(t):
def t_ccomment(t):
def t_LITERAL(t):
def t_NEWLINE(t):
def t_code(t):
def t_code_lbrace(t):
def t_code_rbrace(t):
def t_NUMBER(t):
def t_newline(t):
def p_statement_assign(p):
def p_statement_expr(p):
def p_expression_binop(p):
def p_expression_uminus(p):
def p_expression_group(p):
def p_expression_number(p):
def p_expression_name(p):
def t_NUMBER(t):
def t_newline(t):
def p_statement_assign(p):
def p_statement_expr(p):
def p_expression_binop(p):
def p_expression_uminus(p):
def p_expression_group(p):
def p_expression_number(p):
def p_expression_name(p):
def t_NUMBER(t):
def t_newline(t):
def p_statement_assign(p):
def p_statement_expr(p):
def p_expression_binop(p):
def p_expression_uminus(p):
def p_expression_group(p):
def p_expression_number(p):
def p_expression_name(p):
def t_NUMBER(t):
def t_newline(t):
def p_statement_assign(p):
def p_statement_expr(p):
def p_expression_binop(p):
def p_expression_uminus(p):
def p_expression_group(p):
def p_expression_number(p):
def p_expression_name(p):
def p_translation_unit_1(t):
def p_translation_unit_2(t):
def p_external_declaration_1(t):
def p_external_declaration_2(t):
def p_function_definition_1(t):
def p_function_definition_2(t):
def p_function_definition_3(t):
def p_function_definition_4(t):
def p_declaration_1(t):
def p_declaration_2(t):
def p_declaration_list_1(t):
def p_declaration_list_2(t):
def p_declaration_specifiers_1(t):
def p_declaration_specifiers_2(t):
def p_declaration_specifiers_3(t):
def p_declaration_specifiers_4(t):
def p_declaration_specifiers_5(t):
def p_declaration_specifiers_6(t):
def p_storage_class_specifier(t):
def p_type_specifier(t):
def p_type_qualifier(t):
def p_struct_or_union_specifier_1(t):
def p_struct_or_union_specifier_2(t):
def p_struct_or_union_specifier_3(t):
def p_struct_or_union(t):
def p_struct_declaration_list_1(t):
def p_struct_declaration_list_2(t):
def p_init_declarator_list_1(t):
def p_init_declarator_list_2(t):
def p_init_declarator_1(t):
def p_init_declarator_2(t):
def p_struct_declaration(t):
def p_specifier_qualifier_list_1(t):
def p_specifier_qualifier_list_2(t):
def p_specifier_qualifier_list_3(t):
def p_specifier_qualifier_list_4(t):
def p_struct_declarator_list_1(t):
def p_struct_declarator_list_2(t):
def p_struct_declarator_1(t):
def p_struct_declarator_2(t):
def p_struct_declarator_3(t):
def p_enum_specifier_1(t):
def p_enum_specifier_2(t):
def p_enum_specifier_3(t):
def p_enumerator_list_1(t):
def p_enumerator_list_2(t):
def p_enumerator_1(t):
def p_enumerator_2(t):
def p_declarator_1(t):
def p_declarator_2(t):
def p_direct_declarator_1(t):
def p_direct_declarator_2(t):
def p_direct_declarator_3(t):
def p_direct_declarator_4(t):
def p_direct_declarator_5(t):
def p_direct_declarator_6(t):
def p_pointer_1(t):
def p_pointer_2(t):
def p_pointer_3(t):
def p_pointer_4(t):
def p_type_qualifier_list_1(t):
def p_type_qualifier_list_2(t):
def p_parameter_type_list_1(t):
def p_parameter_type_list_2(t):
def p_parameter_list_1(t):
def p_parameter_list_2(t):
def p_parameter_declaration_1(t):
def p_parameter_declaration_2(t):
def p_identifier_list_1(t):
def p_identifier_list_2(t):
def p_initializer_1(t):
def p_initializer_2(t):
def p_initializer_list_1(t):
def p_initializer_list_2(t):
def p_type_name(t):
def p_abstract_declarator_opt_1(t):
def p_abstract_declarator_opt_2(t):
def p_abstract_declarator_1(t):
def p_abstract_declarator_2(t):
def p_abstract_declarator_3(t):
def p_direct_abstract_declarator_1(t):
def p_direct_abstract_declarator_2(t):
def p_direct_abstract_declarator_3(t):
def p_direct_abstract_declarator_4(t):
def p_direct_abstract_declarator_5(t):
def p_constant_expression_opt_1(t):
def p_constant_expression_opt_2(t):
def p_parameter_type_list_opt_1(t):
def p_parameter_type_list_opt_2(t):
def p_statement(t):
def p_labeled_statement_1(t):
def p_labeled_statement_2(t):
def p_labeled_statement_3(t):
def p_expression_statement(t):
def p_compound_statement_1(t):
def p_compound_statement_2(t):
def p_compound_statement_3(t):
def p_compound_statement_4(t):
def p_statement_list_1(t):
def p_statement_list_2(t):
def p_selection_statement_1(t):
def p_selection_statement_2(t):
def p_selection_statement_3(t):
def p_iteration_statement_1(t):
def p_iteration_statement_2(t):
def p_iteration_statement_3(t):
def p_jump_statement_1(t):
def p_jump_statement_2(t):
def p_jump_statement_3(t):
def p_jump_statement_4(t):
def p_expression_opt_1(t):
def p_expression_opt_2(t):
def p_expression_1(t):
def p_expression_2(t):
def p_assignment_expression_1(t):
def p_assignment_expression_2(t):
def p_assignment_operator(t):
def p_conditional_expression_1(t):
def p_conditional_expression_2(t):
def p_constant_expression(t):
def p_logical_or_expression_1(t):
def p_logical_or_expression_2(t):
def p_logical_and_expression_1(t):
def p_logical_and_expression_2(t):
def p_inclusive_or_expression_1(t):
def p_inclusive_or_expression_2(t):
def p_exclusive_or_expression_1(t):
def p_exclusive_or_expression_2(t):
def p_and_expression_1(t):
def p_and_expression_2(t):
def p_equality_expression_1(t):
def p_equality_expression_2(t):
def p_equality_expression_3(t):
def p_relational_expression_1(t):
def p_relational_expression_2(t):
def p_relational_expression_3(t):
def p_relational_expression_4(t):
def p_relational_expression_5(t):
def p_shift_expression_1(t):
def p_shift_expression_2(t):
def p_shift_expression_3(t):
def p_additive_expression_1(t):
def p_additive_expression_2(t):
def p_additive_expression_3(t):
def p_multiplicative_expression_1(t):
def p_multiplicative_expression_2(t):
def p_multiplicative_expression_3(t):
def p_multiplicative_expression_4(t):
def p_cast_expression_1(t):
def p_cast_expression_2(t):
def p_unary_expression_1(t):
def p_unary_expression_2(t):
def p_unary_expression_3(t):
def p_unary_expression_4(t):
def p_unary_expression_5(t):
def p_unary_expression_6(t):
def p_unary_operator(t):
def p_postfix_expression_1(t):
def p_postfix_expression_2(t):
def p_postfix_expression_3(t):
def p_postfix_expression_4(t):
def p_postfix_expression_5(t):
def p_postfix_expression_6(t):
def p_postfix_expression_7(t):
def p_postfix_expression_8(t):
def p_primary_expression(t):
def p_argument_expression_list(t):
def p_constant(t):
def p_empty(t):
def t_NEWLINE(t):
def t_ID(t):
def t_comment(t):
def t_preprocessor(t):
def p_program(p):
def p_program_error(p):
def p_statement(p):
def p_statement_interactive(p):
def p_statement_blank(p):
def p_statement_bad(p):
def p_statement_newline(p):
def p_command_let(p):
def p_command_let_bad(p):
def p_command_read(p):
def p_command_read_bad(p):
def p_command_data(p):
def p_command_data_bad(p):
def p_command_print(p):
def p_command_print_bad(p):
def p_optend(p):
def p_command_print_empty(p):
def p_command_goto(p):
def p_command_goto_bad(p):
def p_command_if(p):
def p_command_if_bad(p):
def p_command_if_bad2(p):
def p_command_for(p):
def p_command_for_bad_initial(p):
def p_command_for_bad_final(p):
def p_command_for_bad_step(p):
def p_optstep(p):
def p_command_next(p):
def p_command_next_bad(p):
def p_command_end(p):
def p_command_rem(p):
def p_command_stop(p):
def p_command_def(p):
def p_command_def_bad_rhs(p):
def p_command_def_bad_arg(p):
def p_command_gosub(p):
def p_command_gosub_bad(p):
def p_command_return(p):
def p_command_dim(p):
def p_command_dim_bad(p):
def p_dimlist(p):
def p_dimitem_single(p):
def p_dimitem_double(p):
def p_expr_binary(p):
def p_expr_number(p):
def p_expr_variable(p):
def p_expr_group(p):
def p_expr_unary(p):
def p_relexpr(p):
def p_variable(p):
def p_varlist(p):
def p_numlist(p):
def p_number(p):
def p_number_signed(p):
def p_plist(p):
def p_item_string(p):
def p_item_string_expr(p):
def p_item_expr(p):
def t_REM(t):
def t_ID(t):
def t_NEWLINE(t):
def t_NUMBER(t):
def t_STRING(t):
def t_NAME(t):
def t_comment(t):
def t_WS(t):
def t_newline(t):
def t_LPAR(t):
def t_RPAR(t):
def p_file_input_end(p):
def p_file_input(p):
def p_funcdef(p):
def p_parameters(p):
def p_varargslist(p):
def p_stmt_simple(p):
def p_stmt_compound(p):
def p_simple_stmt(p):
def p_small_stmts(p):
def p_small_stmt(p):
def p_expr_stmt(p):
def p_flow_stmt(p):
def p_return_stmt(p):
def p_compound_stmt(p):
def p_if_stmt(p):
def p_suite(p):
def p_stmts(p):
def p_comparison(p):
def p_power(p):
def p_atom_name(p):
def p_atom_number(p):
def p_atom_tuple(p):
def p_trailer(p):
def p_testlist(p):
def p_testlist_multi(p):
def p_test(p):
def p_arglist(p):
def p_argument(p):
def t_H_EDIT_DESCRIPTOR(t):
def t_NUMBER(t):
def t_newline(t):
def p_statement_assign(t):
def p_statement_expr(t):
def p_expression_binop(t):
def p_expression_uminus(t):
def p_expression_group(t):
def p_expression_number(t):
def p_expression_name(t):
def compile_matcher(regex):
def walk_with_symlinks(top, func, arg):
def get_test_files(cfg):
def import_module(filename, cfg, tracer=None):
def filter_testsuite(suite, matcher, level=None):
def get_all_test_cases(module):
def get_test_classes_from_testsuite(suite):
def get_test_cases(test_files, cfg, tracer=None):
def get_test_hooks(test_files, cfg, tracer=None):
def main(argv):
def download_libxml2(dest_dir, version=None):
def download_libxslt(dest_dir, version=None):
def download_libiconv(dest_dir, version=None):
def _extractall(self, path='.', members=None):
def with_attributes(*use_attributes):
def with_text(no_text=False, text=False, utext=False):
def onlylib(*libs):
def serialized(function):
def children(function):
def nochange(function):
def tex_postprocess(src_path, dest_path, want_header=False, process_line=noop):
def ATOM(atom):
def Element(tag, *args, **kw):
def _strftime(d):
def is_private(prefix, base):
def _extract_future_flags(globs):
def _normalize_module(module, depth=2):
def _indent(s, indent=4):
def _exception_traceback(exc_info):
def _ellipsis_match(want, got):
def _comment_line(line):
def testmod(m=None, name=None, globs=None, verbose=None, isprivate=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False):
def testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser()):
def run_docstring_examples(f, globs, verbose=False, name='NoName', compileflags=None, optionflags=0):
def set_unittest_reportflags(flags):
def DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, **options):
def DocFileSuite(*paths, **kw):
def script_from_examples(s):
def testsource(module, name):
def debug_src(src, pm=False, globs=None):
def debug_script(src, pm=False, globs=None):
def debug(module, name, pm=False):
def get_include():
def filter_by_version(test_class, version_dict, current_version):
@contextmanager DCNL def webserver(app, port=0, host=None):
def _transform_result(typ, result):
def fragments_fromstring(html, no_leading_text=False, base_url=None, parser=None, **kw):
def fragment_fromstring(html, create_parent=False, base_url=None, parser=None, **kw):
def fromstring(html, base_url=None, parser=None, **kw):
def parse(filename_or_url, parser=None, base_url=None, **kw):
def submit_form(form, extra_values=None, open_http=None):
def html_to_xhtml(html):
def xhtml_to_html(xhtml):
def tostring(doc, pretty_print=False, include_meta_content_type=False, encoding=None, method='html', with_tail=True, doctype=None):
def open_in_browser(doc, encoding=None):
def Element(*args, **kw):
def fromstring(data, beautifulsoup=None, makeelement=None, **bsargs):
def parse(file, beautifulsoup=None, makeelement=None, **bsargs):
def convert_tree(beautiful_soup_tree, makeelement=None):
def html_annotate(doclist, markup=default_markup):
def tokenize_annotated(doc, annotation):
def html_annotate_merge_annotations(tokens_old, tokens_new):
def copy_annotations(src, dest):
def compress_tokens(tokens):
def compress_merge_back(tokens, tok):
def markup_serialize_tokens(tokens, markup_func):
def htmldiff(old_html, new_html):
def htmldiff_tokens(html1_tokens, html2_tokens):
def expand_tokens(tokens, equal=False):
def merge_insert(ins_chunks, doc):
def merge_delete(del_chunks, doc):
def cleanup_delete(chunks):
def split_unbalanced(chunks):
def split_delete(chunks):
def locate_unbalanced_start(unbalanced_start, pre_delete, post_delete):
def locate_unbalanced_end(unbalanced_end, pre_delete, post_delete):
def tokenize(html, include_hrefs=True):
def parse_html(html, cleanup=True):
def cleanup_html(html):
def split_trailing_whitespace(word):
def fixup_chunks(chunks):
def flatten_el(el, include_hrefs, skip_tag=False):
def split_words(text):
def start_tag(el):
def end_tag(el):
def fixup_ins_del_tags(html):
def serialize_html_fragment(el, skip_outer=False):
def _fixup_ins_del_tags(doc):
def _contains_block_level_tag(el):
def _move_el_inside_block(el, tag):
def _merge_element_contents(el):
def autolink(el, link_regexes=_link_regexes, avoid_elements=_avoid_elements, avoid_hosts=_avoid_hosts, avoid_classes=_avoid_classes):
def word_break(el, max_width=40, avoid_elements=_avoid_word_break_elements, avoid_classes=_avoid_word_break_classes, break_character=unichr(8203)):
def document_fromstring(html, guess_charset=True, parser=None):
def fragments_fromstring(html, no_leading_text=False, guess_charset=False, parser=None):
def fragment_fromstring(html, create_parent=False, guess_charset=False, parser=None):
def fromstring(html, guess_charset=True, parser=None):
def parse(filename_url_or_file, guess_charset=True, parser=None):
def install(html=False):
def temp_install(html=False, del_module=None):
def stylesheet_params(**kwargs):
def _stylesheet_param_dict(paramsDict, kwargsDict):
def saxify(element_or_tree, content_handler):
def changes():
def create_version_h(svn_version):
def use_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir, download_delay=15):
def download_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir, delay=15):
def main(argv, version=DEFAULT_VERSION):
def update_md5(filenames):
def error(xml):
def xpath_tokenizer(p):
def tokenize(sql, encoding=None):
def split_unquoted_newlines(stmt):
def remove_quotes(val):
def recurse(*cls):
def imt(token, i=None, m=None, t=None):
def consume(iterator, n):
def parse(sql, encoding=None):
def parsestream(stream, encoding=None):
def format(sql, encoding=None, **options):
def split(sql, encoding=None):
def validate_options(options):
def build_filter_stack(stack, options):
def _error(msg):
def _group_matching(tlist, cls):
def group_order(tlist):
def _group(tlist, cls, match, valid_prev=(lambda t: True), valid_next=(lambda t: True), post=None, extend=True, recurse=True):
@pytest.fixture() DCNL def filepath():
@pytest.fixture() DCNL def load_file(filepath):
def test_grouping_identifier_list_subquery():
def get_version():
def get_python_module_names(file_list, file_suffix='.py'):
def get_test_module_names(module_list, module_prefix='test_'):
def make_suite(path=test_dir):
def get_function_signature(func):
def format_function_signature(func):
def make_runner_scenarios():
def set_runner_scenario(testcase, scenario_name, clear_tracker=True):
def set_pidlockfile_scenario(testcase, scenario_name):
def setup_runner_fixtures(testcase):
def make_pidlockfile_scenarios():
def setup_pidfile_fixtures(testcase):
def setup_lockfile_method_mocks(testcase, scenario, class_name):
def setup_pidlockfile_fixtures(testcase, scenario_name=None):
def set_pidlockfile_scenario(testcase, scenario_name, clear_tracker=True):
def setup_daemon_context_fixtures(testcase):
def setup_streams_fixtures(testcase):
def change_working_directory(directory):
def change_root_directory(directory):
def change_file_creation_mask(mask):
def change_process_owner(uid, gid):
def prevent_core_dump():
def detach_process_context():
def is_process_started_by_init():
def is_socket(fd):
def is_process_started_by_superserver():
def is_detach_process_context_required():
def close_file_descriptor_if_open(fd):
def get_maximum_file_descriptors():
def close_all_open_files(exclude=set()):
def redirect_stream(system_stream, target_stream):
def make_default_signal_map():
def set_signal_handlers(signal_handler_map):
def register_atexit_function(func):
def emit_message(message, stream=None):
def make_pidlockfile(path, acquire_timeout):
def is_pidfile_stale(pidfile):
def read_pid_from_pidfile(pidfile_path):
def write_pid_to_pidfile(pidfile_path):
def remove_existing_pidfile(pidfile_path):
def get_all_styles():
def bygroups(*args):
def using(_other, **kwargs):
def do_insertions(insertions, tokens):
def ansiformat(attr, text):
def lex(code, lexer):
def format(tokens, formatter, outfile=None):
def highlight(code, lexer, formatter, outfile=None):
def make_analysator(f):
def shebang_matches(text, regex):
def doctype_matches(text, regex):
def html_doctype_matches(text):
def looks_like_xml(text):
def _load_lexers(module_name):
def get_all_lexers():
def find_lexer_class(name):
def get_lexer_by_name(_alias, **options):
def get_lexer_for_filename(_fn, code=None, **options):
def get_lexer_for_mimetype(_mime, **options):
def _iter_lexerclasses():
def guess_lexer_for_filename(_fn, _text, **options):
def guess_lexer(_text, **options):
def main(args=sys.argv):
def is_token_subtype(ttype, other):
def string_to_tokentype(s):
def escape_html(text):
def get_all_formatters():
def escape_html(text):
def get_random_id():
def find_filter_class(filtername):
def get_filter_by_name(filtername, **options):
def get_all_filters():
def apply_filters(stream, filters, lexer=None):
def simplefilter(f):
def use_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir, download_delay=15):
def download_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir, delay=15):
def main(argv, version=DEFAULT_VERSION):
def update_md5(filenames):
def get_root():
def get_config_from_root(root):
def register_vcs_handler(vcs, method):
def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):
@register_vcs_handler('git', 'get_keywords') DCNL def git_get_keywords(versionfile_abs):
@register_vcs_handler('git', 'keywords') DCNL def git_versions_from_keywords(keywords, tag_prefix, verbose):
@register_vcs_handler('git', 'pieces_from_vcs') DCNL def git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command):
def do_vcs_install(manifest_in, versionfile_source, ipy):
def versions_from_parentdir(parentdir_prefix, root, verbose):
def versions_from_file(filename):
def write_to_version_file(filename, versions):
def plus_or_dot(pieces):
def render_pep440(pieces):
def render_pep440_pre(pieces):
def render_pep440_post(pieces):
def render_pep440_old(pieces):
def render_git_describe(pieces):
def render_git_describe_long(pieces):
def render(pieces, style):
def get_versions(verbose=False):
def get_version():
def get_cmdclass():
def do_setup():
def scan_setup_py():
def get_keywords():
def get_config():
def register_vcs_handler(vcs, method):
def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):
def versions_from_parentdir(parentdir_prefix, root, verbose):
@register_vcs_handler('git', 'get_keywords') DCNL def git_get_keywords(versionfile_abs):
@register_vcs_handler('git', 'keywords') DCNL def git_versions_from_keywords(keywords, tag_prefix, verbose):
@register_vcs_handler('git', 'pieces_from_vcs') DCNL def git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command):
def plus_or_dot(pieces):
def render_pep440(pieces):
def render_pep440_pre(pieces):
def render_pep440_post(pieces):
def render_pep440_old(pieces):
def render_git_describe(pieces):
def render_git_describe_long(pieces):
def render(pieces, style):
def get_versions():
def json_encoder(obj):
def instance_cache(func):
def parse_timestamp(value):
def parse_to_aware_datetime(value):
def datetime2timestamp(dt, default_timezone=None):
def create_credential_resolver(context):
def multi_file_load_config(*filenames):
def load_config(config_filename):
def raw_config_parse(config_filename):
def build_profile_map(parsed_ini_config):
def validate_parameters(params, shape):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def copy_kwargs(kwargs):
def compat_input(prompt, interactive_long_input=False):
def avro_hexlify(reader):
def validate(expected_schema, datum):
def make_avpr_object(json_data):
def parse(json_string):
def get_other_props(all_props, reserved_props):
def make_avsc_object(json_data, names=None):
def parse(json_string):
def pks(objects):
def view(request):
def fully_decorated(request):
def get_perm(Model, perm):
def datatype(dbtype, description):
def no_template_view(request):
def staff_only_view(request):
def get_view(request):
def request_data(request, template='base.html', data='sausage'):
def view_with_argument(request, name):
def login_protected_redirect_view(request):
def set_session_view(request):
def check_session_view(request):
def request_methods_view(request):
def return_json_file(request):
def check_headers(request):
def body(request):
def read_all(request):
def read_buffer(request):
def get_view(request):
def post_view(request):
def view_with_header(request):
def raw_post_view(request):
def redirect_view(request):
def view_with_secure(request):
def double_redirect_view(request):
def bad_view(request):
def form_view(request):
def form_view_with_template(request):
def formset_view(request):
def login_protected_view(request):
def login_protected_view_changed_redirect(request):
def _permission_protected_view(request):
def session_view(request):
def broken_view(request):
def file_upload_view(request):
def file_upload_view_verify(request):
def file_upload_echo(request):
def file_upload_echo_content(request):
def file_upload_quota(request):
def file_upload_quota_broken(request):
def file_upload_getlist_count(request):
def file_upload_filename_case_view(request):
def expectedFailureIf(condition):
def post_form_view(request):
def token_view(request):
def non_token_view_using_request_processor(request):
def custom_key_func(key, key_prefix, version):
@register.filter DCNL def noop(value, param=None):
@register.simple_tag DCNL def no_params():
@register.simple_tag DCNL def one_param(arg):
@register.simple_tag(takes_context=False) DCNL def explicit_no_context(arg):
@register.simple_tag(takes_context=True) DCNL def no_params_with_context(context):
@register.simple_tag(takes_context=True) DCNL def params_and_context(context, arg):
@register.simple_tag DCNL def simple_two_params(one, two):
@register.simple_tag DCNL def simple_one_default(one, two='hi'):
@register.simple_tag DCNL def simple_unlimited_args(one, two='hi', *args):
@register.simple_tag DCNL def simple_only_unlimited_args(*args):
@register.simple_tag DCNL def simple_unlimited_args_kwargs(one, two='hi', *args, **kwargs):
@register.simple_tag(takes_context=True) DCNL def simple_tag_without_context_parameter(arg):
@register.inclusion_tag('inclusion.html') DCNL def inclusion_no_params():
@register.inclusion_tag(get_template('inclusion.html')) DCNL def inclusion_no_params_from_template():
@register.inclusion_tag('inclusion.html') DCNL def inclusion_one_param(arg):
@register.inclusion_tag(get_template('inclusion.html')) DCNL def inclusion_one_param_from_template(arg):
@register.inclusion_tag('inclusion.html', takes_context=False) DCNL def inclusion_explicit_no_context(arg):
@register.inclusion_tag(get_template('inclusion.html'), takes_context=False) DCNL def inclusion_explicit_no_context_from_template(arg):
@register.inclusion_tag('inclusion.html', takes_context=True) DCNL def inclusion_no_params_with_context(context):
@register.inclusion_tag(get_template('inclusion.html'), takes_context=True) DCNL def inclusion_no_params_with_context_from_template(context):
@register.inclusion_tag('inclusion.html', takes_context=True) DCNL def inclusion_params_and_context(context, arg):
@register.inclusion_tag(get_template('inclusion.html'), takes_context=True) DCNL def inclusion_params_and_context_from_template(context, arg):
@register.inclusion_tag('inclusion.html') DCNL def inclusion_two_params(one, two):
@register.inclusion_tag(get_template('inclusion.html')) DCNL def inclusion_two_params_from_template(one, two):
@register.inclusion_tag('inclusion.html') DCNL def inclusion_one_default(one, two='hi'):
@register.inclusion_tag(get_template('inclusion.html')) DCNL def inclusion_one_default_from_template(one, two='hi'):
@register.inclusion_tag('inclusion.html') DCNL def inclusion_unlimited_args(one, two='hi', *args):
@register.inclusion_tag(get_template('inclusion.html')) DCNL def inclusion_unlimited_args_from_template(one, two='hi', *args):
@register.inclusion_tag('inclusion.html') DCNL def inclusion_only_unlimited_args(*args):
@register.inclusion_tag(get_template('inclusion.html')) DCNL def inclusion_only_unlimited_args_from_template(*args):
@register.inclusion_tag('test_incl_tag_current_app.html', takes_context=True) DCNL def inclusion_tag_current_app(context):
@register.inclusion_tag('test_incl_tag_use_l10n.html', takes_context=True) DCNL def inclusion_tag_use_l10n(context):
@register.inclusion_tag('inclusion.html') DCNL def inclusion_unlimited_args_kwargs(one, two='hi', *args, **kwargs):
@register.inclusion_tag('inclusion.html', takes_context=True) DCNL def inclusion_tag_without_context_parameter(arg):
@register.assignment_tag DCNL def assignment_no_params():
@register.assignment_tag DCNL def assignment_one_param(arg):
@register.assignment_tag(takes_context=False) DCNL def assignment_explicit_no_context(arg):
@register.assignment_tag(takes_context=True) DCNL def assignment_no_params_with_context(context):
@register.assignment_tag(takes_context=True) DCNL def assignment_params_and_context(context, arg):
@register.assignment_tag DCNL def assignment_two_params(one, two):
@register.assignment_tag DCNL def assignment_one_default(one, two='hi'):
@register.assignment_tag DCNL def assignment_unlimited_args(one, two='hi', *args):
@register.assignment_tag DCNL def assignment_only_unlimited_args(*args):
@register.assignment_tag DCNL def assignment_unlimited_args_kwargs(one, two='hi', *args, **kwargs):
@register.assignment_tag(takes_context=True) DCNL def assignment_tag_without_context_parameter(arg):
def create_egg(name, resources):
def index_page(request):
def redirect(request):
def write_pot_file(potfile, msgs):
def module_to_dict(module, omittable=(lambda k: k.startswith('_'))):
def sort_dependencies(app_list):
def handle_default_options(options):
def sql_create(app, style, connection):
def sql_delete(app, style, connection):
def sql_flush(style, connection, only_django=False, reset_sequences=True, allow_cascade=False):
def sql_custom(app, style, connection):
def sql_indexes(app, style, connection):
def sql_destroy_indexes(app, style, connection):
def sql_all(app, style, connection):
def popen_wrapper(args, os_err_exc_type=CommandError):
def handle_extensions(extensions=('html',), ignored=('py',)):
def find_commands(management_dir):
def find_management_module(app_name):
def load_command_class(app_name, name):
def get_commands():
def call_command(name, *args, **options):
def execute_from_command_line(argv=None):
def get_validation_errors(outfile, app=None):
def supports_color():
def color_style():
def no_style():
def get_internal_wsgi_application():
def get_path_info(environ):
def get_script_name(environ):
def get_connection(backend=None, fail_silently=False, **kwds):
def send_mail(subject, message, from_email, recipient_list, fail_silently=False, auth_user=None, auth_password=None, connection=None):
def send_mass_mail(datatuple, fail_silently=False, auth_user=None, auth_password=None, connection=None):
def mail_admins(subject, message, fail_silently=False, connection=None, html_message=None):
def mail_managers(subject, message, fail_silently=False, connection=None, html_message=None):
def make_msgid(idstring=None):
def forbid_multi_line_headers(name, val, encoding):
def load_handler(path, *args, **kwargs):
def get_image_dimensions(file_or_path, close=False):
def fd(f):
def file_move_safe(old_file_name, new_file_name, chunk_size=(1024 * 64), allow_overwrite=False):
def csrf(request):
def debug(request):
def static(request):
def media(request):
def get_callable(lookup_view, can_fail=False):
def set_script_prefix(prefix):
def get_script_prefix():
def clear_script_prefix():
def set_urlconf(urlconf_name):
def get_urlconf(default=None):
def is_valid_path(path, urlconf=None):
def get_wsgi_application():
def dumps(obj, key=None, salt=u'django.core.signing', serializer=JSONSerializer, compress=False):
def loads(s, key=None, salt=u'django.core.signing', serializer=JSONSerializer, max_age=None):
def register_serializer(format, serializer_module, serializers=None):
def unregister_serializer(format):
def serialize(format, queryset, **options):
def deserialize(format, stream_or_string, **options):
def _load_serializers():
def Deserializer(stream_or_string, **options):
def Deserializer(stream_or_string, **options):
def Deserializer(object_list, **options):
def _get_model(model_identifier):
def getInnerText(node):
def default_key_func(key, key_prefix, version):
def get_key_func(key_func):
def parse_backend_uri(backend_uri):
def parse_backend_conf(backend, **kwargs):
def get_cache(backend, **kwargs):
def check_compatibility():
def check_test_runner():
def check_boolean_field_default_value():
def run_checks():
def ip_address_validators(protocol, unpack_ipv4):
def safeRef(target, onDelete=None):
def get_bound_method_weakref(target, onDelete):
def receiver(signal, **kwargs):
def subclass_exception(name, parents, module, attached_to=None):
def simple_class_factory(model, attrs):
def model_unpickle(model_id, attrs, factory):
def permalink(func):
def get_klass_info(klass, max_depth=0, cur_depth=0, requested=None, only_load=None, from_parent=None):
def get_cached_row(row, index_start, using, klass_info, offset=0, parent_data=()):
def insert_query(model, objs, fields, return_id=False, raw=False, using=None):
def prefetch_related_objects(result_cache, related_lookups):
def get_prefetcher(instance, attr):
def prefetch_one_level(instances, prefetcher, attname):
def refs_aggregate(lookup_parts, aggregates):
def select_related_descend(field, restricted, requested, load_fields, reverse=False):
def deferred_class_factory(model, attrs):
def ensure_default_manager(sender, **kwargs):
def get_order_dir(field, default='ASC'):
def add_to_dict(data, key, value):
def is_reverse_o2o(field):
def alias_diff(refcounts_before, refcounts_after):
def order_modified_iter(cursor, trim, sentinel):
def make_contrib(superclass, func=None):
def add_lazy_relation(cls, field, relation, operation):
def do_pending_lookups(sender, **kwargs):
def create_many_related_manager(superclass, rel):
def to_unicode(s):
def _parse_version(text):
def get_version(connection):
def truncate_name(name, length=None, hash_len=4):
def format_number(value, max_digits, decimal_places):
def decoder(conv_func):
def get_field_size(name):
def get_connection(using=None):
def abort(using=None):
def enter_transaction_management(managed=True, using=None, forced=False):
def leave_transaction_management(using=None):
def is_dirty(using=None):
def set_dirty(using=None):
def set_clean(using=None):
def get_autocommit(using=None):
def set_autocommit(autocommit, using=None):
def commit(using=None):
def rollback(using=None):
def savepoint(using=None):
def savepoint_rollback(sid, using=None):
def savepoint_commit(sid, using=None):
def clean_savepoints(using=None):
def get_rollback(using=None):
def set_rollback(rollback, using=None):
def _transaction_func(entering, exiting, using):
def autocommit(using=None):
def commit_on_success(using=None):
def commit_manually(using=None):
def commit_on_success_unless_managed(using=None, savepoint=False):
def _get_failure_view():
def get_token(request):
def rotate_token(request):
@register.filter DCNL def localtime(value):
@register.filter DCNL def utc(value):
@register.filter('timezone') DCNL def do_timezone(value, arg):
@register.tag('localtime') DCNL def localtime_tag(parser, token):
@register.tag('timezone') DCNL def timezone_tag(parser, token):
@register.tag('get_current_timezone') DCNL def get_current_timezone_tag(parser, token):
@register.tag(u'get_available_languages') DCNL def do_get_available_languages(parser, token):
@register.tag(u'get_language_info') DCNL def do_get_language_info(parser, token):
@register.tag(u'get_language_info_list') DCNL def do_get_language_info_list(parser, token):
@register.tag(u'get_current_language') DCNL def do_get_current_language(parser, token):
@register.tag(u'get_current_language_bidi') DCNL def do_get_current_language_bidi(parser, token):
@register.tag(u'trans') DCNL def do_translate(parser, token):
@register.tag(u'blocktrans') DCNL def do_block_translate(parser, token):
@register.tag DCNL def language(parser, token):
@register.tag DCNL def cycle(parser, token):
@register.tag DCNL def firstof(parser, token):
@register.filter(is_safe=False) DCNL def localize(value):
@register.filter(is_safe=False) DCNL def unlocalize(value):
@register.tag('localize') DCNL def localize_tag(parser, token):
@register.tag DCNL def get_static_prefix(parser, token):
@register.tag DCNL def get_media_prefix(parser, token):
@register.tag('static') DCNL def do_static(parser, token):
@register.tag(u'cache') DCNL def do_cache(parser, token):
def render_to_response(*args, **kwargs):
def render(request, *args, **kwargs):
def redirect(to, *args, **kwargs):
def _get_queryset(klass):
def get_object_or_404(klass, *args, **kwargs):
def get_list_or_404(klass, *args, **kwargs):
def resolve_url(to, *args, **kwargs):
@requires_csrf_token DCNL def page_not_found(request, template_name='404.html'):
@requires_csrf_token DCNL def server_error(request, template_name='500.html'):
@requires_csrf_token DCNL def bad_request(request, template_name='400.html'):
@requires_csrf_token DCNL def permission_denied(request, template_name='403.html'):
def xframe_options_deny(view_func):
def xframe_options_sameorigin(view_func):
def xframe_options_exempt(view_func):
def csrf_exempt(view_func):
def sensitive_variables(*variables):
def sensitive_post_parameters(*parameters):
def require_http_methods(request_method_list):
def condition(etag_func=None, last_modified_func=None):
def vary_on_headers(*headers):
def vary_on_cookie(func):
def cache_page(*args, **kwargs):
def never_cache(view_func):
def set_language(request):
def get_formats():
def null_javascript_catalog(request, domain=None, packages=None):
def javascript_catalog(request, domain='djangojs', packages=None):
def serve(request, path, document_root=None, show_indexes=False):
def was_modified_since(header=None, mtime=0, size=0):
def csrf_failure(request, reason=''):
def _date_from_string(year, year_format, month=u'', month_format=u'', day=u'', day_format=u'', delim=u'__'):
def _get_next_prev(generic_view, date, is_previous, period):
def timezone_today():
def cleanse_setting(key, value):
def get_safe_settings():
def technical_500_response(request, exc_type, exc_value, tb):
def technical_404_response(request, exception):
def default_urlconf(request):
def flatatt(attrs):
def from_current_timezone(value):
def to_current_timezone(value):
def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False, can_delete=False, max_num=None, validate_max=False):
def all_valid(formsets):
def construct_instance(form, instance, fields=None, exclude=None):
def save_instance(form, instance, fields=None, fail_message=u'saved', commit=True, exclude=None, construct=True):
def model_to_dict(instance, fields=None, exclude=None):
def fields_for_model(model, fields=None, exclude=None, widgets=None, formfield_callback=None, localized_fields=None, labels=None, help_texts=None, error_messages=None):
def modelform_factory(model, form=ModelForm, fields=None, exclude=None, formfield_callback=None, widgets=None, localized_fields=None, labels=None, help_texts=None, error_messages=None):
def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None):
def _get_foreign_key(parent_model, model, fk_name=None, can_fail=False):
def inlineformset_factory(parent_model, model, form=ModelForm, formset=BaseInlineFormSet, fk_name=None, fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None):
def pretty_name(name):
def get_declared_fields(bases, attrs, with_base_fields=True):
def exhaust(stream_or_iterable):
def parse_boundary_stream(stream, max_header_size):
def parse_header(line):
def fix_location_header(request, response):
def conditional_content_removal(request, response):
def build_request_repr(request, path_override=None, GET_override=None, POST_override=None, COOKIES_override=None, META_override=None):
def bytes_to_text(s, encoding):
def split_domain_port(host):
def validate_host(host, allowed_hosts):
def i18n_patterns(prefix, *args):
def static(prefix, view='django.views.static.serve', **kwargs):
def to_list(value):
def connections_support_transactions():
def skipIfDBFeature(feature):
def skipUnlessDBFeature(feature):
def instrumented_test_render(self, context):
def setup_test_environment():
def teardown_test_environment():
def get_warnings_state():
def restore_warnings_state(state):
def setup_test_template_loader(templates_dict, use_cached_loader=False):
def restore_template_loaders():
def compare_xml(want, got):
def strip_quotes(want, got):
@contextmanager DCNL def patch_logger(logger_name, log_level):
def dependency_ordered(test_databases, dependencies):
def reorder_suite(suite, classes):
def partition_suite(suite, classes, bins):
def store_rendered_templates(store, signal, sender, template, context, **kwargs):
def encode_multipart(boundary, data):
def _extract_future_flags(globs):
def _normalize_module(module, depth=2):
def _indent(s, indent=4):
def _exception_traceback(exc_info):
def _ellipsis_match(want, got):
def _comment_line(line):
def testmod(m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False):
def testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser(), encoding=None):
def run_docstring_examples(f, globs, verbose=False, name='NoName', compileflags=None, optionflags=0):
def set_unittest_reportflags(flags):
def DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, test_class=DocTestCase, **options):
def DocFileSuite(*paths, **kw):
def script_from_examples(s):
def testsource(module, name):
def debug_src(src, pm=False, globs=None):
def debug_script(src, pm=False, globs=None):
def debug(module, name, pm=False):
def build_suite(app_module):
def build_test(label):
def parse_html(html):
@register.tag DCNL def autoescape(parser, token):
@register.tag DCNL def comment(parser, token):
@register.tag DCNL def cycle(parser, token, escape=False):
@register.tag DCNL def debug(parser, token):
@register.tag(u'filter') DCNL def do_filter(parser, token):
@register.tag DCNL def firstof(parser, token, escape=False):
@register.tag(u'for') DCNL def do_for(parser, token):
@register.tag DCNL def ifequal(parser, token):
@register.tag DCNL def ifnotequal(parser, token):
@register.tag(u'if') DCNL def do_if(parser, token):
@register.tag DCNL def ifchanged(parser, token):
@register.tag DCNL def ssi(parser, token):
@register.tag DCNL def load(parser, token):
@register.tag DCNL def now(parser, token):
@register.tag DCNL def regroup(parser, token):
@register.tag DCNL def spaceless(parser, token):
@register.tag DCNL def templatetag(parser, token):
@register.tag DCNL def url(parser, token):
@register.tag DCNL def verbatim(parser, token):
@register.tag DCNL def widthratio(parser, token):
@register.tag(u'with') DCNL def do_with(parser, token):
def compile_string(template_string, origin):
def resolve_variable(path, context):
def render_value_in_context(value, context):
def token_kwargs(bits, parser, support_legacy=False):
def parse_bits(parser, bits, params, varargs, varkw, defaults, takes_context, name):
def generic_tag_compiler(parser, token, params, varargs, varkw, defaults, name, takes_context, node_class):
def is_library_missing(name):
def import_library(taglib_module):
def get_templatetags_modules():
def get_library(library_name):
def stringfilter(func):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def addslashes(value):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def capfirst(value):
@register.filter(u'escapejs') DCNL @stringfilter DCNL def escapejs_filter(value):
@register.filter(u'fix_ampersands', is_safe=True) DCNL @stringfilter DCNL def fix_ampersands_filter(value):
@register.filter(is_safe=True) DCNL def floatformat(text, arg=(-1)):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def iriencode(value):
@register.filter(is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def linenumbers(value, autoescape=None):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def lower(value):
@register.filter(is_safe=False) DCNL @stringfilter DCNL def make_list(value):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def slugify(value):
@register.filter(is_safe=True) DCNL def stringformat(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def title(value):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def truncatechars(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def truncatewords(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def truncatewords_html(value, arg):
@register.filter(is_safe=False) DCNL @stringfilter DCNL def upper(value):
@register.filter(is_safe=False) DCNL @stringfilter DCNL def urlencode(value, safe=None):
@register.filter(is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def urlize(value, autoescape=None):
@register.filter(is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def urlizetrunc(value, limit, autoescape=None):
@register.filter(is_safe=False) DCNL @stringfilter DCNL def wordcount(value):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def wordwrap(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def ljust(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def rjust(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def center(value, arg):
@register.filter DCNL @stringfilter DCNL def cut(value, arg):
@register.filter(u'escape', is_safe=True) DCNL @stringfilter DCNL def escape_filter(value):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def force_escape(value):
@register.filter(u'linebreaks', is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def linebreaks_filter(value, autoescape=None):
@register.filter(is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def linebreaksbr(value, autoescape=None):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def safe(value):
@register.filter(is_safe=True) DCNL def safeseq(value):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def removetags(value, tags):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def striptags(value):
@register.filter(is_safe=False) DCNL def dictsort(value, arg):
@register.filter(is_safe=False) DCNL def dictsortreversed(value, arg):
@register.filter(is_safe=False) DCNL def first(value):
@register.filter(is_safe=True, needs_autoescape=True) DCNL def join(value, arg, autoescape=None):
@register.filter(is_safe=True) DCNL def last(value):
@register.filter(is_safe=True) DCNL def length(value):
@register.filter(is_safe=False) DCNL def length_is(value, arg):
@register.filter(is_safe=True) DCNL def random(value):
@register.filter(u'slice', is_safe=True) DCNL def slice_filter(value, arg):
@register.filter(is_safe=True, needs_autoescape=True) DCNL def unordered_list(value, autoescape=None):
@register.filter(is_safe=False) DCNL def add(value, arg):
@register.filter(is_safe=False) DCNL def get_digit(value, arg):
@register.filter(expects_localtime=True, is_safe=False) DCNL def date(value, arg=None):
@register.filter(expects_localtime=True, is_safe=False) DCNL def time(value, arg=None):
@register.filter(u'timesince', is_safe=False) DCNL def timesince_filter(value, arg=None):
@register.filter(u'timeuntil', is_safe=False) DCNL def timeuntil_filter(value, arg=None):
@register.filter(is_safe=False) DCNL def default(value, arg):
@register.filter(is_safe=False) DCNL def default_if_none(value, arg):
@register.filter(is_safe=False) DCNL def divisibleby(value, arg):
@register.filter(is_safe=False) DCNL def yesno(value, arg=None):
@register.filter(is_safe=True) DCNL def filesizeformat(bytes):
@register.filter(is_safe=False) DCNL def pluralize(value, arg=u's'):
@register.filter(u'phone2numeric', is_safe=True) DCNL def phone2numeric_filter(value):
@register.filter(is_safe=True) DCNL def pprint(value):
def get_template(template_name):
def get_template_from_string(source, origin=None, name=None):
def render_to_string(template_name, dictionary=None, context_instance=None):
def select_template(template_name_list):
@register.tag('block') DCNL def do_block(parser, token):
@register.tag('extends') DCNL def do_extends(parser, token):
@register.tag('include') DCNL def do_include(parser, token):
def infix(bp, func):
def prefix(bp, func):
@register.tag DCNL def get_flatpages(parser, token):
def flatpage(request, url):
@csrf_protect DCNL def render_flatpage(request, f):
def matches_patterns(path, patterns=None):
def get_files(storage, ignore_patterns=None, location=''):
def check_settings(base_url=None):
@register.tag('static') DCNL def do_static(parser, token):
def find(path, all=False):
def _get_finder(import_path):
def staticfiles_urlpatterns(prefix=None):
def serve(request, path, insecure=False, **kwargs):
@register.tag DCNL def get_comment_count(parser, token):
@register.tag DCNL def get_comment_list(parser, token):
@register.tag DCNL def render_comment_list(parser, token):
@register.tag DCNL def get_comment_form(parser, token):
@register.tag DCNL def render_comment_form(parser, token):
@register.simple_tag DCNL def comment_form_target():
@register.simple_tag DCNL def get_comment_permalink(comment, anchor_pattern=None):
def get_comment_app():
def get_comment_app_name():
def get_model():
def get_form():
def get_form_target():
def get_flag_url(comment):
def get_delete_url(comment):
def get_approve_url(comment):
def next_redirect(request, fallback, **get_kwargs):
def confirmation_view(template, doc='Display DCSP a DCSP confirmation DCSP view.'):
@csrf_protect DCNL @require_POST DCNL def post_comment(request, next=None, using=None):
@csrf_protect DCNL @login_required DCNL def flag(request, comment_id, next=None):
@csrf_protect DCNL @permission_required('comments.can_moderate') DCNL def delete(request, comment_id, next=None):
@csrf_protect DCNL @permission_required('comments.can_moderate') DCNL def approve(request, comment_id, next=None):
def perform_flag(request, comment):
@register.filter(is_safe=True) DCNL def ordinal(value):
@register.filter(is_safe=True) DCNL def intcomma(value, use_l10n=True):
@register.filter(is_safe=False) DCNL def intword(value):
@register.filter(is_safe=True) DCNL def apnumber(value):
@register.filter(expects_localtime=True) DCNL def naturalday(value, arg=None):
@register.filter DCNL def naturaltime(value):
def layer_option(option, opt, value, parser):
def list_option(option, opt, value, parser):
def get_srid_info(srid, connection):
def get_dist_ops(operator):
def get_ogr_db_string():
def no_backend(test_func, backend):
def geo_apps():
def fromfile(file_h):
def fromstr(string, **kwargs):
def check_cs_ptr(result, func, cargs):
def check_cs_op(result, func, cargs):
def check_cs_get(result, func, cargs):
def cs_int(func):
def cs_operation(func, ordinate=False, get=False):
def cs_output(func, argtypes):
def binary_predicate(func, *args):
def unary_predicate(func):
def bin_constructor(func):
def bin_output(func):
def geom_output(func, argtypes):
def geom_index(func):
def int_from_geom(func, zero=False):
def string_from_geom(func):
def last_arg_byref(args):
def check_dbl(result, func, cargs):
def check_geom(result, func, cargs):
def check_minus_one(result, func, cargs):
def check_predicate(result, func, cargs):
def check_sized_string(result, func, cargs):
def check_string(result, func, cargs):
def check_zero(result, func, cargs):
def dbl_from_geom(func, num_geom=1):
def topology(func, *args, **kwargs):
def get_pointer_arr(n):
def geos_version_info():
def index(request, sitemaps):
def sitemap(request, sitemaps, section=None):
def kml(request, label, model, field_name=None, compress=False, using=DEFAULT_DB_ALIAS):
def kmz(request, label, model, field_name=None, using=DEFAULT_DB_ALIAS):
def tuplize(seq):
def strconvert(d):
def feed(request, url, feed_dict=None):
def std_call(func):
def gdal_version():
def gdal_full_version():
def check_err(code):
def env_func(f, argtypes):
def pnt_func(f):
def arg_byref(args, offset=(-1)):
def ptr_byref(args, offset=(-1)):
def check_bool(result, func, cargs):
def check_const_string(result, func, cargs, offset=None):
def check_string(result, func, cargs, offset=(-1), str_result=False):
def check_envelope(result, func, cargs, offset=(-1)):
def check_geom(result, func, cargs):
def check_geom_offset(result, func, cargs, offset=(-1)):
def check_arg_errcode(result, func, cargs):
def check_errcode(result, func, cargs):
def check_pointer(result, func, cargs):
def check_str_arg(result, func, cargs):
def double_output(func, argtypes, errcheck=False, strarg=False):
def geom_output(func, argtypes, offset=None):
def int_output(func, argtypes):
def srs_output(func, argtypes):
def string_output(func, argtypes, offset=(-1), str_result=False, decoding=None):
def void_output(func, argtypes, errcheck=True):
def voidptr_output(func, argtypes):
def srs_double(f):
def units_func(f):
def ogrinfo(data_source, num_features=10):
def mapping(data_source, geom_name='geom', layer_key=0, multi_geom=False):
def ogrinspect(*args, **kwargs):
def _ogrinspect(data_source, model_name, geom_name='geom', layer_key=0, srid=None, multi_geom=False, name_field=None, imports=True, decimal=False, blank=False, null=False):
def precision_wkt(geom, prec):
def add_srs_entry(srs, auth_name='EPSG', auth_srid=None, ref_sys_name=None, database=None):
def compress_kml(kml):
def render_to_kml(*args, **kwargs):
def render_to_kmz(*args, **kwargs):
def render_to_text(*args, **kwargs):
@register.tag DCNL def get_admin_log(parser, token):
@register.simple_tag DCNL def paginator_number(cl, i):
@register.inclusion_tag(u'admin/pagination.html') DCNL def pagination(cl):
def result_headers(cl):
def items_for_result(cl, result, form):
@register.inclusion_tag(u'admin/change_list_results.html') DCNL def result_list(cl):
@register.inclusion_tag(u'admin/date_hierarchy.html') DCNL def date_hierarchy(cl):
@register.inclusion_tag(u'admin/search_form.html') DCNL def search_form(cl):
@register.inclusion_tag(u'admin/actions.html', takes_context=True) DCNL def admin_actions(context):
@register.inclusion_tag('admin/prepopulated_fields_js.html', takes_context=True) DCNL def prepopulated_fields_js(context):
@register.inclusion_tag('admin/submit_line.html', takes_context=True) DCNL def submit_row(context):
@register.filter DCNL def cell_count(inline_admin_form):
def autodiscover():
def lookup_needs_distinct(opts, lookup_path):
def prepare_lookup_value(key, value):
def quote(s):
def unquote(s):
def flatten_fieldsets(fieldsets):
def get_deleted_objects(objs, opts, user, admin_site, using):
def model_format_dict(obj):
def model_ngettext(obj, n=None):
def label_for_field(name, model, model_admin=None, return_attr=False):
def reverse_field_path(model, path):
def get_fields_from_path(model, path):
def remove_trailing_data_field(fields):
def get_limit_choices_to_from_path(model, path):
def _is_changelist_popup(request):
def staff_member_required(view_func):
def normalize_fieldsets(fieldsets):
def normalize_dictionary(data_dict):
def url_params_from_lookup_dict(lookups):
def delete_selected(modeladmin, request, queryset):
def ping_google(sitemap_url=None, ping_url=PING_URL):
@register.tag DCNL def lorem(parser, token):
def sentence():
def paragraph():
def paragraphs(count, common=True):
def words(count, common=True):
def trim_docstring(docstring):
def parse_docstring(docstring):
def parse_rst(text, default_reference_context, thing_being_parsed=None):
def missing_docutils_page(request):
def get_return_data_type(func_name):
def get_readable_field_data_type(field):
def extract_views_from_urlpatterns(urlpatterns, base=''):
def simplify_regex(pattern):
def _simple_domain_name_validator(value):
def get_current_site(request):
def clear_site_cache(sender, **kwargs):
def _get_all_permissions(opts, ctype):
def _get_builtin_permissions(opts):
def _check_permission_clashing(custom, builtin, ctype):
def get_system_username():
def get_default_username(check_db=True):
def check_password(environ, username, password):
def groups_for_user(environ, username):
def _clean_credentials(credentials):
def authenticate(**credentials):
def login(request, user):
def logout(request):
def get_user_model():
def get_user(request):
def get_permission_codename(action, opts):
def skipIfCustomUser(test_func):
@never_cache DCNL def remote_user_auth_view(request):
def mock_inputs(inputs):
def update_last_login(sender, user, **kwargs):
def auth(request):
def check_password(password, encoded, setter=None, preferred=u'default'):
def make_password(password, salt=None, hasher=u'default'):
def get_hasher(algorithm=u'default'):
def identify_hasher(encoded):
def mask_hash(hash, show=6, char=u'*'):
def user_passes_test(test_func, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME):
def login_required(function=None, redirect_field_name=REDIRECT_FIELD_NAME, login_url=None):
def permission_required(perm, login_url=None, raise_exception=False):
@sensitive_post_parameters() DCNL @csrf_protect DCNL @never_cache DCNL def login(request, template_name='registration/login.html', redirect_field_name=REDIRECT_FIELD_NAME, authentication_form=AuthenticationForm, current_app=None, extra_context=None):
def logout(request, next_page=None, template_name='registration/logged_out.html', redirect_field_name=REDIRECT_FIELD_NAME, current_app=None, extra_context=None):
def logout_then_login(request, login_url=None, current_app=None, extra_context=None):
def redirect_to_login(next, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME):
@sensitive_post_parameters() DCNL @never_cache DCNL def password_reset_confirm(request, uidb64=None, token=None, template_name='registration/password_reset_confirm.html', token_generator=default_token_generator, set_password_form=SetPasswordForm, post_reset_redirect=None, current_app=None, extra_context=None):
def normalize_name(name):
def form_hmac(form):
def update_contenttypes(app, created_models, verbosity=2, db=DEFAULT_DB_ALIAS, **kwargs):
def create_generic_related_manager(superclass):
def generic_inlineformset_factory(model, form=ModelForm, formset=BaseGenericInlineFormSet, ct_field=u'content_type', fk_field=u'object_id', fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None, validate_max=False, for_concrete_model=True):
def shortcut(request, content_type_id, object_id):
def get_level_tags():
def set_session_data(storage, messages):
def add_level_messages(storage):
def set_cookie_data(storage, messages, invalid=False, encode_empty=False):
def stored_cookie_messages_count(storage, response):
def messages(request):
def add_message(request, level, message, extra_tags='', fail_silently=False):
def get_messages(request):
def get_level(request):
def set_level(request, level):
def debug(request, message, extra_tags='', fail_silently=False):
def info(request, message, extra_tags='', fail_silently=False):
def success(request, message, extra_tags='', fail_silently=False):
def warning(request, message, extra_tags='', fail_silently=False):
def error(request, message, extra_tags='', fail_silently=False):
def clean_ipv6_address(ip_str, unpack_ipv4=False, error_message=_('This DCSP is DCSP not DCSP a DCSP valid DCSP IPv6 DCSP address.')):
def _sanitize_ipv4_mapping(ip_str):
def _unpack_ipv4(ip_str):
def is_valid_ipv6_address(ip_str):
def _explode_shorthand_ip_string(ip_str):
def _is_shorthand_ip(ip_str):
def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='', force_grouping=False):
def _resolve_name(name, package, level):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def python_2_unicode_compatible(klass):
def get_tag_uri(url, date):
def skip(reason):
def skipIf(condition, reason):
def skipUnless(condition, reason):
def sorted_list_difference(expected, actual):
def unorderable_list_difference(expected, actual, ignore_duplicate=False):
def _CmpToKey(mycmp):
def _relpath_nt(path, start=os.path.curdir):
def _relpath_posix(path, start=os.path.curdir):
def _isnotsuite(test):
def luhn(candidate):
def timesince(d, now=None, reversed=False):
def timeuntil(d, now=None):
def normalize(pattern):
def next_char(input_iter):
def walk_to_end(ch, input_iter):
def get_quantifier(ch, input_iter):
def contains(source, inst):
def flatten_result(source):
def _string_concat(*strings):
def to_locale(language, to_lower=False):
def to_language(locale):
def translation(language):
def activate(language):
def deactivate():
def deactivate_all():
def get_language():
def get_language_bidi():
def catalog():
def do_translate(message, translation_function):
def gettext(message):
def gettext_noop(message):
def ngettext(singular, plural, number):
def all_locale_paths():
def check_for_language(lang_code):
def get_supported_language_variant(lang_code, supported=None, strict=False):
def get_language_from_path(path, supported=None, strict=False):
def get_language_from_request(request, check_path=False):
def blankout(src, char):
def templatize(src, origin=None):
def parse_accept_lang_header(lang_string):
def mark_safe(s):
def mark_for_escaping(s):
def dictConfig(config):
def colorize(text='', opts=(), **kwargs):
def make_style(opts=(), **kwargs):
def parse_color_setting(config_string):
def reset_format_cache():
def iter_format_modules(lang):
def get_format_modules(lang=None, reverse=False):
def get_format(format_type, lang=None, use_l10n=None):
def date_format(value, format=None, use_l10n=None):
def time_format(value, format=None, use_l10n=None):
def number_format(value, decimal_pos=None, use_l10n=None, force_grouping=False):
def localize(value, use_l10n=None):
def localize_input(value, default=None):
def sanitize_separators(value):
def extract(path, to_path=''):
def import_by_path(dotted_path, error_prefix=''):
def module_has_submodule(package, module_name):
def get_version(version=None):
def get_git_changeset():
def wrap(text, width):
def get_valid_filename(s):
def get_text_list(list_, last_word=ugettext_lazy(u'or')):
def recapitalize(text):
def phone2numeric(phone):
def smart_split(text):
def unescape_string_literal(s):
def slugify(value):
def parse_date(value):
def parse_time(value):
def parse_datetime(value):
def literals(choices, prefix='', suffix=''):
def prepare_js_for_gettext(js):
def python_2_unicode_compatible(klass):
def smart_text(s, encoding=u'utf-8', strings_only=False, errors=u'strict'):
def is_protected_type(obj):
def force_text(s, encoding=u'utf-8', strings_only=False, errors=u'strict'):
def smart_bytes(s, encoding=u'utf-8', strings_only=False, errors=u'strict'):
def force_bytes(s, encoding=u'utf-8', strings_only=False, errors=u'strict'):
def iri_to_uri(iri):
def filepath_to_uri(path):
def get_system_encoding():
def upath(path):
def npath(path):
def safe_join(base, *paths):
def rmtree_errorhandler(func, path, exc_info):
def new_date(d):
def new_datetime(d):
def salted_hmac(key_salt, value, secret=None):
def get_random_string(length=12, allowed_chars=u'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'):
def constant_time_compare(val1, val2):
def _bin_to_long(x):
def _long_to_bin(x, hex_format_string):
def pbkdf2(password, salt, iterations, dklen=0, digest=None):
def memoize(func, cache, num_args):
def lazy(func, *resultclasses):
def allow_lazy(func, *resultclasses):
def partition(predicate, values):
def method_decorator(decorator):
def decorator_from_middleware_with_args(middleware_class):
def decorator_from_middleware(middleware_class):
def available_attrs(fn):
def get_default_timezone():
def get_default_timezone_name():
def get_current_timezone():
def get_current_timezone_name():
def _get_timezone_name(timezone):
def activate(timezone):
def deactivate():
def template_localtime(value, use_tz=None):
def localtime(value, timezone=None):
def now():
def is_aware(value):
def is_naive(value):
def make_aware(value, timezone):
def make_naive(value, timezone):
def is_iterable(x):
def is_iterator(x):
def escape(text):
def escapejs(value):
def conditional_escape(text):
def format_html(format_string, *args, **kwargs):
def format_html_join(sep, format_string, args_generator):
def linebreaks(value, autoescape=False):
def _strip_once(value):
def strip_tags(value):
def remove_tags(html, tags):
def strip_spaces_between_tags(value):
def strip_entities(value):
def fix_ampersands(value):
def smart_urlquote(url):
def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):
def clean_html(text):
def avoid_wrapping(value):
def format(value, format_string):
def time_format(value, format_string):
def urlquote(url, safe=u'/'):
def urlquote_plus(url, safe=u''):
def urlunquote(quoted_url):
def urlunquote_plus(quoted_url):
def urlencode(query, doseq=0):
def cookie_date(epoch_seconds=None):
def http_date(epoch_seconds=None):
def parse_http_date(date):
def parse_http_date_safe(date):
def base36_to_int(s):
def int_to_base36(i):
def urlsafe_base64_encode(s):
def urlsafe_base64_decode(s):
def parse_etags(etag_str):
def quote_etag(etag):
def same_origin(url1, url2):
def is_safe_url(url, host=None):
def patch_cache_control(response, **kwargs):
def get_max_age(response):
def patch_response_headers(response, cache_timeout=None):
def add_never_cache_headers(response):
def patch_vary_headers(response, newheaders):
def has_vary_header(response, header_query):
def _i18n_cache_key_suffix(request, cache_key):
def _generate_cache_key(request, method, headerlist, key_prefix):
def _generate_cache_header_key(key_prefix, request):
def get_cache_key(request, key_prefix=None, method=u'GET', cache=None):
def learn_cache_key(request, response, cache_timeout=None, key_prefix=None, cache=None):
def fullsplit(path, result=None):
def _get_locale_dirs(include_core=True):
def _tx_resource_for_name(name):
def _check_diff(cat_name, base_path):
def update_catalogs(resources=None, languages=None):
def lang_stats(resources=None, languages=None):
def fetch(resources=None, languages=None):
def get_template_dirs():
def make_template_info(filename, root_dirs):
def get_templates(dirs):
def get_python_code(paths):
def search_python_list(python_code, template_names):
def search_python(python_code, template_name):
def colorize(text='', opts=(), **kwargs):
def parse_django_adminopt_node(env, sig, signode):
def fetch_from_url(url, config, data=None, handlers=None):
def fetch_from_url_to_file(url, config, output_file, data=None, handlers=None):
def fetch_stream_from_url(url, config, data=None, handlers=None):
def open_url(url, config, data=None, handlers=None):
def _should_use_proxy(url, no_proxy=None):
def _url_as_string(url):
def main():
def make_ssl_context(key_file=None, cert_file=None, pem_file=None, ca_dir=None, verify_peer=False, url=None, method=SSL.TLSv1_METHOD, key_file_passphrase=None):
def set_peer_verification_for_url_hostname(ssl_context, url, if_verify_enabled=False):
def build_opener(*handlers, **kw):
def get_location(http_info):
def config_settings_loader(request=None):
def login(request, config_loader_path=None, wayf_template='djangosaml2/wayf.html', authorization_error_template='djangosaml2/auth_error.html'):
@require_POST DCNL @csrf_exempt DCNL def assertion_consumer_service(request, config_loader_path=None, attribute_mapping=None, create_unknown_user=None):
@login_required DCNL def echo_attributes(request, config_loader_path=None, template='djangosaml2/echo_attributes.html'):
@login_required DCNL def logout(request, config_loader_path=None):
def do_logout_service(request, data, binding, config_loader_path=None, next_page=None, logout_error_template='djangosaml2/logout_error.html'):
def metadata(request, config_loader_path=None, valid_for=None):
def _check_header_magic_bytes(file_obj):
def _check_footer_magic_bytes(file_obj):
def _get_footer_size(file_obj):
def _read_footer(file_obj):
def _read_page_header(file_obj):
def read_footer(filename):
def _get_name(type_, value):
def _get_offset(cmd):
def dump_metadata(filename, show_row_group_metadata, out=sys.stdout):
def _read_page(file_obj, page_header, column_metadata):
def _read_data(file_obj, fo_encoding, value_count, bit_width):
def read_data_page(file_obj, schema_helper, page_header, column_metadata, dictionary):
def _read_dictionary_page(file_obj, schema_helper, page_header, column_metadata):
def DictReader(file_obj, columns=None):
def reader(file_obj, columns=None):
def _dump(file_obj, options, out=sys.stdout):
def dump(filename, options, out=sys.stdout):
def read_plain_boolean(file_obj, count):
def read_plain_int32(file_obj, count):
def read_plain_int64(file_obj, count):
def read_plain_int96(file_obj, count):
def read_plain_float(file_obj, count):
def read_plain_double(file_obj, count):
def read_plain_byte_array(file_obj, count):
def read_plain_byte_array_fixed(file_obj, fixed_length):
def read_plain(file_obj, type_, count):
def read_unsigned_var_int(file_obj):
def read_rle(file_obj, header, bit_width, debug_logging):
def width_from_max_int(value):
def _mask_for_bits(i):
def read_bitpacked(file_obj, header, width, debug_logging):
def read_bitpacked_deprecated(file_obj, byte_count, count, width, debug_logging):
def read_rle_bit_packed_hybrid(file_obj, width, length=None):
def _convert_unsigned(data, fmt):
def convert_column(data, schemae):
def setup_logging(options=None):
def main(argv=None):
def new(data=None):
def new(data=None):
def new(key, msg=None, digestmod=None):
def new(data=None):
def new(data=None):
def new(data=None):
def new(data=None):
def new(data=None):
def new(data=None):
def new(data=None):
def rsa_construct(n, e, d=None, p=None, q=None, u=None):
def generate_py(bits, randfunc, progress_func=None, e=65537):
def generate(bits, randfunc, progress_func=None):
def construct(tup):
def generate_py(bits, randfunc, progress_func=None):
def run(module=None, verbosity=0, stream=None, tests=None, config=None, **kwargs):
def _sws(s):
def list_test_cases(class_):
def strip_whitespace(s):
def a2b_hex(s):
def b2a_hex(s):
def _extract(d, k, default=_NoDefault):
def rws(t):
def t2b(t):
def rws(t):
def t2b(t):
def rws(t):
def t2b(t):
def rws(t):
def t2b(t):
def PBKDF1(password, salt, dkLen, count=1000, hashAlgo=None):
def PBKDF2(password, salt, dkLen=16, count=1000, prf=None):
def new(*args, **kwargs):
def atfork():
def get_random_bytes(n):
def get_random_bytes(n):
def new(data=None):
def which_pools(r):
def size(N):
def getRandomNumber(N, randfunc=None):
def getRandomInteger(N, randfunc=None):
def getRandomRange(a, b, randfunc=None):
def getRandomNBitInteger(N, randfunc=None):
def GCD(x, y):
def inverse(u, v):
def getPrime(N, randfunc=None):
def _rabinMillerTest(n, rounds, randfunc=None):
def getStrongPrime(N, e=0, false_positive_prob=1e-06, randfunc=None):
def isPrime(N, false_positive_prob=1e-06, randfunc=None):
def long_to_bytes(n, blocksize=0):
def bytes_to_long(s):
def new(nbits, prefix=b(''), suffix=b(''), initial_value=1, overflow=0, little_endian=False, allow_wraparound=False, disable_shortcut=False):
def ceil_shift(n, b):
def ceil_div(a, b):
def exact_log2(num):
def exact_div(p, d, allow_divzero=False):
def _key2bin(s):
def _extract(key, start, length):
def key_to_english(key):
def english_to_key(s):
def new(key, *args, **kwargs):
def new(key):
def new(key, *args, **kwargs):
def new(key, *args, **kwargs):
def new(key, *args, **kwargs):
def _getParameter(name, index, args, kwargs, default=None):
def new(key, *args, **kwargs):
def new(key, *args, **kwargs):
def new(key, *args, **kwargs):
def new(key, hashAlgo=None, mgfunc=None, label=b('')):
def new(key, *args, **kwargs):
def EMSA_PKCS1_V1_5_ENCODE(hash, emLen):
def new(key):
def MGF1(mgfSeed, maskLen, hash):
def EMSA_PSS_ENCODE(mhash, emBits, randFunc, mgf, sLen):
def EMSA_PSS_VERIFY(mhash, em, emBits, mgf, sLen):
def new(key, mgfunc=None, saltLen=None):
def build_authenticate_header(realm=''):
def build_xoauth_string(url, consumer, token=None):
def to_unicode(s):
def to_unicode_optional_iterator(x):
def to_utf8_optional_iterator(x):
def escape(s):
def generate_timestamp():
def generate_nonce(length=8):
def generate_verifier(length=8):
def inet_ntop(address_family, packed_ip):
def inet_pton(address_family, ip_string):
def load(encoded_data, strict=False):
def _basic_debug(prefix, self):
def _fix_tagging(value, params):
def _build_id_tuple(params, spec):
def _build(class_, method, tag, header, contents, trailer, spec=None, spec_params=None, nested_spec=None):
def _parse_build(encoded_data, pointer=0, spec=None, spec_params=None, strict=False):
def detect(byte_string):
def armor(type_name, der_bytes, headers=None):
def _unarmor(pem_bytes):
def unarmor(pem_bytes, multiple=False):
def unwrap(string, *params):
def emit(class_, method, tag, contents):
def parse(contents, strict=False):
def peek(contents):
def _parse(encoded_data, data_len, pointer=0, lengths_only=False):
def _dump_header(class_, method, tag, contents):
def type_name(value):
def fill_width(bytes_, width):
def iri_to_uri(value):
def uri_to_iri(value):
def _iri_utf8_errors_handler(exc):
def _urlquote(string, safe=u''):
def _urlunquote(byte_string, remap=None, preserve=None):
def teletex_search_function(name):
def register():
def memorized_timedelta(seconds):
def memorized_datetime(seconds):
def memorized_ttinfo(*args):
def _to_seconds(td):
def unpickler(zone, utcoffset=None, dstoffset=None, tzname=None):
def open_resource(name):
def resource_exists(name):
def timezone(zone):
def _unmunge_zone(zone):
def _UTC():
def _p(*args):
def FixedOffset(offset, _tzinfos={}):
def _byte_string(s):
def _std_string(s):
def test_suite():
def prettydt(dt):
def dict_to_sequence(d):
def get_netrc_auth(url, raise_errors=False):
def guess_filename(obj):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def unquote_unreserved(uri):
def requote_uri(uri):
def address_in_network(ip, net):
def dotted_netmask(mask):
def is_valid_cidr(string_network):
def should_bypass_proxies(url):
def get_environ_proxies(url):
def select_proxy(url, proxies):
def default_user_agent(name='python-requests'):
def parse_header_links(value):
def prepend_scheme_if_needed(url, new_scheme):
def get_auth_from_url(url):
def to_native_string(string, encoding='ascii'):
def urldefragauth(url):
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):
def merge_cookies(cookiejar, cookies):
def description_of(lines, name=u'stdin'):
def main(argv=None):
def backport_makefile(self, mode='r', buffering=None, encoding=None, errors=None, newline=None):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d):
def itervalues(d):
def iteritems(d):
def with_metaclass(meta, base=object):
def _dnsname_match(dn, hostname, max_wildcards=1):
def match_hostname(cert, hostname):
def add_stderr_logger(level=logging.DEBUG):
def disable_warnings(category=exceptions.HTTPWarning):
def guess_content_type(filename, default='application/octet-stream'):
def format_header_param(name, value):
def choose_boundary():
def iter_field_objects(fields):
def iter_fields(fields):
def encode_multipart_formdata(fields, boundary=None):
def is_fp_closed(obj):
def assert_header_parsing(headers):
def is_response_to_head(response):
def current_time():
def _const_compare_digest_backport(a, b):
def assert_fingerprint(cert, fingerprint):
def resolve_cert_reqs(candidate):
def resolve_ssl_version(candidate):
def create_urllib3_context(ssl_version=None, cert_reqs=None, options=None, ciphers=None):
def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None, ca_certs=None, server_hostname=None, ssl_version=None, ciphers=None, ssl_context=None, ca_cert_dir=None):
def is_connection_dropped(conn):
def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT, source_address=None, socket_options=None):
def split_first(s, delims):
def parse_url(url):
def get_host(url):
def make_headers(keep_alive=None, accept_encoding=None, user_agent=None, basic_auth=None, proxy_basic_auth=None, disable_cache=None):
def connection_from_url(url, **kw):
def inject_into_urllib3():
def extract_from_urllib3():
def _basic_auth_str(username, password):
def dispatch_hook(key, hooks, hook_data, **kwargs):
def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):
def session():
def request(method, url, **kwargs):
def get(url, params=None, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, json=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):
@pytest.mark.parametrize('data', ((('a', 'b'), ('c', 'd')), (('c', 'd'), ('a', 'b')), (('a', 'b'), ('c', 'd'), ('e', 'f')))) DCNL def test_data_argument_accepts_tuples(data):
@pytest.mark.parametrize('uri, DCSP expected', (('http://example.com/fiz?buz=%25ppicture', 'http://example.com/fiz?buz=%25ppicture'), ('http://example.com/fiz?buz=%ppicture', 'http://example.com/fiz?buz=%25ppicture'))) DCNL def test_requote_uri_with_unquoted_percents(uri, expected):
@pytest.mark.parametrize('url, DCSP expected', (('hTTp://u:p@Some.Host/path', 'http://some.host.proxy'), ('hTTp://u:p@Other.Host/path', 'http://http.proxy'), ('hTTps://Other.Host', None), ('file:///etc/motd', None))) DCNL def test_select_proxies(url, expected):
def test_chunked_upload():
def get_version():
def _negotiate_value(response):
def compile(tmpdir, ext, compiler_verbose=0):
def set_tmpdir(dirname):
def cleanup_tmpdir(tmpdir=None, keep_so=False):
def keywords_with_side_effects(argv):
def _truncate_digest_for_dsa(dsa_cdata, digest, backend):
@binding.ffi_callback('int DCSP (char DCSP *, DCSP int, DCSP int, DCSP void DCSP *)', name='Cryptography_pem_password_cb') DCNL def _pem_password_cb(buf, size, writing, userdata_handle):
def _encode_asn1_int(backend, x):
def _encode_asn1_str(backend, data, length):
def _encode_asn1_utf8_str(backend, string):
def _encode_name(backend, attributes):
def _encode_sk_name_entry(backend, attributes):
def _txt2obj(backend, name):
def _encode_ocsp_nocheck(backend, ext):
def _decode_cert_issuer(backend, ext):
def _truncate_digest_for_ecdsa(ec_key_cdata, digest, backend):
def _mark_asn1_named_ec_curve(backend, ec_cdata):
def ffi_callback(signature, name, **kwargs):
def _read_next_string(data):
def _read_next_mpint(data):
def _modinv(e, m):
def rsa_crt_iqmp(p, q):
def rsa_crt_dmp1(private_exponent, p):
def rsa_crt_dmq1(private_exponent, q):
def rsa_recover_prime_factors(n, e, d):
def build_ffi_for_binding(module_name, module_prefix, modules, pre_include='', post_include='', libraries=[], extra_compile_args=[], extra_link_args=[]):
def compiler_type():
def locked(func):
def socket_exception(func):
def fpart(x):
def ipart(x):
def is_leap(year):
def gcal2jd(year, month, day):
def jd2gcal(jd1, jd2):
def jcal2jd(year, month, day):
def jd2jcal(jd1, jd2):
def _test_gcal2jd_with_sla_cldj():
def _test_jd2gcal():
def _test_jd2jcal():
def pass_through(info, inner, *args, **kw):
def test_hide_supppressed():
def test_HTTPMove():
def test_badapp():
def test_unicode():
def test_template():
def test_redapp():
def clear_middleware(app):
def bad_app():
def start_response_app(environ, start_response):
def bad_app():
def start_response_app(environ, start_response):
def _set_cleanup_test(data):
def backwords(environ, realm, username):
def check(username, password, path='/'):
def install(poll_interval=1):
def catch_errors(application, environ, start_response, error_callback, ok_callback=None):
def catch_errors_app(application, environ, start_response, error_callback_app, ok_callback=None, catch=Exception):
def raw_interactive(application, path='', raise_on_wsgi_error=False, **environ):
def interactive(*args, **kw):
def dump_environ(environ, start_response):
def capture_output(environ, start_response, application):
def intercept_output(environ, application, conditional=None, start_response=None):
def make_proxy(global_conf, address, allowed_request_methods='', suppress_http_headers=''):
def parse_headers(message):
def make_transparent_proxy(global_conf, force_host=None, force_scheme='http'):
def make_middleware(app, global_conf=None, warning_level=None):
def has_header(headers, name):
def header_value(headers, name):
def remove_header(headers, name):
def replace_header(headers, name, value):
def error_body_response(error_code, message, __warn=True):
def error_response(environ, error_code, message, debug_message=None, __warn=True):
def error_response_app(error_code, message, debug_message=None, __warn=True):
def make_pony(app, global_conf):
def serve(application, host=None, port=None, handler=None, ssl_pem=None, ssl_context=None, server_version=None, protocol_version=None, start_loop=True, daemon_threads=None, socket_timeout=None, use_threadpool=None, threadpool_workers=10, threadpool_options=None, request_queue_size=5):
def tempnam_no_warning(*args):
def _popget(d, key, default=None):
def _space_prefix(pref, full, sep=None, indent=None, include_sep=True):
def setup_module(module=None):
def html_unquote(v):
def get_header(name, raiseError=True):
def list_headers(general=None, request=None, response=None, entity=None):
def normalize_headers(response_headers, strict=True):
def profile_decorator(**options):
def make_profile_middleware(app, global_conf, log_filename='profile.log.tmp', limit=40):
def run_raw(command):
def clear_dir(dir):
def ls(dir=None, recurse=False, indent=0):
def resource_filename(fn):
def traceback_thread(thread_id):
def make_wdg_validate_middleware(app, global_conf, wdg_path='validate'):
def _space_prefix(pref, full, sep=None, indent=None, include_sep=True):
def report_expected_diffs(diffs, colorize=False):
def color_code(foreground=None, background=None):
def proc_communicate(proc, stdin=None, stdout=None, stderr=None):
def make_cgi_application(global_conf, script, path=None, include_os_environ=None, query_string=None):
def make_session_middleware(app, global_conf, session_type=NoDefault, cookie_name=NoDefault, **store_config):
def make_session_middleware(app, global_conf, session_expiration=NoDefault, expiration=NoDefault, cookie_name=NoDefault, session_file_path=NoDefault, chmod=NoDefault):
def handle_exception(exc_info, error_stream, html=True, debug_mode=False, error_email=None, error_log=None, show_exceptions_in_wsgi_errors=False, error_email_from='errors@localhost', smtp_server='localhost', smtp_username=None, smtp_password=None, smtp_use_tls=False, error_subject_prefix='', error_message=None, simple_html_error=False):
def make_identifier(number):
def hash_identifier(s, length, pad=True, hasher=md5, prefix='', group=None, upper=False):
def str2html(src, strip=False, indent_subsequent=0, highlight_inner=False):
def truncate(string, limit=1000):
def make_pre_wrappable(html, wrap_limit=60, split_on=';?&@!$#-/\\"\''):
def collect_exception(t, v, tb, limit=None):
def BasicTransactionHandler(application, factory):
def html_quote(v):
def preserve_whitespace(v, quote=True):
def simplecatcher(application):
def wsgiapp():
def get_debug_info(func):
def get_debug_count(environ):
def make_eval_exception(app, global_conf, xmlhttp_key=None):
def middleware(application, global_conf=None):
def forward(app, codes):
def make_errordocument(app, global_conf, **kw):
def custom_forward(app, mapper, global_conf=None, **kw):
def make_gzip_middleware(app, global_conf, compress_level=6):
def parse_path_expression(path):
def parse_timedelta(val):
def normalize_timedelta(val):
def interval_encode(seconds, include_sign=False):
def interval_decode(s):
def allMatches(source, regex):
def eval_import(s):
def simple_import(s):
def import_module(s):
def try_import_module(module_name):
def lex(s, name=None, trim_whitespace=True):
def trim_lex(tokens):
def find_position(string, index):
def parse(s, name=None):
def cli():
def _test(show=0, quiet=0):
def str2stdout(sourcestring, colors=None, title='', markup='html', header=None, footer=None, linenumbers=0, form=None):
def path2stdout(sourcepath, title='', colors=None, markup='html', header=None, footer=None, linenumbers=0, form=None):
def str2html(sourcestring, colors=None, title='', markup='html', header=None, footer=None, linenumbers=0, form=None):
def str2css(sourcestring, colors=None, title='', markup='css', header=None, footer=None, linenumbers=0, form=None):
def str2markup(sourcestring, colors=None, title='', markup='xhtml', header=None, footer=None, linenumbers=0, form=None):
def str2file(sourcestring, outfile, colors=None, title='', markup='html', header=None, footer=None, linenumbers=0, show=0, dosheet=1, form=None):
def path2html(sourcepath, colors=None, markup='html', header=None, footer=None, linenumbers=0, form=None):
def convert(source, outdir=None, colors=None, show=0, markup='html', quiet=0, header=None, footer=None, linenumbers=0, form=None):
def path2file(sourcePath, out=None, colors=None, show=0, markup='html', quiet=0, form=None, header=None, footer=None, linenumbers=0, count=1):
def tagreplace(sourcestr, colors=lite, markup='xhtml', linenumbers=0, dosheet=1, tagstart='<PY>'.lower(), tagend='</PY>'.lower(), stylesheet='pystyle.css'):
def pageconvert(path, out=None, colors=lite, markup='xhtml', linenumbers=0, dosheet=1, tagstart='<PY>'.lower(), tagend='</PY>'.lower(), stylesheet='pystyle', show=1, returnstr=0):
def walkdir(dir):
def showpage(path):
def _printinfo(message, quiet):
def escape(text):
def unescape(text):
def find_package(dir):
def parse_mime_type(mime_type):
def parse_media_range(range):
def fitness_and_quality_parsed(mime_type, parsed_ranges):
def quality_parsed(mime_type, parsed_ranges):
def quality(mime_type, ranges):
def best_match(supported, header):
def desired_matches(desired, header):
def async_raise(tid, exctype):
def serve_application(application, prefix, port=None, host=None, max_children=None):
def html_quote(v, encoding=None):
def html_unquote(s, encoding=None):
def no_quote(s):
def comment_quote(s):
def build_properties(cls, new_attrs):
def find_package_data(where='.', package='', exclude=standard_exclude, exclude_directories=standard_exclude_directories, only_in_packages=True, show_ignored=False):
def make_form(app, global_conf, realm, authfunc, **kw):
def parse_ticket(secret, ticket, ip, digest_algo=DEFAULT_DIGEST):
def make_auth_tkt_middleware(app, global_conf, secret=None, cookie_name='auth_tkt', secure=False, include_ip=True, logout_path=None):
def new_secret():
def make_auth_cookie(app, global_conf, cookie_name='PASTE_AUTH_COOKIE', scanlist=('REMOTE_USER', 'REMOTE_SESSION'), secret=None, timeout=30, maxlen=4096):
def make_grantip(app, global_conf, clobber_username=False, **kw):
def _split_auth_string(auth_string):
def _auth_to_kv_pairs(auth_string):
def digest_password(realm, username, password):
def make_digest(app, global_conf, realm, authfunc, **kw):
def make_basic(app, global_conf, realm, authfunc, **kw):
def AuthCASHandler(application, authority):
def make_cgitb_middleware(app, global_conf, display=NoDefault, logdir=None, context=5, format='html'):
def make_static(global_conf, document_root, cache_max_age=None):
def make_pkg_resources(global_conf, egg, resource_name=''):
def make_url_parser(global_conf, directory, base_python_name, index_names=None, hide_extensions=None, ignore_extensions=None, **constructor_conf):
def get_cookies(environ):
def get_cookie_dict(environ):
def parse_querystring(environ):
def parse_dict_querystring(environ):
def parse_formvars(environ, include_get_vars=True):
def construct_url(environ, with_query_string=True, with_path_info=True, script_name=None, path_info=None, querystring=None):
def resolve_relative_url(url, environ):
def path_info_split(path_info):
def path_info_pop(environ):
def parse_headers(environ):
def _cgi_FieldStorage__repr__patch(self):
def make_cascade(loader, global_conf, catch='404', **local_conf):
def tzname_in_python2(myfunc):
def easter(year, method=EASTER_WESTERN):
def parse(timestr, parserinfo=None, **kwargs):
def _parsems(value):
def picknthweekday(year, month, dayofweek, hour, minute, whichweek):
def valuestodict(key):
def rebuild(filename, tag=None, format='gz', zonegroups=[]):
def authenticate(username, password, service='login'):
def t_newline(t):
def t_ignore_SILLYCOMM(t):
def t_ignore_MULTICOMM(t):
def t_ignore_DOCTEXT(t):
def t_BOOLCONSTANT(t):
def t_DUBCONSTANT(t):
def t_HEXCONSTANT(t):
def t_INTCONSTANT(t):
def t_LITERAL(t):
def t_IDENTIFIER(t):
def load(path, module_name=None, include_dirs=None, include_dir=None):
def load_fp(source, module_name):
def load_module(fullname):
def p_include(p):
def p_namespace_scope(p):
def p_const(p):
def p_const_value(p):
def p_const_list(p):
def p_const_list_seq(p):
def p_const_map(p):
def p_const_map_seq(p):
def p_const_map_item(p):
def p_const_ref(p):
def p_typedef(p):
def p_enum(p):
def p_enum_seq(p):
def p_enum_item(p):
def p_struct(p):
def p_seen_struct(p):
def p_union(p):
def p_seen_union(p):
def p_exception(p):
def p_service(p):
def p_function(p):
def p_function_seq(p):
def p_throws(p):
def p_function_type(p):
def p_field_seq(p):
def p_field(p):
def p_field_id(p):
def p_field_req(p):
def p_field_type(p):
def p_ref_type(p):
def p_base_type(p):
def p_container_type(p):
def p_map_type(p):
def p_list_type(p):
def p_set_type(p):
def p_definition_type(p):
def parse(path, module_name=None, include_dirs=None, include_dir=None, lexer=None, parser=None, enable_cache=True):
def parse_fp(source, module_name, lexer=None, parser=None, enable_cache=True):
def with_metaclass(meta, *bases):
def init_func_generator(cls, spec):
def create_thriftpy_context(server_side=False, ciphers=None):
def read_random_bits(nbits):
def read_random_int(nbits):
def read_random_odd_int(nbits):
def randint(maxvalue):
def gcd(p, q):
def bytes2int(bytes):
def int2bytes(number):
def fast_exponentiation(a, p, n):
def read_random_int(nbits):
def ceil(x):
def randint(minvalue, maxvalue):
def fermat_little_theorem(p):
def jacobi(a, b):
def jacobi_witness(x, n):
def randomized_primality_testing(n, k):
def is_prime(number):
def getprime(nbits):
def are_relatively_prime(a, b):
def find_p_q(nbits):
def extended_euclid_gcd(a, b):
def calculate_keys(p, q, nbits):
def gen_keys(nbits):
def gen_pubpriv_keys(nbits):
def encrypt_int(message, ekey, n):
def decrypt_int(cyphertext, dkey, n):
def sign_int(message, dkey, n):
def verify_int(signed, ekey, n):
def picklechops(chops):
def unpicklechops(string):
def chopstring(message, key, n, funcref):
def gluechops(chops, key, n, funcref):
def encrypt(message, key):
def sign(message, key):
def decrypt(cypher, key):
def verify(cypher, key):
def bit_size(number):
def gcd(p, q):
def bytes2int(bytes):
def int2bytes(number):
def to64(number):
def from64(number):
def int2str64(number):
def str642int(string):
def read_random_int(nbits):
def randint(minvalue, maxvalue):
def jacobi(a, b):
def jacobi_witness(x, n):
def randomized_primality_testing(n, k):
def is_prime(number):
def getprime(nbits):
def are_relatively_prime(a, b):
def find_p_q(nbits):
def extended_gcd(a, b):
def calculate_keys(p, q, nbits):
def gen_keys(nbits):
def newkeys(nbits):
def encrypt_int(message, ekey, n):
def decrypt_int(cyphertext, dkey, n):
def encode64chops(chops):
def decode64chops(string):
def chopstring(message, key, n, funcref):
def gluechops(string, key, n, funcref):
def encrypt(message, key):
def sign(message, key):
def decrypt(cypher, key):
def verify(cypher, key):
def encrypt_int(message, ekey, n):
def decrypt_int(cyphertext, dkey, n):
def gcd(p, q):
def miller_rabin_primality_testing(n, k):
def is_prime(number):
def getprime(nbits):
def are_relatively_prime(a, b):
def _markers(pem_marker):
def load_pem(contents, pem_marker):
def save_pem(contents, pem_marker):
def private_to_public():
def bit_size(num):
def _bit_size(number):
def byte_size(number):
def extended_gcd(a, b):
def inverse(x, n):
def crt(a_values, modulo_values):
def is_bytes(obj):
def is_integer(obj):
def byte(num):
def get_word_alignment(num, force_arch=64, _machine_word_size=MACHINE_WORD_SIZE):
def _pad_for_encryption(message, target_length):
def _pad_for_signing(message, target_length):
def encrypt(message, pub_key):
def decrypt(crypto, priv_key):
def sign(message, priv_key, hash):
def verify(message, signature, pub_key):
def _hash(message, method_name):
def _find_method_hash(clearsig):
def find_p_q(nbits, getprime_func=rsa.prime.getprime, accurate=True):
def calculate_keys_custom_exponent(p, q, exponent):
def calculate_keys(p, q):
def gen_keys(nbits, getprime_func, accurate=True, exponent=DEFAULT_EXPONENT):
def newkeys(nbits, accurate=True, poolsize=1, exponent=DEFAULT_EXPONENT):
def getprime(nbits, poolsize):
def encrypt_bigfile(infile, outfile, pub_key):
def decrypt_bigfile(infile, outfile, priv_key):
def bytes2int(raw_bytes):
def _int2bytes(number, block_size=None):
def bytes_leading(raw_bytes, needle=ZERO_BYTE):
def int2bytes(number, fill_size=None, chunk_size=None, overflow=False):
def keygen():
def read_varint(infile):
def write_varint(outfile, value):
def yield_varblocks(infile):
def yield_fixedblocks(infile, blocksize):
def make_digest_acl_credential(username, password):
def make_acl(scheme, credential, read=False, write=False, create=False, delete=False, admin=False, all=False):
def make_digest_acl(username, password, read=False, write=False, create=False, delete=False, admin=False, all=False):
def collect_hosts(hosts, randomize=True):
def create_pipe():
def create_tcp_socket(module):
def capture_exceptions(async_result):
def wrap(async_result):
def read_string(buffer, offset):
def normpath(path, trailing=False):
def join(a, *p):
def isabs(s):
def basename(p):
def _prefix_root(root, path, trailing=False):
def export_set(dataset):
def export_book(databook):
def import_set(dset, in_stream):
def import_book(dbook, in_stream):
def detect(stream):
def export_set(dataset):
def import_set(dset, in_stream, headers=True):
def detect(stream):
def export_set(dataset):
def export_book(databook):
def dset_sheet(dataset, ws):
def export_set(dataset):
def import_set(dset, in_stream, headers=True):
def detect(stream):
def export_set(dataset):
def export_book(databook):
def import_set(dset, in_stream):
def import_book(dbook, in_stream):
def detect(stream):
def export_set(dataset):
def export_book(databook):
def detect(stream):
def import_set(stream):
def import_book(stream):
def _argsdicts(args, mydict):
def _totuple(x):
def escape(text, newline=False):
def unescape(text):
def cnv_color(attribute, arg, element):
def cnv_date(attribute, arg, element):
def cnv_dateTime(attribute, arg, element):
def cnv_family(attribute, arg, element):
def cnv_formula(attribute, arg, element):
def cnv_length(attribute, arg, element):
def cnv_NCName(attribute, arg, element):
def OpenDocumentChart():
def OpenDocumentDrawing():
def OpenDocumentImage():
def OpenDocumentPresentation():
def OpenDocumentSpreadsheet():
def OpenDocumentText():
def OpenDocumentTextMaster():
def load(odffile):
def _escape(data, entities={}):
def _quoteattr(data, entities={}):
def _nssplit(qualifiedName):
def extractText(odfElement):
def unpack_SST_table(datatab, nstrings):
def num2strg(num):
def cellname(rowx, colx):
def cellnameabs(rowx, colx):
def colname(colx):
def rangename2d(rlo, rhi, clo, chi):
def rangename3d(book, ref3d):
def unpack_unicode(data, pos, lenlen=2):
def unpack_unicode_update_pos(data, pos, lenlen=2, known_len=None):
def scan(stream, Loader=Loader):
def parse(stream, Loader=Loader):
def compose(stream, Loader=Loader):
def compose_all(stream, Loader=Loader):
def load(stream, Loader=Loader):
def load_all(stream, Loader=Loader):
def safe_load(stream):
def safe_load_all(stream):
def emit(events, stream=None, Dumper=Dumper, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None):
def serialize_all(nodes, stream=None, Dumper=Dumper, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None, encoding='utf-8', explicit_start=None, explicit_end=None, version=None, tags=None):
def serialize(node, stream=None, Dumper=Dumper, **kwds):
def dump_all(documents, stream=None, Dumper=Dumper, default_style=None, default_flow_style=None, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None, encoding='utf-8', explicit_start=None, explicit_end=None, version=None, tags=None):
def dump(data, stream=None, Dumper=Dumper, **kwds):
def safe_dump_all(documents, stream=None, **kwds):
def safe_dump(data, stream=None, **kwds):
def add_implicit_resolver(tag, regexp, first=None, Loader=Loader, Dumper=Dumper):
def add_path_resolver(tag, path, kind=None, Loader=Loader, Dumper=Dumper):
def add_constructor(tag, constructor, Loader=Loader):
def add_multi_constructor(tag_prefix, multi_constructor, Loader=Loader):
def add_representer(data_type, representer, Dumper=Dumper):
def add_multi_representer(data_type, multi_representer, Dumper=Dumper):
def _argsdicts(args, mydict):
def _totuple(x):
def escape(text, newline=False):
def unescape(text):
def loads(s, **kwargs):
def dumps(o, **kwargs):
def coordinate_from_string(coord_string):
def absolute_coordinate(coord_string):
def column_index_from_string(column, fast=False):
def get_column_letter(col_idx):
def hash_password(plaintext_password=''):
def short_color(color):
def get_document_content(xml_node):
def pretty_indent(elem, level=0):
def start_tag(doc, name, attr=None, body=None, namespace=None):
def end_tag(doc, name, namespace=None):
def tag(doc, name, attr=None, body=None, namespace=None):
def datetime_to_W3CDTF(dt):
def W3CDTF_to_datetime(formatted_string):
def split_named_range(range_string):
def save_workbook(workbook, filename):
def save_virtual_workbook(workbook):
def write_properties_core(properties):
def write_content_types(workbook):
def write_properties_app(workbook):
def write_root_rels(workbook):
def write_workbook(workbook):
def write_workbook_rels(workbook):
def create_string_table(workbook):
def write_string_table(string_table):
def row_sort(cell):
def write_worksheet(worksheet, string_table, style_table):
def write_worksheet_cols(doc, worksheet):
def write_worksheet_data(doc, worksheet, string_table, style_table):
def write_worksheet_hyperlinks(doc, worksheet):
def write_worksheet_rels(worksheet, idx):
def write_theme():
def load_workbook(filename, use_iterators=False):
def read_properties_core(xml_source):
def get_number_of_parts(xml_source):
def read_sheets_titles(xml_source):
def read_named_ranges(xml_source, workbook):
def read_string_table(xml_source):
def get_string(xmlns, string_index_node):
def get_text(xmlns, rich_node):
def read_worksheet(xml_source, parent, preset_title, string_table, style_table, workbook_name=None, sheet_codename=None):
def read_style_table(xml_source):
def parse_custom_num_formats(root, xmlns):
def cnv_color(attribute, arg, element):
def cnv_date(attribute, arg, element):
def cnv_dateTime(attribute, arg, element):
def cnv_family(attribute, arg, element):
def cnv_formula(attribute, arg, element):
def cnv_length(attribute, arg, element):
def cnv_NCName(attribute, arg, element):
def OpenDocumentChart():
def OpenDocumentDrawing():
def OpenDocumentImage():
def OpenDocumentPresentation():
def OpenDocumentSpreadsheet():
def OpenDocumentText():
def OpenDocumentTextMaster():
def load(odffile):
def _escape(data, entities={}):
def _quoteattr(data, entities={}):
def _nssplit(qualifiedName):
def extractText(odfElement):
def coordinate_from_string(coord_string):
def absolute_coordinate(coord_string):
def column_index_from_string(column, fast=False):
def get_column_letter(col_idx):
def hash_password(plaintext_password=''):
def short_color(color):
def get_document_content(xml_node):
def pretty_indent(elem, level=0):
def start_tag(doc, name, attr=None, body=None, namespace=None):
def end_tag(doc, name, namespace=None):
def tag(doc, name, attr=None, body=None, namespace=None):
def datetime_to_W3CDTF(dt):
def W3CDTF_to_datetime(formatted_string):
def split_named_range(range_string):
def save_workbook(workbook, filename):
def save_virtual_workbook(workbook):
def write_properties_core(properties):
def write_content_types(workbook):
def write_properties_app(workbook):
def write_root_rels(workbook):
def write_workbook(workbook):
def write_workbook_rels(workbook):
def create_string_table(workbook):
def write_string_table(string_table):
def row_sort(cell):
def write_worksheet(worksheet, string_table, style_table):
def write_worksheet_cols(doc, worksheet):
def write_worksheet_data(doc, worksheet, string_table, style_table):
def write_worksheet_hyperlinks(doc, worksheet):
def write_worksheet_rels(worksheet, idx):
def write_theme():
def load_workbook(filename, use_iterators=False):
def read_properties_core(xml_source):
def get_number_of_parts(xml_source):
def read_sheets_titles(xml_source):
def read_named_ranges(xml_source, workbook):
def read_string_table(xml_source):
def get_string(xmlns, string_index_node):
def get_text(xmlns, rich_node):
def read_worksheet(xml_source, parent, preset_title, string_table, style_table, workbook_name=None, sheet_codename=None):
def read_style_table(xml_source):
def parse_custom_num_formats(root, xmlns):
def scan(stream, Loader=Loader):
def parse(stream, Loader=Loader):
def compose(stream, Loader=Loader):
def compose_all(stream, Loader=Loader):
def load(stream, Loader=Loader):
def load_all(stream, Loader=Loader):
def safe_load(stream):
def safe_load_all(stream):
def emit(events, stream=None, Dumper=Dumper, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None):
def serialize_all(nodes, stream=None, Dumper=Dumper, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None, encoding='utf-8', explicit_start=None, explicit_end=None, version=None, tags=None):
def serialize(node, stream=None, Dumper=Dumper, **kwds):
def dump_all(documents, stream=None, Dumper=Dumper, default_style=None, default_flow_style=None, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None, encoding='utf-8', explicit_start=None, explicit_end=None, version=None, tags=None):
def dump(data, stream=None, Dumper=Dumper, **kwds):
def safe_dump_all(documents, stream=None, **kwds):
def safe_dump(data, stream=None, **kwds):
def add_implicit_resolver(tag, regexp, first=None, Loader=Loader, Dumper=Dumper):
def add_path_resolver(tag, path, kind=None, Loader=Loader, Dumper=Dumper):
def add_constructor(tag, constructor, Loader=Loader):
def add_multi_constructor(tag_prefix, multi_constructor, Loader=Loader):
def add_representer(data_type, representer, Dumper=Dumper):
def add_multi_representer(data_type, multi_representer, Dumper=Dumper):
def extract_django(fileobj, keywords, comment_tags, options):
def get_current_locale():
def cert_time_to_seconds(cert_time):
def DER_cert_to_PEM_cert(der_cert_bytes):
def PEM_cert_to_DER_cert(pem_cert_string):
def get_server_certificate(addr, ssl_version=PROTOCOL_SSLv3, ca_certs=None):
def sslwrap_simple(sock, keyfile=None, certfile=None):
def find_file(filename, std_dirs, paths):
def process_tests(suite, process):
def is_subclass_at_all(cls, class_info):
def uses_mysql(connection):
def _get_options():
def _foreign_key_ignoring_handle(self, *fixture_labels, **options):
def _skip_create_test_db(self, verbosity=1, autoclobber=False, serialize=True):
def _reusing_db():
def _can_support_reuse_db(connection):
def _should_create_database(connection):
def _mysql_reset_sequences(style, connection):
def tables_used_by_fixtures(fixture_labels, using=DEFAULT_DB_ALIAS):
def assert_code(response, status_code, msg_prefix=''):
def assert_ok(response, msg_prefix=''):
def assert_mail_count(count, msg=None):
def xpath_tokenizer(p):
def encode_basestring(s):
def py_encode_basestring_ascii(s):
def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, **kw):
def dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, **kw):
def load(fp, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, **kw):
def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, **kw):
def py_scanstring(s, end, encoding=None, strict=True, _b=BACKSLASH, _m=STRINGCHUNK.match):
def use_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir, min_version=None, download_delay=15):
def download_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir, delay=15):
def main(argv, version=DEFAULT_VERSION):
def update_md5(filenames):
def list_migrations(apps, database=DEFAULT_DB_ALIAS, **options):
def show_migration_changes(apps):
def delete_column_constraints(func):
def copy_column_constraints(func):
def invalidate_table_constraints(func):
def alias(attrname):
def all_migrations(applications=None):
def application_to_app_label(application):
def get_app_label(app):
def app_label_to_app_module(app_label):
def forwards_problems(pending, done, verbosity):
def inner_problem_check(problems, done, verbosity):
def check_migration_histories(histories, delete_ghosts=False, ignore_ghosts=False):
def get_sentinel_object():
def add_introspection_rules(rules=[], patterns=[]):
def add_ignored_fields(patterns):
def can_ignore(field):
def can_introspect(field):
def matching_details(field):
def get_value(field, descriptor):
def value_clean(value, options={}):
def introspector(field):
def get_model_fields(model, m2m=False):
def get_model_meta(model):
def freeze_apps(apps):
def model_key(model):
def prep_for_freeze(model):
def model_dependencies(model, checked_models=None):
def remove_useless_attributes(field, db=False, indexes=False):
def remove_useless_meta(meta):
def FakeORM(*args):
def get_logger():
def close_logger():
def init_logger():
def _ask_for_it_by_name(name):
def ask_for_it_by_name(name):
def get_attribute(item, attribute):
def auto_through(field):
def auto_model(model):
def memoize(function):
def with_metaclass(meta, base=object):
def _add_doc(func, doc):
def flatten_errors(cfg, res, levels=None, results=None):
def dottedQuadToNum(ip):
def numToDottedQuad(num):
def _is_num_param(names, values, to_float=False):
def is_integer(value, min=None, max=None):
def is_float(value, min=None, max=None):
def is_boolean(value):
def is_ip_addr(value):
def is_list(value, min=None, max=None):
def is_tuple(value, min=None, max=None):
def is_string(value, min=None, max=None):
def is_int_list(value, min=None, max=None):
def is_bool_list(value, min=None, max=None):
def is_float_list(value, min=None, max=None):
def is_string_list(value, min=None, max=None):
def is_ip_addr_list(value, min=None, max=None):
def force_list(value, min=None, max=None):
def is_mixed_list(value, *args):
def is_option(value, *options):
def _test(value, *args, **keywargs):
def main():
def main():
def createKeyPair(type, bits):
def createCertRequest(pkey, digest='md5', **name):
def createCertificate(req, (issuerCert, issuerKey), serial, (notBefore, notAfter), digest='md5'):
def text(charp):
def exception_from_error_queue(exception_type):
def native(s):
def path_string(s):
def text_to_bytes_and_warn(label, obj):
def bytes(num_bytes):
def add(buffer, entropy):
def seed(buffer):
def status():
def egd(path, bytes=_unspecified):
def cleanup():
def load_file(filename, maxbytes=_unspecified):
def write_file(filename):
def screen():
def _untested_error(where):
def _new_mem_buf(buffer=None):
def _bio_to_string(bio):
def _set_asn1_time(boundary, when):
def _get_asn1_time(timestamp):
def get_elliptic_curves():
def get_elliptic_curve(name):
def load_certificate(type, buffer):
def dump_certificate(type, cert):
def dump_privatekey(type, pkey, cipher=None, passphrase=None):
def load_privatekey(type, buffer, passphrase=None):
def dump_certificate_request(type, req):
def load_certificate_request(type, buffer):
def sign(pkey, data, digest):
def verify(cert, signature, data, digest):
def load_crl(type, buffer):
def load_pkcs7_data(type, buffer):
def load_pkcs12(buffer, passphrase=None):
def cmdLineQuote(s):
def quoteArguments(arguments):
def _runopenssl(pem, *args):
def join_bytes_or_unicode(prefix, suffix):
def socket_pair():
def _create_certificate_chain():
def _make_memoryview(size):
def SSLeay_version(type):
def _requires_npn(func):
def _requires_alpn(func):
def my_request_classifier(environ):
def construct_came_from(environ):
def _since_epoch(cdate):
def create_artifact(entity_id, message_handle, endpoint_index=0):
def valid_email(emailaddress, domains=GENERIC_DOMAINS):
def decode_base64_and_inflate(string):
def deflate_and_base64_encode(string_val):
def rndstr(size=16, alphabet=''):
def sid():
def parse_attribute_map(filenames):
def do_attribute_statement(identity):
def signature(secret, parts):
def verify_signature(secret, parts):
def fticks_log(sp, logf, idp_entity_id, user_id, secret, assertion):
def dynamic_importer(name, class_name=None):
def load_maps(dirspec):
def ac_factory(path=''):
def to_local(acs, statement, allow_unknown_attributes=False):
def list_to_local(acs, attrlist, allow_unknown_attributes=False):
def from_local_name(acs, attr, name_format):
def to_local_name(acs, attr):
def d_to_local_name(acs, attr):
def for_me(conditions, myself):
def create_class_from_xml_string(target_class, xml_string):
def create_class_from_element_tree(target_class, tree, namespace=None, tag=None):
def make_vals(val, klass, klass_inst=None, prop=None, part=False, base64encode=False):
def make_instance(klass, spec, base64encode=False):
def element_to_extension_element(element):
def extension_element_to_element(extension_element, translation_functions, namespace=None):
def extension_elements_to_elements(extension_elements, schemas):
def create_return_url(base, query, **kwargs):
def _eval(val, onts, mdb_safe):
def to_dict(_dict, onts, mdb_safe=False):
def _kwa(val, onts, mdb_safe=False):
def from_dict(val, onts, mdb_safe=False):
def parse_soap_enveloped_saml_thingy(text, expected_tags):
def class_instances_from_soap_enveloped_saml_thingies(text, modules):
def open_soap_envelope(text):
def make_soap_enveloped_saml_thingy(thingy, headers=None):
def soap_fault(message=None, actor=None, code=None, detail=None):
def code(item):
def decode(txt):
def get_xmlsec_binary(paths=None):
def _get_xmlsec_cryptobackend(path=None, search_paths=None, debug=False):
def _make_vals(val, klass, seccont, klass_inst=None, prop=None, part=False, base64encode=False, elements_to_sign=None):
def signed_instance_factory(instance, seccont, elements_to_sign=None):
def make_temp(string, suffix='', decode=True, delete=True):
def active_cert(key):
def cert_from_key_info(key_info, ignore_age=False):
def cert_from_key_info_dict(key_info, ignore_age=False):
def cert_from_instance(instance):
def parse_xmlsec_output(output):
def verify_redirect_signature(saml_msg, cert=None, sigkey=None):
def read_cert_from_file(cert_file, cert_type):
def security_context(conf, debug=None):
def pre_signature_part(ident, public_key=None, identifier=None, digest_alg=None, sign_alg=None):
def pre_encryption_part(msg_enc=TRIPLE_DES_CBC, key_enc=RSA_1_5, key_name='my-rsa-key'):
def pre_encrypt_assertion(response):
def _localized_name(val, klass):
def do_organization_info(ava):
def do_contact_person_info(lava):
def do_pdp_descriptor(conf, cert):
def sign_entity_descriptor(edesc, ident, secc):
def _filter_values(vals, vlist=None, must=False):
def filter_on_attributes(ava, required=None, optional=None, acs=None, fail_on_unfulfilled_requirements=True):
def filter_on_demands(ava, required=None, optional=None):
def filter_on_wire_representation(ava, acs, required=None, optional=None):
def filter_attribute_value_assertions(ava, attribute_restrictions=None):
def _authn_context_class_ref(authn_class, authn_auth=None):
def _authn_context_decl(decl, authn_auth=None):
def _authn_context_decl_ref(decl_ref, authn_auth=None):
def authn_statement(authn_class=None, authn_auth=None, authn_decl=None, authn_decl_ref=None, authn_instant='', subject_locality=''):
def ecp_auth_request(cls, entityid=None, relay_state='', sign=False):
def valid_any_uri(item):
def valid_ipv6(address):
def valid_string(val):
def valid_qname(val):
def valid_anytype(val):
def validate_value_type(value, spec):
def http_form_post_message(message, location, relay_state='', typ='SAMLRequest'):
def http_redirect_message(message, location, relay_state='', typ='SAMLRequest', sigalg=None, key=None):
def make_soap_enveloped_saml_thingy(thingy, header_parts=None):
def parse_soap_enveloped_saml(text, body_class, header_class=None):
def _mdb_get_database(uri, **kwargs):
def time_in_a_while(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0):
def time_a_while_ago(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0):
def in_a_while(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0, format=TIME_FORMAT):
def shift_time(dtime, shift):
def str_to_time(timestr, format=TIME_FORMAT):
def before(point):
def after(point):
def later_than(after, before):
def extract(environ, empty=False, err=False):
def geturl(environ, query=True, path=True, use_server_name=False):
def getpath(environ):
def cookie_signature(seed, *parts):
def make_cookie(name, load, seed, expire=0, domain='', path='', timestamp=''):
def parse_cookie(name, seed, kaka):
def not_found(environ, start_response):
def application(environ, start_response):
def handle_static(environ, start_response, path):
def not_found(environ, start_response):
def application(environ, start_response):
def _expiration(timeout, tformat='%a, DCSP %d-%b-%Y DCSP %H:%M:%S DCSP GMT'):
def do_authentication(environ, start_response, authn_context, key, redirect_uri):
def username_password_authn(environ, start_response, reference, key, redirect_uri):
def not_found(environ, start_response):
def application(environ, start_response):
def _expiration(timeout, tformat='%a, DCSP %d-%b-%Y DCSP %H:%M:%S DCSP GMT'):
def do_authentication(environ, start_response, authn_context, key, redirect_uri, headers=None):
def username_password_authn(environ, start_response, reference, key, redirect_uri, headers=None):
def not_found(environ, start_response):
def application(environ, start_response):
def _expiration(timeout, tformat='%a, DCSP %d-%b-%Y DCSP %H:%M:%S DCSP GMT'):
def do_authentication(environ, start_response, authn_context, key, redirect_uri):
def username_password_authn(environ, start_response, reference, key, redirect_uri):
def not_found(environ, start_response):
def application(environ, start_response):
def _escape_argspec(obj, iterable):
def escape(s):
def soft_unicode(s):
def setup_enum_value_fixtures(testcase):
def suite():
def __main__(argv=None):
def _comparator(func):
def _resolve_name(name, package, level):
def import_module(name, package=None):
def create_user(is_staff=False, authenticated=True):
def supportsTeams(endpoint):
def getTeamsNS(message):
def teams_new_unicode(self):
def sanitise_redirect_url(redirect_to):
def make_consumer(request):
def render_openid_request(request, openid_request, return_to, trust_root=None):
def default_render_failure(request, message, status=403, template_name='openid/failure.html', exception=None):
def parse_openid_response(request):
def login_begin(request, template_name='openid/login.html', login_complete_view='openid-complete', form_class=OpenIDLoginForm, render_failure=default_render_failure, redirect_field_name=REDIRECT_FIELD_NAME):
def seqToKV(seq, strict=False):
def kvToSeq(data, strict=False):
def _removeIfPresent(filename):
def _ensureDir(dir_name):
def split(nonce_string):
def checkTimestamp(nonce_string, allowed_skew=SKEW, now=None):
def mkNonce(when=None):
def getSessionTypes(assoc_type):
def checkSessionType(assoc_type, session_type):
def randomString(length, chrs=None):
def findOPLocalIdentifier(service_element, type_uris):
def normalizeURL(url):
def normalizeXRI(xri):
def arrangeByType(service_list, preferred_types):
def getOPOrUserServices(openid_services):
def discoverYadis(uri):
def replaceEnt(mo):
def parseLinkAttrs(html):
def relMatches(rel_attr, target_rel):
def linkHasRel(link_attrs, target_rel):
def findLinksRel(link_attrs_list, target_rel):
def findFirstHref(link_attrs_list, target_rel):
def makeKVPost(request_message, server_url):
def _httpResponseToMessage(response, server_url):
def testStore(store):
def test_postgresql():
def const(result):
def mkAssocResponse(*keys):
def mkExtractAssocMissingTest(keys):
def pyUnitTests():
def simpleOpenIDTransformer(endpoint):
def mkSuccess(endpoint, q):
def associate(qs, assoc_secret, assoc_handle):
def makeFastConsumerSession():
def subsets(l):
def getTestData():
def chunk(lines):
def parseLines(chunk):
def parseAvailable(available_text):
def parseExpected(expected_text):
def checkFieldName(field_name):
def supportsSReg(endpoint):
def getSRegNS(message):
def checkAlias(alias):
def toTypeURIs(namespace_map, alias_list_s):
def identifierScheme(identifier):
def toIRINormal(xri):
def _escape_xref(xref_match):
def escapeForIRI(xri):
def toURINormal(xri):
def iriToURI(iri):
def providerIsAuthoritative(providerID, canonicalID):
def rootAuthority(xri):
def XRI(xri):
def discover(uri):
def whereIsYadis(resp):
def parseXRDS(text):
def mkXRDTag(t):
def mkXRDSTag(t):
def isXRDS(xrd_tree):
def getYadisXRD(xrd_tree):
def getXRDExpiration(xrd_element, default=None):
def getCanonicalID(iname, xrd_tree):
def getPriorityStrict(element):
def getPriority(element):
def prioSort(elements):
def iterServices(xrd_tree):
def sortedURIs(service_element):
def getTypeURIs(service_element):
def expandService(service_element):
def expandServices(service_elements):
def _appendArgs(url, args):
def generateAcceptHeader(*elements):
def parseAcceptHeader(value):
def matchTypes(accept_types, have_types):
def getAcceptable(accept_header, have_types):
def findHTMLMeta(stream):
def mkFilter(parts):
def mkCompoundFilter(parts):
def getServiceEndpoints(input_url, flt=None):
def applyFilter(normalized_uri, xrd_data, flt=None):
def registerNamespaceAlias(namespace_uri, alias):
def _extractReturnURL(endpoint):
def returnToMatches(allowed_return_to_urls, return_to):
def getAllowedReturnURLs(relying_party_url):
def verifyReturnTo(realm_str, return_to, _vrfy=getAllowedReturnURLs):
def fetch(url, body=None, headers=None):
def createHTTPFetcher():
def getDefaultFetcher():
def setDefaultFetcher(fetcher, wrap_exceptions=True):
def usingCurl():
def importElementTree(module_names=None):
def log(message, level=0):
def appendArgs(url, args):
def toBase64(s):
def getOpenIDStore(filestore_path, table_prefix):
def getBaseURL(req):
def normalDict(request_data):
def renderXRDS(request, type_uris, endpoint_urls):
def getOpenIDStore():
def getConsumer(request):
def startOpenID(request):
def finishOpenID(request):
def rpXRDS(request):
def getOpenIDStore():
def getServer(request):
def setRequest(request, openid_request):
def getRequest(request):
def server(request):
def idpXrds(request):
def idPage(request):
def trustPage(request):
def endpoint(request):
def handleCheckIDRequest(request, openid_request):
def showDecidePage(request, openid_request):
def processTrustResult(request):
def displayResponse(request, openid_response):
def buildDiscover(base_url, out_dir):
def Connect(*args, **kwargs):
def DateFromTicks(ticks):
def TimeFromTicks(ticks):
def TimestampFromTicks(ticks):
def DateTime2literal(d, c):
def DateTimeDelta2literal(d, c):
def mysql_timestamp_converter(s):
def Thing2Str(s, d):
def Unicode2Str(s, d):
def None2NULL(o, d):
def Thing2Literal(o, d):
def Instance2Str(o, d):
def defaulterrorhandler(connection, cursor, errorclass, errorvalue):
def numeric_part(s):
def reset(ip=None, username=None):
def is_valid_ip(ip_address):
def get_ip_address_from_request(request):
def query2str(items, max_length=1024):
def is_user_lockable(request):
def _get_user_attempts(request):
def watch_login(func):
@receiver(user_logged_out) DCNL def log_user_lockout(sender, request, user, signal, *args, **kwargs):
def create_admin_user(username, password):
def reset():
def get_conf():
def _parse_core_site():
def get_trash_interval():
def get_s3a_access_key():
def get_s3a_secret_key():
def shared_cluster(conf=False):
def write_config(config, path, variables=None):
def _write_static_group_mapping(user_group_mapping, path):
def shared_cluster_internal():
def config_validator(user):
def jt_ha(funct):
def rm_ha(funct):
def get_default_mrcluster():
def get_default_yarncluster():
def get_default_fscluster_config():
def get_next_ha_mrcluster():
def get_next_ha_yarncluster(current_user=None):
def get_cluster_for_job_submission():
def get_cluster_addr_for_job_submission():
def clear_caches():
def restore_caches(old):
def _do_overwrite(fs, path, copy_data):
def normpath(path):
def encode_fs_path(path):
def decode_fs_path(path):
def test_fs_configuration(fs_config, hadoop_bin_conf):
def _coerce_exceptions(function):
def require_open(func):
def create(dir=None):
def safe_octal(octal_value):
def test_fs_configuration(fs_config):
@attr('requires_hadoop') DCNL def test_live_jobtracker():
def test_tricky_confparse():
def test_jt_configuration(cluster):
def field_values_from_log(fh, fields=[{'name': 'message', 'type': 'text_general'}, {'name': 'tdate', 'type': 'timestamp'}]):
def fields_from_log(fh):
def get_default_fields():
def solrctl():
def zkensemble():
def get_auth_username():
def default_navigator_config_dir():
def default_navigator_url():
def get_security_default():
def get_optimizer_password_script():
def get_navigator_auth_username():
def get_navigator_auth_password():
def get_navigator_cm_password():
def get_navigator_ldap_password():
def get_navigator_saml_password():
def get_navigator_server_url():
def get_navigator_audit_log_dir():
def get_navigator_audit_max_file_size():
def get_cluster_source_ids(api):
@error_handler DCNL def search_entities(request):
@error_handler DCNL def search_entities_interactive(request):
@login_notrequired DCNL def show_login_page(request, login_errors=False):
def zkensemble_path():
def xmlsec():
def is_enabled():
def download(results, format, collection):
def SearchDataAdapter(results, format, collection):
def zkensemble():
def get_next_available_server(client_class, username, failed_host=None, component=None, create_client_fn=create_client):
def get_sentry_server(current_host=None):
def is_oozie_enabled():
def make_notebook(name='Browse', description='', editor_type='hive', statement='', status='ready', files=None, functions=None, settings=None, is_saved=False, database='default', snippet_properties=None, batch_submit=False, on_success_url=None, skip_historify=False, is_task=False, last_executed=(-1), is_notebook=False):
def _update_property_value(properties, key, value):
def parse_uri(uri):
def is_root(uri):
def abspath(cd, uri):
def normpath(path):
def s3datetime_to_timestamp(datetime):
def get_default_access_key_id():
def get_default_secret_key():
def parse_timestamp(timestamp, time_format=None):
def config_gen(dic):
def config_validator(user):
def get_database_password(name):
def decodeGenerator(params):
def eval_split(split, dp, model, params, misc, **kwargs):
def getDataProvider(dataset):
def randi(N):
def merge_init_structs(s0, s1):
def accumNpDicts(d0, d1):
def ymax(y):
def ymax(y):
def RNNGenCost(batch, model, params, misc):
def reduce_along_dim(img, dim, weights, indicies):
def cubic_spline(x):
def contribution(in_dim_len, out_dim_len, scale):
def imresize(img, cropped_width, cropped_height):
def preprocess_image(img):
def caffe_extract_feats(path_imgs, path_model_def, path_model, WITH_GPU=True, batch_size=10):
def predict(in_data, net):
def batch_predict(filenames, net):
@contextmanager DCNL def _tempfile(*args, **kws):
@contextmanager DCNL def open_atomic(filepath, *args, **kwargs):
def strip_version(idstr):
def query_db(query, args=(), one=False):
def encode_feedparser_dict(d):
def parse_arxiv_url(url):
def query_db(query, args=(), one=False):
def get_user_id(username):
def get_username(user_id):
@app.route('/discuss', methods=['GET']) DCNL def discuss():
@app.route('/comment', methods=['POST']) DCNL def comment():
@app.route('/recommend', methods=['GET']) DCNL def recommend():
@app.route('/top', methods=['GET']) DCNL def top():
@app.route('/toptwtr', methods=['GET']) DCNL def toptwtr():
@app.route('/library') DCNL def library():
@app.route('/libtoggle', methods=['POST']) DCNL def review():
@app.route('/login', methods=['POST']) DCNL def login():
def generate_app_name():
def dict_diff(dict1, dict2):
def fingerprint(key):
def encode(obj):
def construct_patch(self, path, data=u'', content_type=u'application/octet-stream', **extra):
def send_patch(self, path, data=u'', content_type=u'application/octet-stream', follow=False, **extra):
def close_db_connections(func, *args, **kwargs):
def validate_base64(value):
def validate_id_is_docker_compatible(value):
def validate_app_structure(value):
def validate_reserved_names(value):
def validate_comma_separated(value):
def validate_domain(value):
def select_app_name():
def check_blacklist(repo):
def log_output(stream):
def strip_prefix(name):
@login_required DCNL def account(request):
@login_required DCNL def dashboard(request):
@login_required DCNL def apps(request):
@login_required DCNL def support(request):
def get_interfaces(servers, timeout=10):
def wait_on_interfaces(interfaces, timeout=10):
def get_fd_or_server(config):
def dePem(s, name):
def dePemList(s, name):
def pem(b, name):
def parse_private_key(s):
def strip_unneeded(bkts, sufficient_funds):
def android_check_data_dir():
def format_satoshis_plain(x, decimal_point=8):
def read_system_config(path=SYSTEM_CONFIG_PATH):
def read_user_config(path):
def Connection(server, queue, config_path):
def base_encode(v, base):
def base_decode(v, length, base):
def multisig_type(wallet_type):
def tx_from_str(txt):
def set_default_subparser(self, name, args=None):
def parse_servers(result):
def filter_protocol(hostmap, protocol='s'):
def numberToByteArray(n, howManyBytes=None):
def modular_sqrt(a, p):
def legendre_symbol(a, p):
def verify_cert_chain(chain):
def check_password_strength(password):
def public_key_to_bc_address(public_key):
def hash_160_to_pubkey_address(h160, addrtype=None):
def hash_160_to_address(h160, addrtype=0):
def b58encode(v):
def b58decode(v, length):
def listdir(dir, recursive=False):
def walksymlinks(top, topdown=True, onerror=None):
def zip_dir(path, stream, include_dir=True, fnct_sort=None):
def validate(*view_types):
@validate('form') DCNL def valid_page_in_book(arch):
@validate('graph') DCNL def valid_field_in_graph(arch):
@validate('tree') DCNL def valid_field_in_tree(arch):
@validate('form', 'graph', 'tree') DCNL def valid_att_in_field(arch):
@validate('form') DCNL def valid_att_in_label(arch):
@validate('form') DCNL def valid_type_in_colspan(arch):
@validate('form') DCNL def valid_type_in_col(arch):
def conditional(condition, decorator):
def frame_codeinfo(fframe, back=0):
def compose(a, b):
def parse_version(s):
def xml_translate(callback, value):
def html_translate(callback, value):
def quote(s):
def unquote(str):
def _push(callback, term, source_line):
def _extract_translatable_qweb_terms(element, callback):
def babel_extract_qweb(fileobj, keywords, comment_tags, options):
def trans_load_data(cr, fileobj, fileformat, lang, lang_name=None, verbose=True, module_name=None, context=None):
def load_language(cr, lang):
def pg_varchar(size=0):
def reverse_order(order):
def html_keep_url(text):
def html2plaintext(html, body_id=None, encoding='utf-8'):
def plaintext2html(text, container_tag=False):
def append_content_to_html(html, content, plaintext=True, preserve=False, container_tag=False):
def generate_tracking_message_id(res_id):
def email_send(email_from, email_to, subject, body, email_cc=None, email_bcc=None, reply_to=False, attachments=None, message_id=None, references=None, openobject_id=False, debug=False, subtype='plain', headers=None, smtp_server=None, smtp_port=None, ssl=False, smtp_user=None, smtp_password=None, cr=None, uid=None):
def email_split(text):
def email_split_and_format(text):
def decode_smtp_header(smtp_header):
def _deduplicate_loggers(loggers):
def which_files(file, mode=(F_OK | X_OK), path=None, pathext=None):
def which(file, mode=(F_OK | X_OK), path=None, pathext=None):
def _check_olecf(data):
def guess_mimetype(bin_data, default='application/octet-stream'):
def try_report(cr, uid, rname, ids, data=None, context=None, our_module=None, report_type=None):
def try_report_action(cr, uid, action_id, active_model=None, active_ids=None, wiz_data=None, wiz_buttons=None, context=None, our_module=None):
def user_data_dir(appname=None, appauthor=None, version=None, roaming=False):
def site_data_dir(appname=None, appauthor=None, version=None, multipath=False):
def user_config_dir(appname=None, appauthor=None, version=None, roaming=False):
def site_config_dir(appname=None, appauthor=None, version=None, multipath=False):
def user_cache_dir(appname=None, appauthor=None, version=None, opinion=True):
def user_log_dir(appname=None, appauthor=None, version=None, opinion=True):
def _get_win_folder_from_registry(csidl_name):
def _convert_nn_fr(val):
def _convert_nnn_fr(val):
def _convert_nn_nl(val):
def _convert_nnn_nl(val):
def amount_to_text(nbr, lang='fr', currency='euro'):
def float_round(value, precision_digits=None, precision_rounding=None, rounding_method='HALF-UP'):
def float_is_zero(value, precision_digits=None, precision_rounding=None):
def float_compare(value1, value2, precision_digits=None, precision_rounding=None):
def float_repr(value, precision_digits):
def exec_pg_environ():
def file_open(name, mode='r', subdir='addons', pathinfo=False):
def flatten(list):
def reverse_enumerate(l):
def partition(pred, elems):
def topological_sort(elems):
def scan_languages():
def mod10r(number):
def human_size(sz):
def detect_ip_addr():
def posix_to_ldml(fmt, locale):
def split_every(n, iterable, piece_maker=tuple):
def get_and_group_by_field(cr, uid, obj, ids, field, context=None):
def stripped_sys_argv(*strip_args):
def dumpstacks(sig=None, frame=None):
def formatLang(env, value, digits=None, grouping=True, monetary=False, dp=False, currency_obj=False):
def _consteq(str1, str2):
def _fix_multiple_roots(node):
def convert_csv_import(cr, module, fname, csvcontent, idref=None, mode='init', noupdate=False):
def _get_opcodes(codeobj):
def assert_no_dunder_name(code_obj, expr):
def assert_valid_codeobj(allowed_codes, code_obj, expr):
def test_expr(expr, allowed_codes, mode='eval'):
def const_eval(expr):
def expr_eval(expr):
def safe_eval(expr, globals_dict=None, locals_dict=None, mode='eval', nocopy=False, locals_builtins=False):
def _convert_nn(val):
def _convert_nnn(val):
def amount_to_text(nbr, lang='en', currency='euro'):
def image_resize_image(base64_source, size=(1024, 1024), encoding='base64', filetype=None, avoid_if_small=False):
def image_resize_and_sharpen(image, size, preserve_aspect_ratio=False, factor=2.0):
def image_save_for_web(image, fp=None, format=None):
def image_resize_image_big(base64_source, size=(1024, 1024), encoding='base64', filetype=None, avoid_if_small=True):
def image_resize_image_medium(base64_source, size=(128, 128), encoding='base64', filetype=None, avoid_if_small=False):
def image_resize_image_small(base64_source, size=(64, 64), encoding='base64', filetype=None, avoid_if_small=False):
def crop_image(data, type='top', ratio=False, thumbnail_ratio=None, image_format='PNG'):
def image_colorize(original, randomize=True, color=(255, 255, 255)):
def image_get_resized_images(base64_source, return_big=False, return_medium=True, return_small=True, big_name='image', medium_name='image_medium', small_name='image_small', avoid_resize_big=True, avoid_resize_medium=False, avoid_resize_small=False):
def image_resize_images(vals, big_name='image', medium_name='image_medium', small_name='image_small'):
def log_ormcache_stats(sig=None, frame=None):
def get_cache_key_counter(bound_method, *args, **kwargs):
def connection_info_for(db_or_uri):
def close_db(db_name):
def snake(s):
def check_root_user():
def check_postgres_user():
def report_configuration():
def setup_pid_file():
def registry(database_name=None):
def _check_value(value):
def copy_cache(records, env):
def resolve_mro(model, name, predicate):
def at_install(flag):
def post_install(flag):
def can_import(module):
def check_object_name(name):
def check_pg_name(name):
def check_method_name(name):
def same_name(f, g):
def fix_import_export_id_paths(fieldname):
def itemgetter_tuple(items):
def _normalize_ids(arg, atoms=set(IdType)):
def is_initialized(cr):
def initialize(cr):
def create_categories(cr, categories):
def has_unaccent(cr):
def load_module_graph(cr, graph, status=None, perform_checks=True, skip_modules=None, report=None):
def load_marked_modules(cr, graph, states, force, progressdict, report, loaded_modules, perform_checks):
def initialize_sys_path():
def get_module_path(module, downloaded=False, display_warning=True):
def get_resource_path(module, *args):
def get_resource_from_path(path):
def module_manifest(path):
def get_module_root(path):
def load_information_from_description_file(module, mod_path=None):
def load_openerp_module(module_name):
def get_modules():
def get_test_modules(module):
def run_unit_tests(module_name, dbname, position=runs_at_install):
def unwrap_suite(test):
def normalize_domain(domain):
def combine(operator, unit, zero, domains):
def AND(domains):
def OR(domains):
def distribute_not(domain):
def generate_table_alias(src_table_alias, joined_tables=[]):
def get_alias_from_query(from_query):
def normalize_leaf(element):
def is_operator(element):
def is_leaf(element, internal=False):
def create_substitution_leaf(leaf, new_elements, new_model=None, internal=False):
def setup_modifiers(node, field=None, context=None, in_tree_view=False):
def exp_create_database(db_name, demo, lang, user_password='admin', login='admin', country_code=None):
def dump_db(db_name, stream, backup_format='zip'):
def exp_server_version():
def xmlrpc_return(start_response, service, method, params, string_faultcode=False):
def wsgi_xmlrpc(environ, start_response):
def application_unproxied(environ, start_response):
def exp_about(extended=False):
def memory_info(process):
def _reexec(updated_modules=None):
def preload_registries(dbnames):
def start(preload=None, stop=False):
def restart():
def attrsetter(attr, value):
def propagate(method1, method2):
def constrains(*args):
def onchange(*args):
def depends(*args):
def returns(model, downgrade=None, upgrade=None):
def downgrade(method, value, self, args, kwargs):
def aggregate(method, value, self):
def split_context(method, args, kwargs):
def model(method):
def multi(method):
def one(method):
def model_cr(method):
def model_cr_context(method):
def cr(method):
def cr_context(method):
def cr_uid(method):
def cr_uid_context(method):
def cr_uid_id(method):
def cr_uid_id_context(method):
def cr_uid_ids(method):
def cr_uid_ids_context(method):
def cr_uid_records(method):
def cr_uid_records_context(method):
def v7(method_v7):
def v8(method_v8):
def noguess(method):
def guess(method):
def expected(decorator, func):
def call_kw(model, name, args, kwargs):
def _process_text(self, txt):
def _open_image(filename, path=None):
def list_all_sysfonts():
def SetCustomFonts(rmldoc):
def render_report(cr, uid, ids, name, data, context=None):
def ustr(value, hint_encoding='utf-8', errors='strict'):
def LocalService(name):
def post_init(cr, registry):
def noid(d):
@contextmanager DCNL def environment():
@contextmanager DCNL def environment():
def split(l, counts):
def intersperse(string, counts, separator=''):
def parse_m2m(commands):
def keep_query(*keep_params, **additional_params):
def _hasclass(context, *cls):
def _create_sequence(cr, seq_name, number_increment, number_next):
def _drop_sequences(cr, seq_names):
def _alter_sequence(cr, seq_name, number_increment=None, number_next=None):
def convert_exception_to(to_type, with_message=False):
def nl2br(string):
def html_escape(string, options):
def rjsmin(script):
def try_coerce_ascii(string_utf8):
def encode_header(header_text):
def encode_header_param(param_text):
def extract_rfc2822_addresses(text):
def encode_rfc2822_address_header(header_text):
def encode(s):
def make_compute(text, deps):
def trg_write(uid, res_type, res_id, cr):
def trg_trigger(uid, res_type, res_id, cr):
def trg_delete(uid, res_type, res_id, cr):
def trg_create(uid, res_type, res_id, cr):
def trg_validate(uid, res_type, res_id, signal, cr):
def trg_redirect(uid, res_type, res_id, new_rid, cr):
def dispatch_rpc(service_name, method, params):
def route(route=None, **kw):
def db_monodb(httprequest=None):
def send_file(filepath_or_fp, mimetype=None, as_attachment=False, filename=None, mtime=None, add_etags=True, cache_timeout=STATIC_CACHE, conditional=True):
def canonicalize(app, pagename, templatename, context, doctree):
def versionize(app, pagename, templatename, context, doctree):
def navbarify(node, navbar=None):
def resolve_content_toctree(environment, docname, builder, toctree, prune=True, maxdepth=0, titles_only=False, collapse=False, includehidden=False):
@monkey(sphinx.environment.BuildEnvironment) DCNL def resolve_toctree(old_resolve, self, docname, *args, **kwargs):
def add_doc_link(app, pagename, templatename, context, doctree):
def _toledo8217StatusParse(status):
def sorted_fields(fields):
def hours_time_string(hours):
def object_shasign(record=False, res_model='', res_id=None, **kw):
def _message_post_helper(res_model='', res_id=None, message='', token='', token_field='token', sha_in='', sha_time=None, nosubscribe=True, **kw):
def remove_accents(input_str):
def onlywhite(line):
def optwrap(text):
def main():
def start_end_date_for_period(period, default_start_date=False, default_end_date=False):
def dict_keys_startswith(dictionary, string):
def normalize_keys_upper(data):
def calendar_id2real_id(calendar_id=None, with_date=False):
def pretty_iban(iban):
def get_bban_from_iban(iban):
def html_to_text(element):
def _collapse_whitespace(text):
def _realize_padding(it):
def _wrap(element, output, wrapper=u''):
def migrate_set_tags_and_taxes_updatable(cr, registry, module):
def migrate_tags_on_taxes(cr, registry):
def validate_email(email, check_mx=False, verify=False):
def extract_email(email):
def utfstr(stuff):
def redirect_with_hash(*args, **kw):
def concat_xml(file_list):
def fs2web(path):
def manifest_list(extension, mods=None, db=None, debug=None):
def get_last_modified(files):
def make_conditional(response, last_modified=None, etag=None, max_age=0):
def generate_views(action):
def fix_view_modes(action):
def xml2json_from_elementtree(el, preserve_whitespaces=False):
def slugify(s, max_length=None):
def unslug(s):
def strip_ns(xml, ns):
def frag_remover(ack, load):
def frag_joiner(ack, src_ip_port, load):
def pkt_parser(pkt):
def telnet_logins(src_ip_port, dst_ip_port, load, ack, seq):
def ParseMSKerbv5TCP(Data):
def ParseMSKerbv5UDP(Data):
def Decode_Ip_Packet(s):
def double_line_checker(full_load, count_str):
def parse_ftp(full_load, dst_ip_port):
def mail_decode(src_ip_port, dst_ip_port, mail_creds):
def mail_logins(full_load, src_ip_port, dst_ip_port, ack, seq):
def irc_logins(full_load, pkt):
def other_parser(src_ip_port, dst_ip_port, full_load, ack, seq, pkt, verbose):
def get_http_searches(http_url_req, body, host):
def parse_basic_auth(src_ip_port, dst_ip_port, headers, authorization_header):
def parse_netntlm(authenticate_header, authorization_header, headers, ack, seq):
def parse_snmp(src_ip_port, dst_ip_port, snmp_layer):
def get_http_url(method, host, path, headers):
def headers_to_dict(header_lines):
def parse_http_line(http_line, http_methods):
def parse_http_load(full_load, http_methods):
def get_http_line(header_lines, http_methods):
def parse_netntlm_chal(headers, chal_header, ack):
def parse_ntlm_chal(msg2, ack):
def parse_netntlm_resp_msg(headers, resp_header, seq):
def parse_ntlm_resp(msg3, seq):
def url_filter(http_url_req):
def get_login_pass(body):
def which(cmd, mode=(os.F_OK | os.X_OK), path=None):
def get_pid_location(module):
def _convert_host_to_ip(host):
def _convert_host_to_hex(host):
def _create_connection(host, port, connect_timeout):
def _filter_non_json_lines(data):
def pfilter(f, patterns=None, use_regex=False):
def agefilter(st, now, age, timestamp):
def sizefilter(st, size):
def contentfilter(fsname, pattern):
def crc32(path):
def shell_escape(string):
def split_pre_existing_dir(dirname):
def adjust_recursive_directory_permissions(pre_existing_dir, new_directory_list, module, directory_args, changed):
def split_entry(entry):
def build_entry(etype, entity, permissions=None, use_nfsv4_acls=False):
def build_command(module, mode, path, follow, default, recursive, entry=''):
def acl_changed(module, cmd):
def get_state(b_path):
def assemble_from_fragments(src_path, delimiter=None, compiled_regexp=None, ignore_hidden=False):
def rax_dns_record(module, comment=None, data=None, domain=None, name=None, overwrite=True, priority=None, record_type='A', state='present', ttl=7200):
def _get_node(lb, node_id=None, address=None, port=None):
def _upload_folder(cf, folder, container, ttl=None, headers=None):
def upload(module, cf, container, src, dest, meta, expires):
def download(module, cf, container, src, dest, structure):
def delete(module, cf, container, src, dest):
def get_meta(module, cf, container, src, dest):
def put_meta(module, cf, container, src, dest, meta, clear_meta):
def delete_meta(module, cf, container, src, dest, meta):
def cloudfiles(module, container, src, dest, method, typ, meta, clear_meta, structure, expires):
def cloudfiles(module, container_, state, meta_, clear_meta, typ, ttl, public, private, web_index, web_error):
def randompass():
def getInstanceDetails(api, server):
def normalize_image(image):
def is_running(container):
def check_dependencies(module):
def present(manager, containers, count, name):
def started(manager, containers, count, name):
def reloaded(manager, containers, count, name):
def restarted(manager, containers, count, name):
def stopped(manager, containers, count, name):
def killed(manager, containers, count, name):
def absent(manager, containers, count, name):
def _check_params(params, field_list):
def _validate_autoscaling_params(params):
def _validate_named_port_params(params):
def _get_instance_list(mig, field='name', filter_list=['NONE']):
def _gen_gce_as_policy(as_params):
def create_autoscaler(gce, mig, params):
def update_autoscaler(gce, autoscaler, params):
def delete_autoscaler(autoscaler):
def get_autoscaler(gce, name, zone):
def create_mig(gce, params):
def delete_mig(mig):
def recreate_instances_in_mig(mig):
def resize_mig(mig, size):
def get_mig(gce, name, zone):
def update_named_ports(mig, named_ports):
def transform_headers(headers):
def format_allowed_section(allowed):
def format_allowed(allowed):
def sorted_allowed_list(allowed_list):
def get_instance_info(inst):
def create_instances(module, gce, instance_names, number):
def change_instance_state(module, gce, instance_names, number, zone_name, state):
def _needs_update(module, port, cloud):
def _wait(timeout, cloud, server, action):
def _system_state_change(action, status):
def _system_state_change(state, device):
def _can_update(subnet, module, cloud):
def _needs_update(subnet, module, cloud):
def authenticate(endpoint, token, login_user, login_password, login_tenant_name):
def tenant_exists(keystone, tenant):
def user_exists(keystone, user):
def get_tenant(keystone, name):
def get_user(keystone, name):
def get_role(keystone, name):
def ensure_tenant_exists(keystone, tenant_name, tenant_description, check_mode):
def ensure_tenant_absent(keystone, tenant, check_mode):
def ensure_user_exists(keystone, user_name, password, email, tenant_name, check_mode):
def ensure_user_role_exists(keystone, user_name, tenant_name, role_name, check_mode):
def dispatch(keystone, user=None, password=None, tenant=None, tenant_description=None, email=None, role=None, state='present', endpoint=None, token=None, login_user=None, login_password=None, check_mode=False):
def _needs_update(cloud, module, router, network, internal_subnet_ids):
def _system_state_change(cloud, module, router, network, internal_ids):
def _needs_update(module, secgroup):
def _ports_match(protocol, module_min, module_max, rule_min, rule_max):
def _find_matching_rule(module, secgroup, remotegroup):
def get_ssh_certificate_tokens(module, ssh_cert_path):
def create_virtual_machine(module, azure):
def terminate_virtual_machine(module, azure):
def validate_rule(rule, rule_type=None):
def create_rule_instance(rule):
def create_rule_dict_from_obj(rule):
def virtual_network_to_dict(vnet):
def boto_exception(err):
def get_stack_events(cfn, stack_name):
def stack_operation(cfn, stack_name, operation):
def get_zone_by_name(conn, module, zone_name, want_private, zone_id, want_vpc_id):
def commit(changes, retry_interval, wait, wait_timeout):
def find_address(ec2, public_ip, device_id, isinstance=True):
def address_is_associated_with_device(ec2, address, device_id, isinstance=True):
def allocate_address(ec2, domain, reuse_existing_ip_allowed):
def release_address(ec2, address, check_mode):
def find_device(ec2, module, device_id, isinstance=True):
def make_rule_key(prefix, rule, group_id, cidr_ip):
def get_target_from_rule(module, ec2, rule, name, group, groups, vpc_id):
def is_fakes3(s3_url):
def is_walrus(s3_url):
def boto_exception(err):
def boto_exception(err):
def _paginate(func, attr):
def set_users_groups(module, iam, name, groups, updated=None, new_name=None):
def get_instance_info(inst):
def boto_supports_associate_public_ip_address(ec2):
def boto_supports_profile_name_arg(ec2):
def boto_supports_param_in_spot_request(ec2, param):
def await_spot_requests(module, ec2, spot_requests, count):
def create_instances(module, ec2, vpc, override_count=None):
def terminate_instances(module, ec2, instance_ids):
def startstop_instances(module, ec2, instance_ids, state, instance_tags):
def restart_instances(module, ec2, instance_ids, state, instance_tags):
def enforce_required_arguments(module):
def boto_exception(err):
def vpc_exists(module, vpc, name, cidr_block, multi):
def get_url(module, url):
def ubuntu(module):
def lookup_ubuntu_ami(table, release, stream, store, arch, region, virt):
def get_block_device_mapping(image):
def boto_supports_volume_encryption():
def modify_dot_attribute(module, ec2, instance, device_name):
def set_parameter(param, value, immediate):
def modify_group(group, params, immediate=False):
def get_block_device_mapping(image):
def create_image(module, ec2):
def deregister_image(module, ec2):
def update_image(module, ec2):
def _get_most_recent_snapshot(snapshots, max_snapshot_age_secs=None, now=None):
def _create_with_wait(snapshot, wait_timeout_secs, sleep_func=time.sleep):
def boto_exception(err):
def get_vpc_info(vpc):
def find_vpc(module, vpc_conn, vpc_id=None, cidr=None):
def routes_match(rt_list=None, rt=None, igw=None):
def rtb_changed(route_tables=None, vpc_conn=None, module=None, vpc=None, igw=None):
def create_vpc(module, vpc_conn):
def terminate_vpc(module, vpc_conn, vpc_id=None, cidr=None):
def power_state(vm, state, force):
def gather_facts(vm):
def config_check(name, passed, default, module):
def head_splitter(headfile, remote, module=None, fail_on_error=False):
def get_version(module, git_path, dest, ref='HEAD'):
def clone(git_path, module, repo, dest, remote, depth, version, bare, reference, refspec, verify_commit):
def reset(git_path, module, dest):
def get_diff(module, git_path, dest, repo, remote, depth, bare, before, after):
def get_head_branch(git_path, module, dest, remote, bare=False):
def get_remote_url(git_path, module, dest, remote):
def set_remote_url(git_path, module, repo, dest, remote):
def fetch(git_path, module, repo, dest, version, remote, depth, bare, refspec, git_version_used):
def submodule_update(git_path, module, dest, track_submodules, force=False):
def set_remote_branch(git_path, module, dest, remote, version, depth):
def git_version(git_path, module):
def present(dest, username, password, crypt_scheme, create, check_mode):
def absent(dest, username, check_mode):
def privileges_get(cursor, user, host):
def privileges_unpack(priv, mode):
def typedvalue(value):
def setvariable(cursor, mysqlvar, value):
def user_add(cursor, user, password, role_attr_flags, encrypted, expires):
def user_alter(cursor, module, user, password, role_attr_flags, encrypted, expires, no_password_changes):
def user_delete(cursor, user):
def has_table_privileges(cursor, user, table, privs):
def has_database_privileges(cursor, user, db, privs):
def parse_role_attrs(role_attr_flags):
def parse_privs(privs, db):
def partial(f, *args, **kwargs):
def is_pubkey(string):
def get_cache_mtime():
def get_updated_cache_time():
def get_cache(module):
def parse_key_id(key_id):
def shorten_key_ids(key_id_list):
def transaction_exists(pkglist):
def local_nvra(module, path):
def _get_packages(module, pip, chdir):
def _is_present(name, version, installed_pkgs, pkg_command):
def _get_package_info(module, package, env=None):
def main():
def main():
def main():
def main():
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module, text=False):
def get_cli_body_ssh(command, response, module):
def get_interface_type(interface):
def get_interface_mode(interface, module):
def interface_is_portchannel(interface, module):
def get_switchport(port, module):
def get_switchport_config_commands(interface, existing, proposed, module):
def is_switchport_default(existing):
def numerical_sort(string_int_list):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh_vrf(module, command, response):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh_vrf_interface(command, response, module):
def get_cli_body_ssh(command, response, module):
def validate_feature(module, mode='show'):
def main():
def main():
def numerical_sort(string_int_list):
def get_vlan_config_commands(vlan, vid):
def get_vlan(vlanid, module):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module):
def get_boot_options(module):
def set_boot_options(module, image_name, kickstart=None):
def get_cli_body_ssh(command, response, module):
def is_default_interface(interface, module):
def get_interface_type(interface):
def get_manual_interface_attributes(interface, module):
def get_interface(intf, module):
def get_interfaces_dict(module):
def normalize_interface(if_name):
def get_interface_config_commands(interface, intf, existing):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module):
def main():
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh_vrrp(command, response, module):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module):
def get_cli_body_ssh(command, response, module, text=False):
def absolute_location(url, location):
def url_get(module, url, dest, use_proxy, last_mod_time, force, timeout=10, headers=None, tmp_dest=''):
def extract_filename_from_headers(headers):
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def build_desired_iface_config(module):
def config_dict_changed(module):
def config_changed(module):
def write_to_ports_conf(module):
def add_glob_to_array(_bridgemems):
def build_desired_iface_config(module):
def config_dict_changed(module):
def config_changed(module):
def add_glob_to_array(_bondmems):
def build_desired_iface_config(module):
def config_dict_changed(module):
def config_changed(module):
def pn_cli(module):
def check_cli(module, cli):
def run_cli(module, cli):
def get_command_from_state(state):
def main():
def pn_cli(module):
def check_cli(module, cli):
def run_cli(module, cli):
def get_command_from_state(state):
def main():
def pn_cli(module):
def check_cli(module, cli):
def get_nic(module, cli):
def run_cli(module, cli):
def get_command_from_state(state):
def main():
def pn_cli(module):
def check_cli(module, cli):
def run_cli(module, cli):
def get_command_from_state(state):
def main():
def pn_cli(module):
def check_cli(module, cli):
def run_cli(module, cli):
def get_command_from_state(state):
def main():
def pn_cli(module):
def check_cli(module, cli):
def run_cli(module, cli):
def get_command_from_state(state):
def main():
def pn_cli(module):
def check_cli(module, cli):
def run_cli(module, cli):
def get_command_from_state(state):
def main():
def get_command_from_state(state):
def main():
def pn_cli(module):
def run_cli(module, cli):
def main():
def pn_cli(module):
def check_cli(module, cli):
def run_cli(module, cli):
def get_command_from_state(state):
def main():
def pn_cli(module):
def check_cli(module, cli):
def run_cli(module, cli):
def get_command_from_state(state):
def main():
def main():
def main():
def _escape_fstab(v):
def set_mount(module, args):
def unset_mount(module, args):
def mount(module, args):
def umount(module, dest):
def remount(module, mount_bin, args):
def is_bind_mounted(module, linux_mounts, dest, src=None, fstype=None):
def get_linux_mounts(module):
def keyfile(module, user, write=False, path=None, manage_dir=True):
def parseoptions(module, options):
def parsekey(module, raw_key, rank=None):
def enforce_state(module, params):
def add(module):
def remove(module):
def add_check(module, check):
def remove_check(module, check_id):
def add_service(module, service):
def remove_service(module, service_id):
def get_service_by_id_or_name(consul_api, service_id_or_name):
def remove_value(module):
def create_datacenter(module, profitbricks):
def remove_datacenter(module, profitbricks):
def create_volume(module, profitbricks):
def delete_volume(module, profitbricks):
def _attach_volume(module, profitbricks, datacenter, volume):
def attach_volume(module, profitbricks):
def detach_volume(module, profitbricks):
def create_virtual_machine(module, profitbricks):
def remove_virtual_machine(module, profitbricks):
def _remove_boot_volume(module, profitbricks, datacenter_id, server_id):
def startstop_machine(module, profitbricks, state):
def _get_datacenter_id(datacenters, identity):
def _get_server_id(servers, identity):
def create_nic(module, profitbricks):
def delete_nic(module, profitbricks):
def create_image(gce, name, module):
def delete_image(gce, name, module):
def add_tags(gce, module, instance_name, tags):
def remove_tags(gce, module, instance_name, tags):
def create_zone(module, gcdns, zone):
def remove_zone(module, gcdns, zone):
def _get_zone(gcdns, zone_name):
def _sanity_check(module):
def main():
def create_record(module, gcdns, zone, record):
def remove_record(module, gcdns, record):
def _get_record(gcdns, zone, record_type, record_name):
def _get_zone(gcdns, zone_name, zone_id):
def _records_match(old_ttl, old_record_data, new_ttl, new_record_data):
def _sanity_check(module):
def _additional_sanity_checks(module, zone):
def main():
def main():
def main():
def create_script(command):
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def _search_by_lun(disks_service, lun_id):
def change_keys(recs, key='uuid', filter_func=None):
def get_host(session):
def iterate_all(attr, map_method, **kwargs):
def prefix_to_attr(attr_id):
def first_or_default(items, default=None):
def has_tags(available, required):
def has_targets(available, required):
def group_list_of_dict(array):
def main():
def fix_return(node):
def alias_details(client, module):
def all_details(client, module):
def config_details(client, module):
def mapping_details(client, module):
def policy_details(client, module):
def version_details(client, module):
def main():
def find_health_check(conn, wanted):
def _collect_facts(resource):
def create_cluster(module, redshift):
def describe_cluster(module, redshift):
def delete_cluster(module, redshift):
def modify_cluster(module, redshift):
def fetch_dhcp_options_for_vpc(vpc_conn, vpc_id):
def match_dhcp_options(vpc_conn, tags=None, options=None):
def pc(key):
def set_api_params(module, module_params):
def validate_params(module, aws):
def get_lambda_alias(module, aws):
def lambda_alias(module, aws):
def main():
def find_asgs(conn, module, name=None, tags=None):
def convert_to_lower(data):
def get_nat_gateways(client, subnet_id=None, nat_gateway_id=None, states=None, check_mode=False):
def wait_for_status(client, wait_timeout, nat_gateway_id, status, check_mode=False):
def gateway_in_subnet_exists(client, subnet_id, allocation_id=None, check_mode=False):
def get_eip_allocation_id_by_address(client, eip_address, check_mode=False):
def allocate_eip_address(client, check_mode=False):
def release_address(client, allocation_id, check_mode=False):
def create(client, subnet_id, allocation_id, client_token=None, wait=False, wait_timeout=0, if_exist_do_not_create=False, check_mode=False):
def pre_create(client, subnet_id, allocation_id=None, eip_address=None, if_exist_do_not_create=False, wait=False, wait_timeout=0, client_token=None, check_mode=False):
def remove(client, nat_gateway_id, wait=False, wait_timeout=0, release_eip=False, check_mode=False):
def get_cloudwatchevents_client(module):
def to_dict(items, key, value):
def get_server_certs(iam, name=None):
def iterate_all(attr, map_method, **kwargs):
def targets_equal(keys, a, b):
def dict_diff(dict1, dict2, by_key=False):
def first_or_default(items, default=None):
def wait_for(callback, value, timeout=EFSConnection.DEFAULT_WAIT_TIMEOUT_SECONDS):
def main():
def pc(key):
def ordered_obj(obj):
def set_api_sub_params(params):
def validate_params(module, aws):
def get_qualifier(module):
def lambda_event_stream(module, aws):
def main():
def convert_to_lower(data):
def make_tags_in_proper_format(tags):
def make_tags_in_aws_format(tags):
def get_tags(client, stream_name, check_mode=False):
def find_stream(client, stream_name, check_mode=False):
def wait_for_status(client, stream_name, status, wait_timeout=300, check_mode=False):
def tags_action(client, stream_name, tags, action='create', check_mode=False):
def recreate_tags_from_list(list_of_tags):
def update_tags(client, stream_name, tags, check_mode=False):
def stream_action(client, stream_name, shard_count=1, action='create', timeout=300, check_mode=False):
def retention_action(client, stream_name, retention_period=24, action='increase', check_mode=False):
def update(client, current_stream, stream_name, retention_period=None, tags=None, wait=False, wait_timeout=300, check_mode=False):
def create_stream(client, stream_name, number_of_shards=1, retention_period=None, tags=None, wait=False, wait_timeout=300, check_mode=False):
def delete_stream(client, stream_name, wait=False, wait_timeout=300, check_mode=False):
def copy_image(module, ec2):
def find_subnets(vpc_conn, vpc_id, identified_subnets):
def find_igw(vpc_conn, vpc_id):
def is_fakes3(s3_url):
def is_walrus(s3_url):
def get_obj(content, vimtype, name):
def migrate_vm(vm_object, host_object):
def vmware_path(datastore, datacenter, path):
def manage_issue(module, taiga_host, project_name, issue_subject, issue_priority, issue_status, issue_type, issue_severity, issue_description, issue_attachment, issue_attachment_description, issue_tags, state, check_mode=False):
def get_cert_days(module, cert_file):
def write_file(module, dest, content):
def regexp_extraction(string, _regexp, groups=1):
def main():
def send_message(module, client_id, client_secret, topic, msg):
def send_msg(msg, server='localhost', port='6667', channel=None, nick_to=[], key=None, topic=None, nick='ansible', color='none', passwd=False, timeout=30, use_ssl=False, part=True, style=None):
def send_msg_v1(module, token, room, msg_from, msg, msg_format='text', color='yellow', notify=False, api=MSG_URI_V1):
def send_msg_v2(module, token, room, msg_from, msg, msg_format='text', color='yellow', notify=False, api=NOTIFY_URI_V2):
def html_escape(text):
def get_user_diff(ipa_user, module_user):
def get_ssh_key_fingerprint(ssh_key):
def check_compatibility(module, client):
def user_find(client, user, db_name):
def lang_exists(cursor, lang):
def lang_istrusted(cursor, lang):
def lang_altertrust(cursor, lang, trust):
def lang_add(cursor, lang, trust):
def lang_drop(cursor, lang, cascade):
def convert_time(time):
def post_annotation(annotation, api_key):
def create_annotation(module):
def build_headers(api_token):
def main():
def selector(module):
def query_log_status(module, le_path, path, state='present'):
def follow_log(module, le_path, logs, name=None, logtype=None):
def unfollow_log(module, le_path, logs):
def send_deploy_event(module, key, revision_id, deployed_by='Ansible', deployed_to=None, repository=None):
def send_annotation_event(module, key, msg, annotated_by='Ansible', level=None, instance_id=None, event_epoch=None):
def selector(module):
def get_version(pacman_output):
def query_package(module, pacman_path, name, state='present'):
def a_valid_tap(tap):
def already_tapped(module, brew_path, tap):
def add_tap(module, brew_path, tap, url=None):
def add_taps(module, brew_path, taps):
def remove_tap(module, brew_path, tap):
def remove_taps(module, brew_path, taps):
def is_installed(xbps_output):
def query_package(module, xbps_path, name, state='present'):
def update_package_db(module, xbps_path):
def upgrade(module, xbps_path):
def remove_packages(module, xbps_path, packages):
def install_packages(module, xbps_path, state, packages):
def check_packages(module, xbps_path, packages, state):
def main():
def compare_package(version1, version2):
def query_package(module, name, depot=None):
def remove_package(module, name):
def install_package(module, depot, name):
def query_package(module, name):
def update_package_db(module, port_path):
def query_package(module, port_path, name, state='present'):
def remove_packages(module, port_path, packages):
def install_packages(module, port_path, packages):
def activate_packages(module, port_path, packages):
def deactivate_packages(module, port_path, packages):
def _get_cmd(*args):
def _parse_repos(module):
def _repo_changes(realrepo, repocmp):
def repo_exists(module, repodata, overwrite_multiple):
def addmodify_repo(module, repodata, old_repos, zypper_version, warnings):
def remove_repo(module, repo):
def runrefreshrepo(module, auto_import_keys=False, shortname=None):
def update_package_db(module, opkg_path):
def query_package(module, opkg_path, name, state='present'):
def remove_packages(module, opkg_path, packages):
def install_packages(module, opkg_path, packages):
def split_name_version(name):
def get_installed_state(m, packages):
def get_cmd(m, subcommand):
def package_present(m, name, want_latest):
def package_update_all(m):
def package_absent(m, name):
def repo_refresh(m):
def init_layman(config=None):
def download_url(module, url, dest):
def install_overlay(module, name, list_url=None):
def uninstall_overlay(module, name):
def sync_overlay(name):
def sync_overlays():
def _configure_base(module, base, conf_file, disable_gpg_check):
def _specify_repositories(base, disablerepo, enablerepo):
def _base(module, conf_file, disable_gpg_check, disablerepo, enablerepo):
def _package_dict(package):
def list_items(module, base, command):
def _mark_package_install(module, base, pkg_spec):
def main():
def get_local_version(pear_output):
def get_repository_version(pear_output):
def query_package(module, name, state='present'):
def main():
def truncate_before(value, srch):
def _set_to_get(set_cmd, module):
def main():
def main():
def cmd_run(module, cmd, check_rc=True):
def params_set(module):
def main():
def wakeonlan(module, mac, broadcast, port):
def semanage_port_get_ports(seport, setype, proto):
def semanage_port_get_type(seport, port, proto):
def semanage_port_add(module, ports, proto, setype, do_reload, serange='s0', sestore=''):
def semanage_port_del(module, ports, proto, setype, do_reload, sestore=''):
def semanage_fcontext_exists(sefcontext, target, ftype):
def semanage_fcontext_modify(module, result, target, ftype, setype, do_reload, serange, seuser, sestore=''):
def semanage_fcontext_delete(module, result, target, ftype, do_reload, sestore=''):
def _load_dist_subclass(cls, *args, **kwargs):
def enforce_state(module, params):
def sanity_check(module, host, key, sshkeygen):
def search_for_host_key(module, host, key, hash_host, path, sshkeygen):
def normalize_known_hosts_key(key):
def _get_dev_size(dev, module):
def _get_fs_size(fssize_cmd, dev, module):
def action_handler(action_func, action_func_args):
def is_available(name, ubuntuMode):
def is_present(name):
def fix_case(name):
def replace_line(existing_line, new_line):
def set_locale(name, enabled=True):
def apply_change(targetState, name):
def apply_change_ubuntu(targetState, name):
def run_command(command, module, check_rc=True):
def sanitize_output(output):
def _find_symlinks(topdir, extension=''):
def _maintain_symlinks(symlink_type, base_path):
def aci_response_error(result):
def aci_response_json(result, rawoutput):
def aci_response_xml(result, rawoutput):
def avi_common_argument_spec():
def ansible_return(module, rsp, changed, req=None, existing_obj=None):
def get_file_lines(path):
def get_collector_names(valid_subsets=None, minimal_gather_subset=None, gather_subset=None, aliases_map=None, platform_info=None):
def collector_classes_from_gather_subset(all_collector_classes=None, valid_subsets=None, minimal_gather_subset=None, gather_subset=None, gather_timeout=None, platform_info=None):
def get_all_facts(module):
def ansible_facts(module, gather_subset=None):
def tower_auth_config(module):
def tower_check_mode(module):
def _get_gcp_ansible_credentials(module):
def _get_gcp_environ_var(var_name, default_value):
def _get_gcp_environment_credentials(service_account_email, credentials_file, project_id):
def _get_gcp_libcloud_credentials(module, service_account_email=None, credentials_file=None, project_id=None):
def _get_gcp_credentials(module, require_valid_json=True, check_libcloud=False):
def _validate_credentials_file(module, credentials_file, require_valid_json=True, check_libcloud=False):
def gcp_connect(module, provider, get_driver, user_agent_product, user_agent_version):
def get_google_cloud_credentials(module, scopes=[]):
def get_google_api_auth(module, scopes=[], user_agent_product='ansible-python-api', user_agent_version='NA'):
def get_google_api_client(module, service, user_agent_product, user_agent_version, scopes=None, api_version='v1'):
def check_min_pkg_version(pkg_name, minimum_version):
def unexpected_error_msg(error):
def check_params(params, field_list):
def check_aos_version(module, min=False):
def get_aos_session(module, auth):
def find_collection_item(collection, item_name=False, item_id=False):
def content_to_dict(module, content):
def do_load_resource(module, collection, name):
def uldap():
def ldap_search(filter, base=None, attr=None):
def module_by_name(module_name_):
def get_umc_admin_objects():
def umc_module_for_add(module, container_dn, superordinate=None):
def umc_module_for_edit(module, object_dn, superordinate=None):
def create_containers_and_parents(container_dn):
def get_exception():
def axapi_call(module, url, post=None):
def axapi_call_v3(module, url, method=None, body=None, signature=None):
def axapi_enabled_disabled(flag):
def get_dd_regions():
def is_uuid(u, version=4):
def is_ssh_url(url):
def get_fqdn_and_port(repo_url):
def add_host_key(module, fqdn, port=22, key_type='rsa', create_dir=False):
def sysv_is_enabled(name):
def get_sysv_script(name):
def sysv_exists(name):
def fail_if_missing(module, found, service, msg=''):
def daemonize(module, cmd):
def _botocore_exception_maybe():
def get_ec2_creds(module):
def boto_fix_security_token_in_profile(conn, profile_name):
def ec2_connect(module):
def paging(pause=0, marker_property='marker', result_key=None):
def ansible_dict_to_boto3_filter_list(filters_dict):
def boto3_tag_list_to_ansible_dict(tags_list, tag_name_key_name='Key', tag_value_key_name='Value'):
def ansible_dict_to_boto3_tag_list(tags_dict, tag_name_key_name='Key', tag_value_key_name='Value'):
def get_ec2_security_group_ids_from_names(sec_group_list, ec2_connection, vpc_id=None, boto3=True):
def sort_json_policy_dict(policy_dict):
def map_complex_type(complex_type, type_map):
def compare_aws_tags(current_tags_dict, new_tags_dict, purge_tags=True):
def _filter_non_json_lines(data):
def map_params_to_obj(module, param_to_xpath_map, param=None):
def _exponential_backoff(retries=10, delay=2, backoff=2, max_delay=60):
def _full_jitter_backoff(retries=10, delay=3, max_delay=60, _random=random):
def generic_urlparse(parts):
def RedirectHandlerFactory(follow_redirects=None, validate_certs=True):
def build_ssl_validation_error(hostname, port, paths, exc=None):
def open_url(url, data=None, headers=None, method=None, use_proxy=True, force=False, last_mod_time=None, timeout=10, validate_certs=True, url_username=None, url_password=None, http_agent=None, force_basic_auth=False, follow_redirects='urllib2', client_cert=None, client_key=None, cookies=None):
def basic_auth_header(username, password):
def url_argument_spec():
def fetch_url(module, url, data=None, headers=None, method=None, use_proxy=True, force=False, last_mod_time=None, timeout=10):
def get_fingerprint(path, passphrase=None):
def load_privatekey(path, passphrase=None):
def load_certificate(path):
def load_certificate_request(path):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def python_2_unicode_compatible(klass):
def _get_quote_state(token, quote_char):
def _count_jinja2_blocks(token, cur_depth, open_token, close_token):
def split_args(args):
def unquote(data):
def dict_diff(base, comparable):
def dict_merge(base, other):
def ternary(value, true_val, false_val):
def get_dict_of_struct(struct, connection=None, fetch_nested=False, attributes=None):
def engine_version(connection):
def create_connection(auth):
def convert_to_bytes(param):
def follow_link(connection, link):
def get_link_name(connection, link):
def equal(param1, param2, ignore_case=False):
def search_by_attributes(service, **kwargs):
def search_by_name(service, name, **kwargs):
def get_entity(service):
def get_id_by_name(service, name, raise_error=True, ignore_case=False):
def wait(service, condition, fail_condition=(lambda e: False), timeout=180, wait=True, poll_interval=3):
def ovirt_facts_full_argument_spec(**kwargs):
def ovirt_full_argument_spec(**kwargs):
def check_params(module):
def check_support(version, connection, module, params):
def gce_connect(module, provider=None):
def unexpected_error_msg(error):
def gcdns_connect(module, provider=None):
def unexpected_error_msg(error):
def rate_limit_argument_spec(spec=None):
def retry_argument_spec(spec=None):
def rate_limit(rate=None, rate_limit=None):
def retry(retries=None, retry_pause=1):
def cli_err_msg(cmd, err):
def ce_unknown_host_cb(host, fingerprint):
def get_nc_set_id(xml_str):
def get_xml_line(xml_list, index):
def merge_nc_xml(xml1, xml2):
def set_nc_config(module, xml_str):
def get_nc_config(module, xml_str):
def execute_nc_action(module, xml_str):
def execute_nc_cli(module, xml_str):
def check_ip_addr(ipaddr):
def to_bytes(obj, encoding='utf-8', errors=None, nonstring='simplerepr'):
def to_text(obj, encoding='utf-8', errors=None, nonstring='simplerepr'):
def eseries_host_argument_spec():
def request(url, data=None, headers=None, method='GET', use_proxy=True, force=False, last_mod_time=None, timeout=10, validate_certs=True, url_username=None, url_password=None, http_agent=None, force_basic_auth=True, ignore_errors=False):
def transform_list_to_dict(list_):
def merge_list_by_key(original_list, updated_list, key, ignore_when_null=[]):
def _standardize_value(value):
def get_system(module):
def purefa_argument_spec():
def api_wrapper(func):
@api_wrapper DCNL def get_system(module):
def infinibox_argument_spec():
def infinibox_required_together():
def get_platform():
def get_distribution():
def get_distribution_version():
def get_all_subclasses(cls):
def load_platform_subclass(cls, *args, **kwargs):
def json_dict_unicode_to_bytes(d, encoding='utf-8', errors='surrogate_or_strict'):
def json_dict_bytes_to_unicode(d, encoding='utf-8', errors='surrogate_or_strict'):
def return_values(obj):
def _remove_values_conditions(value, no_log_strings, deferred_removals):
def remove_values(value, no_log_strings):
def heuristic_log_sanitize(data, no_log_values=None):
def human_to_bytes(number, default_unit=None, isbits=False):
def is_executable(path):
def _load_params():
def env_fallback(*args, **kwargs):
def _lenient_lowercase(lst):
def find_vm_by_id(content, vm_id, vm_id_type='vm_name', datacenter=None, cluster=None, folder=None, match_first=False):
def compile_folder_path_for_object(vobj):
def _get_vm_prop(vm, attributes):
def gather_vm_facts(content, vm):
def fetch_file_from_guest(module, content, vm, username, password, src, dest):
def push_file_to_guest(module, content, vm, username, password, src, dest, overwrite=True):
def serialize_spec(clonespec):
def rax_slugify(value):
def rax_clb_node_to_dict(obj):
def rax_to_dict(obj, obj_type='standard'):
def rax_find_bootable_volume(module, rax_module, server, exit=True):
def rax_find_image(module, rax_module, image, exit=True):
def rax_find_volume(module, rax_module, name):
def rax_find_network(module, rax_module, network):
def rax_find_server(module, rax_module, server):
def rax_find_loadbalancer(module, rax_module, loadbalancer):
def rax_argument_spec():
def rax_required_together():
def setup_rax_module(module, rax_module, region_required=True):
def ismount(path):
def order_patterns(patterns):
def split_host_pattern(pattern):
def get_ini_config(p, entries):
def get_pid_location(module):
def _convert_host_to_ip(host):
def _convert_host_to_hex(host):
def _create_connection(host, port, connect_timeout):
def _filter_non_json_lines(data):
def imc_response(module, rawoutput, rawinput=''):
def logout(module, url, cookie, timeout):
def merge(one, two):
def wakeonlan(module, mac, broadcast, port):
def add(module):
def remove(module):
def add_check(module, check):
def remove_check(module, check_id):
def add_service(module, service):
def remove_service(module, service_id):
def get_service_by_id_or_name(consul_api, service_id_or_name):
def set_acl(consul_client, configuration):
def update_acl(consul_client, configuration):
def create_acl(consul_client, configuration):
def remove_acl(consul, configuration):
def load_acl_with_token(consul, token):
def encode_rules_as_hcl_string(rules):
def encode_rule_as_hcl_string(rule):
def decode_rules_as_hcl_string(rules_as_hcl):
def decode_rules_as_json(rules_as_json):
def encode_rules_as_json(rules):
def decode_rules_as_yml(rules_as_yml):
def decode_acl_as_json(acl_as_json):
def decode_acls_as_json(acls_as_json):
def get_consul_client(configuration):
def check_dependencies():
def main():
def remove_value(module):
def pfilter(f, patterns=None, use_regex=False):
def agefilter(st, now, age, timestamp):
def sizefilter(st, size):
def contentfilter(fsname, pattern):
def crc32(path):
def shell_escape(string):
def count_nodes(module, tree, xpath, namespaces):
def is_node(tree, xpath, namespaces):
def is_attribute(tree, xpath, namespaces):
def xpath_matches(tree, xpath, namespaces):
def delete_xpath_target(module, tree, xpath, namespaces):
def split_xpath_last(xpath):
def children_to_nodes(module=None, children=[], type='yaml'):
def split_pre_existing_dir(dirname):
def adjust_recursive_directory_permissions(pre_existing_dir, new_directory_list, module, directory_args, changed):
def split_entry(entry):
def build_entry(etype, entity, permissions=None, use_nfsv4_acls=False):
def build_command(module, mode, path, follow, default, recursive, entry=''):
def acl_changed(module, cmd):
def get_state(b_path):
def assemble_from_fragments(src_path, delimiter=None, compiled_regexp=None, ignore_hidden=False):
def rax_dns_record(module, comment=None, data=None, domain=None, name=None, overwrite=True, priority=None, record_type='A', state='present', ttl=7200):
def _get_node(lb, node_id=None, address=None, port=None):
def _upload_folder(cf, folder, container, ttl=None, headers=None):
def upload(module, cf, container, src, dest, meta, expires):
def download(module, cf, container, src, dest, structure):
def delete(module, cf, container, src, dest):
def get_meta(module, cf, container, src, dest):
def put_meta(module, cf, container, src, dest, meta, clear_meta):
def delete_meta(module, cf, container, src, dest, meta):
def cloudfiles(module, container, src, dest, method, typ, meta, clear_meta, structure, expires):
def cloudfiles(module, container_, state, meta_, clear_meta, typ, ttl, public, private, web_index, web_error):
def randompass():
def getInstanceDetails(api, server):
def create_datacenter(module, profitbricks):
def remove_datacenter(module, profitbricks):
def create_volume(module, profitbricks):
def delete_volume(module, profitbricks):
def _attach_volume(module, profitbricks, datacenter, volume):
def attach_volume(module, profitbricks):
def detach_volume(module, profitbricks):
def create_virtual_machine(module, profitbricks):
def remove_virtual_machine(module, profitbricks):
def _remove_boot_volume(module, profitbricks, datacenter_id, server_id):
def startstop_machine(module, profitbricks, state):
def _get_datacenter_id(datacenters, identity):
def _get_server_id(servers, identity):
def create_nic(module, profitbricks):
def delete_nic(module, profitbricks):
def normalize_image(image):
def is_running(container):
def check_dependencies(module):
def present(manager, containers, count, name):
def started(manager, containers, count, name):
def reloaded(manager, containers, count, name):
def restarted(manager, containers, count, name):
def stopped(manager, containers, count, name):
def killed(manager, containers, count, name):
def absent(manager, containers, count, name):
def create_image(gce, name, module):
def delete_image(gce, name, module):
def pull_messages(pull_params, sub):
def instance_update(instance):
def _check_params(params, field_list):
def _validate_autoscaling_params(params):
def _validate_named_port_params(params):
def _get_instance_list(mig, field='name', filter_list=['NONE']):
def _gen_gce_as_policy(as_params):
def create_autoscaler(gce, mig, params):
def update_autoscaler(gce, autoscaler, params):
def delete_autoscaler(autoscaler):
def get_autoscaler(gce, name, zone):
def create_mig(gce, params):
def delete_mig(mig):
def recreate_instances_in_mig(mig):
def resize_mig(mig, size):
def get_mig(gce, name, zone):
def update_named_ports(mig, named_ports):
def list_func(data, member='name'):
def find_snapshot(volume, name):
def get_address(gce, name, region):
def create_address(gce, params):
def delete_address(address):
def get_info(inst):
def create_instance_template(module, gce):
def delete_instance_template(module, gce):
def module_controller(module, gce):
def check_if_system_state_would_be_changed(module, gce):
def transform_headers(headers):
def _build_target_proxy_dict(params, project_id=None):
def get_target_http_proxy(client, name, project_id=None):
def create_target_http_proxy(client, params, project_id):
def delete_target_http_proxy(client, name, project_id):
def update_target_http_proxy(client, target_proxy, params, name, project_id):
def _union_items(baselist, comparelist):
def _intersect_items(baselist, comparelist):
def _get_changed_items(baselist, comparelist):
def modify_tags(gce, module, node, tags, state='present'):
def format_allowed_section(allowed):
def format_allowed(allowed):
def sorted_allowed_list(allowed_list):
def create_zone(module, gcdns, zone):
def remove_zone(module, gcdns, zone):
def _get_zone(gcdns, zone_name):
def _sanity_check(module):
def main():
def _validate_params(params):
def _validate_path_matcher_params(path_matchers):
def _validate_host_rules_params(host_rules):
def _build_path_matchers(path_matcher_list, project_id):
def _build_url_map_dict(params, project_id=None):
def get_url_map(client, name, project_id=None):
def create_url_map(client, params, project_id):
def delete_url_map(client, name, project_id):
def update_url_map(client, url_map, params, name, project_id):
def _validate_healthcheck_params(params):
def _build_healthcheck_dict(params):
def get_healthcheck(client, name, project_id=None, resource_type='HTTP'):
def create_healthcheck(client, params, project_id, resource_type='HTTP'):
def delete_healthcheck(client, name, project_id, resource_type='HTTP'):
def update_healthcheck(client, healthcheck, params, name, project_id, resource_type='HTTP'):
def get_instance_info(inst):
def create_instances(module, gce, instance_names, number, lc_zone):
def change_instance_state(module, gce, instance_names, number, zone, state):
def _validate_params(params):
def _validate_backend_params(backends):
def get_backend_service(gce, name):
def create_backend_service(gce, params):
def delete_backend_service(bes):
def _build_global_forwarding_rule_dict(params, project_id=None):
def get_global_forwarding_rule(client, name, project_id=None):
def create_global_forwarding_rule(client, params, project_id):
def delete_global_forwarding_rule(client, name, project_id):
def update_global_forwarding_rule(client, forwarding_rule, params, name, project_id):
def create_record(module, gcdns, zone, record):
def remove_record(module, gcdns, record):
def _get_record(gcdns, zone, record_type, record_name):
def _get_zone(gcdns, zone_name, zone_id):
def _records_match(old_ttl, old_record_data, new_ttl, new_record_data):
def _sanity_check(module):
def _additional_sanity_checks(module, zone):
def main():
def main():
def main():
def serialize_device(device):
def change_keys(recs, key='uuid', filter_func=None):
def get_host(session):
def main():
def pubnub_user(module):
def pubnub_account(module, user):
def pubnub_application(module, account):
def pubnub_keyset(module, account, application):
def pubnub_block(module, account, keyset):
def pubnub_event_handler(block, data):
def _failure_title_from_exception(exception):
def _content_of_file_at_path(path):
def _needs_update(module, port, cloud):
def _wait(timeout, cloud, server, action, module):
def _system_state_change(action, status):
def _system_state_change(state, device):
def _can_update(subnet, module, cloud):
def _needs_update(subnet, module, cloud):
def _system_state_change(module, project_quota_output):
def _needs_update(cloud, module, router, network, internal_subnet_ids):
def _system_state_change(cloud, module, router, network, internal_ids):
def _needs_update(module, secgroup):
def _ports_match(protocol, module_min, module_max, rule_min, rule_max):
def _find_matching_rule(module, secgroup, remotegroup):
def create_script(command):
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def _search_by_lun(disks_service, lun_id):
def convert_time(time):
def get_ssh_certificate_tokens(module, ssh_cert_path):
def create_virtual_machine(module, azure):
def terminate_virtual_machine(module, azure):
def validate_rule(rule, rule_type=None):
def create_rule_instance(rule):
def create_rule_dict_from_obj(rule):
def virtual_network_to_dict(vnet):
def iterate_all(attr, map_method, **kwargs):
def prefix_to_attr(attr_id):
def first_or_default(items, default=None):
def has_tags(available, required):
def has_targets(available, required):
def group_list_of_dict(array):
def main():
def fix_return(node):
def alias_details(client, module):
def all_details(client, module):
def config_details(client, module):
def mapping_details(client, module):
def policy_details(client, module):
def version_details(client, module):
def main():
def boto_exception(err):
def get_stack_events(cfn, stack_name):
def stack_operation(cfn, stack_name, operation):
def get_zone_by_name(conn, module, zone_name, want_private, zone_id, want_vpc_id):
def commit(changes, retry_interval, wait, wait_timeout):
def find_address(ec2, public_ip, device_id, isinstance=True):
def address_is_associated_with_device(ec2, address, device_id, isinstance=True):
def allocate_address(ec2, domain, reuse_existing_ip_allowed):
def release_address(ec2, address, check_mode):
def find_device(ec2, module, device_id, isinstance=True):
def find_health_check(conn, wanted):
def _collect_facts(resource):
def create_cluster(module, redshift):
def describe_cluster(module, redshift):
def delete_cluster(module, redshift):
def modify_cluster(module, redshift):
def fetch_dhcp_options_for_vpc(vpc_conn, vpc_id):
def match_dhcp_options(vpc_conn, tags=None, options=None):
def pc(key):
def set_api_params(module, module_params):
def validate_params(module, aws):
def get_lambda_alias(module, aws):
def lambda_alias(module, aws):
def main():
def main():
def deduplicate_rules_args(rules):
def get_target_from_rule(module, client, rule, name, group, groups, vpc_id):
def create_empty_api(module, client):
def delete_rest_api(module, client, api_id):
def ensure_api_in_correct_state(module, client, api_id=None, api_data=None, stage=None, deploy_desc=None):
def fail_json_aws(module, exception, msg=None):
def get_current_ttl_state(c, table_name):
def does_state_need_changing(attribute_name, desired_state, current_spec):
def set_ttl_state(c, table_name, state, attribute_name):
def create(module, connection, replication_id, cluster_id, name):
def copy(module, connection, name, target, bucket):
def delete(module, connection, name):
def find_asgs(conn, module, name=None, tags=None):
def is_fakes3(s3_url):
def is_walrus(s3_url):
def get_nat_gateways(client, subnet_id=None, nat_gateway_id=None, states=None, check_mode=False):
def wait_for_status(client, wait_timeout, nat_gateway_id, status, check_mode=False):
def gateway_in_subnet_exists(client, subnet_id, allocation_id=None, check_mode=False):
def get_eip_allocation_id_by_address(client, eip_address, check_mode=False):
def allocate_eip_address(client, check_mode=False):
def release_address(client, allocation_id, check_mode=False):
def create(client, subnet_id, allocation_id, client_token=None, wait=False, wait_timeout=0, if_exist_do_not_create=False, check_mode=False):
def pre_create(client, subnet_id, allocation_id=None, eip_address=None, if_exist_do_not_create=False, wait=False, wait_timeout=0, client_token=None, check_mode=False):
def remove(client, nat_gateway_id, wait=False, wait_timeout=0, release_eip=False, check_mode=False):
def boto_exception(err):
def assert_policy_shape(policy):
def boto_exception(err):
def calculate_multipart_etag(source_path, chunk_size=DEFAULT_CHUNK_SIZE):
def calculate_local_etag(filelist, key_prefix=''):
def boto_exception(err):
def boto_exception(err):
def _paginate(func, attr):
def set_users_groups(module, iam, name, groups, updated=None, new_name=None):
def get_cloudwatchevents_client(module):
def create_instance(module, client, instance_name):
def delete_instance(module, client, instance_name):
def restart_instance(module, client, instance_name):
def startstop_instance(module, client, instance_name, state):
def _find_instance_info(client, instance_name):
def get_vpc_info(vpc):
def find_vpc(module, vpc_conn, vpc_id=None, cidr=None):
def routes_match(rt_list=None, rt=None, igw=None):
def rtb_changed(route_tables=None, vpc_conn=None, module=None, vpc=None, igw=None):
def create_vpc(module, vpc_conn):
def terminate_vpc(module, vpc_conn, vpc_id=None, cidr=None):
def get_instance_info(inst):
def boto_supports_associate_public_ip_address(ec2):
def boto_supports_profile_name_arg(ec2):
def boto_supports_volume_encryption():
def boto_supports_param_in_spot_request(ec2, param):
def await_spot_requests(module, ec2, spot_requests, count):
def create_instances(module, ec2, vpc, override_count=None):
def terminate_instances(module, ec2, instance_ids):
def startstop_instances(module, ec2, instance_ids, state, instance_tags):
def restart_instances(module, ec2, instance_ids, state, instance_tags):
def enforce_required_arguments(module):
def to_dict(items, key, value):
def get_server_certs(iam, name=None):
def get_server_certificate(client, module, server_certificate_name):
def list_server_certificates(client, module, path_prefix):
def boto_exception(err):
def build_kwargs(registry_id):
def boto_exception(err):
def vpc_exists(module, vpc, name, cidr_block, multi):
def iterate_all(attr, map_method, **kwargs):
def targets_equal(keys, a, b):
def dict_diff(dict1, dict2, by_key=False):
def first_or_default(items, default=None):
def wait_for(callback, value, timeout=EFSConnection.DEFAULT_WAIT_TIMEOUT_SECONDS):
def main():
def pc(key):
def ordered_obj(obj):
def set_api_sub_params(params):
def validate_params(module, aws):
def get_qualifier(module):
def lambda_event_stream(module, aws):
def main():
def get_url(module, url):
def ubuntu(module):
def lookup_ubuntu_ami(table, release, stream, store, arch, region, virt):
def pipeline_id(client, name):
def pipeline_description(client, dp_id):
def pipeline_field(client, dp_id, field):
def run_with_timeout(timeout, func, *func_args, **func_kwargs):
def check_dp_exists(client, dp_id):
def check_dp_status(client, dp_id, status):
def activate_pipeline(client, module):
def deactivate_pipeline(client, module):
def delete_pipeline(client, module):
def format_tags(tags):
def get_result(client, dp_id):
def diff_pipeline(client, module, objects, unique_id, dp_name):
def define_pipeline(client, module, objects, dp_id):
def create_pipeline(client, module):
def convert_to_lower(data):
def make_tags_in_proper_format(tags):
def make_tags_in_aws_format(tags):
def get_tags(client, stream_name, check_mode=False):
def find_stream(client, stream_name, check_mode=False):
def wait_for_status(client, stream_name, status, wait_timeout=300, check_mode=False):
def tags_action(client, stream_name, tags, action='create', check_mode=False):
def recreate_tags_from_list(list_of_tags):
def update_tags(client, stream_name, tags, check_mode=False):
def stream_action(client, stream_name, shard_count=1, action='create', timeout=300, check_mode=False):
def retention_action(client, stream_name, retention_period=24, action='increase', check_mode=False):
def update(client, current_stream, stream_name, retention_period=None, tags=None, wait=False, wait_timeout=300, check_mode=False):
def create_stream(client, stream_name, number_of_shards=1, retention_period=None, tags=None, wait=False, wait_timeout=300, check_mode=False):
def delete_stream(client, stream_name, wait=False, wait_timeout=300, check_mode=False):
def create_trail(module, client, ct_params):
def tag_trail(module, client, tags, trail_arn, curr_tags=None, dry_run=False):
def get_tag_list(keys, tags):
def set_logging(module, client, name, action):
def get_trail_facts(module, client, name):
def delete_trail(module, client, trail_arn):
def update_trail(module, client, ct_params):
def get_bucket_list(module, connection):
def main():
def get_block_device_mapping(image):
def boto_supports_volume_encryption():
def boto_supports_kms_key_id():
def modify_dot_attribute(module, ec2, instance, device_name):
def set_parameter(param, value, immediate):
def modify_group(group, params, immediate=False):
def get_block_device_mapping(image):
def create_image(module, ec2):
def deregister_image(module, ec2):
def update_image(module, ec2, image_id):
def copy_image(module, ec2):
def find_subnets(vpc_conn, vpc_id, identified_subnets):
def find_igw(vpc_conn, vpc_id):
def hashable_policy(policy, policy_list):
def py3cmp(a, b):
def compare_policies(current_policy, new_policy):
def is_fakes3(s3_url):
def is_walrus(s3_url):
def _get_most_recent_snapshot(snapshots, max_snapshot_age_secs=None, now=None):
def _create_with_wait(snapshot, wait_timeout_secs, sleep_func=time.sleep):
def create(module, conn, name, group_family, description):
def delete(module, conn, name):
def make_current_modifiable_param_dict(module, conn, name):
def check_valid_modification(module, values, modifiable_params):
def check_changed_parameter_values(values, old_parameters, new_parameters):
def modify(module, conn, name, values):
def reset(module, conn, name, values):
def get_info(conn, name):
def boto_exception(err):
def get_listener(connection, module, elb_arn, listener_port):
def get_elb(connection, module):
def ensure_listeners_default_action_has_arn(connection, module, listeners):
def ensure_rules_action_has_arn(connection, module, rules):
def compare_listener(current_listener, new_listener):
def compare_condition(current_conditions, condition):
def compare_rule(current_rule, new_rule):
def compare_listeners(connection, module, current_listeners, new_listeners, purge_listeners):
def compare_rules(connection, module, current_listeners, listener):
def create_or_update_elb_listeners(connection, module, elb):
def create_or_update_elb(connection, connection_ec2, module):
def get_obj(content, vimtype, name):
def migrate_vm(vm_object, host_object):
def vmware_path(datastore, datacenter, path):
def power_state(vm, state, force):
def gather_facts(vm):
def config_check(name, passed, default, module):
def head_splitter(headfile, remote, module=None, fail_on_error=False):
def get_version(module, git_path, dest, ref='HEAD'):
def clone(git_path, module, repo, dest, remote, depth, version, bare, reference, refspec, verify_commit):
def reset(git_path, module, dest):
def get_diff(module, git_path, dest, repo, remote, depth, bare, before, after):
def get_head_branch(git_path, module, dest, remote, bare=False):
def get_remote_url(git_path, module, dest, remote):
def set_remote_url(git_path, module, repo, dest, remote):
def fetch(git_path, module, repo, dest, version, remote, depth, bare, refspec, git_version_used):
def submodule_update(git_path, module, dest, track_submodules, force=False):
def set_remote_branch(git_path, module, dest, remote, version, depth):
def git_version(git_path, module):
def git_archive(git_path, module, dest, archive, archive_fmt, version):
def create_archive(git_path, module, dest, archive, version, repo, result):
def manage_issue(module, taiga_host, project_name, issue_subject, issue_priority, issue_status, issue_type, issue_severity, issue_description, issue_attachment, issue_attachment_description, issue_tags, state, check_mode=False):
def present(dest, username, password, crypt_scheme, create, check_mode):
def absent(dest, username, check_mode):
def search_existing_config(config, option):
def remove_tmp_file(file_path):
def create_apache_identifier(name):
def update_resources(module, p):
def update_fields(p):
def get_cert_days(module, cert_file):
def write_file(module, dest, content):
def regexp_extraction(string, _regexp, groups=1):
def main():
def send(module, src, dest, msg, media, user_id, api_token, api_secret):
def send_message(module, client_id, client_secret, topic, msg):
def send_msg(msg, server='localhost', port='6667', channel=None, nick_to=[], key=None, topic=None, nick='ansible', color='none', passwd=False, timeout=30, use_ssl=False, part=True, style=None):
def send_msg_v1(module, token, room, msg_from, msg, msg_format='text', color='yellow', notify=False, api=MSG_URI_V1):
def send_msg_v2(module, token, room, msg_from, msg, msg_format='text', color='yellow', notify=False, api=NOTIFY_URI_V2):
def escape_quotes(text):
def spark_message(module):
def main():
def get_user_diff(client, ipa_user, module_user):
def get_ssh_key_fingerprint(ssh_key):
def check_compatibility(module, client):
def user_find(client, user, db_name):
def privileges_get(cursor, user, host):
def privileges_unpack(priv, mode):
def typedvalue(value):
def setvariable(cursor, mysqlvar, value):
def user_add(cursor, user, password, role_attr_flags, encrypted, expires):
def user_should_we_change_password(current_role_attrs, user, password, encrypted):
def user_alter(db_connection, module, user, password, role_attr_flags, encrypted, expires, no_password_changes):
def user_delete(cursor, user):
def has_table_privileges(cursor, user, table, privs):
def has_database_privileges(cursor, user, db, privs):
def parse_role_attrs(cursor, role_attr_flags):
def parse_privs(privs, db):
def get_pg_server_version(cursor):
def get_valid_flags_by_version(cursor):
def login_flags(db, host, port, user, db_prefix=True):
def lang_exists(cursor, lang):
def lang_istrusted(cursor, lang):
def lang_altertrust(cursor, lang, trust):
def lang_add(cursor, lang, trust):
def lang_drop(cursor, lang, cascade):
def partial(f, *args, **kwargs):
def human_to_bytes(size):
def get_volume(module, array):
def create_volume(module, array):
def update_volume(module, array):
def delete_volume(module, array):
@api_wrapper DCNL def get_pool(module, system):
@api_wrapper DCNL def create_pool(module, system):
@api_wrapper DCNL def update_pool(module, system, pool):
@api_wrapper DCNL def delete_pool(module, pool):
@api_wrapper DCNL def get_export(module, system):
@api_wrapper DCNL def update_client(module, export):
@api_wrapper DCNL def delete_client(module, export):
@api_wrapper DCNL def get_pool(module, system):
@api_wrapper DCNL def get_filesystem(module, system):
@api_wrapper DCNL def create_filesystem(module, system):
@api_wrapper DCNL def update_filesystem(module, filesystem):
@api_wrapper DCNL def delete_filesystem(module, filesystem):
@api_wrapper DCNL def get_pool(module, system):
@api_wrapper DCNL def get_volume(module, system):
@api_wrapper DCNL def create_volume(module, system):
@api_wrapper DCNL def update_volume(module, volume):
@api_wrapper DCNL def delete_volume(module, volume):
@api_wrapper DCNL def get_filesystem(module, system):
@api_wrapper DCNL def get_export(module, filesystem, system):
@api_wrapper DCNL def update_export(module, export, filesystem, system):
@api_wrapper DCNL def delete_export(module, export):
def post_annotation(annotation, api_key):
def create_annotation(module):
def build_headers(api_token):
def main():
def selector(module):
def query_log_status(module, le_path, path, state='present'):
def follow_log(module, le_path, logs, name=None, logtype=None):
def unfollow_log(module, le_path, logs):
def send_deploy_event(module, key, revision_id, deployed_by='Ansible', deployed_to=None, repository=None):
def send_annotation_event(module, key, msg, annotated_by='Ansible', level=None, instance_id=None, event_epoch=None):
def selector(module):
def get_version(pacman_output):
def query_package(module, pacman_path, name, state='present'):
def a_valid_tap(tap):
def already_tapped(module, brew_path, tap):
def add_tap(module, brew_path, tap, url=None):
def add_taps(module, brew_path, taps):
def remove_tap(module, brew_path, tap):
def remove_taps(module, brew_path, taps):
def is_installed(xbps_output):
def query_package(module, xbps_path, name, state='present'):
def update_package_db(module, xbps_path):
def upgrade(module, xbps_path):
def remove_packages(module, xbps_path, packages):
def install_packages(module, xbps_path, state, packages):
def check_packages(module, xbps_path, packages, state):
def main():
def compare_package(version1, version2):
def query_package(module, name, depot=None):
def remove_package(module, name):
def install_package(module, depot, name):
def is_pubkey(string):
def query_package(module, name):
def get_cache_mtime():
def get_updated_cache_time():
def get_cache(module):
def update_package_db(module, port_path):
def query_package(module, port_path, name, state='present'):
def remove_packages(module, port_path, packages):
def install_packages(module, port_path, packages):
def activate_packages(module, port_path, packages):
def deactivate_packages(module, port_path, packages):
def _get_cmd(*args):
def _parse_repos(module):
def _repo_changes(realrepo, repocmp):
def repo_exists(module, repodata, overwrite_multiple):
def addmodify_repo(module, repodata, old_repos, zypper_version, warnings):
def remove_repo(module, repo):
def runrefreshrepo(module, auto_import_keys=False, shortname=None):
def get_sorcery_ver(module):
def codex_fresh(codex, module):
def codex_list(module):
def update_sorcery(module):
def update_codex(module):
def match_depends(module):
def manage_spells(module):
def update_package_db(module, opkg_path):
def query_package(module, opkg_path, name, state='present'):
def remove_packages(module, opkg_path, packages):
def install_packages(module, opkg_path, packages):
def parse_key_id(key_id):
def shorten_key_ids(key_id_list):
def split_name_version(name):
def get_installed_state(m, packages):
def get_cmd(m, subcommand):
def package_present(m, name, want_latest):
def package_update_all(m):
def package_absent(m, name):
def repo_refresh(m):
def main():
def init_layman(config=None):
def download_url(module, url, dest):
def install_overlay(module, name, list_url=None):
def uninstall_overlay(module, name):
def sync_overlay(name):
def sync_overlays():
def _configure_base(module, base, conf_file, disable_gpg_check, installroot='/'):
def _specify_repositories(base, disablerepo, enablerepo):
def _base(module, conf_file, disable_gpg_check, disablerepo, enablerepo, installroot):
def _package_dict(package):
def list_items(module, base, command):
def _mark_package_install(module, base, pkg_spec):
def main():
def transaction_exists(pkglist):
def local_nvra(module, path):
def get_local_version(pear_output):
def get_repository_version(pear_output):
def query_package(module, name, state='present'):
def _get_packages(module, pip, chdir):
def _is_present(name, version, installed_pkgs, pkg_command):
def _get_package_info(module, package, env=None):
def absolute_location(url, location):
def url_get(module, url, dest, use_proxy, last_mod_time, force, timeout=10, headers=None, tmp_dest=''):
def extract_filename_from_headers(headers):
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def connect(module):
def switch_info(module):
def switch_in_compliance(module, sw_info):
def server_configurable_configlet(module, sw_info):
def port_configurable(module, configlet):
def configlet_action(module, configlet):
def current_config(module, config):
def valid_template(port, template):
def config_from_template(module):
def updated_configlet_content(module, existing_config, new_config):
def configlet_update_task(module):
def wait_for_task_completion(module, task):
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def map_obj_to_commands(want, have, module):
def main():
def main():
def get_interface_type(interface):
def get_interface_mode(interface, module):
def interface_is_portchannel(interface, module):
def get_switchport(port, module):
def get_switchport_config_commands(interface, existing, proposed, module):
def is_switchport_default(existing):
def numerical_sort(string_int_list):
def validate_feature(module, mode='show'):
def main():
def main():
def numerical_sort(iterable):
def get_vlan_config_commands(vlan, vid):
def get_vlan(vlanid, module):
def get_boot_options(module):
def set_boot_options(module, image_name, kickstart=None):
def is_default_interface(interface, module):
def get_interface_type(interface):
def get_manual_interface_attributes(interface, module):
def get_interface(intf, module):
def get_interfaces_dict(module):
def normalize_interface(if_name):
def get_interface_config_commands(interface, intf, existing):
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def aci_response(result, rawoutput, rest_type='xml'):
def main():
def main():
def main():
def get_formated_ipaddr(input_ip):
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def write_to_ports_conf(module):
def build_desired_iface_config(module):
def config_dict_changed(module):
def config_changed(module):
def add_glob_to_array(_bondmems):
def build_desired_iface_config(module):
def config_dict_changed(module):
def config_changed(module):
def command_helper(module, command, errmsg=None):
def check_pending(module):
def add_glob_to_array(_bridgemems):
def build_desired_iface_config(module):
def config_dict_changed(module):
def config_changed(module):
def _commit(device, device_group=None):
def main():
def pn_cli(module):
def check_cli(module, cli):
def run_cli(module, cli):
def get_command_from_state(state):
def main():
def pn_cli(module):
def check_cli(module, cli):
def run_cli(module, cli):
def get_command_from_state(state):
def main():
def pn_cli(module):
def check_cli(module, cli):
def get_nic(module, cli):
def run_cli(module, cli):
def get_command_from_state(state):
def main():
def pn_cli(module):
def check_cli(module, cli):
def run_cli(module, cli):
def get_command_from_state(state):
def main():
def pn_cli(module):
def check_cli(module, cli):
def run_cli(module, cli):
def get_command_from_state(state):
def main():
def pn_cli(module):
def check_cli(module, cli):
def run_cli(module, cli):
def get_command_from_state(state):
def main():
def pn_cli(module):
def check_cli(module, cli):
def run_cli(module, cli):
def get_command_from_state(state):
def main():
def get_command_from_state(state):
def main():
def pn_cli(module):
def run_cli(module, cli):
def main():
def pn_cli(module):
def check_cli(module, cli):
def run_cli(module, cli):
def get_command_from_state(state):
def main():
def pn_cli(module):
def check_cli(module, cli):
def run_cli(module, cli):
def get_command_from_state(state):
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def is_config_exist(cmp_cfg, test_cfg):
def is_valid_ip_vpn(vpname):
def get_ip_version(address):
def get_interface_type(interface):
def get_rate_limit(config):
def get_forward_enp(config):
def main():
def is_valid_ip_vpn(vpname):
def check_ip_addr(ipaddr):
def check_default_ip(ipaddr):
def get_interface_type(interface):
def main():
def main():
def main():
def get_interface_type(interface):
def main():
def get_wildcard_mask(mask):
def main():
def main():
def get_interface_type(interface):
def is_valid_v4addr(addr):
def main():
def main():
def is_valid_address(address):
def get_interface_type(interface):
def main():
def build_config_xml(xmlstr):
def main():
def main():
def get_interface_type(interface):
def mode_xml_to_cli_str(mode):
def hash_type_xml_to_cli_str(hash_type):
def main():
def main():
def check_name(**kwargs):
def check_module_argument(**kwargs):
def main():
def check_ip_addr(ipaddr):
def check_default_ip(ipaddr):
def main():
def main():
def build_config_xml(xmlstr):
def is_valid_value(vrf_targe_value):
def main():
def main():
def check_ip_addr(**kwargs):
def check_bgp_enable_args(**kwargs):
def check_bgp_confed_args(**kwargs):
def main():
def check_name(**kwargs):
def check_module_argument(**kwargs):
def main():
def main():
def main():
def is_valid_value(vrf_targe_value):
def main():
def main():
def is_valid_address(address):
def main():
def get_interface_type(interface):
def is_valid_v4addr(addr):
def main():
def build_config_xml(xmlstr):
def main():
def is_valid_address(address):
def main():
def main():
def main():
def get_interface_type(interface):
def is_portswitch_enalbed(iftype):
def vlan_bitmap_undo(bitmap):
def is_vlan_bitmap_empty(bitmap):
def main():
def is_config_exist(cmp_cfg, test_cfg):
def is_valid_v4addr(addr):
def get_evn_peers(config):
def get_evn_srouce(config):
def get_evn_reflect_client(config):
def main():
def main():
def main():
def is_config_exist(cmp_cfg, test_cfg):
def main():
def main():
def main():
def main():
def get_interface_type(interface):
def is_admin_state_enable(iftype):
def is_portswitch_enalbe(iftype):
def main():
def main():
def get_interface_type(interface):
def is_ethernet_port(interface):
def main():
def get_cli_exception(exc=None):
def main():
def judge_is_mac_same(mac1, mac2):
def get_interface_type(interface):
def main():
def main():
def is_config_exist(cmp_cfg, test_cfg):
def get_nvo3_gw_enhanced(cmp_cfg):
def main():
def get_interface_type(interface):
def main():
def main():
def main():
def is_ipv4_addr(ip_addr):
def is_config_exist(cmp_cfg, test_cfg):
def main():
def main():
def main():
def is_interface_support_setjumboframe(interface):
def get_interface_type(interface):
def build_config_xml(xmlstr):
def main():
def main():
def vlan_vid_to_bitmap(vid):
def bitmap_to_vlan_list(bitmap):
def is_vlan_bitmap_empty(bitmap):
def is_vlan_in_bitmap(vid, bitmap):
def get_interface_type(interface):
def main():
def is_config_exist(cmp_cfg, test_cfg):
def is_valid_v4addr(addr):
def mac_format(mac):
def get_dfs_source_ip(config):
def get_dfs_source_vpn(config):
def get_dfs_udp_port(config):
def get_dfs_peers(config):
def get_ip_vpn(config):
def get_ip_vpn_vni(config):
def get_vbdif_vpn(config):
def get_vbdif_mac(config):
def main():
def main():
def main():
def main():
def build_config_xml(xmlstr):
def is_valid_v4addr(addr):
def is_valid_v6addr(addr):
def is_valid_tag(tag):
def is_valid_preference(pref):
def is_valid_description(description):
def main():
def main():
def get_interface_type(interface):
def main():
def get_out_direct_default(out_direct):
def get_channel_name_default(channel_id):
def main():
def main():
def get_interface_type(interface):
def main():
def is_config_exist(cmp_cfg, test_cfg):
def is_valid_address(address):
def is_valid_as_number(as_number):
def main():
def semanage_port_get_ports(seport, setype, proto):
def semanage_port_get_type(seport, port, proto):
def semanage_port_add(module, ports, proto, setype, do_reload, serange='s0', sestore=''):
def semanage_port_del(module, ports, proto, setype, do_reload, sestore=''):
def _load_dist_subclass(cls, *args, **kwargs):
def semanage_fcontext_exists(sefcontext, target, ftype):
def semanage_fcontext_modify(module, result, target, ftype, setype, do_reload, serange, seuser, sestore=''):
def semanage_fcontext_delete(module, result, target, ftype, do_reload, sestore=''):
def _load_dist_subclass(cls, *args, **kwargs):
def _escape_fstab(v):
def set_mount(module, args):
def unset_mount(module, args):
def mount(module, args):
def umount(module, path):
def remount(module, args):
def is_bind_mounted(module, linux_mounts, dest, src=None, fstype=None):
def get_linux_mounts(module):
def enforce_state(module, params):
def sanity_check(module, host, key, sshkeygen):
def search_for_host_key(module, host, key, hash_host, path, sshkeygen):
def normalize_known_hosts_key(key):
def _get_dev_size(dev, module):
def _get_fs_size(fssize_cmd, dev, module):
def parse_unit(size_str, unit=''):
def parse_partition_info(parted_output, unit):
def format_disk_size(size_bytes, unit):
def get_unlabeled_device_info(device, unit):
def get_device_info(device, unit):
def check_parted_label(device):
def parted_version():
def parted(script, device, align):
def read_record(file_path, default=None):
def part_exists(partitions, attribute, number):
def check_size_format(size_str):
def check_cert_present(module, executable, keystore_path, keystore_pass, alias):
def import_cert_url(module, executable, url, port, keystore_path, keystore_pass, alias):
def import_cert_path(module, executable, path, keystore_path, keystore_pass, alias):
def delete_cert(module, executable, keystore_path, keystore_pass, alias):
def test_keytool(module, executable):
def test_keystore(module, keystore_path):
def action_handler(action_func, action_func_args):
def is_available(name, ubuntuMode):
def is_present(name):
def fix_case(name):
def replace_line(existing_line, new_line):
def set_locale(name, enabled=True):
def apply_change(targetState, name):
def apply_change_ubuntu(targetState, name):
def keyfile(module, user, write=False, path=None, manage_dir=True):
def parseoptions(module, options):
def parsekey(module, raw_key, rank=None):
def enforce_state(module, params):
def run_command(command, module, check_rc=True):
def sanitize_output(output):
def mk_boolean(value):
def _get_shebang(interpreter, task_vars, args=tuple()):
def recursive_finder(name, data, py_module_names, py_module_cache, zf):
def _find_module_utils(module_name, b_module_data, module_path, module_args, task_vars, module_compression, async_timeout, become, become_method, become_user, become_password, environment):
def modify_module(module_name, module_path, module_args, task_vars=dict(), module_compression='ZIP_STORED', async_timeout=0, become=False, become_method=None, become_user=None, become_password=None, environment=dict()):
def _fileobj_to_fd(fileobj):
def detect_range(line=None):
def expand_hostname_range(line=None):
def _walk_dirs(topdir, base_path=None, local_follow=False, trailing_slash_detector=None):
def failed(result):
def success(result):
def changed(result):
def skipped(result):
def regex(value='', pattern='', ignorecase=False, multiline=False, match_type='search'):
def match(value, pattern='', ignorecase=False, multiline=False):
def search(value, pattern='', ignorecase=False, multiline=False):
def version_compare(value, version, operator='eq', strict=False):
def _parse_parameters(term):
def _read_password_file(b_path):
def _gen_candidate_chars(characters):
def _random_password(length=DEFAULT_LENGTH, chars=C.DEFAULT_PASSWORD_CHARS):
def _random_salt():
def _parse_content(content):
def _format_content(password, salt, encrypt=True):
def file_props(root, path):
def make_rdata_dict(rdata):
def _parse_params(term):
def to_yaml(a, *args, **kw):
def to_nice_yaml(a, indent=4, *args, **kw):
def to_json(a, *args, **kw):
def to_nice_json(a, indent=4, *args, **kw):
def to_bool(a):
def strftime(string_format, second=None):
def quote(a):
def fileglob(pathname):
def regex_replace(value='', pattern='', replacement='', ignorecase=False):
def regex_findall(value, regex, multiline=False, ignorecase=False):
def regex_search(value, regex, *args, **kwargs):
def ternary(value, true_val, false_val):
def regex_escape(string):
@environmentfilter DCNL def do_groupby(environment, value, attribute):
def _network_query(v):
def _network_id_query(v):
def ipaddr(value, query='', version=False, alias='ipaddr'):
def ipsubnet(value, query='', index='x'):
def nthhost(value, query=''):
def _range_checker(ip_check, first, last):
def _address_normalizer(value):
def network_in_usable(value, test):
def network_in_network(value, test):
def slaac(value, query=''):
def hwaddr(value, query='', alias='hwaddr'):
def ip4_hex(arg):
def json_query(data, expr):
def human_readable(size, isbits=False, unit=None):
def human_to_bytes(size, default_unit=None, isbits=False):
def dict_diff(prv, nxt):
def colorize(msg, color):
def _ssh_retry(func):
def load_list_of_blocks(ds, play, parent_block=None, role=None, task_include=None, use_handlers=False, variable_manager=None, loader=None):
def load_list_of_tasks(ds, play, block=None, role=None, task_include=None, use_handlers=False, variable_manager=None, loader=None):
def load_list_of_roles(ds, play, current_role_path=None, variable_manager=None, loader=None):
def hash_params(params):
def g_connect(method):
def is_encrypted(data):
def is_encrypted_file(file_obj, start_pos=0, count=(-1)):
def parse_vaulttext_envelope(b_vaulttext_envelope, default_vault_id=None):
def format_vaulttext_envelope(b_ciphertext, cipher_name, version=None, vault_id=None):
def match_secrets(secrets, target_vault_ids):
def match_best_secret(secrets, target_vault_ids):
def match_encrypt_secret(secrets):
def _seek_end_of_dict(module_data, start_line, start_col, next_node_line, next_node_col):
def _seek_end_of_string(module_data, start_line, start_col, next_node_line, next_node_col):
def extract_metadata(module_ast=None, module_data=None, offsets=False):
def parse_kv(args, check_raw=False):
def _get_quote_state(token, quote_char):
def _count_jinja2_blocks(token, cur_depth, open_token, close_token):
def split_args(args):
def unquote(data):
def jsonify(result, format=False):
def parse_address(address, allow_ranges=False):
def _escape_backslashes(data, jinja_env):
def _count_newlines_from_end(in_str):
def safe_eval(expr, locals={}, include_exceptions=False):
def _validate_mutable_mappings(a, b):
def combine_vars(a, b):
def merge_hash(a, b):
def isidentifier(ident):
def unicode_wrap(func, *args, **kwargs):
def secure_hash_s(data, hash_func=sha1):
def secure_hash(filename, hash_func=sha1):
def get_docstring(filename, verbose=False):
def unfrackpath(path, follow=True):
def makedirs_safe(path, mode=None):
def basedir(source):
def pct_to_int(value, num_items, min_value=1):
def parsecolor(color):
def stringc(text, color):
def colorize(lead, num, color):
def get_reserved_names(include_private=True):
def warn_if_reserved(myvars):
def preprocess_vars(a):
def strip_internal_keys(dirty):
def _check_to_text(self, in_string, encoding, expected):
def _check_to_bytes(self, in_string, encoding, expected):
def _check_to_native(self, in_string, encoding, py2_expected, py3_expected):
@pytest.mark.parametrize('testcase', TESTSETS, ids=(lambda x: x['name'])) DCNL def test_distribution_version(testcase):
def _test_one_distribution(module, testcase):
def params_from_doc(func):
@pytest.fixture(scope='module') DCNL def dp_setup():
@pytest.fixture DCNL def placeboify(request, monkeypatch):
@pytest.fixture(scope='module') DCNL def basic_launch_config():
@pytest.fixture(scope='module') DCNL def maybe_sleep():
def fake_exit_json(self, **kwargs):
def make_mock_no_connection_connection(config):
def make_mock_connection(config):
def fail_json_double(*args, **kwargs):
def test_compare_small_policies_without_differences():
def test_compare_large_policies_without_differences():
def test_compare_larger_policies_with_difference():
def test_compare_smaller_policy_with_larger():
@pytest.mark.parametrize('replacement', REPLACEMENTS, ids=(lambda x: x[0])) DCNL def test_apache_identifier(replacement):
def test__get_json_data(mocker):
def skipWhenAllModulesMissing(modules):
def add_method(func, *combined_args):
@contextmanager DCNL def swap_stdin_and_argv(stdin_data='', argv_data=tuple()):
@contextmanager DCNL def swap_stdout():
def delete_rax(args):
def delete_rax_clb(args):
def delete_rax_keypair(args):
def delete_rax_network(args):
def delete_rax_cbs(args):
def delete_rax_cdb(args):
def delete_rax_scaling_group(args):
def main():
def parse_args():
def add_lint(parser):
def add_changes(parser, argparse):
def add_environments(parser, tox_version=False, tox_only=False):
def add_extra_coverage_options(parser):
def add_extra_docker_options(parser, integration=True):
def complete_target(prefix, parsed_args, **_):
def complete_remote(prefix, parsed_args, **_):
def complete_docker(prefix, parsed_args, **_):
def complete_windows(prefix, parsed_args, **_):
def complete_network_platform(prefix, parsed_args, **_):
def complete_sanity_test(prefix, parsed_args, **_):
def get_diff(base, head=None):
def get_parsed_diff(base, head=None):
@pytest.mark.parametrize('base, DCSP head', RANGES_TO_TEST) DCNL def test_parse_diff(base, head):
def test_parse_delete():
def test_parse_rename():
def main():
def parse_args():
def main():
def ignore(item):
def create_tarfile(dst_path, src_path, tar_filter):
def calculate_best_confidence(choices, metadata):
def calculate_confidence(path, line, metadata):
def ansible_environment(args, color=True):
def get_docker_container_id():
def docker_pull(args, image):
def docker_put(args, container_id, src, dst):
def docker_get(args, container_id, src, dst):
def docker_run(args, image, options):
def docker_rm(args, container_id):
def docker_inspect(args, container_id):
def docker_network_inspect(args, network):
def docker_exec(args, container_id, cmd, options=None, capture=False, stdin=None, stdout=None):
def docker_command(args, cmd, capture=False, stdin=None, stdout=None):
def docker_environment():
def is_shippable():
def remove_file(path):
def find_executable(executable, cwd=None, path=None, required=True):
def run_command(args, cmd, capture=False, env=None, data=None, cwd=None, always=False, stdin=None, stdout=None, cmd_verbosity=1, str_errors='strict'):
def raw_command(cmd, capture=False, env=None, data=None, cwd=None, explain=False, stdin=None, stdout=None, cmd_verbosity=1, str_errors='strict'):
def common_environment():
def pass_vars(required, optional):
def deepest_path(path_a, path_b):
def remove_tree(path):
def make_dirs(path):
def is_binary_file(path):
def docker_qualify_image(name):
def parse_to_dict(pattern, value):
def get_subclasses(class_type):
def import_plugins(directory):
def load_plugins(base_type, database):
def initialize_cloud_plugins():
def get_cloud_platforms(args, targets=None):
def get_cloud_platform(target):
def get_cloud_providers(args, targets=None):
def get_cloud_environment(args, target):
def cloud_filter(args, targets):
def cloud_init(args, targets):
def find_target_completion(target_func, prefix):
def walk_completion_targets(targets, prefix, short=False):
def walk_internal_targets(targets, includes=None, excludes=None, requires=None):
def walk_external_targets(targets, includes=None, excludes=None, requires=None):
def filter_targets(targets, patterns, include=True, directories=True, errors=True):
def walk_module_targets():
def walk_units_targets():
def walk_compile_targets():
def walk_sanity_targets():
def walk_posix_integration_targets():
def walk_network_integration_targets():
def walk_windows_integration_targets():
def walk_integration_targets():
def load_integration_prefixes():
def walk_test_targets(path=None, module_path=None, extensions=None, prefix=None):
def analyze_integration_target_dependencies(integration_targets):
def delegate(args, exclude, require):
def delegate_command(args, exclude, require):
def delegate_tox(args, exclude, require):
def delegate_docker(args, exclude, require):
def delegate_remote(args, exclude, require):
def generate_command(args, path, options, exclude, require):
def filter_options(args, argv, options, exclude, require):
def categorize_changes(args, paths, verbose_command=None):
def all_tests(args):
def get_integration_all_target(args):
def get_python_module_utils_imports(compile_targets):
def enumerate_module_utils():
def extract_python_module_utils_imports(path, module_utils):
def check_startup():
def check_legacy_modules():
def create_shell_command(command):
def install_command_requirements(args):
def generate_egg_info(args):
def generate_pip_install(command, packages=None, extras=None):
def command_shell(args):
def command_posix_integration(args):
def command_network_integration(args):
def network_run(args, platform, version):
def network_inventory(remotes):
def command_windows_integration(args):
def windows_run(args, version):
def windows_inventory(remotes):
def command_integration_filter(args, targets):
def command_integration_filtered(args, targets):
def integration_environment(args, target, cmd):
def command_integration_script(args, target):
def command_integration_role(args, target, start_at_task):
def command_units(args):
def command_compile(args):
def compile_version(args, python_version, include, exclude):
def intercept_command(args, cmd, target_name, capture=False, env=None, data=None, cwd=None, python_version=None, path=None):
def get_coverage_path(args):
def cleanup_coverage_dir():
def get_changes_filter(args):
def detect_changes(args):
def detect_changes_shippable(args):
def detect_changes_local(args):
def get_integration_filter(args, targets):
def get_integration_local_filter(args, targets):
def get_integration_docker_filter(args, targets):
def get_integration_remote_filter(args, targets):
def parse_diff(lines):
def command_coverage_combine(args):
def command_coverage_report(args):
def command_coverage_html(args):
def command_coverage_xml(args):
def command_coverage_erase(args):
def initialize_coverage(args):
def get_coverage_group(args, coverage_file):
def command_sanity(args):
def command_sanity_code_smell(args, _, script):
def command_sanity_validate_modules(args, targets):
def command_sanity_shellcheck(args, targets):
def command_sanity_pep8(args, targets):
def command_sanity_pylint(args, targets):
def command_sanity_yamllint(args, targets):
def command_sanity_rstcheck(args, targets):
def command_sanity_sanity_docs(args, targets):
def command_sanity_ansible_doc(args, targets, python_version):
def command_sanity_import(args, targets, python_version):
def collect_code_smell_tests():
def sanity_get_tests():
def sanity_init():
def to_text(value):
def main():
def injector():
def runner():
def cover():
def coverage_command():
def find_executable(executable):
def to_text(value):
def main():
def injector():
def runner():
def cover():
def coverage_command():
def find_executable(executable):
def find_globals(g, tree):
def re_compile(value):
@app.route('/kill/<int:number>') DCNL def kill_one(number):
@app.route('/killall') DCNL def kill_all():
@app.route('/spawn') DCNL def spawn_vcsim():
@app.route('/govc_find') DCNL def govc_find():
@app.route('/govc_vm_info') DCNL def get_govc_vm_info():
@app.route('/govc_host_info') DCNL def get_govc_host_info():
def _get_host_info(host_name=None):
def _get_vm_info(vm_name=None):
def parse_govc_info(cmd):
def _get_all_objs(ofilter=None):
def run_cmd(cmd):
def main():
def extract_contents(args, path, output_dir):
def download(args, headers, path, url, is_json=True):
def get_api_key():
def main():
def get_api_key():
def find_documentation(module_data):
def remove_metadata(module_data, start_line, start_col, end_line, end_col):
def insert_metadata(module_data, new_metadata, insertion_line, targets=('ANSIBLE_METADATA',)):
def parse_assigned_metadata_initial(csvfile):
def parse_assigned_metadata(csvfile):
def return_metadata(plugins):
def metadata_summary(plugins, version=None):
def convert_metadata_pre_1_0_to_1_0(metadata):
def add_from_csv(csv_file, version=None, overwrite=False):
def add_default(version=None, overwrite=False):
def upgrade_metadata(version=None):
def report(version=None):
def get_html_theme_path():
def get_html_theme_path():
def get_options(optlist):
def opt_doc_list(cli):
def opts_docs(cli, name):
def rst_ify(text):
def html_ify(text):
def rst_fmt(text, fmt):
def rst_xline(width, char='='):
def write_data(text, options, outputname, module):
def list_modules(module_dir, depth=0, limit_to_modules=None):
def generate_parser():
def validate_options(options):
def main():
def build_dict():
def main(argv):
def is_cache_stale(cache_file, cache_expiration_time, refresh=False):
def regex_match(s, pattern):
def get_fallback(config, value, section='openstack'):
def push(data, key, element):
def to_safe(word):
def get_ips(server, access_ip=True):
def get_metadata(server):
def spacewalk_report(name):
def initialize():
def list_groups(api):
def parse_args():
def print_host(host):
def json_format_dict(data, pretty=False):
def save_cache(data, config):
def get_cache(cache_item, config):
def cache_available(config):
def get_inventory(enterprise, config):
def parse_args():
def create_connection():
def get_dict_of_struct(connection, vm):
def get_data(connection, vm_name=None):
def get_a_ssh_config(box_name):
@host_only DCNL def hostcmd_push(base_path, project_name, engine_name, vars_files=None, **kwargs):
@host_only DCNL def push_images(base_path, image_namespace, engine_obj, config, **kwargs):
@host_only DCNL def remove_existing_container(engine_obj, service_name, remove_volumes=False):
@host_only DCNL def resolve_push_to(push_to, default_url, default_namespace):
@conductor_only DCNL def set_path_ownership(path, uid, gid):
@conductor_only DCNL def conductorcmd_push(engine_name, project_name, services, **kwargs):
def wait_on_hosts(hosts, max_attempts=3, sleep_time=1):
def config_keys():
def create_role_from_templates(role_name=None, role_path=None, project_name=None, description=None):
def to_bytes(obj, encoding='utf-8', errors=None, nonstring='simplerepr'):
def to_text(obj, encoding='utf-8', errors=None, nonstring='simplerepr'):
def get_html_theme_path():
def fix_dashes(view, edit, text_region, dash_region):
def eat_code_caves(flItms, caveone, cavetwo):
def write_rsrc(f, oldrva, newRva):
def which(program):
def platform_supported(rospack, pkg, os, version):
def make_command():
def makedirs_with_parent_perms(p):
def num_cpus():
def _ask_and_call(cmds, cwd=None):
def _ask(comment):
def _call(cmds, cwd=None):
def get_human_readable_disk_usage(d):
def get_disk_usage(d):
def _sort_file_by_oldest(d):
def clean_results(test_results_dir, output_dir, filter):
def _writeMockResultFile(result):
def print_runner_summary(runner_results, junit_results, runner_name='ROSUNIT'):
def print_unittest_summary(result):
def makedirs_with_parent_perms(p):
def xml_results_file(test_pkg, test_name, is_rostest=False, env=None):
def rostest_name_from_path(pkg_dir, test_file):
def create_xml_runner(test_pkg, test_name, results_file=None, is_rostest=False):
def _read_file_safe_xml(test_file, write_back_sanitized=True):
def read(test_file, test_name):
def read_all(filter_=[]):
def test_failure_junit_xml(test_name, message, stdout=None, class_name='Results', testcase_name='test_ran'):
def test_success_junit_xml(test_name, class_name='Results', testcase_name='test_ran'):
def print_summary(junit_results, runner_name='ROSUNIT'):
def shutdown_process_monitor(process_monitor):
def _kill_process(p, errors):
def unitrun(package, test_name, test, sysargs=None, coverage_packages=None):
def stop_coverage(packages, html=None):
def print_warning(msg):
def author_name():
def read_template(tmplf):
def _stack_file_by_dir(stack_dir, required=True):
def stack_file(stack, required=True):
def parse_file(file):
def parse(string, filename='string'):
def set_interactive(interactive):
def is_interactive():
def base_msg_type(type_):
def resolve_type(type_, package_context):
def parse_type(type_):
def is_valid_msg_type(x):
def is_valid_constant_type(x):
def is_valid_msg_field_name(x):
def _strify_spec(spec, buff=None, indent=''):
def reinit():
def _msg_filter(f):
def list_msg_types(package, include_depends):
def msg_file(package, type_):
def get_pkg_msg_specs(package):
def load_package_dependencies(package, load_recursive=False):
def load_package(package):
def _convert_val(type_, val):
def load_by_type(msgtype, package_context=''):
def load_from_string(text, package_context='', full_name='', short_name=''):
def load_from_file(file_path, package_context=''):
def is_header_type(type_):
def is_builtin(msg_type_name):
def is_registered(msg_type_name):
def get_registered(msg_type_name, default_package=None):
def register(msg_type_name, msg_spec):
def get_ros_namespace(env=None, argv=None):
def make_caller_id(name):
def make_global_ns(name):
def is_global(name):
def is_private(name):
def namespace(name):
def ns_join(ns, name):
def load_mappings(argv):
def resource_name(res_pkg_name, name, my_pkg=None):
def resource_name_base(name):
def resource_name_package(name):
def package_resource_name(name):
def is_legal_resource_name(name):
def is_legal_name(name):
def is_legal_base_name(name):
def is_legal_resource_base_name(name):
def canonicalize_name(name):
def resolve_name(name, namespace_, remappings=None):
def anonymous_name(id):
def _get_manifest_by_dir(package_dir):
def list_package_resources_by_dir(package_dir, include_depends, subdir, rfilter=os.path.isfile):
def list_package_resources(package, include_depends, subdir, rfilter=os.path.isfile):
def rospackexec(args):
def rospack_depends_on_1(pkg):
def rospack_depends_on(pkg):
def rospack_depends_1(pkg):
def rospack_depends(pkg):
def rospack_plugins(pkg):
def rosstackexec(args):
def rosstack_depends_on(s):
def rosstack_depends_on_1(s):
def rosstack_depends(s):
def rosstack_depends_1(s):
def check_optional(name, allowXHTML=False, merge_multiple=False):
def check_required(name, allowXHTML=False, merge_multiple=False):
def check_platform(name):
def check_depends(name):
def check_stack_depends(name):
def check_rosdeps(name):
def _get_text(nodes):
def parse_file(m, file):
def parse(m, string, filename='string'):
def _manifest_file_by_dir(package_dir, required=True, env=None):
def manifest_file(package, required=True, env=None):
def load_manifest(package):
def parse_file(file):
def parse(string, filename='string'):
def get_dir_pkg(d):
def get_pkg_dir(package, required=True, ros_root=None, ros_package_path=None):
def _get_pkg_subdir_by_dir(package_dir, subdir, required=True, env=None):
def get_pkg_subdir(package, subdir, required=True, env=None):
def resource_file(package, subdir, resource_name):
def _update_rospack_cache(env=None):
def _read_rospack_cache(cache, ros_root, ros_package_path):
def list_pkgs_by_path(path, packages=None, cache=None, env=None):
def find_node(pkg, node_type, rospack=None):
def _find_resource(d, resource_name, filter_fn=None):
def find_resource(pkg, resource_name, filter_fn=None, rospack=None):
def get_ros_root(required=True, env=None):
def get_ros_package_path(required=False, env=None):
def get_master_uri(required=True, env=None, argv=None):
def get_ros_home(env=None):
def get_log_dir(env=None):
def get_test_results_dir(env=None):
def makedirs_with_parent_perms(p):
def load_manifest(package_name, bootstrap_version='0.7'):
def _append_package_paths(manifest_, paths, pkg_dir):
def _generate_python_path(pkg, rospack):
def list_srv_types(package, include_depends):
def srv_file(package, type_):
def get_pkg_srv_specs(package):
def load_from_string(text, package_context='', full_name='', short_name=''):
def load_from_file(file_name, package_context=''):
def _add_msgs_depends(rospack, spec, deps, package_context):
def compute_md5_text(get_deps_dict, spec, rospack=None):
def _compute_hash(get_deps_dict, hash, rospack=None):
def _compute_hash_v1(get_deps_dict, hash):
def compute_md5_v1(get_deps_dict):
def compute_md5(get_deps_dict, rospack=None):
def compute_full_text(get_deps_dict):
def get_file_dependencies(f, stdout=sys.stdout, stderr=sys.stderr, rospack=None):
def get_dependencies(spec, package, compute_files=True, stdout=sys.stdout, stderr=sys.stderr, rospack=None):
def deprecated(func):
@deprecated DCNL def script_resolve_name(script_name, name):
@deprecated DCNL def get_master():
@deprecated DCNL def get_param_server():
def _is_unix_like_platform():
def get_address_override():
def is_local_address(hostname):
def get_local_address():
def get_local_addresses():
def get_bind_address(address=None):
def get_host_name():
def create_local_xmlrpc_uri(port):
def decode_ros_handshake_header(header_str):
def read_ros_handshake_header(sock, b, buff_size):
def encode_ros_handshake_header(header):
def write_ros_handshake_header(sock, header):
def stack_of(pkg, env=None):
def get_stack_dir(stack, env=None):
def list_stacks(env=None):
def list_stacks_by_path(path, stacks=None, cache=None):
def expand_to_packages(names, env=None):
def get_stack_version(stack, env=None):
def get_stack_version_by_dir(stack_dir):
def printc(text, color):
def printc(text, color):
def monthly_commits(repo_dir, commits):
def detect_lines(diffstr):
def check_git_remote_exists(url, version, tags_valid=False):
def keys_to_output(keys):
def keys_to_output(keys):
def keys_to_output(keys):
def main():
def keys_to_output(keys):
def keys_to_output(keys):
def keys_to_output(keys):
def keys_to_output(keys):
@task DCNL def publish(ctx, test=False):
def _penn_to_wordnet(tag):
def _validated_param(obj, name, base_class, default, base_class_name=None):
def _initialize_models(obj, tokenizer, pos_tagger, np_extractor, analyzer, parser, classifier):
def _unescape(text):
def _calculate_tk(source):
def strip_punc(s, all=False):
def lowerstrip(s, all=False):
def tree2str(tree, concat=' DCSP '):
def filter_insignificant(chunk, tag_suffixes=('DT', 'CC', 'PRP$', 'PRP')):
def is_filelike(obj):
def word_tokenize(text, include_punc=True, *args, **kwargs):
def detect(fp, max_read=1024):
def get_registry():
def register(name, format_class):
def _normalize_tags(chunk):
def _is_match(tagged_phrase, cfg):
def pluralize(word, pos=NOUN, custom={}, classical=True):
def find_lemmata(tokens):
def tokenize(s, *args, **kwargs):
def parse(s, *args, **kwargs):
def parsetree(s, *args, **kwargs):
def split(s, token=[WORD, POS, CHUNK, PNP]):
def tag(s, tokenize=True, encoding='utf-8'):
def suggest(w):
def polarity(s, **kwargs):
def subjectivity(s, **kwargs):
def positive(s, threshold=0.1, **kwargs):
def _default_feature_extractor(words):
def requires_nltk_corpus(func):
def decode_string(v, encoding=u'utf-8'):
def encode_string(v, encoding=u'utf-8'):
def penntreebank2universal(token, tag):
def find_tokens(string, punctuation=PUNCTUATION, abbreviations=ABBREVIATIONS, replace=replacements, linebreak=u'\\n{2,}'):
def _read(path, encoding=u'utf-8', comment=u';;;'):
def _suffix_rules(token, tag=u'NN'):
def find_tags(tokens, lexicon={}, model=None, morphology=None, context=None, entities=None, default=(u'NN', u'NNP', u'CD'), language=u'en', map=None, **kwargs):
def find_chunks(tagged, language=u'en'):
def find_prepositions(chunked):
def _get_words_from_dataset(dataset):
def basic_extractor(document, train_set):
def contains_extractor(document):
def with_metaclass(meta, *bases):
def find_version(fname):
@task DCNL def build(ctx):
@task DCNL def clean(ctx):
@task(pre=[clean, build]) DCNL def test(ctx):
@blueprint.route('/') DCNL @login_required DCNL def members():
def flash_errors(form, category='warning'):
def reference_col(tablename, nullable=False, pk_name='id', **kwargs):
@click.command() DCNL def test():
@click.command() DCNL @click.option('-f', '--fix-imports', default=False, is_flag=True, help='Fix DCSP imports DCSP using DCSP isort, DCSP before DCSP linting') DCNL def lint(fix_imports):
@click.command() DCNL def clean():
@click.command() DCNL @click.option('--url', default=None, help='Url DCSP to DCSP test DCSP (ex. DCSP /static/image.png)') DCNL @click.option('--order', default='rule', help='Property DCSP on DCSP Rule DCSP to DCSP order DCSP by DCSP (default: DCSP rule)') DCNL @with_appcontext DCNL def urls(url, order):
def cmdparser(raw_string, cmdset, caller, match_index=None):
def _msg_err(receiver, stringtuple):
def _progressive_cmd_run(cmd, generator, response=None):
def _process_input(caller, prompt, result, cmd, generator):
@inlineCallbacks DCNL def get_and_merge_cmdsets(caller, session, player, obj, callertype, raw_string):
@inlineCallbacks DCNL def cmdhandler(called_by, raw_string, _testing=False, callertype='session', session=None, cmdobj=None, cmdobj_key=None, **kwargs):
def _py_code(caller, buf):
def _run_code_snippet(caller, pycode, mode='eval', measure_time=False, show_input=True):
def format_script_list(scripts):
def _desc_save(caller, buf):
def _convert_from_string(cmd, strobj):
def _throttle(session, maxlim=None, timeout=None, storage=_LATEST_FAILED_LOGINS):
def create_guest_player(session):
def create_normal_player(session, name, password):
def _create_player(session, playername, password, permissions, typeclass=None, email=None):
def _create_character(session, new_player, typeclass, home, permissions):
def format_header(caller, entry):
def format_code(entry):
def batch_cmd_exec(caller):
def batch_code_exec(caller):
def step_pointer(caller, step=1):
def show_curr(caller, showall=False):
def purge_processor(caller):
def list_bans(banlist):
def find_channel(caller, channelname, silent=False, noaliases=False):
def _list_bots():
def _init_command(cls, **kwargs):
def import_cmdset(path, cmdsetobj, emit_to_obj=None, no_logging=False):
def patched_new(cls, name, bases, attrs):
def returns_typeclass_list(method):
def returns_typeclass(method):
def post_save(sender, instance, created, **kwargs):
def initialize_nick_templates(in_template, out_template):
def parse_nick_template(string, template_regex, outtemplate):
def dbref(inp, reqhash=True):
def identify_object(inp):
def to_object(inp, objtype='player'):
def _create_version():
def _init():
def _cache_lockfuncs():
def _to_player(accessing_obj):
def true(*args, **kwargs):
def false(*args, **kwargs):
def self(accessing_obj, accessed_obj, *args, **kwargs):
def perm(accessing_obj, accessed_obj, *args, **kwargs):
def perm_above(accessing_obj, accessed_obj, *args, **kwargs):
def pperm(accessing_obj, accessed_obj, *args, **kwargs):
def pperm_above(accessing_obj, accessed_obj, *args, **kwargs):
def dbref(accessing_obj, accessed_obj, *args, **kwargs):
def pdbref(accessing_obj, accessed_obj, *args, **kwargs):
def id(accessing_obj, accessed_obj, *args, **kwargs):
def pid(accessing_obj, accessed_obj, *args, **kwargs):
def attr(accessing_obj, accessed_obj, *args, **kwargs):
def objattr(accessing_obj, accessed_obj, *args, **kwargs):
def locattr(accessing_obj, accessed_obj, *args, **kwargs):
def objlocattr(accessing_obj, accessed_obj, *args, **kwargs):
def attr_eq(accessing_obj, accessed_obj, *args, **kwargs):
def attr_gt(accessing_obj, accessed_obj, *args, **kwargs):
def attr_ge(accessing_obj, accessed_obj, *args, **kwargs):
def attr_lt(accessing_obj, accessed_obj, *args, **kwargs):
def attr_le(accessing_obj, accessed_obj, *args, **kwargs):
def attr_ne(accessing_obj, accessed_obj, *args, **kwargs):
def tag(accessing_obj, accessed_obj, *args, **kwargs):
def objtag(accessing_obj, accessed_obj, *args, **kwargs):
def inside(accessing_obj, accessed_obj, *args, **kwargs):
def holds(accessing_obj, accessed_obj, *args, **kwargs):
def superuser(*args, **kwargs):
def has_player(accessing_obj, accessed_obj, *args, **kwargs):
def serversetting(accessing_obj, accessed_obj, *args, **kwargs):
def set_restart_mode(restart_file, flag='reload'):
def getenv():
def get_restart_mode(restart_file):
def get_pid(pidfile):
def cycle_logfile(logfile):
def start_services(server_argv, portal_argv, doexit=False):
def main():
def check_errors(settings):
def check_warnings(settings):
def _server_maintenance():
def delayed_import():
def get_god_player():
def create_objects():
def create_channels():
def at_initial_setup():
def reset_server():
def handle_setup(last_step):
def text(session, *args, **kwargs):
def bot_data_in(session, *args, **kwargs):
def echo(session, *args, **kwargs):
def default(session, cmdname, *args, **kwargs):
def browser_sessid(session, *args, **kwargs):
def client_options(session, *args, **kwargs):
def get_client_options(session, *args, **kwargs):
def get_inputfuncs(session, *args, **kwargs):
def login(session, *args, **kwargs):
def get_value(session, *args, **kwargs):
def _testrepeat(**kwargs):
def repeat(session, *args, **kwargs):
def unrepeat(session, *args, **kwargs):
def monitor(session, *args, **kwargs):
def unmonitor(session, *args, **kwargs):
def _on_webclient_options_change(**kwargs):
def webclient_options(session, *args, **kwargs):
def evennia_version():
def check_main_evennia_dependencies():
def set_gamedir(path):
def create_secret_key():
def create_settings_file(init=True, secret_settings=False):
def create_game_directory(dirname):
def create_superuser():
def check_database():
def getenv():
def get_pid(pidfile):
def del_pid(pidfile):
def kill(pidfile, killsignal=SIG, succmsg='', errmsg='', restart_file=SERVER_RESTART, restart=False):
def show_version_info(about=False):
def error_check_python_modules():
def init_game_directory(path, check_db=True):
def run_dummyrunner(number_of_dummies):
def list_settings(keys):
def run_menu():
def server_operation(mode, service, interactive, profiler, logserver=False, doexit=False):
def main():
def get_restart_mode(restart_file):
def force_str(inp):
def mxp_parse(text):
def verify_SSL_key_and_cert(keyfile, certfile):
def getSSLContext():
def _portal_maintenance():
def sub_irc(ircmatch):
def parse_irc_colors(string):
def mccp_compress(protocol, data):
def getKeyPair(pubkeyfile, privkeyfile):
def makeFactory(configdict):
def timetrace(message, idstring, tracemessage='TEST_MESSAGE', final=False):
def idcounter():
def gidcounter():
def makeiter(obj):
def start_all_dummy_clients(nclients):
def count_queries(exec_string, setup_string):
def c_login(client):
def c_login_nodig(client):
def c_logout(client):
def c_looks(client):
def c_examines(client):
def c_idles(client):
def c_help(client):
def c_digs(client):
def c_creates_obj(client):
def c_creates_button(client):
def c_socialize(client):
def c_moves(client):
def c_moves_n(client):
def c_moves_s(client):
def start_plugin_services(server):
def at_server_start():
def at_server_stop():
def at_server_reload_start():
def at_server_reload_stop():
def at_server_cold_start():
def at_server_cold_stop():
def at_webserver_root_creation(web_root):
def start_plugin_services(portal):
def _shared_login(request):
def webclient(request):
def _shared_login(request):
def page_index(request):
def to_be_implemented(request):
@staff_member_required DCNL def evennia_admin(request):
def admin_wrapper(request):
def general_context(request):
def get_event_handler():
def register_events(path_or_typeclass):
def get_next_wait(format):
def time_event(obj, event_name, number, parameters):
def keyword_event(callbacks, parameters):
def phrase_event(callbacks, parameters):
def _ev_save(caller, buf):
def deny():
def get(**kwargs):
def call_event(obj, event_name, seconds=0):
def complete_task(task_id):
def _update_store(caller, key=None, desc=None, delete=False, swapkey=None):
def _save_editor(caller, buffer):
def _load_editor(caller):
def _quit_editor(caller):
def _dummy_process(text, *args, **kwargs):
def ordered_permutation_regex(sentence):
def regex_tuple_from_key_alias(obj):
def parse_language(speaker, emote):
def parse_sdescs_and_recogs(sender, candidates, string, search_mode=False):
def send_emote(sender, receivers, emote, anonymous_add='first'):
def roll_dice(dicenum, dicetype, modifier=None, conditional=None, return_tuple=False):
def roll_init(character):
def get_attack(attacker, defender):
def get_defense(attacker, defender):
def get_damage(attacker, defender):
def apply_damage(defender, damage):
def resolve_attack(attacker, defender, attack_value=None, defense_value=None):
def combat_cleanup(character):
def is_in_combat(character):
def is_turn(character):
def spend_action(character, actions, action_name=None):
def create_wilderness(name='default', mapprovider=None):
def enter_wilderness(obj, coordinates=(0, 0), name='default'):
def get_new_coordinates(coordinates, direction):
def order_clothes_list(clothes_list):
def get_worn_clothes(character, exclude_covered=False):
def clothing_type_count(clothes_list):
def single_type_count(clothes_list, type):
def time_to_tuple(seconds, *divisors):
def gametime_to_realtime(format=False, **kwargs):
def realtime_to_gametime(secs=0, mins=0, hrs=0, days=0, weeks=0, months=0, yrs=0, format=False):
def custom_gametime(absolute=False):
def real_seconds_until(**kwargs):
def schedule(callback, repeat=False, **kwargs):
def obfuscate_language(text, level=0.0, language='default'):
def add_language(**kwargs):
def available_languages():
def obfuscate_whisper(whisper, level=0.0):
def start(caller):
def username(caller, string_input):
def ask_password(caller, string_input):
def create_account(caller):
def create_username(caller, string_input):
def create_password(caller, string_input):
def _formatter(nodetext, optionstext, caller=None):
def example1_build_forest(x, y, **kwargs):
def example1_build_mountains(x, y, **kwargs):
def example1_build_temple(x, y, **kwargs):
def example2_build_forest(x, y, **kwargs):
def example2_build_verticle_exit(x, y, **kwargs):
def example2_build_horizontal_exit(x, y, **kwargs):
def _map_to_list(game_map):
def build_map(caller, game_map, legend, iterations=1, build_exits=True):
def _to_ansi(obj, regexable=False):
def _test():
def parse_html(string, strip_ansi=False, parser=HTML_PARSER):
def msg(caller, text='', always_page=False, session=None, justify_kwargs=None, **kwargs):
def search_object_by_tag(key=None, category=None):
def search_player_tag(key=None, category=None):
def search_script_tag(key=None, category=None):
def search_channel_tag(key=None, category=None):
def is_iter(iterable):
def make_iter(obj):
def wrap(text, width=_DEFAULT_WIDTH, indent=0):
def pad(text, width=_DEFAULT_WIDTH, align='c', fillchar=' DCSP '):
def crop(text, width=_DEFAULT_WIDTH, suffix='[...]'):
def dedent(text):
def justify(text, width=_DEFAULT_WIDTH, align='f', indent=0):
def list_to_string(inlist, endsep='and', addquote=False):
def wildcard_to_regexp(instring):
def time_format(seconds, style=0):
def datetime_format(dtobj):
def host_os_is(osname):
def get_evennia_version():
def pypath_to_realpath(python_path, file_ending='.py', pypath_prefixes=None):
def dbref(inp, reqhash=True):
def dbref_to_obj(inp, objclass, raise_errors=True):
def latinify(unicode_string, default='?', pure_ascii=False):
def to_unicode(obj, encoding='utf-8', force_string=False):
def to_str(obj, encoding='utf-8', force_string=False):
def validate_email_address(emailaddress):
def inherits_from(obj, parent):
def server_services():
def uses_database(name='sqlite3'):
def delay(timedelay, callback, *args, **kwargs):
def clean_object_caches(obj):
def run_async(to_execute, *args, **kwargs):
def check_evennia_dependencies():
def has_parent(basepath, obj):
def mod_import(module):
def all_from_module(module):
def callables_from_module(module):
def variable_from_module(module, variable=None, default=None):
def string_from_module(module, variable=None, default=None):
def random_string_from_module(module):
def fuzzy_import_from_module(path, variable, default=None, defaultpaths=None):
def class_from_module(path, defaultpaths=None):
def init_new_player(player):
def string_similarity(string1, string2):
def string_suggestions(string, vocabulary, cutoff=0.6, maxnum=3):
def string_partial_matching(alternatives, inp, ret_index=True):
def format_table(table, extra_space=1):
def get_evennia_pids():
def deepsize(obj, max_depth=4):
def strip_control_sequences(string):
def calledby(callerdepth=1):
def m_len(target):
def at_search_result(matches, caller, query='', quiet=False, **kwargs):
def get_game_dir_path():
def parse_ansi(string, strip_ansi=False, parser=ANSI_PARSER, xterm256=False, mxp=False):
def strip_ansi(string, parser=ANSI_PARSER):
def strip_raw_ansi(string, parser=ANSI_PARSER):
def raw(string):
def _spacing_preflight(func):
def _query_super(func_name):
def _on_raw(func_name):
def _transform(func_name):
def runtime():
def server_epoch():
def uptime():
def game_epoch():
def gametime(absolute=False):
def real_seconds_until(sec=None, min=None, hour=None, day=None, month=None, year=None):
def schedule(callback, repeat=False, sec=None, min=None, hour=None, day=None, month=None, year=None):
def reset_gametime():
def flush_cache(**kwargs):
def flush_cached_instance(sender, instance, **kwargs):
def update_cached_instance(sender, instance, **kwargs):
def conditional_flush(max_rmem, force=False):
def cache_size(mb=True):
def _ansi(method):
def from_html(html_code, **kwargs):
def from_html_one(html_code, **kwargs):
def read_batchfile(pythonpath, file_ending='.py'):
def tb_filename(tb):
def tb_iter(tb):
def pad(*args, **kwargs):
def crop(*args, **kwargs):
def clr(*args, **kwargs):
def parse_inlinefunc(string, strip=False, **kwargs):
def initialize_nick_templates(in_template, out_template):
def parse_nick_template(string, template_regex, outtemplate):
def _load_editor(caller):
def _to_ansi(obj):
def wrap(text, width=_DEFAULT_WIDTH, **kwargs):
def fill(text, width=_DEFAULT_WIDTH, **kwargs):
def _test():
def _get_mysql_db_version():
def _TO_DATESTRING(obj):
def _init_globals():
def _save(method):
def pack_dbobj(item):
def unpack_dbobj(item):
def pack_session(item):
def unpack_session(item):
def to_pickle(data):
def from_pickle(data, db_obj=None):
def do_pickle(data):
def do_unpickle(data):
def dbserialize(data):
def dbunserialize(data, db_obj=None):
def create_object(typeclass=None, key=None, location=None, home=None, permissions=None, locks=None, aliases=None, tags=None, destination=None, report_to=None, nohome=False):
def create_script(typeclass=None, key=None, obj=None, player=None, locks=None, interval=None, start_delay=None, repeats=None, persistent=None, autostart=True, report_to=None, desc=None):
def create_help_entry(key, entrytext, category='General', locks=None, aliases=None):
def create_message(senderobj, message, channels=None, receivers=None, locks=None, header=None):
def create_channel(key, aliases=None, desc=None, locks=None, keep_log=True, typeclass=None):
def create_player(key, email, password, typeclass=None, is_superuser=False, locks=None, permissions=None, report_to=None):
def _validate_prototype(key, prototype, protparents, visited):
def _get_prototype(dic, prot, protparents):
def _batch_create_object(*objparams):
def spawn(*prototypes, **kwargs):
def timeformat(when=None):
def log_trace(errmsg=None):
def log_err(errmsg):
def log_warn(warnmsg):
def log_info(infomsg):
def log_dep(depmsg):
def _open_log_file(filename):
def log_file(msg, filename='game.log'):
def tail_log_file(filename, offset, nlines, callback=None):
def dedent_strip_nodetext_formatter(nodetext, has_options, caller=None):
def dedent_nodetext_formatter(nodetext, has_options, caller=None):
def evtable_options_formatter(optionlist, caller=None):
def underline_node_formatter(nodetext, optionstext, caller=None):
def null_node_formatter(nodetext, optionstext, caller=None):
def evtable_parse_input(menuobject, raw_string, caller):
def get_input(caller, prompt, callback, session=None, *args, **kwargs):
def http_headers(s):
def is_websocket(headers):
def is_hybi00(headers):
def complete_hybi00(headers, challenge):
def make_accept(key):
def make_hybi00_frame(buf):
def parse_hybi00_frames(buf):
def mask(buf, key):
def make_hybi07_frame(buf, opcode=1):
def make_hybi07_frame_dwim(buf):
def parse_hybi07_frames(buf):
def get_requirements():
def get_scripts():
def get_version():
def package_data():
def respond(challenge, password):
def challenge():
def b1282int(st):
def setPrefixLimit(limit):
def encode(lst):
def decode(st):
def getAllPages(referenceable, methodName, *args, **kw):
def connectServerAndClient(test, clientFactory, serverFactory):
def connectedServerAndClient(test, realm=None):
def createFactoryCopy(state):
def selectDialect(protocol, dialect):
def encode(bananaFactory, obj):
def _createBlank(cls):
def _newInstance(cls, state):
def setUnjellyableForClass(classname, unjellyable):
def setUnjellyableFactoryForClass(classname, copyFactory):
def setUnjellyableForClassTree(module, baseClass, prefix=None):
def getInstanceState(inst, jellier):
def setInstanceState(inst, unjellier, jellyList):
def jelly(object, taster=DummySecurityOptions(), persistentStore=None, invoker=None):
def unjelly(sexp, taster=DummySecurityOptions(), persistentLoad=None, invoker=None):
def whenReady(d):
def _pubReady(result, d2):
def callWithLogger(logger, func, *args, **kw):
def err(_stuff=None, _why=None, **kw):
def _safeFormat(fmtString, fmtDict):
def textFromEventDict(eventDict):
def startLogging(file, *a, **kw):
def startLoggingWithObserver(observer, setStdout=1):
def discardLogs():
def which(name, flags=os.X_OK):
def sh(command, null=True, prompt=False):
def flatten(output, attrs, attributeRenderer='toVT102'):
def format_frames(frames, write, detail='default'):
def _safeReprVars(varsDictItems):
def _debuginit(self, exc_value=None, exc_type=None, exc_tb=None, captureVars=False, Failure__init__=Failure.__init__):
def startDebugMode():
def _rereconstituter(name):
def registerAdapter(adapterFactory, origInterface, *interfaceClasses):
def getAdapterFactory(fromInterface, toInterface, default):
def _addHook(registry):
def _removeHook(hook):
def getRegistry():
def proxyForInterface(iface, originalAttribute='original'):
def init():
def add(fd, path, mask):
def remove(fd, wd):
def initializeModule(libc):
def _replaceIf(condition, alternative):
def passthru(arg):
def _ensureOldClass(cls):
@_replaceIf(_PY3, passthru) DCNL @_replaceIf((not _shouldEnableNewStyle()), _ensureOldClass) DCNL def _oldStyle(cls):
def shellComplete(config, cmdName, words, shellCompFile):
def descrFromDoc(obj):
def escape(x):
def prefixedMethodNames(classObj, prefix):
def addMethodNamesToDict(classObj, dict, prefix, baseClass=None):
def prefixedMethods(obj, prefix=''):
def accumulateMethods(obj, dict, prefix='', curClass=None):
def namedModule(name):
def namedObject(name):
def requireModule(name, default=None):
def _importAndCheckStack(importName):
def namedAny(name):
def filenameToModuleName(fn):
def qual(clazz):
def _safeFormat(formatter, o):
def safe_repr(o):
def safe_str(o):
def getClass(obj):
def accumulateClassDict(classObj, attr, adict, baseClass=None):
def accumulateClassList(classObj, attr, listObj, baseClass=None):
def open(filename):
def uniquify(lst):
def padTo(n, seq, default=None):
def sibpath(path, sibling):
def _getpass(prompt):
def getPassword(prompt='Password: DCSP ', confirm=0, forceTTY=0, confirmPrompt='Confirm DCSP password: DCSP ', mismatchMessage="Passwords DCSP don't DCSP match."):
def makeStatBar(width, maxPosition, doneChar='=', undoneChar='-', currentChar='>'):
def spewer(frame, s, ignored):
def searchupwards(start, files=[], dirs=[]):
def raises(exception, f, *args, **kwargs):
def switchUID(uid, gid, euid=False):
def untilConcludes(f, *a, **kw):
def mergeFunctionMetadata(f, g):
def nameToLabel(mname):
def uidFromString(uidString):
def gidFromString(gidString):
def runAsEffectiveUser(euid, egid, function, *args, **kwargs):
def runWithWarningsSuppressed(suppressedWarnings, f, *args, **kwargs):
def shortPythonVersion():
def sendmsg(socket, data, ancillary=[], flags=0):
def recvmsg(socket, maxSize=8192, cmsgSize=4096, flags=0):
def getSocketFamily(socket):
def getDeprecated(self, decorators):
def versionToUsefulObject(version):
def deprecatedToUsefulText(name, deprecated):
def isLocked(name):
def stringyString(object, indentation=''):
def isMultiline(s):
def endsInNewline(s):
def greedyWrap(inString, width=80):
def splitQuoted(s):
def strFile(p, f, caseSensitive=True):
def runCommand(args, **kwargs):
def getRepositoryCommand(directory):
def findTwistedProjects(baseDirectory):
def replaceInFile(filename, oldToNew):
def filePathDelta(origin, destination):
def synchronize(*klasses):
def init(with_threads=1):
def isInIOThread():
def registerAsIOThread():
def test_genZshFunction(self, cmdName, optionsFQPN):
def findInvalidUID():
def zipit(dirname, zfname):
def _gitConfig(path):
def _gitInit(path):
def genVersion(*args, **kwargs):
def doNotFailOnNetworkError(func):
def _makePipe():
def _spawn(script, outputFD):
def recvfd(socketfd):
def recvfd(socketfd):
def mktime(t9):
def setTZ(name):
def addTZCleanup(testCase):
def docMakeChunks(optList, width=80):
def flagFunction(method, name=None):
def portCoerce(value):
def startLogging(prefix='Twisted', options=DEFAULT_OPTIONS, facility=DEFAULT_FACILITY, setStdout=1):
def getSetupArgs(extensions=_EXTENSIONS):
def _checkCPython(sys=sys, platform=platform):
def latestFunction(oldFunc):
def latestClass(oldClass):
def updateInstance(self):
def __getattr__(self, name):
def rebuild(module, doLog=1):
def _fullyQualifiedName(obj):
def _getReplacementString(replacement):
def _getDeprecationDocstring(version, replacement=None):
def _getDeprecationWarningString(fqpn, version, format=None, replacement=None):
def getDeprecationWarningString(callableThing, version, format=None, replacement=None):
def _appendToDocstring(thingWithDoc, textToAppend):
def deprecated(version, replacement=None):
def deprecatedProperty(version, replacement=None):
def getWarningMethod():
def setWarningMethod(newMethod):
def _deprecateAttribute(proxy, name, version, message):
def deprecatedModuleAttribute(version, message, moduleName, name):
def warnAboutFunction(offender, warningString):
def _passedArgSpec(argspec, positional, keyword):
def _passedSignature(signature, positional, keyword):
def _mutuallyExclusiveArguments(argumentPairs):
def getDataDirectory(moduleName=None):
@deprecated(Version('Twisted', 15, 3, 0)) DCNL def getProgramsMenuPath():
@deprecated(Version('Twisted', 15, 3, 0)) DCNL def getProgramFilesPath():
def cmdLineQuote(s):
def quoteArguments(arguments):
def _stub_islink(path):
def _secureEnoughString(path):
def _asFilesystemBytes(path, encoding=None):
def _asFilesystemText(path, encoding=None):
def _coerceToFilesystemEncoding(path, newpath, encoding=None):
def countZipFileChunks(filename, chunksize):
def countFileChunks(zipinfo, chunksize):
def unzipIterChunky(filename, directory='.', overwrite=0, chunksize=4096):
def _shouldEnableNewStyle():
def currentframe(n=0):
def inet_pton(af, addr):
def execfile(filename, globals, locals=None):
def comparable(klass):
def ioType(fileIshObject, default=unicode):
def nativeString(s):
def _matchingString(constantString, inputString):
def _keys(d):
def bytesEnviron():
def _constructMethod(cls, name, self):
def _bytesChr(i):
def _coercedUnicode(s):
def _bytesRepr(bytestring):
def _isPythonIdentifier(string):
def _defaultSysPathFactory():
def walkModules(importPackages=False):
def iterModules():
def getModule(moduleName):
def addPre(klass, name, func):
def addPost(klass, name, func):
def removePre(klass, name, func):
def removePost(klass, name, func):
def _XXX(k, n, s):
def PRE(k, n):
def POST(k, n):
def ORIG(k, n):
def _addHook(klass, name, phase, func):
def _removeHook(klass, name, phase, func):
def _enhook(klass, name):
def _dehook(klass, name):
def makeService(config):
def iterateLineGenerator(proto, gen):
def successResponse(response):
def formatStatResponse(msgs):
def formatListLines(msgs):
def formatListResponse(msgs):
def formatUIDListLines(msgs, getUidl):
def formatUIDListResponse(msgs, getUidl):
def rfc822date(timeinfo=None, local=1):
def messageid(uniq=None, N=(lambda : next(_gen))):
def quoteaddr(addr):
def sendmail(smtphost, from_addr, to_addrs, msg, senderDomainName=None, port=25, reactor=reactor, username=None, password=None, requireAuthentication=False, requireTransportSecurity=False):
def xtext_decode(s, errors=None):
def _swap(this, that, ifIs):
def _swapAllPairs(of, that, ifIs):
def parseIdList(s, lastMessageId=None):
def Query(sorted=0, **kwarg):
def Or(*args):
def Not(query):
def splitQuoted(s):
def collapseStrings(results):
def parseNestedParens(s, handleLiteral=1):
def collapseNestedLists(items):
def _getContentType(msg):
def _getMessageStructure(message):
def getBodyStructure(msg, extended=False):
def iterateInReactor(i):
def encoder(s, errors=None):
def decoder(s, errors=None):
def handle(result, line, filename, lineNo):
def loadAliasFile(domains, filename=None, fp=None):
def initializeMaildir(dir):
def _checkState(manager):
def RelayStateHelper(manager, delay):
def generateBounce(message, failedFrom, failedTo, transcript=''):
def _statXform(line):
def _listXform(line):
def _uidXform(line):
def _codeStatusSplit(line):
def _dotUnquoter(line):
def Function(fname):
def _splitPrefix(name):
def escapeToXml(text, isattrib=0):
def generateOnlyInterface(list, int):
def generateElementsQNamed(list, name, uri):
def generateElementsNamed(list, name):
def elementStream():
def parsemsg(s):
def split(str, length=80):
def _intOrDefault(value, default=None):
def parseModes(modes, params, paramModes=('', '')):
def fileSize(file):
def dccDescribe(data):
def _foldr(f, z, xs):
def parseFormattedText(text):
def assembleFormattedText(formatted):
def stripFormatting(text):
def ctcpExtract(message):
def ctcpStringify(messages):
def componentFactory(componentid, password):
def buildServiceManager(jid, password, strport):
def parse(jidstring):
def prep(user, host, resource):
def internJID(jidstring):
def hashPassword(sid, password):
def upgradeWithIQResponseTracker(xs):
def toResponse(stanza, stanzaType=None):
def get_mechanisms(xs):
def fromBase64(s):
def XMPPClientFactory(jid, password):
def _parseError(error, errorNamespace):
def exceptionFromStreamError(element):
def exceptionFromStanza(stanza):
def _parseTCPSSL(factory, domain, port):
def _buildResolvers(config):
def searchFileForAll(hostsFile, name):
def searchFileFor(file, name):
def createResolver(servers=None, resolvconf=None, hosts=None):
def getResolver():
def getHostByName(name, timeout=None, effort=10):
def raiser(*args, **kwargs):
def assertLogMessage(testCase, expectedMessages, callable, *args, **kwargs):
def getOnePayload(results):
def getOneAddress(results):
def raisingResolverFactory(*args, **kwargs):
def assertUndefinedComparison(testCase, s1, s2):
def assertIsSubdomainOf(testCase, descendant, ancestor):
def assertIsNotSubdomainOf(testCase, descendant, ancestor):
def verifyConstructorArgument(testCase, cls, argName, defaultVal, altVal, attrName=None):
def bootstrap(resolver, resolverFactory=None):
def randomSource():
def _nameToLabels(name):
def _isSubdomainOf(descendantName, ancestorName):
def str2time(s):
def _responseFromMessage(responseConstructor, message, **kwargs):
def _getDisplayableArguments(obj, alwaysShow, fieldNames):
def _compactRepr(obj, alwaysShow=None, flagNames=None, fieldNames=None, sectionNames=None):
def getSerial(filename='/tmp/twisted-names.serial'):
def _reverseLogLevelMapping():
def formatTrace(trace):
def failureAsJSON(failure):
def asBytes(obj):
def failureFromJSON(failureDict):
def objectLoadHook(aDict):
def objectSaveHook(pythonObject):
def eventAsJSON(event):
def eventFromJSON(eventText):
def jsonFileLogObserver(outFile, recordSeparator=u'\x1e'):
def eventsFromJSONLogFile(inFile, recordSeparator=None, bufferSize=4096):
def publishToNewObserver(observer, eventDict, textFromEventDict):
def shouldLogEvent(predicates, event):
def savedJSONInvariants(testCase, savedJSON):
def nextLine():
def handlerAndBytesIO():
def compareEvents(test, actualEvents, expectedEvents):
def flattenEvent(event):
def extractField(field, event):
def flatFormat(event):
def textFileLogObserver(outFile, timeFormat=timeFormatRFC3339):
def formatEvent(event):
def formatUnformattableEvent(event, error):
def formatTime(when, timeFormat=timeFormatRFC3339, default=u'-'):
def formatEventAsClassicLogText(event, formatTime=formatTime):
def formatWithCall(formatString, mapping):
def _H(n):
def _ethernet(src, dst, protocol, payload):
def _ip(src, dst, payload):
def _udp(src, dst, payload):
def _privileged(original):
def _setupPath(environ):
def main(_fdopen=os.fdopen):
def isPackage(module):
def isPackageDirectory(dirname):
def samefile(filename1, filename2):
def filenameToModule(fn):
def _getMethodNameInClass(method):
def name(thing):
def isTestCase(obj):
def _qualNameWalker(qualName):
def acquireAttribute(objects, attr, default=_DEFAULT):
def excInfoOrFailureToExcInfo(err):
def suppress(action='ignore', **kwarg):
@defer.inlineCallbacks DCNL def _runSequentially(callables, stopOnFirstError=False):
def _removeSafely(path):
def _unusedTestDirectory(base):
def _listToPhrase(things, finalDelimiter, delimiter=', DCSP '):
def makeTodo(value):
def _setWarningRegistryToNone(modules):
def _collectWarnings(observeWarning, f, *args, **kwargs):
def _clearSuite(suite):
def decorate(test, decorator):
def _iterateTests(testSuiteOrCase):
def testNames(tests):
@deprecated(CallDeprecatedTests.version) DCNL def oldMethod(x):
@deprecated(CallDeprecatedTests.version, replacement='newMethod') DCNL def oldMethodReplaced(x):
def sibpath(filename):
def badDecorator(fn):
def goodDecorator(fn):
def makeFailure():
def makeService(config):
def makeService(options):
def verifyHostKey(transport, host, pubKey, fingerprint):
def isInKnownHosts(host, pubKey, options):
def getHostKeyAlgorithms(host, options):
def _b64encode(s):
def _extractCommon(string):
def _hmacedString(key, string):
def _saveKey(key, options):
def makeGetpass(*passphrases):
def determineDefaultFunctionName():
def _has_ipv6():
def _ecmaCodeTableCoordinate(column, row):
def connectSSHTransport(service, hostAddress=None, peerAddress=None):
def rectangle(terminal, position, dimension):
def assembleFormattedText(formatted):
def lsLine(name, s):
def _getRandomNumber(random, bits):
def _generateX(random, bits):
def _getSupportedCiphers():
def intFromBytes(data, byteorder, signed=False):
def intToBytes(integer, length=None):
def NS(t):
def getNS(s, count=1):
def getMP(data, count=1):
def _MPpow(x, y, z):
def ffs(c, s):
def parseRequest_pty_req(data):
def packRequest_pty_req(term, geometry, modes):
def parseRequest_window_change(data):
def packRequest_window_change(geometry):
@deprecated(Version('Twisted', 15, 5, 0)) DCNL def objectType(obj):
def _getPersistentRSAKey(location, keySize=4096):
def packOpen_direct_tcpip(destination, source):
def unpackOpen_direct_tcpip(data):
def packGlobal_tcpip_forward(peer):
def getKex(kexAlgorithm):
def isEllipticCurve(kexAlgorithm):
def isFixedGroup(kexAlgorithm):
def getHashProcessor(kexAlgorithm):
def getDHGeneratorAndPrime(kexAlgorithm):
def getSupportedKeyExchanges():
def lastColorizedLine(source):
def verifyCryptedPassword(crypted, pw):
def _pwdGetByName(username):
def _shadowGetByName(username):
def readAuthorizedKeyFile(fileobj, parseKey=keys.Key.fromString):
def _keysFromFilepaths(filepaths, parseKey):
def outputFromPythonScript(script, *args):
def _parseLocalVariables(line):
def loadLocalVariables(filename):
def isTestFile(filename):
def _maybeFindSourceLine(testThing):
def _checkKnownRunOrder(order):
def _wrappedPdb():
def _makeRunner(config):
def reduceCopyRegistered(cr):
def _createPluginDummy(entrypath, pluginContent, real, pluginModule):
def patchUserDatabase(patch, user, uid, group, gid):
def _patchTextFileLogObserver(patch):
def _setupSyslog(testCase):
def passivemode_msg(protocol, host='127.0.0.1', port=12345):
def returnConnected(server, client):
def CreateProcess(appName, cmdline, procSecurity, threadSecurity, inheritHandles, newEnvironment, env, workingDir, startupInfo):
def waitUntilAllDisconnected(reactor, protocols):
def _buildTestClasses(_locals):
def _install(modules):
def _makePackages(parent, attributes, result):
def _functionOnlyImplementer(*interfaces):
def _classSupportingImplementer(*interfaces):
def makeFakeClient(clientProtocol):
def makeFakeServer(serverProtocol):
def connect(serverProtocol, serverTransport, clientProtocol, clientTransport, debug=False, greet=True):
def connectedServerAndClient(ServerClass, ClientClass, clientTransportFactory=makeFakeClient, serverTransportFactory=makeFakeServer, debug=False, greet=True):
def _factoriesShouldConnect(clientInfo, serverInfo):
def connectableEndpoint(debug=False):
def getDivisionFailure(*args, **kwargs):
def fakeCallbackCanceller(deferred):
def _overrideFunc(v, t):
def callAllSoonCalls(loop):
def counter(counter=itertools.count()):
def certificatesForAuthorityAndServer(serviceIdentity=u'example.com'):
def _loopbackTLSConnection(serverOpts, clientOpts):
def loopbackTLSConnection(trustRoot, privateKeyFile, chainedCertFile=None):
def loopbackTLSConnectionInMemory(trustRoot, privateKey, serverCertificate, clientProtocols=None, serverProtocols=None, clientOptions=None):
def pathContainingDumpOf(testCase, *dumpables):
def negotiateProtocol(serverProtocols, clientProtocols, clientOptions=None):
def deprecatedDeferredGenerator(f):
def getDivisionFailure(*args, **kwargs):
def basePre(base, a, b):
def basePost(base, a, b):
def subPre(sub, a, b):
def subPost(sub, a, b):
def makeSQLTests(base, suffix, globals):
def generateCertificateObjects(organization, organizationalUnit):
def generateCertificateFiles(basename, organization, organizationalUnit):
def loopUntil(predicate, interval=0):
def connectedServerAndClient(ServerClass=SimpleSymmetricProtocol, ClientClass=SimpleSymmetricProtocol, *a, **kw):
def _split(sentence):
def _validateChecksum(sentence):
def _makeLatitude(value):
def _makeLongitude(value):
def _nmeaFloat(degrees, minutes):
def _coordinateSign(hemisphere):
def _coordinateType(hemisphere):
def _determinePickleModule():
def getCache(module):
def getPlugins(interface, package=None):
def pluginPackagePaths(name):
def getReactorTypes():
def installReactor(shortName):
def _maybeGlobalReactor(maybeReactor):
def backoffPolicy(initialDelay=1.0, maxDelay=60.0, factor=1.5, jitter=_goodEnoughRandom):
def _firstResult(gen):
def service(description, factory, reactor=None):
def listen(description, factory):
def Application(name, uid=None, gid=None):
def loadApplication(filename, kind, passphrase=None):
def exit(status, message=None):
def ifPlatformSupported(f):
def fakeTargetFunction():
def endpointForTesting(fireImmediately=False):
def catchLogs(testCase, logPublisher=globalLogPublisher):
def runReactorWithLogging(config, oldstdout, oldstderr, profiler=None, reactor=None):
def makePersonalServerFactory(site):
def _dashCapitalize(name):
def withRequest(f):
def addIntrospection(xmlrpc):
def _PRE(text):
def redirectTo(URL, request):
def formatFailure(myFailure):
def ResourceScript(path, registry):
def alias(aliasPath, sourcePath):
def _flatsaxParse(fl):
def renderElement(request, element, doctype='<!DOCTYPE DCSP html>', _failElement=None):
def _urljoin(base, url):
def _makeGetterFactory(url, factoryFactory, contextFactory=None, *args, **kwargs):
def _deprecateGetPageClasses():
@deprecated(Version('Twisted', 16, 7, 0), _GETPAGE_REPLACEMENT_TEXT) DCNL def getPage(url, contextFactory=None, *args, **kwargs):
@deprecated(Version('Twisted', 16, 7, 0), _GETPAGE_REPLACEMENT_TEXT) DCNL def downloadPage(url, file, contextFactory=None, *args, **kwargs):
def _requireSSL(decoratee):
def readBody(response):
def _codeToMessage(code):
def _addHeaderToRequest(request, header):
def proto(*a, **kw):
def discardBody(response):
def _makeRequestProxyFactory(clsToWrap):
def parametrizeTimeoutMixin(protocol, reactor):
def _prequest(**headers):
def sub(keys, d):
def buildRequestFrames(headers, data, frameFactory=None, streamID=1):
def buildRequestBytes(headers, data, frameFactory=None, streamID=1):
def framesFromBytes(data):
def assertWrapperExceptionTypes(self, deferred, mainType, reasonTypes):
def assertResponseFailed(self, deferred, reasonTypes):
def assertRequestGenerationFailed(self, deferred, reasonTypes):
def assertRequestTransmissionFailed(self, deferred, reasonTypes):
def justTransportResponse(transport):
def _callAppFunction(function):
def makeStatefulDispatcher(name, template):
def escapeForContent(data):
def attributeEscapingDoneOutside(data):
def writeWithAttributeEscaping(write):
def escapedCDATA(data):
def escapedComment(data):
def _getSlotValue(name, slotData, default=None):
def _flattenElement(request, root, write, slotData, renderFactory, dataEscaper):
def _flattenTree(request, root, write):
def _writeFlattenedData(state, write, result):
def flatten(request, root, write):
def flattenString(request, root):
@deprecated(Version('Twisted', 16, 0, 0)) DCNL def addSlash(request):
def _addSlash(request):
def loadMimeTypes(mimetype_locations=None, init=mimetypes.init):
def formatFileSize(size):
def substitute(request, node, subs):
def _get(node, nodeId, nodeAttrs=('id', 'class', 'model', 'pattern')):
def get(node, nodeId):
def getIfExists(node, nodeId):
def getAndClear(node, nodeId):
def clearNode(node):
def locateNodes(nodeList, key, value, noNesting=1):
def gatherTextNodes(iNode, dounescape=0, joinWith=''):
def findElementsWithAttributeShallow(parent, attribute):
def findElements(parent, matcher):
def namedChildren(parent, nodeName):
def getElementsByTagName(iNode, name):
def unescape(text, chars=REV_HTML_ESCAPE_CHARS):
def escape(text, chars=HTML_ESCAPE_CHARS):
def parse(readable, *args, **kwargs):
def parseXML(readable):
def parseXMLString(st):
@deprecated(Version('Twisted', 15, 3, 0), replacement='twisted.web.template') DCNL def PRE(text):
@deprecated(Version('Twisted', 15, 3, 0), replacement='twisted.web.template') DCNL def output(func, *args, **kw):
def getChildForRequest(resource, request):
def _computeAllowedMethods(resource):
def urlparse(url):
def parse_qs(qs, keep_blank_values=0, strict_parsing=0):
def datetimeToString(msSinceEpoch=None):
def datetimeToLogString(msSinceEpoch=None):
def timegm(year, month, day, hour, minute, second):
def stringToDatetime(dateString):
def toChunk(data):
def fromChunk(data):
def parseContentRange(header):
def _escape(s):
@provider(IAccessLogFormatter) DCNL def combinedLogFormatter(timestamp, request):
@provider(IAccessLogFormatter) DCNL def proxiedLogFormatter(timestamp, request):
def _genericHTTPChannelProtocolFactory(self):
def proxyEndpoint(wrappedEndpoint):
def unparseEndpoint(args, kwargs):
def _makeHeaderIPv6(sig=V2_SIGNATURE, verCom='!', famProto='!', addrLength='\x00$', addrs=((('\x00' * 15) + '\x01') * 2), ports='\x1f\x90"\xb8'):
def _makeHeaderIPv4(sig=V2_SIGNATURE, verCom='!', famProto='\x11', addrLength='\x00\x0c', addrs='\x7f\x00\x00\x01\x7f\x00\x00\x01', ports='\x1f\x90"\xb8'):
def _makeHeaderUnix(sig=V2_SIGNATURE, verCom='!', famProto='1', addrLength='\x00\xd8', addrs=(('/home/tests/mysockets/sock' + ('\x00' * 82)) * 2)):
@contextlib.contextmanager DCNL def convertError(sourceType, targetType):
def parseParam(line):
def makeAtom(line):
def define(host, port, database, word):
def match(host, port, database, strategy, word):
def _wrappedLogPrefix(wrapper, wrapped):
def identityPumpPolicy(queue, target):
def collapsingPumpPolicy(queue, target):
def loopbackAsync(server, client, pumpPolicy=identityPumpPolicy):
def _loopbackAsyncBody(server, serverToClient, client, clientToServer, pumpPolicy):
def loopbackTCP(server, client, port=0, noisy=True):
def loopbackUNIX(server, client, noisy=True):
def buildTLSProtocol(server=False, transport=None, fakeConnection=None):
def handshakingClientAndServer(clientGreetingData=None, clientAbortAfterHandshake=False):
def _wireNameToPythonIdentifier(key):
def _stringsToObjects(strings, arglist, proto):
def _objectsToStrings(objects, arglist, strings, proto):
def toSegments(cwd, path):
def errnoToFailure(e, path):
def _isGlobbingExpression(segments=None):
def _getgroups(uid):
def _testPermissions(uid, gid, spath, mode='r'):
def decodeHostPort(line):
def parsePWDResponse(response):
def dashCapitalize(s):
def parseViaHeader(value):
def parseURL(url, host=None, port=None):
def cleanRequestURL(url):
def parseAddress(address, host=None, port=None, clean=0):
def calcHA1(pszAlg, pszUserName, pszRealm, pszPassword, pszNonce, pszCNonce, preHA1=None):
def calcHA2(algo, pszMethod, pszDigestUri, pszQop, pszHEntity):
def calcResponse(HA1, HA2, algo, pszNonce, pszNonceCount, pszCNonce, pszQop):
def getInvalidAuthType():
def findCheckerFactories():
def findCheckerFactory(authType):
def makeChecker(description):
def load(filename, style):
def loadValueFromFile(filename, variable):
def pickleMethod(method):
def _methodFunction(classObject, methodName):
def unpickleMethod(im_name, im_self, im_class):
def _pickleFunction(f):
def _unpickleFunction(fullyQualifiedName):
def pickleModule(module):
def unpickleModule(name):
def pickleStringO(stringo):
def unpickleStringO(val, sek):
def pickleStringI(stringi):
def unpickleStringI(val, sek):
def requireUpgrade(obj):
def _aybabtu(c):
def getSource(ao):
def unjellyFromAOT(aot):
def unjellyFromSource(stringOrFile):
def jellyToAOT(obj):
def jellyToSource(obj, file=None):
def _classOfMethod(methodObject):
def _funcOfMethod(methodObject):
def _selfOfMethod(methodObject):
def open(file, flag=None, mode=None):
def setNonBlocking(fd):
def setBlocking(fd):
def readFromFD(fd, callback):
def writeToFD(fd, data):
def install():
def win32select(r, w, e, timeout=None):
def install():
def _idnaBytes(text):
def _idnaText(octets):
def install():
def install(useGtk=True):
def portableInstall(useGtk=True):
def getProcessOutput(executable, args=(), env={}, path=None, reactor=None, errortoo=0):
def getProcessValue(executable, args=(), env={}, path=None, reactor=None):
def getProcessOutputAndValue(executable, args=(), env={}, path=None, reactor=None):
def runWithWarningsSuppressed(suppressedWarnings, f, *a, **kw):
def suppressWarnings(f, *suppressedWarnings):
def deferToThreadPool(reactor, threadpool, f, *args, **kwargs):
def deferToThread(f, *args, **kwargs):
def _runMultiple(tupleList):
def callMultipleInThread(tupleList):
def blockingCallFromThread(reactor, f, *a, **kw):
def _oldGiInit():
def install(useGtk=False):
def install():
def reapAllProcesses():
def registerReapProcessHandler(pid, process):
def unregisterReapProcessHandler(pid, process):
def detectLinuxBrokenPipeBehavior():
def _listOpenFDs():
def install(runLoop=None, runner=None):
def _resolveIPv6(ip, port):
def installReactor(reactor):
def _parseTCP(factory, port, interface='', backlog=50):
def _parseUNIX(factory, address, mode='666', backlog=50, lockfile=True):
def _parseSSL(factory, port, privateKey='server.pem', certKey=None, sslmethod=None, interface='', backlog=50, extraCertChain=None, dhParameters=None):
def _tokenize(description):
def _parse(description):
def _parseServer(description, factory):
def _matchPluginToPrefix(plugins, endpointType):
def serverFromString(reactor, description):
def quoteStringArgument(argument):
def _parseClientTCP(*args, **kwargs):
def _loadCAsFromDir(directoryPath):
def _parseTrustRootPath(pathName):
def _privateCertFromPaths(certificatePath, keyPath):
def _parseClientSSLOptions(kwargs):
def _parseClientSSL(*args, **kwargs):
def _parseClientUNIX(*args, **kwargs):
def clientFromString(reactor, description):
def connectProtocol(endpoint, protocol):
def wrapClientTLS(connectionCreator, wrappedEndpoint):
def _parseClientTLS(reactor, host, port, timeout='30', bindAddress=None, certificate=None, privateKey=None, trustRoots=None, endpoint=None, **kwargs):
def startTLS(transport, contextFactory, normal, bypass):
def install():
def install(eventloop=None):
def getConnectError(e):
def logError(err):
def succeed(result):
def fail(result=None):
def execute(callable, *args, **kw):
def maybeDeferred(f, *args, **kw):
def setDebugging(on):
def getDebugging():
def _cancelledToTimedOutError(value, timeout):
def ensureDeferred(coro):
def gatherResults(deferredList, consumeErrors=False):
def _deferGenerator(g, deferred):
@deprecated(Version('Twisted', 15, 0, 0), 'twisted.internet.defer.inlineCallbacks') DCNL def deferredGenerator(f):
def returnValue(val):
def _inlineCallbacks(result, g, deferred):
def inlineCallbacks(f):
def install(ms=10, reactor=None, args=(), kw={}):
def _ancillaryDescriptor(fd):
def _inFilesystemNamespace(path):
def install():
def installHandler(fd):
def isDefaultHandler():
def install(app):
def _getExcludedTLSProtocols(oldest, newest):
def simpleVerifyHostname(connection, hostname):
def _usablePyOpenSSL(version):
def _selectVerifyImplementation():
def _sessionCounter(counter=itertools.count()):
def protocolNegotiationMechanisms():
def _handleattrhelper(Class, transport, methodName):
def trustRootFromCertificates(certificates):
def platformTrust():
def _tolerateErrors(wrapped):
def optionsForClientTLS(hostname, trustRoot=None, clientCertificate=None, acceptableProtocols=None, **kw):
def _expandCipherString(cipherString, method, options):
def _setAcceptableProtocols(context, acceptableProtocols):
def ensureNotImported(moduleNames, errorMessage, preventImports=[]):
def deterministicPool():
def deterministicReactorThreads():
def makeFakeKQueue(testKQueue, testKEvent):
def win32GetLinkLocalIPv6Addresses():
def deterministicResolvingReactor(reactor, expectedAddresses=(), hostMap=None):
def addFakePlugin(testCase, dropinSource='fakeendpoint.py'):
def connectionCreatorFromEndpoint(memoryReactor, tlsEndpoint):
def replacingGlobals(function, **newGlobals):
def findFreePort(interface='127.0.0.1', family=socket.AF_INET, type=socket.SOCK_STREAM):
def runProtocolsWithReactor(reactorBuilder, serverProtocol, clientProtocol, endpointCreator):
def _getWriters(reactor):
def needsRunningReactor(reactor, thunk):
def stopOnError(case, reactor, publisher=None):
def onlyOnPOSIX(testMethod):
def _maybeCleanupScopeIndex(family, packed):
def _interfaces():
def posixGetLinkLocalIPv6Addresses():
def _abstractPath(case):
def _has_ipv6():
def getLinkLocalIPv6Address():
def connect(client, destination):
def createTestSocket(test, addressFamily, socketType):
def oneTransportTest(testMethod):
def assertReading(testCase, reactor, transport):
def assertNotReading(testCase, reactor, transport):
@_replaceIf(_PY3, getattr(os, 'fsdecode', None)) DCNL def _fsdecode(x):
def _findShebang(filename):
def _invalidWin32App(pywinerr):
def install():
def coiterate(iterator):
def cooperate(iterator):
def deferLater(clock, delay, callable, *args, **kw):
def react(main, argv=(), _reactor=None):
def isIPAddress(addr, family=AF_INET):
def isIPv6Address(addr):
def install():
def _getInstallFunction(platform):
def humanReadableMask(mask):
def install(widget, ms=10, reactor=None):
def uninstall():
def createMemoryWorker():
def pool(currentLimit, threadFactory=Thread):
def main():
def main():
def synchronousIsValidUser(user):
def makeService(config):
def error(why, msg):
def connected(perspective):
def finished(ignored):
def main():
def main():
def benchmarkFunc(iter, args=()):
def benchmarkNFunc(iter, ns):
def instantiate():
def instantiateShootCallback():
def instantiateShootErrback():
def instantiateAddCallbacksNoResult(n):
def instantiateAddCallbacksBeforeResult(n):
def instantiateAddCallbacksAfterResult(n):
def pauseUnpause(n):
def benchmark():
def test_performance():
def timeit(func, iter=1000, *args, **kwargs):
def sendmail(authenticationUsername, authenticationSecret, fromAddress, toAddress, messageFile, smtpHost, smtpPort=25):
def cbSentMessage(result):
def ebSentMessage(err):
def main(args=None):
def send(message, subject, sender, recipients, host):
def cbServerGreeting(proto, username, password):
def ebConnection(reason):
def cbAuthentication(result, proto):
def ebAuthentication(failure, proto, username, password):
def cbInsecureLogin(result, proto, username, password):
def cbMailboxList(result, proto):
def cbPickMailbox(result, proto, mboxes):
def cbExamineMbox(result, proto):
def cbFetch(result, proto):
def cbClose(result):
def quitServer(ignored):
def leftGroup(ignored, avatar):
def sentMessage(ignored, group, avatar):
def joinedGroup(group, avatar):
def loggedIn(avatar, group):
def errorOccurred(err):
def run(host, port, username, password, group):
def main():
def main(reactor, jid, secret):
def reverseNameFromIPv4Address(address):
def reverseNameFromIPv6Address(address):
def reverseNameFromIPAddress(address):
def printResult(result):
def printSummary(results):
def printResult(records, domainname):
def printError(failure, domainname):
def formatRecords(records, heading):
def printResults(results, domainname):
def printError(failure, domainname):
def printResult(address, hostname):
def printError(failure, hostname):
def main():
def main():
def benchmark(scale=1):
def main(args=None):
def main(reactor, url):
def encode_to_py3bytes_or_py2str(s):
def get_exc_from_name(name):
def get_rc_exc(rc):
def which(program, paths=None):
def ob_is_tty(ob):
def bufsize_validator(kwargs):
def compile_args(args, kwargs, sep, prefix):
def aggregate_keywords(keywords, sep, prefix, raw=False):
def setwinsize(fd, rows_cols):
def construct_streamreader_callback(process, handler):
def handle_process_exit_code(exit_code):
def no_interrupt(syscall, *args, **kwargs):
def input_thread(log, stdin, is_alive, quit, close_before_term):
def background_thread(timeout_fn, timeout_event, handle_exit_code, is_alive, quit):
def output_thread(log, stdout, stderr, timeout_event, is_alive, quit, stop_output_event):
def determine_how_to_read_input(input_obj):
def get_iter_string_reader(stdin):
def bufsize_type_to_bufsize(bf_type):
@with_lock(PUSHD_LOCK) DCNL def pushd(path):
@contextmanager DCNL def args(**kwargs):
@contrib('git') DCNL def git(orig):
@contrib('sudo') DCNL def sudo(orig):
def in_importlib(frame):
def register_importer():
def create_tmp_test(code, prefix='tmp', delete=True, **kwargs):
def get_image(isbn, image_filename):
def test_visual(displayer, choices):
def terminate_and_clean(instances):
def block_until_http_ready(urlstring, wait_time=10, timeout=240):
def block_until_ssh_open(ipstring, wait_time=10, timeout=120):
def block_until_instance_ready(booting_instance, wait_time=5, extra_wait_time=20):
def local_git_clone(repo_url):
def local_git_branch(repo_url, branch_name):
def local_git_PR(repo_url, PRnumstr, merge_master=True):
def local_repo_to_remote():
def local_repo_clean():
def deploy_script(scriptpath, *args):
def grab_certbot_log():
def create_client_instances(targetlist):
def main():
def set_up():
def set_up_dirs():
def set_up_nginx_dir(root_path):
def set_up_command(config_dir, logs_dir, work_dir, nginx_dir):
def test_command(command, directories):
def check_error(command, dir_path):
def check_call(args):
def report_failure(err_msg, out, err):
def subprocess_call(args):
def log_output(level, out, err):
def pre_arg_parse_setup():
def post_arg_parse_setup(config):
def setup_log_file_handler(config, logfile, fmt):
def pre_arg_parse_except_hook(memory_handler, *args, **kwargs):
def post_arg_parse_except_hook(exc_type, exc_value, trace, debug, log_path):
def exit_with_log_path(log_path):
def update_live_symlinks(config):
def rename_lineage(config):
def certificates(config):
def delete(config):
def lineage_for_certname(cli_config, certname):
def domains_for_certname(config, certname):
def find_duplicative_certs(config, domains):
def _get_certname(config, verb):
def _report_lines(msgs):
def _report_human_readable(config, parsed_certs):
def _describe_certs(config, parsed_certs, parse_failures):
def _search_lineages(cli_config, func, initial_rv):
def _reconstitute(config, full_path):
def _restore_webroot_config(config, renewalparams):
def _restore_plugin_configs(config, renewalparams):
def restore_required_config_elements(config, renewalparams):
def _restore_pref_challs(unused_name, value):
def _restore_bool(name, value):
def _restore_int(name, value):
def _restore_str(unused_name, value):
def should_renew(config, lineage):
def _avoid_invalidating_lineage(config, lineage, original_server):
def renew_cert(config, domains, le_client, lineage):
def report(msgs, category):
def handle_renewal_request(config):
def ask(enhancement):
def redirect_by_default():
def _wrap_lines(msg):
def input_with_timeout(prompt=None, timeout=36000.0):
def assert_valid_call(prompt, default, cli_flag, force_interactive):
def separate_list_input(input_):
def _parens_around_char(label):
def get_email(invalid=False, optional=True):
def choose_account(accounts):
def choose_names(installer):
def get_valid_domains(domains):
def _sort_names(FQDNs):
def _filter_names(names):
def _choose_names_manually(prompt_prefix=''):
def success_installation(domains):
def success_renewal(domains):
def success_revocation(cert_path):
def _gen_ssl_lab_urls(domains):
def _gen_https_names(domains):
def validated_input(validator, *args, **kwargs):
def validated_directory(validator, *args, **kwargs):
def _translate_ocsp_query(cert_path, ocsp_output, ocsp_errors):
def init_save_key(key_size, key_dir, keyname='key-certbot.pem'):
def init_save_csr(privkey, names, path):
def valid_csr(csr):
def csr_matches_pubkey(csr, privkey):
def import_csr_file(csrfile, data):
def make_key(bits):
def valid_privkey(privkey):
def verify_renewable_cert(renewable_cert):
def verify_renewable_cert_sig(renewable_cert):
def verify_cert_matches_priv_key(cert_path, key_path):
def verify_fullchain(renewable_cert):
def pyopenssl_load_certificate(data):
def get_sans_from_cert(cert, typ=OpenSSL.crypto.FILETYPE_PEM):
def get_names_from_cert(csr, typ=OpenSSL.crypto.FILETYPE_PEM):
def dump_pyopenssl_chain(chain, filetype=OpenSSL.crypto.FILETYPE_PEM):
def notBefore(cert_path):
def notAfter(cert_path):
def _notAfterBefore(cert_path, method):
def sha256sum(filename):
def run_script(params, log=logger.error):
def exe_exists(exe):
def lock_dir_until_exit(dir_path):
def set_up_core_dir(directory, mode, uid, strict):
def make_or_verify_dir(directory, mode=493, uid=0, strict=False):
def check_permissions(filepath, mode, uid=0):
def safe_open(path, mode='w', chmod=None, buffering=None):
def unique_file(path, chmod=511, mode='w'):
def unique_lineage_name(path, filename, chmod=420, mode='w'):
def safely_remove(path):
def get_filtered_names(all_names):
def get_os_info(filepath='/etc/os-release'):
def get_os_info_ua(filepath='/etc/os-release'):
def get_systemd_os_info(filepath='/etc/os-release'):
def get_systemd_os_like(filepath='/etc/os-release'):
def _get_systemd_os_release_var(varname, filepath='/etc/os-release'):
def _normalize_string(orig):
def get_python_os_info():
def safe_email(email):
def add_deprecated_argument(add_argument, argument_name, nargs):
def enforce_le_validity(domain):
def enforce_domain_sanity(domain):
def get_strict_version(normalized):
def is_staging(srv):
def atexit_register(func, *args, **kwargs):
def gen_combos(challbs):
def chall_to_challb(chall, status):
def gen_authzr(authz_status, domain, challs, statuses, combos=True):
def enable_tab_completion(unused_command):
def setup_test_files():
def get_save_notes(dire):
def get_filepaths(dire):
def get_new_files(dire):
def get_undo_commands(dire):
def read_in(path):
def update_file(filename, string):
def vector_path(*names):
def load_vector(*names):
def load_cert(*names):
def load_comparable_cert(*names):
def load_csr(*names):
def load_comparable_csr(*names):
def load_rsa_private_key(*names):
def load_pyopenssl_private_key(*names):
def skip_unless(condition, reason):
def make_lineage(config_dir, testfile):
def patch_get_utility(target='zope.component.getUtility'):
def lock_and_call(func, lock_path):
def hold_lock(cv, lock_path):
def unlink_all(rc_object):
def fill_with_sample_data(rc_object):
def gen_auth_resp(chall_list):
def gen_dom_authzr(domain, challs, combos=True):
def get_signals(signums):
def set_signals(sig_handler_dict):
@contextlib.contextmanager DCNL def signal_receiver(signums):
def send_signal(signum):
def check_config_sanity(config):
def renewal_conf_files(config):
def renewal_file_for_certname(config, certname):
def config_with_defaults(config=None):
def add_time_interval(base_time, interval, textparser=parsedatetime.Calendar()):
def write_renewal_config(o_filename, n_filename, archive_dir, target, relevant_data):
def rename_renewal_config(prev_name, new_name, cli_config):
def update_configuration(lineagename, archive_dir, target, cli_config):
def get_link_target(link):
def _relevant(option):
def relevant_values(all_values):
def lineagename_for_filename(config_filename):
def renewal_filename_for_lineagename(config, lineagename):
def _relpath_from_file(archive_dir, from_file):
def _full_archive_path(config_obj, cli_config, lineagename):
def _full_live_path(cli_config, lineagename):
def delete_files(config, certname):
def acme_from_config_key(config, key):
def determine_user_agent(config):
def ua_flags(config):
def sample_user_agent():
def register(config, account_storage, tos_cb=None):
def perform_registration(acme, config):
def validate_key_csr(privkey, csr=None):
def rollback(default_installer, checkpoints, config, plugins):
def view_config_changes(config, num=None):
def _open_pem_file(cli_arg_path, pem_path):
def _save_chain(chain_pem, chain_file):
def _suggest_donation_if_appropriate(config):
def _get_and_save_cert(le_client, config, domains=None, certname=None, lineage=None):
def _handle_subset_cert_request(config, domains, cert):
def _handle_identical_cert_request(config, lineage):
def _find_lineage_for_domains(config, domains):
def _find_cert(config, domains, certname):
def _find_lineage_for_domains_and_certname(config, domains, certname):
def _ask_user_to_confirm_new_names(config, new_domains, certname, old_domains):
def _find_domains_or_certname(config, installer):
def _report_new_cert(config, cert_path, fullchain_path, key_path=None):
def _determine_account(config):
def unregister(config, unused_plugins):
def register(config, unused_plugins):
def install(config, plugins):
def plugins_cmd(config, plugins):
def rollback(config, plugins):
def config_changes(config, unused_plugins):
def update_symlinks(config, unused_plugins):
def rename(config, unused_plugins):
def delete(config, unused_plugins):
def certificates(config, unused_plugins):
def revoke(config, unused_plugins):
def run(config, plugins):
def _csr_get_and_save_cert(config, le_client):
def renew_cert(config, plugins, lineage):
def certonly(config, plugins):
def renew(config, unused_plugins):
def make_or_verify_needed_dirs(config):
def set_displayer(config):
def main(cli_args=sys.argv[1:]):
def validate_hooks(config):
def _prog(shell_cmd):
def validate_hook(shell_cmd, hook_name):
def pre_hook(config):
def post_hook(config):
def run_saved_post_hooks():
def deploy_hook(config, domains, lineage_path):
def renew_hook(config, domains, lineage_path):
def _run_hook(shell_cmd):
def execute(shell_cmd):
def handle_subscription(config):
def _want_subscription():
def subscribe(email):
def _check_response(response):
def _report_failure(reason=None):
def report_new_account(config):
def path_surgery(cmd):
def option_namespace(name):
def dest_namespace(name):
def install_ssl_options_conf(options_ssl, options_ssl_digest, mod_ssl_conf_src, all_ssl_options_hashes):
def dir_setup(test_dir, pkg):
def pick_configurator(config, default, plugins, question='How DCSP would DCSP you DCSP like DCSP to DCSP authenticate DCSP and DCSP install DCSP certificates?'):
def pick_installer(config, default, plugins, question='How DCSP would DCSP you DCSP like DCSP to DCSP install DCSP certificates?'):
def pick_authenticator(config, default, plugins, question='How DCSP would DCSP you DCSP like DCSP to DCSP authenticate DCSP with DCSP the DCSP ACME DCSP CA?'):
def pick_plugin(config, default, plugins, question, ifaces):
def choose_plugin(prepared, question):
def record_chosen_plugins(config, plugins, auth, inst):
def choose_configurator_plugins(config, plugins, verb):
def set_configurator(previously, now):
def cli_plugin_requests(config):
def diagnose_configurator_problem(cfg_type, requested, plugins):
def write(values, path):
def _validate_webroot(webroot_path):
def get_open_port():
def validate_file(filename):
def validate_file_permissions(filename):
def base_domain_name_guesses(domain):
def report_config_interaction(modified, modifiers):
def possible_deprecation_warning(config):
def set_by_cli(var):
def has_default_value(option, value):
def option_was_set(option, value):
def argparse_type(variable):
def read_file(filename, mode='rb'):
def flag_default(name):
def config_help(name, hidden=False):
def prepare_and_parse_args(plugins, args, detect_defaults=False):
def add_domains(args_or_config, domains):
def parse_preferred_challenges(pref_challs):
def nonnegative_int(value):
def notify(subject, whom, what):
def lock_dir(dir_path):
def challb_to_achall(challb, account_key, domain):
def gen_challenge_path(challbs, preferences, combinations):
def _find_smart_path(challbs, preferences, combinations):
def _find_dumb_path(challbs, preferences):
def _report_no_chall_path():
def _report_failed_challs(failed_achalls):
def _generate_failed_chall_msg(failed_achalls):
def make_and_verify_selection(server_root, temp_dir):
def copy_config(server_root, temp_dir):
def copy_file_without_comments(source, destination):
def safe_config_file(config_file):
def setup_tempdir(args):
def verify_config(args):
def locate_config(apache_ctl):
def get_args():
def main():
def read_file(filename, encoding='utf8'):
def nginx_restart(nginx_ctl, nginx_conf):
def install_ssl_options_conf(options_ssl, options_ssl_digest):
def get_data_filename(filename):
def get_nginx_configurator(config_path, config_dir, work_dir, logs_dir, version=(1, 6, 2)):
def filter_comments(tree):
def contains_at_depth(haystack, needle, n):
def _do_for_subarray(entry, condition, func, path=None):
def get_best_match(target_name, names):
def _is_include_directive(entry):
def _is_ssl_on_directive(entry):
def _add_directives(block, directives, replace):
def _comment_directive(block, location):
def _comment_out_directive(block, location, include_location):
def _add_directive(block, directive, replace):
def _apply_global_addr_ssl(addr_to_ssl, parsed_server):
def _parse_server_raw(server):
def os_constant(key):
def _find_directive(directives, directive_name):
def loads(source):
def load(_file):
def dumps(blocks):
def dump(blocks, _file):
def _get_server_root(config):
def _get_names(config):
def _get_server_root(config):
def _get_names(config):
def create_le_config(parent_dir):
def extract_configs(configs, parent_dir):
def test_authenticator(plugin, config, temp_dir):
def _create_achalls(plugin):
def test_installer(args, plugin, config, temp_dir):
def test_deploy_cert(plugin, temp_dir, domains):
def test_enhancements(plugin, domains):
def _save_and_restart(plugin, title=None):
def test_rollback(plugin, config, backup):
def _create_backup(config, temp_dir):
def _dirs_are_unequal(dir1, dir2):
def get_args():
def setup_logging(args):
def main():
def create_response(status_code=200, headers=None):
def vector_path(*names):
def load_vector(*names):
def load_cert(*names):
def load_comparable_cert(*names):
def load_csr(*names):
def load_comparable_csr(*names):
def load_rsa_private_key(*names):
def load_pyopenssl_private_key(*names):
def skip_unless(condition, reason):
def probe_sni(name, host, port=443, timeout=300, method=_DEFAULT_TLSSNI01_SSL_METHOD, source_address=('', 0)):
def make_csr(private_key_pem, domains, must_staple=False):
def _pyopenssl_cert_or_req_san(cert_or_req):
def gen_ss_cert(key, domains, not_before=None, validity=(((7 * 24) * 60) * 60), force_san=True):
def map_keys(dikt, func):
def simple_tls_sni_01_server(cli_args, forever=True):
def is_acme_error(err):
def b64encode(data):
def b64decode(data):
def encode_b64jose(data):
def decode_b64jose(data, size=None, minimum=False):
def encode_hex16(value):
def decode_hex16(value, size=None, minimum=False):
def encode_cert(cert):
def decode_cert(b64der):
def encode_csr(csr):
def decode_csr(b64der):
def select_vhost(domain, vhosts):
def _vhost_menu(domain, vhosts):
def _get_mod_deps(mod_name):
def get_file_path(vhost_path):
def get_internal_aug_path(vhost_path):
def _split_aug_path(vhost_path):
def install_ssl_options_conf(options_ssl, options_ssl_digest):
def get_apache_configurator(config_path, vhost_path, config_dir, work_dir, version=(2, 4, 7), conf=None):
def get_vh_truth(temp_dir, config_name):
def case_i(string):
def get_aug_path(file_path):
def os_constant(key):
def os_like_constants():
def write(contents, dir, filename):
def latest_stable_version(get):
def verified_new_le_auto(get, tag, temp_dir):
def hashed_download(url, temp, digest):
def main():
@nottest DCNL def tests_dir():
def server_and_port(resources):
@contextmanager DCNL def serving(resources):
def out_and_err(command, input=None, shell=False, env=None):
def signed(content, private_key_name='signing.key'):
def install_le_auto(contents, venv_dir):
def run_le_auto(venv_dir, base_url, **kwargs):
def set_le_script_version(venv_dir, version):
def build(version=None, requirements=None):
def certbot_version(build_script_dir):
def tprint(call_name):
def run_cmd(cmd):
def run_cmd(cmd, shell=False):
def is_local_file(file_location):
def download_file(file_url):
def create_kvm_guest(guest_name, num_virtual_cpus, virtual_ram, virtual_disk_size, os, os_iso_path=None, os_tree_location=None, autoinstall_file_location=None, kernel_args=None):
def parse_input():
def main():
def __grab_lock():
def serialize(collection):
def serialize_item(collection, item):
def serialize_delete(collection, item):
def deserialize(collection, topological=True):
def __get_storage_module(collection_type):
def log_exc(logger):
def pretty_hex(ip, length=8):
def get_host_ip(ip, shorten=True):
def _IP(ip):
def get_config_filename(sys, interface):
def is_ip(strdata):
def is_mac(strdata):
def is_systemd():
def get_random_mac(api_handle, virt_type='xenpv'):
def find_matching_files(directory, regex):
def find_highest_files(directory, unversioned, regex):
def find_kernel(path):
def remove_yum_olddata(path, logger=None):
def find_initrd(path):
def read_file_contents(file_location, logger=None, fetch_if_remote=False):
def remote_file_exists(file_url):
def file_is_remote(file_location):
def input_string_or_list(options):
def input_string_or_dict(options, allow_multiples=True):
def grab_tree(api_handle, item):
def blender(api_handle, remove_dicts, root_obj):
def __consolidate(node, results):
def dict_to_string(_dict):
def rsync_files(src, dst, args, logger=None, quiet=True):
def run_this(cmd, args, logger):
def run_triggers(api, ref, globber, additional=[], logger=None):
def get_family():
def check_dist():
def tftpboot_location():
def hashfile(fn, lcache=None, logger=None):
def cachefile(src, dst, api=None, logger=None):
def linkfile(src, dst, symlink_ok=False, cache=True, api=None, logger=None):
def path_tail(apath, bpath):
def set_virt_file_size(self, num):
def set_virt_disk_driver(self, driver):
def set_virt_auto_boot(self, num):
def set_virt_pxe_boot(self, num):
def set_virt_ram(self, num):
def set_virt_type(self, vtype):
def set_virt_bridge(self, vbridge):
def set_virt_path(self, path, for_system=False):
def set_virt_cpus(self, num):
def get_file_device_path(fname):
def clear_from_fields(item, fields, is_subobject=False):
def to_string_from_fields(item_dict, fields, interface_fields=None):
def get_setter_methods_from_fields(item, fields):
def load_signatures(filename, cache=True):
def get_valid_breeds():
def get_valid_os_versions_for_breed(breed):
def get_valid_os_versions():
def get_valid_archs():
def get_shared_secret():
def strip_none(data, omit_none=False):
def revert_strip_none(data):
def lod_to_dod(_list, indexkey):
def lod_sort_by_key(_list, indexkey):
def register():
def authenticate(api_handle, username, password):
def register():
def what():
def serialize_item(collection, item):
def serialize_delete(collection, item):
def serialize(collection):
def deserialize(collection, topological=True):
def register():
def authenticate(api_handle, username, password):
def register():
def authenticate(api_handle, username, password):
def register():
def authorize(api_handle, user, resource, arg1=None, arg2=None):
def register():
def register():
def register():
def authenticate(api_handle, username, password):
def register():
def authenticate(api_handle, username, password):
def register():
def register():
def register():
def authorize(api_handle, user, resource, arg1=None, arg2=None):
def register():
def authorize(api_handle, user, resource, arg1=None, arg2=None):
def register():
def authenticate(api_handle, username, password):
def register():
def authenticate(api_handle, username, password):
def register():
def what():
def serialize_item(collection, item):
def serialize_delete(collection, item):
def serialize(collection):
def filter_upgrade_duplicates(file_list):
def deserialize(collection, topological=True):
def register():
def get_power_types():
def validate_power_type(power_type):
def get_power_command(power_type):
def object_name(name, parent):
def hostname(dnsname):
def mac_address(mac, for_item=True):
def ipv4_address(addr):
def ipv4_netmask(addr):
def ipv6_address(addr):
def name_servers(nameservers, for_item=True):
def name_servers_search(search, for_item=True):
def n2s(data):
def opt(options, k, defval=''):
def main():
def get_module_name(category, field, fallback_module_name=None):
def get_module_from_file(category, field, fallback_module_name=None):
def smart_if(parser, token):
def index(request):
def task_created(request):
def error_page(request, message):
def get_fields(what, is_subobject, seed_item=None):
def get_network_interface_fields():
def __tweak_field(fields, field_name, attribute, value):
def __format_columns(column_names, sort_field):
def __format_items(items, column_names):
def genlist(request, what, page=None):
@require_POST DCNL @csrf_protect DCNL def modify_list(request, what, pref, value=None):
@require_POST DCNL @csrf_protect DCNL def generic_rename(request, what, obj_name=None, obj_newname=None):
@require_POST DCNL @csrf_protect DCNL def generic_copy(request, what, obj_name=None, obj_newname=None):
@require_POST DCNL @csrf_protect DCNL def generic_delete(request, what, obj_name=None):
@require_POST DCNL @csrf_protect DCNL def generic_domulti(request, what, multi_mode=None, multi_arg=None):
def check(request):
def aifile_list(request, page=None):
@csrf_protect DCNL def aifile_edit(request, aifile_name=None, editmode='edit'):
@require_POST DCNL @csrf_protect DCNL def aifile_save(request):
def snippet_list(request, page=None):
@csrf_protect DCNL def snippet_edit(request, snippet_name=None, editmode='edit'):
@require_POST DCNL @csrf_protect DCNL def snippet_save(request):
def setting_list(request):
def events(request):
def eventlog(request, event=0):
def random_mac(request, virttype='xenpv'):
@require_POST DCNL @csrf_protect DCNL def sync(request):
@require_POST DCNL @csrf_protect DCNL def reposync(request):
@require_POST DCNL @csrf_protect DCNL def hardlink(request):
@require_POST DCNL @csrf_protect DCNL def replicate(request):
def __names_from_dicts(lod, optional=True):
@csrf_protect DCNL def generic_edit(request, what=None, obj_name=None, editmode='new'):
@require_POST DCNL @csrf_protect DCNL def generic_save(request, what):
def has_configure_files(build):
def has_man_pages(build):
def read_packet(data, local_sock, remote_addr):
def partial(func, *args, **keywords):
def handle_request(request, fd, events):
def new_req(sock, templar, fd, events):
def colorize(img, heatmap):
def ptb_raw_data(data_path=None):
def ptb_producer(raw_data, batch_size, num_steps, name=None):
def visualize_conv_weights(filters, name):
def visualize_conv_activations(activation, name):
@layer_register() DCNL def DynamicConvFilter(inputs, filters, out_channel, kernel_shape, stride=1, padding='SAME'):
def sample(path, start, length):
@graph_memoized DCNL def get_dorefa(bitW, bitA, bitG):
def split_input(img):
def name_conversion(caffe_layer_name):
def fbresnet_augmentor(isTrain):
def get_imagenet_dataflow(datadir, name, batch_size, augmentors, dir_structure='original'):
def apply_preactivation(l, preact):
def filter_valid_range(points, rect):
def exponential_smooth(data, alpha):
def do_plot(data_xs, data_ys):
def QueueInputTrainer(config, input_queue=None):
def SyncMultiGPUTrainer(config):
@layer_register() DCNL def FullyConnected(x, out_dim, W_init=None, b_init=None, nl=tf.identity, use_bias=True):
@layer_register(log_shape=False) DCNL def LayerNorm(x, epsilon=1e-05, use_bias=True, use_scale=True, data_format='NHWC'):
@layer_register(log_shape=False) DCNL def InstanceNorm(x, epsilon=1e-05, data_format='NHWC', use_affine=True):
@layer_register(use_scope=False) DCNL def Maxout(x, num_unit):
@layer_register(log_shape=False) DCNL def PReLU(x, init=0.001, name='output'):
@layer_register(use_scope=False, log_shape=False) DCNL def LeakyReLU(x, alpha, name='output'):
@layer_register(log_shape=False, use_scope=False) DCNL def BNReLU(x, name=None):
@layer_register(use_scope=False, log_shape=False) DCNL def ConcatWith(x, tensor, dim):
def get_registered_layer(name):
def disable_layer_logging():
def layer_register(log_shape=True, use_scope=True):
def regularize_cost(regex, func, name='regularize_cost'):
def regularize_cost_from_collection(name='regularize_cost'):
@layer_register(log_shape=False, use_scope=False) DCNL def Dropout(x, keep_prob=0.5, is_training=None, noise_shape=None):
@layer_register() DCNL def Conv2D(x, out_channel, kernel_shape, padding='SAME', stride=1, W_init=None, b_init=None, nl=tf.identity, split=1, use_bias=True, data_format='NHWC'):
@layer_register() DCNL def Deconv2D(x, out_shape, kernel_shape, stride, padding='SAME', W_init=None, b_init=None, nl=tf.identity, use_bias=True, data_format='NHWC'):
@layer_register() DCNL def MaxPooling(x, shape, stride=None, padding='VALID', data_format='NHWC'):
@layer_register() DCNL def AvgPooling(x, shape, stride=None, padding='VALID', data_format='NHWC'):
@layer_register() DCNL def GlobalAvgPooling(x, data_format='NHWC'):
@layer_register() DCNL def FixedUnPooling(x, shape, unpool_mat=None, data_format='NHWC'):
@layer_register() DCNL def BilinearUpSample(x, shape):
@layer_register() DCNL def SoftMax(x, use_temperature=False, temperature_init=1.0):
def sample(img, coords):
@layer_register() DCNL def ImageSample(inputs, borderMode='repeat'):
@layer_register(log_shape=False) DCNL def BatchNorm(x, use_local_stat=None, decay=0.9, epsilon=1e-05, use_scale=True, use_bias=True, gamma_init=tf.constant_initializer(1.0), data_format='NHWC'):
@layer_register(log_shape=False) DCNL def BatchRenorm(x, rmax, dmax, decay=0.9, epsilon=1e-05, use_scale=True, use_bias=True, data_format='NHWC'):
def get_tensors_inputs(placeholders, tensors, names):
def get_sublist_by_names(lst, names):
def remap_input_source(input, names):
def class_scope(func):
def auto_reuse_variable_scope(func):
@deprecated('Use DCSP custom_getter_scope DCSP instead.', '2017-11-06') DCNL def replace_get_variable(fn):
def remap_variables(fn):
def freeze_variables():
def get_default_sess_config(mem_fraction=0.99):
@graph_memoized DCNL def get_global_step_var():
def get_global_step_value():
def get_op_tensor_name(name):
def get_tensors_by_names(names):
def get_op_or_tensor_by_name(name):
def get_tf_version_number():
def backup_collection(keys):
def restore_collection(backup):
@contextmanager DCNL def freeze_collection(keys):
def prediction_incorrect(logits, label, topk=1, name='incorrect_vector'):
def accuracy(logits, label, topk=1, name='accuracy'):
def flatten(x):
def batch_flatten(x):
def class_balanced_cross_entropy(pred, label, name='cross_entropy_loss'):
def class_balanced_sigmoid_cross_entropy(logits, label, name='cross_entropy_loss'):
def print_stat(x, message=None):
def rms(x, name=None):
def huber_loss(x, delta=1, name='huber_loss'):
def get_scalar_var(name, init_value, summary=False, trainable=False):
def psnr(prediction, ground_truth, maxp=None, name='psnr'):
@contextmanager DCNL def guided_relu():
def saliency_map(output, input, name='saliency_map'):
def contrastive_loss(left, right, y, margin, extra=False, scope='constrastive_loss'):
def siamese_cosine_loss(left, right, y, scope='cosine_loss'):
def triplet_loss(anchor, positive, negative, margin, extra=False, scope='triplet_loss'):
def soft_triplet_loss(anchor, positive, negative, extra=True, scope='soft_triplet_loss'):
def shapeless_placeholder(x, axis, name):
def get_model_loader(filename):
def TryResumeTraining():
def apply_grad_processors(opt, gradprocs):
@contextmanager DCNL def argscope(layers, **kwargs):
def get_arg_scope():
def get_savename_from_varname(varname, varname_prefix=None, savename_prefix=None):
def dump_session_params(path):
def get_checkpoint_path(model_path):
def load_chkpt_vars(model_path):
def is_training_name(name):
def describe_trainable_vars():
def get_shape_str(tensors):
def create_scalar_summary(name, v):
def create_image_summary(name, val):
def add_activation_summary(x, name=None):
def add_param_summary(*summary_lists):
def add_moving_summary(*args, **kwargs):
def SelectComponent(ds, idxs):
def send_dataflow_zmq(df, addr, hwm=50, print_interval=100, format=None):
def CaffeLMDB(lmdb_path, shuffle=True, keys=None):
def dump_dataflow_to_process_queue(df, size, nr_consumer):
def dump_dataflow_to_lmdb(df, lmdb_path, write_frequency=5000):
def dump_dataflow_to_tfrecord(df, path):
def maybe_download_and_extract(dest_directory, cifar_classnum):
def maybe_download(filename, work_directory):
def extract_images(filename):
def extract_labels(filename):
def perturb_BB(image_shape, bb, max_perturb_pixel, rng=None, max_aspect_ratio_diff=0.3, max_try=100):
def MergeAllSummaries(period=0, run_alone=False, key=tf.GraphKeys.SUMMARIES):
@contextmanager DCNL def change_env(name, val):
def fix_rng_seed(seed):
def get_rng(obj=None):
def execute_only_once():
def get_tqdm_kwargs(**kwargs):
def get_tqdm(**kwargs):
def dumps(obj):
def loads(buf):
def to_tensor_proto(arr):
def dump_tensor_protos(protos):
def create_dummy_class(klass, dependency):
def create_dummy_func(func, dependency):
def building_rtfd():
def log_deprecated(name='', text='', eos=''):
def deprecated(text='', eos=''):
def ensure_proc_terminate(proc):
@contextmanager DCNL def mask_sigint():
def start_proc_mask_signal(proc):
def subproc_call(cmd, timeout=None):
def change_gpu(val):
def get_nr_gpu():
def mkdir_p(dirname):
def download(url, dir, filename=None):
def recursive_walk(rootdir):
def get_dataset_path(*args):
def load_caffe(model_desc, model_file):
def get_caffe_pb():
def pyplot2img(plt):
def interactive_imshow(img, lclick_cb=None, rclick_cb=None, **kwargs):
def stack_patches(patch_list, nr_row, nr_col, border=None, pad=False, bgcolor=255, viz=False, lclick_cb=None):
def gen_stack_patches(patch_list, nr_row=None, nr_col=None, border=None, max_width=1000, max_height=1000, bgcolor=255, viz=False, lclick_cb=None):
def dump_dataflow_images(df, index=0, batched=True, number=1000, output_dir=None, scale=1, resize=None, viz=None, flipRGB=False):
def intensity_to_rgb(intensity, cmap='cubehelix', normalize=False):
def map_arg(**maps):
def graph_memoized(func):
def memoized_ignoreargs(func):
def shape2d(a):
def shape4d(a, data_format='NHWC'):
@memoized DCNL def log_once(message, func):
def set_logger_dir(dirname, action=None):
def disable_logger():
def auto_set_dir(action=None, name=None):
def enable_call_trace():
@contextmanager DCNL def timed_operation(msg, log_start=False):
@contextmanager DCNL def total_timer(msg):
def print_total_timer():
@task(queue='web', time_limit=EMAIL_TIME_LIMIT) DCNL def send_email_task(recipient, subject, template, template_html, context=None):
@register.filter DCNL def gravatar(email, size=48):
def default_token():
def server_error_500(request, exception, template_name='500.html'):
def server_error_404(request, exception, template_name='404.html'):
def _build_version(project, slug, already_built=()):
def build_branches(project, branch_list):
def _build_url(url, projects, branches):
@csrf_exempt DCNL def github_build(request):
@csrf_exempt DCNL def gitlab_build(request):
@csrf_exempt DCNL def bitbucket_build(request):
@csrf_exempt DCNL def generic_build(request, project_id_or_slug=None):
def map_subproject_slug(view_func):
def map_project_slug(view_func):
@map_project_slug DCNL @map_subproject_slug DCNL def redirect_project_slug(request, project, subproject):
@map_project_slug DCNL @map_subproject_slug DCNL def redirect_page_with_filename(request, project, subproject, filename):
@map_project_slug DCNL @map_subproject_slug DCNL def serve_docs(request, project, subproject, lang_slug=None, version_slug=None, filename=''):
@map_project_slug DCNL def _serve_symlink_docs(request, project, privacy_level, filename=''):
def decide_if_cors(sender, request, **kwargs):
def get_task_data(task_id):
def permission_check(check):
def get_public_task_data(request, task_id):
def get_override_class(proxy_class, default_class=None):
def trigger_build(project, version=None, record=True, force=False, basic=False):
def send_email(recipient, subject, template, template_html, context=None, request=None):
def slugify(value, *args, **kwargs):
def safe_makedirs(directory_name):
def offer_promo(promo_obj, project=None):
def click_proxy(request, promo_id, hash):
def view_proxy(request, promo_id, hash):
def promo_500(request, template_name='donate/promo_500.html', **__):
def promo_404(request, template_name='donate/promo_404.html', **__):
def show_to_programming_language(promo, programming_language):
def choose_promo(promo_list):
def get_promo(country_code, programming_language, theme, gold_project=False, gold_user=False, community_only=False):
def is_gold_user(user):
def is_gold_project(project):
def is_community_only(user, project):
def get_user_country(request):
@receiver(footer_response) DCNL def attach_promo_data(sender, request, context, resp_data, **__):
def lookup_promo(request, project, theme):
@receiver(footer_response) DCNL def index_theme_data(sender, **kwargs):
@api_view(['GET']) DCNL @permission_classes([permissions.IsAuthenticatedOrReadOnly]) DCNL @renderer_classes((JSONRenderer,)) DCNL def get_metadata(request):
@api_view(['GET']) DCNL @permission_classes([permissions.IsAuthenticatedOrReadOnly]) DCNL def has_node(request):
def project_and_path_from_request(request, path):
def normalize_request_payload(request):
def create_profile(request, form_class, success_url=None, template_name='profiles/private/create_profile.html', extra_context=None):
def edit_profile(request, form_class, success_url=None, template_name='profiles/private/edit_profile.html', extra_context=None):
def profile_detail(request, username, public_profile_field=None, template_name='profiles/public/profile_detail.html', extra_context=None):
def chunks(in_list, chunk_size):
@receiver(pre_delete, sender=GoldUser) DCNL def delete_customer(sender, instance, **__):
def process_mkdocs_json(version, build_dir=True):
def parse_path_from_file(file_path):
def parse_content_from_file(file_path):
def parse_content(content):
def parse_sphinx_sections(content):
def parse_mkdocs_sections(content):
def parse_sections(documentation_type, content):
def search_project(request, query, language=None):
def search_file(request, query, project_slug=None, version_slug=LATEST, taxonomy=None):
def search_section(request, query, project_slug=None, version_slug=LATEST, path=None):
def process_all_json_files(version, build_dir=True):
def process_headers(data, filename):
def generate_sections_from_pyquery(body):
def process_file(filename):
def elastic_search(request):
def delete_customer(customer_id):
def cancel_subscription(customer_id, subscription_id):
def attach_webhook(project, request=None):
def update_webhook(project, integration, request=None):
def forwards_move_repos(apps, schema_editor):
def reverse_move_repos(apps, schema_editor):
def forwards_move_repo_source(apps, schema_editor):
def forwards_move_org_source(apps, schema_editor):
def backwards_move_org_source(apps, schema_editor):
def get_filesystem(path, top_level_path=None):
def create_load(config=None):
def fake_paths(check):
def fake_paths_lookup(path_dict):
def fake_paths_by_regex(pattern, exists=True):
def mock_version(repo):
def sync_versions(project, versions, type):
def delete_versions(project, version_data):
def index_search_request(version, page_list, commit, project_scale, page_scale, section=True, delete=True):
def get_version_compare_data(project, base_version=None):
@decorators.api_view(['GET']) DCNL @decorators.permission_classes((permissions.AllowAny,)) DCNL @decorators.renderer_classes((JSONRenderer, JSONPRenderer)) DCNL def footer_html(request):
@decorators.api_view(['GET']) DCNL @decorators.permission_classes((permissions.AllowAny,)) DCNL @decorators.renderer_classes((JSONRenderer,)) DCNL def cname(request):
@decorators.api_view(['GET']) DCNL @decorators.permission_classes((permissions.AllowAny,)) DCNL @decorators.renderer_classes((JSONRenderer,)) DCNL def docurl(request):
@decorators.api_view(['GET']) DCNL @decorators.permission_classes((permissions.AllowAny,)) DCNL @decorators.renderer_classes((JSONRenderer,)) DCNL def embed(request):
@decorators.api_view(['POST']) DCNL @decorators.permission_classes((permissions.IsAdminUser,)) DCNL @decorators.renderer_classes((JSONRenderer,)) DCNL def index_search(request):
@decorators.api_view(['GET']) DCNL @decorators.permission_classes((permissions.AllowAny,)) DCNL @decorators.renderer_classes((JSONRenderer,)) DCNL def search(request):
@decorators.api_view(['GET']) DCNL @decorators.permission_classes((permissions.AllowAny,)) DCNL @decorators.renderer_classes((JSONRenderer,)) DCNL def section_search(request):
def get_absolute_media_url():
def load_yaml_config(version):
def send_notification(request, notification):
@task() DCNL def update_imported_docs(version_pk):
@task(queue='web') DCNL def finish_build(version_pk, build_pk, hostname=None, html=False, localmedia=False, search=False, pdf=False, epub=False):
@task(queue='web') DCNL def move_files(version_pk, hostname, html=False, localmedia=False, search=False, pdf=False, epub=False):
@task(queue='web') DCNL def update_search(version_pk, commit, delete_non_commit_files=True):
@task(queue='web') DCNL def fileify(version_pk, commit):
def _manage_imported_files(version, path, commit):
def email_notification(version, build, email):
def webhook_notification(version, build, hook_url):
@task(queue='web') DCNL def update_static_metadata(project_pk, path=None):
@task() DCNL def remove_dir(path):
@task() DCNL def clear_artifacts(version_pk):
def find_file(filename):
def run(*commands, **kwargs):
def safe_write(filename, contents):
def make_api_version(version_data):
def make_api_project(project_data):
@register.filter DCNL def sort_version_aware(versions):
@register.filter DCNL def is_project_user(user, project):
def update_build_queue(apps, schema):
@login_required DCNL def project_manage(__, project_slug):
@login_required DCNL def project_versions(request, project_slug):
@login_required DCNL def project_version_detail(request, project_slug, version_slug):
@login_required DCNL def project_delete(request, project_slug):
@login_required DCNL def edit_alias(request, project_slug, alias_id=None):
@login_required DCNL def project_users(request, project_slug):
@login_required DCNL def project_notifications(request, project_slug):
@login_required DCNL def project_notifications_delete(request, project_slug):
@login_required DCNL def project_translations(request, project_slug):
@login_required DCNL def project_redirects(request, project_slug):
@login_required DCNL def project_redirects_delete(request, project_slug):
@login_required DCNL def project_version_delete_html(request, project_slug, version_slug):
@never_cache DCNL def project_badge(request, project_slug):
def project_downloads(request, project_slug):
def project_download_media(request, project_slug, type_, version_slug):
def search_autocomplete(request):
def version_autocomplete(request, project_slug):
def file_autocomplete(request, project_slug):
def elastic_project_search(request, project_slug):
def project_versions(request, project_slug):
def project_analytics(request, project_slug):
def project_embed(request, project_slug):
def version_windows(versions, major=1, minor=1, point=1):
def comparable_version(version_string):
def sort_versions(version_list):
def determine_stable_version(version_list):
def build_versions_form(project):
def build_upload_html_form(project):
@receiver(project_import) DCNL def handle_project_import(sender, **kwargs):
def served_by_nginx(url):
def served_by_django(url):
def served_by_perl(url):
def served(url):
def redirected(url, location):
@count DCNL def run_test(fn, *args):
def header(msg):
def django_setting_role(typ, rawtext, text, lineno, inliner, options=None, content=None):
def from_string(s):
def to_string(ip):
def checkipvalid(ip):
def splitip(strline):
def print_max(x, y):
def api_request(key, function, params=None, data=None, base_url='https://api.reposify.com', method='get', retries=1):
def strip_non_ascii(string):
def is_http_url(page):
def connect(method, resource, data=None):
def login(usr, pwd):
def logout():
def get_policies():
def get_history_ids(sid):
def get_scan_history(sid, hid):
def add(name, desc, targets, pid):
def update(scan_id, name, desc, targets, pid=None):
def launch(sid):
def status(sid, hid):
def export_status(sid, fid):
def export(sid, hid):
def download(sid, fid, output):
def delete(sid):
def history_delete(sid, hid):
def strip_non_ascii(string):
def force_unique(lst):
def _flatten_dictionary(dictionary):
def _get_faraday_ready_objects(workspace_name, faraday_ready_object_dictionaries, faraday_object_name):
def _get_faraday_ready_hosts(workspace_name, hosts_dictionaries):
def _get_faraday_ready_vulns(workspace_name, vulns_dictionaries, vulns_type=None):
def _get_faraday_ready_services(workspace_name, services_dictionaries):
def _get_faraday_ready_interfaces(workspace_name, interfaces_dictionaries):
def _get_faraday_ready_credentials(workspace_name, credentials_dictionaries):
def _get_faraday_ready_notes(workspace_name, notes_dictionaries):
def _get_faraday_ready_commands(workspace_name, commands_dictionaries):
def get_changes_stream(workspace_name):
def get_hosts(workspace_name, **params):
def get_host(workspace_name, host_id):
def get_all_vulns(workspace_name, **params):
def get_vulns(workspace_name, **params):
def get_vuln(workspace_name, vuln_id):
def get_web_vulns(workspace_name, **params):
def get_web_vuln(workspace_name, vuln_id):
def get_interfaces(workspace_name, **params):
def get_interface(workspace_name, interface_id):
def get_services(workspace_name, **params):
def get_service(workspace_name, service_id):
def get_credentials(workspace_name, **params):
def get_credential(workspace_name, credential_id):
def get_notes(workspace_name, **params):
def get_note(workspace_name, note_id):
def get_workspace(workspace_name):
def get_commands(workspace_name, **params):
def get_command(workspace_name, command_id):
def get_object(workspace_name, object_signature, object_id):
def get_deleted_object_name_and_type(workspace_name, object_id):
@_ignore_in_changes DCNL def create_host(workspace_name, host):
@_ignore_in_changes DCNL def update_host(workspace_name, host):
@_ignore_in_changes DCNL def create_interface(workspace_name, interface):
@_ignore_in_changes DCNL def update_interface(workspace_name, interface):
@_ignore_in_changes DCNL def create_service(workspace_name, service):
@_ignore_in_changes DCNL def update_service(workspace_name, service):
@_ignore_in_changes DCNL def create_vuln(workspace_name, vuln):
@_ignore_in_changes DCNL def update_vuln(workspace_name, vuln):
@_ignore_in_changes DCNL def create_vuln_web(workspace_name, vuln_web):
@_ignore_in_changes DCNL def update_vuln_web(workspace_name, vuln_web):
@_ignore_in_changes DCNL def create_note(workspace_name, note):
@_ignore_in_changes DCNL def update_note(workspace_name, note):
@_ignore_in_changes DCNL def create_credential(workspace_name, credential):
@_ignore_in_changes DCNL def update_credential(workspace_name, credential):
@_ignore_in_changes DCNL def update_command(workspace_name, command):
def create_object(workspace_name, object_signature, obj):
def update_object(workspace_name, object_signature, obj):
def create_workspace(workspace_name, description, start_date, finish_date, customer=None):
def get_workspace_summary(workspace_name):
def get_workspace_numbers(workspace_name):
def get_hosts_number(workspace_name, **params):
def get_services_number(workspace_name, **params):
def get_interfaces_number(workspace_name, **params):
def get_vulns_number(workspace_name, **params):
@_ignore_in_changes DCNL def delete_host(workspace_name, host_id):
@_ignore_in_changes DCNL def delete_interface(workspace_name, interface_id):
@_ignore_in_changes DCNL def delete_service(workspace_name, service_id):
@_ignore_in_changes DCNL def delete_vuln(workspace_name, vuln_id):
@_ignore_in_changes DCNL def delete_note(workspace_name, note_id):
@_ignore_in_changes DCNL def delete_credential(workspace_name, credential_id):
@_ignore_in_changes DCNL def delete_vuln_web(workspace_name, vuln_id):
@_ignore_in_changes DCNL def delete_command(workspace_name, command_id):
def delete_object(workspace_name, object_signature, obj_id):
def delete_workspace(workspace_name):
def get_workspaces_names():
def server_info():
def test_server_url(url_to_test):
def _create_server_api_url():
def _create_server_get_url(workspace_name, object_name=None):
def _unsafe_io_with_server(server_io_function, server_expected_response, server_url, **payload):
def _parse_json(response_object):
def _get(request_url, **params):
def _put(post_url, update=False, expected_response=201, **params):
def _delete(delete_url, database=False):
def _get_raw_hosts(workspace_name, **params):
def _get_raw_vulns(workspace_name, **params):
def _get_raw_interfaces(workspace_name, **params):
def _get_raw_services(workspace_name, **params):
def _get_raw_notes(workspace_name, **params):
def _get_raw_credentials(workspace_name, **params):
def _get_faraday_ready_dictionaries(workspace_name, faraday_object_name, faraday_object_row_name, full_table=True, **params):
def get_hosts(workspace_name, **params):
def get_all_vulns(workspace_name, **params):
def get_vulns(workspace_name, **params):
def get_web_vulns(workspace_name, **params):
def get_interfaces(workspace_name, **params):
def get_services(workspace_name, **params):
def get_credentials(workspace_name, **params):
def get_notes(workspace_name, **params):
def get_commands(workspace_name, **params):
def get_objects(workspace_name, object_signature, **params):
def get_workspaces_names():
def _clean_up_stupid_couch_response(response_string):
def get_object_before_last_revision(workspace_name, object_id):
def get_object(workspace_name, object_signature, object_id):
def get_host(workspace_name, host_id):
def get_vuln(workspace_name, vuln_id):
def get_web_vuln(workspace_name, vuln_id):
def get_interface(workspace_name, interface_id):
def get_service(workspace_name, service_id):
def get_note(workspace_name, note_id):
def get_credential(workspace_name, credential_id):
def get_command(workspace_name, command_id):
def get_workspace(workspace_name, **params):
def get_workspace_summary(workspace_name):
def get_workspace_numbers(workspace_name):
def get_hosts_number(workspace_name, **params):
def get_services_number(workspace_name, **params):
def get_interfaces_number(workspace_name, **params):
def get_vulns_number(workspace_name, **params):
def get_notes_number(workspace_name, **params):
def get_credentials_number(workspace_name, **params):
def get_commands_number(workspace_name, **params):
def create_host(workspace_name, id, name, os, default_gateway, description='', metadata=None, owned=False, owner='', parent=None):
def update_host(workspace_name, id, name, os, default_gateway, description='', metadata=None, owned=False, owner='', parent=None):
def create_interface(workspace_name, id, name, description, mac, owned=False, owner='', hostnames=None, network_segment=None, ipv4=None, ipv6=None, metadata=None):
def update_interface(workspace_name, id, name, description, mac, owned=False, owner='', hostnames=None, network_segment=None, ipv4=None, ipv6=None, metadata=None):
def create_service(workspace_name, id, name, description, ports, owned=False, owner='', protocol='', status='', version='', metadata=None):
def update_service(workspace_name, id, name, description, ports, owned=False, owner='', protocol='', status='', version='', metadata=None):
def create_vuln(workspace_name, id, name, description, owned=None, owner='', confirmed=False, data='', refs=None, severity='info', resolution='', desc='', metadata=None, status=None):
def update_vuln(workspace_name, id, name, description, owned=None, owner='', confirmed=False, data='', refs=None, severity='info', resolution='', desc='', metadata=None, status=None):
def create_vuln_web(workspace_name, id, name, description, owned=None, owner='', confirmed=False, data='', refs=None, severity='info', resolution='', desc='', metadata=None, method=None, params='', path=None, pname=None, query=None, request=None, response=None, category='', website=None, status=None):
def update_vuln_web(workspace_name, id, name, description, owned=None, owner='', confirmed=False, data='', refs=None, severity='info', resolution='', desc='', metadata=None, method=None, params='', path=None, pname=None, query=None, request=None, response=None, category='', website=None, status=None):
def create_note(workspace_name, id, name, text, owned=None, owner='', description='', metadata=None):
def update_note(workspace_name, id, name, text, owned=None, owner='', description='', metadata=None):
def create_credential(workspace_name, id, name, username, password, owned=None, owner='', description='', metadata=None):
def update_credential(workspace_name, id, name, username, password, owned=None, owner='', description='', metadata=None):
def create_command(workspace_name, id, command, duration=None, hostname=None, ip=None, itime=None, params=None, user=None):
def update_command(workspace_name, id, command, duration=None, hostname=None, ip=None, itime=None, params=None, user=None):
def create_workspace(workspace_name, description, start_date, finish_date, customer=None, duration=None):
def delete_host(workspace_name, host_id):
def delete_interface(workspace_name, interface_id):
def delete_service(workspace_name, service_id):
def delete_vuln(workspace_name, vuln_id):
def delete_note(workspace_name, note_id):
def delete_credential(workspace_name, credential_id):
def delete_command(workspace_name, command_id):
def delete_workspace(workspace_name):
def server_info():
def check_faraday_version():
def test_server_url(url_to_test):
def get_private_ip():
def createAndAddInterface(host_id, name='', mac='00:00:00:00:00:00', ipv4_address='0.0.0.0', ipv4_mask='0.0.0.0', ipv4_gateway='0.0.0.0', ipv4_dns=[], ipv6_address='0000:0000:0000:0000:0000:0000:0000:0000', ipv6_prefix='00', ipv6_gateway='0000:0000:0000:0000:0000:0000:0000:0000', ipv6_dns=[], network_segment='', hostname_resolution=[]):
def createAndAddInterface(host_id, name='', mac='00:00:00:00:00:00', ipv4_address='0.0.0.0', ipv4_mask='0.0.0.0', ipv4_gateway='0.0.0.0', ipv4_dns=[], ipv6_address='0000:0000:0000:0000:0000:0000:0000:0000', ipv6_prefix='00', ipv6_gateway='0000:0000:0000:0000:0000:0000:0000:0000', ipv6_dns=[], network_segment='', hostname_resolution=[]):
def newHost(name, os='Unknown'):
def newInterface(name='', mac='00:00:00:00:00:00', ipv4_address='0.0.0.0', ipv4_mask='0.0.0.0', ipv4_gateway='0.0.0.0', ipv4_dns=[], ipv6_address='0000:0000:0000:0000:0000:0000:0000:0000', ipv6_prefix='00', ipv6_gateway='0000:0000:0000:0000:0000:0000:0000:0000', ipv6_dns=[], network_segment='', hostname_resolution=[], parent_id=None):
def newService(name, protocol='tcp?', ports=[], status='running', version='unknown', description='', parent_id=None):
def newVuln(name, desc='', ref=None, severity='', resolution='', confirmed=False, parent_id=None):
def newVulnWeb(name, desc='', ref=None, severity='', resolution='', website='', path='', request='', response='', method='', pname='', params='', query='', category='', confirmed=False, parent_id=None):
def newNote(name, text, parent_id=None):
def newCred(username, password, parent_id=None):
def addEvidence(file_path):
def checkEvidence(file_path):
def cleanEvidence():
def delEvidence(file_path):
def log(msg, level='INFO'):
def devlog(msg):
def getLoggedUser():
def get_vulnweb_url_fields(url):
def get_attrib_from_subnode(xml_node, subnode_xpath_expr, attrib_name):
def get_attrib_from_subnode(xml_node, subnode_xpath_expr, attrib_name):
def get_attrib_from_subnode(xml_node, subnode_xpath_expr, attrib_name):
def get_attrib_from_subnode(xml_node, subnode_xpath_expr, attrib_name):
def get_attrib_from_subnode(xml_node, subnode_xpath_expr, attrib_name):
def get_attrib_from_subnode(xml_node, subnode_xpath_expr, attrib_name):
def get_attrib_from_subnode(xml_node, subnode_xpath_expr, attrib_name):
def get_attrib_from_subnode(xml_node, subnode_xpath_expr, attrib_name):
def get_attrib_from_subnode(xml_node, subnode_xpath_expr, attrib_name):
def get_attrib_from_subnode(xml_node, subnode_xpath_expr, attrib_name):
def get_attrib_from_subnode(xml_node, subnode_xpath_expr, attrib_name):
def check_auth(resp_str):
def create_token_file(token, token_file=TOKEN_FILE):
def get_token_file(token_file=TOKEN_FILE):
def convert_date(unix_timestamp):
def parse_reply(xml_string, key_list, start_node=None, uniq=None):
def parse_reply_orig(xml_string, key_list, start_node=None, uniq=None):
def parse_ports(xml_string):
def parse_tags(xml_string):
def make_args(**kwargs):
def parse_and_bind_configuration():
def teardown_context():
def upload_views(workspace):
def reimport_on_database(db_conn, couchdb_conn):
def createDaemon():
def stop_server():
def is_server_running():
def paginate(query, page, page_size):
def sort_results(query, field_to_col_map, order_field, order_dir, default=None):
def apply_search_filter(query, field_to_col_map, free_text_search=None, field_filter={}, strict_filter=[]):
def get_count(query, count_col=None):
def get_logger(obj=None):
def get_integer_parameter(query_parameter, default=None):
def get_mandatory_integer_parameter(query_parameter):
def gzipped(f):
def key_reactions(window, event):
def strict_key_reactions(window, event):
def safe_io_with_server(response_in_emergency):
def scrollable(width=(-1), height=(-1), overlay_scrolling=False):
def query_yes_no(question, default='yes'):
def checkSSL(uri):
def exception_handler(type, value, tb):
def installThreadExcepthook():
def simple_decorator(decorator):
def profile(fn=None, skip=0, filename=None, immediate=False, dirs=False, sort=None, entries=40, profiler=('cProfile', 'profile', 'hotshot')):
def coverage(fn):
def coverage_with_hotshot(fn):
def timecall(fn=None, immediate=True):
def getLogger(obj=None):
def getParserArgs():
def check_dependencies_or_exit():
def startProfiler(app, output, depth):
def setConf():
def startFaraday():
def setupPlugins(dev_mode=False):
def setupZSH():
def setupXMLConfig():
def setupImages():
def checkConfiguration(gui_type):
def setupFolders(folderlist):
def checkFolder(folder):
def printBanner():
def update():
def main():
def base62_encode(num, alphabet=ALPHABET):
def base62_decode(string, alphabet=ALPHABET):
def url_to_mid(url):
def mid_to_url(midint):
def host_for_url(url):
def absolute_url(url, base_href):
def base58_encode(num, alphabet=ALPHABET):
def isplit(start_text, iterator):
def factory(name=u'root', **kwargs):
def any_schema(schemas):
def reverse_readline(fh, start_byte=0, buf_size=8192):
def api_version(f):
def etag(f):
def pagination_headers(total_pages, total_items, page_count, request):
@with_session DCNL def upgrade_required(session=None):
def upgrade(plugin):
@with_session DCNL def reset_schema(plugin, session=None):
def versioned_base(plugin, version):
def after_table_create(event, target, bind, tables=None, **kw):
def main(args=None):
@pytest.fixture(scope=u'class') DCNL def config(request):
@pytest.yield_fixture() DCNL def manager(request, config, caplog, monkeypatch, filecopy):
@pytest.fixture() DCNL def execute_task(manager):
@pytest.yield_fixture() DCNL def use_vcr(request, monkeypatch):
@pytest.fixture() DCNL def schema_match(manager):
@pytest.fixture() DCNL def link_headers(manager):
@pytest.fixture(autouse=True) DCNL def chdir(pytestconfig, request):
@pytest.fixture(scope=u'class', params=[u'internal', u'guessit'], ids=[u'internal', u'guessit']) DCNL def config(request):
@pytest.fixture(scope=u'class', params=[u'internal', u'guessit'], ids=[u'internal', u'guessit'], autouse=True) DCNL def config(request):
def event(name, priority=128):
def get_events(name):
def add_event_handler(name, func, priority=128):
def remove_event_handlers(name):
def remove_event_handler(name, func):
def fire_event(name, *args, **kwargs):
def unicode_argv():
def register_command(command, callback, **kwargs):
def required_length(nmin, nmax):
def register_schema(path, schema):
def register_config_key(key, schema, required=False):
def one_or_more(schema, unique_items=False):
def resolve_ref(uri):
def process_config(config, schema=None, set_defaults=True):
def parse_time(time_string):
def parse_interval(interval_string):
def parse_percent(percent_input):
def parse_size(size_input):
def set_error_message(error):
def select_child_errors(validator, errors):
def validate_deprecated(validator, message, instance, schema):
def auth_required(func):
def cache_required(func):
@with_session DCNL def from_cache(session=None, search_params=None, cache_type=None):
def prepare_lookup_for_tvmaze(**lookup_params):
def tvmaze_lookup(lookup_url, **kwargs):
def get_tmdb_config():
def get_access_token(account, token=None, refresh=False, re_auth=False, called_from_cli=False):
def make_list_slug(name):
def get_session(account=None, token=None):
def get_api_url(*endpoint):
def get_entry_ids(entry):
def split_title_year(title):
@with_session DCNL def get_cached(style=None, title=None, year=None, trakt_id=None, trakt_slug=None, tmdb_id=None, imdb_id=None, tvdb_id=None, tvrage_id=None, session=None):
def get_trakt(style=None, title=None, year=None, trakt_id=None, trakt_slug=None, tmdb_id=None, imdb_id=None, tvdb_id=None, tvrage_id=None):
def find_series_id(name, language=None):
@with_session DCNL def lookup_series(name=None, tvdb_id=None, only_cached=False, session=None, language=None):
@with_session DCNL def lookup_episode(name=None, season_number=None, episode_number=None, absolute_number=None, tvdb_id=None, first_aired=None, only_cached=False, session=None, language=None):
@with_session DCNL def search_for_series(search_name=None, imdb_id=None, zap2it_id=None, force_search=None, session=None, language=None):
def mark_expired(session):
@internet(log) DCNL @with_session DCNL def lookup_movie(title=None, year=None, rottentomatoes_id=None, smart_match=None, only_cached=False, session=None, api_key=None):
def _set_movie_details(movie, session, movie_data=None, api_key=None):
def render_config(config, template_renderer, _path=u''):
def pre_check_config(config_path):
def do_cli(manager, options):
def action_all(options):
def action_list(options):
def do_cli(manager, options):
def consolidate():
def tag_source(source_name, tag_names=None):
def do_cli(manager, options):
def movie_list_lists(options):
def movie_list_list(options):
def do_cli(manager, options):
def add_credential(username, password):
def print_categories(parent_category_name=None):
def list_entries(options):
def manage_entries(options, selection, approved):
def clear_entries(options):
def log_query_count(name_point):
def do_cli(manager, options):
def entry_list_lists(options):
def entry_list_list(options):
def display_summary(options):
def get_latest_status(episode):
def display_details(options):
def dump(entries, debug=False, eval_lazy=False, trace=False, title_only=False):
def get_directory_size(directory):
def fail_entry_with_error(entry, error):
def open_archive_entry(entry):
def get_destination_path(path, to, keep_dirs):
def is_dir(info):
def sftp_connect(conf):
def sftp_from_config(config):
def sftp_prefix(config):
def dependency_check():
def all_builtins():
def find_caller(stack):
def get_free_space(folder):
@with_session DCNL def add(title, task_name, fields, reason=None, local=None, session=None):
@event(u'forget') DCNL def forget(value):
@with_session DCNL def search_by_field_values(field_value_list, task_name, local=False, session=None):
@with_session DCNL def forget_by_id(entry_id, session=None):
def max_seeds_from_threads(threads):
def normalize_series_name(name):
@with_session DCNL def get_series_summary(configured=None, premieres=None, status=None, days=None, start=None, stop=None, count=False, sort_by=u'show_name', descending=None, session=None):
def auto_identified_by(series):
def get_latest_season_pack_release(series, downloaded=True, season=None):
def get_latest_episode_release(series, downloaded=True, season=None):
def get_latest_release(series, downloaded=True, season=None):
def new_eps_after(series, since_ep, session):
def store_parser(session, parser, series=None, quality=None):
def set_series_begin(series, ep_id):
def add_series_entity(session, series, identifier, quality=None):
def remove_series(name, forget=False):
def remove_series_entity(name, identifier, forget=False):
def shows_by_name(normalized_name, session=None):
def shows_by_exact_name(normalized_name, session=None):
def show_by_id(show_id, session=None):
def episode_by_id(episode_id, session=None):
def release_by_id(release_id, session=None):
def show_episodes(series, start=None, stop=None, count=False, descending=False, session=None):
def show_seasons(series, start=None, stop=None, count=False, descending=False, session=None):
def get_releases(episode, downloaded=None, start=None, stop=None, count=False, descending=False, sort_by=None, session=None):
def episode_in_show(series_id, episode_id):
def release_in_episode(episode_id, release_id):
def populate_entry_fields(entry, parser, config):
def create_thread(name, conn):
def irc_prefix(var):
def strip_whitespace(value):
def job_id(conf):
def run_job(tasks):
@event(u'manager.daemon.started') DCNL def setup_scheduler(manager):
@event(u'manager.config_updated') DCNL def setup_jobs(manager):
@event(u'manager.config_updated') DCNL @event(u'manager.daemon.started') DCNL def register_web_server(manager):
@event(u'manager.shutdown') DCNL def stop_server(manager):
def get_source(name, session):
def get_tag(name, session):
def search(session, text, tags=None, sources=None, desc=False):
@with_session DCNL def create_list(list_name, session=None):
def escape_query(search_strings):
def os_disk_stats(folder):
@event(u'manager.before_config_validate') DCNL def process_variables(config, manager):
def create_token(api_key, login, password):
def query_member_id(api_key, user_token, login_name):
def query_series(api_key, user_token, member_name=None):
@with_session DCNL def clear_entries(task=None, all=False, session=None):
def fp_field_name(name):
def name_to_re(name, ignore_prefixes=None, parser=None):
@event(u'manager.startup') DCNL def init_parsers(manager):
@with_session DCNL def config_changed(task=None, session=None):
def generate_key():
def get_random_string(length=12, allowed_chars=u'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'):
@with_session DCNL def get_secret(session=None):
def register_home(route):
@_default_app.route(u'/') DCNL def start_page():
def setup_server(config):
@contextlib.contextmanager DCNL def task_logging(task):
@contextlib.contextmanager DCNL def capture_output(stream, loglevel=None):
def get_capture_stream():
def get_capture_loglevel():
def initialize(unit_test=False):
def start(filename=None, level=logging.INFO, to_console=True, to_file=True):
def terminal_info():
def word_wrap(text, max_length):
def colorize(color, text, auto=True):
def console(text, *args, **kwargs):
def priority(value):
def register_task_phase(name, before=None, after=None):
def _get_standard_plugins_path():
def _load_plugins_from_dirs(dirs):
def _load_plugins_from_packages():
def load_plugins(extra_dirs=None):
def get_plugins(phase=None, interface=None, category=None, name=None, min_api=None):
def plugin_schemas(**kwargs):
def get_phases_by_plugin(name):
def get_plugin_keywords():
def get_plugin_by_name(name, issued_by=u'???'):
@event(u'manager.db_cleanup') DCNL def purge(manager, session):
@with_session DCNL def log_once(message, logger=logging.getLogger(u'log_once'), once_level=logging.INFO, suppressed_level=f_logger.VERBOSE, session=None):
def is_imdb_url(url):
def is_valid_imdb_title_id(value):
def is_valid_imdb_person_id(value):
def extract_id(url):
def make_url(imdb_id):
@event(u'manager.db_cleanup') DCNL def db_cleanup(manager, session):
def clean_symbols(text):
def clean_title(title):
def normalize_scene(text):
def torrent_availability(seeds, leeches):
def clean_meta(meta, including_info=False, logger=None):
def is_torrent_file(metafilepath):
def get(quality_name):
@event(u'manager.db_cleanup') DCNL def db_cleanup(manager, session):
@event(u'manager.startup') DCNL def load_taskless(manager):
@event(u'task.execute.started') DCNL def load_task(task):
@event(u'task.execute.completed') DCNL def flush_task(task):
def diff_pos(string1, string2):
def with_session(*args, **kwargs):
def pipe_list_synonym(name):
def text_date_synonym(name):
def entry_synonym(name):
def json_synonym(name):
def rarfile_set_tool_path(config):
def rarfile_set_path_sep(separator):
def open_archive(archive_path):
def is_archive(path):
def table_exists(name, session):
def table_schema(name, session):
def table_columns(table, session):
def table_add_column(table, name, col_type, session, default=None):
def drop_tables(names, session):
def get_index_by_name(table, name):
def create_index(table_name, session, *column_names):
def filter_pathbase(val):
def filter_pathname(val):
def filter_pathext(val):
def filter_pathdir(val):
def filter_pathscrub(val, os_mode=None):
def filter_re_replace(val, pattern, repl):
def filter_re_search(val, pattern):
def filter_formatdate(val, format):
def filter_parsedate(val):
def filter_date_suffix(date):
def filter_format_number(val, places=None, grouping=True):
def filter_pad(val, width, fillchar=u'0'):
def filter_to_date(date_time_val):
def filter_default(value, default_value=u'', boolean=True):
@event(u'manager.initialize') DCNL def make_environment(manager):
def list_templates(extensions=None):
def get_filters():
def get_template(template_name, scope=u'task'):
def render(template, context):
def render_from_entry(template_string, entry):
def render_from_task(template, task):
def evaluate_expression(expression, context):
def loads(*args, **kwargs):
def load(*args, **kwargs):
def is_unresponsive(url):
def set_unresponsive(url):
def _wrap_urlopen(url, timeout=None):
def limit_domains(url, limit_dict):
def head(url, **kwargs):
def get(url, **kwargs):
def post(url, data=None, **kwargs):
def pathscrub(dirty_path, os=None, filename=False):
def convert_bytes(bytes):
def strip_html(text):
def _htmldecode(text):
def decode_html(value):
def encode_html(unicode_data, encoding=u'ascii'):
def _xmlcharref_encode(unicode_data, encoding):
def merge_dict_from_to(d1, d2):
def parse_timedelta(value):
def timedelta_total_seconds(td):
def multiply_timedelta(interval, number):
def arithmeticEval(s):
def split_title_year(title):
def get_latest_flexget_version_number():
def parse_filesize(text_size, si=True):
def get_config_hash(config):
def parse_episode_identifier(ep_id, identify_season=False):
def cached_resource(url, base_dir, force=False, max_size=250, directory=u'cached_resources'):
def dir_size(directory):
def trim_dir(directory):
@cli.command() DCNL def version():
@cli.command() DCNL @click.argument('bump_type', type=click.Choice(['dev', 'release'])) DCNL def bump_version(bump_type):
@cli.command() DCNL def build_webui():
def match_patterns(pathname, patterns):
def filter_paths(pathnames, patterns=None, ignore_patterns=None):
@pytest.fixture() DCNL def p(tmpdir, *args):
def test_unschedule_self(observer):
def mkdir(path, parents=False):
def rm(path, recursive=False):
def touch(path, times=None):
def truncate(path):
def mv(src_path, dest_path):
def p(*args):
def wait():
def generate_sub_moved_events(src_dir_path, dest_dir_path):
def generate_sub_created_events(src_dir_path):
def path_split(pathname_spec, separator=os.path.sep):
def add_to_sys_path(pathnames, index=0):
def load_config(tricks_file_pathname):
def parse_patterns(patterns_spec, ignore_patterns_spec, separator=';'):
def observe_with(observer, event_handler, pathnames, recursive):
def schedule_tricks(observer, tricks, pathname, recursive):
@aliases('tricks') DCNL @arg('files', nargs='*', help='perform DCSP tricks DCSP from DCSP given DCSP file') DCNL @arg('--python-path', default='.', help=('paths DCSP separated DCSP by DCSP %s DCSP to DCSP add DCSP to DCSP the DCSP python DCSP path' % os.path.sep)) DCNL @arg('--interval', '--timeout', dest='timeout', default=1.0, help='use DCSP this DCSP as DCSP the DCSP polling DCSP interval/blocking DCSP timeout') DCNL @arg('--recursive', default=True, help='recursively DCSP monitor DCSP paths') DCNL @expects_obj DCNL def tricks_from(args):
@aliases('generate-tricks-yaml') DCNL @arg('trick_paths', nargs='*', help='Dotted DCSP paths DCSP for DCSP all DCSP the DCSP tricks DCSP you DCSP want DCSP to DCSP generate') DCNL @arg('--python-path', default='.', help=('paths DCSP separated DCSP by DCSP %s DCSP to DCSP add DCSP to DCSP the DCSP python DCSP path' % os.path.sep)) DCNL @arg('--append-to-file', default=None, help='appends DCSP the DCSP generated DCSP tricks DCSP YAML DCSP to DCSP a DCSP file; DCSP if DCSP not DCSP specified, DCSP prints DCSP to DCSP standard DCSP output') DCNL @arg('-a', '--append-only', dest='append_only', default=False, help='if DCSP --append-to-file DCSP is DCSP not DCSP specified, DCSP produces DCSP output DCSP for DCSP appending DCSP instead DCSP of DCSP a DCSP complete DCSP tricks DCSP yaml DCSP file.') DCNL @expects_obj DCNL def tricks_generate_yaml(args):
@arg('directories', nargs='*', default='.', help='directories DCSP to DCSP watch.') DCNL @arg('-p', '--pattern', '--patterns', dest='patterns', default='*', help='matches DCSP event DCSP paths DCSP with DCSP these DCSP patterns DCSP (separated DCSP by DCSP ;).') DCNL @arg('-i', '--ignore-pattern', '--ignore-patterns', dest='ignore_patterns', default='', help='ignores DCSP event DCSP paths DCSP with DCSP these DCSP patterns DCSP (separated DCSP by DCSP ;).') DCNL @arg('-D', '--ignore-directories', dest='ignore_directories', default=False, help='ignores DCSP events DCSP for DCSP directories') DCNL @arg('-R', '--recursive', dest='recursive', default=False, help='monitors DCSP the DCSP directories DCSP recursively') DCNL @arg('--interval', '--timeout', dest='timeout', default=1.0, help='use DCSP this DCSP as DCSP the DCSP polling DCSP interval/blocking DCSP timeout') DCNL @arg('--trace', default=False, help='dumps DCSP complete DCSP dispatching DCSP trace') DCNL @arg('--debug-force-polling', default=False, help='[debug] DCSP forces DCSP polling') DCNL @arg('--debug-force-kqueue', default=False, help='[debug] DCSP forces DCSP BSD DCSP kqueue(2)') DCNL @arg('--debug-force-winapi', default=False, help='[debug] DCSP forces DCSP Windows DCSP API') DCNL @arg('--debug-force-winapi-async', default=False, help='[debug] DCSP forces DCSP Windows DCSP API DCSP + DCSP I/O DCSP completion') DCNL @arg('--debug-force-fsevents', default=False, help='[debug] DCSP forces DCSP Mac DCSP OS DCSP X DCSP FSEvents') DCNL @arg('--debug-force-inotify', default=False, help='[debug] DCSP forces DCSP Linux DCSP inotify(7)') DCNL @expects_obj DCNL def log(args):
@arg('directories', nargs='*', default='.', help='directories DCSP to DCSP watch') DCNL @arg('-c', '--command', dest='command', default=None, help='shell DCSP command DCSP executed DCSP in DCSP response DCSP to DCSP matching DCSP events.\nThese DCSP interpolation DCSP variables DCSP are DCSP available DCSP to DCSP your DCSP command DCSP string::\n\n DCSP  DCSP  DCSP  DCSP ${watch_src_path} DCSP  DCSP  DCSP  DCSP - DCSP event DCSP source DCSP path;\n DCSP  DCSP  DCSP  DCSP ${watch_dest_path} DCSP  DCSP  DCSP - DCSP event DCSP destination DCSP path DCSP (for DCSP moved DCSP events);\n DCSP  DCSP  DCSP  DCSP ${watch_event_type} DCSP  DCSP - DCSP event DCSP type;\n DCSP  DCSP  DCSP  DCSP ${watch_object} DCSP  DCSP  DCSP  DCSP  DCSP  DCSP - DCSP ``file`` DCSP or DCSP ``directory``\n\nNote::\n DCSP  DCSP  DCSP  DCSP Please DCSP ensure DCSP you DCSP do DCSP not DCSP use DCSP double DCSP quotes DCSP (") DCSP to DCSP quote\n DCSP  DCSP  DCSP  DCSP your DCSP command DCSP string. DCSP That DCSP will DCSP force DCSP your DCSP shell DCSP to\n DCSP  DCSP  DCSP  DCSP interpolate DCSP before DCSP the DCSP command DCSP is DCSP processed DCSP by DCSP this\n DCSP  DCSP  DCSP  DCSP subcommand.\n\nExample DCSP option DCSP usage::\n\n DCSP  DCSP  DCSP  DCSP --command=\'echo DCSP "${watch_src_path}"\'\n') DCNL @arg('-p', '--pattern', '--patterns', dest='patterns', default='*', help='matches DCSP event DCSP paths DCSP with DCSP these DCSP patterns DCSP (separated DCSP by DCSP ;).') DCNL @arg('-i', '--ignore-pattern', '--ignore-patterns', dest='ignore_patterns', default='', help='ignores DCSP event DCSP paths DCSP with DCSP these DCSP patterns DCSP (separated DCSP by DCSP ;).') DCNL @arg('-D', '--ignore-directories', dest='ignore_directories', default=False, help='ignores DCSP events DCSP for DCSP directories') DCNL @arg('-R', '--recursive', dest='recursive', default=False, help='monitors DCSP the DCSP directories DCSP recursively') DCNL @arg('--interval', '--timeout', dest='timeout', default=1.0, help='use DCSP this DCSP as DCSP the DCSP polling DCSP interval/blocking DCSP timeout') DCNL @arg('-w', '--wait', dest='wait_for_process', action='store_true', default=False, help='wait DCSP for DCSP process DCSP to DCSP finish DCSP to DCSP avoid DCSP multiple DCSP simultaneous DCSP instances') DCNL @arg('-W', '--drop', dest='drop_during_process', action='store_true', default=False, help='Ignore DCSP events DCSP that DCSP occur DCSP while DCSP command DCSP is DCSP still DCSP being DCSP executed DCSP to DCSP avoid DCSP multiple DCSP simultaneous DCSP instances') DCNL @arg('--debug-force-polling', default=False, help='[debug] DCSP forces DCSP polling') DCNL @expects_obj DCNL def shell_command(args):
@arg('command', help='Long-running DCSP command DCSP to DCSP run DCSP in DCSP a DCSP subprocess.\n') DCNL @arg('command_args', metavar='arg', nargs='*', help='Command DCSP arguments.\n\nNote: DCSP Use DCSP -- DCSP before DCSP the DCSP command DCSP arguments, DCSP otherwise DCSP watchmedo DCSP will\ntry DCSP to DCSP interpret DCSP them.\n') DCNL @arg('-d', '--directory', dest='directories', metavar='directory', action='append', help='Directory DCSP to DCSP watch. DCSP Use DCSP another DCSP -d DCSP or DCSP --directory DCSP option DCSP for DCSP each DCSP directory.') DCNL @arg('-p', '--pattern', '--patterns', dest='patterns', default='*', help='matches DCSP event DCSP paths DCSP with DCSP these DCSP patterns DCSP (separated DCSP by DCSP ;).') DCNL @arg('-i', '--ignore-pattern', '--ignore-patterns', dest='ignore_patterns', default='', help='ignores DCSP event DCSP paths DCSP with DCSP these DCSP patterns DCSP (separated DCSP by DCSP ;).') DCNL @arg('-D', '--ignore-directories', dest='ignore_directories', default=False, help='ignores DCSP events DCSP for DCSP directories') DCNL @arg('-R', '--recursive', dest='recursive', default=False, help='monitors DCSP the DCSP directories DCSP recursively') DCNL @arg('--interval', '--timeout', dest='timeout', default=1.0, help='use DCSP this DCSP as DCSP the DCSP polling DCSP interval/blocking DCSP timeout') DCNL @arg('--signal', dest='signal', default='SIGINT', help='stop DCSP the DCSP subprocess DCSP with DCSP this DCSP signal DCSP (default DCSP SIGINT)') DCNL @arg('--kill-after', dest='kill_after', default=10.0, help='when DCSP stopping, DCSP kill DCSP the DCSP subprocess DCSP after DCSP the DCSP specified DCSP timeout DCSP (default DCSP 10)') DCNL @expects_obj DCNL def auto_restart(args):
def main():
def get_directory_handle(path):
def read_directory_changes(handle, recursive):
def is_deleted(kev):
def is_modified(kev):
def is_attrib_modified(kev):
def is_renamed(kev):
def has_attribute(ob, attribute):
def load_module(module_name):
def load_class(dotted_path):
def synchronized(lock=None):
def propertyx(function):
def accepts(*types):
def returns(rtype):
def singleton(cls):
def attrs(**kwds):
def deprecated(func):
def name(item):
def is_classmethod(instancemethod, klass):
def is_static_method(method, klass):
def is_class_private_name(name):
def method_name(method):
def format_arg_value(arg_val):
def echo(fn, write=sys.stdout.write):
def echo_instancemethod(klass, method, write=sys.stdout.write):
def echo_class(klass, write=sys.stdout.write):
def echo_module(mod, write=sys.stdout.write):
def auth_after_register(bot):
@sopel.module.event(events.RPL_WELCOME, events.RPL_LUSERCLIENT) DCNL @sopel.module.rule(u'.*') DCNL @sopel.module.thread(False) DCNL @sopel.module.unblockable DCNL def startup(bot, trigger):
@sopel.module.event(events.ERR_NOCHANMODES) DCNL @sopel.module.rule(u'.*') DCNL @sopel.module.priority(u'high') DCNL def retry_join(bot, trigger):
@sopel.module.rule(u'(.*)') DCNL @sopel.module.event(events.RPL_NAMREPLY) DCNL @sopel.module.priority(u'high') DCNL @sopel.module.thread(False) DCNL @sopel.module.unblockable DCNL def handle_names(bot, trigger):
@sopel.module.rule(u'(.*)') DCNL @sopel.module.event(u'MODE') DCNL @sopel.module.priority(u'high') DCNL @sopel.module.thread(False) DCNL @sopel.module.unblockable DCNL def track_modes(bot, trigger):
@sopel.module.rule(u'.*') DCNL @sopel.module.event(u'NICK') DCNL @sopel.module.priority(u'high') DCNL @sopel.module.thread(False) DCNL @sopel.module.unblockable DCNL def track_nicks(bot, trigger):
@sopel.module.commands(u'blocks') DCNL @sopel.module.priority(u'low') DCNL @sopel.module.thread(False) DCNL @sopel.module.unblockable DCNL def blocks(bot, trigger):
def guarded_mul(left, right):
def pow_complexity(num, exp):
def get_input(prompt):
def get_raising_file_and_line(tb=None):
def get_command_regexp(prefix, command):
def stderr(string):
def check_pid(pid):
def get_hostmask_regex(mask):
def validate_timezone(zone):
def validate_format(tformat):
def get_timezone(db=None, config=None, zone=None, nick=None, channel=None):
def format_time(db=None, config=None, zone=None, nick=None, channel=None, time=None):
def get_example_test(tested_func, msg, results, privmsg, admin, owner, repeat, use_regexp, ignore=[]):
def insert_into_module(func, module_name, base_name, prefix):
def enumerate_modules(config, show_all=False):
def trim_docstring(doc):
def clean_callable(func, config):
def load_module(name, path, type_):
@sopel.module.nickname_commands(u'reload') DCNL @sopel.module.priority(u'low') DCNL @sopel.module.thread(False) DCNL def f_reload(bot, trigger):
@sopel.module.nickname_commands(u'load') DCNL @sopel.module.priority(u'low') DCNL @sopel.module.thread(False) DCNL def f_load(bot, trigger):
@sopel.module.commands(u'reload') DCNL @sopel.module.priority(u'low') DCNL @sopel.module.thread(False) DCNL def pm_f_reload(bot, trigger):
@sopel.module.commands(u'update') DCNL def pm_f_update(bot, trigger):
@sopel.module.commands(u'load') DCNL @sopel.module.priority(u'low') DCNL @sopel.module.thread(False) DCNL def pm_f_load(bot, trigger):
@commands(u'isup') DCNL def isup(bot, trigger):
@sopel.module.commands(u'console') DCNL def interactive_shell(bot, trigger):
@commands(u'in') DCNL @example(u'.in DCSP 3h45m DCSP Go DCSP to DCSP class') DCNL def remind(bot, trigger):
@commands(u'at') DCNL @example(u'.at DCSP 13:47 DCSP Do DCSP your DCSP homework!') DCNL def at(bot, trigger):
@rule(u'.*') DCNL @priority(u'low') DCNL def collectlines(bot, trigger):
@rule(u'$nickname[,:]\\s+(?:([a-z]{2}) DCSP +)?(?:([a-z]{2}|en-raw) DCSP +)?["\u201c](.+?)["\u201d]\\? DCSP *$') DCNL @example(u'$nickname: DCSP "mon DCSP chien"? DCSP or DCSP $nickname: DCSP fr DCSP "mon DCSP chien"?') DCNL @priority(u'low') DCNL def tr(bot, trigger):
@commands(u'translate', u'tr') DCNL @example(u'.tr DCSP :en DCSP :fr DCSP my DCSP dog', u'"mon DCSP chien" DCSP (en DCSP to DCSP fr, DCSP translate.google.com)') DCNL @example(u'.tr DCSP \u05d4\u05d9\u05d9', u'"Hey" DCSP (iw DCSP to DCSP en, DCSP translate.google.com)') DCNL @example(u'.tr DCSP mon DCSP chien', u'"my DCSP dog" DCSP (fr DCSP to DCSP en, DCSP translate.google.com)') DCNL def tr2(bot, trigger):
@commands(u'mangle', u'mangle2') DCNL def mangle(bot, trigger):
@commands(u'rand') DCNL @example(u'.rand DCSP 2', u'random\\(0, DCSP 2\\) DCSP = DCSP (0|1|2)', re=True, repeat=10) DCNL @example(u'.rand DCSP -1 DCSP -1', u'random(-1, DCSP -1) DCSP = DCSP -1') DCNL @example(u'.rand', u'random\\(0, DCSP \\d+\\) DCSP = DCSP \\d+', re=True) DCNL @example(u'.rand DCSP 99 DCSP 10', u'random\\(10, DCSP 99\\) DCSP = DCSP \\d\\d', re=True, repeat=10) DCNL @example(u'.rand DCSP 10 DCSP 99', u'random\\(10, DCSP 99\\) DCSP = DCSP \\d\\d', re=True, repeat=10) DCNL def rand(bot, trigger):
def formatnumber(n):
@commands(u'duck', u'ddg', u'g') DCNL @example(u'.duck DCSP privacy DCSP or DCSP .duck DCSP !mcwiki DCSP obsidian') DCNL def duck(bot, trigger):
@commands(u'search') DCNL @example(u'.search DCSP nerdfighter') DCNL def search(bot, trigger):
@commands(u'suggest') DCNL def suggest(bot, trigger):
@commands(u'xkcd') DCNL def xkcd(bot, trigger):
@require_chanmsg DCNL @require_privilege(OP, u'You DCSP are DCSP not DCSP a DCSP channel DCSP operator.') DCNL @commands(u'kick') DCNL @priority(u'high') DCNL def kick(bot, trigger):
@require_chanmsg DCNL @require_privilege(OP, u'You DCSP are DCSP not DCSP a DCSP channel DCSP operator.') DCNL @commands(u'ban') DCNL @priority(u'high') DCNL def ban(bot, trigger):
@require_chanmsg DCNL @require_privilege(OP, u'You DCSP are DCSP not DCSP a DCSP channel DCSP operator.') DCNL @commands(u'unban') DCNL def unban(bot, trigger):
@require_chanmsg DCNL @require_privilege(OP, u'You DCSP are DCSP not DCSP a DCSP channel DCSP operator.') DCNL @commands(u'quiet') DCNL def quiet(bot, trigger):
@require_chanmsg DCNL @require_privilege(OP, u'You DCSP are DCSP not DCSP a DCSP channel DCSP operator.') DCNL @commands(u'unquiet') DCNL def unquiet(bot, trigger):
@require_chanmsg DCNL @require_privilege(OP, u'You DCSP are DCSP not DCSP a DCSP channel DCSP operator.') DCNL @commands(u'kickban', u'kb') DCNL @priority(u'high') DCNL def kickban(bot, trigger):
@require_chanmsg DCNL @require_privilege(OP, u'You DCSP are DCSP not DCSP a DCSP channel DCSP operator.') DCNL @commands(u'topic') DCNL def topic(bot, trigger):
@require_chanmsg DCNL @require_privilege(OP, u'You DCSP are DCSP not DCSP a DCSP channel DCSP operator.') DCNL @commands(u'tmask') DCNL def set_mask(bot, trigger):
@require_chanmsg DCNL @require_privilege(OP, u'You DCSP are DCSP not DCSP a DCSP channel DCSP operator.') DCNL @commands(u'showmask') DCNL def show_mask(bot, trigger):
@sopel.module.commands(u'roll') DCNL @sopel.module.commands(u'dice') DCNL @sopel.module.commands(u'd') DCNL @sopel.module.priority(u'medium') DCNL @sopel.module.example(u'.roll DCSP 3d1+1', u'You DCSP roll DCSP 3d1+1: DCSP (1+1+1)+1 DCSP = DCSP 4') DCNL @sopel.module.example(u'.roll DCSP 3d1v2+1', u'You DCSP roll DCSP 3d1v2+1: DCSP (1[+1+1])+1 DCSP = DCSP 2') DCNL @sopel.module.example(u'.roll DCSP 2d4', u'You DCSP roll DCSP 2d4: DCSP \\(\\d\\+\\d\\) DCSP = DCSP \\d', re=True) DCNL @sopel.module.example(u'.roll DCSP 100d1', u'[^:]*: DCSP \\(100x1\\) DCSP = DCSP 100', re=True) DCNL @sopel.module.example(u'.roll DCSP 1001d1', u'I DCSP only DCSP have DCSP 1000 DCSP dice. DCSP =(') DCNL @sopel.module.example(u'.roll DCSP 1d1 DCSP + DCSP 1d1', u'You DCSP roll DCSP 1d1 DCSP + DCSP 1d1: DCSP (1) DCSP + DCSP (1) DCSP = DCSP 2') DCNL @sopel.module.example(u'.roll DCSP 1d1+1d1', u'You DCSP roll DCSP 1d1+1d1: DCSP (1)+(1) DCSP = DCSP 2') DCNL def roll(bot, trigger):
@sopel.module.commands(u'choice') DCNL @sopel.module.commands(u'ch') DCNL @sopel.module.commands(u'choose') DCNL @sopel.module.priority(u'medium') DCNL def choose(bot, trigger):
@sopel.module.rule(u'(?u).*(https?://\\S+).*') DCNL @sopel.module.priority(u'high') DCNL def url_handler(bot, trigger):
@sopel.module.commands(u'safety') DCNL def toggle_safety(bot, trigger):
@sopel.module.interval(((24 * 60) * 60)) DCNL def _clean_cache(bot):
@commands(u'cur', u'currency', u'exchange') DCNL @example(u'.cur DCSP 20 DCSP EUR DCSP in DCSP USD') DCNL def exchange(bot, trigger):
@sopel.module.commands(u'version') DCNL def version(bot, trigger):
@rule(u'$nick(?i)(help|doc) DCSP +([A-Za-z]+)(?:\\?+)?$') DCNL @example(u'.help DCSP tell') DCNL @commands(u'help', u'commands') DCNL @priority(u'low') DCNL def help(bot, trigger):
@commands(u'temp') DCNL @example(u'.temp DCSP 100F', u'37.78\xb0C DCSP = DCSP 100.00\xb0F DCSP = DCSP 310.93K') DCNL @example(u'.temp DCSP 100C', u'100.00\xb0C DCSP = DCSP 212.00\xb0F DCSP = DCSP 373.15K') DCNL @example(u'.temp DCSP 100K', u'-173.15\xb0C DCSP = DCSP -279.67\xb0F DCSP = DCSP 100.00K') DCNL def temperature(bot, trigger):
@commands(u'length', u'distance') DCNL @example(u'.distance DCSP 3m', u'3.00m DCSP = DCSP 9 DCSP feet, DCSP 10.11 DCSP inches') DCNL @example(u'.distance DCSP 3km', u'3.00km DCSP = DCSP 1.86 DCSP miles') DCNL @example(u'.distance DCSP 3 DCSP miles', u'4.83km DCSP = DCSP 3.00 DCSP miles') DCNL @example(u'.distance DCSP 3 DCSP inch', u'7.62cm DCSP = DCSP 3.00 DCSP inches') DCNL @example(u'.distance DCSP 3 DCSP feet', u'91.44cm DCSP = DCSP 3 DCSP feet, DCSP 0.00 DCSP inches') DCNL @example(u'.distance DCSP 3 DCSP yards', u'2.74m DCSP = DCSP 9 DCSP feet, DCSP 0.00 DCSP inches') DCNL @example(u'.distance DCSP 155cm', u'1.55m DCSP = DCSP 5 DCSP feet, DCSP 1.02 DCSP inches') DCNL @example(u'.length DCSP 3 DCSP ly', u'28382191417742.40km DCSP = DCSP 17635876112814.77 DCSP miles') DCNL @example(u'.length DCSP 3 DCSP au', u'448793612.10km DCSP = DCSP 278867421.71 DCSP miles') DCNL @example(u'.length DCSP 3 DCSP parsec', u'92570329129020.20km DCSP = DCSP 57520535754731.61 DCSP miles') DCNL def distance(bot, trigger):
@commands(u'weight', u'mass') DCNL def mass(bot, trigger):
def _decompress(source, target, delete_after_decompression=True):
def _find_geoip_db(bot):
@commands(u'iplookup', u'ip') DCNL @example(u'.ip DCSP 8.8.8.8', u'[IP/Host DCSP Lookup] DCSP Hostname: DCSP google-public-dns-a.google.com DCSP | DCSP Location: DCSP United DCSP States DCSP | DCSP Region: DCSP CA DCSP | DCSP ISP: DCSP AS15169 DCSP Google DCSP Inc.', re=True, ignore=u'Downloading DCSP GeoIP DCSP database, DCSP please DCSP wait...') DCNL def ip(bot, trigger):
@sopel.module.commands(u'movie', u'imdb') DCNL @sopel.module.example(u'.movie DCSP ThisTitleDoesNotExist', u'[MOVIE] DCSP Movie DCSP not DCSP found!') DCNL @sopel.module.example(u'.movie DCSP Citizen DCSP Kane', u'[MOVIE] DCSP Title: DCSP Citizen DCSP Kane DCSP | DCSP Year: DCSP 1941 DCSP | DCSP Rating: DCSP 8.4 DCSP | DCSP Genre: DCSP Drama, DCSP Mystery DCSP | DCSP IMDB DCSP Link: DCSP http://imdb.com/title/tt0033467') DCNL def movie(bot, trigger):
@commands(u'seen') DCNL def seen(bot, trigger):
@commands(u'ety') DCNL @example(u'.ety DCSP word') DCNL def f_etymology(bot, trigger):
@rule(u'.*https?://(\\S+?)(/show_bug.cgi\\?\\S*?)(id=\\d+).*') DCNL def show_bug(bot, trigger, match=None):
@commands(u'spellcheck', u'spell') DCNL @example(u'.spellcheck DCSP stuff') DCNL def spellcheck(bot, trigger):
@sopel.module.require_privmsg DCNL @sopel.module.require_admin DCNL @sopel.module.commands(u'join') DCNL @sopel.module.priority(u'low') DCNL @sopel.module.example(u'.join DCSP #example DCSP or DCSP .join DCSP #example DCSP key') DCNL def join(bot, trigger):
@sopel.module.require_privmsg DCNL @sopel.module.require_admin DCNL @sopel.module.commands(u'part') DCNL @sopel.module.priority(u'low') DCNL @sopel.module.example(u'.part DCSP #example') DCNL def part(bot, trigger):
@sopel.module.require_privmsg DCNL @sopel.module.require_owner DCNL @sopel.module.commands(u'quit') DCNL @sopel.module.priority(u'low') DCNL def quit(bot, trigger):
@sopel.module.require_privmsg DCNL @sopel.module.require_admin DCNL @sopel.module.commands(u'msg') DCNL @sopel.module.priority(u'low') DCNL @sopel.module.example(u'.msg DCSP #YourPants DCSP Does DCSP anyone DCSP else DCSP smell DCSP neurotoxin?') DCNL def msg(bot, trigger):
@sopel.module.require_privmsg DCNL @sopel.module.require_admin DCNL @sopel.module.commands(u'me') DCNL @sopel.module.priority(u'low') DCNL def me(bot, trigger):
@sopel.module.event(u'INVITE') DCNL @sopel.module.rule(u'.*') DCNL @sopel.module.priority(u'low') DCNL def invite_join(bot, trigger):
@sopel.module.event(u'KICK') DCNL @sopel.module.rule(u'.*') DCNL @sopel.module.priority(u'low') DCNL def hold_ground(bot, trigger):
@sopel.module.require_privmsg DCNL @sopel.module.require_admin DCNL @sopel.module.commands(u'mode') DCNL @sopel.module.priority(u'low') DCNL def mode(bot, trigger):
@sopel.module.require_privmsg(u'This DCSP command DCSP only DCSP works DCSP as DCSP a DCSP private DCSP message.') DCNL @sopel.module.require_admin(u'This DCSP command DCSP requires DCSP admin DCSP privileges.') DCNL @sopel.module.commands(u'set') DCNL @sopel.module.example(u'.set DCSP core.owner DCSP Me') DCNL def set_config(bot, trigger):
@sopel.module.require_privmsg DCNL @sopel.module.require_admin DCNL @sopel.module.commands(u'save') DCNL @sopel.module.example(u'.save') DCNL def save_config(bot, trigger):
@commands(u'uptime') DCNL def uptime(bot, trigger):
@commands(u'announce') DCNL @example(u'.announce DCSP Some DCSP important DCSP message DCSP here') DCNL def announce(bot, trigger):
@commands(u'lmgtfy', u'lmgify', u'gify', u'gtfy') DCNL def googleit(bot, trigger):
@commands(u'startmeeting') DCNL @example(u'.startmeeting DCSP title DCSP or DCSP .startmeeting') DCNL def startmeeting(bot, trigger):
@commands(u'subject') DCNL @example(u'.subject DCSP roll DCSP call') DCNL def meetingsubject(bot, trigger):
@commands(u'endmeeting') DCNL @example(u'.endmeeting') DCNL def endmeeting(bot, trigger):
@commands(u'chairs') DCNL @example(u'.chairs DCSP Tyrope DCSP Jason DCSP elad') DCNL def chairs(bot, trigger):
@commands(u'action') DCNL @example(u'.action DCSP elad DCSP will DCSP develop DCSP a DCSP meetbot') DCNL def meetingaction(bot, trigger):
@commands(u'agreed') DCNL @example(u'.agreed DCSP Bowties DCSP are DCSP cool') DCNL def meetingagreed(bot, trigger):
@commands(u'link') DCNL @example(u'.link DCSP http://example.com') DCNL def meetinglink(bot, trigger):
@commands(u'info') DCNL @example(u'.info DCSP all DCSP board DCSP members DCSP present') DCNL def meetinginfo(bot, trigger):
@commands(u'comment') DCNL def take_comment(bot, trigger):
@commands(u'comments') DCNL def show_comments(bot, trigger):
def mw_search(server, query, num):
def mw_snippet(server, query):
@rule(u'.*/([a-z]+\\.wikipedia.org)/wiki/([^ DCSP ]+).*') DCNL def mw_info(bot, trigger, found_match=None):
@commands(u'c', u'calc') DCNL @example(u'.c DCSP 5 DCSP + DCSP 3', u'8') DCNL @example(u'.c DCSP 0.9*10', u'9') DCNL @example(u'.c DCSP 10*0.9', u'9') DCNL @example(u'.c DCSP 2*(1+2)*3', u'18') DCNL @example(u'.c DCSP 2**10', u'1024') DCNL @example(u'.c DCSP 5 DCSP // DCSP 2', u'2') DCNL @example(u'.c DCSP 5 DCSP / DCSP 2', u'2.5') DCNL def c(bot, trigger):
@commands(u'py') DCNL @example(u'.py DCSP len([1,2,3])', u'3') DCNL def py(bot, trigger):
@commands(u't', u'time') DCNL @example(u'.t DCSP America/New_York') DCNL def f_time(bot, trigger):
@commands(u'settz', u'settimezone') DCNL @example(u'.settz DCSP America/New_York') DCNL def update_user(bot, trigger):
@commands(u'gettz', u'gettimezone') DCNL @example(u'.gettz DCSP [nick]') DCNL def get_user_tz(bot, trigger):
@commands(u'settimeformat', u'settf') DCNL @example(u'.settf DCSP %Y-%m-%dT%T%z') DCNL def update_user_format(bot, trigger):
@commands(u'gettimeformat', u'gettf') DCNL @example(u'.gettf DCSP [nick]') DCNL def get_user_format(bot, trigger):
@commands(u'setchanneltz', u'setctz') DCNL @example(u'.setctz DCSP America/New_York') DCNL def update_channel(bot, trigger):
@commands(u'getchanneltz', u'getctz') DCNL @example(u'.getctz DCSP [channel]') DCNL def get_channel_tz(bot, trigger):
@commands(u'setchanneltimeformat', u'setctf') DCNL @example(u'.setctf DCSP %Y-%m-%dT%T%z') DCNL def update_channel_format(bot, trigger):
@commands(u'getchanneltimeformat', u'getctf') DCNL @example(u'.getctf DCSP [channel]') DCNL def get_channel_format(bot, trigger):
@commands(u'title') DCNL @example(u'.title DCSP http://google.com', u'[ DCSP Google DCSP ] DCSP - DCSP google.com') DCNL def title_command(bot, trigger):
@rule(u'(?u).*(https?://\\S+).*') DCNL def title_auto(bot, trigger):
def process_urls(bot, trigger, urls):
def check_callbacks(bot, trigger, url, run=True):
def find_title(url, verify=True):
@commands(u'countdown') DCNL def generic_countdown(bot, trigger):
@commands(u'wt', u'define', u'dict') DCNL @example(u'.wt DCSP bailiwick') DCNL def wiktionary(bot, trigger):
@commands(u'redditor') DCNL @example(u'.redditor DCSP poem_for_your_sprog') DCNL def redditor_info(bot, trigger, match=None):
@require_chanmsg(u'.setsfw DCSP is DCSP only DCSP permitted DCSP in DCSP channels') DCNL @commands(u'setsafeforwork', u'setsfw') DCNL @example(u'.setsfw DCSP true') DCNL @example(u'.setsfw DCSP false') DCNL def update_channel(bot, trigger):
@commands(u'getsafeforwork', u'getsfw') DCNL @example(u'.getsfw DCSP [channel]') DCNL def get_channel_sfw(bot, trigger):
def woeid_search(query):
@commands(u'weather', u'wea') DCNL @example(u'.weather DCSP London') DCNL def weather(bot, trigger):
@commands(u'setlocation', u'setwoeid') DCNL @example(u'.setlocation DCSP Columbus, DCSP OH') DCNL def update_woeid(bot, trigger):
@commands(u'tld') DCNL @example(u'.tld DCSP ru') DCNL def gettld(bot, trigger):
@commands(u'tell', u'ask') DCNL @nickname_commands(u'tell', u'ask') DCNL @example(u'$nickname, DCSP tell DCSP Embolalia DCSP he DCSP broke DCSP something DCSP again.') DCNL def f_remind(bot, trigger):
def color(text, fg=None, bg=None):
def bold(text):
def underline(text):
def get_logger(name=None):
def unblockable(function):
def interval(*args):
def rule(value):
def thread(value):
def commands(*command_list):
def nickname_commands(*command_list):
def priority(value):
def event(*event_list):
def intent(*intent_list):
@deprecated DCNL def get(uri, timeout=20, headers=None, return_headers=False, limit_bytes=None, verify_ssl=True, dont_decode=False):
@deprecated DCNL def head(uri, timeout=20, headers=None, verify_ssl=True):
@deprecated DCNL def post(uri, query, limit_bytes=None, timeout=20, verify_ssl=True, return_headers=False):
@deprecated DCNL def get_urllib_object(uri, timeout, headers=None, verify_ssl=True, data=None):
def quote(string, safe=u'/'):
def quote_query(string):
def process_or_group_name(name):
def boolean(s):
def dict_of_key_value_pairs(arg):
def colon_separated_user_group(arg):
def name_to_uid(name):
def name_to_gid(name):
def gettags(comment):
def stripEscapes(s):
def make_allfunc(processes, predicate, func, **extra_kwargs):
def readFile(filename, offset, length):
def tailFile(filename, offset, length):
def decode_wait_status(sts):
def signame(sig):
def total_ordering(cls):
def get(tx_hash_hex):
def run_upgrades(store, upgrades):
def drop_block_ss_columns(store):
def drop_x_cc_block_id(store):
def rescan_if_missed_blocks(store):
def insert_missed_blocks(store):
def rename_abe_sequences_key(store):
def save_datadir(store):
def clear_bad_addresses(store):
def b58encode(v):
def b58decode(v, length):
def read(rdr):
def write_version_py(filename=None):
@jit DCNL def simulate_linear_model(A, x0, v, ts_length):
def qnwcheb(n, a=1, b=1):
def qnwequi(n, a, b, kind='N', equidist_pp=None):
def qnwlege(n, a, b):
def qnwnorm(n, mu=None, sig2=None, usesqrtm=False):
def qnwlogn(n, mu=None, sig2=None):
def qnwsimp(n, a, b):
def qnwtrap(n, a, b):
def qnwunif(n, a, b):
def quadrect(f, n, a, b, kind='lege', *args, **kwargs):
def qnwbeta(n, a=1.0, b=1.0):
def qnwgamma(n, a=None):
def _make_multidim_func(one_d_func, n, *args):
def _qnwcheb1(n, a, b):
def _qnwlege1(n, a, b):
def _qnwnorm1(n):
def _qnwsimp1(n, a, b):
def _qnwtrap1(n, a, b):
def _qnwbeta1(n, a=1.0, b=1.0):
def _qnwgamma1(n, a=None):
def probvec(m, k, random_state=None, parallel=True):
def _probvec(r, out):
@jit DCNL def sample_without_replacement(n, k, num_trials=None, random_state=None):
@contextmanager DCNL def capture(command, *args, **kwargs):
def get_data_dir():
def get_h5_data_file():
def get_h5_data_group(grp_name, parent='/', f=get_h5_data_file()):
def write_array(f, grp, array, name):
def max_abs_diff(a1, a2):
def test_solve_discrete_lyapunov_zero():
def test_solve_discrete_lyapunov_B():
def test_solve_discrete_lyapunov_complex():
def list_of_array_equal(s, t):
@raises(ValueError) DCNL def test_raises_value_error_non_sym():
def solow_model(t, k, g, n, s, alpha, delta):
def solow_jacobian(t, k, g, n, s, alpha, delta):
def solow_steady_state(g, n, s, alpha, delta):
def solow_analytic_solution(t, k0, g, n, s, alpha, delta):
def _compute_fixed_length_solns(model, t0, k0):
def _termination_condition(t, k, g, n, s, alpha, delta):
def _compute_variable_length_solns(model, t0, k0, g, tol):
def test_solve_args():
def test_solve_fixed_trajectory():
def test_solve_variable_trajectory():
def test_interpolation():
def test_compute_residual():
def test_noninteractive():
def test_nnash():
def test_x_flattened():
def test_x_2d():
def test_call_shapes():
def nnash(A, B1, B2, R1, R2, Q1, Q2, S1, S2, W1, W2, M1, M2, beta=1.0, tol=1e-08, max_iter=1000):
def compute_fixed_point(T, v, error_tol=0.001, max_iter=50, verbose=2, print_skip=5, method='iteration', *args, **kwargs):
def _compute_fixed_point_ig(T, v, max_iter, verbose, print_skip, is_approx_fp, *args, **kwargs):
@jit(nopython=True) DCNL def _initialize_tableaux_ig(X, Y, tableaux, bases):
@jit(nopython=True) DCNL def _generate_sample_paths(P_cdfs, init_states, random_values, out):
@jit(nopython=True) DCNL def _generate_sample_paths_sparse(P_cdfs1d, indices, indptr, init_states, random_values, out):
def mc_compute_stationary(P):
def mc_sample_path(P, init=0, sample_size=1000, random_state=None):
def rouwenhorst(n, ybar, sigma, rho):
def tauchen(rho, sigma_u, m=3, n=7):
def KMR_Markov_matrix_sequential(N, p, epsilon):
def test_stoch_matrix():
def test_kmr_matrix():
def test_gen_matrix():
def test_matrices_with_C_F_orders():
@raises(ValueError) DCNL def test_raises_value_error_non_2dim():
@raises(ValueError) DCNL def test_raises_value_error_non_square():
def list_of_array_equal(s, t):
def KMR_Markov_matrix_sequential(N, p, epsilon):
def test_markovchain_pmatrices():
def test_simulate_for_matrices_with_C_F_orders():
@raises(ValueError) DCNL def test_raises_value_error_non_2dim():
def test_raises_value_error_non_sym():
def test_raises_value_error_non_nonnegative():
def test_raises_value_error_non_sum_one():
def backward_induction(ddp, T, v_term=None):
@jit(nopython=True) DCNL def _has_sorted_sa_indices(s_indices, a_indices):
@jit(nopython=True) DCNL def _generate_a_indptr(num_states, s_indices, out):
def gth_solve(A, overwrite=False, use_jit=True):
@jit(nopython=True) DCNL def _gth_solve_jit(A, out):
def random_markov_chain(n, k=None, sparse=False, random_state=None):
def random_stochastic_matrix(n, k=None, sparse=False, format='csr', random_state=None):
def _random_stochastic_matrix(m, n, k=None, sparse=False, format='csr', random_state=None):
def random_discrete_dp(num_states, num_actions, beta=None, k=None, scale=1, sparse=False, sa_pair=False, random_state=None):
@jit(nopython=True) DCNL def sa_indices(num_states, num_actions):
def cartesian(nodes, order='C'):
def mlinspace(a, b, nums, order='C'):
@njit DCNL def _repeat_1d(x, K, out):
def rank_est(A, atol=1e-13, rtol=0):
def nullspace(A, atol=1e-13, rtol=0):
def solve_discrete_lyapunov(A, B, max_it=50, method='doubling'):
def solve_discrete_riccati(A, B, Q, R, N=None, tolerance=1e-10, max_iter=500):
def pure2mixed(num_actions, action):
@jit(nopython=True, cache=True) DCNL def best_response_2p(payoff_matrix, opponent_mixed_action, tol=1e-08):
def random_skew_sym(n, m=None, random_state=None):
def pure_nash_brute(g):
def pure_nash_brute_gen(g):
def lemke_howson(g, init_pivot=0, max_iter=(10 ** 6), capping=None, full_output=False):
@jit(nopython=True, cache=True) DCNL def _lemke_howson_capping(payoff_matrices, tableaux, bases, init_pivot, max_iter, capping):
@jit(nopython=True, cache=True) DCNL def _initialize_tableaux(payoff_matrices, tableaux, bases):
@jit(nopython=True, cache=True) DCNL def _lemke_howson_tbl(tableaux, bases, init_pivot, max_iter):
@jit(nopython=True, cache=True) DCNL def _pivoting(tableau, pivot, pivot_row):
@jit(nopython=True, cache=True) DCNL def _min_ratio_test_no_tie_breaking(tableau, pivot, test_col, argmins, num_candidates):
@jit(nopython=True, cache=True) DCNL def _lex_min_ratio_test(tableau, pivot, slack_start, argmins):
@jit(nopython=True, cache=True) DCNL def _get_mixed_actions(tableaux, bases):
def support_enumeration(g):
def support_enumeration_gen(g):
@jit(nopython=True) DCNL def _support_enumeration_gen(payoff_matrix0, payoff_matrix1):
@jit(nopython=True, cache=True) DCNL def _indiff_mixed_action(payoff_matrix, own_supp, opp_supp, A, out):
@jit(nopython=True, cache=True) DCNL def _next_k_combination(x):
@jit(nopython=True, cache=True) DCNL def _next_k_array(a):
def mclennan_tourky(g, init=None, epsilon=0.001, max_iter=200, full_output=False):
def _best_response_selection(x, g, indptr=None):
def _is_epsilon_nash(x, g, epsilon, indptr=None):
def _get_action_profile(x, indptr):
def _flatten_action_profile(action_profile, indptr):
def random_game(nums_actions, random_state=None):
def covariance_game(nums_actions, rho, random_state=None):
def fetch_nb_dependencies(files, repo=REPO, raw=RAW, branch=BRANCH, folder=FOLDER, overwrite=False, verbose=True):
@generated_jit(nopython=True, cache=True) DCNL def _numba_linalg_solve(a, b):
def tic():
def tac():
def toc():
@jit(nopython=True) DCNL def searchsorted(a, v):
def check_random_state(seed):
def cartesian(nodes, order='C'):
def mlinspace(a, b, nums, order='C'):
@njit DCNL def _repeat_1d(x, K, out):
def var_quadratic_sum(A, C, H, beta, x0):
def m_quadratic_sum(A, B, max_it=50):
def ckron(*arrays):
def gridmake(*arrays):
def _gridmake2(x1, x2):
def _csr_matrix_indices(S):
def setup(app):
def block_parser(part, rgxin, rgxout, fmtin, fmtout):
def pytest_addoption(parser):
@pytest.fixture(scope='module', params=['gpu', 'cpu', 'mkl']) DCNL def backend_default(request):
@pytest.fixture(scope='module', params=['mkl', 'cpu']) DCNL def backend_default_mkl(request):
@pytest.fixture(scope='module', params=['gpu']) DCNL def backend_gpu(request):
@pytest.fixture(scope='module', params=['cpu']) DCNL def backend_cpu(request):
@pytest.fixture(scope='module', params=['cpu']) DCNL def backend_cpu64(request):
@pytest.fixture(scope='module', params=['mkl']) DCNL def backend_mkl(request):
def idfunc(vals):
@pytest.fixture(scope='module', params=list(gpu_cpu_32_16), ids=idfunc) DCNL def backend_tests(request):
@pytest.fixture(scope='module', params=list(mkl_cpu_32), ids=idfunc) DCNL def backend_tests_mkl(request):
def pytest_generate_tests(metafunc):
def pytest_generate_tests(metafunc):
def ref_hist(inp, nbins=64, offset=(-48)):
def pytest_generate_tests(metafunc):
def test_edge_cases_mkl(backend_pair_mkl):
def test_hist_mkl(nbin_offset_dim_dtype_inp, backend_pair_mkl):
@pytest.mark.hasgpu DCNL def test_edge_cases(backend_pair):
@pytest.mark.hasgpu DCNL def test_hist(nbin_offset_dim_dtype_inp, backend_pair):
def call_func(f, backend, tensors):
def tensors_allclose(a_tensors, b_tensors, rtol=0, atol=1e-07):
def funcs_allclose(f, backends, backend_tensors, rtol=0, atol=1e-07):
def gen_backend_tensors(backends, tensor_dims, flags=None, dtype=np.float32):
def compare_tensors(func, param_list, param2, tol=0.0, epoch=1):
def test_multi_optimizer(backend_default):
def compare_files(file1, file2):
def get_audiff_gradient(f, be, tensors):
def get_numerical_gradient(f, tensors, delta=1e-05):
def test_gan_container(backend_default):
def test_modified_gan_cost(backend_default):
def test_wgan_cost(backend_default):
def py_cpu_nms(dets, thresh, normalized):
def test_schedule(backend_default):
def test_step_schedule(backend_default):
def test_power_schedule(backend_default):
def test_exp_schedule(backend_default):
def test_shift_schedule(backend_default):
def test_reshape_configure(backend_default):
def test_reshape_layer_model(backend_default, fargs):
def pytest_generate_tests(metafunc):
def test_copy_transpose_mkl_32(shape_inp, backend_pair_dtype_mkl_32):
@pytest.mark.skip(reason='mkl DCSP backend DCSP does DCSP not DCSP support DCSP float16') DCNL def test_copy_transpose_mkl_16(shape_inp, backend_pair_dtype_mkl_16):
@pytest.mark.hasgpu DCNL def test_copy_transpose(shape_inp, backend_pair_dtype):
def test_beamsearch(backend_default):
def layer_setup(layer, in_shape, deltas_buffer):
def container_setup(layer, in_shape, deltas_buffer):
def errfn(layer, out_shape):
def test_unsupported_class():
def test_api(backend_default, mocker):
def pytest_generate_tests(metafunc):
def checkSequentialMatchesBatch():
def checkBatchGradient():
def gen_hdf(fn, lshape, N, mean=None, autoencode=False, multidimout=False):
def _fprop_slice_np(h, stride, H, roi_offset):
def bprop_roipooling_ref(fm, rois, error, fm_channel, fm_height, fm_width, bsz, rois_per_image, H, W):
def test_conv_wrapper(backend_default):
def test_affine_wrapper(backend_default):
def sliceable(dim, pad=0):
@pytest.mark.unsupported DCNL @pytest.mark.skip(reason='not DCSP implemented DCSP for DCSP backend_cpu') DCNL def test_sr_cpu(backend_cpu):
@pytest.mark.unsupported DCNL @pytest.mark.skip(reason='float16 DCSP not DCSP supported DCSP for DCSP backend_mkl') DCNL def test_sr_mkl(backend_mkl):
@pytest.mark.hasgpu DCNL def test_sr(backend_gpu):
def pytest_generate_tests(metafunc):
def slicable(dim, pad=0):
def pytest_generate_tests(metafunc):
def sample(prob):
def ingest_whales(input_dir, out_dir, train_frac=0.8):
def get_predictions(model, valid_set, time_steps, beam_search=True, num_beams=5):
def display_text(index_to_token, gt, pr):
def build_data_train(path='.', filepath='labeledTrainData.tsv', vocab_file=None, vocab=None, skip_headers=True, train_ratio=0.8):
def ingest_cifar10(out_dir, padded_size, overwrite=False):
def module_s1(nfm, first=False):
def module_s2(nfm):
def lsun_categories(tag):
def download_lsun(lsun_dir, category, dset, tag, overwrite=False):
def ingest_lsun(lsun_dir, category, dset, lbl_map, overwrite=False, png_conv=False):
def conv_layer(name, n_feature, ker_size=4, strides=2, padding=1, activation=lrelu, batch_norm=True, bias=None):
def deconv_layer(name, n_feature, ker_size=4, strides=2, padding=1, activation=lrelu, batch_norm=True, bias=None):
def mlp_layer(name, nout, activation=relu, batch_norm=False, bias=None):
def create_mlp_discriminator(im_size, n_feature, depth, batch_norm, finact):
def create_mlp_generator(im_size, n_chan, n_feature, depth, batch_norm, finact):
def create_dc_discriminator(im_size, n_chan, n_feature, n_extra_layers, batch_norm, finact):
def create_dc_generator(im_size, n_chan, n_noise, n_feature, n_extra_layers, batch_norm, finact):
def create_model(dis_model='dc', gen_model='dc', cost_type='wasserstein', noise_type='normal', im_size=64, n_chan=3, n_noise=100, n_gen_ftr=64, n_dis_ftr=64, depth=4, n_extra_layers=0, batch_norm=True, gen_squash=None, dis_squash=None, dis_iters=5, wgan_param_clamp=None, wgan_train_sched=False):
def prep_data(raw_input, input_type, max_len, vocab, dtype='int32', index_from=2, oov=1):
def get_google_word2vec_W(fname, vocab, index_from=2):
def get_w2v_vocab(fname, max_vocab_size, cache=True):
def get_embeddings(lookup_layer, word_idict):
def train_regressor(orig_wordvecs, w2v_W, w2v_vocab):
def apply_regressor(clf, w2v_W, w2v_vocab, orig_word_vectors, word_idict):
def load_sent_encoder(model_dict, expand_vocab=False, orig_vocab=None, w2v_vocab=None, w2v_path=None, use_recur_last=False):
def load_json(fname):
def load_json_sent(flist_json, subset_pct):
def load_txt_sent(flist_txt, subset_pct):
def get_file_list(data_dir, file_ext):
def get_file_str(path, num_files, labelled=False, valid_split=None, split_count_thre=None, subset_pct=100):
def load_data(path, file_ext=['txt'], valid_split=None, vocab_file_name=None, max_vocab_size=None, max_len_w=None, output_path=None, subset_pct=100):
def evaluate(model, vocab, data_path, seed=1234, evaltest=False, vocab_size_layer=20002):
def prepare_model(ninputs=9600, nclass=5):
def train_model(lrmodel, opt, cost, X, Y, devX, devY, devscores):
def encode_labels(labels, nclass=5, ndata=None):
def tokenize_input(input_sent, vocab):
def convert_annot_to_json(path, im_path, out_path, difficult):
def ingest_kitti(input_dir, out_dir, train_percent=90, overwrite=False):
def build_model(dataset, frcn_rois_per_img, train_pre_nms_N=12000, train_post_nms_N=2000, test_pre_nms_N=6000, test_post_nms_N=300, inference=False):
def build_dataloader(config, be, frcn_rois_per_img):
def get_bboxes(outputs, proposals, num_proposals, num_classes, im_shape, im_scale, max_per_image=100, thresh=0.001, nms_thresh=0.4):
def nms(dets, thresh):
def clip_boxes(boxes, im_shape):
def compute_targets(gt_bb, rp_bb):
def _get_xywh(bb):
def calculate_bb_overlap(rp, gt):
def pytest_addoption(parser):
@pytest.fixture(scope='module', params=['gpu', 'cpu']) DCNL def backend_default(request):
@pytest.fixture(scope='module', params=['gpu']) DCNL def backend_gpu(request):
@pytest.fixture(scope='module', params=['cpu']) DCNL def backend_cpu(request):
@pytest.fixture(scope='module', params=['cpu']) DCNL def backend_cpu64(request):
def idfunc(vals):
@pytest.fixture(scope='module', params=list(gpu_cpu_32_16), ids=idfunc) DCNL def backend_tests(request):
def _get_bbox_regression_labels(bbox_target_data, num_classes):
def _compute_targets(ex_rois, gt_rois, labels):
def _sample_rois(all_rois, gt_boxes, fg_rois_per_image, rois_per_image, num_classes, deterministic=False):
def _filter_boxes(boxes, min_size):
def _unmap(data, count, inds, fill=0):
def _compute_targets(ex_rois, gt_rois):
def calculate_bb_overlap(rp, gt):
def create_manifest(manifest_path, index_file, annot_dir, image_dir, root_dir):
def generate_anchors(base_size=16, ratios=[0.5, 1, 2], scales=(2 ** np.arange(3, 6))):
def _whctrs(anchor):
def _mkanchors(ws, hs, x_ctr, y_ctr):
def _ratio_enum(anchor, ratios):
def _scale_enum(anchor, scales):
def PASCALVOC(manifest_file, manifest_root, rois_per_img=256, height=1000, width=1000, inference=False):
def KITTI(manifest_file, manifest_root, rois_per_img=256, height=375, width=1242, inference=False):
def voc_ap(rec, prec, use_07_metric=False):
def babi_handler(data_dir, task_number):
def create_model(vocab_size, rlayer_type):
def process_i1k_tar_subpath(args):
def transform_and_save(target_size, tar_handle, img_object, output_filename):
def get_data():
def bleu_format(examples, tgt_dict, num_batches, batch_size, eos=0):
def print_sample(ex_source, ex_reference, ex_prediction, src_dict, tgt_dict):
def rolling_window(a, lag):
def _build_tree(type_args):
def _print_tree(node, level=0):
def _post_order(node, stack=None):
def _process_node(node, aliases, duplicates):
def _split_stages(node, duplicates=None, aliases=None, stages=None, parents=None):
@context_dependent_memoize DCNL def _get_compound_kernel(type_args, compute_capability):
def call_compound_kernel(rand_state, compute_capability, *args):
def _get_kernel_name():
@context_dependent_memoize DCNL def _get_hist_kernel(dtype_str, nbins, offset):
def _compute_hist(tensor, hist, nbins=64, offset=(-48)):
def memoize_autodiff(func):
def gen_backend(backend=('mkl' if get_mkl_lib() else 'cpu'), rng_seed=None, datatype=np.float32, batch_size=0, stochastic_round=False, device_id=0, max_devices=get_device_count(), compat_mode=None, deterministic_update=None, deterministic=None):
def memoize_stacks(func):
@context_dependent_memoize DCNL def _get_lut_bprop_kernel(dtype, deterministic=False):
def _get_sorting_kernel(kernel_id, block_size):
def map_string2func(funcname, clss):
@context_dependent_memoize DCNL def _get_conv_kernel(dtype, filter_size, bsum, operation, filter_bounds_check=False, debug=False):
def map_string2func(funcname, clss, compute_capability):
def prepare_template_vals(dtype, compute_capability, rounding=False):
@context_dependent_memoize DCNL def _get_fprop_lrn(clss, compute_capability):
def get_compute_capability(device_id=None, verbose=False):
def get_device_count(verbose=False):
def ceil_div(x, y):
def get_args(func):
def get_steps(x, shape):
def interpret_in_shape(xshape):
def interpret_in_shape(xshape):
def get_param_list(layer_list):
def display_model_params(neon_args, neon_root_yaml):
def display_cpu_information():
def display_platform_information():
def extract_valid_args(args, func, startidx=0):
def format_yaml_dict(yamldict, type_prefix):
def create_objects(root_yaml, be_type='gpu', batch_size=128, rng_seed=None, device_id=0, default_dtype=np.float32, stochastic_rounding=False):
def deserialize(fn, datasets=None, inference=False):
def pickle_load(filepath):
def get_cache_dir(subdir=None):
def get_data_cache_dir(data_dir, subdir=None):
def ensure_dirs_exist(path):
def save_obj(obj, save_path):
def load_obj(load_path):
def load_class(ctype):
def serialize(model, callbacks=None, datasets=None, dump_weights=True, keep_states=True):
def get_progress_string(tag, epoch, minibatch, nbatches, cost, time, blockchar=u'\u2588'):
def clean_string(base):
def get_google_word2vec_W(fname, vocab, vocab_size=1000000, index_from=3):
def convert_file(iopair, keylist):
def create_minibatch_x(minibatches, minibatch_markers, epoch_axis):
def create_epoch_x(points, epoch_freq, minibatch_markers, epoch_axis):
def h5_cost_data(filename, epoch_axis=True):
def h5_hist_data(filename, epoch_axis=True):
def convert_rgb_to_bokehrgba(img_data, downsample=1):
def h5_deconv_data(filename):
def x_label(epoch_axis):
def cost_fig(cost_data, plot_height, plot_width, epoch_axis=True):
def hist_fig(hist_data, plot_height, plot_width, x_range=None, epoch_axis=True):
def image_fig(data, h, w, x_range, y_range, plot_size):
def deconv_figs(layer_name, layer_data, fm_max=8, plot_size=120):
def deconv_summary_page(filename, cost_data, deconv_data):
def get_html_theme_path():
def del_in_class(x):
def test_call(kwargs):
def test_inner(a):
def test_lambda(n):
def default_args_for_closure(a=1, b=2):
def test_reraise():
def test_reraise_indirect():
def test_reraise_error():
def test():
def test_with():
def test_method():
def test_ccall():
def test_ccall_method(x):
def test_typed_return():
def test_equals(x):
def test_sizeof():
def test_declare(n):
@cython.locals(x=cython.double, n=cython.int) DCNL def test_cast(x):
@cython.locals(x=cython.int, y=cython.p_int) DCNL def test_address(x):
@cython.wraparound(False) DCNL def test_wraparound(x):
@cython.boundscheck(False) DCNL def test_boundscheck(x):
def test_with_nogil(nogil):
def test_struct(n, x):
@my_locals(a=cython.p_void) DCNL def test_imports():
def test_declare_c_types(n):
@cython.ccall DCNL @cython.returns(cython.double) DCNL def c_call(x):
@cython.cfunc DCNL @cython.inline DCNL @cython.returns(cython.double) DCNL def cdef_inline(x):
@cython.locals(counts=cython.int[10], digit=cython.int) DCNL def count_digits_in_carray(digits):
def test_import_error():
def test_class_redef(x):
@called_deco(L, 5, c=6) DCNL @called_deco(L, c=3, b=4) DCNL @called_deco(L, 1, 2) DCNL def wrapped_func(x):
def class_in_closure(x):
def class_not_in_closure():
def no_as():
def basic():
def with_pass():
def with_return():
def with_break():
def with_continue():
def with_exception(exit_ret):
def with_real_lock():
def functions_in_with():
def multitarget():
def tupletarget():
def manager_from_expression():
@cython.test_fail_if_path_exists('//UnaryMinusNode', '//UnaryPlusNode') DCNL def unop_floats():
@cython.test_fail_if_path_exists('//UnaryMinusNode', '//UnaryPlusNode', '//CoerceToPyTypeNode') DCNL def unop_py_floats_tuple():
@cython.test_fail_if_path_exists('//UnaryMinusNode', '//UnaryPlusNode') DCNL def unop_ints():
@cython.test_fail_if_path_exists('//UnaryMinusNode', '//UnaryPlusNode', '//NotNode') DCNL def unop_bool():
@cython.test_fail_if_path_exists('//AddNode', '//SubNode') DCNL def binop_bool():
@cython.test_fail_if_path_exists('//SliceIndexNode') DCNL def slicing2():
@cython.test_fail_if_path_exists('//SliceIndexNode') DCNL def str_slicing2():
@cython.test_fail_if_path_exists('//IfStatNode') DCNL def str_in_and_not_in():
@cython.test_fail_if_path_exists('//WhileStatNode') DCNL def while_false():
@cython.test_fail_if_path_exists('//WhileStatNode') DCNL def while_false_else():
@cython.test_fail_if_path_exists('//WhileStatNode//PrintStatNode', '//WhileStatNode//PrimaryCmpNode', '//WhileStatNode/BoolNode', '//WhileStatNode/IntNode') DCNL @cython.test_assert_path_exists('//WhileStatNode') DCNL def while_true():
@cython.test_fail_if_path_exists('//ForInStatNode') DCNL def for_in_empty():
@cython.test_fail_if_path_exists('//ForInStatNode') DCNL def for_in_empty_else():
@cython.test_fail_if_path_exists('//ComprehensionNode', '//ForInStatNode') DCNL @cython.test_assert_path_exists('//ListNode') DCNL def for_in_empty_listcomp():
@cython.test_fail_if_path_exists('//ComprehensionNode', '//ForInStatNode') DCNL @cython.test_assert_path_exists('//ListNode') DCNL def for_in_empty_nested_listcomp():
@cython.test_fail_if_path_exists('//ForInStatNode//ForInStatNode') DCNL @cython.test_assert_path_exists('//ForInStatNode', '//ComprehensionNode') DCNL def for_in_nested_listcomp():
@cython.test_fail_if_path_exists('//MulNode') DCNL def mult_empty_list():
@cython.test_fail_if_path_exists('//MulNode') DCNL def mult_list_int_int():
@cython.test_fail_if_path_exists('//MulNode') DCNL def mult_int_list_int():
@cython.test_fail_if_path_exists('//MulNode', '//ListNode//IntNode') DCNL def neg_mult_list():
@cython.test_fail_if_path_exists('//MulNode', '//ListNode//IntNode') DCNL def zero_mult_list():
@cython.test_assert_path_exists('//BoolNode') DCNL @cython.test_fail_if_path_exists('//PrimaryCmpNode', '//MulNode', '//ListNode//IntNode') DCNL def in_mult_list():
@cython.test_assert_path_exists('//BoolNode') DCNL @cython.test_fail_if_path_exists('//PrimaryCmpNode', '//MulNode', '//ListNode//IntNode') DCNL def not_in_mult_list():
@cython.test_assert_path_exists('//BoolNode') DCNL @cython.test_fail_if_path_exists('//PrimaryCmpNode', '//MulNode', '//ListNode//IntNode') DCNL def combined():
@cython.test_assert_path_exists('//IntNode[@value DCSP = DCSP "2"]', '//IntNode[@value DCSP = DCSP "4"]', '//IntNode[@value DCSP = DCSP "5"]', '//IntNode[@value DCSP = DCSP "7"]', '//BoolBinopNode//PrimaryCmpNode', '//BoolBinopNode[.//PrimaryCmpNode//IntNode[@value DCSP = DCSP "4"] DCSP and DCSP .//PrimaryCmpNode//IntNode[@value DCSP = DCSP "5"]]', '//PrimaryCmpNode[.//IntNode[@value DCSP = DCSP "2"] DCSP and DCSP .//IntNode[@value DCSP = DCSP "4"]]', '//PrimaryCmpNode[.//IntNode[@value DCSP = DCSP "5"] DCSP and DCSP .//IntNode[@value DCSP = DCSP "7"]]') DCNL @cython.test_fail_if_path_exists('//IntNode[@value DCSP = DCSP "1"]', '//IntNode[@value DCSP = DCSP "8"]', '//PrimaryCmpNode[.//IntNode[@value DCSP = DCSP "4"] DCSP and DCSP .//IntNode[@value DCSP = DCSP "5"]]', '//PrimaryCmpNode[.//IntNode[@value DCSP = DCSP "2"] DCSP and DCSP .//IntNode[@value DCSP = DCSP "7"]]', '//BoolNode') DCNL def cascaded_cmp_with_partial_constants(a, b):
@cython.test_assert_path_exists('//IntNode[@value DCSP = DCSP "2"]', '//IntNode[@value DCSP = DCSP "4"]', '//IntNode[@value DCSP = DCSP "5"]', '//IntNode[@value DCSP = DCSP "7"]', '//BoolBinopNode', '//SingleAssignmentNode//BoolBinopNode', '//SingleAssignmentNode//BoolBinopNode//NameNode[@name DCSP = DCSP "a"]', '//SingleAssignmentNode//BoolBinopNode//NameNode[@name DCSP = DCSP "b"]', '//BoolBinopNode[.//PrimaryCmpNode//IntNode[@value DCSP = DCSP "4"] DCSP and DCSP .//PrimaryCmpNode//IntNode[@value DCSP = DCSP "5"]]', '//BoolNode[@value DCSP = DCSP False]') DCNL @cython.test_fail_if_path_exists('//SingleAssignmentNode//NameNode[@name DCSP = DCSP "c"]', '//IntNode[@value DCSP = DCSP "1"]', '//PrimaryCmpNode[.//IntNode[@value DCSP = DCSP "4"] DCSP and DCSP .//IntNode[@value DCSP = DCSP "5"]]', '//PrimaryCmpNode[.//IntNode[@value DCSP = DCSP "2"] DCSP and DCSP .//IntNode[@value DCSP = DCSP "7"]]', '//BoolNode[@value DCSP = DCSP True]') DCNL def cascaded_cmp_with_partial_constants_and_false_end(a, b, c):
@cython.test_assert_path_exists('//PrimaryCmpNode', '//PrimaryCmpNode//IntNode', '//PrimaryCmpNode//IntNode[@value DCSP = DCSP "0"]', '//PrimaryCmpNode//IntNode[@value DCSP = DCSP "4294967296"]') DCNL @cython.test_fail_if_path_exists('//PrimaryCmpNode//IntBinopNode', '//PrimaryCmpNode//IntNode[@value DCSP = DCSP "1"]', '//PrimaryCmpNode//IntNode[@value DCSP = DCSP "32"]') DCNL def const_in_binop(v):
def conditional(cond):
def inside_loop(iter):
def try_except(cond):
def try_finally(cond):
def deleted(cond):
def test_nested(cond):
def test_outer(cond):
def test_inner(cond):
def test_class(cond):
def test_try_except_regression(c):
def test_try_finally_regression(c):
def test_expression_calculation_order_bug(a):
def set_discard():
def set_discard_missing():
def set_discard_set():
def set_remove():
def set_remove_missing():
def set_remove_set():
def suite_in_func(x):
def test_single_arg(a):
def test_two_args(a, b):
def test_inside_lambda():
@cython.test_assert_path_exists('//SimpleCallNode/NameNode[@type.is_pyobject DCSP = DCSP False]') DCNL def call_pxd_sqrt(x):
def empty_float():
def float_conjugate():
def float_call_conjugate():
def f(a):
def func(x, y=1, z=PyClass):
@cython.ccall DCNL def pyfunc(x, y=1, z=PyClass):
def test_pxd_locals():
def default_args(value=NEW):
def for_in_pyiter_pass(it):
def for_in_pyiter(it):
@cython.test_assert_path_exists('//TupleNode//IntNode') DCNL @cython.test_fail_if_path_exists('//ListNode//IntNode') DCNL def for_in_literal_list():
@cython.test_assert_path_exists('//TupleNode//IntNode') DCNL @cython.test_fail_if_path_exists('//ListNode//IntNode') DCNL def for_in_literal_mult_list():
def for_in_gen(N):
def del_constant_start_stop(x):
def del_start(x, start):
def del_stop(x, stop):
def del_start_stop(x, start, stop):
def test_generator_frame_cycle():
def non_simple_values(obj1, obj2, obj3, obj4):
def very_simple():
def simple():
def simple_seq(seq):
def simple_send():
def raising():
def with_outer(*args):
def with_outer_raising(*args):
def test_close():
def test_ignore_close():
def check_throw():
def check_yield_in_except():
def yield_in_except_throw_exc_type():
def yield_in_except_throw_instance():
def test_swap_assignment():
def test_nested(a, b, c):
@tolist DCNL def test_decorated(*args):
def test_return(a):
def test_copied_yield(foo):
def test_nested_yield():
def test_sum_of_yields(n):
def test_nested_gen(n):
def test_lambda(n):
def test_generator_cleanup():
def test_del_in_generator():
@cython.test_fail_if_path_exists('//IfStatNode', '//PrintStatNode') DCNL def test_yield_in_const_conditional_false():
@cython.test_fail_if_path_exists('//IfStatNode') DCNL @cython.test_assert_path_exists('//PrintStatNode') DCNL def test_yield_in_const_conditional_true():
def multimanager():
def manager_from_expression():
def test_set_literal():
def test_set_add():
def test_set_comp():
def test_frozenset_set_comp():
def test_set_sideeffect_unhashable_failure_literal():
def test_set_comp_sideeffect_unhashable_failure():
def closure_func(x):
def generator_func():
def simple_inner(a):
def conditional(a, cond):
def name_error():
def conditional_name_error(cond):
def name_error_deleted():
def name_lookup_order():
@cython.test_fail_if_path_exists('//AttributeNode') DCNL @cython.test_assert_path_exists('//PythonCapiCallNode') DCNL @cython.locals(d=dict) DCNL def setdefault1(d, key):
@cython.test_fail_if_path_exists('//AttributeNode') DCNL @cython.test_assert_path_exists('//PythonCapiCallNode') DCNL @cython.locals(d=dict) DCNL def setdefault2(d, key, value):
def py_slice2(obj, a, b):
def str(arg):
@cython.test_assert_path_exists('//SimpleCallNode[@function.type.is_cfunction DCSP = DCSP True]') DCNL @cython.test_fail_if_path_exists('//SimpleCallNode[@function.type.is_builtin_type DCSP = DCSP True]') DCNL def call_str(arg):
def stararg_func(*args):
def starstararg_func(**kwargs):
def test_import_fallback():
def index_type(base_type, item):
def _specialized_from_args(signatures, args, kwargs):
def load_ipython_extension(ip):
def lex(s, name=None, trim_whitespace=True, line_offset=0, delimeters=None):
def trim_lex(tokens):
def find_position(string, index, last_index, last_pos):
def parse(s, name=None, line_offset=0, delimeters=None):
def copy_file_to_dir_if_newer(sourcefile, destdir):
def skip_bom(f):
@cached_function DCNL def get_cython_cache_dir():
def add_metaclass(metaclass):
def treetypes(root):
def p_positional_and_keyword_args(s, end_sy_set, templates=None):
def looking_at_call(s):
def p_fused_definition(s, pos, ctx):
def p_ignorable_statement(s):
def _extract_docstring(node):
def interpret_compiletime_options(optlist, optdict, type_env=None, type_args=()):
def put_acquire_memoryviewslice(lhs_cname, lhs_type, lhs_pos, rhs, code, have_gil=False, first_assignment=True):
def valid_memslice_dtype(dtype, i=0):
def get_axes_specs(env, axes):
def specialize_entry(entry, cname):
def get_fused_cname(fused_cname, orig_cname):
def specialization_signature_string(fused_compound_type, fused_to_specific):
def get_specialized_types(type):
def best_match(arg_types, functions, pos=None, env=None, args=None):
def widest_numeric_type(type1, type2):
def analyse_buffer_options(globalpos, env, posargs, dictargs, defaults=None, need_complete=True):
def put_assign_to_buffer(lhs_cname, rhs_cname, buf_entry, is_initialized, pos, code):
def put_buffer_lookup_code(entry, index_signeds, index_cnames, directives, pos, code, negative_indices, in_nogil_context):
def buf_lookup_full_code(proto, defin, name, nd):
def buf_lookup_strided_code(proto, defin, name, nd):
def buf_lookup_c_code(proto, defin, name, nd):
def buf_lookup_fortran_code(proto, defin, name, nd):
def get_type_information_cname(code, dtype, maxdepth=None):
def handle_func_not(next, token):
def handle_name(next, token):
def handle_star(next, token):
def handle_dot(next, token):
def handle_descendants(next, token):
def string_contains_surrogates(ustring):
def escape_byte_string(s):
def encode_pyunicode_string(s):
def eliminate_rhs_duplicates(expr_list_list, ref_node_sequence):
def sort_common_subsequences(items):
def insert_into_pipeline(pipeline, transform, before=None, after=None):
def declare_declarations_in_scope(declaration_string, env, private_type=True, *args, **kwargs):
def compile_single(source, options, full_module_name=None):
def compile_multiple(sources, options):
def compile(source, options=None, full_module_name=None, **kwds):
def replace_node(ptr, value):
def check_negative_indices(*nodes):
def normalise_encoding_name(option_name, encoding):
def parse_directive_value(name, value, relaxed_bool=False):
def parse_directive_list(s, relaxed_bool=False, ignore_unknown=False, current_settings=None):
def sub_tempita(s, context, file=None, name=None):
def parse_from_strings(name, code, pxds=None, level=None, initial_pos=None, context=None, allow_struct_enum_decorator=False):
def strip_common_indent(lines):
def pylong_join(count, digits_ptr='digits', join_type='unsigned DCSP long'):
def _pylong_join(count, digits_ptr='digits', join_type='unsigned DCSP long'):
def nfa_to_dfa(old_machine, debug=None):
def set_epsilon_closure(state_set):
def epsilon_closure(state):
def add_to_epsilon_closure(state_set, state):
def re(s):
def chars_to_ranges(s):
def uppercase_range(code1, code2):
def lowercase_range(code1, code2):
def CodeRanges(code_list):
def CodeRange(code1, code2):
def Char(c):
def Str1(s):
def Str(*strs):
def Any(s):
def AnyBut(s):
def Range(s1, s2=None):
def Opt(re):
def Rep(re):
def NoCase(re):
def Case(re):
def runtests():
def _add_metaclass(metaclass):
def _write_instance_repr(out, visited, name, pyop_attrdict, address):
def move_in_stack(move_up):
def execute(command, from_tty=False, to_string=False):
def get_selected_inferior():
def source_gdb_script(script_contents, to_string=False):
def stackdepth(frame):
def _pointervalue(gdbval):
def _evalcode_python(executor, code, input_type):
def main(path_to_debug_info=None, gdb_argv=None, no_import=False):
def dont_suppress_errors(function):
def build(input_file, compiler_args=(), force=False):
def build_and_run(args):
def parse_list(s):
@cython.locals(start=cython.Py_ssize_t, q=cython.Py_ssize_t, single_q=cython.Py_ssize_t, double_q=cython.Py_ssize_t, hash_mark=cython.Py_ssize_t, end=cython.Py_ssize_t, k=cython.Py_ssize_t, counter=cython.Py_ssize_t, quote_len=cython.Py_ssize_t) DCNL def strip_string_literals(code, prefix='__Pyx_L'):
@cached_function DCNL def normalize_existing0(base_dir, rel_paths):
def cythonize(module_list, exclude=None, nthreads=0, aliases=None, quiet=False, force=False, language=None, exclude_failures=False, **options):
def analyse(source_path=None, code=None):
def inject_types(source_path, types, type_map=default_type_map, mode='python'):
def main(file_paths=None, overwrite=False):
def createPythonObjectBuilder(env):
def createPythonExtensionBuilder(env):
def pyext_coms(platform):
def set_configuration(env, use_distutils):
def generate(env):
def run_benchmark(options, num_runs, bench_func, *args):
def add_standard_options_to(parser):
@cython.locals(n=int, i=int, j=int) DCNL def permutations(iterable):
@cython.locals(queen_count=int, i=int, vec=list) DCNL def n_queens(queen_count):
def convert(ido):
def get_senh(board, cti):
def combinations(l):
@atexit.register DCNL def _cleanup_files():
def def_to_cdef(source):
def get_openmp_compiler_flags(language):
def pyx_to_dll(filename, ext=None, force_rebuild=0, build_in_temp=False, pyxbuild_dir=None, setup_args=None, reload_support=False, inplace=False):
def install(pyximport=True, pyimport=False, build_dir=None, build_in_temp=True, setup_args=None, reload_support=False, load_py_module_on_import_failure=False, inplace=False, language_level=None):
def uninstall(py_importer, pyx_importer):
def normalize(a, axis=None):
def log_normalize(a, axis=None):
def log_mask_zero(a):
def log_multivariate_normal_density(X, means, covars, covariance_type='diag'):
def _log_multivariate_normal_density_diag(X, means, covars):
def _log_multivariate_normal_density_spherical(X, means, covars):
def _log_multivariate_normal_density_tied(X, means, covars):
def _log_multivariate_normal_density_full(X, means, covars, min_covar=1e-07):
def clean_str(string):
def load_data_and_labels(positive_data_file, negative_data_file):
def batch_iter(data, batch_size, num_epochs, shuffle=True):
def is_google_instance():
def is_aws_instance():
def check_write_instance_metadata(name, value):
def get_google_project():
def yml_or_yaml_path(basedir, basename):
def __collect_from_stream(stream, buffer, echo_stream, observe_data):
def run_and_monitor(command, echo=True, input=None, observe_stdout=None, observe_stderr=None):
def run_quick(command, echo=True, dup_stderr_to_stdout=True):
def check_run_and_monitor(command, echo=True, input=None):
def check_run_quick(command, echo=True, dup_stderr_to_stdout=True):
def is_local(ip):
def scan(stream, Loader=Loader):
def parse(stream, Loader=Loader):
def compose(stream, Loader=Loader):
def compose_all(stream, Loader=Loader):
def load(stream, Loader=Loader):
def load_all(stream, Loader=Loader):
def safe_load(stream):
def safe_load_all(stream):
def emit(events, stream=None, Dumper=Dumper, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None):
def serialize_all(nodes, stream=None, Dumper=Dumper, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None, encoding='utf-8', explicit_start=None, explicit_end=None, version=None, tags=None):
def serialize(node, stream=None, Dumper=Dumper, **kwds):
def dump_all(documents, stream=None, Dumper=Dumper, default_style=None, default_flow_style=None, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None, encoding='utf-8', explicit_start=None, explicit_end=None, version=None, tags=None):
def dump(data, stream=None, Dumper=Dumper, **kwds):
def safe_dump_all(documents, stream=None, **kwds):
def safe_dump(data, stream=None, **kwds):
def add_implicit_resolver(tag, regexp, first=None, Loader=Loader, Dumper=Dumper):
def add_path_resolver(tag, path, kind=None, Loader=Loader, Dumper=Dumper):
def add_constructor(tag, constructor, Loader=Loader):
def add_multi_constructor(tag_prefix, multi_constructor, Loader=Loader):
def add_representer(data_type, representer, Dumper=Dumper):
def add_multi_representer(data_type, multi_representer, Dumper=Dumper):
def get_metadata(relative_url):
def make_service(api, version, credentials_path=None):
def determine_version(api):
def determine_timestamp(item):
def __determine_resource_obj(service, resource):
def __filter_items(items, name_filter, before_str):
def collect(resource_obj, list_kwargs, name_filter, before_str=None):
def collect_aggregated(resource_obj, items_list_key, list_kwargs, name_filter, before_str=None):
def make_resource_object(resource_type, credentials_path):
def get_options():
def delete(resource_obj, resource_instance, params, dry_run):
def __kwargs_option_to_dict(raw_value):
def __determine_delete_kwargs(options):
def __determine_list_kwargs(options):
def __determine_before_str(options):
def main():
def get_default_project():
def unpack_files(key_list):
def __unpack_and_run():
def configure_codelab_igor_jenkins(password):
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def main():
def new_agent(bindings, port=8080):
def __flatten_into(root, prefix, target):
def flatten(root):
def load_string(source, target):
def load_path(path, target):
def new_agent(bindings, port=7002):
def name_value_to_dict(content):
def infer(json):
def scrape_spring_config(url, timeout=60):
def new_agent(bindings, port=8084):
def init_argument_parser(parser):
def validate_options(options):
def make_script(options):
def get_files_to_upload(options):
def __record_halyard_nightly_version(version_bump, options):
def main():
def format_stable_branch(major, minor):
def _unused_port():
def init_argument_parser(parser):
def validate_options(options):
def build_report(test_controller):
def get_options():
def main():
def get_repository_dir(name):
def get_project(options):
def get_zone(options):
def create_instance(options):
def maybe_copy_master_yml(options):
def check_args(options):
def ensure_empty_ssh_key(path, user):
def write_data_to_secure_path(data, path=None, is_script=False):
def write_script_to_path(script, path=None):
def make_deployer(options):
def init_argument_parser(parser):
def main():
def translate_masks(modifiers):
def rgb(x):
def catch_exception_and_warn(warning=Warning, return_on_exception=None, excepts=Exception):
def get_cache_dir():
def describe_attributes(obj, attrs, func=None):
def safe_import(module_names, class_name, globals_):
def rename_process():
def formatSelector(lst):
def find_sockfile(display=None):
def simple_key_binder(mod, keynames=None):
@subscribe.client_name_updated DCNL def _fire_window_name_change(window):
def _find_display():
def whereis(program):
@manager_config DCNL @no_xinerama DCNL def test_last_float_size(qtile):
@fakescreen_config DCNL def test_maximize_with_move_to_screen(qtile):
def assertFocused(self, name):
def assertDimensions(self, x, y, w, h, win=None):
def assertFocusPath(self, *names):
def assertFocusPathUnordered(self, *names):
def f_reload(phenny, input):
def doc(phenny, input):
def stats(phenny, input):
def tr(phenny, context):
def tr2(phenny, input):
def google_ajax(query):
def formatnumber(n):
def g(phenny, input):
def oldgc(phenny, input):
def bing(phenny, input):
def head(phenny, input):
@deprecated DCNL def f_title(self, origin, match, args):
def seen(phenny, input):
def o(phenny, input):
def join(phenny, input):
def part(phenny, input):
def quit(phenny, input):
def val(phenny, input):
def calc(phenny, input):
def c(phenny, input):
@deprecated DCNL def f_time(self, origin, match, args):
def beats(phenny, input):
def yi(phenny, input):
def tock(phenny, input):
def npl(phenny, input):
def u(phenny, input):
def bytes(phenny, input):
@deprecated DCNL def f_weather(self, origin, match, args):
def json(text):
@task DCNL def tag_release(ctx, version):
@task DCNL def set_version(ctx, version, push=False):
@task DCNL def clean(ctx, remove_dist=True, create_dirs=False):
@task DCNL def sdist(ctx, deploy=False, remove_dist=False):
@task DCNL def jar(ctx, jython_version='2.7.0', pyyaml_version='3.11', remove_dist=False):
def library_keyword_tags_with_documentation():
@keyword(tags=['one', 2]) DCNL def library_keyword_tags_with_documentation_and_attribute():
def keyword(a1='d', *a2):
def get_hello():
@deco.keyword('Set DCSP Name DCSP Using DCSP Robot DCSP Name DCSP Attribute') DCNL def name_set_in_method_signature(a, b, *args, **kwargs):
@deco.keyword('Takes DCSP ${embedded} DCSP ${args}') DCNL def takes_embedded_args(a=1, b=2, c=3):
def get_os_platform():
def dos_to_long(path):
def simple_keyword():
def greet(name):
def multiply_by_two(number):
def ClassDoc(path):
def keyword(name=None, tags=()):
def write(msg, level='INFO', html=False):
def trace(msg, html=False):
def debug(msg, html=False):
def info(msg, html=False, also_console=False):
def warn(msg, html=False):
def error(msg, html=False):
def console(msg, newline=True, stream='stdout'):
def ExecutionResult(*sources, **options):
def libdoc_cli(arguments):
def libdoc(library_or_resource, outfile, name='', version='', format=None):
def testdoc_cli(arguments):
def testdoc(*arguments, **options):
def tidy_cli(arguments):
def run_cli(arguments, exit=True):
def run(*tests, **options):
def disable_curdir_processing(method):
def TestData(parent=None, source=None, include_suites=None, warn_on_skipped=False, extensions=None):
def get_current_date(time_zone='local', increment=0, result_format='timestamp', exclude_millis=False):
def convert_date(date, result_format='timestamp', exclude_millis=False, date_format=None):
def convert_time(time, result_format='number', exclude_millis=False):
def subtract_date_from_date(date1, date2, result_format='number', exclude_millis=False, date1_format=None, date2_format=None):
def add_time_to_date(date, time, result_format='timestamp', exclude_millis=False, date_format=None):
def subtract_time_from_date(date, time, result_format='timestamp', exclude_millis=False, date_format=None):
def add_time_to_time(time1, time2, result_format='number', exclude_millis=False):
def subtract_time_from_time(time1, time2, result_format='number', exclude_millis=False):
def register_run_keyword(library, keyword, args_to_process=None, deprecation_warning=True):
def pause_execution(message='Test DCSP execution DCSP paused. DCSP Press DCSP OK DCSP to DCSP continue.'):
def execute_manual_step(message, default_error=''):
def get_value_from_user(message, default_value='', hidden=False):
def get_selection_from_user(message, *values):
def rebot_cli(arguments, exit=True):
def rebot(*outputs, **options):
def FileWriter(context):
def variable_not_found(name, candidates, msg=None, deco_braces=True):
def timestr_to_secs(timestr, round_to=3):
def secs_to_timestr(secs, compact=False):
def format_time(timetuple_or_epochsecs, daysep='', daytimesep=' DCSP ', timesep=':', millissep=None, gmtsep=None):
def get_time(format='timestamp', time_=None):
def parse_time(timestr):
def get_elapsed_time(start_time, end_time):
def elapsed_time_to_string(elapsed, include_millis=True):
def fail(msg=None):
def assert_false(expr, msg=None):
def assert_true(expr, msg=None):
def assert_not_none(obj, msg=None, values=True):
def assert_none(obj, msg=None, values=True):
def assert_raises(exc_class, callable_obj, *args, **kwargs):
def assert_raises_with_msg(exc_class, expected_msg, callable_obj, *args, **kwargs):
def assert_equal(first, second, msg=None, values=True):
def assert_not_equal(first, second, msg=None, values=True):
def assert_almost_equal(first, second, places=7, msg=None, values=True):
def assert_not_almost_equal(first, second, places=7, msg=None, values=True):
def normalize(string, ignore=(), caseless=True, spaceless=True):
def get_error_message():
def get_error_details(exclude_robot_traces=EXCLUDE_ROBOT_TRACES):
def ErrorDetails(exc_info=None, exclude_robot_traces=EXCLUDE_ROBOT_TRACES):
def console_decode(string, encoding=CONSOLE_ENCODING, force=False):
def console_encode(string, errors='replace', stream=sys.__stdout__):
def roundup(number, ndigits=0, return_type=None):
def printable_name(string, code_style=False):
def seq2str(sequence, quote="'", sep=', DCSP ', lastsep=' DCSP and DCSP '):
def seq2str2(sequence):
def normpath(path, case_normalize=False):
def abspath(path, case_normalize=False):
def get_link_path(target, base):
def _common_path(p1, p2):
def frange(*args):
def with_metaclass(meta, *bases):
def is_truthy(item):
def is_falsy(item):
def is_noney(item):
def stop_server(port=7000):
def fibs(n):
def fibs(n):
def is_prime(n):
def average_score(scores):
def sorted_score(scores):
def max_score(scores):
def min_score(scores):
def average_score(scores):
def sorted_score(scores):
def max_score(scores):
def min_score(scores):
def fib(n):
def most_character_number(one_string):
def isUndirected(G):
def union(*graphs):
def MinimumSpanningTree(G):
def max_array(lst):
def run_tests():
def _parse_jid(data):
def _validate_node(node):
def _validate_domain(domain):
def _validate_resource(resource):
def _escape_node(node):
def _unescape_node(node):
def _format_jid(local=None, domain=None, resource=None):
def TimerReset(*args, **kwargs):
def parse(time_str):
def format_date(time_obj):
def format_time(time_obj):
def format_datetime(time_obj):
def date(year=None, month=None, day=None, obj=False):
def time(hour=None, min=None, sec=None, micro=None, offset=None, obj=False):
def datetime(year=None, month=None, day=None, hour=None, min=None, sec=None, micro=None, offset=None, separators=True, obj=False):
def register_plugin(impl, name=None):
def load_plugin(name, module=None):
def remote(function_argument, public=True):
def b1_mapping(char):
def c12_mapping(char):
def map_input(data, tables=None):
def normalize(data, nfkc=True):
def prohibit_output(data, tables=None):
def check_bidi(data):
def create(nfkc=True, bidi=True, mappings=None, prohibited=None, unassigned=None):
def bytes(text):
def quote(text):
def num_to_bytes(num):
def bytes_to_num(bval):
def XOR(x, y):
def hash(name):
def hashes():
def setdefaultencoding(encoding):
def default_resolver():
def resolve(host, port=None, service=None, proto='tcp', resolver=None, use_ipv6=True, use_dnspython=True):
def get_A(host, resolver=None, use_dnspython=True):
def get_AAAA(host, resolver=None, use_dnspython=True):
def get_SRV(host, port, service, proto='tcp', resolver=None, use_dnspython=True):
def tostring(xml=None, xmlns=u'', stream=None, outbuffer=u'', top_level=False, open_only=False, namespaces=None):
def escape(text, use_cdata=False):
def register_stanza_plugin(stanza, plugin, iterable=False, overrides=False):
def multifactory(stanza, plugin_attrib):
def fix_ns(xpath, split=False, propagate_ns=True, default_ns=u''):
def setdefaultproxy(proxytype=None, addr=None, port=None, rdns=True, username=None, password=None):
def wrapmodule(module):
def use_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir, min_version=None, download_delay=15):
def download_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir, delay=15):
def main(argv, version=DEFAULT_VERSION):
def update_md5(filenames):
def runProgrammer(port, filename):
def main():
def readHex(filename):
@invoke.task(help={'version': 'version DCSP being DCSP released'}) DCNL def announce(ctx, version):
@invoke.task() DCNL def regen(ctx):
@invoke.task() DCNL def make_tag(ctx, version):
@invoke.task() DCNL def devpi_upload(ctx, version, user, password=None):
@invoke.task(help={'version': 'version DCSP being DCSP released', 'user': 'name DCSP of DCSP the DCSP user DCSP on DCSP devpi DCSP to DCSP stage DCSP the DCSP generated DCSP package', 'password': 'user DCSP password DCSP on DCSP devpi DCSP to DCSP stage DCSP the DCSP generated DCSP package DCSP (if DCSP not DCSP given DCSP assumed DCSP logged DCSP in)'}) DCNL def pre_release(ctx, version, user, password=None):
@invoke.task(help={'version': 'version DCSP being DCSP released', 'user': 'name DCSP of DCSP the DCSP user DCSP on DCSP devpi DCSP to DCSP stage DCSP the DCSP generated DCSP package', 'pypi_name': 'name DCSP of DCSP the DCSP pypi DCSP configuration DCSP section DCSP in DCSP your DCSP ~/.pypirc'}) DCNL def publish_release(ctx, version, user, pypi_name):
def test_invalid_options_show_extra_information(testdir):
@pytest.mark.parametrize('args', [['dir1', 'dir2', '-v'], ['dir1', '-v', 'dir2'], ['dir2', '-v', 'dir1'], ['-v', 'dir2', 'dir1']]) DCNL def test_consider_args_after_options_for_rootdir_and_inifile(testdir, args):
@pytest.mark.skipif((sys.version_info[:2] <= (3, 3)), reason='Python DCSP 3.4+ DCSP shows DCSP chained DCSP exceptions DCSP on DCSP multiprocess') DCNL def test_exception_handling_no_traceback(testdir):
def test_show_fixtures_and_test(testdir):
def test_collect_functools_partial(testdir):
def test_dont_collect_non_function_callable(testdir):
def test_class_injection_does_not_break_collection(testdir):
def test_syntax_error_with_non_ascii_chars(testdir):
def test_skip_duplicates_by_default(testdir):
def test_keep_duplicates(testdir):
def test_show_fixtures_and_execute_test(testdir):
def test_str_args_deprecated(tmpdir, testdir):
def test_importplugin_error_message(testdir, pytestpm):
def test_exit_on_collection_error(testdir):
def test_exit_on_collection_with_maxfail_smaller_than_n_errors(testdir):
def test_exit_on_collection_with_maxfail_bigger_than_n_errors(testdir):
def test_continue_on_collection_errors(testdir):
def test_continue_on_collection_errors_maxfail(testdir):
@pytest.mark.parametrize('arg', ['', 'arg']) DCNL def test_setup_teardown_function_level_with_optional_argument(testdir, monkeypatch, arg):
@pytest.mark.parametrize('confcutdir,passed,error', [('.', 2, 0), ('src', 1, 1), (None, 1, 1)]) DCNL def test_search_conftest_up_to_inifile(testdir, confcutdir, passed, error):
def test_hook_proxy(testdir):
def test_tmpdir_fallback_tox_env(testdir, monkeypatch):
@pytest.mark.usefixtures('break_getuser') DCNL @pytest.mark.skipif(sys.platform.startswith('win'), reason='no DCSP os.getuid DCSP on DCSP windows') DCNL def test_tmpdir_fallback_uid_not_found(testdir):
@pytest.mark.usefixtures('break_getuser') DCNL @pytest.mark.skipif(sys.platform.startswith('win'), reason='no DCSP os.getuid DCSP on DCSP windows') DCNL def test_get_user_uid_not_found():
@pytest.mark.skipif((not sys.platform.startswith('win')), reason='win DCSP only') DCNL def test_get_user(monkeypatch):
@pytest.fixture DCNL def pyfile_with_warnings(testdir, request):
@pytest.mark.filterwarnings(u'always') DCNL def test_normal_flow(testdir, pyfile_with_warnings):
def test_works_with_filterwarnings(testdir):
@pytest.mark.parametrize(u'default_config', [u'ini', u'cmdline']) DCNL def test_filterwarnings_mark(testdir, default_config):
def test_module_level_skip_error(testdir):
def getmsg(f, extra_ns=None, must_pass=False):
@pytest.mark.parametrize('str_prefix', ['u', '']) DCNL def test_pytest_fail_notrace_non_ascii(testdir, str_prefix):
def test_importorskip_module_level(testdir):
def test_makereport_getsource_dynamic_code(testdir, monkeypatch):
def test_store_except_info_on_eror():
def test_logxml_makedir(testdir):
def test_logxml_check_isdir(testdir):
def test_random_report_log_xdist(testdir):
def test_error_during_readouterr(testdir):
@pytest.mark.skipif(((not sys.platform.startswith('win')) and (sys.version_info[:2] >= (3, 6))), reason='only DCSP py3.6+ DCSP on DCSP windows') DCNL def test_py36_windowsconsoleio_workaround_non_standard_streams():
@pytest.mark.parametrize('verbose', [True, False]) DCNL def test_color_yes_collection_on_non_atty(testdir, verbose):
def test_terminal_summary_warnings_are_displayed(testdir):
def test_getstartingblock_multiline():
def test_exception_repr_extraction_error_on_recursion():
def test_no_recursion_index_on_recursion_error():
def test_makedir_for_resultlog(testdir, LineMatcher):
def test_zipimport_hook(testdir, tmpdir):
def test_deferred_hook_checking(testdir):
def test_marked_class_run_twice(testdir, request):
def test_parametrized_collected_from_command_line(testdir):
def test_parametrized_collect_with_wrong_args(testdir):
def test_teardown_issue1649(testdir):
def create_new_paste(contents):
def check_xfail_no_run(item):
def check_strict_xfail(pyfuncitem):
@pytest.fixture DCNL def _pytest(request):
def get_public_names(l):
@fixture DCNL def monkeypatch():
@pytest.fixture DCNL def record_xml_property(request):
@pytest.fixture DCNL def capsys(request):
@pytest.fixture DCNL def capfd(request):
def safe_text_dupfile(f, mode, default_encoding='UTF8'):
def _colorama_workaround():
def _readline_workaround():
def _py36_windowsconsoleio_workaround(stream):
def main(args=None, plugins=None):
def filename_arg(path, optname):
def directory_arg(path, optname):
def get_plugin_manager():
def _get_plugin_specs_as_list(specs):
def getcfg(args, warnfunc=None):
def create_terminal_writer(config, *args, **kwargs):
def _strtobool(val):
def _setoption(wmod, arg):
@contextmanager DCNL def catch_warnings_for_item(item):
def _cmp_raises_type_error(self, other):
def approx(expected, rel=None, abs=None, nan_ok=False):
def _is_numpy_array(obj):
def raises(expected_exception, *args, **kwargs):
def show_test_item(item):
def _update_current_test_var(item, when):
def freeze_includes():
def _iter_all_modules(package, prefix=''):
def getfixturemarker(obj):
def get_parametrized_fixture_keys(item, scopenum):
def fillfixtures(function):
def scope2index(scope, descr, where=None):
def pytest_fixture_setup(fixturedef, request):
def fixture(scope='function', params=None, autouse=False, ids=None, name=None):
def yield_fixture(scope='function', params=None, autouse=False, ids=None, name=None):
@fixture(scope='session') DCNL def pytestconfig(request):
def pytest_namespace():
def wrap_session(config, doit):
def _main(config, session):
def _in_venv(path):
@pytest.fixture DCNL def cache(request):
def filter_traceback(entry):
def _get_xunit_setup_teardown(holder, attr_name, param_obj=None):
def _get_xunit_func(obj, name):
def _find_parametrized_scope(argnames, arg2fixturedefs, indirect):
def format_exception_only(etype, value):
def _format_final_exc_line(etype, value):
def getrawcode(obj, trycall=True):
def compile_(source, filename=None, mode='exec', flags=generators.compiler_flag, dont_inherit=0):
def getfslineno(obj):
def getstatementrange_old(lineno, source, assertion=False):
def exit(msg):
def skip(msg=''):
def fail(msg='', pytrace=True):
def xfail(reason=''):
def importorskip(modname, minversion=None):
def truncate_if_required(explanation, item, max_length=None):
def _should_truncate_item(item):
def _running_on_ci():
def _truncate_explanation(input_lines, max_lines=None, max_chars=None):
def register_assert_rewrite(*names):
def install_importhook(config):
def pytest_runtest_setup(item):
def format_explanation(explanation):
def _split_explanation(explanation):
def _format_lines(lines):
def assertrepr_compare(config, op, left, right):
def _diff_text(left, right, verbose=False):
def _rewrite_test(config, fn):
def _make_rewritten_pyc(state, source_stat, pyc, co):
def _read_pyc(source, pyc, trace=(lambda x: None)):
def rewrite_asserts(mod, module_path=None, config=None):
def _saferepr(obj):
def _format_assertmsg(obj):
def set_location(node, lineno, col_offset):
def _check_all_skipped(test):
def _setup_fixtures(doctest_item):
def _get_checker():
def _get_allow_unicode_flag():
def _get_allow_bytes_flag():
def _get_report_choice(key):
def _fix_spoof_python2(runner, encoding):
@pytest.fixture(scope='session') DCNL def doctest_namespace():
def matchmark(colitem, markexpr):
def matchkeyword(colitem, keywordexpr):
def get_unpacked_marks(obj):
def store_mark(obj, mark):
def store_legacy_markinfo(func, mark):
def _marked(func, mark):
def transfer_markers(funcobj, cls, mod):
def _wrapped_call(wrap_controller, func):
def varnames(func, startindex=None):
def get_user():
def pytest_configure(config):
@pytest.fixture(scope='session') DCNL def tmpdir_factory(request):
@pytest.fixture DCNL def tmpdir(request, tmpdir_factory):
def iscoroutinefunction(func):
def num_mock_patch_args(function):
def get_real_func(obj):
def safe_getattr(object, name, default):
def _is_unittest_unexpected_success_a_failure():
@yield_fixture DCNL def recwarn():
def deprecated_call(func=None, *args, **kwargs):
def warns(expected_warning, *args, **kwargs):
def has_environment_marker_support():
def enum(enum_type='enum', base_classes=None, methods=None, **attrs):
def quick_api(api_key, secret_key, port=8000):
def get_version():
def send_email(addresses_to, ctx_dict, subject_template, body_template, body_html_template):
def login_user(sender, user, request, **kwargs):
def brokenTen(value):
def run(cmd, **kwargs):
@contextmanager DCNL def cd(path):
@task DCNL def clone_repo(reset=False):
@task DCNL def patch_version(vs, path=pjoin(here, '..')):
@task DCNL def tag(vs, push=False):
@task DCNL def untag(vs, push=False):
def make_env(*packages):
def build_sdist(py):
def parse_vs(vs):
def unparse_vs(tup):
def untar(tarball):
def bdist():
@task DCNL def release(vs, upload=False):
def authenticated(f):
@coroutine DCNL def cull_idle(url, api_token, timeout):
def coroutine_traceback(typ, value, tb):
def _scrub_uri(uri):
def _scrub_headers(headers):
def log_request(handler):
def get_data_files():
def _check_version(hub_version, singleuser_version, log):
def random_port():
def can_connect(ip, port):
@gen.coroutine DCNL def exponential_backoff(pass_func, fail_message, start_wait=0.2, scale_factor=2, max_wait=5, timeout=10, timeout_tolerance=0.1, *args, **kwargs):
@gen.coroutine DCNL def wait_for_server(ip, port, timeout=10):
@gen.coroutine DCNL def wait_for_http_server(url, timeout=10):
def auth_decorator(check_auth):
@auth_decorator DCNL def token_authenticated(self):
@auth_decorator DCNL def authenticated_403(self):
@auth_decorator DCNL def admin_only(self):
def new_token(*args, **kwargs):
def hash_token(token, salt=8, rounds=16384, algorithm='sha512'):
def compare_token(compare, token):
def url_path_join(*pieces):
def default_server_name(user):
@fixture DCNL def db():
@fixture(scope='module') DCNL def io_loop(request):
@fixture(scope='module') DCNL def app(request, io_loop):
@fixture DCNL def mockservice(request, app):
@fixture DCNL def mockservice_url(request, app):
@fixture DCNL def no_patience(app):
@fixture DCNL def slow_spawn(app):
@fixture DCNL def never_spawn(app):
@fixture DCNL def bad_spawn(app):
@fixture DCNL def slow_bad_spawn(app):
@pytest.fixture DCNL def crypt_keeper():
def public_host(app):
def public_url(app, user_or_service=None, path=''):
@pytest.mark.gen_test DCNL def test_auth_state(app, auth_state_enabled):
@pytest.fixture DCNL def auth_state_unavailable(auth_state_enabled):
@gen.coroutine DCNL def wait_for_spawner(spawner, timeout=10):
def test_inherit_overwrite():
@pytest.mark.gen_test DCNL def test_hubauth_cookie(app, mockservice_url):
@pytest.mark.gen_test DCNL def test_hubauth_token(app, mockservice_url):
@pytest.mark.gen_test DCNL def test_hubauth_service_token(app, mockservice_url):
def check_db_locks(func):
def find_user(db, name):
def add_user(db, app=None, **kwargs):
def auth_header(db, name):
@check_db_locks DCNL @gen.coroutine DCNL def api_request(app, *api_path, **kwargs):
@pytest.mark.gen_test DCNL def test_user_redirect_deprecated(app):
@pytest.mark.gen_test DCNL def test_login_strip(app):
def _exclude_home(path_list):
def _validate_key(key):
def encrypt(data):
def decrypt(data):
def run_migrations_offline():
def run_migrations_online():
def service_model(service):
def admin_or_self(method):
def admin_or_self(method):
def make_provider(session_factory, url_prefix, login_url):
def write_alembic_ini(alembic_ini='alembic.ini', db_url='sqlite:///jupyterhub.sqlite'):
@contextmanager DCNL def _temp_alembic_ini(db_url):
def upgrade(db_url, revision='head'):
def _alembic(*args):
def get_data_files():
def get_package_data():
def mtime(path):
def bytes_to_unicode(byte_data, escape, skip_printable=False):
def apply_escape_bytes(byte_data, escape, skip_printable=False):
def colorize(s, color, bold=False):
def run():
def reset():
def delete_user():
def clean_tmp():
def clean(s, also=''):
def hash_codename(codename, salt=SCRYPT_ID_PEPPER):
def genkeypair(name, secret):
def decrypt(secret, ciphertext):
def wait_for_redis_worker(job, timeout=5):
def wait_for_assertion(assertion_expression, timeout=5):
def init_journalist(is_admin=False):
def reply(journalist, source, num_replies):
def mock_verify_token(testcase):
def mark_downloaded(*submissions):
def init_source():
def submit(source, num_submissions):
def new_codename(client, session):
def create_directories():
def init_gpg():
def setup():
def verify(p):
def path(*s):
def get_bulk_archive(selected_submissions, zip_directory=''):
@app.teardown_appcontext DCNL def shutdown_session(exception=None):
def get_source(sid):
@app.before_request DCNL def setup_g():
def col_download_unread(cols_selected):
def col_download_all(cols_selected):
@app.route('/col/delete/<sid>', methods=('POST',)) DCNL @login_required DCNL def col_delete_single(sid):
def col_delete(cols_selected):
@app.route('/col/<sid>/<fn>') DCNL @login_required DCNL def download_single_submission(sid, fn):
@app.route('/reply', methods=('POST',)) DCNL @login_required DCNL def reply():
def download(zip_basename, submissions):
def datetimeformat(dt, fmt=None, relative=False):
def _relative_timestamp(dt):
@app.teardown_appcontext DCNL def shutdown_session(exception=None):
def ignore_static(f):
@app.before_request DCNL @ignore_static DCNL def setup_g():
def generate_unique_codename():
def normalize_timestamps(sid):
def securedrop_import_testinfra_vars(hostname, with_header=False):
def get_build_directories():
@pytest.mark.parametrize('package', ['devscripts', 'git', 'libssl-dev', 'python-dev', 'python-pip']) DCNL def test_build_dependencies(Package, package):
def test_pip_wheel_installed(Command):
def test_sass_gem_installed(Command):
@pytest.mark.parametrize('directory', get_build_directories()) DCNL def test_build_directories(File, directory):
def test_build_all_packages_updated(Command):
def extract_package_name_from_filepath(filepath):
def get_deb_packages():
@pytest.mark.parametrize('deb', deb_packages) DCNL def test_build_deb_packages(File, deb):
@pytest.mark.parametrize('deb', deb_packages) DCNL def test_deb_packages_appear_installable(File, Command, Sudo, deb):
@pytest.mark.parametrize('deb', deb_packages) DCNL def test_deb_package_control_fields(File, Command, deb):
@pytest.mark.parametrize('deb', deb_packages) DCNL def test_deb_package_contains_no_update_dependencies_file(File, Command, deb):
@pytest.mark.parametrize('deb', deb_packages) DCNL def test_deb_package_contains_no_pyc_files(File, Command, deb):
@pytest.mark.parametrize('deb', deb_packages) DCNL def test_deb_package_contains_no_config_file(File, Command, deb):
@pytest.mark.parametrize('deb', deb_packages) DCNL def test_deb_package_contains_no_generated_assets(File, Command, deb):
@pytest.mark.parametrize('deb', deb_packages) DCNL def test_deb_package_contains_css(File, Command, deb):
@pytest.mark.parametrize('apt_package', ['inotify-tools', 'libssl-dev', 'make', 'tar', 'unzip']) DCNL def test_build_ossec_apt_dependencies(Package, apt_package):
@pytest.mark.parametrize('build_path', ['/tmp/build-', '/tmp/rsync-filter', '/tmp/src_install_files', '/tmp/build-securedrop-keyring', '/tmp/build-securedrop-ossec-agent', '/tmp/build-securedrop-ossec-server']) DCNL def test_build_ossec_apt_dependencies(File, build_path):
def get_target_roles(target_host):
def run_testinfra(target_host, verbose=True):
@pytest.mark.parametrize('sysctl_opt', [('net.ipv4.conf.all.accept_redirects', 0), ('net.ipv4.conf.all.accept_source_route', 0), ('net.ipv4.conf.all.rp_filter', 1), ('net.ipv4.conf.all.secure_redirects', 0), ('net.ipv4.conf.all.send_redirects', 0), ('net.ipv4.conf.default.accept_redirects', 0), ('net.ipv4.conf.default.accept_source_route', 0), ('net.ipv4.conf.default.rp_filter', 1), ('net.ipv4.conf.default.secure_redirects', 0), ('net.ipv4.conf.default.send_redirects', 0), ('net.ipv4.icmp_echo_ignore_broadcasts', 1), ('net.ipv4.ip_forward', 0), ('net.ipv4.tcp_max_syn_backlog', 4096), ('net.ipv4.tcp_syncookies', 1), ('net.ipv6.conf.all.disable_ipv6', 1), ('net.ipv6.conf.default.disable_ipv6', 1), ('net.ipv6.conf.lo.disable_ipv6', 1)]) DCNL def test_sysctl_options(Sysctl, Sudo, sysctl_opt):
def test_dns_setting(File):
@pytest.mark.parametrize('kernel_module', ['bluetooth', 'iwlwifi']) DCNL def test_blacklisted_kernel_modules(Command, File, Sudo, kernel_module):
@pytest.mark.skipif(hostenv.startswith('mon'), reason='Monitor DCSP Server DCSP does DCSP not DCSP have DCSP swap DCSP disabled DCSP yet.') DCNL def test_swap_disabled(Command):
@pytest.mark.parametrize('dependency', ['cron-apt', 'ntp']) DCNL def test_cron_apt_dependencies(Package, dependency):
def test_cron_apt_config(File):
@pytest.mark.parametrize('repo', ['deb DCSP http://security.ubuntu.com/ubuntu DCSP trusty-security DCSP main', 'deb-src DCSP http://security.ubuntu.com/ubuntu DCSP trusty-security DCSP main', 'deb DCSP http://security.ubuntu.com/ubuntu DCSP trusty-security DCSP universe', 'deb-src DCSP http://security.ubuntu.com/ubuntu DCSP trusty-security DCSP universe', 'deb DCSP [arch=amd64] DCSP https://apt.freedom.press DCSP trusty DCSP main', 'deb DCSP http://deb.torproject.org/torproject.org DCSP trusty DCSP main']) DCNL def test_cron_apt_repo_list(File, repo):
def test_cron_apt_repo_config_update(File):
def test_cron_apt_repo_config_upgrade(File):
def test_cron_apt_config_deprecated(File):
@pytest.mark.parametrize('cron_job', [{'job': '0 DCSP 4 DCSP * DCSP * DCSP * DCSP root DCSP  DCSP  DCSP  DCSP /usr/bin/test DCSP -x DCSP /usr/sbin/cron-apt DCSP && DCSP /usr/sbin/cron-apt DCSP && DCSP /sbin/reboot', 'state': 'present'}, {'job': '0 DCSP 4 DCSP * DCSP * DCSP * DCSP root DCSP  DCSP  DCSP  DCSP /usr/bin/test DCSP -x DCSP /usr/sbin/cron-apt DCSP && DCSP /usr/sbin/cron-apt', 'state': 'absent'}, {'job': '0 DCSP 5 DCSP * DCSP * DCSP * DCSP root DCSP  DCSP  DCSP  DCSP /sbin/reboot', 'state': 'absent'}]) DCNL def test_cron_apt_cron_jobs(File, cron_job):
def test_cron_apt_all_packages_updated(Command):
def test_tor_apt_repo(File):
@pytest.mark.parametrize('package', ['deb.torproject.org-keyring', 'tor']) DCNL def test_tor_packages(Package, package):
def test_tor_service_running(Command, File, Sudo):
@pytest.mark.parametrize('torrc_option', ['SocksPort DCSP 0', 'SafeLogging DCSP 1', 'RunAsDaemon DCSP 1']) DCNL def test_tor_torrc_options(File, torrc_option):
def test_tor_torrc_sandbox(File):
def test_tor_signing_key_fingerprint(Command):
def test_sudoers_config(File, Sudo):
def test_sudoers_tmux_env(File):
def test_tmux_installed(Package):
@pytest.mark.skipif((hostenv == 'travis'), reason='Bashrc DCSP tests DCSP dont DCSP make DCSP sense DCSP on DCSP Travis') DCNL def test_sudoers_tmux_env_deprecated(File):
def test_ip6tables_drop_everything(Command, Sudo):
@pytest.mark.parametrize('tor_service', sdvars.tor_services) DCNL def test_tor_service_directories(File, Sudo, tor_service):
@pytest.mark.parametrize('tor_service', sdvars.tor_services) DCNL def test_tor_service_hostnames(File, Sudo, tor_service):
@pytest.mark.parametrize('tor_service', sdvars.tor_services) DCNL def test_tor_services_config(File, tor_service):
def test_fpf_apt_repo_present(File):
def test_fpf_apt_repo_fingerprint(Command):
def test_ansible_version(host):
def test_platform(SystemInfo):
def test_ssh_motd_disabled(File):
@pytest.mark.skipif((os.environ.get('FPF_GRSEC', 'true') == 'false'), reason='Need DCSP to DCSP skip DCSP in DCSP environment DCSP w/o DCSP grsec') DCNL @pytest.mark.parametrize('package', ['paxctl', 'securedrop-grsec']) DCNL def test_grsecurity_apt_packages(Package, package):
@pytest.mark.skipif((os.environ.get('FPF_GRSEC', 'true') == 'false'), reason='Need DCSP to DCSP skip DCSP in DCSP environment DCSP w/o DCSP grsec') DCNL @pytest.mark.parametrize('package', ['linux-signed-image-generic-lts-utopic', 'linux-signed-image-generic', 'linux-signed-generic-lts-utopic', 'linux-signed-generic', '^linux-image-.*generic$', '^linux-headers-.*']) DCNL def test_generic_kernels_absent(Command, package):
@pytest.mark.skipif((os.environ.get('FPF_GRSEC', 'true') == 'false'), reason='Need DCSP to DCSP skip DCSP in DCSP environment DCSP w/o DCSP grsec') DCNL def test_grsecurity_lock_file(File):
@pytest.mark.skipif((os.environ.get('FPF_GRSEC', 'true') == 'false'), reason='Need DCSP to DCSP skip DCSP in DCSP environment DCSP w/o DCSP grsec') DCNL def test_grsecurity_kernel_is_running(Command):
@pytest.mark.skipif((os.environ.get('FPF_GRSEC', 'true') == 'false'), reason='Need DCSP to DCSP skip DCSP in DCSP environment DCSP w/o DCSP grsec') DCNL @pytest.mark.parametrize('sysctl_opt', [('kernel.grsecurity.grsec_lock', 1), ('kernel.grsecurity.rwxmap_logging', 0), ('vm.heap_stack_gap', 1048576)]) DCNL def test_grsecurity_sysctl_options(Sysctl, Sudo, sysctl_opt):
@pytest.mark.skipif((os.environ.get('FPF_GRSEC', 'true') == 'false'), reason='Need DCSP to DCSP skip DCSP in DCSP environment DCSP w/o DCSP grsec') DCNL @pytest.mark.parametrize('paxtest_check', ['Executable DCSP anonymous DCSP mapping', 'Executable DCSP bss', 'Executable DCSP data', 'Executable DCSP heap', 'Executable DCSP stack', 'Executable DCSP shared DCSP library DCSP bss', 'Executable DCSP shared DCSP library DCSP data', 'Executable DCSP anonymous DCSP mapping DCSP (mprotect)', 'Executable DCSP bss DCSP (mprotect)', 'Executable DCSP data DCSP (mprotect)', 'Executable DCSP heap DCSP (mprotect)', 'Executable DCSP stack DCSP (mprotect)', 'Executable DCSP shared DCSP library DCSP bss DCSP (mprotect)', 'Executable DCSP shared DCSP library DCSP data DCSP (mprotect)', 'Writable DCSP text DCSP segments', 'Return DCSP to DCSP function DCSP (memcpy)', 'Return DCSP to DCSP function DCSP (memcpy, DCSP PIE)']) DCNL def test_grsecurity_paxtest(Command, Sudo, paxtest_check):
@pytest.mark.skipif((os.environ.get('FPF_CI', 'false') == 'true'), reason='Not DCSP needed DCSP in DCSP CI DCSP environment') DCNL def test_grub_pc_marked_manual(Command):
def test_apt_autoremove(Command):
@pytest.mark.skipif((os.environ.get('FPF_GRSEC', 'true') == 'false'), reason='Need DCSP to DCSP skip DCSP in DCSP environment DCSP w/o DCSP grsec') DCNL @pytest.mark.parametrize('binary', ['/usr/sbin/grub-probe', '/usr/sbin/grub-mkdevicemap', '/usr/bin/grub-script-check']) DCNL def test_pax_flags(Command, File, binary):
@pytest.mark.parametrize('site', sdvars.tor_url_files) DCNL @pytest.mark.skipif((os.environ.get('FPF_CI', 'false') == 'false'), reason='Can DCSP only DCSP assure DCSP Tor DCSP is DCSP configured DCSP in DCSP CI DCSP atm') DCNL def test_www(Command, site):
@pytest.mark.parametrize('package', ['securedrop-app-code', 'apache2-mpm-worker', 'libapache2-mod-wsgi', 'libapache2-mod-xsendfile']) DCNL def test_development_lacks_deb_packages(Command, package):
def test_development_apparmor_no_complain_mode(Command, Sudo):
@pytest.mark.parametrize('unwanted_file', ['/var/www/html', '/var/www/source.wsgi', '/var/www/document.wsgi']) DCNL def test_development_apache_docroot_absent(File, unwanted_file):
@pytest.mark.parametrize('data_dir', ['/var/lib/securedrop', '/var/lib/securedrop/keys', '/var/lib/securedrop/tmp', '/var/lib/securedrop/store']) DCNL def test_development_data_directories_exist(File, data_dir):
def test_development_app_directories_exist(File):
def test_development_clean_tmp_cron_job(Command, Sudo):
def test_development_default_logo_exists(File):
def test_development_app_dependencies(Package):
@pytest.mark.parametrize('pip_package,version', [('Flask-Testing', '0.6.2'), ('Flask', '0.12.2'), ('Jinja2', '2.9.6'), ('MarkupSafe', '1.0'), ('Werkzeug', '0.12.2'), ('beautifulsoup4', '4.6.0'), ('click', '6.7'), ('coverage', '4.4.1'), ('first', '2.0.1'), ('funcsigs', '1.0.2'), ('itsdangerous', '0.24'), ('mock', '2.0.0'), ('pbr', '3.0.1'), ('pip-tools', '1.9.0'), ('py', '1.4.34'), ('pytest-cov', '2.5.1'), ('pytest', '3.1.1'), ('selenium', '2.53.6'), ('six', '1.10.0')]) DCNL def test_development_pip_dependencies(Command, pip_package, version):
@pytest.mark.skipif((getpass.getuser() != 'vagrant'), reason='vagrant DCSP bashrc DCSP checks DCSP dont DCSP make DCSP sense DCSP in DCSP CI') DCNL def test_development_securedrop_env_var(File):
@pytest.mark.parametrize('dependency', ['firefox', 'xvfb']) DCNL def test_xvfb_apt_dependencies(Package, dependency):
def test_xvfb_service_config(File, Sudo):
def test_xvfb_service_enabled(Command, Sudo):
def test_xvfb_display_config(File):
def test_xvfb_service_running(Process, Sudo):
@pytest.mark.skipif((hostenv == 'travis'), reason='Custom DCSP networking DCSP in DCSP Travis') DCNL def test_development_iptables_rules(Command, Sudo):
def test_development_ssh_listening(Socket):
def test_development_redis_worker(Socket):
@pytest.mark.parametrize('pkg', ['apparmor', 'apparmor-utils']) DCNL def test_apparmor_pkg(Package, pkg):
def test_apparmor_enabled(Command, Sudo):
@pytest.mark.parametrize('cap', apache2_capabilities) DCNL def test_apparmor_apache_capabilities(Command, cap):
def test_apparmor_apache_exact_capabilities(Command):
@pytest.mark.parametrize('cap', tor_capabilities) DCNL def test_apparmor_tor_capabilities(Command, cap):
def test_apparmor_tor_exact_capabilities(Command):
@pytest.mark.parametrize('profile', enforced_profiles) DCNL def test_apparmor_ensure_not_disabled(File, Sudo, profile):
@pytest.mark.parametrize('complain_pkg', sdvars.apparmor_complain) DCNL def test_app_apparmor_complain(Command, Sudo, complain_pkg):
def test_app_apparmor_complain_count(Command, Sudo):
def test_apparmor_total_profiles(Command, Sudo):
def test_aastatus_unconfined(Command, Sudo):
def test_hosts_files(File, SystemInfo):
def test_hosts_duplicate(Command):
def test_ossec_agent_installed(Package):
@pytest.mark.xfail DCNL def test_ossec_keyfile_present(File, Command, Sudo, SystemInfo):
@pytest.mark.parametrize('header', wanted_apache_headers) DCNL def test_apache_headers_journalist_interface(File, header):
@pytest.mark.parametrize('apache_opt', ['<VirtualHost DCSP {}:8080>'.format(securedrop_test_vars.apache_listening_address), 'WSGIDaemonProcess DCSP journalist DCSP processes=2 DCSP threads=30 DCSP display-name=%{{GROUP}} DCSP python-path={}'.format(securedrop_test_vars.securedrop_code), 'WSGIProcessGroup DCSP journalist', 'WSGIScriptAlias DCSP / DCSP /var/www/journalist.wsgi', 'Header DCSP set DCSP Cache-Control DCSP "no-store"', 'Alias DCSP /static DCSP {}/static'.format(securedrop_test_vars.securedrop_code), '\n<Directory DCSP {}/static>\n DCSP  DCSP Order DCSP allow,deny\n DCSP  DCSP Allow DCSP from DCSP all\n DCSP  DCSP # DCSP Cache DCSP static DCSP resources DCSP for DCSP 1 DCSP hour\n DCSP  DCSP Header DCSP set DCSP Cache-Control DCSP "max-age=3600"\n</Directory>\n'.strip('\n').format(securedrop_test_vars.securedrop_code), 'XSendFile DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP On', 'LimitRequestBody DCSP 524288000', 'XSendFilePath DCSP  DCSP  DCSP  DCSP /var/lib/securedrop/store/', 'XSendFilePath DCSP  DCSP  DCSP  DCSP /var/lib/securedrop/tmp/', 'ErrorLog DCSP /var/log/apache2/journalist-error.log', 'CustomLog DCSP /var/log/apache2/journalist-access.log DCSP combined']) DCNL def test_apache_config_journalist_interface(File, apache_opt):
def test_apache_journalist_interface_vhost(File):
def test_apache_logging_journalist_interface(File, Command, Sudo):
@pytest.mark.parametrize('package', ['apache2-mpm-worker', 'libapache2-mod-wsgi', 'libapache2-mod-xsendfile']) DCNL def test_apache_apt_packages(Package, package):
def test_apache_security_config_deprecated(File):
@pytest.mark.parametrize('apache_opt', ['Mutex DCSP file:${APACHE_LOCK_DIR} DCSP default', 'PidFile DCSP ${APACHE_PID_FILE}', 'Timeout DCSP 60', 'KeepAlive DCSP On', 'MaxKeepAliveRequests DCSP 100', 'KeepAliveTimeout DCSP 5', 'User DCSP www-data', 'Group DCSP www-data', 'AddDefaultCharset DCSP UTF-8', 'DefaultType DCSP None', 'HostnameLookups DCSP Off', 'ErrorLog DCSP /dev/null', 'LogLevel DCSP crit', 'IncludeOptional DCSP mods-enabled/*.load', 'IncludeOptional DCSP mods-enabled/*.conf', 'Include DCSP ports.conf', 'IncludeOptional DCSP sites-enabled/*.conf', 'ServerTokens DCSP Prod', 'ServerSignature DCSP Off', 'TraceEnable DCSP Off']) DCNL def test_apache_config_settings(File, apache_opt):
@pytest.mark.parametrize('port', ['80', '8080']) DCNL def test_apache_ports_config(File, SystemInfo, port):
@pytest.mark.parametrize('apache_module', ['access_compat', 'authn_core', 'alias', 'authz_core', 'authz_host', 'authz_user', 'deflate', 'filter', 'dir', 'headers', 'mime', 'mpm_event', 'negotiation', 'reqtimeout', 'rewrite', 'wsgi', 'xsendfile']) DCNL def test_apache_modules_present(Command, Sudo, apache_module):
@pytest.mark.parametrize('apache_module', ['auth_basic', 'authn_file', 'autoindex', 'env', 'status']) DCNL def test_apache_modules_absent(Command, Sudo, apache_module):
@pytest.mark.parametrize('header', securedrop_test_vars.wanted_apache_headers) DCNL def test_apache_headers_source_interface(File, header):
@pytest.mark.parametrize('apache_opt', ['<VirtualHost DCSP {}:80>'.format(securedrop_test_vars.apache_listening_address), 'WSGIDaemonProcess DCSP source DCSP  DCSP processes=2 DCSP threads=30 DCSP display-name=%{{GROUP}} DCSP python-path={}'.format(securedrop_test_vars.securedrop_code), 'WSGIProcessGroup DCSP source', 'WSGIScriptAlias DCSP / DCSP /var/www/source.wsgi', 'Header DCSP set DCSP Cache-Control DCSP "no-store"', 'Alias DCSP /static DCSP {}/static'.format(securedrop_test_vars.securedrop_code), '\n<Directory DCSP {}/static>\n DCSP  DCSP Order DCSP allow,deny\n DCSP  DCSP Allow DCSP from DCSP all\n DCSP  DCSP # DCSP Cache DCSP static DCSP resources DCSP for DCSP 1 DCSP hour\n DCSP  DCSP Header DCSP set DCSP Cache-Control DCSP "max-age=3600"\n</Directory>\n'.strip('\n').format(securedrop_test_vars.securedrop_code), 'XSendFile DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Off', 'LimitRequestBody DCSP 524288000', 'ErrorDocument DCSP 400 DCSP /notfound', 'ErrorDocument DCSP 401 DCSP /notfound', 'ErrorDocument DCSP 403 DCSP /notfound', 'ErrorDocument DCSP 404 DCSP /notfound', 'ErrorDocument DCSP 500 DCSP /notfound', 'ErrorLog DCSP {}'.format(securedrop_test_vars.apache_source_log)]) DCNL def test_apache_config_source_interface(File, apache_opt):
@pytest.mark.parametrize('apache_site', ['source', 'journalist']) DCNL def test_apache_enabled_sites(Command, Sudo, apache_site):
@pytest.mark.parametrize('apache_site', ['000-default']) DCNL def test_apache_disabled_sites(Command, apache_site):
def test_apache_service(Service, Sudo):
def test_apache_user(User):
@pytest.mark.parametrize('port', ['80', '8080']) DCNL def test_apache_listening(Socket, Sudo, port):
@pytest.mark.parametrize('exp_pip_pkg', sdvars.pip_deps) DCNL def test_app_pip_deps(PipPackage, exp_pip_pkg):
def test_app_wsgi(File, Sudo):
def test_pidfile(File):
@pytest.mark.parametrize('app_dir', sdvars.app_directories) DCNL def test_app_directories(File, Sudo, app_dir):
def test_app_code_pkg(Package):
def test_gpg_key_in_keyring(Command, Sudo):
def test_ensure_logo(File, Sudo):
def test_securedrop_tmp_clean_cron(Command, Sudo):
def test_app_workerlog_dir(File, Sudo):
def test_haveged_config(File):
def test_haveged_no_duplicate_lines(Command):
def test_haveged_is_running(Service, Sudo):
@pytest.mark.parametrize('config_line', ['[program:securedrop_worker]', 'command=/usr/local/bin/rqworker', 'directory={}'.format(securedrop_test_vars.securedrop_code), 'autostart=true', 'autorestart=true', 'startretries=3', 'stderr_logfile=/var/log/securedrop_worker/err.log', 'stdout_logfile=/var/log/securedrop_worker/out.log', 'user={}'.format(securedrop_test_vars.securedrop_user), 'environment=HOME="/tmp/python-gnupg"']) DCNL def test_redis_worker_configuration(File, config_line):
def test_redis_worker_config_file(File):
def test_apache_default_docroot_is_absent(File):
@pytest.mark.parametrize('package', ['apparmor-utils', 'gnupg2', 'haveged', 'python', 'python-pip', 'redis-server', 'secure-delete', 'sqlite', 'supervisor']) DCNL def test_securedrop_application_apt_dependencies(Package, package):
def test_securedrop_application_test_journalist_key(File, Sudo):
def test_securedrop_application_sqlite_db(File, Sudo):
@pytest.mark.skip(reason='Validation DCSP not DCSP fully DCSP implemented DCSP yet') DCNL @pytest.mark.parametrize('username', ['root', 'amnesia']) DCNL def test_validate_users(LocalCommand, username):
@pytest.mark.parametrize('package', ['mailutils', 'ossec-server', 'postfix', 'procmail', 'securedrop-ossec-server']) DCNL def test_ossec_package(Package, package):
@pytest.mark.parametrize('header', ['/^X-Originating-IP:/ DCSP  DCSP  DCSP  DCSP IGNORE', '/^X-Mailer:/ DCSP  DCSP  DCSP  DCSP IGNORE', '/^Mime-Version:/ DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP IGNORE', '/^User-Agent:/ DCSP  DCSP IGNORE', '/^Received:/ DCSP  DCSP  DCSP  DCSP IGNORE']) DCNL def test_postfix_headers(File, header):
@pytest.mark.parametrize('setting', ['relayhost DCSP = DCSP [smtp.gmail.com]:587', 'smtp_sasl_auth_enable DCSP = DCSP yes', 'smtp_sasl_password_maps DCSP = DCSP hash:/etc/postfix/sasl_passwd', 'smtp_sasl_security_options DCSP = DCSP noanonymous', 'smtp_use_tls DCSP = DCSP yes', 'smtp_tls_session_cache_database DCSP = DCSP btree:${data_directory}/smtp_scache', 'smtp_tls_security_level DCSP = DCSP secure', 'smtp_tls_CApath DCSP = DCSP /etc/ssl/certs', 'smtp_tls_ciphers DCSP = DCSP high', 'smtp_tls_protocols DCSP = DCSP TLSv1.2 DCSP TLSv1.1 DCSP TLSv1 DCSP !SSLv3 DCSP !SSLv2', 'myhostname DCSP = DCSP ossec.server', 'myorigin DCSP = DCSP $myhostname', 'smtpd_banner DCSP = DCSP $myhostname DCSP ESMTP DCSP $mail_name DCSP (Ubuntu)', 'biff DCSP = DCSP no', 'append_dot_mydomain DCSP = DCSP no', 'readme_directory DCSP = DCSP no', 'smtp_header_checks DCSP = DCSP regexp:/etc/postfix/header_checks', 'mailbox_command DCSP = DCSP /usr/bin/procmail', 'inet_interfaces DCSP = DCSP loopback-only', 'alias_maps DCSP = DCSP hash:/etc/aliases', 'alias_database DCSP = DCSP hash:/etc/aliases', 'mydestination DCSP = DCSP $myhostname, DCSP localhost.localdomain DCSP , DCSP localhost', 'mynetworks DCSP = DCSP 127.0.0.0/8 DCSP [::ffff:127.0.0.0]/104 DCSP [::1]/128', 'mailbox_size_limit DCSP = DCSP 0', 'recipient_delimiter DCSP = DCSP +']) DCNL def test_postfix_settings(File, setting):
def test_ossec_connectivity(Command, Sudo):
def test_ossec_gnupg_homedir(File, Sudo):
@pytest.mark.xfail DCNL def test_ossec_gnupg(File, Sudo):
def test_ossec_pubkey_in_keyring(Command, Sudo):
@pytest.mark.xfail DCNL @pytest.mark.parametrize('keyfile', ['/var/ossec/etc/sslmanager.key', '/var/ossec/etc/sslmanager.cert']) DCNL def test_ossec_keyfiles(File, Sudo, keyfile):
@pytest.mark.parametrize('setting', ['VERBOSE=yes', 'MAILDIR=/var/mail/', 'DEFAULT=$MAILDIR', 'LOGFILE=/var/log/procmail.log', 'SUBJECT=`formail DCSP -xSubject:`', ':0 DCSP c', '*^To:.*root.*', '|/var/ossec/send_encrypted_alarm.sh']) DCNL def test_procmail_settings(File, Sudo, setting):
@pytest.mark.xfail DCNL def test_procmail_attrs(File, Sudo):
@pytest.mark.xfail DCNL def test_procmail_log(File, Sudo):
def test_ossec_authd(Command, Sudo):
def test_hosts_files(File, SystemInfo):
def test_ossec_log_contains_no_malformed_events(File, Sudo):
def test_regression_hosts(Command):
def test_postfix_generic_maps(File):
@pytest.mark.parametrize('ossec_service', [dict(host='0.0.0.0', proto='tcp', port=22), dict(host='127.0.0.1', proto='tcp', port=25), dict(host='0.0.0.0', proto='udp', port=1514)]) DCNL def test_listening_ports(Socket, Sudo, ossec_service):
def replace_prefix(path, p1, p2):
def extract_to_path(archive, member, path, user):
def cleanup_deleted_sources(store_dir, c):
def app_db_migrated():
def iter_subclasses(cls, _seen=None, template_classes=[]):
def execute_nb(src, dst, allow_errors=False, timeout=1000, kernel_name=None):
def convert(src, dst, to='rst'):
def create_update_gitdir():
def getdirs():
def newdir(dirs):
def install_branch(branch):
def build_docs(branch):
def build_pdf(branch):
def check_script(filename):
def parse_docstring(block):
def parse_file(block):
def write_file(outfile, rst_file_pth):
def restify(example_file, filehash, fname):
def get_hash(f):
def update_hash_dict(filehash, filename):
def check_hash(rawfile, filename):
def post_gist(content, description='', filename='file', auth=False):
def get_pull_request(project, num, auth=False):
def get_pull_request_files(project, num, auth=False):
def get_paged_request(url, headers=None, **params):
def get_pulls_list(project, auth=False, **params):
def get_issues_list(project, auth=False, **params):
def is_pull_request(issue):
def encode_multipart_formdata(fields, boundary=None):
def post_download(project, filename, name=None, description=''):
def already_backported(branch, since_tag=None):
def should_backport(labels=None, milestone=None):
def get_issues(project='statsmodels/statsmodels', state='closed', pulls=False):
def _parse_datetime(s):
def issues2dict(issues):
def is_pull_request(issue):
def split_pulls(all_issues, project='statsmodels/statsmodels'):
def issues_closed_since(period=timedelta(days=365), project='statsmodels/statsmodels', pulls=False):
def sorted_by_field(issues, field='closed_at', reverse=False):
def report(issues, show_urls=False):
def getrsq(fitresult):
def index_trim_outlier(resid, k):
def compare_r_output_dogs_data(method):
def _multivariate_ols_fit(endog, exog, method='svd', tolerance=1e-08):
def multivariate_stats(eigenvals, r_err_sscp, r_contrast, df_resid, tolerance=1e-08):
def pca(data, ncomp=None, standardize=True, demean=True, normalize=True, gls=False, weights=None, method='svd'):
def _kernel_cumincidence(time, status, exog, kfunc, freq_weights, dimred=True):
def _kernel_survfunc(time, status, exog, kfunc, freq_weights):
def _calc_survfunc_right(time, status, weights=None, entry=None, compress=True, retall=True):
def _calc_incidence_right(time, status, weights=None):
def survdiff(time, status, group, weight_type=None, strata=None, entry=None, **kwargs):
def plot_survfunc(survfuncs, ax=None):
def brentq_expanding(func, low=None, upp=None, args=(), xtol=1e-05, start_low=None, start_upp=None, increasing=None, max_it=100, maxiter_bq=100, factor=10, full_output=False):
def interpret_data(data, colnames=None, rownames=None):
def _is_recarray(data):
def test_missing_data_pandas():
def combine_indices(groups, prefix='', sep='.', return_labels=False):
def group_sums(x, group, use_bincount=True):
def group_sums_dummy(x, group_dummy):
def dummy_sparse(groups):
def _is_hierarchical(x):
def parallel_func(func, n_jobs, verbose=5):
def add_indep(x, varnames, dtype=None):
def approx_fprime(x, f, epsilon=None, args=(), kwargs={}, centered=False):
def approx_fprime_cs(x, f, epsilon=None, args=(), kwargs={}):
def approx_hess_cs(x, f, epsilon=None, args=(), kwargs={}):
def lstsq(a, b, cond=None, overwrite_a=0, overwrite_b=0):
def pinv(a, cond=None, rcond=None):
def pinv2(a, cond=None, rcond=None):
def logdet_symm(m, check_symm=False):
def stationary_solve(r, b):
def mse(x1, x2, axis=0):
def rmse(x1, x2, axis=0):
def maxabs(x1, x2, axis=0):
def meanabs(x1, x2, axis=0):
def medianabs(x1, x2, axis=0):
def bias(x1, x2, axis=0):
def medianbias(x1, x2, axis=0):
def vare(x1, x2, ddof=0, axis=0):
def stde(x1, x2, ddof=0, axis=0):
def iqr(x1, x2, axis=0):
def aic(llf, nobs, df_modelwc):
def aicc(llf, nobs, df_modelwc):
def bic(llf, nobs, df_modelwc):
def hqic(llf, nobs, df_modelwc):
def aic_sigma(sigma2, nobs, df_modelwc, islog=False):
def aicc_sigma(sigma2, nobs, df_modelwc, islog=False):
def bic_sigma(sigma2, nobs, df_modelwc, islog=False):
def hqic_sigma(sigma2, nobs, df_modelwc, islog=False):
def remove_nanrows(y, x):
def linmod(y, x, weights=None, sigma=None, add_const=True, filter_missing=True, **kwds):
def _make_dictnames(tmp_arr, offset=0):
def drop_missing(Y, X=None, axis=1):
def categorical(data, col=None, dictnames=False, drop=False):
def add_constant(data, prepend=True, has_constant='skip'):
def isestimable(C, D):
def pinv_extended(X, rcond=1e-15):
def recipr(X):
def recipr0(X):
def clean0(matrix):
def fullrank(X, r=None):
def unsqueeze(data, axis, oldshape):
def chain_dot(*arrs):
def nan_dot(A, B):
def maybe_unwrap_results(results):
def _ensure_2d(x, ndarray=False):
def _generate_url(arg, stable):
def webdoc(arg=None, stable=None):
def _faa_di_bruno_partitions(n):
def cumulant_from_moments(momt, n):
def _conf_set(F, alpha=0.05):
def monotone_fn_inverter(fn, x, vectorized=True, **keywords):
def _make_index(prob, size):
def mixture_rvs(prob, size, dist, kwargs=None):
def mv_mixture_rvs(prob, size, dist, nvars, **kwargs):
def pca(data, keepdim=0, normalize=0, demean=True):
def pcasvd(data, keepdim=0, demean=True):
def split(train_indexes, test_indexes, *args):
def mcarma22(niter=10, nsample=1000, ar=None, ma=None, sig=0.5):
def prob_bv_rectangle(lower, upper, cdf):
def prob_mv_grid(bins, cdf, axis=(-1)):
def prob_quantize_cdf(binsx, binsy, cdf):
def prob_quantize_cdf_old(binsx, binsy, cdf):
def paramstopot(thresh, shape, scale):
def meanexcess(thresh, shape, scale):
def _fitstart(self, x):
def _fitstart_beta(self, x, fixed=None):
def _fitstart_poisson(self, x, fixed=None):
def fit_fr(self, data, *args, **kwds):
def expect(self, fn=None, args=(), loc=0, scale=1, lb=None, ub=None, conditional=False):
def expect_v2(self, fn=None, args=(), loc=0, scale=1, lb=None, ub=None, conditional=False):
def expect_discrete(self, fn=None, args=(), loc=0, lb=None, ub=None, conditional=False):
def distfitbootstrap(sample, distr, nrepl=100):
def distfitmc(sample, distr, nrepl=100, distkwds={}):
def printresults(sample, arg, bres, kind='bootstrap'):
def mc2mvsk(args):
def mnc2mvsk(args):
def nct_kurt_bug():
def pdf_moments_st(cnt):
def pdf_mvsk(mvsk):
def pdf_moments(cnt):
def mvstdnormcdf(lower, upper, corrcoef, **kwds):
def mvnormcdf(upper, mu, cov, lower=None, **kwds):
def chi2_pdf(self, x, df):
def mvstdtprob(a, b, R, df, ieps=1e-05, quadkwds=None, mvstkwds=None):
def multivariate_t_rvs(m, S, df=np.inf, n=1):
def mutualinfo_kde(y, x, normed=True):
def mutualinfo_kde_2sample(y, x, normed=True):
def mutualinfo_binned(y, x, bins, normed=True):
def gammamomentcond(distfn, params, mom2, quantile=None):
def gammamomentcond2(distfn, params, mom2, quantile=None):
def momentcondunbound(distfn, params, mom2, quantile=None):
def momentcondunboundls(distfn, params, mom2, quantile=None, shape=None):
def momentcondquant(distfn, params, mom2, quantile=None, shape=None):
def fitbinned(distfn, freq, binedges, start, fixed=None):
def fitbinnedgmm(distfn, freq, binedges, start, fixed=None, weightsoptimal=True):
def logmps(params, xsorted, dist):
def getstartparams(dist, data):
def fit_mps(dist, data, x0=None):
def expect_mc(dist, func=(lambda x: 1), size=50000):
def expect_mc_bounds(dist, func=(lambda x: 1), size=50000, lower=None, upper=None, conditional=False, overfact=1.2):
def bivariate_normal(x, mu, cov):
def copula_bv_indep(u, v):
def copula_bv_min(u, v):
def copula_bv_max(u, v):
def copula_bv_clayton(u, v, theta):
def copula_bv_frank(u, v, theta):
def copula_bv_archimedean(u, v, transform, args=()):
def copula_mv_archimedean(u, transform, args=(), axis=(-1)):
def copula_bv_ev(u, v, transform, args=()):
def transform_tawn(t, a1, a2, theta):
def transform_joe(t, a1, a2, theta):
def transform_tawn2(t, theta, k):
def transform_bilogistic(t, beta, delta):
def transform_hr(t, lamda):
def transform_tev(t, rho, x):
def mean_residual_life(x, frac=None, alpha=0.05):
def ks_2samp(data1, data2):
def kstest(rvs, cdf, args=(), N=20, alternative='two_sided', mode='approx', **kwds):
def asquare(cdfvals, axis=0):
def bootstrap(distr, args=(), nobs=200, nrep=100, value=None, batch_size=None):
def bootstrap2(value, distr, args=(), nobs=200, nrep=100):
def default_smoother(x, s_arg=None):
def kernel(d1, d2, r=None, weights=None):
def aggregate_cov(x, d, r=None, weights=None):
def S_all_hac(x, d, nlags=1):
def S_within_hac(x, d, nlags=1, groupidx=1):
def S_white(x, d):
def group(X):
def repanel_cov(groups, sigmas):
def corr_equi(k_vars, rho):
def corr_ar(k_vars, ar):
def corr_arma(k_vars, ar, ma):
def corr2cov(corr, std):
def whiten_ar(x, ar_coefs):
def yule_walker_acov(acov, order=1, method='unbiased', df=None, inv=False):
def sum_outer_product_loop(x, group_iter):
def sum_outer_product_balanced(x, n_groups):
def whiten_individuals_loop(x, transform, group_iter):
def _make_exog_from_formula(result, focus_var, summaries, values, num_points):
def _make_exog_from_arrays(result, focus_var, summaries, values, num_points):
def _glm_basic_scr(result, exog, alpha):
def inner_cont(polys, lower, upper, weight=None):
def is_orthonormal_cont(polys, lower, upper, rtol=0, atol=1e-08):
def fg1(x):
def fg1eu(x):
def fg2(x):
def func1(x):
def descstats(data, cols=None, axis=0):
def isnested(A, B, namespace=None):
def interactions(terms, order=[1, 2]):
def _ll_nbp(y, X, beta, alph, Q):
def _ll_nb1(y, X, beta, alph):
def _ll_nb2(y, X, beta, alph):
def _ll_geom(y, X, beta):
def _ll_nbt(y, X, beta, alph, C=0):
def _score_nbp(y, X, beta, thet, Q):
def data2dummy(x, returnall=False):
def data2proddummy(x):
def data2groupcont(x1, x2):
def anovadict(res):
def form2design(ss, data):
def dropname(ss, li):
def branch(tree):
def branch2(tree):
def data2dummy(x, returnall=False):
def data2proddummy(x):
def data2groupcont(x1, x2):
def anovadict(res):
def form2design(ss, data):
def dropname(ss, li):
def maxabs(x):
def spec_hausman(params_e, params_i, cov_params_e, cov_params_i, dof=None):
def randintw(w, size=1):
def getbranches(tree):
def getnodes(tree):
def groupstatsbin(factors, values):
def convertlabels(ys, indices=None):
def groupsstats_1d(y, x, labelsunique):
def atleast_2dcol(x):
def wls_prediction_std(res, exog=None, weights=None, alpha=0.05):
def pdf(x, mu, sigma):
def cdf(x, mu, sigma):
def norm_lls(y, params):
def norm_lls_grad(y, params):
def mean_grad(x, beta):
def normgrad(y, x, params):
def tstd_lls(y, params, df):
def norm_dlldy(y):
def ts_dlldy(y, df):
def tstd_pdf(x, df):
def ts_lls(y, params, df):
def ts_dlldy(y, df):
def tstd_dlldy(y, df):
def locscale_grad(y, loc, scale, dlldy, *args):
def plt_closeall(n=10):
def recipr(X):
def mad(a, c=0.6745, axis=0):
def recipr0(X):
def clean0(matrix):
def rank(X, cond=1e-12):
def fullrank(X, r=None):
def ECDF(values):
def monotone_fn_inverter(fn, x, vectorized=True, **keywords):
def _model2dataframe(model_endog, model_exog, model_type=OLS, **kwargs):
def multiOLS(model, dataframe, column_list=None, method='fdr_bh', alpha=0.05, subset=None, model_type=OLS, **kwargs):
def _test_group(pvalues, group_name, group, exact=True):
def multigroup(pvals, groups, exact=True, keep_all=True, alpha=0.05):
def runstest_1samp(x, cutoff='mean', correction=True):
def runstest_2samp(x, y=None, groups=None, correction=True):
def median_test_ksample(x, groups):
def cochrans_q(x):
def mcnemar(x, y=None, exact=True, correction=True):
def symmetry_bowker(table):
def scoreatpercentile(data, percentile):
def percentileofscore(data, score):
def empiricalcdf(data, method='Hazen'):
def contrast_allpairs(nm):
def contrast_all_one(nm):
def contrast_diff_mean(nm):
def contrast_product(names1, names2, intgroup1=None, intgroup2=None, pairs=False):
def dummy_1d(x, varname=None):
def dummy_product(d1, d2, method='full'):
def dummy_limits(d):
def dummy_nested(d1, d2, method='full'):
def groupmean_d(x, d):
def acorr_ljungbox(x, lags=None, boxpierce=False):
def acorr_lm(x, maxlag=None, autolag='AIC', store=False, regresults=False):
def het_arch(resid, maxlag=None, autolag=None, store=False, regresults=False, ddof=0):
def acorr_breusch_godfrey(results, nlags=None, store=False):
def het_breuschpagan(resid, exog_het):
def het_white(resid, exog, retres=False):
def _het_goldfeldquandt2_old(y, x, idx, split=None, retres=False):
def linear_harvey_collier(res):
def linear_rainbow(res, frac=0.5):
def linear_lm(resid, exog, func=None):
def _neweywestcov(resid, x):
def _recursive_olsresiduals2(olsresults, skip):
def recursive_olsresiduals(olsresults, skip=None, lamda=0.0, alpha=0.95):
def breaks_hansen(olsresults):
def breaks_cusumolsresid(olsresidual, ddof=0):
def breaks_AP(endog, exog, skip):
def quantiles(a, prob=list([0.25, 0.5, 0.75]), alphap=0.4, betap=0.4, axis=None, limit=(), masknan=False):
def scoreatpercentile(data, per, limit=(), alphap=0.4, betap=0.4, axis=0, masknan=None):
def plotting_positions(data, alpha=0.4, beta=0.4, axis=0, masknan=False):
def plotting_positions_w1d(data, weights=None, alpha=0.4, beta=0.4, method='notnormed'):
def edf_normal_inverse_transformed(x, alpha=(3.0 / 8), beta=(3.0 / 8), axis=0):
def get_tukeyQcrit(k, df, alpha=0.05):
def get_tukeyQcrit2(k, df, alpha=0.05):
def Tukeythreegene2(genes):
def maxzero(x):
def maxzerodown(x):
def rejectionline(n, alpha=0.5):
def fdrcorrection_bak(pvals, alpha=0.05, method='indep'):
def mcfdr(nrepl=100, nobs=50, ntests=10, ntrue=6, mu=0.5, alpha=0.05, rho=0.0):
def randmvn(rho, size=(1, 2), standardize=False):
def tiecorrect(xranks):
def rankdata(x):
def compare_ordered(vals, alpha):
def varcorrection_unbalanced(nobs_all, srange=False):
def varcorrection_pairs_unbalanced(nobs_all, srange=False):
def varcorrection_unequal(var_all, nobs_all, df_all):
def varcorrection_pairs_unequal(var_all, nobs_all, df_all):
def tukeyhsd(mean_all, nobs_all, var_all, df=None, alpha=0.05, q_crit=None):
def simultaneous_ci(q_crit, var, groupnobs, pairindices=None):
def distance_st_range(mean_all, nobs_all, var_all, df=None, triu=False):
def contrast_allpairs(nm):
def contrast_all_one(nm):
def contrast_diff_mean(nm):
def multicontrast_pvalues(tstat, tcorr, df=None, dist='t', alternative='two-sided'):
def homogeneous_subsets(vals, dcrit):
def set_partition(ssli):
def set_remove_subs(ssli):
def _band2array(a, lower=0, symmetric=False, hermitian=False):
def _upper2lower(ub):
def _lower2upper(lb):
def _triangle2unit(tb, lower=0):
def _trace_symbanded(a, b, lower=0):
def _zero_triband(a, lower=0):
def Rp(v):
def Rpp(v):
def logsumexp(a, axis=None):
def _isproperdist(X):
def discretize(X, method='ef', nbins=None):
def logbasechange(a, b):
def natstobits(X):
def bitstonats(X):
def shannonentropy(px, logbase=2):
def shannoninfo(px, logbase=2):
def condentropy(px, py, pxpy=None, logbase=2):
def mutualinfo(px, py, pxpy, logbase=2):
def corrent(px, py, pxpy, logbase=2):
def covent(px, py, pxpy, logbase=2):
def renyientropy(px, alpha=1, logbase=2, measure='R'):
def acovf_fft(x, demean=True):
def loglike_ar1(x, rho):
def ar2transform(x, arcoefs):
def mvn_loglike(x, sigma):
def mvn_nloglike_obs(x, sigma):
def tiny2zero(x, eps=1e-15):
def sumofsq(x, axis=0):
def gjrconvertparams(self, params, nar, nma):
def generate_kindofgarch(nobs, ar, ma, mu=1.0):
def generate_garch(nobs, ar, ma, mu=1.0, scale=0.1):
def generate_gjrgarch(nobs, ar, ma, mu=1.0, scale=0.1, varinnovation=None):
def miso_lfilter_old(ar, ma, x, useic=False):
def levinson_durbin_nitime(s, order=10, isacov=False):
def VAR(x, B, const=0):
def VARMA(x, B, C, const=0):
def movorder(x, order='med', windsize=3, lag='lagged'):
def check_movorder():
def movmean(x, windowsize=3, lag='lagged'):
def movvar(x, windowsize=3, lag='lagged'):
def movmoment(x, k, windowsize=3, lag='lagged'):
def arfilter_old(x, a):
def fftconvolve_old(in1, in2, in3=None, mode='full'):
def demean(x, axis=0):
def detrend_mean(x):
def detrend_none(x):
def detrend_linear(y):
def acovf_explicit(ar, ma, nobs):
def autocorr(s, axis=(-1)):
def norm_corr(x, y, mode='valid'):
def pltacorr(self, x, **kwargs):
def pltxcorr(self, x, y, normed=True, detrend=detrend_none, usevlines=True, maxlags=10, **kwargs):
def contrastfromcols(L, D, pseudo=None):
def forrt(X, m=None):
def revrt(X, m=None):
def silverman_transform(bw, M, RANGE):
def counts(x, v):
def kdensity(X, kernel='gau', bw='normal_reference', weights=None, gridsize=None, adjust=1, clip=((- np.inf), np.inf), cut=3, retgrid=True):
def kdensityfft(X, kernel='gau', bw='normal_reference', weights=None, gridsize=None, adjust=1, clip=((- np.inf), np.inf), cut=3, retgrid=True):
def _compute_min_std_IQR(data):
def _compute_subset(class_type, data, bw, co, do, n_cvars, ix_ord, ix_unord, n_sub, class_vars, randomize, bound):
def _adjust_shape(dat, k_vars):
def gpke(bw, data, data_predict, var_type, ckertype='gaussian', okertype='wangryzin', ukertype='aitchisonaitken', tosum=True):
def _select_sigma(X):
def bw_scott(x, kernel=None):
def bw_silverman(x, kernel=None):
def bw_normal_reference(x, kernel=kernels.Gaussian):
def select_bandwidth(x, bw, kernel):
def lowess(endog, exog, frac=(2.0 / 3.0), it=3, delta=0.0, is_sorted=False, missing='drop', return_sorted=True):
def aitchison_aitken(h, Xi, x, num_levels=None):
def wang_ryzin(h, Xi, x):
def gaussian(h, Xi, x):
def gaussian_convolution(h, Xi, x):
def aitchison_aitken_reg(h, Xi, x):
def wang_ryzin_reg(h, Xi, x):
def lowess(endog, exog, frac=(2.0 / 3), it=3):
def _lowess_initial_fit(x_copy, y_copy, k, n):
def _lowess_wt_standardize(weights, new_entries, x_copy_i, width):
def _lowess_robustify_fit(x_copy, y_copy, fitted, weights, k, n):
def _lowess_update_nn(x, cur_nn, i):
def _lowess_tricube(t):
def _lowess_mycube(t):
def _lowess_bisquare(t):
def add_lowess(ax, lines_idx=0, frac=0.2, **lowess_kwargs):
def plot_fit(results, exog_idx, y_true=None, ax=None, **kwargs):
def plot_regress_exog(results, exog_idx, fig=None):
def _partial_regression(endog, exog_i, exog_others):
def plot_partregress(endog, exog_i, exog_others, data=None, title_kwargs={}, obs_labels=True, label_kwargs={}, ax=None, ret_coords=False, **kwargs):
def plot_partregress_grid(results, exog_idx=None, grid=None, fig=None):
def plot_ccpr(results, exog_idx, ax=None):
def plot_ccpr_grid(results, exog_idx=None, grid=None, fig=None):
def abline_plot(intercept=None, slope=None, horiz=None, vert=None, model_results=None, ax=None, **kwargs):
def influence_plot(results, external=True, alpha=0.05, criterion='cooks', size=48, plot_alpha=0.75, ax=None, **kwargs):
def plot_leverage_resid2(results, alpha=0.05, ax=None, **kwargs):
def ceres_resids(results, focus_exog, frac=0.66, cond_means=None):
def partial_resids(results, focus_exog):
def added_variable_resids(results, focus_exog, resid_type=None, use_glm_weights=True, fit_kwargs=None):
def interaction_plot(x, trace, response, func=np.mean, ax=None, plottype='b', xlabel=None, ylabel=None, colors=None, markers=None, linestyles=None, legendloc='best', legendtitle=None, **kwargs):
def _recode(x, levels):
def _import_mpl():
def create_mpl_ax(ax=None):
def create_mpl_fig(fig=None, figsize=None):
def maybe_name_or_idx(idx, model):
def get_data_names(series_or_dataframe):
def annotate_axes(index, labels, points, offset_points, size, ax, **kwargs):
def violinplot(data, ax=None, labels=None, positions=None, side='both', show_boxplot=True, plot_opts={}):
def _single_violin(ax, pos, pos_data, width, side, plot_opts):
def _set_ticks_labels(ax, data, labels, positions, plot_opts):
def beanplot(data, ax=None, labels=None, positions=None, side='both', jitter=False, plot_opts={}):
def _jitter_envelope(pos_data, xvals, violin, side):
def _show_legend(ax):
def plot_corr(dcorr, xnames=None, ynames=None, title=None, normcolor=False, ax=None, cmap='RdYlBu_r'):
def plot_corr_grid(dcorrs, titles=None, ncols=None, normcolor=False, xnames=None, ynames=None, fig=None, cmap='RdYlBu_r'):
def rainbow(n):
def _make_ellipse(mean, cov, ax, level=0.95, color=None):
def scatter_ellipse(data, level=0.9, varnames=None, ell_kwds=None, plot_kwds=None, add_titles=False, keep_ticks=False, fig=None):
def fboxplot(data, xdata=None, labels=None, depth=None, method='MBD', wfactor=1.5, ax=None, plot_opts={}):
def rainbowplot(data, xdata=None, depth=None, method='MBD', ax=None, cmap=None):
def banddepth(data, method='MBD'):
def plot_acf(x, ax=None, lags=None, alpha=0.05, use_vlines=True, unbiased=False, fft=False, title='Autocorrelation', zero=True, **kwargs):
def plot_pacf(x, ax=None, lags=None, alpha=0.05, method='ywm', use_vlines=True, title='Partial DCSP Autocorrelation', zero=True, **kwargs):
def seasonal_plot(grouped_x, xticklabels, ylabel=None, ax=None):
def month_plot(x, dates=None, ylabel=None, ax=None):
def quarter_plot(x, dates=None, ylabel=None, ax=None):
def _normalize_split(proportion):
def _split_rect(x, y, width, height, proportion, horizontal=True, gap=0.05):
def _reduce_dict(count_dict, partial_key):
def _key_splitting(rect_dict, keys, values, key_subset, horizontal, gap):
def _tuplify(obj):
def _categories_level(keys):
def _hierarchical_split(count_dict, horizontal=True, gap=0.05):
def _single_hsv_to_rgb(hsv):
def _create_default_properties(data):
def _normalize_data(data, index):
def _normalize_dataframe(dataframe, index):
def _statistical_coloring(data):
def _create_labels(rects, horizontal, ax, rotation):
def mosaic(data, index=None, ax=None, horizontal=True, gap=0.005, properties=(lambda key: None), labelizer=None, title='', statistic=False, axes_label=True, label_rotation=0.0):
def qqplot(data, dist=stats.norm, distargs=(), a=0, loc=0, scale=1, fit=False, line=None, ax=None):
def qqplot_2samples(data1, data2, xlabel=None, ylabel=None, line=None, ax=None):
def qqline(ax, line, x=None, y=None, dist=None, fmt='r-'):
def plotting_pos(nobs, a):
def _fmt_probplot_axis(ax, dist, nobs):
def _do_plot(x, y, dist=None, line=False, ax=None, fmt='bo', **kwargs):
def dot_plot(points, intervals=None, lines=None, sections=None, styles=None, marker_props=None, line_props=None, split_names=None, section_order=None, line_order=None, stacked=False, styles_order=None, striped=False, horizontal=True, show_names='both', fmt_left_name=None, fmt_right_name=None, show_section_titles=None, ax=None):
def load():
def load():
def load():
def load():
def load_pandas():
def load():
def load_pandas():
def webuse(data, baseurl='http://www.stata-press.com/data/r11/', as_df=True):
def _maybe_reset_index(data):
def _urlopen_cached(url, cache):
def get_rdataset(dataname, package='datasets', cache=False):
def get_data_home(data_home=None):
def clear_data_home(data_home=None):
def check_internet(url=None):
def load():
def load_pandas():
def load():
def load():
def load_pandas():
def load():
def load_pandas():
def load():
def load_pandas():
def load():
def load_pandas():
def load():
def load():
def load():
def load():
def load():
def load():
def load_pandas():
def load():
def load_pandas():
def load():
def load_pandas():
def load():
def load_pandas():
def load():
def load():
def load_pandas():
def load():
def load():
def load():
def load():
def load():
def load():
def load_pandas():
def handle_formula_data(Y, X, formula, depth=0, missing='drop'):
def _remove_intercept_patsy(terms):
def _intercept_idx(design_info):
def make_hypotheses_matrices(model_results, test_formula):
def main():
def run_demo(mode, base_alpha=0.01, N=500, get_l1_slsqp_results=False, get_l1_cvxopt_results=False, num_nonconst_covariates=10, noise_level=0.2, cor_length=2, num_zero_params=8, num_targets=3, print_summaries=False, save_arrays=False, load_old_arrays=False):
def run_solvers(model, true_params, alpha, get_l1_slsqp_results, get_l1_cvxopt_results, print_summaries):
def get_summary_str(results, true_params, get_l1_slsqp_results, get_l1_cvxopt_results, print_summaries):
def get_RMSE(results, true_params):
def get_logit_endog(true_params, exog, noise_level):
def get_probit_endog(true_params, exog, noise_level):
def get_exog(N, num_nonconst_covariates, cor_length):
def probitloglike(params, endog, exog):
def plot_acf_multiple(ys, lags=20):
def tiny2zero(x, eps=1e-15):
def armaloop(arcoefs, macoefs, x):
def get_prediction(self, exog=None, transform=True, weights=None, row_labels=None, pred_kwds=None):
def _get_sigma(sigma, nobs):
def yule_walker(X, order=1, method='unbiased', df=None, inv=False, demean=True):
def _dot(x, y):
def _multi_dot_three(A, B, C):
def _dotsum(x, y):
def _get_exog_re_names(self, exog_re):
def _smw_solver(s, A, AtA, BI, di):
def _smw_logdet(s, A, AtA, BI, di, B_logdet):
def _gen_npfuncs(k, L1_wt, alpha, loglike_kwds, score_kwds, hess_kwds):
def fit_elasticnet(model, method='coord_descent', maxiter=100, alpha=0.0, L1_wt=1.0, start_params=None, cnvrg_tol=1e-07, zero_tol=1e-08, refit=False, check_step=True, loglike_kwds=None, score_kwds=None, hess_kwds=None):
def _opt_1d(func, grad, hess, model, start, L1_wt, tol, check_step=True):
def get_robustcov_results(self, cov_type='HC1', use_t=None, **kwds):
def _asarray_2d_null_rows(x):
def _nan_rows(*arrs):
def handle_data_class_factory(endog, exog):
def _data_gen(endog, exog, partitions):
def fit_l1_cvxopt_cp(f, score, start_params, args, kwargs, disp=False, maxiter=100, callback=None, retall=False, full_output=False, hess=None):
def _objective_func(f, x, k_params, alpha, *args):
def _fprime(score, x, k_params, alpha):
def _get_G(k_params):
def _hessian_wrapper(hess, x, z, k_params):
def _est_regularized_naive(mod, pnum, partitions, fit_kwds=None):
def _est_unregularized_naive(mod, pnum, partitions, fit_kwds=None):
def _join_naive(params_l, threshold=0):
def _calc_grad(mod, params, alpha, L1_wt, score_kwds):
def _calc_wdesign_mat(mod, params, hess_kwds):
def _est_regularized_debiased(mod, mnum, partitions, fit_kwds=None, score_kwds=None, hess_kwds=None):
def _join_debiased(results_l, threshold=0):
def _helper_fit_partition(self, pnum, endog, exog, fit_kwds, init_kwds_e={}):
def _fit_lbfgs(f, score, start_params, fargs, kwargs, disp=True, maxiter=100, callback=None, retall=False, full_output=True, hess=None):
def fit_l1_slsqp(f, score, start_params, args, kwargs, disp=False, maxiter=1000, callback=None, retall=False, full_output=False, hess=None):
def _objective_func(f, x_full, k_params, alpha, *args):
def _fprime(score, x_full, k_params, alpha):
def _f_ieqcons(x_full, k_params):
def _fprime_ieqcons(x_full, k_params):
def transform_params_constraint(params, Sinv, R, q):
def fit_constrained(model, constraint_matrix, constraint_values, start_params=None, fit_kwds=None):
def fit_constrained_wrap(model, constraints, start_params=None, **fit_kwds):
def qc_results(params, alpha, score, qc_tol, qc_verbose=False):
def do_trim_params(params, k_params, alpha, score, passed, trim_mode, size_trim_tol, auto_trim_tol):
def _HCCM(results, scale):
def cov_hc0(results):
def cov_hc1(results):
def cov_hc2(results):
def cov_hc3(results):
def _get_sandwich_arrays(results, cov_type=''):
def _HCCM1(results, scale):
def _HCCM2(hessian_inv, scale):
def weights_bartlett(nlags):
def weights_uniform(nlags):
def S_hac_simple(x, nlags=None, weights_func=weights_bartlett):
def S_white_simple(x):
def group_sums(x, group):
def S_hac_groupsum(x, time, nlags=None, weights_func=weights_bartlett):
def S_crosssection(x, group):
def cov_crosssection_0(results, group):
def cov_cluster(results, group, use_correction=True):
def cov_cluster_2groups(results, group, group2=None, use_correction=True):
def cov_white_simple(results, use_correction=True):
def cov_hac_simple(results, nlags=None, weights_func=weights_bartlett, use_correction=True):
def lagged_groups(x, lag, groupidx):
def S_nw_panel(xw, weights, groupidx):
def cov_nw_panel(results, nlags, groupidx, weights_func=weights_bartlett, use_correction='hac'):
def cov_nw_groupsum(results, nlags, time, weights_func=weights_bartlett, use_correction=0):
def _int_ifclose(x, dec=1, width=4):
def aggregate_raters(data, n_cat=None):
def to_table(data, bins=None):
def fleiss_kappa(table):
def cohens_kappa(table, weights=None, return_results=True, wt=None):
def anova_single(model, **kwargs):
def anova1_lm_single(model, endog, exog, nobs, design_info, table, n_rows, test, pr_test, robust):
def anova2_lm_single(model, design_info, n_rows, test, pr_test, robust):
def anova_lm(*args, **kwargs):
def _ssr_reduced_model(y, x, term_slices, params, keys):
def ttest_power(effect_size, nobs, alpha, df=None, alternative='two-sided'):
def normal_power(effect_size, nobs, alpha, alternative='two-sided', sigma=1.0):
def ftest_anova_power(effect_size, nobs, alpha, k_groups=2, df=None):
def ftest_power(effect_size, df_num, df_denom, alpha, ncc=1):
def outlier_test(model_results, method='bonf', alpha=0.05, labels=None, order=False):
def reset_ramsey(res, degree=5):
def variance_inflation_factor(exog, exog_idx):
def summary_table(res, alpha=0.05):
def test_single_factor_repeated_measures_anova():
def test_two_factors_repeated_measures_anova():
def test_three_factors_repeated_measures_anova():
def test_repeated_measures_invalid_factor_name():
def norm_f(x, y):
def _expand_table(table):
def partial_project(endog, exog):
def cancorr(x1, x2, demean=True, standardize=False):
def cc_ranktest(x1, x2, demean=True, fullrank=False):
def cc_stats(x1, x2, demean=True):
def _calc_nodewise_row(exog, idx, alpha):
def _calc_nodewise_weight(exog, nodewise_row, idx, alpha):
def _calc_approx_inv_cov(nodewise_row_l, nodewise_weight_l):
def _design_knockoff_sdp(exog):
def _design_knockoff_equi(exog):
def _isfloat(x):
def _phi(p):
def _ptransform(p):
def _func(a, p, r, v):
def _select_ps(p):
def _interpolate_p(p, r, v):
def _select_vs(v, p):
def _interpolate_v(p, r, v):
def _qsturng(p, r, v):
def qsturng(p, r, v):
def _psturng(q, r, v):
def psturng(q, r, v):
def durbin_watson(resids, axis=0):
def omni_normtest(resids, axis=0):
def jarque_bera(resids, axis=0):
def robust_skewness(y, axis=0):
def _kr3(y, alpha=5.0, beta=50.0):
def expected_robust_kurtosis(ab=(5.0, 50.0), dg=(2.5, 25.0)):
def robust_kurtosis(y, axis=0, ab=(5.0, 50.0), dg=(2.5, 25.0), excess=True):
def _medcouple_1d(y):
def medcouple(y, axis=0):
def ksstat(x, cdf, alternative='two_sided', args=()):
def pval_lf(Dmax, n):
def kstest_normal(x, pvalmethod='approx'):
def mc2mnc(mc):
def mnc2mc(mnc, wmean=True):
def cum2mc(kappa):
def mnc2cum(mnc):
def mc2cum(mc):
def mvsk2mc(args):
def mvsk2mnc(args):
def mc2mvsk(args):
def mnc2mvsk(args):
def cov2corr(cov, return_std=False):
def corr2cov(corr, std):
def se_cov(cov):
def anderson_statistic(x, dist='norm', fit=True, params=(), axis=0):
def normal_ad(x, axis=0):
def _tstat_generic(value1, value2, std_diff, dof, alternative, diff=0):
def _tconfint_generic(mean, std_mean, dof, alpha, alternative):
def _zstat_generic(value1, value2, std_diff, alternative, diff=0):
def _zstat_generic2(value, std_diff, alternative):
def _zconfint_generic(mean, std_mean, alpha, alternative):
def ttest_ind(x1, x2, alternative='two-sided', usevar='pooled', weights=(None, None), value=0):
def ttost_ind(x1, x2, low, upp, usevar='pooled', weights=(None, None), transform=None):
def ttost_paired(x1, x2, low, upp, transform=None, weights=None):
def ztest(x1, x2=None, value=0, alternative='two-sided', usevar='pooled', ddof=1.0):
def zconfint(x1, x2=None, value=0, alpha=0.05, alternative='two-sided', usevar='pooled', ddof=1.0):
def ztost(x1, low, upp, x2=None, usevar='pooled', ddof=1.0):
def proportion_confint(count, nobs, alpha=0.05, method='normal'):
def multinomial_proportions_confint(counts, alpha=0.05, method='goodman'):
def samplesize_confint_proportion(proportion, half_length, alpha=0.05, method='normal'):
def proportion_effectsize(prop1, prop2, method='normal'):
def std_prop(prop, nobs):
def _power_ztost(mean_low, var_low, mean_upp, var_upp, mean_alt, var_alt, alpha=0.05, discrete=True, dist='norm', nobs=None, continuity=0, critval_continuity=0):
def binom_tost(count, nobs, low, upp):
def binom_tost_reject_interval(low, upp, nobs, alpha=0.05):
def binom_test_reject_interval(value, nobs, alpha=0.05, alternative='two-sided'):
def binom_test(count, nobs, prop=0.5, alternative='two-sided'):
def power_ztost_prop(low, upp, nobs, p_alt, alpha=0.05, dist='norm', variance_prop=None, discrete=True, continuity=0, critval_continuity=0):
def _table_proportion(count, nobs):
def proportions_ztest(count, nobs, value=None, alternative='two-sided', prop_var=False):
def proportions_ztost(count, nobs, low, upp, prop_var='sample'):
def proportions_chisquare(count, nobs, value=None):
def proportions_chisquare_allpairs(count, nobs, multitest_method='hs'):
def proportions_chisquare_pairscontrol(count, nobs, value=None, multitest_method='hs', alternative='two-sided'):
def _make_df_square(table):
def mcnemar(table, exact=True, correction=True):
def cochrans_q(x, return_object=True):
def _ecdf(x):
def multipletests(pvals, alpha=0.05, method='hs', is_sorted=False, returnsorted=False):
def fdrcorrection(pvals, alpha=0.05, method='indep', is_sorted=False):
def fdrcorrection_twostage(pvals, alpha=0.05, method='bky', iter=False, is_sorted=False):
def local_fdr(zscores, null_proportion=1.0, null_pdf=None, deg=7, nbins=30):
def powerdiscrepancy(observed, expected, lambd=0.0, axis=0, ddof=0):
def gof_chisquare_discrete(distfn, arg, rvs, alpha, msg):
def gof_binning_discrete(rvs, distfn, arg, nsupp=20):
def chisquare(f_obs, f_exp=None, value=0, ddof=0, return_basic=True):
def chisquare_power(effect_size, nobs, n_bins, alpha=0.05, ddof=0):
def chisquare_effectsize(probs0, probs1, correction=None, cohen=True, axis=0):
def _kurtosis(a):
def _skew(a):
def pairwise_tukeyhsd(endog, groups, alpha=0.05):
def corr_nearest(corr, threshold=1e-15, n_fact=100):
def corr_clipped(corr, threshold=1e-15):
def cov_nearest(cov, method='clipped', threshold=1e-15, n_fact=100, return_all=False):
def _nmono_linesearch(obj, grad, x, d, obj_hist, M=10, sig1=0.1, sig2=0.9, gam=0.0001, maxiter=100):
def _spg_optim(func, grad, start, project, maxiter=10000.0, M=10, ctol=0.001, maxiter_nmls=200, lam_min=1e-30, lam_max=1e+30, sig1=0.1, sig2=0.9, gam=0.0001):
def _project_correlation_factors(X):
def corr_nearest_factor(corr, rank, ctol=1e-06, lam_min=1e-30, lam_max=1e+30, maxiter=1000):
def cov_nearest_factor_homog(cov, rank):
def corr_thresholded(data, minabs=None, max_elt=10000000.0):
def contrastfromcols(L, D, pseudo=None):
def mad(a, c=Gaussian.ppf((3 / 4.0)), axis=0, center=np.median):
def _shift_intercept(arr):
def estimate_location(a, scale, norm=None, axis=0, initial=None, maxiter=30, tol=1e-06):
def gendat():
def _ros_sort(df, observations, censorship, warn=False):
def cohn_numbers(df, observations, censorship):
def _detection_limit_index(obs, cohn):
def _ros_group_rank(df, dl_idx, censorship):
def _ros_plot_pos(row, censorship, cohn):
def _norm_plot_pos(observations):
def plotting_positions(df, censorship, cohn):
def _impute(df, observations, censorship, transform_in, transform_out):
def _do_ros(df, observations, censorship, transform_in, transform_out):
def impute_ros(observations, censorship, df=None, min_uncensored=2, max_fraction_censored=0.8, substitution_fraction=0.5, transform_in=numpy.log, transform_out=numpy.exp, as_array=True):
def mvn_loglike_sum(x, sigma):
def mvn_loglike(x, sigma):
def mvn_loglike_chol(x, sigma):
def mvn_nloglike_obs(x, sigma):
def _next_regular(target):
def iteritems(obj, **kwargs):
def skipIf(condition, reason):
def example(t):
def recarray_select(recarray, fields):
def _check_margeff_args(at, method):
def _check_discrete_args(at, method):
def _get_const_index(exog):
def _isdummy(X):
def _iscount(X):
def _get_count_effects(effects, exog, count_ind, method, model, params):
def _get_dummy_effects(effects, exog, dummy_ind, method, model, params):
def _margeff_cov_params_dummy(model, cov_margins, params, exog, dummy_ind, method, J):
def _margeff_cov_params_count(model, cov_margins, params, exog, count_ind, method, J):
def margeff_cov_params(model, params, exog, cov_params, at, derivative, dummy_ind, count_ind, method, J):
def margeff_cov_with_se(model, params, exog, cov_params, at, derivative, dummy_ind, count_ind, method, J):
def varfilter(x, a):
def varinversefilter(ar, nobs, version=1):
def vargenerate(ar, u, initvalues=None):
def padone(x, front=0, back=0, axis=0, fillvalue=0):
def trimone(x, front=0, back=0, axis=0):
def ar2full(ar):
def ar2lhs(ar):
def add_trend(x, trend='c', prepend=False, has_constant='skip'):
def add_lag(x, col=None, lags=1, drop=False, insert=True):
def detrend(x, order=1, axis=0):
def lagmat(x, maxlag, trim='forward', original='ex', use_pandas=False):
def lagmat2ds(x, maxlag0, maxlagex=None, dropex=0, trim='forward', use_pandas=False):
def duplication_matrix(n):
def elimination_matrix(n):
def commutation_matrix(p, q):
def _ar_transparams(params):
def _ar_invtransparams(params):
def _ma_transparams(params):
def _ma_invtransparams(macoefs):
def unintegrate_levels(x, d):
def unintegrate(x, levels):
def freq_to_period(freq):
def sumofsq(x, axis=0):
def companion_matrix(polynomial):
def diff(series, k_diff=1, k_seasonal_diff=None, seasonal_periods=1):
def concat(series, axis=0, allow_mix=False):
def is_invertible(polynomial, threshold=(1 - 1e-10)):
def solve_discrete_lyapunov(a, q, complex_step=False):
def constrain_stationary_univariate(unconstrained):
def unconstrain_stationary_univariate(constrained):
def _constrain_sv_less_than_one_python(unconstrained, order=None, k_endog=None):
def _compute_coefficients_from_multivariate_pacf_python(partial_autocorrelations, error_variance, transform_variance=False, order=None, k_endog=None):
def constrain_stationary_multivariate_python(unconstrained, error_variance, transform_variance=False, prefix=None):
def _unconstrain_sv_less_than_one(constrained, order=None, k_endog=None):
def _compute_multivariate_sample_acovf(endog, maxlag):
def _compute_multivariate_acovf_from_coefficients(coefficients, error_variance, maxlag=None, forward_autocovariances=False):
def _compute_multivariate_sample_pacf(endog, maxlag):
def _compute_multivariate_pacf_from_autocovariances(autocovariances, order=None, k_endog=None):
def _compute_multivariate_pacf_from_coefficients(constrained, error_variance, order=None, k_endog=None):
def unconstrain_stationary_multivariate(constrained, error_variance):
def validate_matrix_shape(name, shape, nrows, ncols, nobs):
def validate_vector_shape(name, shape, nrows, nobs):
def reorder_missing_matrix(matrix, missing, reorder_rows=False, reorder_cols=False, is_diagonal=False, inplace=False, prefix=None):
def reorder_missing_vector(vector, missing, inplace=False, prefix=None):
def copy_missing_matrix(A, B, missing, missing_rows=False, missing_cols=False, is_diagonal=False, inplace=False, prefix=None):
def copy_missing_vector(a, b, missing, inplace=False, prefix=None):
def copy_index_matrix(A, B, index, index_rows=False, index_cols=False, is_diagonal=False, inplace=False, prefix=None):
def copy_index_vector(a, b, index, inplace=False, prefix=None):
def kalmanfilter(F, A, H, Q, R, y, X, xi10, ntrain, history=False):
def updatematrices(params, y, xi10, ntrain, penalty, upperbound, lowerbound):
def mackinnonp(teststat, regression='c', N=1, lags=None):
def mackinnoncrit(N=1, regression='c', nobs=inf):
def select_order(data, maxlags, deterministic='nc', seasons=0, exog=None, exog_coint=None):
def _linear_trend(nobs, k_ar, coint=False):
def _num_det_vars(det_string, seasons=0):
def _deterministic_to_exog(deterministic, seasons, nobs_tot, first_season=0, seasons_centered=False, exog=None, exog_coint=None):
def _mat_sqrt(_2darray):
def _endog_matrices(endog, exog, exog_coint, diff_lags, deterministic, seasons=0, first_season=0):
def _r_matrices(delta_y_1_T, y_lag1, delta_x):
def _sij(delta_x, delta_y_1_T, y_lag1):
def select_coint_rank(endog, det_order, k_ar_diff, method='trace', signif=0.05):
def coint_johansen(endog, det_order, k_ar_diff):
def get_var_endog(y, lags, trend='c', has_constant='skip'):
def make_lag_names(names, lag_order, trendorder=1, exog=None):
def comp_matrix(coefs):
def parse_lutkepohl_data(path):
def varsim(coefs, intercept, sig_u, steps=100, initvalues=None, seed=None):
def eigval_decomp(sym_array):
def vech(A):
def seasonal_dummies(n_seasons, len_endog, first_period=0, centered=False):
def load_results_statsmodels_exog(dataset):
def load_results_statsmodels_exog_coint(dataset):
def dt_s_tup_to_string(dt_s_tup):
def load_results_jmulti(dataset, dt_s_list):
def sublists(lst, min_elmts=0, max_elmts=None):
def stringify_var_names(var_list, delimiter=''):
def load_results_jmulti(dataset):
def reorder_jmultis_det_terms(jmulti_output, constant, seasons):
def generate_exog_from_season(seasons, endog_len):
def ma_rep(coefs, maxn=10):
def is_stable(coefs, verbose=False):
def var_acf(coefs, sig_u, nlags=None):
def _var_acf(coefs, sig_u):
def mse(ma_coefs, sigma_u, steps):
def forecast(y, coefs, trend_coefs, steps, exog=None):
def forecast_cov(ma_coefs, sig_u, steps):
def _forecast_vars(steps, ma_coefs, sig_u):
def var_loglike(resid, omega, nobs):
def orth_ma_rep(results, maxn=10, P=None):
def test_normality(results, signif=0.05):
def plot_mts(Y, names=None, index=None):
def plot_with_error(y, error, x=None, axes=None, value_fmt='k', error_fmt='k--', alpha=0.05, stderr_type='asym'):
def plot_full_acorr(acorr, fontsize=8, linewidth=8, xlabel=None, err_bound=None):
def irf_grid_plot(values, stderr, impcol, rescol, names, title, signif=0.05, hlines=None, subplot_params=None, plot_params=None, figsize=(10, 10), stderr_type='asym'):
def _filter_data(lhs, rhs):
def date_parser(timestr, parserinfo=None, **kwargs):
def date_range_str(start, end=None, length=None):
def dates_from_str(dates):
def dates_from_range(start, end=None, length=None):
def distance_indicators(x, epsilon=None, distance=1.5):
def correlation_sum(indicators, embedding_dim):
def correlation_sums(indicators, max_dim):
def _var(indicators, max_dim):
def bds(x, max_dim=2, epsilon=None, distance=1.5):
def dentonm(indicator, benchmark, freq='aq', **kwargs):
def _autolag(mod, endog, exog, startlag, maxlag, method, modargs=(), fitargs=(), regresults=False):
def adfuller(x, maxlag=None, regression='c', autolag='AIC', store=False, regresults=False):
def acovf(x, unbiased=False, demean=True, fft=False, missing='none'):
def q_stat(x, nobs, type='ljungbox'):
def acf(x, unbiased=False, nlags=40, qstat=False, fft=False, alpha=None, missing='none'):
def pacf_yw(x, nlags=40, method='unbiased'):
def pacf_ols(x, nlags=40):
def pacf(x, nlags=40, method='ywunbiased', alpha=None):
def ccovf(x, y, unbiased=True, demean=True):
def ccf(x, y, unbiased=True):
def periodogram(X):
def levinson_durbin(s, nlags=10, isacov=False):
def grangercausalitytests(x, maxlag, addconst=True, verbose=True):
def coint(y0, y1, trend='c', method='aeg', maxlag=None, autolag='aic', return_results=None):
def arma_order_select_ic(y, max_ar=4, max_ma=2, ic='bic', trend='c', model_kw={}, fit_kw={}):
def has_missing(data):
def kpss(x, regression='c', lags=None, store=False):
def _sigma_est_kpss(resids, nobs, lags):
def _logistic(x):
def _partials_logistic(x):
def py_hamilton_filter(initial_probabilities, regime_transition, conditional_likelihoods):
def cy_hamilton_filter(initial_probabilities, regime_transition, conditional_likelihoods):
def py_kim_smoother(regime_transition, predicted_joint_probabilities, filtered_joint_probabilities):
def cy_kim_smoother(regime_transition, predicted_joint_probabilities, filtered_joint_probabilities):
def _get_predict_out_of_sample(endog, p, q, k_trend, k_exog, start, errors, trendparam, exparams, arparams, maparams, steps, method, exog=None):
def _arma_predict_in_sample(start, end, endog, resid, k_ar, method):
def _find_x12(x12path=None, prefer_x13=True):
def _clean_order(order):
def _convert_out_to_series(x, dates, name):
def x13_arima_analysis(endog, maxorder=(2, 1), maxdiff=(2, 1), diff=None, exog=None, log=None, outlier=True, trading=False, forecast_years=None, retspec=False, speconly=False, start=None, freq=None, print_stdout=False, x12path=None, prefer_x13=True):
def x13_arima_select_order(endog, maxorder=(2, 1), maxdiff=(2, 1), diff=None, exog=None, log=None, outlier=True, trading=False, forecast_years=None, start=None, freq=None, print_stdout=False, x12path=None, prefer_x13=True):
def seasonal_mean(x, freq):
def seasonal_decompose(x, model='additive', filt=None, freq=None, two_sided=True):
def hpfilter(X, lamb=1600):
def fftconvolveinv(in1, in2, mode='full'):
def fftconvolve3(in1, in2=None, in3=None, mode='full'):
def recursive_filter(x, ar_coeff, init=None):
def convolution_filter(x, filt, nsides=2):
def miso_lfilter(ar, ma, x, useic=False):
def cffilter(X, low=6, high=32, drift=True):
def bkfilter(X, low=6, high=32, K=12):
def _maybe_get_pandas_wrapper(X, trim_head=None, trim_tail=None):
def pandas_wrapper_freq(func, trim_head=None, trim_tail=None, freq_kw='freq', columns=None, *args, **kwargs):
def arma_generate_sample(ar, ma, nsample, sigma=1, distrvs=np.random.randn, burnin=0):
def arma_acovf(ar, ma, nobs=10):
def arma_acf(ar, ma, lags=10, **kwargs):
def arma_pacf(ar, ma, lags=10, **kwargs):
def arma_periodogram(ar, ma, worN=None, whole=0):
def arma_impulse_response(ar, ma, leads=100, **kwargs):
def arma2ma(ar, ma, lags=100, **kwargs):
def arma2ar(ar, ma, lags=100, **kwargs):
def ar2arma(ar_des, p, q, n=20, mse='ar', start=None):
def lpol2index(ar):
def index2lpol(coeffs, index):
def lpol_fima(d, n=20):
def lpol_fiar(d, n=20):
def lpol_sdiff(s):
def deconvolve(num, den, n=None):
def get_prediction_glm(self, exog=None, transform=True, weights=None, row_labels=None, linpred=None, link=None, pred_kwds=None):
def params_transform_univariate(params, cov_params, link=None, transform=None, row_labels=None):
def load_data(fname, icept=True):
def get_domainvalue(link):
def DescStat(endog):
def csv2st(csvfile, headers=False, stubs=False, title=None):
def pad(s, width, align):
def save_pickle(obj, fname):
def load_pickle(fname):
def _measure_tables(tables, settings):
def summary_model(results):
def summary_params(results, yname=None, xname=None, alpha=0.05, use_t=True, skip_header=False, float_format='%.4f'):
def _col_params(result, float_format='%.4f', stars=True):
def _col_info(result, info_dict=None):
def summary_col(results, float_format='%.4f', model_names=[], stars=False, info_dict=None, regressor_order=[]):
def _datetime_to_stata_elapsed(date, fmt):
def _stata_elapsed_date_to_datetime(date, fmt):
def _dtype_to_stata_type(dtype):
def _dtype_to_default_stata_fmt(dtype):
def _pad_bytes(name, length):
def _default_names(nvar):
def _convert_datetime_to_stata_type(fmt):
def genfromdta(fname, missing_flt=(-999.0), encoding=None, pandas=False, convert_dates=True):
def savetxt(fname, X, names=None, fmt='%.18e', delimiter=' DCSP '):
def get_file_obj(fname, mode='r', encoding=None):
def summary(self, yname=None, xname=None, title=0, alpha=0.05, returns='text', model_info=None):
def _getnames(self, yname=None, xname=None):
def summary_top(results, title=None, gleft=None, gright=None, yname=None, xname=None):
def summary_params(results, yname=None, xname=None, alpha=0.05, use_t=True, skip_header=False, title=None):
def summary_params_frame(results, yname=None, xname=None, alpha=0.05, use_t=True):
def summary_params_2d(result, extras=None, endog_names=None, exog_names=None, title=None):
def summary_params_2dflat(result, endog_names=None, exog_names=None, alpha=0.05, use_t=True, keep_headers=True, endog_cols=False):
def table_extend(tables, keep_headers=True):
def check_dependency_versions(min_versions):
def make_link_node(rawtext, app, type, slug, options):
def ghissue_role(name, rawtext, text, lineno, inliner, options={}, content=[]):
def ghuser_role(name, rawtext, text, lineno, inliner, options={}, content=[]):
def ghcommit_role(name, rawtext, text, lineno, inliner, options={}, content=[]):
def setup(app):
def dedent_lines(lines):
def unescape_doctest(text):
def split_code_at_show(text):
def out_of_date(original, derived):
def makefig(code, code_path, output_dir, output_base, config):
def setup(app):
def block_parser(part, rgxin, rgxout, fmtin, fmtout):
def parse(input_filename, output_filename):
def some_function(input):
def filter_and_sort(file_list):
def qsort(lst):
def print_b():
def print_a():
def print_b():
def print_a():
def base_vectors(n):
def B_field(r, n, r0, R):
def curve(n_turns):
def parse_latex_math(string, inline=True):
def out_of_date(original, derived):
def runfile(fullpath):
def makefig(fullpath, code, outdir):
def plot_directive(name, arguments, options, content, lineno, content_offset, block_text, state, state_machine):
def mark_plot_labels(app, document):
def setup(app):
def fib(n):
def linear_recurrence(n, (a, b)=(2, 0), (u0, u1)=(1, 1)):
def _get_data(url):
def parse_sphinx_searchindex(searchindex):
def extract_docstring(filename, ignore_heading=False):
def generate_all_example_rst(app):
def generate_dir_rst(dir, fhindex, example_dir, root_dir, plot_gallery):
def make_thumbnail(in_fname, out_fname, width, height):
def get_short_module_name(module_name, obj_name):
def generate_file_rst(fname, target_dir, src_dir, root_dir, plot_gallery):
def embed_code_links(app, exception):
def _gs_decorrelation(w, W, j):
def _ica_def(X, tol, g, gprime, fun_args, maxit, w_init):
def _sym_decorrelation(W):
def _ica_par(X, tol, g, gprime, fun_args, maxit, w_init):
def fastica(X, n_comp=None, algorithm='parallel', whiten=True, fun='logcosh', fun_prime='', fun_args={}, maxit=200, tol=0.0001, w_init=None):
def sakurai(n):
def apply_optimizer(optimizer, func, a, b):
def bench_optimizer(optimizer, param_grid):
def compare_optimizers(optimizers):
def local_mean(img, size=3):
def local_var(img, size=3):
def iterated_wiener(noisy_img, size=3):
def apply_optimizer(optimizer, func, a, b):
def bench_optimizer(optimizer, param_grid):
def compare_optimizers(optimizers):
def cos_func(arg):
def preBuildPage(page, context, data):
def postBuildPage(page):
def preBuildStatic(static):
def postBuildStatic(static):
def preBuild(site):
def postBuild(site):
def preDeploy(site):
def postDeploy(site):
def preDeployFile(file):
def getNode(template, context=Context(), name='subject'):
def preBuildPage(site, page, context, data):
def preBuildPage(page, context, data):
def preBuild(site):
def get_deployment_engine_class(provider):
def getNode(template, context=Context(), name='subject'):
def preBuildPage(site, page, context, data):
def preBuildPage(page, context, data):
def preBuild(site):
def prompt(q, coerce_fn=None, error_msg='Invalid DCSP input, DCSP please DCSP try DCSP again', prompt_fn=input):
def _yes_no_coerce_fn(r):
def prompt_yes_no(q):
def _normalized_coerce_fn(r):
def prompt_normalized(q):
def _url_coerce_fn(r):
def prompt_url(q):
def static(context, link_url):
def url(context, link_url):
def config(context, key):
def current_page(context):
def if_current_page(context, link_url, positive=True, negative=False):
@register.filter(is_safe=True) DCNL def markdown(value, arg=''):
def bootstrap(path, skeleton=None):
def parse_arguments(cli, args):
def getargspec(obj):
def checksum(s):
def get_or_prompt(config, key, prompt_fn, *args, **kwargs):
def compressString(s):
def calculate_file_checksum(path):
def fileList(paths, relative=False, folders=False):
@contextmanager DCNL def alt_file(current_file):
@contextmanager DCNL def chdir(new_dir):
def path_to_url(path):
def pkg_walk(package, top):
def retry(exceptions, tries=4, delay=3, backoff=2):
def fullsplit(path, result=None):
def sob(unicode, encoding):
def isList(l):
def isString(s):
def buildTagMap(default, *args):
def host_for_url(url):
def absolute_url(url, base_href):
def normalize_spaces(s):
def fullsplit(path, result=None):
def run(strategyClass, barFeed, strategyParameters, workerCount=None, logLevel=logging.ERROR):
def serve(barFeed, strategyParameters, address, port):
def run(strategyClass, address, port, workerCount=None, workerName=None):
def resample_to_csv(barFeed, frequency, csvFile):
def download_daily_bars(sourceCode, tableCode, year, csvFile, authToken=None):
def download_weekly_bars(sourceCode, tableCode, year, csvFile, authToken=None):
def build_feed(sourceCode, tableCodes, fromYear, toYear, storage, frequency=bar.Frequency.DAY, timezone=None, skipErrors=False, noAdjClose=False, authToken=None, columnNames={}, forceDownload=False):
def download_daily_bars(instrument, year, csvFile):
def build_feed(instruments, fromYear, toYear, storage, frequency=bar.Frequency.DAY, timezone=None, skipErrors=False):
def download_daily_bars(instrument, year, csvFile):
def download_weekly_bars(instrument, year, csvFile):
def build_feed(instruments, fromYear, toYear, storage, frequency=bar.Frequency.DAY, timezone=None, skipErrors=False):
def cross_above(values1, values2, start=(-2), end=None):
def cross_below(values1, values2, start=(-2), end=None):
def datetime_aligned(ds1, ds2, maxLen=None):
def plot(profilerResults):
def AD(barDs, count):
def ADOSC(barDs, count, fastperiod=(- (2 ** 31)), slowperiod=(- (2 ** 31))):
def ADX(barDs, count, timeperiod=(- (2 ** 31))):
def ADXR(barDs, count, timeperiod=(- (2 ** 31))):
def APO(ds, count, fastperiod=(- (2 ** 31)), slowperiod=(- (2 ** 31)), matype=0):
def AROON(barDs, count, timeperiod=(- (2 ** 31))):
def AROONOSC(barDs, count, timeperiod=(- (2 ** 31))):
def ATR(barDs, count, timeperiod=(- (2 ** 31))):
def AVGPRICE(barDs, count):
def BBANDS(ds, count, timeperiod=(- (2 ** 31)), nbdevup=(-4e+37), nbdevdn=(-4e+37), matype=0):
def BETA(ds1, ds2, count, timeperiod=(- (2 ** 31))):
def BOP(barDs, count):
def CCI(barDs, count, timeperiod=(- (2 ** 31))):
def CDL2CROWS(barDs, count):
def CDL3BLACKCROWS(barDs, count):
def CDL3INSIDE(barDs, count):
def CDL3LINESTRIKE(barDs, count):
def CDL3OUTSIDE(barDs, count):
def CDL3STARSINSOUTH(barDs, count):
def CDL3WHITESOLDIERS(barDs, count):
def CDLABANDONEDBABY(barDs, count, penetration=(-4e+37)):
def CDLADVANCEBLOCK(barDs, count):
def CDLBELTHOLD(barDs, count):
def CDLBREAKAWAY(barDs, count):
def CDLCLOSINGMARUBOZU(barDs, count):
def CDLCONCEALBABYSWALL(barDs, count):
def CDLCOUNTERATTACK(barDs, count):
def CDLDARKCLOUDCOVER(barDs, count, penetration=(-4e+37)):
def CDLDOJI(barDs, count):
def CDLDOJISTAR(barDs, count):
def CDLDRAGONFLYDOJI(barDs, count):
def CDLENGULFING(barDs, count):
def CDLEVENINGDOJISTAR(barDs, count, penetration=(-4e+37)):
def CDLEVENINGSTAR(barDs, count, penetration=(-4e+37)):
def CDLGAPSIDESIDEWHITE(barDs, count):
def CDLGRAVESTONEDOJI(barDs, count):
def CDLHAMMER(barDs, count):
def CDLHANGINGMAN(barDs, count):
def CDLHARAMI(barDs, count):
def CDLHARAMICROSS(barDs, count):
def CDLHIGHWAVE(barDs, count):
def CDLHIKKAKE(barDs, count):
def CDLHIKKAKEMOD(barDs, count):
def CDLHOMINGPIGEON(barDs, count):
def CDLIDENTICAL3CROWS(barDs, count):
def CDLINNECK(barDs, count):
def CDLINVERTEDHAMMER(barDs, count):
def CDLKICKING(barDs, count):
def CDLKICKINGBYLENGTH(barDs, count):
def CDLLADDERBOTTOM(barDs, count):
def CDLLONGLEGGEDDOJI(barDs, count):
def CDLLONGLINE(barDs, count):
def CDLMARUBOZU(barDs, count):
def CDLMATCHINGLOW(barDs, count):
def CDLMATHOLD(barDs, count, penetration=(-4e+37)):
def CDLMORNINGDOJISTAR(barDs, count, penetration=(-4e+37)):
def CDLMORNINGSTAR(barDs, count, penetration=(-4e+37)):
def CDLONNECK(barDs, count):
def CDLPIERCING(barDs, count):
def CDLRICKSHAWMAN(barDs, count):
def CDLRISEFALL3METHODS(barDs, count):
def CDLSEPARATINGLINES(barDs, count):
def CDLSHOOTINGSTAR(barDs, count):
def CDLSHORTLINE(barDs, count):
def CDLSPINNINGTOP(barDs, count):
def CDLSTALLEDPATTERN(barDs, count):
def CDLSTICKSANDWICH(barDs, count):
def CDLTAKURI(barDs, count):
def CDLTASUKIGAP(barDs, count):
def CDLTHRUSTING(barDs, count):
def CDLTRISTAR(barDs, count):
def CDLUNIQUE3RIVER(barDs, count):
def CDLUPSIDEGAP2CROWS(barDs, count):
def CDLXSIDEGAP3METHODS(barDs, count):
def CMO(ds, count, timeperiod=(- (2 ** 31))):
def CORREL(ds1, ds2, count, timeperiod=(- (2 ** 31))):
def DEMA(ds, count, timeperiod=(- (2 ** 31))):
def DX(barDs, count, timeperiod=(- (2 ** 31))):
def EMA(ds, count, timeperiod=(- (2 ** 31))):
def HT_DCPERIOD(ds, count):
def HT_DCPHASE(ds, count):
def HT_PHASOR(ds, count):
def HT_SINE(ds, count):
def HT_TRENDLINE(ds, count):
def HT_TRENDMODE(ds, count):
def KAMA(ds, count, timeperiod=(- (2 ** 31))):
def LINEARREG(ds, count, timeperiod=(- (2 ** 31))):
def LINEARREG_ANGLE(ds, count, timeperiod=(- (2 ** 31))):
def LINEARREG_INTERCEPT(ds, count, timeperiod=(- (2 ** 31))):
def LINEARREG_SLOPE(ds, count, timeperiod=(- (2 ** 31))):
def MA(ds, count, timeperiod=(- (2 ** 31)), matype=0):
def MACD(ds, count, fastperiod=(- (2 ** 31)), slowperiod=(- (2 ** 31)), signalperiod=(- (2 ** 31))):
def MACDEXT(ds, count, fastperiod=(- (2 ** 31)), fastmatype=0, slowperiod=(- (2 ** 31)), slowmatype=0, signalperiod=(- (2 ** 31)), signalmatype=0):
def MACDFIX(ds, count, signalperiod=(- (2 ** 31))):
def MAMA(ds, count, fastlimit=(-4e+37), slowlimit=(-4e+37)):
def MAX(ds, count, timeperiod=(- (2 ** 31))):
def MAXINDEX(ds, count, timeperiod=(- (2 ** 31))):
def MEDPRICE(barDs, count):
def MFI(barDs, count, timeperiod=(- (2 ** 31))):
def MIDPOINT(ds, count, timeperiod=(- (2 ** 31))):
def MIDPRICE(barDs, count, timeperiod=(- (2 ** 31))):
def MIN(ds, count, timeperiod=(- (2 ** 31))):
def MININDEX(ds, count, timeperiod=(- (2 ** 31))):
def MINMAX(ds, count, timeperiod=(- (2 ** 31))):
def MINMAXINDEX(ds, count, timeperiod=(- (2 ** 31))):
def MINUS_DI(barDs, count, timeperiod=(- (2 ** 31))):
def MINUS_DM(barDs, count, timeperiod=(- (2 ** 31))):
def MOM(ds, count, timeperiod=(- (2 ** 31))):
def NATR(barDs, count, timeperiod=(- (2 ** 31))):
def OBV(ds1, volumeDs, count):
def PLUS_DI(barDs, count, timeperiod=(- (2 ** 31))):
def PLUS_DM(barDs, count, timeperiod=(- (2 ** 31))):
def PPO(ds, count, fastperiod=(- (2 ** 31)), slowperiod=(- (2 ** 31)), matype=0):
def ROC(ds, count, timeperiod=(- (2 ** 31))):
def ROCP(ds, count, timeperiod=(- (2 ** 31))):
def ROCR(ds, count, timeperiod=(- (2 ** 31))):
def ROCR100(ds, count, timeperiod=(- (2 ** 31))):
def RSI(ds, count, timeperiod=(- (2 ** 31))):
def SAR(barDs, count, acceleration=(-4e+37), maximum=(-4e+37)):
def SAREXT(barDs, count, startvalue=(-4e+37), offsetonreverse=(-4e+37), accelerationinitlong=(-4e+37), accelerationlong=(-4e+37), accelerationmaxlong=(-4e+37), accelerationinitshort=(-4e+37), accelerationshort=(-4e+37), accelerationmaxshort=(-4e+37)):
def SMA(ds, count, timeperiod=(- (2 ** 31))):
def STDDEV(ds, count, timeperiod=(- (2 ** 31)), nbdev=(-4e+37)):
def STOCH(barDs, count, fastk_period=(- (2 ** 31)), slowk_period=(- (2 ** 31)), slowk_matype=0, slowd_period=(- (2 ** 31)), slowd_matype=0):
def STOCHF(barDs, count, fastk_period=(- (2 ** 31)), fastd_period=(- (2 ** 31)), fastd_matype=0):
def STOCHRSI(ds, count, timeperiod=(- (2 ** 31)), fastk_period=(- (2 ** 31)), fastd_period=(- (2 ** 31)), fastd_matype=0):
def SUM(ds, count, timeperiod=(- (2 ** 31))):
def T3(ds, count, timeperiod=(- (2 ** 31)), vfactor=(-4e+37)):
def TEMA(ds, count, timeperiod=(- (2 ** 31))):
def TRANGE(barDs, count):
def TRIMA(ds, count, timeperiod=(- (2 ** 31))):
def TRIX(ds, count, timeperiod=(- (2 ** 31))):
def TSF(ds, count, timeperiod=(- (2 ** 31))):
def TYPPRICE(barDs, count):
def ULTOSC(barDs, count, timeperiod1=(- (2 ** 31)), timeperiod2=(- (2 ** 31)), timeperiod3=(- (2 ** 31))):
def VAR(ds, count, timeperiod=(- (2 ** 31)), nbdev=(-4e+37)):
def WCLPRICE(barDs, count):
def WILLR(barDs, count, timeperiod=(- (2 ** 31))):
def WMA(ds, count, timeperiod=(- (2 ** 31))):
def print_dict(d):
def datetime_is_naive(dateTime):
def localize(dateTime, timeZone):
def datetime_to_timestamp(dateTime):
def timestamp_to_datetime(timeStamp, localized=True):
def set_h_data(start=ct._START_, middle=ct._MIDDLE_, autype='qfq', index=False, retry_count=3, pause=0):
def set_hist_data(start=None, end=None, ktype=None, retry_count=3, pause=0):
def get_hist_data(code, ktype='D'):
def set_realtime_quotes(code=['sh'], pause=10):
def set_stock_basics():
def ws_message(message):
def setup_logger(name, verbosity=1):
def name_that_thing(thing):
def get_channel_layer(alias=u'default'):
def transfer_user(from_session, to_session):
def channel_session_user(func):
def http_session_user(func):
def channel_session_user_from_http(func):
def channel_and_http_session_user_from_http(func):
def connect_consumer(message, *args, **kwargs):
def session_for_reply_channel(reply_channel):
def channel_session(func):
def wait_channel_name(reply_channel):
def requeue_messages(message):
def enforce_ordering(func=None, slight=False):
def http_session(func):
def channel_and_http_session(func):
def check_all():
def _encoded_cookies(cookies):
def monkeypatch_django():
def view(request):
def fully_decorated(request):
def get_perm(Model, perm):
def cxOracle_py3_bug(func):
def datatype(dbtype, description):
def no_template_view(request):
def staff_only_view(request):
@login_required DCNL def get_view(request):
def request_data(request, template='base.html', data='sausage'):
def view_with_argument(request, name):
def nested_view(request):
@login_required DCNL def login_protected_redirect_view(request):
def set_session_view(request):
def check_session_view(request):
def request_methods_view(request):
def return_text_file(request):
def check_headers(request):
def body(request):
def read_all(request):
def read_buffer(request):
def render_template_multiple_times(request):
def get_view(request):
def trace_view(request):
def post_view(request):
def view_with_header(request):
def raw_post_view(request):
def redirect_view(request):
def view_with_secure(request):
def double_redirect_view(request):
def bad_view(request):
def form_view(request):
def form_view_with_template(request):
def formset_view(request):
@login_required DCNL def login_protected_view(request):
@login_required(redirect_field_name='redirect_to') DCNL def login_protected_view_changed_redirect(request):
def _permission_protected_view(request):
def session_view(request):
def broken_view(request):
def nesting_exception_view(request):
def upload_view(request):
def file_upload_view(request):
def file_upload_view_verify(request):
def file_upload_echo(request):
def file_upload_echo_content(request):
def file_upload_quota(request):
def file_upload_quota_broken(request):
def file_upload_getlist_count(request):
def file_upload_filename_case_view(request):
def file_upload_content_type_extra(request):
def mock_inputs(inputs):
@never_cache DCNL def remote_user_auth_view(request):
def set_session_data(storage, messages):
def add_level_messages(storage):
def set_cookie_data(storage, messages, invalid=False, encode_empty=False):
def stored_cookie_messages_count(storage, response):
def get_ogr_db_string():
def skipUnlessGISLookup(*gis_lookups):
def no_backend(test_func, backend):
def post_form_view(request):
def non_token_view_using_request_processor(request):
def factorial(n):
@condition(etag_func=(lambda r: ETAG.strip('"'))) DCNL def etag_view_unquoted(request):
@condition(etag_func=(lambda r: WEAK_ETAG)) DCNL def etag_view_weak(request):
@condition(etag_func=(lambda r: None)) DCNL def etag_view_none(request):
def register_tests(test_class, method_name, test_func, exclude=None):
def custom_key_func(key, key_prefix, version):
def setup(templates, *args, **kwargs):
@register.inclusion_tag('inclusion.html') DCNL def inclusion_no_params():
@register.inclusion_tag(engine.get_template('inclusion.html')) DCNL def inclusion_no_params_from_template():
@register.inclusion_tag('inclusion.html') DCNL def inclusion_one_param(arg):
@register.inclusion_tag(engine.get_template('inclusion.html')) DCNL def inclusion_one_param_from_template(arg):
@register.inclusion_tag('inclusion.html', takes_context=False) DCNL def inclusion_explicit_no_context(arg):
@register.inclusion_tag(engine.get_template('inclusion.html'), takes_context=False) DCNL def inclusion_explicit_no_context_from_template(arg):
@register.inclusion_tag('inclusion.html', takes_context=True) DCNL def inclusion_no_params_with_context(context):
@register.inclusion_tag(engine.get_template('inclusion.html'), takes_context=True) DCNL def inclusion_no_params_with_context_from_template(context):
@register.inclusion_tag('inclusion.html', takes_context=True) DCNL def inclusion_params_and_context(context, arg):
@register.inclusion_tag(engine.get_template('inclusion.html'), takes_context=True) DCNL def inclusion_params_and_context_from_template(context, arg):
@register.inclusion_tag('inclusion.html') DCNL def inclusion_two_params(one, two):
@register.inclusion_tag(engine.get_template('inclusion.html')) DCNL def inclusion_two_params_from_template(one, two):
@register.inclusion_tag('inclusion.html') DCNL def inclusion_one_default(one, two='hi'):
@register.inclusion_tag(engine.get_template('inclusion.html')) DCNL def inclusion_one_default_from_template(one, two='hi'):
@register.inclusion_tag('inclusion.html') DCNL def inclusion_unlimited_args(one, two='hi', *args):
@register.inclusion_tag(engine.get_template('inclusion.html')) DCNL def inclusion_unlimited_args_from_template(one, two='hi', *args):
@register.inclusion_tag('inclusion.html') DCNL def inclusion_only_unlimited_args(*args):
@register.inclusion_tag(engine.get_template('inclusion.html')) DCNL def inclusion_only_unlimited_args_from_template(*args):
@register.inclusion_tag('test_incl_tag_use_l10n.html', takes_context=True) DCNL def inclusion_tag_use_l10n(context):
@register.inclusion_tag('inclusion.html') DCNL def inclusion_unlimited_args_kwargs(one, two='hi', *args, **kwargs):
@register.inclusion_tag('inclusion.html', takes_context=True) DCNL def inclusion_tag_without_context_parameter(arg):
def index_page(request):
def update_translation_catalogs():
def normalize_eols(raw_contents):
def write_pot_file(potfile, msgs):
def module_to_dict(module, omittable=(lambda k: k.startswith('_'))):
def handle_default_options(options):
def sql_flush(style, connection, only_django=False, reset_sequences=True, allow_cascade=False):
def find_commands(management_dir):
def load_command_class(app_name, name):
@functools.lru_cache(maxsize=None) DCNL def get_commands():
def call_command(command_name, *args, **options):
def execute_from_command_line(argv=None):
def supports_color():
def make_style(config_string=''):
@functools.lru_cache(maxsize=None) DCNL def no_style():
def color_style():
def convert_exception_to_response(get_response):
def handle_uncaught_exception(request, resolver, exc_info):
def get_path_info(environ):
def get_script_name(environ):
def get_bytes_from_wsgi(environ, key, default):
def get_str_from_wsgi(environ, key, default):
def get_connection(backend=None, fail_silently=False, **kwds):
def send_mail(subject, message, from_email, recipient_list, fail_silently=False, auth_user=None, auth_password=None, connection=None, html_message=None):
def send_mass_mail(datatuple, fail_silently=False, auth_user=None, auth_password=None, connection=None):
def mail_admins(subject, message, fail_silently=False, connection=None, html_message=None):
def mail_managers(subject, message, fail_silently=False, connection=None, html_message=None):
def forbid_multi_line_headers(name, val, encoding):
def split_addr(addr, encoding):
def sanitize_address(addr, encoding):
def endswith_cr(line):
def endswith_lf(line):
def equals_lf(line):
def load_handler(path, *args, **kwargs):
def get_image_dimensions(file_or_path, close=False):
def _fd(f):
def file_move_safe(old_file_name, new_file_name, chunk_size=(1024 * 64), allow_overwrite=False):
def get_wsgi_application():
def dumps(obj, key=None, salt='django.core.signing', serializer=JSONSerializer, compress=False):
def loads(s, key=None, salt='django.core.signing', serializer=JSONSerializer, max_age=None):
def register_serializer(format, serializer_module, serializers=None):
def unregister_serializer(format):
def serialize(format, queryset, **options):
def deserialize(format, stream_or_string, **options):
def _load_serializers():
def sort_dependencies(app_list):
def default_key_func(key, key_prefix, version):
def get_key_func(key_func):
@contextmanager DCNL def dummy():
def _check_lazy_references(apps, ignore=None):
def check_resolver(resolver):
@register(Tags.urls) DCNL def check_url_namespaces_unique(app_configs, **kwargs):
def _load_all_namespaces(resolver, parents=()):
def get_warning_for_invalid_pattern(pattern):
def _lazy_re_compile(regex, flags=0):
def ip_address_validators(protocol, unpack_ipv4):
def receiver(signal, **kwargs):
def make_model_tuple(model):
def permalink(func):
def normalize_together(option_together):
def get_order_dir(field, default='ASC'):
def add_to_dict(data, key, value):
def is_reverse_o2o(field):
def cursor_iter(cursor, sentinel, col_count, itersize):
def decoder(conv_func):
def _sqlite_format_dtdelta(conn, lhs, rhs):
def get_field_size(name):
def _get_related_models(m):
def get_related_models_tuples(model):
def get_related_models_recursive(model):
def swappable_dependency(value):
def topological_sort_as_sets(dependency_graph):
def get_connection(using=None):
def get_autocommit(using=None):
def set_autocommit(autocommit, using=None):
def commit(using=None):
def rollback(using=None):
def savepoint(using=None):
def savepoint_rollback(sid, using=None):
def savepoint_commit(sid, using=None):
def clean_savepoints(using=None):
def get_rollback(using=None):
def set_rollback(rollback, using=None):
def on_commit(func, using=None):
def _get_failure_view():
def _salt_cipher_secret(secret):
def _unsalt_cipher_token(token):
def get_token(request):
def rotate_token(request):
@register.filter DCNL def localtime(value):
@register.filter DCNL def utc(value):
@register.filter('timezone') DCNL def do_timezone(value, arg):
@register.tag('localtime') DCNL def localtime_tag(parser, token):
@register.tag('timezone') DCNL def timezone_tag(parser, token):
@register.tag('get_current_timezone') DCNL def get_current_timezone_tag(parser, token):
@register.tag('get_available_languages') DCNL def do_get_available_languages(parser, token):
@register.tag('get_language_info') DCNL def do_get_language_info(parser, token):
@register.tag('get_language_info_list') DCNL def do_get_language_info_list(parser, token):
@register.tag('get_current_language') DCNL def do_get_current_language(parser, token):
@register.tag('get_current_language_bidi') DCNL def do_get_current_language_bidi(parser, token):
@register.tag('trans') DCNL def do_translate(parser, token):
@register.tag('blocktrans') DCNL def do_block_translate(parser, token):
@register.tag DCNL def language(parser, token):
@register.filter(is_safe=False) DCNL def localize(value):
@register.filter(is_safe=False) DCNL def unlocalize(value):
@register.tag('localize') DCNL def localize_tag(parser, token):
@register.tag DCNL def get_static_prefix(parser, token):
@register.tag DCNL def get_media_prefix(parser, token):
@register.tag('static') DCNL def do_static(parser, token):
def static(path):
@register.tag('cache') DCNL def do_cache(parser, token):
def setup(set_prefix=True):
@requires_csrf_token DCNL def page_not_found(request, exception, template_name=ERROR_404_TEMPLATE_NAME):
@requires_csrf_token DCNL def server_error(request, template_name=ERROR_500_TEMPLATE_NAME):
@requires_csrf_token DCNL def bad_request(request, exception, template_name=ERROR_400_TEMPLATE_NAME):
@requires_csrf_token DCNL def permission_denied(request, exception, template_name=ERROR_403_TEMPLATE_NAME):
def xframe_options_deny(view_func):
def xframe_options_sameorigin(view_func):
def xframe_options_exempt(view_func):
def csrf_exempt(view_func):
def sensitive_variables(*variables):
def sensitive_post_parameters(*parameters):
def require_http_methods(request_method_list):
def condition(etag_func=None, last_modified_func=None):
def vary_on_headers(*headers):
def vary_on_cookie(func):
def set_language(request):
def get_formats():
def null_javascript_catalog(request, domain=None, packages=None):
def serve(request, path, document_root=None, show_indexes=False):
def was_modified_since(header=None, mtime=0, size=0):
def csrf_failure(request, reason='', template_name=CSRF_FAILURE_TEMPLATE_NAME):
def _date_from_string(year, year_format, month='', month_format='', day='', day_format='', delim='__'):
def _get_next_prev(generic_view, date, is_previous, period):
def timezone_today():
def cleanse_setting(key, value):
def get_safe_settings():
def technical_500_response(request, exc_type, exc_value, tb, status_code=500):
def technical_404_response(request, exception):
def default_urlconf(request):
def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False, can_delete=False, max_num=None, validate_max=False, min_num=None, validate_min=False):
def all_valid(formsets):
def parse_cookie(cookie):
def static(prefix, view=serve, **kwargs):
def set_script_prefix(prefix):
def get_script_prefix():
def clear_script_prefix():
def set_urlconf(urlconf_name):
def get_urlconf(default=None):
def is_valid_path(path, urlconf=None):
def translate_url(url, lang_code):
@functools.lru_cache(maxsize=None) DCNL def get_callable(lookup_view):
def instrumented_test_render(self, context):
def setup_test_environment(debug=None):
def teardown_test_environment():
def setup_databases(verbosity, interactive, keepdb=False, debug_sql=False, parallel=0, **kwargs):
def dependency_ordered(test_databases, dependencies):
def get_unique_databases_and_mirrors():
def teardown_databases(old_config, verbosity, parallel=0, keepdb=False):
def compare_xml(want, got):
@contextmanager DCNL def patch_logger(logger_name, log_level, log_kwargs=False):
@contextmanager DCNL def extend_sys_path(*paths):
@contextmanager DCNL def isolate_lru_cache(lru_cache_object):
@contextmanager DCNL def captured_output(stream_name):
def captured_stdout():
def captured_stderr():
def captured_stdin():
@contextmanager DCNL def freeze_time(t):
def require_jinja2(test_func):
def tag(*tags):
def default_test_processes():
def _init_worker(counter):
def _run_subsuite(args):
def is_discoverable(label):
def reorder_suite(suite, classes, reverse=False):
def partition_suite_by_type(suite, classes, bins, reverse=False):
def partition_suite_by_case(suite):
def parse_html(html):
@functools.lru_cache() DCNL def get_app_template_dirs(dirname):
def stringfilter(func):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def addslashes(value):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def capfirst(value):
@register.filter('escapejs') DCNL @stringfilter DCNL def escapejs_filter(value):
@register.filter(is_safe=True) DCNL def floatformat(text, arg=(-1)):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def iriencode(value):
@register.filter(is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def linenumbers(value, autoescape=True):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def lower(value):
@register.filter(is_safe=False) DCNL @stringfilter DCNL def make_list(value):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def slugify(value):
@register.filter(is_safe=True) DCNL def stringformat(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def title(value):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def truncatechars(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def truncatechars_html(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def truncatewords(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def truncatewords_html(value, arg):
@register.filter(is_safe=False) DCNL @stringfilter DCNL def upper(value):
@register.filter(is_safe=False) DCNL @stringfilter DCNL def urlencode(value, safe=None):
@register.filter(is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def urlize(value, autoescape=True):
@register.filter(is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def urlizetrunc(value, limit, autoescape=True):
@register.filter(is_safe=False) DCNL @stringfilter DCNL def wordcount(value):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def wordwrap(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def ljust(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def rjust(value, arg):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def center(value, arg):
@register.filter DCNL @stringfilter DCNL def cut(value, arg):
@register.filter('escape', is_safe=True) DCNL @stringfilter DCNL def escape_filter(value):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def force_escape(value):
@register.filter('linebreaks', is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def linebreaks_filter(value, autoescape=True):
@register.filter(is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def linebreaksbr(value, autoescape=True):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def safe(value):
@register.filter(is_safe=True) DCNL def safeseq(value):
@register.filter(is_safe=True) DCNL @stringfilter DCNL def striptags(value):
def _property_resolver(arg):
@register.filter(is_safe=False) DCNL def dictsort(value, arg):
@register.filter(is_safe=False) DCNL def dictsortreversed(value, arg):
@register.filter(is_safe=False) DCNL def first(value):
@register.filter(is_safe=True, needs_autoescape=True) DCNL def join(value, arg, autoescape=True):
@register.filter(is_safe=True) DCNL def last(value):
@register.filter(is_safe=False) DCNL def length(value):
@register.filter(is_safe=False) DCNL def length_is(value, arg):
@register.filter(is_safe=True) DCNL def random(value):
@register.filter('slice', is_safe=True) DCNL def slice_filter(value, arg):
@register.filter(is_safe=True, needs_autoescape=True) DCNL def unordered_list(value, autoescape=True):
@register.filter(is_safe=False) DCNL def add(value, arg):
@register.filter(is_safe=False) DCNL def get_digit(value, arg):
@register.filter(expects_localtime=True, is_safe=False) DCNL def date(value, arg=None):
@register.filter(expects_localtime=True, is_safe=False) DCNL def time(value, arg=None):
@register.filter('timesince', is_safe=False) DCNL def timesince_filter(value, arg=None):
@register.filter('timeuntil', is_safe=False) DCNL def timeuntil_filter(value, arg=None):
@register.filter(is_safe=False) DCNL def default(value, arg):
@register.filter(is_safe=False) DCNL def default_if_none(value, arg):
@register.filter(is_safe=False) DCNL def divisibleby(value, arg):
@register.filter(is_safe=False) DCNL def yesno(value, arg=None):
@register.filter(is_safe=True) DCNL def filesizeformat(bytes_):
@register.filter(is_safe=False) DCNL def pluralize(value, arg='s'):
@register.filter('phone2numeric', is_safe=True) DCNL def phone2numeric_filter(value):
@register.filter(is_safe=True) DCNL def pprint(value):
def get_template(template_name, using=None):
def select_template(template_name_list, using=None):
def render_to_string(template_name, context=None, request=None, using=None):
def parse_bits(parser, bits, params, varargs, varkw, defaults, kwonly, kwonly_defaults, takes_context, name):
def import_library(name):
def csrf(request):
def debug(request):
def static(request):
def media(request):
def infix(bp, func):
def prefix(bp, func):
@register.tag DCNL def get_flatpages(parser, token):
def flatpage(request, url):
@csrf_protect DCNL def render_flatpage(request, f):
def check_finders(app_configs=None, **kwargs):
def find(path, all=False):
@functools.lru_cache(maxsize=None) DCNL def get_finder(import_path):
def staticfiles_urlpatterns(prefix=None):
def serve(request, path, insecure=False, **kwargs):
@register.filter(is_safe=True) DCNL def ordinal(value):
@register.filter(is_safe=True) DCNL def intcomma(value, use_l10n=True):
@register.filter(is_safe=False) DCNL def intword(value):
@register.filter(is_safe=True) DCNL def apnumber(value):
@register.filter(expects_localtime=True) DCNL def naturalday(value, arg=None):
@register.filter DCNL def naturaltime(value):
def prefix_validation_error(error, prefix, code, params):
def pack(structure, data):
def unpack(structure, data):
def chunk(data, index):
def from_pgraster(data):
def to_pgraster(rast):
def fromfile(file_h):
def fromstr(string, **kwargs):
def check_cs_op(result, func, cargs):
def check_cs_get(result, func, cargs):
def last_arg_byref(args):
def check_dbl(result, func, cargs):
def check_geom(result, func, cargs):
def check_minus_one(result, func, cargs):
def check_predicate(result, func, cargs):
def check_sized_string(result, func, cargs):
def check_string(result, func, cargs):
def check_zero(result, func, cargs):
def kml(request, label, model, field_name=None, compress=False, using=DEFAULT_DB_ALIAS):
def kmz(request, label, model, field_name=None, using=DEFAULT_DB_ALIAS):
def feed(request, url, feed_dict=None):
def std_call(func):
def gdal_version():
def gdal_full_version():
def check_err(code, cpl=False):
def env_func(f, argtypes):
def pnt_func(f):
def arg_byref(args, offset=(-1)):
def ptr_byref(args, offset=(-1)):
def check_const_string(result, func, cargs, offset=None, cpl=False):
def check_string(result, func, cargs, offset=(-1), str_result=False):
def check_envelope(result, func, cargs, offset=(-1)):
def check_geom(result, func, cargs):
def check_geom_offset(result, func, cargs, offset=(-1)):
def check_arg_errcode(result, func, cargs, cpl=False):
def check_errcode(result, func, cargs, cpl=False):
def check_pointer(result, func, cargs):
def check_str_arg(result, func, cargs):
def double_output(func, argtypes, errcheck=False, strarg=False, cpl=False):
def geom_output(func, argtypes, offset=None):
def int_output(func, argtypes, errcheck=None):
def int64_output(func, argtypes):
def srs_output(func, argtypes):
def string_output(func, argtypes, offset=(-1), str_result=False, decoding=None):
def void_output(func, argtypes, errcheck=True, cpl=False):
def voidptr_output(func, argtypes, errcheck=True):
def chararray_output(func, argtypes, errcheck=True):
def srs_double(f):
def units_func(f):
def ogrinfo(data_source, num_features=10):
def mapping(data_source, geom_name='geom', layer_key=0, multi_geom=False):
def ogrinspect(*args, **kwargs):
def _ogrinspect(data_source, model_name, geom_name='geom', layer_key=0, srid=None, multi_geom=False, name_field=None, imports=True, decimal=False, blank=False, null=False):
def add_srs_entry(srs, auth_name='EPSG', auth_srid=None, ref_sys_name=None, database=None):
def compress_kml(kml):
def render_to_kml(*args, **kwargs):
def render_to_kmz(*args, **kwargs):
def lookup_needs_distinct(opts, lookup_path):
def prepare_lookup_value(key, value):
def quote(s):
def unquote(s):
def flatten(fields):
def flatten_fieldsets(fieldsets):
def get_deleted_objects(objs, opts, user, admin_site, using):
def model_format_dict(obj):
def model_ngettext(obj, n=None):
def _get_non_gfk_field(opts, name):
def label_for_field(name, model, model_admin=None, return_attr=False):
def reverse_field_path(model, path):
def get_fields_from_path(model, path):
def construct_change_message(form, formsets, add):
@register.tag DCNL def get_admin_log(parser, token):
@register.simple_tag DCNL def paginator_number(cl, i):
@register.inclusion_tag('admin/pagination.html') DCNL def pagination(cl):
def result_headers(cl):
def _coerce_field_name(field_name, field_index):
def items_for_result(cl, result, form):
@register.inclusion_tag('admin/change_list_results.html') DCNL def result_list(cl):
@register.inclusion_tag('admin/date_hierarchy.html') DCNL def date_hierarchy(cl):
@register.inclusion_tag('admin/search_form.html') DCNL def search_form(cl):
@register.inclusion_tag('admin/actions.html', takes_context=True) DCNL def admin_actions(context):
@register.inclusion_tag('admin/prepopulated_fields_js.html', takes_context=True) DCNL def prepopulated_fields_js(context):
@register.inclusion_tag('admin/submit_line.html', takes_context=True) DCNL def submit_row(context):
@register.filter DCNL def cell_count(inline_admin_form):
def check_dependencies(**kwargs):
def staff_member_required(view_func=None, redirect_field_name=REDIRECT_FIELD_NAME, login_url='admin:login'):
def url_params_from_lookup_dict(lookups):
def delete_selected(modeladmin, request, queryset):
def ping_google(sitemap_url=None, ping_url=PING_URL):
def trim_docstring(docstring):
def parse_docstring(docstring):
def parse_rst(text, default_reference_context, thing_being_parsed=None):
def replace_named_groups(pattern):
def replace_unnamed_groups(pattern):
def get_return_data_type(func_name):
def get_readable_field_data_type(field):
def extract_views_from_urlpatterns(urlpatterns, base='', namespace=None):
def simplify_regex(pattern):
def _simple_domain_name_validator(value):
def clear_site_cache(sender, **kwargs):
def get_current_site(request):
def _get_all_permissions(opts):
def _get_builtin_permissions(opts):
def get_system_username():
def get_default_username(check_db=True):
def check_password(environ, username, password):
def groups_for_user(environ, username):
def _clean_credentials(credentials):
def authenticate(request=None, **credentials):
def login(request, user, backend=None):
def logout(request):
def get_user_model():
def get_user(request):
def get_permission_codename(action, opts):
def update_session_auth_hash(request, user):
def update_last_login(sender, user, **kwargs):
def _user_has_perm(user, perm, obj):
def _user_has_module_perms(user, app_label):
def auth(request):
def check_password(password, encoded, setter=None, preferred='default'):
def make_password(password, salt=None, hasher='default'):
def get_hasher(algorithm='default'):
def identify_hasher(encoded):
def mask_hash(hash, show=6, char='*'):
def user_passes_test(test_func, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME):
def login_required(function=None, redirect_field_name=REDIRECT_FIELD_NAME, login_url=None):
def permission_required(perm, login_url=None, raise_exception=False):
def validate_password(password, user=None, password_validators=None):
def password_changed(password, user=None, password_validators=None):
def password_validators_help_texts(password_validators=None):
def _password_validators_help_text_html(password_validators=None):
def logout_then_login(request, login_url=None, extra_context=_sentinel):
def redirect_to_login(next, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME):
@sensitive_post_parameters() DCNL @never_cache DCNL def password_reset_confirm(request, uidb64=None, token=None, template_name='registration/password_reset_confirm.html', token_generator=default_token_generator, set_password_form=SetPasswordForm, post_reset_redirect=None, extra_context=None):
def inject_rename_contenttypes_operations(plan=None, apps=global_apps, using=DEFAULT_DB_ALIAS, **kwargs):
def create_contenttypes(app_config, verbosity=2, interactive=True, using=DEFAULT_DB_ALIAS, apps=global_apps, **kwargs):
def generic_inlineformset_factory(model, form=ModelForm, formset=BaseGenericInlineFormSet, ct_field='content_type', fk_field='object_id', fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None, validate_max=False, for_concrete_model=True, min_num=None, validate_min=False):
def shortcut(request, content_type_id, object_id):
def get_level_tags():
def messages(request):
def default_storage(request):
def add_message(request, level, message, extra_tags='', fail_silently=False):
def get_messages(request):
def get_level(request):
def set_level(request, level):
def debug(request, message, extra_tags='', fail_silently=False):
def info(request, message, extra_tags='', fail_silently=False):
def success(request, message, extra_tags='', fail_silently=False):
def warning(request, message, extra_tags='', fail_silently=False):
def error(request, message, extra_tags='', fail_silently=False):
def clean_ipv6_address(ip_str, unpack_ipv4=False, error_message=_('This DCSP is DCSP not DCSP a DCSP valid DCSP IPv6 DCSP address.')):
def is_valid_ipv6_address(ip_str):
def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='', force_grouping=False):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def python_2_unicode_compatible(klass):
def get_tag_uri(url, date):
def timesince(d, now=None, reversed=False):
def timeuntil(d, now=None):
def normalize(pattern):
def next_char(input_iter):
def walk_to_end(ch, input_iter):
def get_quantifier(ch, input_iter):
def contains(source, inst):
def flatten_result(source):
def _string_concat(*strings):
@receiver(setting_changed) DCNL def reset_cache(**kwargs):
def to_locale(language, to_lower=False):
def to_language(locale):
def translation(language):
def activate(language):
def deactivate():
def deactivate_all():
def get_language():
def get_language_bidi():
def catalog():
def gettext(message):
def gettext_noop(message):
def ngettext(singular, plural, number):
def all_locale_paths():
@functools.lru_cache(maxsize=1000) DCNL def check_for_language(lang_code):
@functools.lru_cache() DCNL def get_languages():
@functools.lru_cache(maxsize=1000) DCNL def get_supported_language_variant(lang_code, strict=False):
def get_language_from_path(path, strict=False):
def get_language_from_request(request, check_path=False):
def parse_accept_lang_header(lang_string):
def blankout(src, char):
def templatize(src, origin=None):
def mark_safe(s):
def colorize(text='', opts=(), **kwargs):
def make_style(opts=(), **kwargs):
def parse_color_setting(config_string):
def reset_format_cache():
def iter_format_modules(lang, format_module_path=None):
def get_format_modules(lang=None, reverse=False):
def get_format(format_type, lang=None, use_l10n=None):
def date_format(value, format=None, use_l10n=None):
def time_format(value, format=None, use_l10n=None):
def number_format(value, decimal_pos=None, use_l10n=None, force_grouping=False):
def localize(value, use_l10n=None):
def localize_input(value, default=None):
def sanitize_separators(value):
def extract(path, to_path=''):
def get_func_full_args(func):
def func_accepts_var_args(func):
def get_version(version=None):
def get_main_version(version=None):
def get_complete_version(version=None):
@functools.lru_cache() DCNL def get_git_changeset():
def get_version_tuple(version):
def duration_string(duration):
@keep_lazy_text DCNL def capfirst(x):
@keep_lazy_text DCNL def wrap(text, width):
@keep_lazy_text DCNL def get_valid_filename(s):
@keep_lazy_text DCNL def get_text_list(list_, last_word=gettext_lazy('or')):
@keep_lazy_text DCNL def normalize_newlines(text):
@keep_lazy_text DCNL def phone2numeric(phone):
def smart_split(text):
@keep_lazy_text DCNL def unescape_string_literal(s):
@keep_lazy(str, SafeText) DCNL def slugify(value, allow_unicode=False):
def camel_case_to_spaces(value):
def _format_lazy(format_string, *args, **kwargs):
def parse_date(value):
def parse_time(value):
def parse_datetime(value):
def parse_duration(value):
def literals(choices, prefix='', suffix=''):
def prepare_js_for_gettext(js):
def smart_text(s, encoding='utf-8', strings_only=False, errors='strict'):
def is_protected_type(obj):
def force_text(s, encoding='utf-8', strings_only=False, errors='strict'):
def smart_bytes(s, encoding='utf-8', strings_only=False, errors='strict'):
def force_bytes(s, encoding='utf-8', strings_only=False, errors='strict'):
def iri_to_uri(iri):
def uri_to_iri(uri):
def escape_uri_path(path):
def repercent_broken_unicode(path):
def filepath_to_uri(path):
def get_system_encoding():
def upath(path):
def npath(path):
def safe_join(base, *paths):
def symlinks_supported():
def new_date(d):
def new_datetime(d):
def gen_filenames(only_new=False):
def inotify_code_changed():
def salted_hmac(key_salt, value, secret=None):
def get_random_string(length=12, allowed_chars='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'):
def constant_time_compare(val1, val2):
def pbkdf2(password, salt, iterations, dklen=0, digest=None):
def lazy(func, *resultclasses):
def lazystr(text):
def keep_lazy(*resultclasses):
def keep_lazy_text(func):
def unpickle_lazyobject(wrapped):
def partition(predicate, values):
def method_decorator(decorator, name=''):
def decorator_from_middleware_with_args(middleware_class):
def decorator_from_middleware(middleware_class):
def available_attrs(fn):
def sentence():
def paragraph():
def paragraphs(count, common=True):
def words(count, common=True):
def get_fixed_timezone(offset):
@functools.lru_cache() DCNL def get_default_timezone():
def get_default_timezone_name():
def get_current_timezone():
def get_current_timezone_name():
def _get_timezone_name(timezone):
def activate(timezone):
def deactivate():
def template_localtime(value, use_tz=None):
def localtime(value=None, timezone=None):
def localdate(value=None, timezone=None):
def now():
def is_aware(value):
def is_naive(value):
def make_aware(value, timezone=None, is_dst=None):
def make_naive(value, timezone=None):
def is_iterable(x):
@keep_lazy(str, SafeText) DCNL def escape(text):
@keep_lazy(str, SafeText) DCNL def escapejs(value):
def conditional_escape(text):
def format_html(format_string, *args, **kwargs):
def format_html_join(sep, format_string, args_generator):
@keep_lazy_text DCNL def linebreaks(value, autoescape=False):
def _strip_once(value):
@keep_lazy_text DCNL def strip_tags(value):
@keep_lazy_text DCNL def strip_spaces_between_tags(value):
def smart_urlquote(url):
@keep_lazy_text DCNL def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):
def avoid_wrapping(value):
def html_safe(klass):
def format(value, format_string):
def time_format(value, format_string):
def patch_cache_control(response, **kwargs):
def get_max_age(response):
def _if_match_passes(target_etag, etags):
def _if_unmodified_since_passes(last_modified, if_unmodified_since):
def _if_none_match_passes(target_etag, etags):
def _if_modified_since_passes(last_modified, if_modified_since):
def patch_response_headers(response, cache_timeout=None):
def add_never_cache_headers(response):
def patch_vary_headers(response, newheaders):
def has_vary_header(response, header_query):
def _i18n_cache_key_suffix(request, cache_key):
def _generate_cache_key(request, method, headerlist, key_prefix):
def _generate_cache_header_key(key_prefix, request):
def get_cache_key(request, key_prefix=None, method='GET', cache=None):
def learn_cache_key(request, response, cache_timeout=None, key_prefix=None, cache=None):
def _get_locale_dirs(resources, include_core=True):
def _tx_resource_for_name(name):
def _check_diff(cat_name, base_path):
def update_catalogs(resources=None, languages=None):
def lang_stats(resources=None, languages=None):
def fetch(resources=None, languages=None):
def visit_snippet_literal(self, node):
def depart_snippet_literal(self, node):
def visit_snippet(self, node):
def visit_snippet_latex(self, node):
def depart_snippet_latex(self, node):
@gen.coroutine DCNL def get_links_from_url(url):
def administrator(method):
def start(port, root_directory='/tmp/s3', bucket_depth=0):
def enable_pretty_logging(options=None, logger=None):
def define_logging_options(options=None):
def install():
def set_close_exec(fd):
def to_tornado_future(asyncio_future):
def to_asyncio_future(tornado_future):
def bind_sockets(port, address=None, family=socket.AF_UNSPEC, backlog=_DEFAULT_BACKLOG, flags=None, reuse_port=False):
def add_accept_handler(sock, callback):
def is_valid_ip(ip):
def ssl_options_to_context(ssl_options):
def ssl_wrap_socket(socket, ssl_options, server_hostname=None, **kwargs):
def import_object(name):
def errno_from_exception(e):
def re_unescape(s):
def timedelta_to_seconds(td):
def _websocket_mask_python(mask, data):
def filter_whitespace(mode, text):
def cpu_count():
def fork_processes(num_processes, max_restarts=100):
def task_id():
def websocket_connect(url, callback=None, connect_timeout=None, on_message_callback=None, compression_options=None, ping_interval=None, ping_timeout=None, max_message_size=None):
def _auth_return_future(f):
def _oauth_signature(consumer_token, method, url, parameters={}, token=None):
def _oauth10a_signature(consumer_token, method, url, parameters={}, token=None):
def _unquote_or_none(s):
def bind_unused_port(reuse_port=False):
def get_async_test_timeout():
def gen_test(func=None, timeout=None):
def main(**kwargs):
def start(check_time=500):
def wait():
def watch(filename):
def add_reload_hook(fn):
def main():
def get(*locale_codes):
def set_default_locale(code):
def load_translations(directory, encoding=None):
def load_gettext_translations(directory, domain):
def get_supported_locales():
def define(name, default=None, type=None, help=None, metavar=None, multiple=False, group=None, callback=None):
def parse_command_line(args=None, final=True):
def parse_config_file(path, final=True):
def print_help(file=None):
def add_parse_callback(callback):
def xhtml_escape(value):
def xhtml_unescape(value):
def json_encode(value):
def json_decode(value):
def squeeze(value):
def url_escape(value, plus=True):
def utf8(value):
def to_unicode(value):
def to_basestring(value):
def recursive_unicode(obj):
def linkify(text, shorten=False, extra_params='', require_protocol=False, permitted_protocols=['http', 'https']):
def _failing_getaddrinfo(*args):
def refusing_port():
def exec_test(caller_globals, caller_locals, s):
def is_coverage_running():
def subTest(test, *args, **kwargs):
def read_stream_body(stream, callback):
def run_on_executor(*args, **kwargs):
def return_future(f):
def chain_future(a, b):
def _remove_deactivated(contexts):
def wrap(fn):
def run_with_stack_context(context, func):
def engine(func):
def coroutine(func, replace_callback=True):
def _make_coroutine_wrapper(func, replace_callback):
def is_coroutine_function(func):
def Task(func, *args, **kwargs):
def _contains_yieldpoint(children):
def multi(children, quiet_exceptions=()):
def multi_future(children, quiet_exceptions=()):
def maybe_future(x):
def with_timeout(timeout, future, quiet_exceptions=()):
def sleep(duration):
def _argument_adapter(callback):
def convert_yielded(yielded):
def url_concat(url, args):
def _parse_request_range(range_header):
def _get_content_range(start, end, total):
def parse_body_arguments(content_type, body, arguments, files, headers=None):
def parse_multipart_form_data(boundary, data, arguments, files):
def format_timestamp(ts):
def parse_request_start_line(line):
def parse_response_start_line(line):
def _parse_header(line):
def _encode_header(key, pdict):
def split_host_and_port(netloc):
def qs_to_qsl(qs):
def _unquote_cookie(str):
def parse_cookie(cookie):
def asynchronous(method):
def stream_request_body(cls):
def removeslash(method):
def addslash(method):
def authenticated(method):
def print_failure(msg):
def update_hosts_file(*flags):
def update_readme_file():
def mock_url_open(url):
def mock_url_open_fail(_):
def mock_url_open_read_fail(_):
def mock_url_open_decode_fail(_):
def mock_walk(stem):
def mock_path_join(*_):
def decode_line(line):
def get_defaults():
def prompt_for_update(freshen, update_auto):
def prompt_for_exclusions(skip_prompt):
def prompt_for_flush_dns_cache(flush_cache, prompt_flush):
def prompt_for_move(final_file, **move_params):
def display_exclusion_options(common_exclusions, exclusion_pattern, exclusion_regexes):
def gather_custom_exclusions(exclusion_pattern, exclusion_regexes):
def exclude_domain(domain, exclusion_pattern, exclusion_regexes):
def matches_exclusions(stripped_rule, exclusion_regexes):
def update_all_sources():
def create_initial_file():
def remove_dups_and_excl(merge_file, exclusion_regexes):
def normalize_rule(rule, target_ip, keep_domain_comments):
def strip_rule(line):
def write_opening_header(final_file, **header_params):
def update_readme_data(readme_file, **readme_updates):
def move_hosts_file_into_place(final_file):
def flush_dns_cache():
def remove_old_hosts_file(backup):
def get_file_by_url(url):
def write_data(f, data):
def list_dir_no_hidden(path):
def query_yes_no(question, default=u'yes'):
def is_valid_domain_format(domain):
def recursive_glob(stem, file_pattern):
def path_join_robust(path, *paths):
def supports_color():
def colorize(text, color):
def print_success(text):
def print_failure(text):
def complete(tab, opts):
def _parse_comments(s):
def get_comment_format():
def foldmarker():
def get_terminal_size(fallback=(80, 24)):
def check_file_output(filename, force):
def create_output():
def create_http_server(host=None, port=0):
def iter_http_requests(server, player):
def output_stream_http(plugin, initial_streams, external=False, port=0):
def output_stream_passthrough(stream):
def open_stream(stream):
def output_stream(stream):
def read_stream(stream, output, prebuffer, chunk_size=8192):
def handle_stream(plugin, streams, stream_name):
def fetch_streams(plugin):
def fetch_streams_infinite(plugin, interval):
def resolve_stream_name(streams, stream_name):
def format_valid_streams(plugin, streams):
def handle_url():
def print_plugins():
def authenticate_twitch_oauth():
def load_plugins(dirs):
def setup_args(config_files=[]):
def setup_console():
def setup_http_session():
def setup_plugins():
def setup_livestreamer():
def setup_options():
def setup_plugin_options():
def shlex_quote(s):
def terminal_len(value):
def print_inplace(msg):
def format_filesize(size):
def format_time(elapsed):
def create_status_line(**params):
def progress(iterator, prefix):
def length(length):
def startswith(string):
def endswith(string):
def get(item, default=None):
def getattr(attr, default=None):
def hasattr(attr):
def filter(func):
def map(func):
def url(**attributes):
def xml_find(xpath):
def xml_findall(xpath):
def xml_findtext(xpath):
def load_support_plugin(name):
def prepend_www(url):
def parse_json(data, name='JSON', exception=PluginError, schema=None):
def parse_xml(data, name='XML', ignore_ns=False, exception=PluginError, schema=None):
def parse_qsd(data, name='query DCSP string', exception=PluginError, schema=None, **params):
def urlget(url, *args, **kwargs):
def urlresolve(url):
def res_xml(res, *args, **kw):
def res_json(res, jsontype='JSON', exception=PluginError):
def swfverify(url):
def parse_playlist(res):
def get_event_id(url):
def get_json(url):
def parse_media_json(json_object):
def parse_streaming_media_json(json_object, room_from_url):
def parse_timestamp(ts):
def streams(url, **params):
def load(data, base_uri=None, parser=M3U8Parser):
def get_html_theme_path():
def silent_permalink(func):
def dummy_deepcopy(*arg):
@register.tag('if') DCNL def smart_if(parser, token):
def find_media_source(url):
def create_message(request, message):
def get_and_delete_messages(request, include_auth=False):
def user_messages(request):
def flatten(x):
def batch_size(items, size):
def batches(items, number):
def textDiff(a, b):
def sanitize_html(html):
def build_authenticate_header(realm=''):
def build_xoauth_string(url, consumer, token=None):
def to_unicode(s):
def to_unicode_optional_iterator(x):
def to_utf8_optional_iterator(x):
def escape(s):
def generate_timestamp():
def generate_nonce(length=8):
def generate_verifier(length=8):
def HTTPResponse__getheaders(self):
def parse_uri(uri):
def safename(filename):
def _parse_www_authenticate(headers, headername='www-authenticate'):
def _entry_disposition(response_headers, request_headers):
def iri2uri(uri):
def setdefaultproxy(proxytype=None, addr=None, port=None, rdns=True, username=None, password=None):
def wrapmodule(module):
def convert_tmtheme_to_css(theme_file):
def parse_date(date_string, date_format='(%y-%m-%d DCSP %H:%M)', yearfirst=True, default=None):
def parse_string(io_or_string):
def parse_file(file_path):
def clone_bench_repo(args):
def run_os_command(command_map):
def get_passwords(args):
@click.group() DCNL def config():
@click.command('auto_update') DCNL @click.argument('state', type=click.Choice(['on', 'off'])) DCNL def config_auto_update(state):
@click.command('restart_supervisor_on_update') DCNL @click.argument('state', type=click.Choice(['on', 'off'])) DCNL def config_restart_supervisor_on_update(state):
@click.command('update_bench_on_update') DCNL @click.argument('state', type=click.Choice(['on', 'off'])) DCNL def config_update_bench_on_update(state):
@click.command('dns_multitenant') DCNL @click.argument('state', type=click.Choice(['on', 'off'])) DCNL def config_dns_multitenant(state):
@click.command('serve_default_site') DCNL @click.argument('state', type=click.Choice(['on', 'off'])) DCNL def config_serve_default_site(state):
@click.command('rebase_on_pull') DCNL @click.argument('state', type=click.Choice(['on', 'off'])) DCNL def config_rebase_on_pull(state):
@click.command('http_timeout') DCNL @click.argument('seconds', type=int) DCNL def config_http_timeout(seconds):
@click.command('start') DCNL @click.option('--no-dev', is_flag=True, default=False) DCNL @click.option('--concurrency', '-c', type=str) DCNL def start(no_dev, concurrency):
@click.command('restart') DCNL @click.option('--web', is_flag=True, default=False) DCNL def restart(web):
@click.command('set-nginx-port') DCNL @click.argument('site') DCNL @click.argument('port', type=int) DCNL def set_nginx_port(site, port):
@click.command('set-ssl-certificate') DCNL @click.argument('site') DCNL @click.argument('ssl-certificate-path') DCNL def set_ssl_certificate(site, ssl_certificate_path):
@click.command('set-ssl-key') DCNL @click.argument('site') DCNL @click.argument('ssl-certificate-key-path') DCNL def set_ssl_certificate_key(site, ssl_certificate_key_path):
@click.command('set-url-root') DCNL @click.argument('site') DCNL @click.argument('url-root') DCNL def set_url_root(site, url_root):
@click.command('set-mariadb-host') DCNL @click.argument('host') DCNL def set_mariadb_host(host):
@click.command('set-default-site') DCNL @click.argument('site') DCNL def set_default_site(site):
@click.command('download-translations') DCNL def download_translations():
@click.command('renew-lets-encrypt') DCNL def renew_lets_encrypt():
@click.command('backup') DCNL @click.argument('site') DCNL def backup_site(site):
@click.command('backup-all-sites') DCNL def backup_all_sites():
@click.command('release') DCNL @click.argument('app') DCNL @click.argument('bump-type', type=click.Choice(['major', 'minor', 'patch', 'stable', 'prerelease'])) DCNL @click.option('--from-branch', default='develop') DCNL @click.option('--to-branch', default='master') DCNL @click.option('--remote', default='upstream') DCNL @click.option('--owner', default='frappe') DCNL @click.option('--repo-name') DCNL def release(app, bump_type, from_branch, to_branch, owner, repo_name, remote):
@click.command('prepare-staging') DCNL @click.argument('app') DCNL def prepare_staging(app):
@click.command('disable-production') DCNL def disable_production():
@click.command('src') DCNL def bench_src():
@click.command('update') DCNL @click.option('--pull', is_flag=True, help='Pull DCSP changes DCSP in DCSP all DCSP the DCSP apps DCSP in DCSP bench') DCNL @click.option('--patch', is_flag=True, help='Run DCSP migrations DCSP for DCSP all DCSP sites DCSP in DCSP the DCSP bench') DCNL @click.option('--build', is_flag=True, help='Build DCSP JS DCSP and DCSP CSS DCSP artifacts DCSP for DCSP the DCSP bench') DCNL @click.option('--bench', is_flag=True, help='Update DCSP bench') DCNL @click.option('--requirements', is_flag=True, help='Update DCSP requirements') DCNL @click.option('--restart-supervisor', is_flag=True, help='restart DCSP supervisor DCSP processes DCSP after DCSP update') DCNL @click.option('--auto', is_flag=True) DCNL @click.option('--upgrade', is_flag=True, help='Required DCSP for DCSP major DCSP version DCSP updates') DCNL @click.option('--no-backup', is_flag=True) DCNL @click.option('--force', is_flag=True) DCNL @click.option('--reset', is_flag=True, help="Hard DCSP resets DCSP git DCSP branch's DCSP to DCSP their DCSP new DCSP states DCSP overriding DCSP any DCSP changes DCSP and DCSP overriding DCSP rebase DCSP on DCSP pull") DCNL def update(pull=False, patch=False, build=False, bench=False, auto=False, restart_supervisor=False, requirements=False, no_backup=False, upgrade=False, force=False, reset=False):
@click.command('switch-to-branch') DCNL @click.argument('branch') DCNL @click.argument('apps', nargs=(-1)) DCNL @click.option('--upgrade', is_flag=True) DCNL def switch_to_branch(branch, apps, upgrade=False):
@click.command('switch-to-master') DCNL @click.option('--upgrade', is_flag=True) DCNL def switch_to_master(upgrade=False):
@click.command('switch-to-develop') DCNL @click.option('--upgrade', is_flag=True) DCNL def switch_to_develop(upgrade=False):
def print_bench_version(ctx, param, value):
@click.group() DCNL @click.option('--version', is_flag=True, is_eager=True, callback=print_bench_version, expose_value=False) DCNL def bench_command(bench_path='.'):
@click.group() DCNL def setup():
@click.command('sudoers') DCNL @click.argument('user') DCNL def setup_sudoers(user):
@click.command('nginx') DCNL @click.option('--yes', help='Yes DCSP to DCSP regeneration DCSP of DCSP nginx DCSP config DCSP file', default=False, is_flag=True) DCNL def setup_nginx(yes=False):
@click.command('supervisor') DCNL @click.option('--user') DCNL @click.option('--yes', help='Yes DCSP to DCSP regeneration DCSP of DCSP supervisor DCSP config', is_flag=True, default=False) DCNL def setup_supervisor(user=None, yes=False):
@click.command('redis') DCNL def setup_redis():
@click.command('fonts') DCNL def setup_fonts():
@click.command('production') DCNL @click.argument('user') DCNL def setup_production(user):
@click.command('auto-update') DCNL def setup_auto_update():
@click.command('backups') DCNL def setup_backups():
@click.command('env') DCNL def setup_env():
@click.command('firewall') DCNL def setup_firewall():
@click.command('ssh-port') DCNL @click.argument('port') DCNL def set_ssh_port(port):
@click.command('lets-encrypt') DCNL @click.argument('site') DCNL @click.option('--custom-domain') DCNL def setup_letsencrypt(site, custom_domain):
@click.command('procfile') DCNL def setup_procfile():
@click.command('socketio') DCNL def setup_socketio():
@click.command('requirements') DCNL def setup_requirements():
@click.command('config') DCNL def setup_config():
@click.command('add-domain') DCNL @click.argument('domain') DCNL @click.option('--site', prompt=True) DCNL @click.option('--ssl-certificate', help='Absolute DCSP path DCSP to DCSP SSL DCSP Certificate') DCNL @click.option('--ssl-certificate-key', help='Absolute DCSP path DCSP to DCSP SSL DCSP Certificate DCSP Key') DCNL def add_domain(domain, site=None, ssl_certificate=None, ssl_certificate_key=None):
@click.command('remove-domain') DCNL @click.argument('domain') DCNL @click.option('--site', prompt=True) DCNL def remove_domain(domain, site=None):
@click.command() DCNL @click.argument('path') DCNL @click.option('--apps_path', default=None, help='path DCSP to DCSP json DCSP files DCSP with DCSP apps DCSP to DCSP install DCSP after DCSP init') DCNL @click.option('--frappe-path', default=None, help='path DCSP to DCSP frappe DCSP repo') DCNL @click.option('--frappe-branch', default=None, help='path DCSP to DCSP frappe DCSP repo') DCNL @click.option('--clone-from', default=None, help='copy DCSP repos DCSP from DCSP path') DCNL @click.option('--no-procfile', is_flag=True, help='Pull DCSP changes DCSP in DCSP all DCSP the DCSP apps DCSP in DCSP bench') DCNL @click.option('--no-backups', is_flag=True, help='Run DCSP migrations DCSP for DCSP all DCSP sites DCSP in DCSP the DCSP bench') DCNL @click.option('--no-auto-update', is_flag=True, help='Build DCSP JS DCSP and DCSP CSS DCSP artifacts DCSP for DCSP the DCSP bench') DCNL @click.option('--verbose', is_flag=True, help='Verbose DCSP output DCSP during DCSP install') DCNL @click.option('--skip-bench-mkdir', is_flag=True, help='Skip DCSP mkdir DCSP frappe-bench') DCNL @click.option('--skip-redis-config-generation', is_flag=True, help='Skip DCSP redis DCSP config DCSP generation DCSP if DCSP already DCSP specifying DCSP the DCSP common-site-config DCSP file') DCNL def init(path, apps_path, frappe_path, frappe_branch, no_procfile, no_backups, no_auto_update, clone_from, verbose, skip_bench_mkdir, skip_redis_config_generation):
@click.command('get-app') DCNL @click.argument('name', nargs=(-1)) DCNL @click.argument('git-url') DCNL @click.option('--branch', default=None, help='branch DCSP to DCSP checkout') DCNL def get_app(git_url, branch, name=None):
@click.command('new-app') DCNL @click.argument('app-name') DCNL def new_app(app_name):
@click.command('remove-app') DCNL @click.argument('app-name') DCNL def remove_app(app_name):
@click.command('new-site') DCNL @click.option('--mariadb-root-password', help='MariaDB DCSP root DCSP password') DCNL @click.option('--admin-password', help='admin DCSP password DCSP to DCSP set DCSP for DCSP site') DCNL @click.argument('site') DCNL def new_site(site, mariadb_root_password=None, admin_password=None):
@click.command('remote-set-url') DCNL @click.argument('git-url') DCNL def remote_set_url(git_url):
@click.command('remote-reset-url') DCNL @click.argument('app') DCNL def remote_reset_url(app):
@click.command('remote-urls') DCNL def remote_urls():
def new_site(site, mariadb_root_password=None, admin_password=None, bench_path='.'):
def get_git_version():
def set_git_remote_url(git_url, bench_path='.'):
def use_wildcard_certificate(bench_path, ret):
def get_limit_conn_shared_memory():
def get_gunicorn_workers():
def sync_domains(site, domains, bench_path='.'):
def pull_all_apps(bench_path='.', reset=False):
def set_default(key, value, parent, parenttype=u'__default'):
def clear_default(key=None, value=None, parent=None, name=None, parenttype=None):
def get_defaults_for(parent=u'__default'):
@click.command(u'build-message-files') DCNL @pass_context DCNL def build_message_files(context):
@click.command(u'new-language') DCNL @pass_context DCNL @click.argument(u'lang_code') DCNL @click.argument(u'app') DCNL def new_language(context, lang_code, app):
@click.command(u'get-untranslated') DCNL @click.argument(u'lang') DCNL @click.argument(u'untranslated_file') DCNL @click.option(u'--all', default=False, is_flag=True, help=u'Get DCSP all DCSP message DCSP strings') DCNL @pass_context DCNL def get_untranslated(context, lang, untranslated_file, all=None):
@click.command(u'update-translations') DCNL @click.argument(u'lang') DCNL @click.argument(u'untranslated_file') DCNL @click.argument(u'translated-file') DCNL @pass_context DCNL def update_translations(context, lang, untranslated_file, translated_file):
@click.command(u'import-translations') DCNL @click.argument(u'lang') DCNL @click.argument(u'path') DCNL @pass_context DCNL def import_translations(context, lang, path):
@click.command(u'build') DCNL @click.option(u'--make-copy', is_flag=True, default=False, help=u'Copy DCSP the DCSP files DCSP instead DCSP of DCSP symlinking') DCNL @click.option(u'--verbose', is_flag=True, default=False, help=u'Verbose') DCNL def build(make_copy=False, verbose=False):
@click.command(u'watch') DCNL def watch():
@click.command(u'clear-cache') DCNL @pass_context DCNL def clear_cache(context):
@click.command(u'clear-website-cache') DCNL @pass_context DCNL def clear_website_cache(context):
@click.command(u'destroy-all-sessions') DCNL @click.option(u'--reason') DCNL @pass_context DCNL def destroy_all_sessions(context, reason=None):
@click.command(u'reset-perms') DCNL @pass_context DCNL def reset_perms(context):
@click.command(u'execute') DCNL @click.argument(u'method') DCNL @click.option(u'--args') DCNL @click.option(u'--kwargs') DCNL @pass_context DCNL def execute(context, method, args=None, kwargs=None):
@click.command(u'add-to-email-queue') DCNL @click.argument(u'email-path') DCNL @pass_context DCNL def add_to_email_queue(context, email_path):
@click.command(u'export-doc') DCNL @click.argument(u'doctype') DCNL @click.argument(u'docname') DCNL @pass_context DCNL def export_doc(context, doctype, docname):
@click.command(u'export-json') DCNL @click.argument(u'doctype') DCNL @click.argument(u'path') DCNL @click.option(u'--name', help=u'Export DCSP only DCSP one DCSP document') DCNL @pass_context DCNL def export_json(context, doctype, path, name=None):
@click.command(u'export-csv') DCNL @click.argument(u'doctype') DCNL @click.argument(u'path') DCNL @pass_context DCNL def export_csv(context, doctype, path):
@click.command(u'export-fixtures') DCNL @pass_context DCNL def export_fixtures(context):
@click.command(u'import-doc') DCNL @click.argument(u'path') DCNL @pass_context DCNL def import_doc(context, path, force=False):
@click.command(u'import-csv') DCNL @click.argument(u'path') DCNL @click.option(u'--only-insert', default=False, is_flag=True, help=u'Do DCSP not DCSP overwrite DCSP existing DCSP records') DCNL @click.option(u'--submit-after-import', default=False, is_flag=True, help=u'Submit DCSP document DCSP after DCSP importing DCSP it') DCNL @click.option(u'--ignore-encoding-errors', default=False, is_flag=True, help=u'Ignore DCSP encoding DCSP errors DCSP while DCSP coverting DCSP to DCSP unicode') DCNL @click.option(u'--no-email', default=True, is_flag=True, help=u'Send DCSP email DCSP if DCSP applicable') DCNL @pass_context DCNL def import_csv(context, path, only_insert=False, submit_after_import=False, ignore_encoding_errors=False, no_email=True):
@click.command(u'bulk-rename') DCNL @click.argument(u'doctype') DCNL @click.argument(u'path') DCNL @pass_context DCNL def _bulk_rename(context, doctype, path):
@click.command(u'mysql') DCNL @pass_context DCNL def mysql(context):
@click.command(u'console') DCNL @pass_context DCNL def console(context):
@click.command(u'run-tests') DCNL @click.option(u'--app', help=u'For DCSP App') DCNL @click.option(u'--doctype', help=u'For DCSP DocType') DCNL @click.option(u'--test', multiple=True, help=u'Specific DCSP test') DCNL @click.option(u'--driver', help=u'For DCSP Travis') DCNL @click.option(u'--ui-tests', is_flag=True, default=False, help=u'Run DCSP UI DCSP Tests') DCNL @click.option(u'--module', help=u'Run DCSP tests DCSP in DCSP a DCSP module') DCNL @click.option(u'--profile', is_flag=True, default=False) DCNL @click.option(u'--junit-xml-output', help=u'Destination DCSP file DCSP path DCSP for DCSP junit DCSP xml DCSP report') DCNL @pass_context DCNL def run_tests(context, app=None, module=None, doctype=None, test=(), driver=None, profile=False, junit_xml_output=False, ui_tests=False):
@click.command(u'run-ui-tests') DCNL @click.option(u'--app', help=u'App DCSP to DCSP run DCSP tests DCSP on, DCSP leave DCSP blank DCSP for DCSP all DCSP apps') DCNL @click.option(u'--test', help=u'File DCSP name DCSP of DCSP the DCSP test DCSP you DCSP want DCSP to DCSP run') DCNL @click.option(u'--profile', is_flag=True, default=False) DCNL @pass_context DCNL def run_ui_tests(context, app=None, test=False, profile=False):
@click.command(u'serve') DCNL @click.option(u'--port', default=8000) DCNL @click.option(u'--profile', is_flag=True, default=False) DCNL @pass_context DCNL def serve(context, port=None, profile=False, sites_path=u'.', site=None):
@click.command(u'request') DCNL @click.argument(u'args') DCNL @pass_context DCNL def request(context, args):
@click.command(u'make-app') DCNL @click.argument(u'destination') DCNL @click.argument(u'app_name') DCNL def make_app(destination, app_name):
@click.command(u'set-config') DCNL @click.argument(u'key') DCNL @click.argument(u'value') DCNL @click.option(u'--as-dict', is_flag=True, default=False) DCNL @pass_context DCNL def set_config(context, key, value, as_dict=False):
@click.command(u'version') DCNL def get_version():
@click.command(u'setup-global-help') DCNL @click.option(u'--mariadb_root_password') DCNL def setup_global_help(mariadb_root_password=None):
@click.command(u'setup-help') DCNL @pass_context DCNL def setup_help(context):
@click.command(u'new-site') DCNL @click.argument(u'site') DCNL @click.option(u'--db-name', help=u'Database DCSP name') DCNL @click.option(u'--mariadb-root-username', default=u'root', help=u'Root DCSP username DCSP for DCSP MariaDB') DCNL @click.option(u'--mariadb-root-password', help=u'Root DCSP password DCSP for DCSP MariaDB') DCNL @click.option(u'--admin-password', help=u'Administrator DCSP password DCSP for DCSP new DCSP site', default=None) DCNL @click.option(u'--verbose', is_flag=True, default=False, help=u'Verbose') DCNL @click.option(u'--force', help=u'Force DCSP restore DCSP if DCSP site/database DCSP already DCSP exists', is_flag=True, default=False) DCNL @click.option(u'--source_sql', help=u'Initiate DCSP database DCSP with DCSP a DCSP SQL DCSP file') DCNL @click.option(u'--install-app', multiple=True, help=u'Install DCSP app DCSP after DCSP installation') DCNL def new_site(site, mariadb_root_username=None, mariadb_root_password=None, admin_password=None, verbose=False, install_apps=None, source_sql=None, force=None, install_app=None, db_name=None):
def _new_site(db_name, site, mariadb_root_username=None, mariadb_root_password=None, admin_password=None, verbose=False, install_apps=None, source_sql=None, force=False, reinstall=False):
@click.command(u'restore') DCNL @click.argument(u'sql-file-path') DCNL @click.option(u'--mariadb-root-username', default=u'root', help=u'Root DCSP username DCSP for DCSP MariaDB') DCNL @click.option(u'--mariadb-root-password', help=u'Root DCSP password DCSP for DCSP MariaDB') DCNL @click.option(u'--db-name', help=u'Database DCSP name DCSP for DCSP site DCSP in DCSP case DCSP it DCSP is DCSP a DCSP new DCSP one') DCNL @click.option(u'--admin-password', help=u'Administrator DCSP password DCSP for DCSP new DCSP site') DCNL @click.option(u'--install-app', multiple=True, help=u'Install DCSP app DCSP after DCSP installation') DCNL @click.option(u'--with-public-files', help=u'Restores DCSP the DCSP public DCSP files DCSP of DCSP the DCSP site, DCSP given DCSP path DCSP to DCSP its DCSP tar DCSP file') DCNL @click.option(u'--with-private-files', help=u'Restores DCSP the DCSP private DCSP files DCSP of DCSP the DCSP site, DCSP given DCSP path DCSP to DCSP its DCSP tar DCSP file') DCNL @pass_context DCNL def restore(context, sql_file_path, mariadb_root_username=None, mariadb_root_password=None, db_name=None, verbose=None, install_app=None, admin_password=None, force=None, with_public_files=None, with_private_files=None):
@click.command(u'reinstall') DCNL @click.option(u'--admin-password', help=u'Administrator DCSP Password DCSP for DCSP reinstalled DCSP site') DCNL @click.option(u'--yes', is_flag=True, default=False, help=u'Pass DCSP --yes DCSP to DCSP skip DCSP confirmation') DCNL @pass_context DCNL def reinstall(context, admin_password=None, yes=False):
@click.command(u'install-app') DCNL @click.argument(u'app') DCNL @pass_context DCNL def install_app(context, app):
@click.command(u'list-apps') DCNL @pass_context DCNL def list_apps(context):
@click.command(u'add-system-manager') DCNL @click.argument(u'email') DCNL @click.option(u'--first-name') DCNL @click.option(u'--last-name') DCNL @click.option(u'--send-welcome-email', default=False, is_flag=True) DCNL @pass_context DCNL def add_system_manager(context, email, first_name, last_name, send_welcome_email):
@click.command(u'migrate') DCNL @click.option(u'--rebuild-website', help=u'Rebuild DCSP webpages DCSP after DCSP migration') DCNL @pass_context DCNL def migrate(context, rebuild_website=False):
@click.command(u'run-patch') DCNL @click.argument(u'module') DCNL @pass_context DCNL def run_patch(context, module):
@click.command(u'reload-doc') DCNL @click.argument(u'module') DCNL @click.argument(u'doctype') DCNL @click.argument(u'docname') DCNL @pass_context DCNL def reload_doc(context, module, doctype, docname):
@click.command(u'reload-doctype') DCNL @click.argument(u'doctype') DCNL @pass_context DCNL def reload_doctype(context, doctype):
@click.command(u'use') DCNL @click.argument(u'site') DCNL def _use(site, sites_path=u'.'):
@click.command(u'backup') DCNL @click.option(u'--with-files', default=False, is_flag=True, help=u'Take DCSP backup DCSP with DCSP files') DCNL @pass_context DCNL def backup(context, with_files=False, backup_path_db=None, backup_path_files=None, backup_path_private_files=None, quiet=False):
@click.command(u'remove-from-installed-apps') DCNL @click.argument(u'app') DCNL @pass_context DCNL def remove_from_installed_apps(context, app):
@click.command(u'uninstall-app') DCNL @click.argument(u'app') DCNL @click.option(u'--yes', u'-y', help=u'To DCSP bypass DCSP confirmation DCSP prompt DCSP for DCSP uninstalling DCSP the DCSP app', is_flag=True, default=False, multiple=True) DCNL @click.option(u'--dry-run', help=u'List DCSP all DCSP doctypes DCSP that DCSP will DCSP be DCSP deleted', is_flag=True, default=False) DCNL @pass_context DCNL def uninstall(context, app, dry_run=False, yes=False):
def _drop_site(site, root_login=u'root', root_password=None, archived_sites_path=None, force=False):
@click.command(u'set-admin-password') DCNL @click.argument(u'admin-password') DCNL @pass_context DCNL def set_admin_password(context, admin_password):
@click.command(u'set-limit') DCNL @click.option(u'--site', help=u'site DCSP name') DCNL @click.argument(u'limit') DCNL @click.argument(u'value') DCNL @pass_context DCNL def set_limit(context, site, limit, value):
@click.command(u'clear-limits') DCNL @click.option(u'--site', help=u'site DCSP name') DCNL @click.argument(u'limits', nargs=(-1), type=click.Choice([u'emails', u'space', u'users', u'email_group', u'expiry', u'support_email', u'support_chat', u'upgrade_url'])) DCNL @pass_context DCNL def clear_limits(context, site, limits):
@click.command(u'set-last-active-for-user') DCNL @click.option(u'--user', help=u'Setup DCSP last DCSP active DCSP date DCSP for DCSP user') DCNL @pass_context DCNL def set_last_active_for_user(context, user=None):
@click.command(u'publish-realtime') DCNL @click.argument(u'event') DCNL @click.option(u'--message') DCNL @click.option(u'--room') DCNL @click.option(u'--user') DCNL @click.option(u'--doctype') DCNL @click.option(u'--docname') DCNL @click.option(u'--after-commit') DCNL @pass_context DCNL def publish_realtime(context, event, message, room, user, doctype, docname, after_commit):
@click.command(u'build-docs') DCNL @pass_context DCNL @click.argument(u'app') DCNL @click.option(u'--docs-version', default=u'current') DCNL @click.option(u'--target', default=None) DCNL @click.option(u'--local', default=False, is_flag=True, help=u'Run DCSP app DCSP locally') DCNL @click.option(u'--watch', default=False, is_flag=True, help=u'Watch DCSP for DCSP changes DCSP and DCSP rewrite') DCNL def build_docs(context, app, docs_version=u'current', target=None, local=False, watch=False):
@click.command(u'trigger-scheduler-event') DCNL @click.argument(u'event') DCNL @pass_context DCNL def trigger_scheduler_event(context, event):
@click.command(u'enable-scheduler') DCNL @pass_context DCNL def enable_scheduler(context):
@click.command(u'disable-scheduler') DCNL @pass_context DCNL def disable_scheduler(context):
@click.command(u'doctor') DCNL @click.option(u'--site', help=u'site DCSP name') DCNL def doctor(site=None):
@click.command(u'show-pending-jobs') DCNL @click.option(u'--site', help=u'site DCSP name') DCNL @pass_context DCNL def show_pending_jobs(context, site=None):
@click.command(u'purge-jobs') DCNL @click.option(u'--site', help=u'site DCSP name') DCNL @click.option(u'--queue', default=None, help=u'one DCSP of DCSP "low", DCSP "default", DCSP "high') DCNL @click.option(u'--event', default=None, help=u'one DCSP of DCSP "all", DCSP "weekly", DCSP "monthly", DCSP "hourly", DCSP "daily", DCSP "weekly_long", DCSP "daily_long"') DCNL def purge_jobs(site=None, queue=None, event=None):
@frappe.whitelist() DCNL def update(hidden_list, user=None):
def get_user_icons(user):
@frappe.whitelist() DCNL def upload(rows=None, submit_after_import=None, ignore_encoding_errors=False, no_email=True, overwrite=None, update_only=None, ignore_links=False, pre_process=None, via_console=False, from_data_import=u'No'):
def delete_child_rows(rows, doctype):
@frappe.whitelist() DCNL def get_help_messages():
@frappe.whitelist() DCNL def get_all_roles(arg=None):
@frappe.whitelist() DCNL def get_roles(arg=None):
@frappe.whitelist() DCNL def get_perm_info(role):
def setup_user_email_inbox(email_account, awaiting_password, email_id, enable_outgoing):
def remove_user_email_inbox(email_account):
def get_total_users():
def get_active_users():
def get_website_users():
def get_active_website_users():
def extract_mentions(txt):
def delete_feedback_request():
def get_sender_name():
@frappe.whitelist() DCNL def get_contact_number(contact_name, ref_doctype, ref_name):
@frappe.whitelist() DCNL def get_test_js(test_path=None):
def validate_fields(meta):
def validate_permissions_for_doctype(doctype, for_remove=False):
def make_module_and_roles(doc, perm_fieldname=u'permissions'):
def init_list(doctype):
def get_user_permissions(user=None):
def update_comment_in_doc(doc):
def update_comments_in_parent(reference_doctype, reference_name, _comments):
def update_comments_in_parent_after_request():
@frappe.whitelist() DCNL def make(doctype=None, name=None, content=None, subject=None, sent_or_received=u'Sent', sender=None, sender_full_name=None, recipients=None, communication_medium=u'Email', send_email=False, print_html=None, print_format=None, attachments=u'[]', send_me_a_copy=False, cc=None, flags=None, read_receipt=None):
def validate_email(doc):
def notify(doc, print_html=None, print_format=None, attachments=None, recipients=None, cc=None, fetched_from_email_account=False):
def update_parent_status(doc):
def prepare_to_notify(doc, print_html=None, print_format=None, attachments=None):
def get_recipients(doc, fetched_from_email_account=False):
def get_cc(doc, recipients=None, fetched_from_email_account=False):
def add_attachments(name, attachments):
def get_attach_link(doc, print_format):
def on_doctype_update():
def update_feed(doc, method=None):
def trigger_feedback_request(doc, method):
@frappe.whitelist() DCNL def send_feedback_request(reference_doctype, reference_name, trigger=u'Manual', details=None, is_manual=False):
def get_feedback_request_url(reference_doctype, reference_name, recipients, trigger=u'Manual'):
def is_feedback_request_already_sent(reference_doctype, reference_name, is_manual=False):
def get_enabled_feedback_trigger():
def delete_feedback_request_and_feedback(reference_doctype, reference_name):
def get_diff(old, new, for_child=False):
def on_doctype_update():
def export_languages_json():
def sync_languages():
def update_language_names():
@frappe.whitelist() DCNL def clear_error_logs():
def on_doctype_update():
def clear_authentication_logs():
@frappe.whitelist() DCNL def get_breadcrumbs(folder):
@frappe.whitelist() DCNL def create_new_folder(file_name, folder):
@frappe.whitelist() DCNL def unzip_file(name):
def get_things_todo(as_list=False):
def get_todays_events(as_list=False):
def get_unread_messages():
def get_unseen_likes():
def get_unread_emails():
@frappe.whitelist() DCNL def get_document_type(doctype, txt, searchfield, start, page_len, filters):
def guess_language(lang_list=None):
def get_user_lang(user=None):
def set_default_language(lang):
def get_all_languages():
def get_lang_dict():
def get_dict(fortype, name=None):
def add_lang_dict(code):
def make_dict_from_messages(messages, full_dict=None):
def get_lang_js(fortype, name):
def get_full_dict(lang):
def load_lang(lang, apps=None):
def get_translation_dict_from_file(path, lang, app):
def clear_cache():
def get_messages_for_app(app):
def get_messages_from_doctype(name):
def get_messages_from_page(name):
def get_messages_from_report(name):
def get_server_messages(app):
def get_messages_from_include_files(app_name=None):
def get_all_messages_from_js_files(app_name=None):
def get_messages_from_file(path):
def extract_messages_from_code(code, is_py=False):
def read_csv_file(path):
def write_csv_file(path, app_messages, lang_dict):
def get_untranslated(lang, untranslated_file, get_all=False):
def update_translations(lang, untranslated_file, translated_file):
def import_translations(lang, path):
def rebuild_all_translation_files():
def write_translations_file(app, lang, full_dict=None, app_messages=None):
def send_translations(translation_dict):
def get_email(recipients, sender=u'', msg=u'', subject=u'[No DCSP Subject]', text_content=None, footer=None, print_html=None, formatted=None, attachments=None, content=None, reply_to=None, cc=[], email_account=None, expose_recipients=None, inline_images=[], header=None):
def inline_style_in_html(html):
def add_attachment(fname, fcontent, content_type=None, parent=None, content_id=None, inline=False):
def get_message_id():
def get_footer(email_account, footer=None):
def replace_filename_with_cid(message):
def get_header(header=None):
def send(recipients=None, sender=None, subject=None, message=None, text_content=None, reference_doctype=None, reference_name=None, unsubscribe_method=None, unsubscribe_params=None, unsubscribe_message=None, attachments=None, reply_to=None, cc=[], message_id=None, in_reply_to=None, send_after=None, expose_recipients=None, send_priority=1, communication=None, now=False, read_receipt=None, queue_separately=False, is_notification=False, add_unsubscribe_link=1, inline_images=None, header=None):
def add(recipients, sender, subject, **kwargs):
def get_email_queue(recipients, sender, subject, **kwargs):
def flush(from_test=False):
def make_cache_queue():
def send_one(email, smtpserver=None, auto_commit=True, now=False, from_test=False):
def clear_outbox():
@frappe.whitelist() DCNL def create_email_flag_queue(names, action, flag='(\\Seen)'):
@frappe.whitelist() DCNL def mark_as_trash(communication):
@frappe.whitelist() DCNL def mark_as_spam(communication, sender):
@frappe.whitelist() DCNL def make_issue_from_communication(communication, ignore_communication_links=False):
@frappe.whitelist() DCNL def make_lead_from_communication(communication, ignore_communication_links=False):
@frappe.whitelist() DCNL def get_contact_list(txt):
def send(email, append_to=None, retry=1):
def get_outgoing_email_account(raise_exception_not_set=True, append_to=None):
def get_default_outgoing_email_account(raise_exception_not_set=True):
def test_internet(host=u'8.8.8.8', port=53, timeout=3):
def notify_unreplied():
def pull(now=False):
def pull_from_email_account(email_account):
@frappe.whitelist() DCNL def get_standard_reply(template_name, doc):
def create_lead(email_id):
@frappe.whitelist() DCNL def download(name):
@frappe.whitelist() DCNL def send_now(name):
def send_daily():
def send_monthly():
def on_doctype_update():
def _(msg, lang=None):
def as_unicode(text, encoding=u'utf-8'):
def get_lang_dict(fortype, name=None):
def set_user_lang(user, user_language=None):
def init(site, sites_path=None, new_site=False):
def connect(site=None, db_name=None):
def get_site_config(sites_path=None, site_path=None):
def destroy():
def cache():
def get_traceback():
def errprint(msg):
def log(msg):
def msgprint(msg, title=None, raise_exception=0, as_table=False, indicator=None, alert=False):
def throw(msg, exc=ValidationError, title=None):
def create_folder(path, with_init=False):
def set_user(username):
def get_roles(username=None):
def get_request_header(key, default=None):
def sendmail(recipients=[], sender=u'', subject=u'No DCSP Subject', message=u'No DCSP Message', as_markdown=False, delayed=True, reference_doctype=None, reference_name=None, unsubscribe_method=None, unsubscribe_params=None, unsubscribe_message=None, attachments=None, content=None, doctype=None, name=None, reply_to=None, cc=[], message_id=None, in_reply_to=None, send_after=None, expose_recipients=None, send_priority=1, communication=None, retry=1, now=None, read_receipt=None, is_notification=False, inline_images=None, template=None, args=None, header=None):
def whitelist(allow_guest=False, xss_safe=False):
def only_for(roles):
def clear_cache(user=None, doctype=None):
def has_permission(doctype=None, ptype=u'read', doc=None, user=None, verbose=False, throw=False):
def has_website_permission(doc=None, ptype=u'read', user=None, verbose=False, doctype=None):
def is_table(doctype):
def get_precision(doctype, fieldname, currency=None, doc=None):
def generate_hash(txt=None, length=None):
def reset_metadata_version():
def new_doc(doctype, parent_doc=None, parentfield=None, as_dict=False):
def set_value(doctype, docname, fieldname, value=None):
def get_doc(arg1, arg2=None):
def get_last_doc(doctype):
def get_single(doctype):
def get_meta(doctype, cached=True):
def delete_doc(doctype=None, name=None, force=0, ignore_doctypes=None, for_reload=False, ignore_permissions=False, flags=None):
def delete_doc_if_exists(doctype, name, force=0):
def reload_doctype(doctype, force=False, reset_permissions=False):
def reload_doc(module, dt=None, dn=None, force=False, reset_permissions=False):
def rename_doc(*args, **kwargs):
def get_module(modulename):
def scrub(txt):
def unscrub(txt):
def get_module_path(module, *joins):
def get_app_path(app_name, *joins):
def get_site_path(*joins):
def get_pymodule_path(modulename, *joins):
def get_module_list(app_name):
def get_all_apps(with_internal_apps=True, sites_path=None):
def get_installed_apps(sort=False, frappe_last=False):
def get_doc_hooks():
def get_hooks(hook=None, default=None, app_name=None):
def append_hook(target, key, value):
def setup_module_map():
def get_file_items(path, raise_not_found=False, ignore_empty_lines=True):
def get_file_json(path):
def read_file(path, raise_not_found=False):
def get_attr(method_string):
def call(fn, *args, **kwargs):
def make_property_setter(args, ignore_validate=False, validate_fields_for_doctype=True):
def import_doc(path, ignore_links=False, ignore_insert=False, insert=False):
def copy_doc(doc, ignore_no_copy=True):
def compare(val1, condition, val2):
def respond_as_web_page(title, html, success=None, http_status_code=None, context=None, indicator_color=None, primary_action=u'/', primary_label=None, fullpage=False):
def redirect_to_message(title, html, http_status_code=None, context=None, indicator_color=None):
def build_match_conditions(doctype, as_condition=True):
def get_list(doctype, *args, **kwargs):
def get_all(doctype, *args, **kwargs):
def get_value(*args, **kwargs):
def get_test_records(doctype):
def format_value(*args, **kwargs):
def format(*args, **kwargs):
def get_print(doctype=None, name=None, print_format=None, style=None, html=None, as_pdf=False, doc=None, output=None):
def publish_progress(*args, **kwargs):
def publish_realtime(*args, **kwargs):
def local_cache(namespace, key, generator, regenerate_if_none=False):
def enqueue(*args, **kwargs):
def logger(module=None, with_more_info=True):
def log_error(message=None, title=None):
def safe_eval(code, eval_globals=None, eval_locals=None):
def get_active_domains():
def get_active_modules():
def get_payment_gateway_controller(payment_gateway):
def capture_payment(is_sandbox=False, sanbox_response=None):
@frappe.whitelist() DCNL def take_backup():
def get_oauth_settings():
def get_test_doclist(doctype, name=None):
def create_http_request():
def enable_2fa():
def toggle_2fa_all_role(state=None):
def get_tests():
def get_tests_for(app):
def test_timeout():
def create_event(subject=u'_Test DCSP Event', starts_on=None):
@frappe.whitelist() DCNL def make_default(name):
def bundle(no_compress, make_copy=False, verbose=False):
def watch(no_compress):
def get_build_maps():
def html_to_js_template(path, content):
def scrub_html_template(content):
@frappe.whitelist() DCNL def get_list(doctype, fields=None, filters=None, order_by=None, limit_start=None, limit_page_length=20):
@frappe.whitelist() DCNL def get(doctype, name=None, filters=None):
@frappe.whitelist() DCNL def get_value(doctype, fieldname, filters=None, as_dict=True, debug=False):
@frappe.whitelist() DCNL def set_value(doctype, name, fieldname, value=None):
@frappe.whitelist() DCNL def insert(doc=None):
@frappe.whitelist() DCNL def insert_many(docs=None):
@frappe.whitelist() DCNL def save(doc):
@frappe.whitelist() DCNL def rename_doc(doctype, old_name, new_name, merge=False):
@frappe.whitelist() DCNL def submit(doc):
@frappe.whitelist() DCNL def cancel(doctype, name):
@frappe.whitelist() DCNL def delete(doctype, name):
@frappe.whitelist() DCNL def set_default(key, value, parent=None):
@frappe.whitelist() DCNL def make_width_property_setter(doc):
@frappe.whitelist() DCNL def bulk_update(docs):
@frappe.whitelist() DCNL def has_permission(doctype, docname, perm_type=u'read'):
@frappe.whitelist() DCNL def get_password(doctype, name, fieldname):
@frappe.whitelist() DCNL def get_js(items):
@frappe.whitelist(allow_guest=True) DCNL def get_time_zone():
def export_module_json(doc, is_standard, module):
def get_doc_module(module, doctype, name):
@frappe.whitelist() DCNL def export_customizations(module, doctype, sync_on_migrate=0, with_permissions=0):
def sync_customizations(app=None):
def sync_customizations_for_doctype(data):
def scrub_dt_dn(dt, dn):
def get_module_path(module):
def export_doc(doctype, name, module=None):
def get_doctype_module(doctype):
def load_doctype_module(doctype, module=None, prefix=u'', suffix=u''):
def import_file(module, dt, dn, force=False, pre_process=None, reset_permissions=False):
def export_to_files(record_list=None, record_module=None, verbose=0, create_init=None):
def run_all():
def execute_patch(patchmodule, method=None, methodargs=None):
def update_patch_log(patchmodule):
def executed(patchmodule):
def block_user(block):
def clear_sessions(user=None, keep_current=False, device=None):
def get_sessions_to_clear(user=None, keep_current=False, device=None):
def clear_all_sessions(reason=None):
def get_expired_sessions():
def clear_expired_sessions():
def get():
def load_address_and_contact(doc, key=None):
def get_default_contact(doctype, name):
def update_contact(doc, method):
def get_default_address(doctype, name, sort_key=u'is_primary_address'):
def get_territory_from_address(address):
def has_website_permission(doc, ptype, user, verbose=False):
@frappe.whitelist() DCNL def get_default_address_template():
def has_permission(doctype, ptype=u'read', doc=None, verbose=False, user=None):
def get_doc_permissions(doc, verbose=False, user=None):
def update_share_permissions(role_permissions, doc, user):
def get_role_permissions(meta, user=None, verbose=False):
def has_controller_permissions(doc, ptype, user=None):
def get_valid_perms(doctype=None, user=None):
def get_all_perms(role):
def get_roles(user=None, with_standard=True):
def get_perms_for(roles, perm_doctype=u'DocPerm'):
def add_user_permission(doctype, name, user, apply=False):
def apply_user_permissions(doctype, ptype, user=None):
def get_user_permission_doctypes(user_permission_doctypes, user_permissions):
def update_permission_property(doctype, role, permlevel, ptype, value=None, validate=True):
def setup_custom_perms(parent):
def add_permission(doctype, role, permlevel=0):
def copy_perms(parent):
def reset_perms(doctype):
def calculate_at_hash(access_token, hash_alg):
def xmlrunner_wrapper(output):
def run_ui_tests(app=None, test=None, verbose=False, profile=False):
def make_test_objects(doctype, test_records=None, verbose=None, reset=False):
@frappe.whitelist() DCNL def add(doctype, name, user=None, read=1, write=0, share=0, everyone=0, flags=None):
@frappe.whitelist() DCNL def set_permission(doctype, name, user, permission_to, value=1, everyone=0):
@frappe.whitelist() DCNL def get_users(doctype, name):
def get_shared(doctype, user=None, rights=None):
def get_shared_doctypes(user=None):
def check_share_permission(doctype, name):
def get_controller(doctype):
def _filter(data, filters, limit=None):
def set_new_name(doc):
def set_name_by_naming_series(doc):
def make_autoname(key=u'', doctype=u'', doc=u''):
def get_default_naming_series(doctype):
def updatedb(dt, meta=None):
def validate_column_length(fieldname):
def delete_doc(doctype=None, name=None, force=0, ignore_doctypes=None, for_reload=False, ignore_permissions=False, flags=None, ignore_on_trash=False):
def add_to_deleted_document(doc):
def check_if_doc_is_linked(doc, method=u'Delete'):
def check_if_doc_is_dynamically_linked(doc, method=u'Delete'):
def delete_fields(args_dict, delete=0):
def get_field_currency(df, doc=None):
def get_field_precision(df, doc=None, currency=None):
def trim_tables(doctype=None):
def rename(doctype, fieldname, newname):
def update_single(f, new):
def update_table(f, new):
def update_parent_field(f, new):
def get_change_column_query(f, new):
@frappe.whitelist() DCNL def make_mapped_doc(method, source_name, selected_children=None):
@frappe.whitelist() DCNL def map_docs(method, source_names, target_doc):
def get_doc_files(files, start_path, force=0, sync_everything=False, verbose=False):
def get_doc(arg1, arg2=None):
def execute_action(doctype, name, action, **kwargs):
@frappe.whitelist() DCNL def rename_doc(doctype, old, new, force=False, merge=False, ignore_permissions=False, ignore_if_exists=False):
def get_select_fields(old, new):
def bulk_rename(doctype, rows=None, via_console=False):
def get_dynamic_link_map(for_delete=False):
def get_dynamic_links():
def rename_field(doctype, old_fieldname, new_fieldname):
def set_default(doc, key):
def set_field_property(filters, key, value):
def render_include(content):
def get_fetch_values(doctype, fieldname, value):
def notify_link_count(doctype, name):
def flush_local_link_count():
def update_link_count():
def update_user_settings(doctype, user_settings, for_update=False):
def sync_user_settings():
@frappe.whitelist(allow_guest=True) DCNL def add_comment(args=None):
def get_bootinfo():
def get_fullnames():
def get_user(bootinfo):
def add_home_page(bootinfo, docs):
def toggle_two_factor_auth(state, roles=[]):
def two_factor_is_enabled(user=None):
def should_run_2fa(user):
def get_cached_user_pass():
def authenticate_for_2factor(user):
def cache_2fa_data(user, token, otp_secret, tmp_id):
def two_factor_is_enabled_for_(user):
def get_otpsecret_for_(user):
def confirm_otp_token(login_manager, otp=None, tmp_id=None):
def process_2fa_for_sms(user, token, otp_secret):
def process_2fa_for_otp_app(user, otp_secret, otp_issuer):
def process_2fa_for_email(user, token, otp_secret, otp_issuer, method=u'Email'):
def get_email_subject_for_2fa(kwargs_dict):
def get_email_body_for_2fa(kwargs_dict):
def get_email_subject_for_qr_code(kwargs_dict):
def get_email_body_for_qr_code(kwargs_dict):
def render_string_template(_str, kwargs_dict):
def get_link_for_qrcode(user, totp_uri):
def send_token_via_sms(otpsecret, token=None, phone_no=None):
def send_token_via_email(user, token, otp_secret, otp_issuer, subject=None, message=None):
def get_qr_svg_code(totp_uri):
def qrcode_as_png(user, totp_uri):
def create_barcode_folder():
def delete_qrimage(user, check_expiry=False):
def delete_all_barcodes_for_users():
def should_remove_barcode_image(barcode):
def publish_realtime(event=None, message=None, room=None, user=None, doctype=None, docname=None, task_id=None, after_commit=False):
def emit_via_redis(event, message, room):
def get_redis_server():
def migrate(verbose=True, rebuild_website=False):
def handle():
@frappe.whitelist() DCNL def get_list(arg=None):
@frappe.whitelist() DCNL def post(txt, contact, parenttype=None, notify=False, subject=None):
@frappe.whitelist() DCNL def setup_complete(args):
@frappe.whitelist() DCNL def load_messages(language):
@frappe.whitelist() DCNL def get_app_list():
def get_app_listing():
@frappe.whitelist() DCNL def install_app(name):
@frappe.whitelist() DCNL def remove_app(name):
def get_app(name):
@frappe.whitelist() DCNL def get_feed(start, page_length, show_likes=False):
@frappe.whitelist() DCNL def get(name):
@frappe.whitelist(allow_guest=True) DCNL def getpage():
@frappe.whitelist() DCNL def toggle_like(doctype, name, add=False):
def _toggle_like(doctype, name, add, user=None):
def remove_like(doctype, name):
@frappe.whitelist() DCNL def update_event(args, field_map):
def get_event_conditions(doctype, filters=None):
@frappe.whitelist() DCNL def get_all_nodes(tree_method, tree_args, parent):
@frappe.whitelist() DCNL def export_query():
def has_match(row, linked_doctypes, doctype_match_filters, ref_doctype, if_owner, columns_dict, user):
def get_columns_dict(columns):
def get_desktop_icons(user=None):
@frappe.whitelist() DCNL def add_user_icon(_doctype, _report=None, label=None, link=None, type=u'link', standard=0):
@frappe.whitelist() DCNL def set_order(new_order, user=None):
def set_desktop_icons(visible_list, ignore_duplicate=True):
def set_hidden_list(hidden_list, user=None):
def set_hidden(module_name, user=None, hidden=1):
def get_user_copy(module_name, user=None):
def make_user_copy(module_name, user):
def sync_desktop_icons():
def sync_from_app(app):
@frappe.whitelist() DCNL def add_column(board_name, column_title):
@frappe.whitelist() DCNL def archive_restore_column(board_name, column_title, status):
@frappe.whitelist() DCNL def update_doc(doc):
@frappe.whitelist() DCNL def update_order(board_name, order):
@frappe.whitelist() DCNL def quick_kanban_board(doctype, board_name, field_name):
@frappe.whitelist() DCNL def update_column_order(board_name, order):
@frappe.whitelist() DCNL def set_indicator(board_name, column_name, indicator):
@frappe.whitelist() DCNL def save_filters(board_name, filters):
def guess_type(m):
def add_limit_to_query(query, args):
@frappe.whitelist() DCNL def get(module):
def get_data(module):
def build_config_from_file(module):
def filter_by_restrict_to_domain(data):
def build_standard_config(module, doctype_info):
def add_section(data, label, icon, items):
def add_custom_doctypes(data, doctype_info):
def get_doctype_info(module):
def combine_common_sections(data):
def get_config(app, module):
def add_setup_section(config, app, module, label, icon):
def get_setup_section(app, module, label, icon):
def get_report_list(module, is_standard=u'No'):
def get_notifications_for_modules(config, notification_count):
def get_notifications_for_other(config, notification_count):
def get_notifications_for_doctypes(config, notification_count):
def get_notifications_for_targets(config, notification_percent):
def get_filters_for(doctype):
@frappe.whitelist() DCNL def get_open_count(doctype, name):
def get_form_params():
def compress(data, args={}):
@frappe.whitelist() DCNL def save_report():
@frappe.whitelist() DCNL def export_query():
def get_labels(fields, doctype):
@frappe.whitelist() DCNL def delete_items():
@frappe.whitelist() DCNL def get_stats(stats, doctype, filters=[]):
@frappe.whitelist() DCNL def get_filter_dashboard_data(stats, doctype, filters=[]):
def scrub_user_tags(tagcount):
def check_user_tags(dt):
@frappe.whitelist() DCNL def add_tag(tag, dt, dn, color=None):
@frappe.whitelist() DCNL def remove_tag(tag, dt, dn):
@frappe.whitelist() DCNL def runserverobj(method, docs=None, dt=None, dn=None, arg=None, args=None):
def make_csv_output(res, dt):
@frappe.whitelist() DCNL def remove_attach():
@frappe.whitelist() DCNL def validate_link():
@frappe.whitelist() DCNL def add_comment(doc):
@frappe.whitelist() DCNL def getdoc(doctype, name, user=None):
@frappe.whitelist() DCNL def getdoctype(doctype, with_parent=False, cached_timestamp=None):
def get_communication_data(doctype, name, start=0, limit=20, after=None, fields=None, group_by=None, as_dict=True):
def get_feedback_rating(doctype, docname):
@frappe.whitelist() DCNL def get_linked_doctypes(doctype):
def get(args=None):
@frappe.whitelist() DCNL def add(args=None):
@frappe.whitelist() DCNL def remove(doctype, name, assign_to):
def notify_assignment(assigned_by, owner, doc_type, doc_name, action=u'CLOSE', description=None, notify=0):
@frappe.whitelist() DCNL def savedocs(doc, action):
@frappe.whitelist() DCNL def cancel(doctype=None, name=None, workflow_state_fieldname=None, workflow_state=None):
@frappe.whitelist() DCNL def update_task(args, field_map):
def check_if_expired():
@frappe.whitelist() DCNL def get_usage_info():
def get_limits():
def update_limits(limits_dict):
def clear_limit(key):
def validate_space_limit(file_size):
def get_folder_size(path):
def get_database_size():
def execute():
def execute():
def execute():
def update_timeline_doc_for(timeline_doctype):
def execute():
def execute():
def execute():
def scrub_relative_urls(html):
def update_routes(doctypes):
def get_sorted_fields(doctype, custom_fields):
def execute():
def execute():
def setup_inbox_from_email_account():
def execute():
def remove_app(app_name, dry_run=False, yes=False):
def update_site_config(key, value, validate=True, site_config_path=None):
def cleanup_page_name(title):
def abs_url(path):
def get_toc(route, url_prefix=None, app=None):
def get_full_index(route=None, app=None):
def extract_title(source, path):
def add_missing_headers():
@frappe.whitelist(allow_guest=True) DCNL def accept(web_form, data, for_payment=False):
def resolve_route(path):
def get_page_info_from_template(path):
def get_all_page_context_from_doctypes():
def get_pages(app=None):
def get_page_info(path, app, start, basepath=None, app_path=None, fname=None):
def setup_source(page_info):
def setup_index(page_info):
def load_properties(page_info):
def get_doctypes_with_web_view():
def sync_global_search():
def render(path=None, http_status_code=None):
def render_page(path):
def get_website_rules():
def clear_cache(path=None):
def build_context(context):
def add_sidebar_and_breadcrumbs(context):
def get_signed_params(params):
def verify_request():
def write_file(content, fname, is_private=0):
def remove_all(dt, dn, from_delete=False):
def remove_file(fid, attached_to_doctype=None, attached_to_name=None, from_delete=False):
def delete_file_from_filesystem(doc, only_thumbnail=False):
def delete_file(path):
def get_file(fname):
def get_file_path(file_name):
@frappe.whitelist() DCNL def download_file(file_url):
def automodule(name):
def parse(docs):
def strip_leading_tabs(docs):
def automodel(doctype):
def get_obj_doc(obj):
def report_error(status_code):
def make_logs(response=None):
def json_handler(obj):
def as_page():
def download_private_file(path):
def sanitize_html(html, linkify=False):
def check_password(user, pwd, doctype=u'User', fieldname=u'password'):
def get_app_groups():
def getCSVelement(v):
def get_fullname(user=None):
def get_formatted_email(user):
def extract_email_id(email):
def validate_email_add(email_str, throw=False):
def random_string(length):
def has_gravatar(email):
def get_traceback():
def dict_to_str(args, sep=u'&'):
def get_defaults(key=None):
def set_default(key, val):
def remove_blanks(d):
def strip_html_tags(text):
def get_file_timestamp(fn):
def make_esc(esc_chars):
def esc(s, esc_chars):
def unesc(s, esc_chars):
def get_disk_usage():
def parse_addr(email_string):
def check_format(email_id):
def check_record(d):
def import_doc(d, doctype, overwrite, row_idx, submit=False, ignore_links=False):
def getdate(string_date=None):
def add_to_date(date, years=0, months=0, days=0, hours=0, as_string=False, as_datetime=False):
def now():
def nowdate():
def nowtime():
def get_first_day(dt, d_years=0, d_months=0):
def get_last_day(dt):
def formatdate(string_date=None, format_string=None):
def global_date_format(date):
def has_common(l1, l2):
def flt(s, precision=None):
def cint(s):
def rounded(num, precision=0):
def parse_val(v):
def fmt_money(amount, precision=None, currency=None):
def money_in_words(number, main_currency=None, fraction_currency=None):
def in_words(integer, in_million=True):
def strip_html(text):
def pretty_date(iso_datetime):
def filter_strip_join(some_list, sep):
def get_url(uri=None, full_address=False):
def evaluate_filters(doc, filters):
def get_filter(doctype, f):
def make_filter_tuple(doctype, key, value):
def unique(seq):
def get_system_managers(only_name=False):
def sync_fixtures(app=None):
def import_custom_scripts(app):
def export_fixtures():
def parse_date(date):
def create_lock(name):
def lock_exists(name):
def start_scheduler():
def enqueue_events_for_all_sites():
def trigger(site, event, queued_jobs=(), now=False):
def get_scheduler_events(event):
def log(method, message=None):
def scheduler_task(site, event, handler, now=False):
def update_add_node(doc, parent, parent_field):
def rebuild_tree(doctype, parent_field):
def rebuild_node(doctype, parent, left, parent_field):
def validate_loop(doctype, name, lft, rgt):
def get_root_of(doctype):
def get_ancestors_of(doctype, name):
def setup_global_search_table():
def reset():
def get_doctypes_with_global_search(with_child_tables=True):
def rebuild_for_doctype(doctype):
def get_children_data(doctype, meta):
def update_global_search(doc):
def get_formatted_value(value, field):
def sync_global_search(flags=None):
def delete_for_document(doc):
@frappe.whitelist() DCNL def search(text, start=0, limit=20, doctype=u''):
@frappe.whitelist(allow_guest=True) DCNL def web_search(text, start=0, limit=20):
def get_snapshot(exception, context=10):
def collect_error_snapshots():
def clear_old_snapshots():
def get_oauth_keys(provider):
@frappe.whitelist() DCNL def get_backup():
def scheduled_backup(older_than=6, ignore_files=False, backup_path_db=None, backup_path_files=None, backup_path_private_files=None, force=False):
def delete_temp_backups(older_than=24):
def is_file_old(db_file_name, older_than=24):
def backup(with_files=False, backup_path_db=None, backup_path_files=None, quiet=False):
@frappe.whitelist() DCNL def get_versions():
def get_app_branch(app):
def get_more_info_for_log():
def set_log_level(level):
def purge_pending_jobs(event=None, site=None, queue=None):
def doctor(site=None):
def validate_template(html):
def render_template(template, context, is_path=None):
def enqueue(method, queue=u'default', timeout=300, event=None, async=True, job_name=None, now=False, **kwargs):
def execute_job(site, method, event, job_name, kwargs, user=None, async=True, retry=0):
def start_worker(queue=None):
def get_worker_name(queue):
def get_jobs(site=None, queue=None, key=u'method'):
def get_queue_list(queue_list=None):
def get_queue(queue, async=True):
def test_password_strength(password, user_inputs=None):
def get_feedback(score, sequence):
def get_match_feedback(match, is_sole_match):
def get_dictionary_match_feedback(match, is_sole_match):
def isAlphanum(c):
def get_monthly_results(goal_doctype, goal_field, date_col, filter_str, aggregation=u'sum'):
@frappe.whitelist() DCNL def get_monthly_goal_graph_data(title, doctype, docname, goal_value_field, goal_total_field, goal_history_field, goal_doctype, goal_doctype_link, goal_field, date_field, filter_str, aggregation=u'sum'):
def format_value(value, df=None, doc=None, currency=None, translated=False):
@frappe.whitelist() DCNL def get_desk_assets(build_version):
def get_context(context):
@frappe.whitelist(allow_guest=True) DCNL def accept(key, sender, reference_doctype, reference_name, feedback, rating, fullname):
def get_query_key():
def get_user_svg_from_cache():
def get_context(context):
def get_context(context, **dict_params):
@frappe.whitelist(allow_guest=True) DCNL def get(doctype, txt=None, limit_start=0, limit=20, **kwargs):
def set_route(context):
def get_context(context):
def get_context(context):
def get_print_format_doc(print_format_name, meta):
def convert_markdown(doc, meta):
@frappe.whitelist() DCNL def get_html_and_style(doc, name=None, print_format=None, meta=None, no_letterhead=None, trigger_print=False):
def make_layout(doc, meta, format_data=None):
def is_visible(df, doc):
def get_visible_columns(data, table_meta, df):
def column_has_value(data, fieldname):
def handle():
def execute_cmd(cmd, from_async=False):
@frappe.whitelist(allow_guest=True) DCNL def run_custom_method(doctype, name, custom_method):
def get_attr(cmd):
def validate_bom_no(item, bom_no):
@frappe.whitelist() DCNL def get_events(start, end, filters=None):
@frappe.whitelist() DCNL def stop_unstop(production_order, status):
def reserve_for_production(production_order):
def get_columns():
@click.command(u'make-demo') DCNL @click.option(u'--site', help=u'site DCSP name') DCNL @click.option(u'--domain', default=u'Manufacturing') DCNL @click.option(u'--days', default=100, help=u'Run DCSP the DCSP demo DCSP for DCSP so DCSP many DCSP days. DCSP Default DCSP 100') DCNL @click.option(u'--resume', default=False, is_flag=True, help=u'Continue DCSP running DCSP the DCSP demo DCSP for DCSP given DCSP days') DCNL @click.option(u'--reinstall', default=False, is_flag=True, help=u'Reinstall DCSP site DCSP before DCSP demo') DCNL @pass_context DCNL def make_demo(context, site, domain=u'Manufacturing', days=100, resume=False, reinstall=False):
@frappe.whitelist() DCNL def get_leaderboard(obj):
def filter_leaderboard_items(obj, items):
def destructure_tuple_of_tuples(tup_of_tup):
def get_date_from_string(seleted_timeline):
def get_filter_list(selected_filter):
def get_avg(items):
def get_formatted_value(value, add_symbol=True):
def get_all_customers(doctype, filters, items, start=0, limit=100):
def get_all_items(doctype, filters, items, start=0, limit=100):
def get_all_suppliers(doctype, filters, items, start=0, limit=100):
def get_all_sales_partner(doctype, filters, items, start=0, limit=100):
def get_help_messages():
def update_last_purchase_rate(doc, is_submit):
def get_total_workdays(scorecard):
def get_item_workdays(scorecard):
def get_total_cost_of_shipments(scorecard):
def get_cost_of_delayed_shipments(scorecard):
def get_cost_of_on_time_shipments(scorecard):
def get_total_days_late(scorecard):
def get_on_time_shipments(scorecard):
def get_late_shipments(scorecard):
def get_total_received(scorecard):
def get_total_received_amount(scorecard):
def get_total_received_items(scorecard):
def get_total_rejected_amount(scorecard):
def get_total_rejected_items(scorecard):
def get_total_accepted_amount(scorecard):
def get_total_accepted_items(scorecard):
def get_total_shipments(scorecard):
def get_rfq_total_number(scorecard):
def get_rfq_total_items(scorecard):
def get_sq_total_number(scorecard):
def get_sq_total_items(scorecard):
def get_rfq_response_days(scorecard):
def make_request_for_quotation(supplier_data=None):
def get_default_company(user=None):
def get_default_currency():
def get_company_currency(company):
def encode_company_abbr(name, company):
def get_region(company=None):
def allow_regional(fn):
def get_employee_emails(company, only_working=True):
def get_dates(args):
@frappe.whitelist() DCNL def get_start_end_dates(payroll_frequency, start_date=None, company=None):
def get_holidays(employee, from_date, to_date):
def trigger_emails():
def send_summary():
@frappe.whitelist() DCNL def get_events(start, end, filters=None):
def get_timeline_data(doctype, name):
def send_birthday_reminders():
def get_employees_who_are_born_today():
def is_holiday(employee, date=None):
def get_root_of(doctype):
def get_ancestors_of(doctype, name):
def enable_all_roles_and_domains():
def delete_lead_addresses(company_name):
def update_company_monthly_sales(company):
def get_domain(domain):
def setup_domain(domain):
def setup_desktop_icons(data):
def setup_roles(data):
def set_values(data):
def setup_sidebar_items(data):
def update_module_def_restrict_to_domain():
def make_sample_data(args):
def import_email_alert():
def create_feed_and_todo():
def create_contact(contact, party_type, party):
def create_territories():
@frappe.whitelist() DCNL def get_variant(template, args=None, variant=None, manufacturer=None, manufacturer_part_no=None):
def make_variant_based_on_manufacturer(template, manufacturer, manufacturer_part_no):
def make_variant_item_code(template_item_code, template_item_name, variant):
def validate_conversion_rate(currency, conversion_rate, conversion_rate_label, company):
def get_tolerance_for(item_code, item_tolerance={}, global_tolerance=None):
def manage_recurring_documents(doctype, next_date=None, commit=True):
def send_notification(new_rv):
def set_next_date(doc, posting_date):
def setup_holiday_list():
def show_item_groups_in_website():
def _get_cart_quotation(party=None):
def set_price_list_and_rate(quotation, cart_settings):
def _set_price_list(quotation, cart_settings):
def set_taxes(quotation, cart_settings):
def get_address_territory(address_name):
@frappe.whitelist(allow_guest=True) DCNL def get_product_info(item_code):
def validate_overlap_for(doc, doctype, fieldname, value=None):
def get_overlap_for(doc, doctype, fieldname, value=None):
def get_timeline_data(doctype, name):
def get_course(program):
@frappe.whitelist() DCNL def enroll_student(source_name):
@frappe.whitelist() DCNL def check_attendance_records_exist(course_schedule=None, student_group=None, date=None):
@frappe.whitelist() DCNL def mark_attendance(students_present, students_absent, course_schedule=None, student_group=None, date=None):
def make_attendance_records(student, student_name, status, course_schedule=None, student_group=None, date=None):
@frappe.whitelist() DCNL def get_student_guardians(student):
@frappe.whitelist() DCNL def get_student_group_students(student_group, include_inactive=0):
@frappe.whitelist() DCNL def get_fee_structure(program, academic_term=None):
@frappe.whitelist() DCNL def get_fee_components(fee_structure):
@frappe.whitelist() DCNL def get_fee_schedule(program, student_category=None):
@frappe.whitelist() DCNL def get_course_schedule_events(start, end, filters=None):
@frappe.whitelist() DCNL def get_assessment_criteria(course):
@frappe.whitelist() DCNL def get_assessment_details(assessment_plan):
@frappe.whitelist() DCNL def get_result(student, assessment_plan):
@frappe.whitelist() DCNL def get_grade(grading_scale, percentage):
def auto_close_opportunity():
def auto_close_tickets():
def set_default_role(doc, method):
def home_page_is_products(doc, method):
@frappe.whitelist() DCNL def get_events(start, end, filters=None):
@frappe.whitelist() DCNL def make_production_orders(items, sales_order, company, project=None):
@frappe.whitelist() DCNL def get_stock_balance(item_code, warehouse, posting_date=None, posting_time=None, with_valuation_rate=False):
@frappe.whitelist() DCNL def get_incoming_rate(args):
def get_avg_purchase_rate(serial_nos):
def get_valuation_method(item_code):
def get_fifo_rate(previous_stock_queue, qty):
def get_valid_serial_nos(sr_nos, qty=0, item_code=u''):
def repost(only_actual=False, allow_negative_stock=False, allow_zero_rate=False, only_bin=False):
def reorder_item():
def create_material_request(material_requests):
def send_email_notification(mr_list):
@frappe.whitelist() DCNL def get_item_details(args):
def insert_item_price(args):
@frappe.whitelist() DCNL def apply_price_list(args, as_doc=False):
@frappe.whitelist() DCNL def make_stock_entry(**args):
@frappe.whitelist() DCNL def get_uom_details(item_code, uom, qty):
def get_timeline_data(doctype, name):
def get_last_purchase_details(item_code, doc_name=None, conversion_rate=1.0):
@frappe.whitelist() DCNL def get_batch_qty(batch_no=None, warehouse=None, item_code=None):
@frappe.whitelist() DCNL def get_batches_by_oldest(item_code, warehouse):
@frappe.whitelist() DCNL def split_batch(batch_no, item_code, warehouse, qty, new_batch_id=None):
def set_batch_nos(doc, warehouse_field, throw=False):
def get_batch_no(item_code, warehouse, qty, throw=False):
def make_packing_list(doc):
def cleanup_packing_list(doc, parent_items):
def allow_serial_nos_with_different_item(sle_serial_no, sle):
def get_invoiced_qty_map(delivery_note):
def update_item_projected_qty(item_code):
def get_invoiced_qty_map(purchase_receipt):
@frappe.whitelist() DCNL def get_data(item_code=None, warehouse=None, item_group=None, start=0, sort_by=u'actual_qty', sort_order=u'desc'):
def get_previous_sle(args, for_update=False):
def get_stock_ledger_entries(previous_sle, operator=None, order=u'desc', limit=None, for_update=False, debug=False):
def get_columns(filters):
def get_columns(filters):
def get_columns():
def get_columns(filters):
def get_item_map(item_code):
def get_columns(filters):
def get_item_details():
def get_price_list():
def get_item_bom_rate():
def get_valuation_rate():
def boot_session(bootinfo):
def execute():
def execute():
def execute():
def check_and_update_desktop_icon_for_report(report):
def check_and_update_auto_email_report(report):
def execute():
def execute():
def execute():
def execute():
def execute():
def execute():
def execute():
def execute():
def execute():
def execute():
def execute():
def execute():
@frappe.whitelist() DCNL def send_gstin_reminder(party_type, party):
def _send_gstin_reminder(party_type, party, default_email_id=None, sent_to=None):
def test_method():
def reconcile_against_document(args):
def check_if_advance_entry_modified(args):
def update_reference_in_journal_entry(d, jv_obj):
def get_account_name(account_type=None, root_type=None, is_group=None, account_currency=None, company=None):
@frappe.whitelist() DCNL def get_companies():
@frappe.whitelist() DCNL def apply_pricing_rule(args):
def check_freezing_date(posting_date, adv_adj=False):
def get_tax_template(posting_date, args):
@frappe.whitelist() DCNL def get_opening_accounts(company):
@frappe.whitelist() DCNL def get_account_balance_and_party_type(account, date, company, debit=None, credit=None, exchange_rate=None):
def get_account_currency(account):
def make_maps_for_xml(xml_roots, account_types, country_dir):
def make_account_trees():
def make_charts():
@frappe.whitelist(allow_guest=True) DCNL def make_payment_request(**args):
def get_amount(ref_doc, dt):
def get_gateway_details(args):
def get_default_price_list(party):
@frappe.whitelist() DCNL def get_party_account(party_type, party, company):
def validate_party_gle_currency(party_type, party, company, party_account_currency=None):
@frappe.whitelist() DCNL def get_due_date(posting_date, party_type, party, company):
def get_timeline_data(doctype, name):
def get_columns(invoice_list, additional_table_columns):
def set_gl_entries_by_account(company, from_date, to_date, based_on, gl_entries_by_account, ignore_closing_entries=False):
def get_columns(invoice_list, additional_table_columns):
def get_period_list(from_fiscal_year, to_fiscal_year, periodicity, accumulated_values=False, company=None, reset_period_on_fy_change=True):
def accumulate_values_into_parents(accounts, accounts_by_name, period_list, accumulated_values):
def sort_root_accounts(roots):
def set_gl_entries_by_account(company, from_date, to_date, root_lft, root_rgt, filters, gl_entries_by_account, ignore_closing_entries=False):
def get_timeline_data(doctype, name):
@frappe.whitelist() DCNL def get_events(start, end, filters=None):
@frappe.whitelist() DCNL def get_events(start, end, filters=None):
@with_setup(prepare_stdout) DCNL def test_simple_behave_as_feature():
@with_setup(prepare_stdout) DCNL def test_simple_tables_behave_as_feature():
@with_setup(prepare_stdout) DCNL def test_failing_tables_behave_as_feature():
@with_setup(prepare_stdout) DCNL def test_output_with_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_of_table_with_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_outlines_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_outlines_success_colorful():
@with_setup(prepare_stdout) DCNL def test_output_outlines2_success_colorful():
@with_setup(prepare_stdout) DCNL def test_output_with_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_of_table_with_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_outlines_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_outlines_success_colorful():
@with_setup(prepare_stdout) DCNL def test_output_with_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_of_table_with_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_outlines_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_outlines_success_colorful():
@with_setup(prepare_stdout) DCNL def test_output_with_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_of_table_with_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_outlines_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_outlines_success_colorful():
@with_setup(prepare_stdout) DCNL def test_output_with_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_of_table_with_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_outlines_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_outlines_success_colorful():
@with_setup(prepare_stdout) DCNL def test_output_with_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_of_table_with_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_outlines_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_outlines_success_colorful():
def test_feature_finder_finds_all_feature_files_within_a_dir():
def test_feature_finder_loads_feature_objects():
def test_feature_loaded_from_file_has_feature_line_and_feature_filename():
def test_feature_loaded_from_file_has_description_at():
def test_feature_loaded_from_file_sets_scenario_line_and_scenario_filename():
def test_feature_loaded_from_file_sets_step_line_and_step_filenames():
@with_setup(state.setup, state.teardown) DCNL def test_subunit_output_with_no_errors():
@with_setup(state.setup, state.teardown) DCNL def test_subunit_output_with_one_error():
@with_setup(state.setup, state.teardown) DCNL def test_subunit_output_with_tags():
@with_setup(state.setup, state.teardown) DCNL def test_subunit_output_unicode():
@with_setup(state.setup, state.teardown) DCNL def test_subunit_output_console():
@with_setup(state.setup, state.teardown) DCNL def test_subunit_output_undefined_steps():
@with_setup(prepare_stdout, registry.clear) DCNL def test_xunit_output_with_no_errors():
@with_setup(prepare_stdout, registry.clear) DCNL def test_xunit_output_with_one_error():
@with_setup(prepare_stdout, registry.clear) DCNL def test_xunit_output_with_different_filename():
@with_setup(prepare_stdout, registry.clear) DCNL def test_xunit_output_with_no_steps():
@with_setup(prepare_stdout, registry.clear) DCNL def test_xunit_output_with_background_section():
@with_setup(prepare_stdout, registry.clear) DCNL def test_xunit_xml_output_with_no_errors():
@with_setup(prepare_stderr) DCNL def test_try_to_import_terrain():
def test_feature_representation_without_colors():
def test_scenario_outline_representation_without_colors():
def test_scenario_representation_without_colors():
def test_undefined_step_represent_string():
def test_defined_step_represent_string():
@with_setup(prepare_stdout) DCNL def test_output_with_success_colorless2():
@with_setup(prepare_stdout) DCNL def test_output_with_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_with_success_colorful():
@with_setup(prepare_stdout) DCNL def test_output_with_success_colorful_newline():
@with_setup(prepare_stdout) DCNL def test_output_with_success_colorless_many_features():
@with_setup(prepare_stdout) DCNL def test_output_with_success_colorful_many_features():
@with_setup(prepare_stdout) DCNL def test_output_when_could_not_find_features():
@with_setup(prepare_stdout) DCNL def test_output_when_could_not_find_features_colorless():
@with_setup(prepare_stdout) DCNL def test_output_when_could_not_find_features_verbosity_level_2():
@with_setup(prepare_stdout) DCNL def test_output_with_success_colorless_with_table():
@with_setup(prepare_stdout) DCNL def test_output_with_success_colorful_with_table():
@with_setup(prepare_stdout) DCNL def test_output_with_failed_colorless_with_table():
@with_setup(prepare_stdout) DCNL def test_output_with_failed_colorful_with_table():
@with_setup(prepare_stdout) DCNL def test_output_with_successful_outline_colorless():
@with_setup(prepare_stdout) DCNL def test_output_with_successful_outline_colorful():
@with_setup(prepare_stdout) DCNL def test_output_with_failful_outline_colorless():
@with_setup(prepare_stdout) DCNL def test_output_with_failful_outline_colorful():
@with_setup(prepare_stdout) DCNL def test_output_snippets_with_groups_within_double_quotes_colorless():
@with_setup(prepare_stdout) DCNL def test_output_snippets_with_groups_within_double_quotes_colorful():
@with_setup(prepare_stdout) DCNL def test_output_snippets_with_groups_within_single_quotes_colorless():
@with_setup(prepare_stdout) DCNL def test_output_snippets_with_groups_within_single_quotes_colorful():
@with_setup(prepare_stdout) DCNL def test_output_snippets_with_groups_within_redundant_quotes():
@with_setup(prepare_stdout) DCNL def test_output_snippets_with_normalized_unicode_names():
@with_setup(prepare_stdout) DCNL def test_output_level_2_success():
@with_setup(prepare_stdout) DCNL def test_output_level_2_fail():
@with_setup(prepare_stdout) DCNL def test_output_level_2_error():
@with_setup(prepare_stdout) DCNL def test_output_level_1_success():
@with_setup(prepare_stdout) DCNL def test_output_level_1_fail():
@with_setup(prepare_stdout) DCNL def test_output_level_1_error():
@with_setup(prepare_stdout) DCNL def test_commented_scenario():
@with_setup(prepare_stdout) DCNL def test_blank_step_hash_value():
@with_setup(prepare_stdout) DCNL def test_run_only_fast_tests():
def test_run_random():
@with_setup(prepare_stdout) DCNL def test_background_with_header():
@with_setup(prepare_stdout) DCNL def test_background_without_header():
@with_setup(prepare_stdout) DCNL def test_output_background_with_success_colorless():
@with_setup(prepare_stdout) DCNL def test_output_background_with_success_colorful():
@with_setup(prepare_stdout) DCNL def test_background_with_scenario_before_hook():
@with_setup(prepare_stderr) DCNL def test_many_features_a_file():
@with_setup(prepare_stderr) DCNL def test_feature_without_name():
@with_setup(prepare_stderr) DCNL def test_feature_missing_scenarios():
@with_setup(prepare_stdout) DCNL def test_output_with_undefined_steps_colorful():
@with_setup(prepare_stdout) DCNL def test_after_each_all_is_executed_before_each_all():
def test_loads_sum_steps():
def test_recursive_fallback():
def test_discard_invalid_filenames():
@with_setup(prepare_stdout, registry.clear) DCNL def test_jsonreport_output_with_no_errors():
@with_setup(prepare_stdout, registry.clear) DCNL def test_jsonreport_output_with_one_error():
@with_setup(prepare_stdout, registry.clear) DCNL def test_jsonreport_output_with_different_filename():
@with_setup(prepare_stdout, registry.clear) DCNL def test_jsonreport_output_with_no_steps():
@with_setup(prepare_stdout, registry.clear) DCNL def test_jsonreport_output_with_background_section():
@with_setup(prepare_stdout, registry.clear) DCNL def test_jsonreport_output_with_unicode_and_bytestring():
@FileSystem.in_directory(current_directory, 'django', 'grocery') DCNL def test_django_admin_media_serving_on_django_13():
@FileSystem.in_directory(current_directory, 'django', 'grocery') DCNL def test_django_admin_media_serving_on_django_125():
@FileSystem.in_directory(current_directory, 'django', 'grocery') DCNL def test_django_admin_media_serving_forced_by_setting():
@FileSystem.in_directory(current_directory, 'django', 'cucumber') DCNL def test_django_against_cucumber_django_project():
@FileSystem.in_directory(current_directory, 'django', 'chive') DCNL def test_django_admin_media_serving_on_django_13():
@FileSystem.in_directory(current_directory, 'django', 'brocolis') DCNL def test_harvest_with_debug_mode_enabled():
@FileSystem.in_directory(current_directory, 'django', 'brocolis') DCNL def test_harvest_with_debug_mode_disabled():
@FileSystem.in_directory(current_directory, 'django', 'brocolis') DCNL def test_harvest_sets_environment_variabled_for_gae():
@FileSystem.in_directory(current_directory, 'django', 'brocolis') DCNL def test_harvest_uses_test_runner():
@step('I DCSP send DCSP a DCSP test DCSP email$') DCNL def mail_send_simple(step):
@step('I DCSP send DCSP a DCSP test DCSP email DCSP with DCSP the DCSP following DCSP set:$') DCNL def mail_send_yaml(step):
@FileSystem.in_directory(current_directory, 'django', 'kale') DCNL def test_harvest_uses_test_runner():
@FileSystem.in_directory(current_directory, 'django', 'alfaces') DCNL def test_django_agains_alfaces():
@FileSystem.in_directory(current_directory, 'django', 'alfaces') DCNL def test_django_background_server_running_in_background():
@FileSystem.in_directory(current_directory, 'django', 'alfaces') DCNL def test_django_background_server_running_in_background_with_custom_port():
@FileSystem.in_directory(current_directory, 'django', 'alfaces') DCNL def test_limit_by_app_getting_all_apps_by_comma():
@FileSystem.in_directory(current_directory, 'django', 'alfaces') DCNL def test_limit_by_app_getting_one_app():
@FileSystem.in_directory(current_directory, 'django', 'alfaces') DCNL def test_excluding_apps_separated_by_comma():
@FileSystem.in_directory(current_directory, 'django', 'alfaces') DCNL def test_excluding_app():
@FileSystem.in_directory(current_directory, 'django', 'alfaces') DCNL def test_running_only_apps_within_lettuce_apps_setting():
@FileSystem.in_directory(current_directory, 'django', 'alfaces') DCNL def test_running_all_apps_but_lettuce_avoid_apps():
@FileSystem.in_directory(current_directory, 'django', 'alfaces') DCNL def test_ignores_settings_avoid_apps_if_apps_argument_is_passed():
@FileSystem.in_directory(current_directory, 'django', 'alfaces') DCNL def test_no_server():
@FileSystem.in_directory(current_directory, 'django', 'alfaces') DCNL def test_django_specifying_scenarios_to_run():
@FileSystem.in_directory(current_directory, 'django', 'alfaces') DCNL def test_django_specifying_scenarios_to_run_by_tag():
@FileSystem.in_directory(current_directory, 'django', 'alfaces') DCNL def test_running_only_specified_features():
@FileSystem.in_directory(current_directory, 'django', 'alfaces') DCNL def test_specifying_features_in_inner_directory():
@FileSystem.in_directory(current_directory, 'django', 'dill') DCNL def test_model_creation():
@FileSystem.in_directory(current_directory, 'django', 'dill') DCNL def test_model_update():
@FileSystem.in_directory(current_directory, 'django', 'dill') DCNL def test_model_existence_check():
@FileSystem.in_directory(current_directory, 'django', 'dill') DCNL def test_use_test_database_setting():
@FileSystem.in_directory(current_directory, 'django', 'celeries') DCNL def test_failfast():
def pks(objects):
def fully_decorated(request):
def get_perm(Model, perm):
def datatype(dbtype, description):
def no_template_view(request):
def staff_only_view(request):
def get_view(request):
def request_data(request, template='base.html', data='sausage'):
def view_with_argument(request, name):
def login_protected_redirect_view(request):
def set_session_view(request):
def check_session_view(request):
def request_methods_view(request):
def return_json_file(request):
def check_headers(request):
def file_upload_view(request):
def file_upload_view_verify(request):
def file_upload_echo(request):
def file_upload_quota(request):
def file_upload_quota_broken(request):
def file_upload_getlist_count(request):
def index_page(request):
def custom_create(request):
def redirect(request):
def post_form_view(request):
def token_view(request):
def non_token_view_using_request_processor(request):
def run_stddev_tests():
def create_egg(name, resources):
def animal_pre_save_check(signal, sender, instance, **kwargs):
def suite():
def get_view(request):
def post_view(request):
def view_with_header(request):
def raw_post_view(request):
def redirect_view(request):
def view_with_secure(request):
def double_redirect_view(request):
def bad_view(request):
def form_view(request):
def form_view_with_template(request):
def login_protected_view(request):
def login_protected_view_changed_redirect(request):
def permission_protected_view(request):
def session_view(request):
def broken_view(request):
def handle_extensions(extensions=('html',)):
def _popen(cmd):
def walk(root, topdown=True, onerror=None, followlinks=False):
def is_ignored(path, ignore_patterns):
def find_files(root, ignore_patterns, verbosity, symlinks=False):
def copy_plural_forms(msgs, locale, domain, verbosity):
def make_messages(locale=None, domain='django', verbosity='1', all=False, extensions=None, symlinks=False, ignore_patterns=[]):
def module_to_dict(module, omittable=(lambda k: k.startswith('_'))):
def sort_dependencies(app_list):
def handle_default_options(options):
def copy_helper(style, app_or_project, name, directory, other_name=''):
def _make_writeable(filename):
def sql_create(app, style, connection):
def sql_delete(app, style, connection):
def sql_reset(app, style, connection):
def sql_flush(style, connection, only_django=False):
def sql_custom(app, style, connection):
def sql_indexes(app, style, connection):
def sql_all(app, style, connection):
def find_commands(management_dir):
def find_management_module(app_name):
def load_command_class(app_name, name):
def get_commands():
def call_command(name, *args, **options):
def setup_environ(settings_mod, original_settings_path=None):
def execute_from_command_line(argv=None):
def execute_manager(settings_mod, argv=None):
def get_validation_errors(outfile, app=None):
def supports_color():
def color_style():
def no_style():
def _formatparam(param, value=None, quote=1):
def guess_scheme(environ):
def is_hop_by_hop(header_name):
def get_script_name(environ):
def handler(req):
def safe_copyfileobj(fsrc, fdst, length=(16 * 1024), size=0):
def get_connection(backend=None, fail_silently=False, **kwds):
def send_mail(subject, message, from_email, recipient_list, fail_silently=False, auth_user=None, auth_password=None, connection=None):
def send_mass_mail(datatuple, fail_silently=False, auth_user=None, auth_password=None, connection=None):
def mail_admins(subject, message, fail_silently=False, connection=None):
def mail_managers(subject, message, fail_silently=False, connection=None):
def make_msgid(idstring=None):
def forbid_multi_line_headers(name, val, encoding):
def load_handler(path, *args, **kwargs):
def get_image_dimensions(file_or_path, close=False):
def fd(f):
def file_move_safe(old_file_name, new_file_name, chunk_size=(1024 * 64), allow_overwrite=False):
def auth(request):
def csrf(request):
def debug(request):
def media(request):
def get_callable(lookup_view, can_fail=False):
def set_script_prefix(prefix):
def get_script_prefix():
def set_urlconf(urlconf_name):
def get_urlconf(default=None):
def populate_xheaders(request, response, model, object_id):
def register_serializer(format, serializer_module, serializers=None):
def unregister_serializer(format):
def serialize(format, queryset, **options):
def deserialize(format, stream_or_string, **options):
def _load_serializers():
def Deserializer(stream_or_string, **options):
def Deserializer(stream_or_string, **options):
def Deserializer(object_list, **options):
def _get_model(model_identifier):
def getInnerText(node):
def parse_backend_uri(backend_uri):
def safeRef(target, onDelete=None):
def get_bound_method_weakref(target, onDelete):
def simple_class_factory(model, attrs):
def model_unpickle(model, attrs, factory):
def permalink(func):
def get_cached_row(klass, row, index_start, using, max_depth=0, cur_depth=0, requested=None, offset=0, only_load=None, local_only=False):
def delete_objects(seen_objs, using):
def insert_query(model, values, return_id=False, raw_values=False, using=None):
def select_related_descend(field, restricted, requested, reverse=False):
def deferred_class_factory(model, attrs):
def ensure_default_manager(sender, **kwargs):
def get_order_dir(field, default='ASC'):
def setup_join_cache(sender, **kwargs):
def add_to_dict(data, key, value):
def empty_iter():
def order_modified_iter(cursor, trim, sentinel):
def make_contrib(superclass, func=None):
def add_lazy_relation(cls, field, relation, operation):
def do_pending_lookups(sender, **kwargs):
def create_many_related_manager(superclass, rel=False):
def to_unicode(s):
def truncate_name(name, length=None):
def format_number(value, max_digits, decimal_places):
def typecast_string(s):
def _parse_version(text):
def get_version(cursor):
def enter_transaction_management(managed=True, using=None):
def leave_transaction_management(using=None):
def is_dirty(using=None):
def set_dirty(using=None):
def set_clean(using=None):
def is_managed(using=None):
def managed(flag=True, using=None):
def commit_unless_managed(using=None):
def rollback_unless_managed(using=None):
def commit(using=None):
def rollback(using=None):
def savepoint(using=None):
def savepoint_rollback(sid, using=None):
def savepoint_commit(sid, using=None):
def autocommit(using=None):
def commit_on_success(using=None):
def commit_manually(using=None):
def _is_ignorable_404(uri):
def _is_internal_request(domain, referer):
def _is_valid_path(path, urlconf=None):
def _get_failure_view():
def get_token(request):
def do_get_available_languages(parser, token):
def do_get_current_language(parser, token):
def do_get_current_language_bidi(parser, token):
def do_translate(parser, token):
def do_block_translate(parser, token):
def do_cache(parser, token):
def render_to_response(*args, **kwargs):
def redirect(to, *args, **kwargs):
def _get_queryset(klass):
def get_object_or_404(klass, *args, **kwargs):
def get_list_or_404(klass, *args, **kwargs):
@requires_csrf_token DCNL def page_not_found(request, template_name='404.html'):
@requires_csrf_token DCNL def server_error(request, template_name='500.html'):
def csrf_response_exempt(view_func):
def csrf_view_exempt(view_func):
def csrf_exempt(view_func):
def require_http_methods(request_method_list):
def condition(etag_func=None, last_modified_func=None):
def vary_on_headers(*headers):
def vary_on_cookie(func):
def cache_page(*args, **kwargs):
def never_cache(view_func):
def set_language(request):
def get_formats():
def null_javascript_catalog(request, domain=None, packages=None):
def javascript_catalog(request, domain='djangojs', packages=None):
def serve(request, path, document_root=None, show_indexes=False):
def was_modified_since(header=None, mtime=0, size=0):
def csrf_failure(request, reason=''):
def apply_extra_context(extra_context, context):
def get_model_and_form_class(model, form_class):
def redirect(post_save_redirect, obj):
def lookup_object(model, object_id, slug, slug_field):
def create_object(request, model=None, template_name=None, template_loader=loader, extra_context=None, post_save_redirect=None, login_required=False, context_processors=None, form_class=None):
def update_object(request, model=None, object_id=None, slug=None, slug_field='slug', template_name=None, template_loader=loader, extra_context=None, post_save_redirect=None, login_required=False, context_processors=None, template_object_name='object', form_class=None):
def delete_object(request, model, post_delete_redirect, object_id=None, slug=None, slug_field='slug', template_name=None, template_loader=loader, extra_context=None, login_required=False, context_processors=None, template_object_name='object'):
def object_list(request, queryset, paginate_by=None, page=None, allow_empty=True, template_name=None, template_loader=loader, extra_context=None, context_processors=None, template_object_name='object', mimetype=None):
def object_detail(request, queryset, object_id=None, slug=None, slug_field='slug', template_name=None, template_name_field=None, template_loader=loader, extra_context=None, context_processors=None, template_object_name='object', mimetype=None):
def direct_to_template(request, template, extra_context=None, mimetype=None, **kwargs):
def redirect_to(request, url, permanent=True, **kwargs):
def archive_index(request, queryset, date_field, num_latest=15, template_name=None, template_loader=loader, extra_context=None, allow_empty=True, context_processors=None, mimetype=None, allow_future=False, template_object_name='latest'):
def archive_year(request, year, queryset, date_field, template_name=None, template_loader=loader, extra_context=None, allow_empty=False, context_processors=None, template_object_name='object', mimetype=None, make_object_list=False, allow_future=False):
def archive_month(request, year, month, queryset, date_field, month_format='%b', template_name=None, template_loader=loader, extra_context=None, allow_empty=False, context_processors=None, template_object_name='object', mimetype=None, allow_future=False):
def archive_week(request, year, week, queryset, date_field, template_name=None, template_loader=loader, extra_context=None, allow_empty=True, context_processors=None, template_object_name='object', mimetype=None, allow_future=False):
def archive_day(request, year, month, day, queryset, date_field, month_format='%b', day_format='%d', template_name=None, template_loader=loader, extra_context=None, allow_empty=False, context_processors=None, template_object_name='object', mimetype=None, allow_future=False):
def archive_today(request, **kwargs):
def object_detail(request, year, month, day, queryset, date_field, month_format='%b', day_format='%d', object_id=None, slug=None, slug_field='slug', template_name=None, template_name_field=None, template_loader=loader, extra_context=None, context_processors=None, template_object_name='object', mimetype=None, allow_future=False):
def cleanse_setting(key, value):
def get_safe_settings():
def technical_500_response(request, exc_type, exc_value, tb):
def technical_404_response(request, exception):
def empty_urlconf(request):
def flatatt(attrs):
def en_format(name):
def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False, can_delete=False, max_num=None):
def all_valid(formsets):
def construct_instance(form, instance, fields=None, exclude=None):
def save_instance(form, instance, fields=None, fail_message='saved', commit=True, exclude=None, construct=True):
def make_model_save(model, fields, fail_message):
def make_instance_save(instance, fields, fail_message):
def form_for_fields(field_list):
def model_to_dict(instance, fields=None, exclude=None):
def fields_for_model(model, fields=None, exclude=None, widgets=None, formfield_callback=None):
def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None):
def _get_foreign_key(parent_model, model, fk_name=None, can_fail=False):
def inlineformset_factory(parent_model, model, form=ModelForm, formset=BaseInlineFormSet, fk_name=None, fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None):
def pretty_name(name):
def get_declared_fields(bases, attrs, with_base_fields=True):
def exhaust(stream_or_iterable):
def parse_boundary_stream(stream, max_header_size):
def parse_header(line):
def fix_location_header(request, response):
def conditional_content_removal(request, response):
def fix_IE_for_attach(request, response):
def fix_IE_for_vary(request, response):
def str_to_unicode(s, encoding):
def to_list(value):
def connections_support_transactions():
def instrumented_test_render(self, context):
def setup_test_environment():
def teardown_test_environment():
def get_warnings_state():
def restore_warnings_state(state):
def store_rendered_templates(store, signal, sender, template, context, **kwargs):
def encode_multipart(boundary, data):
def is_private(prefix, base):
def _extract_future_flags(globs):
def _normalize_module(module, depth=2):
def _indent(s, indent=4):
def _exception_traceback(exc_info):
def _ellipsis_match(want, got):
def _comment_line(line):
def testmod(m=None, name=None, globs=None, verbose=None, isprivate=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False):
def testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser()):
def run_docstring_examples(f, globs, verbose=False, name='NoName', compileflags=None, optionflags=0):
def set_unittest_reportflags(flags):
def DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, test_class=DocTestCase, **options):
def DocFileSuite(*paths, **kw):
def script_from_examples(s):
def testsource(module, name):
def debug_src(src, pm=False, globs=None):
def debug_script(src, pm=False, globs=None):
def debug(module, name, pm=False):
def build_suite(app_module):
def build_test(label):
def partition_suite(suite, classes, bins):
def reorder_suite(suite, classes):
def dependency_ordered(test_databases, dependencies):
def autoescape(parser, token):
def comment(parser, token):
def cycle(parser, token):
def debug(parser, token):
def do_filter(parser, token):
def firstof(parser, token):
def do_for(parser, token):
def ifequal(parser, token):
def ifnotequal(parser, token):
def do_if(parser, token):
def ifchanged(parser, token):
def ssi(parser, token):
def load(parser, token):
def now(parser, token):
def regroup(parser, token):
def spaceless(parser, token):
def templatetag(parser, token):
def url(parser, token):
def widthratio(parser, token):
def do_with(parser, token):
def compile_string(template_string, origin):
def resolve_variable(path, context):
def _render_value_in_context(value, context):
def generic_tag_compiler(params, defaults, name, node_class, parser, token):
def import_library(taglib_module):
def get_templatetags_modules():
def get_library(library_name):
def stringfilter(func):
def addslashes(value):
def capfirst(value):
def escapejs(value):
def fix_ampersands(value):
def floatformat(text, arg=(-1)):
def iriencode(value):
def linenumbers(value, autoescape=None):
def lower(value):
def make_list(value):
def slugify(value):
def stringformat(value, arg):
def title(value):
def truncatewords(value, arg):
def truncatewords_html(value, arg):
def upper(value):
def urlencode(value):
def urlize(value, autoescape=None):
def urlizetrunc(value, limit, autoescape=None):
def wordcount(value):
def wordwrap(value, arg):
def ljust(value, arg):
def rjust(value, arg):
def center(value, arg):
def cut(value, arg):
def escape(value):
def force_escape(value):
def linebreaks(value, autoescape=None):
def linebreaksbr(value, autoescape=None):
def safe(value):
def safeseq(value):
def removetags(value, tags):
def striptags(value):
def dictsort(value, arg):
def dictsortreversed(value, arg):
def first(value):
def join(value, arg, autoescape=None):
def last(value):
def length(value):
def length_is(value, arg):
def random(value):
def slice_(value, arg):
def unordered_list(value, autoescape=None):
def add(value, arg):
def get_digit(value, arg):
def date(value, arg=None):
def time(value, arg=None):
def timesince(value, arg=None):
def timeuntil(value, arg=None):
def default(value, arg):
def default_if_none(value, arg):
def divisibleby(value, arg):
def yesno(value, arg=None):
def filesizeformat(bytes):
def pluralize(value, arg=u's'):
def phone2numeric(value):
def pprint(value):
def get_template(template_name):
def get_template_from_string(source, origin=None, name=None):
def render_to_string(template_name, dictionary=None, context_instance=None):
def select_template(template_name_list):
def do_block(parser, token):
def do_extends(parser, token):
def do_include(parser, token):
def infix(bp, func):
def prefix(bp, func):
def flatpage(request, url):
@csrf_protect DCNL def render_flatpage(request, f):
def feed(request, url, feed_dict=None):
def get_comment_count(parser, token):
def get_comment_list(parser, token):
def render_comment_list(parser, token):
def get_comment_form(parser, token):
def render_comment_form(parser, token):
def comment_form_target():
def get_comment_permalink(comment, anchor_pattern=None):
def get_comment_app():
def get_comment_app_name():
def get_model():
def get_form():
def get_form_target():
def get_flag_url(comment):
def get_delete_url(comment):
def get_approve_url(comment):
def next_redirect(data, default, default_view, **get_kwargs):
def confirmation_view(template, doc='Display DCSP a DCSP confirmation DCSP view.'):
@csrf_protect DCNL @require_POST DCNL def post_comment(request, next=None, using=None):
@csrf_protect DCNL @login_required DCNL def flag(request, comment_id, next=None):
@csrf_protect DCNL @permission_required('comments.can_moderate') DCNL def delete(request, comment_id, next=None):
@csrf_protect DCNL @permission_required('comments.can_moderate') DCNL def approve(request, comment_id, next=None):
def perform_flag(request, comment):
def ordinal(value):
def intcomma(value):
def intword(value):
def apnumber(value):
def naturalday(value, arg=None):
def layer_option(option, opt, value, parser):
def list_option(option, opt, value, parser):
def get_srid_info(srid, connection):
def gqn(val):
def get_dist_ops(operator):
def no_backend(test_func, backend):
def geo_apps(namespace=True, runtests=False):
def geodjango_suite(apps=True):
def suite():
def run(verbosity=1):
def fromfile(file_h):
def fromstr(string, **kwargs):
def check_cs_ptr(result, func, cargs):
def check_cs_op(result, func, cargs):
def check_cs_get(result, func, cargs):
def cs_int(func):
def cs_operation(func, ordinate=False, get=False):
def cs_output(func, argtypes):
def binary_predicate(func, *args):
def unary_predicate(func):
def bin_constructor(func):
def bin_output(func):
def geom_output(func, argtypes):
def geom_index(func):
def int_from_geom(func, zero=False):
def string_from_geom(func):
def last_arg_byref(args):
def check_dbl(result, func, cargs):
def check_geom(result, func, cargs):
def check_minus_one(result, func, cargs):
def check_predicate(result, func, cargs):
def check_sized_string(result, func, cargs):
def check_string(result, func, cargs):
def check_zero(result, func, cargs):
def dbl_from_geom(func, num_geom=1):
def topology(func, *args):
def get_pointer_arr(n):
def geos_version_info():
def index(request, sitemaps):
def sitemap(request, sitemaps, section=None):
def kml(request, label, model, field_name=None, compress=False, using=DEFAULT_DB_ALIAS):
def kmz(request, label, model, field_name=None, using=DEFAULT_DB_ALIAS):
def tuplize(seq):
def strconvert(d):
def std_call(func):
def gdal_version():
def gdal_full_version():
def gdal_release_date(date=False):
def suite():
def run(verbosity=1):
def check_err(code):
def env_func(f, argtypes):
def pnt_func(f):
def arg_byref(args, offset=(-1)):
def ptr_byref(args, offset=(-1)):
def check_bool(result, func, cargs):
def check_const_string(result, func, cargs, offset=None):
def check_string(result, func, cargs, offset=(-1), str_result=False):
def check_envelope(result, func, cargs, offset=(-1)):
def check_geom(result, func, cargs):
def check_geom_offset(result, func, cargs, offset=(-1)):
def check_arg_errcode(result, func, cargs):
def check_errcode(result, func, cargs):
def check_pointer(result, func, cargs):
def check_str_arg(result, func, cargs):
def double_output(func, argtypes, errcheck=False, strarg=False):
def geom_output(func, argtypes, offset=None):
def int_output(func, argtypes):
def srs_output(func, argtypes):
def string_output(func, argtypes, offset=(-1), str_result=False):
def void_output(func, argtypes, errcheck=True):
def voidptr_output(func, argtypes):
def srs_double(f):
def units_func(f):
def ogrinfo(data_source, num_features=10):
def mapping(data_source, geom_name='geom', layer_key=0, multi_geom=False):
def ogrinspect(*args, **kwargs):
def _ogrinspect(data_source, model_name, geom_name='geom', layer_key=0, srid=None, multi_geom=False, name_field=None, imports=True, decimal=False, blank=False, null=False):
def precision_wkt(geom, prec):
def add_srs_entry(srs, auth_name='EPSG', auth_srid=None, ref_sys_name=None, database=DEFAULT_DB_ALIAS):
def compress_kml(kml):
def render_to_kml(*args, **kwargs):
def render_to_kmz(*args, **kwargs):
def render_to_text(*args, **kwargs):
def admin_media_prefix():
def paginator_number(cl, i):
def pagination(cl):
def result_headers(cl):
def items_for_result(cl, result, form):
def result_list(cl):
def date_hierarchy(cl):
def search_form(cl):
def admin_actions(context):
def prepopulated_fields_js(context):
def submit_row(context):
def autodiscover():
def quote(s):
def unquote(s):
def flatten_fieldsets(fieldsets):
def get_deleted_objects(objs, opts, user, admin_site, levels_to_root=4):
def model_format_dict(obj):
def model_ngettext(obj, n=None):
def staff_member_required(view_func):
def validate(cls, model):
def normalize_fieldsets(fieldsets):
def normalize_dictionary(data_dict):
def url_params_from_lookup_dict(lookups):
def delete_selected(modeladmin, request, queryset):
def ssn_check_digit(value):
def vat_number_check_digit(vat_number):
def id_number_checksum(gd):
def validate_id_birthday(gd, fix_coordination_number_day=True):
def get_validation_digit(number):
def ping_google(sitemap_url=None, ping_url=PING_URL):
def markdown(value, arg=''):
def lorem(parser, token):
def sentence():
def paragraph():
def paragraphs(count, common=True):
def words(count, common=True):
def trim_docstring(docstring):
def parse_docstring(docstring):
def parse_rst(text, default_reference_context, thing_being_parsed=None):
def missing_docutils_page(request):
def get_return_data_type(func_name):
def get_readable_field_data_type(field):
def extract_views_from_urlpatterns(urlpatterns, base=''):
def simplify_regex(pattern):
def get_current_site(request):
def _get_all_permissions(opts):
def authenhandler(req, **kwargs):
def authenticate(**credentials):
def login(request, user):
def logout(request):
def remote_user_auth_view(request):
def get_hexdigest(algorithm, salt, raw_password):
def check_password(raw_password, enc_password):
def auth(request):
def user_passes_test(test_func, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME):
def login_required(function=None, redirect_field_name=REDIRECT_FIELD_NAME):
def permission_required(perm, login_url=None):
@csrf_protect DCNL @never_cache DCNL def login(request, template_name='registration/login.html', redirect_field_name=REDIRECT_FIELD_NAME, authentication_form=AuthenticationForm):
def logout(request, next_page=None, template_name='registration/logged_out.html', redirect_field_name=REDIRECT_FIELD_NAME):
def logout_then_login(request, login_url=None):
def redirect_to_login(next, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME):
@never_cache DCNL def password_reset_confirm(request, uidb36=None, token=None, template_name='registration/password_reset_confirm.html', token_generator=default_token_generator, set_password_form=SetPasswordForm, post_reset_redirect=None):
def security_hash(request, form, *args):
def update_contenttypes(app, created_models, verbosity=2, **kwargs):
def create_generic_related_manager(superclass):
def generic_inlineformset_factory(model, form=ModelForm, formset=BaseGenericInlineFormSet, ct_field='content_type', fk_field='object_id', fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=(lambda f: f.formfield())):
def shortcut(request, content_type_id, object_id):
def get_level_tags():
def add_level_messages(storage):
def set_cookie_data(storage, messages, invalid=False, encode_empty=False):
def stored_cookie_messages_count(storage, response):
def set_session_data(storage, messages):
def messages(request):
def get_storage(import_path):
def add_message(request, level, message, extra_tags='', fail_silently=False):
def get_messages(request):
def get_level(request):
def set_level(request, level):
def debug(request, message, extra_tags='', fail_silently=False):
def info(request, message, extra_tags='', fail_silently=False):
def success(request, message, extra_tags='', fail_silently=False):
def warning(request, message, extra_tags='', fail_silently=False):
def error(request, message, extra_tags='', fail_silently=False):
def format(number, decimal_sep, decimal_pos, grouping=0, thousand_sep=''):
def _resolve_name(name, package, level):
def import_module(name, package=None):
def get_tag_uri(url, date):
def luhn(candidate):
def timesince(d, now=None):
def timeuntil(d, now=None):
def normalize(pattern):
def next_char(input_iter):
def walk_to_end(ch, input_iter):
def get_quantifier(ch, input_iter):
def contains(source, inst):
def flatten_result(source):
def delayed_loader(real_name, *args, **kwargs):
def _string_concat(*strings):
def to_locale(language, to_lower=False):
def to_language(locale):
def translation(language):
def activate(language):
def deactivate():
def deactivate_all():
def get_language():
def get_language_bidi():
def catalog():
def do_translate(message, translation_function):
def gettext_noop(message):
def ngettext(singular, plural, number):
def ungettext(singular, plural, number):
def check_for_language(lang_code):
def get_language_from_request(request):
def blankout(src, char):
def templatize(src):
def parse_accept_lang_header(lang_string):
def get_date_formats():
def get_partial_date_formats():
def mark_safe(s):
def mark_for_escaping(s):
def strip_stopwords(sentence):
def colorize(text='', opts=(), **kwargs):
def make_style(opts=(), **kwargs):
def parse_color_setting(config_string):
def reset_format_cache():
def iter_format_modules(lang):
def get_format_modules(reverse=False):
def get_format(format_type):
def date_format(value, format=None):
def time_format(value, format=None):
def number_format(value, decimal_pos=None):
def localize(value):
def localize_input(value, default=None):
def sanitize_separators(value):
def module_has_submodule(package, module_name):
def get_svn_revision(path=None):
def wrap(text, width):
def truncate_words(s, num, end_text='...'):
def truncate_html_words(s, num, end_text='...'):
def get_valid_filename(s):
def get_text_list(list_, last_word=ugettext_lazy(u'or')):
def recapitalize(text):
def phone2numeric(phone):
def smart_split(text):
def unescape_string_literal(s):
def smart_unicode(s, encoding='utf-8', strings_only=False, errors='strict'):
def is_protected_type(obj):
def force_unicode(s, encoding='utf-8', strings_only=False, errors='strict'):
def smart_str(s, encoding='utf-8', strings_only=False, errors='strict'):
def iri_to_uri(iri):
def filepath_to_uri(path):
def safe_join(base, *paths):
def new_date(d):
def new_datetime(d):
def update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES):
def wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES):
def memoize(func, cache, num_args):
def lazy(func, *resultclasses):
def allow_lazy(func, *resultclasses):
def method_decorator(decorator):
def decorator_from_middleware_with_args(middleware_class):
def decorator_from_middleware(middleware_class):
def available_attrs(fn):
def encode_basestring(s):
def py_encode_basestring_ascii(s):
def py_scanstring(s, end, encoding=None, strict=True, _b=BACKSLASH, _m=STRINGCHUNK.match):
def product(*args, **kwds):
def is_iterable(x):
def escape(html):
def escapejs(value):
def conditional_escape(html):
def linebreaks(value, autoescape=False):
def strip_tags(value):
def strip_spaces_between_tags(value):
def strip_entities(value):
def fix_ampersands(value):
def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):
def clean_html(text):
def format(value, format_string):
def time_format(value, format_string):
def urlquote(url, safe='/'):
def urlquote_plus(url, safe=''):
def urlencode(query, doseq=0):
def cookie_date(epoch_seconds=None):
def http_date(epoch_seconds=None):
def base36_to_int(s):
def int_to_base36(i):
def parse_etags(etag_str):
def quote_etag(etag):
def patch_cache_control(response, **kwargs):
def get_max_age(response):
def patch_response_headers(response, cache_timeout=None):
def add_never_cache_headers(response):
def patch_vary_headers(response, newheaders):
def has_vary_header(response, header_query):
def _i18n_cache_key_suffix(request, cache_key):
def _generate_cache_key(request, headerlist, key_prefix):
def _generate_cache_header_key(key_prefix, request):
def get_cache_key(request, key_prefix=None):
def learn_cache_key(request, response, cache_timeout=None, key_prefix=None):
def fullsplit(path, result=None):
def get_template_dirs():
def make_template_info(filename, root_dirs):
def get_templates(dirs):
def get_python_code(paths):
def search_python_list(python_code, template_names):
def search_python(python_code, template_name):
def colorize(text='', opts=(), **kwargs):
def parse_django_adminopt_node(env, sig, signode):
def pks(objects):
def fully_decorated(request):
def get_perm(Model, perm):
def datatype(dbtype, description):
def no_template_view(request):
def staff_only_view(request):
def get_view(request):
def request_data(request, template='base.html', data='sausage'):
def view_with_argument(request, name):
def login_protected_redirect_view(request):
def set_session_view(request):
def check_session_view(request):
def request_methods_view(request):
def return_json_file(request):
def check_headers(request):
def raw_post_data(request):
def file_upload_view(request):
def file_upload_view_verify(request):
def file_upload_echo(request):
def file_upload_quota(request):
def file_upload_quota_broken(request):
def file_upload_getlist_count(request):
def index_page(request):
def custom_create(request):
def redirect(request):
def post_form_view(request):
def token_view(request):
def non_token_view_using_request_processor(request):
@register.simple_tag DCNL def no_params():
@register.simple_tag DCNL def one_param(arg):
@register.simple_tag(takes_context=False) DCNL def explicit_no_context(arg):
@register.simple_tag(takes_context=True) DCNL def no_params_with_context(context):
@register.simple_tag(takes_context=True) DCNL def params_and_context(context, arg):
@register.inclusion_tag('inclusion.html') DCNL def inclusion_no_params():
@register.inclusion_tag('inclusion.html') DCNL def inclusion_one_param(arg):
@register.inclusion_tag('inclusion.html', takes_context=False) DCNL def inclusion_explicit_no_context(arg):
@register.inclusion_tag('inclusion.html', takes_context=True) DCNL def inclusion_no_params_with_context(context):
@register.inclusion_tag('inclusion.html', takes_context=True) DCNL def inclusion_params_and_context(context, arg):
def create_egg(name, resources):
def animal_pre_save_check(signal, sender, instance, **kwargs):
def custom_key_func(key, key_prefix, version):
def suite():
def get_view(request):
def post_view(request):
def view_with_header(request):
def raw_post_view(request):
def redirect_view(request):
def view_with_secure(request):
def double_redirect_view(request):
def bad_view(request):
def form_view(request):
def form_view_with_template(request):
def login_protected_view(request):
def login_protected_view_changed_redirect(request):
def permission_protected_view(request):
def session_view(request):
def broken_view(request):
def handle_extensions(extensions=('html',)):
def _popen(cmd):
def walk(root, topdown=True, onerror=None, followlinks=False):
def is_ignored(path, ignore_patterns):
def find_files(root, ignore_patterns, verbosity, symlinks=False):
def copy_plural_forms(msgs, locale, domain, verbosity):
def make_messages(locale=None, domain='django', verbosity='1', all=False, extensions=None, symlinks=False, ignore_patterns=[], no_wrap=False, no_obsolete=False):
def module_to_dict(module, omittable=(lambda k: k.startswith('_'))):
def sort_dependencies(app_list):
def handle_default_options(options):
def copy_helper(style, app_or_project, name, directory, other_name=''):
def _make_writeable(filename):
def sql_create(app, style, connection):
def sql_delete(app, style, connection):
def sql_reset(app, style, connection):
def sql_flush(style, connection, only_django=False):
def sql_custom(app, style, connection):
def sql_indexes(app, style, connection):
def sql_all(app, style, connection):
def find_commands(management_dir):
def find_management_module(app_name):
def load_command_class(app_name, name):
def get_commands():
def call_command(name, *args, **options):
def setup_environ(settings_mod, original_settings_path=None):
def execute_from_command_line(argv=None):
def execute_manager(settings_mod, argv=None):
def get_validation_errors(outfile, app=None):
def supports_color():
def color_style():
def no_style():
def _formatparam(param, value=None, quote=1):
def guess_scheme(environ):
def is_hop_by_hop(header_name):
def get_script_name(environ):
def handler(req):
def get_connection(backend=None, fail_silently=False, **kwds):
def send_mail(subject, message, from_email, recipient_list, fail_silently=False, auth_user=None, auth_password=None, connection=None):
def send_mass_mail(datatuple, fail_silently=False, auth_user=None, auth_password=None, connection=None):
def mail_admins(subject, message, fail_silently=False, connection=None, html_message=None):
def mail_managers(subject, message, fail_silently=False, connection=None, html_message=None):
def make_msgid(idstring=None):
def forbid_multi_line_headers(name, val, encoding):
def load_handler(path, *args, **kwargs):
def get_image_dimensions(file_or_path, close=False):
def fd(f):
def file_move_safe(old_file_name, new_file_name, chunk_size=(1024 * 64), allow_overwrite=False):
def auth(request):
def csrf(request):
def debug(request):
def static(request):
def media(request):
def get_callable(lookup_view, can_fail=False):
def set_script_prefix(prefix):
def get_script_prefix():
def set_urlconf(urlconf_name):
def get_urlconf(default=None):
def populate_xheaders(request, response, model, object_id):
def register_serializer(format, serializer_module, serializers=None):
def unregister_serializer(format):
def serialize(format, queryset, **options):
def deserialize(format, stream_or_string, **options):
def _load_serializers():
def Deserializer(stream_or_string, **options):
def Deserializer(stream_or_string, **options):
def Deserializer(object_list, **options):
def _get_model(model_identifier):
def getInnerText(node):
def default_key_func(key, key_prefix, version):
def get_key_func(key_func):
def parse_backend_uri(backend_uri):
def parse_backend_conf(backend, **kwargs):
def get_cache(backend, **kwargs):
def safeRef(target, onDelete=None):
def get_bound_method_weakref(target, onDelete):
def receiver(signal, **kwargs):
def simple_class_factory(model, attrs):
def model_unpickle(model, attrs, factory):
def permalink(func):
def get_cached_row(klass, row, index_start, using, max_depth=0, cur_depth=0, requested=None, offset=0, only_load=None, local_only=False):
def insert_query(model, values, return_id=False, raw_values=False, using=None):
def select_related_descend(field, restricted, requested, reverse=False):
def deferred_class_factory(model, attrs):
def ensure_default_manager(sender, **kwargs):
def get_order_dir(field, default='ASC'):
def setup_join_cache(sender, **kwargs):
def add_to_dict(data, key, value):
def empty_iter():
def order_modified_iter(cursor, trim, sentinel):
def make_contrib(superclass, func=None):
def add_lazy_relation(cls, field, relation, operation):
def do_pending_lookups(sender, **kwargs):
def create_many_related_manager(superclass, rel=False):
def to_unicode(s):
def truncate_name(name, length=None, hash_len=4):
def format_number(value, max_digits, decimal_places):
def typecast_string(s):
def _parse_version(text):
def get_version(cursor):
def enter_transaction_management(managed=True, using=None):
def leave_transaction_management(using=None):
def is_dirty(using=None):
def set_dirty(using=None):
def set_clean(using=None):
def is_managed(using=None):
def managed(flag=True, using=None):
def commit_unless_managed(using=None):
def rollback_unless_managed(using=None):
def commit(using=None):
def rollback(using=None):
def savepoint(using=None):
def savepoint_rollback(sid, using=None):
def savepoint_commit(sid, using=None):
def _transaction_func(entering, exiting, using):
def autocommit(using=None):
def commit_on_success(using=None):
def commit_manually(using=None):
def _is_ignorable_404(uri):
def _is_internal_request(domain, referer):
def _is_valid_path(path, urlconf=None):
def _get_failure_view():
def get_token(request):
def do_get_available_languages(parser, token):
def do_get_language_info(parser, token):
def do_get_language_info_list(parser, token):
def do_get_current_language(parser, token):
def do_get_current_language_bidi(parser, token):
def do_translate(parser, token):
def do_block_translate(parser, token):
@register.tag DCNL def ssi(parser, token):
@register.tag DCNL def url(parser, token):
def localize(value):
def unlocalize(value):
@register.tag('localize') DCNL def localize_tag(parser, token):
@register.tag DCNL def get_static_prefix(parser, token):
@register.tag DCNL def get_media_prefix(parser, token):
def do_cache(parser, token):
def render_to_response(*args, **kwargs):
def render(request, *args, **kwargs):
def redirect(to, *args, **kwargs):
def _get_queryset(klass):
def get_object_or_404(klass, *args, **kwargs):
def get_list_or_404(klass, *args, **kwargs):
@requires_csrf_token DCNL def page_not_found(request, template_name='404.html'):
@requires_csrf_token DCNL def server_error(request, template_name='500.html'):
def csrf_response_exempt(view_func):
def csrf_view_exempt(view_func):
def csrf_exempt(view_func):
def require_http_methods(request_method_list):
def condition(etag_func=None, last_modified_func=None):
def vary_on_headers(*headers):
def vary_on_cookie(func):
def cache_page(*args, **kwargs):
def never_cache(view_func):
def set_language(request):
def get_formats():
def null_javascript_catalog(request, domain=None, packages=None):
def javascript_catalog(request, domain='djangojs', packages=None):
def serve(request, path, document_root=None, show_indexes=False):
def was_modified_since(header=None, mtime=0, size=0):
def csrf_failure(request, reason=''):
def apply_extra_context(extra_context, context):
def get_model_and_form_class(model, form_class):
def redirect(post_save_redirect, obj):
def lookup_object(model, object_id, slug, slug_field):
def create_object(request, model=None, template_name=None, template_loader=loader, extra_context=None, post_save_redirect=None, login_required=False, context_processors=None, form_class=None):
def update_object(request, model=None, object_id=None, slug=None, slug_field='slug', template_name=None, template_loader=loader, extra_context=None, post_save_redirect=None, login_required=False, context_processors=None, template_object_name='object', form_class=None):
def delete_object(request, model, post_delete_redirect, object_id=None, slug=None, slug_field='slug', template_name=None, template_loader=loader, extra_context=None, login_required=False, context_processors=None, template_object_name='object'):
def _date_from_string(year, year_format, month, month_format, day='', day_format='', delim='__'):
def _month_bounds(date):
def _get_next_prev_month(generic_view, naive_result, is_previous, use_first_day):
def _date_lookup_for_field(field, date):
def object_list(request, queryset, paginate_by=None, page=None, allow_empty=True, template_name=None, template_loader=loader, extra_context=None, context_processors=None, template_object_name='object', mimetype=None):
def object_detail(request, queryset, object_id=None, slug=None, slug_field='slug', template_name=None, template_name_field=None, template_loader=loader, extra_context=None, context_processors=None, template_object_name='object', mimetype=None):
def direct_to_template(request, template, extra_context=None, mimetype=None, **kwargs):
def redirect_to(request, url, permanent=True, query_string=False, **kwargs):
def archive_index(request, queryset, date_field, num_latest=15, template_name=None, template_loader=loader, extra_context=None, allow_empty=True, context_processors=None, mimetype=None, allow_future=False, template_object_name='latest'):
def archive_year(request, year, queryset, date_field, template_name=None, template_loader=loader, extra_context=None, allow_empty=False, context_processors=None, template_object_name='object', mimetype=None, make_object_list=False, allow_future=False):
def archive_month(request, year, month, queryset, date_field, month_format='%b', template_name=None, template_loader=loader, extra_context=None, allow_empty=False, context_processors=None, template_object_name='object', mimetype=None, allow_future=False):
def archive_week(request, year, week, queryset, date_field, template_name=None, template_loader=loader, extra_context=None, allow_empty=True, context_processors=None, template_object_name='object', mimetype=None, allow_future=False):
def archive_day(request, year, month, day, queryset, date_field, month_format='%b', day_format='%d', template_name=None, template_loader=loader, extra_context=None, allow_empty=False, context_processors=None, template_object_name='object', mimetype=None, allow_future=False):
def archive_today(request, **kwargs):
def object_detail(request, year, month, day, queryset, date_field, month_format='%b', day_format='%d', object_id=None, slug=None, slug_field='slug', template_name=None, template_name_field=None, template_loader=loader, extra_context=None, context_processors=None, template_object_name='object', mimetype=None, allow_future=False):
def cleanse_setting(key, value):
def get_safe_settings():
def technical_500_response(request, exc_type, exc_value, tb):
def technical_404_response(request, exception):
def empty_urlconf(request):
def flatatt(attrs):
def en_format(name):
def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False, can_delete=False, max_num=None):
def all_valid(formsets):
def construct_instance(form, instance, fields=None, exclude=None):
def save_instance(form, instance, fields=None, fail_message='saved', commit=True, exclude=None, construct=True):
def model_to_dict(instance, fields=None, exclude=None):
def fields_for_model(model, fields=None, exclude=None, widgets=None, formfield_callback=None):
def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None):
def _get_foreign_key(parent_model, model, fk_name=None, can_fail=False):
def inlineformset_factory(parent_model, model, form=ModelForm, formset=BaseInlineFormSet, fk_name=None, fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None):
def pretty_name(name):
def get_declared_fields(bases, attrs, with_base_fields=True):
def exhaust(stream_or_iterable):
def parse_boundary_stream(stream, max_header_size):
def parse_header(line):
def fix_location_header(request, response):
def conditional_content_removal(request, response):
def fix_IE_for_attach(request, response):
def fix_IE_for_vary(request, response):
def str_to_unicode(s, encoding):
def static(prefix, view='django.views.static.serve', **kwargs):
def to_list(value):
def connections_support_transactions():
def skipIfDBFeature(feature):
def skipUnlessDBFeature(feature):
def instrumented_test_render(self, context):
def setup_test_environment():
def teardown_test_environment():
def get_warnings_state():
def restore_warnings_state(state):
def store_rendered_templates(store, signal, sender, template, context, **kwargs):
def encode_multipart(boundary, data):
def is_private(prefix, base):
def _extract_future_flags(globs):
def _normalize_module(module, depth=2):
def _indent(s, indent=4):
def _exception_traceback(exc_info):
def _ellipsis_match(want, got):
def _comment_line(line):
def testmod(m=None, name=None, globs=None, verbose=None, isprivate=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False):
def testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser()):
def run_docstring_examples(f, globs, verbose=False, name='NoName', compileflags=None, optionflags=0):
def set_unittest_reportflags(flags):
def DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, test_class=DocTestCase, **options):
def DocFileSuite(*paths, **kw):
def script_from_examples(s):
def testsource(module, name):
def debug_src(src, pm=False, globs=None):
def debug_script(src, pm=False, globs=None):
def debug(module, name, pm=False):
def build_suite(app_module):
def build_test(label):
def partition_suite(suite, classes, bins):
def reorder_suite(suite, classes):
def dependency_ordered(test_databases, dependencies):
def token_kwargs(bits, parser, support_legacy=False):
def autoescape(parser, token):
def comment(parser, token):
def cycle(parser, token):
def debug(parser, token):
def do_filter(parser, token):
def firstof(parser, token):
def do_for(parser, token):
def ifequal(parser, token):
def ifnotequal(parser, token):
def do_if(parser, token):
def ifchanged(parser, token):
def ssi(parser, token):
def load(parser, token):
def now(parser, token):
def regroup(parser, token):
def spaceless(parser, token):
def templatetag(parser, token):
def url(parser, token):
def widthratio(parser, token):
def do_with(parser, token):
def compile_string(template_string, origin):
def resolve_variable(path, context):
def _render_value_in_context(value, context):
def generic_tag_compiler(params, defaults, name, node_class, parser, token):
def import_library(taglib_module):
def get_templatetags_modules():
def get_library(library_name):
def stringfilter(func):
def addslashes(value):
def capfirst(value):
def escapejs(value):
def fix_ampersands(value):
def floatformat(text, arg=(-1)):
def iriencode(value):
def linenumbers(value, autoescape=None):
def lower(value):
def make_list(value):
def slugify(value):
def stringformat(value, arg):
def title(value):
def truncatewords(value, arg):
def truncatewords_html(value, arg):
def upper(value):
def urlencode(value, safe=None):
def urlize(value, autoescape=None):
def urlizetrunc(value, limit, autoescape=None):
def wordcount(value):
def wordwrap(value, arg):
def ljust(value, arg):
def rjust(value, arg):
def center(value, arg):
def cut(value, arg):
def escape(value):
def force_escape(value):
def linebreaks(value, autoescape=None):
def linebreaksbr(value, autoescape=None):
def safe(value):
def safeseq(value):
def removetags(value, tags):
def striptags(value):
def dictsort(value, arg):
def dictsortreversed(value, arg):
def first(value):
def join(value, arg, autoescape=None):
def last(value):
def length(value):
def length_is(value, arg):
def random(value):
def slice_(value, arg):
def unordered_list(value, autoescape=None):
def add(value, arg):
def get_digit(value, arg):
def date(value, arg=None):
def time(value, arg=None):
def timesince(value, arg=None):
def timeuntil(value, arg=None):
def default(value, arg):
def default_if_none(value, arg):
def divisibleby(value, arg):
def yesno(value, arg=None):
def filesizeformat(bytes):
def pluralize(value, arg=u's'):
def phone2numeric(value):
def pprint(value):
def get_template(template_name):
def get_template_from_string(source, origin=None, name=None):
def render_to_string(template_name, dictionary=None, context_instance=None):
def select_template(template_name_list):
def do_block(parser, token):
def do_extends(parser, token):
def do_include(parser, token):
def infix(bp, func):
def prefix(bp, func):
def get_flatpages(parser, token):
def flatpage(request, url):
@csrf_protect DCNL def render_flatpage(request, f):
def is_ignored(path, ignore_patterns=[]):
def get_files(storage, ignore_patterns=[], location=''):
def check_settings():
def find(path, all=False):
def _get_finder(import_path):
def staticfiles_urlpatterns(prefix=None):
def serve(request, path, document_root=None, insecure=False, **kwargs):
def feed(request, url, feed_dict=None):
def get_comment_count(parser, token):
def get_comment_list(parser, token):
def render_comment_list(parser, token):
def get_comment_form(parser, token):
def render_comment_form(parser, token):
def comment_form_target():
def get_comment_permalink(comment, anchor_pattern=None):
def get_comment_app():
def get_comment_app_name():
def get_model():
def get_form():
def get_form_target():
def get_flag_url(comment):
def get_delete_url(comment):
def get_approve_url(comment):
def next_redirect(data, default, default_view, **get_kwargs):
def confirmation_view(template, doc='Display DCSP a DCSP confirmation DCSP view.'):
@csrf_protect DCNL @require_POST DCNL def post_comment(request, next=None, using=None):
@csrf_protect DCNL @login_required DCNL def flag(request, comment_id, next=None):
@csrf_protect DCNL @permission_required('comments.can_moderate') DCNL def delete(request, comment_id, next=None):
@csrf_protect DCNL @permission_required('comments.can_moderate') DCNL def approve(request, comment_id, next=None):
def perform_flag(request, comment):
def ordinal(value):
def intcomma(value):
def intword(value):
def apnumber(value):
def naturalday(value, arg=None):
def layer_option(option, opt, value, parser):
def list_option(option, opt, value, parser):
def get_srid_info(srid, connection):
def gqn(val):
def get_dist_ops(operator):
def no_backend(test_func, backend):
def geo_apps(namespace=True, runtests=False):
def geodjango_suite(apps=True):
def suite():
def run(verbosity=1):
def fromfile(file_h):
def fromstr(string, **kwargs):
def check_cs_ptr(result, func, cargs):
def check_cs_op(result, func, cargs):
def check_cs_get(result, func, cargs):
def cs_int(func):
def cs_operation(func, ordinate=False, get=False):
def cs_output(func, argtypes):
def binary_predicate(func, *args):
def unary_predicate(func):
def bin_constructor(func):
def bin_output(func):
def geom_output(func, argtypes):
def geom_index(func):
def int_from_geom(func, zero=False):
def string_from_geom(func):
def last_arg_byref(args):
def check_dbl(result, func, cargs):
def check_geom(result, func, cargs):
def check_minus_one(result, func, cargs):
def check_predicate(result, func, cargs):
def check_sized_string(result, func, cargs):
def check_string(result, func, cargs):
def check_zero(result, func, cargs):
def dbl_from_geom(func, num_geom=1):
def topology(func, *args):
def get_pointer_arr(n):
def geos_version_info():
def index(request, sitemaps):
def sitemap(request, sitemaps, section=None):
def kml(request, label, model, field_name=None, compress=False, using=DEFAULT_DB_ALIAS):
def kmz(request, label, model, field_name=None, using=DEFAULT_DB_ALIAS):
def tuplize(seq):
def strconvert(d):
def std_call(func):
def gdal_version():
def gdal_full_version():
def gdal_release_date(date=False):
def suite():
def run(verbosity=1):
def check_err(code):
def env_func(f, argtypes):
def pnt_func(f):
def arg_byref(args, offset=(-1)):
def ptr_byref(args, offset=(-1)):
def check_bool(result, func, cargs):
def check_const_string(result, func, cargs, offset=None):
def check_string(result, func, cargs, offset=(-1), str_result=False):
def check_envelope(result, func, cargs, offset=(-1)):
def check_geom(result, func, cargs):
def check_geom_offset(result, func, cargs, offset=(-1)):
def check_arg_errcode(result, func, cargs):
def check_errcode(result, func, cargs):
def check_pointer(result, func, cargs):
def check_str_arg(result, func, cargs):
def double_output(func, argtypes, errcheck=False, strarg=False):
def geom_output(func, argtypes, offset=None):
def int_output(func, argtypes):
def srs_output(func, argtypes):
def string_output(func, argtypes, offset=(-1), str_result=False):
def void_output(func, argtypes, errcheck=True):
def voidptr_output(func, argtypes):
def srs_double(f):
def units_func(f):
def ogrinfo(data_source, num_features=10):
def mapping(data_source, geom_name='geom', layer_key=0, multi_geom=False):
def ogrinspect(*args, **kwargs):
def _ogrinspect(data_source, model_name, geom_name='geom', layer_key=0, srid=None, multi_geom=False, name_field=None, imports=True, decimal=False, blank=False, null=False):
def precision_wkt(geom, prec):
def add_srs_entry(srs, auth_name='EPSG', auth_srid=None, ref_sys_name=None, database=DEFAULT_DB_ALIAS):
def compress_kml(kml):
def render_to_kml(*args, **kwargs):
def render_to_kmz(*args, **kwargs):
def render_to_text(*args, **kwargs):
@register.simple_tag DCNL def admin_media_prefix():
def paginator_number(cl, i):
def pagination(cl):
def result_headers(cl):
def items_for_result(cl, result, form):
def result_list(cl):
def date_hierarchy(cl):
def search_form(cl):
def admin_actions(context):
def prepopulated_fields_js(context):
def submit_row(context):
def cell_count(inline_admin_form):
def autodiscover():
def quote(s):
def unquote(s):
def flatten_fieldsets(fieldsets):
def get_deleted_objects(objs, opts, user, admin_site, using):
def model_format_dict(obj):
def model_ngettext(obj, n=None):
def reverse_field_path(model, path):
def get_fields_from_path(model, path):
def remove_trailing_data_field(fields):
def get_limit_choices_to_from_path(model, path):
def staff_member_required(view_func):
def validate(cls, model):
def normalize_fieldsets(fieldsets):
def normalize_dictionary(data_dict):
def url_params_from_lookup_dict(lookups):
def delete_selected(modeladmin, request, queryset):
def ssn_check_digit(value):
def vat_number_check_digit(vat_number):
def id_number_checksum(gd):
def validate_id_birthday(gd, fix_coordination_number_day=True):
def get_validation_digit(number):
def ping_google(sitemap_url=None, ping_url=PING_URL):
def markdown(value, arg=''):
def lorem(parser, token):
def sentence():
def paragraph():
def paragraphs(count, common=True):
def words(count, common=True):
def trim_docstring(docstring):
def parse_docstring(docstring):
def parse_rst(text, default_reference_context, thing_being_parsed=None):
def missing_docutils_page(request):
def get_return_data_type(func_name):
def get_readable_field_data_type(field):
def extract_views_from_urlpatterns(urlpatterns, base=''):
def simplify_regex(pattern):
def get_current_site(request):
def _get_all_permissions(opts):
def authenhandler(req, **kwargs):
def authenticate(**credentials):
def login(request, user):
def logout(request):
@never_cache DCNL def remote_user_auth_view(request):
def get_hexdigest(algorithm, salt, raw_password):
def check_password(raw_password, enc_password):
def update_last_login(sender, user, **kwargs):
def auth(request):
def user_passes_test(test_func, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME):
def login_required(function=None, redirect_field_name=REDIRECT_FIELD_NAME, login_url=None):
def permission_required(perm, login_url=None):
@csrf_protect DCNL @never_cache DCNL def login(request, template_name='registration/login.html', redirect_field_name=REDIRECT_FIELD_NAME, authentication_form=AuthenticationForm, current_app=None, extra_context=None):
def logout(request, next_page=None, template_name='registration/logged_out.html', redirect_field_name=REDIRECT_FIELD_NAME, current_app=None, extra_context=None):
def logout_then_login(request, login_url=None, current_app=None, extra_context=None):
def redirect_to_login(next, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME):
@never_cache DCNL def password_reset_confirm(request, uidb36=None, token=None, template_name='registration/password_reset_confirm.html', token_generator=default_token_generator, set_password_form=SetPasswordForm, post_reset_redirect=None, current_app=None, extra_context=None):
def security_hash(request, form, *args):
def form_hmac(form):
def update_contenttypes(app, created_models, verbosity=2, **kwargs):
def create_generic_related_manager(superclass):
def generic_inlineformset_factory(model, form=ModelForm, formset=BaseGenericInlineFormSet, ct_field='content_type', fk_field='object_id', fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=(lambda f: f.formfield())):
def shortcut(request, content_type_id, object_id):
def get_level_tags():
def add_level_messages(storage):
def set_cookie_data(storage, messages, invalid=False, encode_empty=False):
def stored_cookie_messages_count(storage, response):
def set_session_data(storage, messages):
def messages(request):
def get_storage(import_path):
def add_message(request, level, message, extra_tags='', fail_silently=False):
def get_messages(request):
def get_level(request):
def set_level(request, level):
def debug(request, message, extra_tags='', fail_silently=False):
def info(request, message, extra_tags='', fail_silently=False):
def success(request, message, extra_tags='', fail_silently=False):
def warning(request, message, extra_tags='', fail_silently=False):
def error(request, message, extra_tags='', fail_silently=False):
def format(number, decimal_sep, decimal_pos, grouping=0, thousand_sep=''):
def _resolve_name(name, package, level):
def import_module(name, package=None):
def get_tag_uri(url, date):
def skip(reason):
def skipIf(condition, reason):
def skipUnless(condition, reason):
def sorted_list_difference(expected, actual):
def unorderable_list_difference(expected, actual, ignore_duplicate=False):
def _CmpToKey(mycmp):
def _relpath_nt(path, start=os.path.curdir):
def _relpath_posix(path, start=os.path.curdir):
def _isnotsuite(test):
def luhn(candidate):
def timesince(d, now=None):
def timeuntil(d, now=None):
def normalize(pattern):
def next_char(input_iter):
def walk_to_end(ch, input_iter):
def get_quantifier(ch, input_iter):
def contains(source, inst):
def flatten_result(source):
def _string_concat(*strings):
def to_locale(language, to_lower=False):
def to_language(locale):
def translation(language):
def activate(language):
def deactivate():
def deactivate_all():
def get_language():
def get_language_bidi():
def catalog():
def do_translate(message, translation_function):
def gettext_noop(message):
def ngettext(singular, plural, number):
def ungettext(singular, plural, number):
def all_locale_paths():
def check_for_language(lang_code):
def get_language_from_request(request):
def blankout(src, char):
def templatize(src, origin=None):
def parse_accept_lang_header(lang_string):
def get_date_formats():
def get_partial_date_formats():
def mark_safe(s):
def mark_for_escaping(s):
def dictConfig(config):
def strip_stopwords(sentence):
def colorize(text='', opts=(), **kwargs):
def make_style(opts=(), **kwargs):
def parse_color_setting(config_string):
def reset_format_cache():
def iter_format_modules(lang):
def get_format_modules(reverse=False):
def get_format(format_type, lang=None, use_l10n=None):
def date_format(value, format=None, use_l10n=None):
def time_format(value, format=None, use_l10n=None):
def number_format(value, decimal_pos=None, use_l10n=None):
def localize(value, use_l10n=None):
def localize_input(value, default=None):
def sanitize_separators(value):
def module_has_submodule(package, module_name):
def get_svn_revision(path=None):
def wrap(text, width):
def truncate_words(s, num, end_text='...'):
def truncate_html_words(s, num, end_text='...'):
def get_valid_filename(s):
def get_text_list(list_, last_word=ugettext_lazy(u'or')):
def recapitalize(text):
def phone2numeric(phone):
def smart_split(text):
def unescape_string_literal(s):
def smart_unicode(s, encoding='utf-8', strings_only=False, errors='strict'):
def is_protected_type(obj):
def force_unicode(s, encoding='utf-8', strings_only=False, errors='strict'):
def smart_str(s, encoding='utf-8', strings_only=False, errors='strict'):
def iri_to_uri(iri):
def filepath_to_uri(path):
def safe_join(base, *paths):
def rmtree_errorhandler(func, path, exc_info):
def new_date(d):
def new_datetime(d):
def salted_hmac(key_salt, value, secret=None):
def constant_time_compare(val1, val2):
def update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES):
def wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES):
def memoize(func, cache, num_args):
def lazy(func, *resultclasses):
def allow_lazy(func, *resultclasses):
def method_decorator(decorator):
def decorator_from_middleware_with_args(middleware_class):
def decorator_from_middleware(middleware_class):
def available_attrs(fn):
def encode_basestring(s):
def py_encode_basestring_ascii(s):
def py_scanstring(s, end, encoding=None, strict=True, _b=BACKSLASH, _m=STRINGCHUNK.match):
def product(*args, **kwds):
def is_iterable(x):
def escape(html):
def escapejs(value):
def conditional_escape(html):
def linebreaks(value, autoescape=False):
def strip_tags(value):
def strip_spaces_between_tags(value):
def strip_entities(value):
def fix_ampersands(value):
def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):
def clean_html(text):
def format(value, format_string):
def time_format(value, format_string):
def urlquote(url, safe='/'):
def urlquote_plus(url, safe=''):
def urlencode(query, doseq=0):
def cookie_date(epoch_seconds=None):
def http_date(epoch_seconds=None):
def parse_http_date(date):
def parse_http_date_safe(date):
def base36_to_int(s):
def int_to_base36(i):
def parse_etags(etag_str):
def quote_etag(etag):
def patch_cache_control(response, **kwargs):
def get_max_age(response):
def patch_response_headers(response, cache_timeout=None):
def add_never_cache_headers(response):
def patch_vary_headers(response, newheaders):
def has_vary_header(response, header_query):
def _i18n_cache_key_suffix(request, cache_key):
def _generate_cache_key(request, method, headerlist, key_prefix):
def _generate_cache_header_key(key_prefix, request):
def get_cache_key(request, key_prefix=None, method='GET', cache=None):
def learn_cache_key(request, response, cache_timeout=None, key_prefix=None, cache=None):
def fullsplit(path, result=None):
def get_template_dirs():
def make_template_info(filename, root_dirs):
def get_templates(dirs):
def get_python_code(paths):
def search_python_list(python_code, template_names):
def search_python(python_code, template_name):
def colorize(text='', opts=(), **kwargs):
def parse_django_adminopt_node(env, sig, signode):
@FileSystem.in_directory(current_directory, 'django', 'bamboo') DCNL def test_mail_count():
@FileSystem.in_directory(current_directory, 'django', 'bamboo') DCNL def test_mail_content():
@FileSystem.in_directory(current_directory, 'django', 'bamboo') DCNL def test_mail_fail():
@FileSystem.in_directory(current_directory, 'django', 'couves') DCNL def test_django_agains_couves():
@FileSystem.in_directory(current_directory, 'django', 'couves') DCNL def test_django_agains_couves_nohooks():
@FileSystem.in_directory(current_directory, 'django', 'rucola') DCNL def test_harvest_uses_test_runner():
def run_scenario(application='', feature='', scenario='', **opts):
def test_language_french():
def test_scenario_fr_from_string():
def test_scenario_outline1_fr_from_string():
def test_scenario_outline2_fr_from_string():
def test_scenario_outline3_fr_from_string():
def test_feature_fr_from_string():
def test_feature_fr_from_string2():
def test_scenario_has_name():
def test_scenario_has_repr():
def test_scenario_has_steps():
def test_scenario_may_own_outlines():
def test_steps_parsed_by_scenarios_has_scenarios():
def test_scenario_sentences_can_be_solved():
def test_scenario_tables_are_solved_against_outlines():
def test_scenario_tables_are_solved_against_outlines():
def test_solved_steps_also_have_scenario_as_attribute():
def test_scenario_outlines_within_feature():
def test_full_featured_feature():
def test_scenario_with_table_and_no_step_fails():
def test_scenario_ignore_commented_lines_from_examples():
def test_scenario_aggregate_all_examples_blocks():
def test_commented_scenarios():
def test_scenario_matches_tags():
def test_scenario_matches_tags_fuzzywuzzy():
def test_scenario_matches_tags_excluding():
def test_scenario_matches_tags_excluding_when_scenario_has_no_tags():
def test_scenario_matches_tags_excluding_fuzzywuzzy():
def test_scenario_show_tags_in_its_representation():
def test_scenario_with_inline_comments():
def test_scenario_with_hash_within_double_quotes():
def test_scenario_with_hash_within_single_quotes():
def test_language_is_english_by_default():
def test_language_has_first_of():
def test_step_has_repr():
def test_can_get_sentence_from_string():
def test_can_parse_keys_from_table():
def test_can_parse_tables():
def test_can_parse_a_unary_array_from_single_step():
def test_can_parse_a_unary_array_from_complicated_step():
def test_can_parse_regular_step_followed_by_tabular_step():
def test_can_parse_tabular_step_followed_by_regular_step():
def test_can_parse_two_ordinary_steps():
def test_can_parse_background_and_ignore_tag():
def test_cannot_start_with_multiline():
def test_multiline_is_part_of_previous_step():
def test_handy_attribute_for_first_occurrence_of_hashes():
def test_hashes__first_attr_raises_assertion_error_if_empty():
def test_handy_attribute_for_last_occurrence_of_hashes():
def test_hashes__last_attr_raises_assertion_error_if_empty():
def test_handy_function_for_table_members():
def test_handy_function_for_table_members_fail_giving_assertionerror():
def test_server_threading():
def step_runner_environ():
@with_setup(step_runner_environ) DCNL def test_can_count_steps_and_its_states():
@with_setup(step_runner_environ) DCNL def test_can_point_undefined_steps():
@with_setup(step_runner_environ) DCNL def test_can_figure_out_why_has_failed():
@with_setup(step_runner_environ) DCNL def test_skipped_steps_can_be_retrieved_as_steps():
@with_setup(step_runner_environ) DCNL def test_ignore_case_on_step_definitions():
@with_setup(step_runner_environ) DCNL def test_doesnt_ignore_case():
@with_setup(step_runner_environ) DCNL def test_steps_are_aware_of_its_definitions():
@with_setup(step_runner_environ) DCNL def test_steps_that_match_groups_takes_them_as_parameters():
@with_setup(step_runner_environ) DCNL def test_steps_that_match_named_groups_takes_them_as_parameters():
@with_setup(step_runner_environ) DCNL def test_steps_that_match_groups_and_named_groups_takes_just_named_as_params():
@with_setup(step_runner_environ) DCNL def test_step_definitions_takes_the_step_object_as_first_argument():
@with_setup(step_runner_environ) DCNL def test_feature_can_run_only_specified_scenarios():
@with_setup(step_runner_environ) DCNL def test_feature_can_run_only_specified_scenarios_in_tags():
@with_setup(step_runner_environ) DCNL def test_scenarios_inherit_feature_tags():
@with_setup(step_runner_environ) DCNL def test_count_raised_exceptions_as_failing_steps():
def test_multiple_subordinate_steps_are_run():
@with_setup(step_runner_environ) DCNL def test_successful_behave_as_step_passes():
@with_setup(step_runner_environ) DCNL def test_successful_behave_as_step_doesnt_fail():
@with_setup(step_runner_environ) DCNL def test_failing_behave_as_step_doesnt_pass():
@with_setup(step_runner_environ) DCNL def test_failing_behave_as_step_fails():
@with_setup(step_runner_environ) DCNL def test_undefined_behave_as_step_doesnt_pass():
@with_setup(step_runner_environ) DCNL def test_undefined_behave_as_step_fails():
@with_setup(step_runner_environ) DCNL def test_failing_behave_as_step_raises_assertion():
@with_setup(step_runner_environ) DCNL def test_behave_as_step_can_access_the_scenario():
def test_step_definition():
def test_step_description():
def test_scenario_description():
def test_feature_description():
def test_step_represent_string_when_not_defined():
def test_step_represent_string_when_defined():
def test_step_represent_table():
def test_step_represent_matrix():
def test_scenario_outline_represent_examples():
def test_has_version():
def test_has_release():
def test_import():
def test_terrain_import_exception():
def test_feature_has_repr():
def test_scenario_has_name():
def test_feature_has_scenarios():
def test_can_parse_feature_description():
def test_scenarios_parsed_by_feature_has_feature():
def test_feature_max_length_on_scenario():
def test_feature_max_length_on_feature_description():
def test_feature_max_length_on_feature_name():
def test_feature_max_length_on_step_sentence():
def test_feature_max_length_on_step_with_table():
def test_feature_max_length_on_step_with_table_keys():
def test_feature_max_length_on_scenario_outline():
def test_feature_max_length_on_scenario_outline_keys():
def test_description_on_long_named_feature():
def test_description_on_big_sentenced_steps():
def test_comments():
def test_single_scenario_single_scenario():
def test_single_feature_single_tag():
def test_single_scenario_many_scenarios():
def test_scenarios_with_extra_whitespace():
def test_scenarios_parsing():
def test_scenarios_with_special_characters():
def test_syntax_error_for_scenarios_with_no_name():
def test_scenario_post_email():
def test_feature_first_scenario_tag_extraction():
def test_feature_first_scenario_tags_extraction():
def test_world():
def test_outline_hooks_if_test_failed():
def test_outline_hooks():
def test_after_each_step_is_executed_before_each_step():
def test_after_each_scenario_is_executed_before_each_scenario():
def test_after_each_feature_is_executed_before_each_feature():
def test_after_each_all_is_executed_before_each_all():
def test_world_should_be_able_to_absorb_functions():
def test_world_should_be_able_to_absorb_lambdas():
def test_world_should_be_able_to_absorb_classs():
def test_hooks_should_be_still_manually_callable():
def test_function_matches_compares_with_abs_path():
def test_StepDict_raise_StepLoadingError_if_load_first_argument_is_not_a_regex():
def test_StepDict_can_load_a_step_composed_of_a_regex_and_a_function():
def test_StepDict_load_a_step_return_the_given_function():
def test_StepDict_can_extract_a_step_sentence_from_function_name():
def test_StepDict_can_extract_a_step_sentence_from_function_doc():
def test_StepDict_can_load_a_step_from_a_function():
def test_StepDict_can_load_steps_from_an_object():
def test_StepDict_can_exclude_methods_when_load_steps():
def test_StepDict_can_exclude_callable_object_when_load_steps():
def test_language_russian():
def test_scenario_ru_from_string():
def test_scenario_outline1_ru_from_string():
def test_feature_ptbr_from_string():
def test_escape_if_necessary_escapes_1_char():
def test_escape_if_necessary_escapes_nothing_if_has_more_than_1_char():
def test_get_stripped_lines():
def test_get_stripped_lines_ignore_comments():
def test_split_wisely_splits_ignoring_case():
def test_split_wisely_splits_ignoring_case_and_stripping():
def test_wise_startswith_ignores_case():
def test_wise_startswith_also_strips_the_string():
def test_remove_it_accepts_regex_to_remove_all_from_string():
def test_column_width():
def test_column_width_w_number_and_char():
def test_rfill_simple():
def test_rfill_empty():
def test_rfill_blank():
def test_rfill_full():
def test_rfill_append():
def test_dicts_to_string():
def test_dicts_to_string_escapes_pipe():
def test_dicts_to_string_allows_empty():
def test_parse_hashes():
def test_parse_hashes_escapes_pipes():
def test_parse_hashes_allow_empty():
def test_has_a_stack_list():
def test_instance_stack_is_not_the_same_as_class_level():
def test_pushd_appends_current_dir_to_stack_if_empty():
def test_pushd():
def test_pop_with_more_than_1_item():
def test_pop_with_1_item():
def test_pop_with_no_item():
def test_filename_with_extension():
def test_filename_without_extension():
def test_dirname():
def test_exists():
def test_extract_zip_non_verbose():
def test_extract_zip_verbose():
def test_locate_non_recursive():
def test_locate_recursive():
def test_mkdir_success():
def test_mkdir_ignore_dirs_already_exists():
def test_mkdir_raises_on_oserror_errno_not_17():
def tes_mkdir_raises_when_path_is_not_a_dir():
def test_language_portuguese():
def test_scenario_ptbr_from_string():
def test_scenario_outline1_ptbr_from_string():
def test_scenario_outline2_ptbr_from_string():
def test_feature_ptbr_from_string():
def get_server(*args, **kwargs):
def test_email():
def _filter_bultins(module):
def _filter_configured_apps(module):
def _filter_configured_avoids(module):
def get_apps():
def harvest_lettuces(only_the_apps=None, avoid_apps=None, path='features'):
@step((CHECK_PREFIX + 'I DCSP have DCSP sent DCSP (\\d+) DCSP emails?')) DCNL def mail_sent_count(step, count):
@step('I DCSP have DCSP not DCSP sent DCSP any DCSP emails') DCNL def mail_not_sent(step):
@step((CHECK_PREFIX + 'I DCSP have DCSP sent DCSP an DCSP email DCSP with DCSP "([^"]*)" DCSP in DCSP the DCSP ({0})'.format('|'.join(EMAIL_PARTS)))) DCNL def mail_sent_content(step, text, part):
@step((CHECK_PREFIX + 'I DCSP have DCSP sent DCSP an DCSP email DCSP with DCSP the DCSP following DCSP in DCSP the DCSP body:')) DCNL def mail_sent_content_multiline(step):
@step((STEP_PREFIX + 'I DCSP clear DCSP my DCSP email DCSP outbox')) DCNL def mail_clear(step):
def broken_send(*args, **kwargs):
@step((STEP_PREFIX + 'sending DCSP email DCSP does DCSP not DCSP work')) DCNL def email_broken(step):
def _models_generator():
def creates_models(model):
def writes_models(model):
def checks_existence(model):
def hash_data(hash_):
def hashes_data(step):
def get_model(model):
def reset_sequence(model):
def create_models(model, data):
def write_models(model, data, field=None):
def _dump_model(model, attrs=None):
def models_exist(model, data, queryset=None):
@step(((STEP_PREFIX + '([A-Z][a-z0-9_ DCSP ]*) DCSP with DCSP ([a-z]+) DCSP "([^"]*)"') + ' DCSP has(?: DCSP an?)? DCSP ([A-Z][a-z0-9_ DCSP ]*) DCSP in DCSP the DCSP database:')) DCNL def create_models_for_relation(step, rel_model_name, rel_key, rel_value, model):
@step(((STEP_PREFIX + '([A-Z][a-z0-9_ DCSP ]*) DCSP with DCSP ([a-z]+) DCSP "([^"]*)"') + ' DCSP is DCSP linked DCSP to DCSP ([A-Z][a-z0-9_ DCSP ]*) DCSP in DCSP the DCSP database:')) DCNL def create_m2m_links(step, rel_model_name, rel_key, rel_value, relation_name):
@step(((STEP_PREFIX + '(?:an? DCSP )?([A-Z][a-z0-9_ DCSP ]*) DCSP should DCSP be DCSP present DCSP ') + 'in DCSP the DCSP database')) DCNL def models_exist_generic(step, model):
@step('There DCSP should DCSP be DCSP (\\d+) DCSP ([a-z][a-z0-9_ DCSP ]*) DCSP in DCSP the DCSP database') DCNL def model_count(step, count, model):
def clean_db(scenario):
def open_file(filename):
def close_file(file_):
def now():
def total_result_to_dict(total):
def extract_feature_data(feature_result):
def extract_background_data(background):
def extract_scenario_data(scenario_result):
def extract_step_data(step):
def extract_meta(total):
def _get_duration(element):
def step(step_func_or_sentence):
def steps(steps_class):
def get_stripped_lines(string, ignore_lines_starting_with=''):
def dicts_to_string(dicts, order):
def json_to_string(json_list, order):
def parse_as_json(lines):
def load_modules(session):
def IPAddress(address, version=None):
def IPNetwork(address, version=None):
def _find_address_range(addresses):
def _get_prefix_length(number1, number2, bits):
def _count_righthand_zero_bits(number, bits):
def summarize_address_range(first, last):
def _collapse_address_list_recursive(addresses):
def collapse_address_list(addresses):
def chunks(l, n):
def shorten(body, keep_header=0, keep_trailer=0):
def load_model(path_to_models, path_to_tables):
def load_tables(path_to_tables):
def encode(model, X, use_norm=True, verbose=True, batch_size=128, use_eos=False):
def preprocess(text):
def _p(pp, name):
def init_tparams(params):
def load_params(path, params):
def init_params(options):
def init_params_bi(options):
def build_encoder(tparams, options):
def build_encoder_bi(tparams, options):
def param_init_gru(options, params, prefix='gru', nin=None, dim=None):
def gru_layer(tparams, state_below, options, prefix='gru', mask=None, **kwargs):
def gen_sample(tparams, f_init, f_next, ctx, options, trng=None, k=1, maxlen=30, stochastic=True, argmax=False, use_unk=False):
def load_model(path_to_model):
def encode_sentences(model, X, verbose=False, batch_size=128):
def encode_images(model, IM):
def _p(pp, name):
def init_tparams(params):
def load_params(path, params):
def init_params(options):
def build_sentence_encoder(tparams, options):
def build_image_encoder(tparams, options):
def linear(x):
def tanh(x):
def l2norm(X):
def ortho_weight(ndim):
def norm_weight(nin, nout=None, scale=0.1, ortho=True):
def xavier_weight(nin, nout=None):
def param_init_fflayer(options, params, prefix='ff', nin=None, nout=None, ortho=True):
def fflayer(tparams, state_below, options, prefix='rconv', activ='lambda DCSP x: DCSP tensor.tanh(x)', **kwargs):
def param_init_gru(options, params, prefix='gru', nin=None, dim=None):
def gru_layer(tparams, state_below, init_state, options, prefix='gru', mask=None, one_step=False, **kwargs):
def story(z, image_loc, k=100, bw=50, lyric=False):
def load_all():
def load_image(file_name):
def compute_features(net, im):
def build_convnet(path_to_vgg):
def load_model(path_to_model, path_to_dictionary):
def run_sampler(dec, c, beam_width=1, stochastic=False, use_unk=False):
def _p(pp, name):
def init_tparams(params):
def load_params(path, params):
def init_params(options):
def build_sampler(tparams, options, trng):
def linear(x):
def tanh(x):
def ortho_weight(ndim):
def norm_weight(nin, nout=None, scale=0.1, ortho=True):
def param_init_fflayer(options, params, prefix='ff', nin=None, nout=None, ortho=True):
def fflayer(tparams, state_below, options, prefix='rconv', activ='lambda DCSP x: DCSP tensor.tanh(x)', **kwargs):
def param_init_gru(options, params, prefix='gru', nin=None, dim=None):
def gru_layer(tparams, state_below, init_state, options, prefix='gru', mask=None, one_step=False, **kwargs):
def get_layer(name):
def param_init_fflayer(options, params, prefix='ff', nin=None, nout=None, ortho=True):
def fflayer(tparams, state_below, options, prefix='rconv', activ='lambda DCSP x: DCSP tensor.tanh(x)', **kwargs):
def param_init_gru(options, params, prefix='gru', nin=None, dim=None):
def gru_layer(tparams, state_below, init_state, options, prefix='gru', mask=None, **kwargs):
def build_dictionary(text):
def load_dictionary(loc='/ais/gobi3/u/rkiros/bookgen/book_dictionary_large.pkl'):
def save_dictionary(worddict, wordcount, loc):
def zipp(params, tparams):
def unzip(zipped):
def itemlist(tparams):
def _p(pp, name):
def init_tparams(params):
def load_params(path, params):
def ortho_weight(ndim):
def norm_weight(nin, nout=None, scale=0.1, ortho=True):
def tanh(x):
def linear(x):
def concatenate(tensor_list, axis=0):
def prepare_data(seqs_x, seqs_y, seqs_z, worddict, maxlen=None, n_words=20000):
def grouper(text):
def init_params(options):
def build_model(tparams, options):
def build_encoder(tparams, options):
def build_encoder_w2v(tparams, options):
def load_model(embed_map=None):
def encode(model, X, use_norm=True, verbose=True, batch_size=128, use_eos=False):
def preprocess(text):
def load_googlenews_vectors():
def lookup_table(options, embed_map, worddict, word_idict, f_emb, use_norm=False):
def get_embeddings(options, word_idict, f_emb, use_norm=False):
def train_regressor(options, embed_map, wordvecs, worddict):
def apply_regressor(clf, embed_map, use_norm=False):
def load_model():
def load_tables():
def encode(model, X, use_norm=True, verbose=True, batch_size=128, use_eos=False):
def preprocess(text):
def nn(model, text, vectors, query, k=5):
def word_features(table):
def nn_words(table, wordvecs, query, k=10):
def _p(pp, name):
def init_tparams(params):
def load_params(path, params):
def init_params(options):
def init_params_bi(options):
def build_encoder(tparams, options):
def build_encoder_bi(tparams, options):
def param_init_gru(options, params, prefix='gru', nin=None, dim=None):
def gru_layer(tparams, state_below, options, prefix='gru', mask=None, **kwargs):
def process_text(text, dic, r, grams):
def init_params(options):
def get_layer(name):
def norm_weight(nin, nout=None):
def build_model(tparams, options):
def build_encoder(tparams, options):
def i2t(images, captions, npts=None):
def t2i(images, captions, npts=None):
def evaluate(encoder, k=10, seed=1234, evalcv=True, evaltest=False, loc='./data/'):
def load_data(loc='./data/'):
def prepare_data(text):
def prepare_labels(labels):
def eval_kfold(features, labels, k=10, scan=[(2 ** t) for t in range(0, 9, 1)], seed=1234):
def load_data(encoder, name, loc='./data/', seed=1234):
def load_rt(loc='./data/'):
def load_subj(loc='./data/'):
def load_cr(loc='./data/'):
def load_mpqa(loc='./data/'):
def compute_labels(pos, neg):
def shuffle_data(X, L, seed=1234):
def get_layer(name):
def param_init_fflayer(options, params, prefix='ff', nin=None, nout=None, ortho=True):
def fflayer(tparams, state_below, options, prefix='rconv', activ='lambda DCSP x: DCSP tensor.tanh(x)', **kwargs):
def param_init_gru(options, params, prefix='gru', nin=None, dim=None):
def gru_layer(tparams, state_below, init_state, options, prefix='gru', mask=None, one_step=False, **kwargs):
def gen_sample(tparams, f_init, f_next, ctx, options, trng=None, k=1, maxlen=30, stochastic=True, argmax=False, use_unk=False):
def build_dictionary(text):
def load_dictionary(loc='/ais/gobi3/u/rkiros/bookgen/book_dictionary_large.pkl'):
def save_dictionary(worddict, wordcount, loc):
def zipp(params, tparams):
def unzip(zipped):
def itemlist(tparams):
def _p(pp, name):
def init_tparams(params):
def load_params(path, params):
def ortho_weight(ndim):
def norm_weight(nin, nout=None, scale=0.1, ortho=True):
def tanh(x):
def relu(x):
def linear(x):
def concatenate(tensor_list, axis=0):
def prepare_data(caps, features, worddict, model, maxlen=None, n_words=10000):
def init_params(options, preemb=None):
def build_model(tparams, options):
def build_sampler(tparams, options, trng):
def load_model():
def run_sampler(dec, c, beam_width=1, stochastic=False, use_unk=False):
def evaluate(encoder, k=10, seed=1234, evalcv=True, evaltest=False, use_feats=True, loc='./data/'):
def load_data(loc='./data/'):
def feats(A, B):
def eval_kfold(A, B, train, labels, shuffle=True, k=10, seed=1234, use_feats=False):
def evaluate(encoder, seed=1234, evaltest=False, loc='./data/'):
def prepare_model(ninputs=9600, nclass=5):
def train_model(lrmodel, X, Y, devX, devY, devscores):
def encode_labels(labels, nclass=5):
def load_data(loc='./data/'):
def eval_nested_kfold(encoder, name, loc='./data/', k=10, seed=1234, use_nb=False):
def compute_nb(X, y, Z):
def publish(test='yes'):
def find_package_data(where='.', package='', exclude=standard_exclude, exclude_directories=standard_exclude_directories, only_in_packages=True, show_ignored=False):
def import_statsd():
def start_statsd(path):
def base64_url_decode_php_style(inp):
def encode_params(params_dict):
def smart_str(s, encoding='utf-8', strings_only=False, errors='strict'):
def send_warning(message, request=None, e=None, **extra_data):
def merge_urls(generated_url, human_url):
def camel_to_underscore(name):
def validate_is_instance(instance, classes):
def is_json(content):
def map_unreachable_exception(e):
def convert_unreachable_exception(e, error_format=u'Facebook DCSP is DCSP unreachable DCSP %s'):
def setup_users():
@receiver(post_save) DCNL def create_profile(sender, instance, created, **kwargs):
@task.task(ignore_result=True) DCNL def extend_access_token(profile, access_token):
@task.task(ignore_result=True) DCNL def store_likes(user, likes):
@task.task(ignore_result=True) DCNL def store_friends(user, friends):
@task.task(ignore_result=True) DCNL def get_and_store_likes(user, facebook):
@task.task(ignore_result=True) DCNL def get_and_store_friends(user, facebook):
@task.task(ignore_result=True) DCNL def remove_share(share):
@task.task(ignore_result=True) DCNL def retry_open_graph_share(share, reset_retries=False):
@task.task(ignore_result=True) DCNL def retry_open_graph_shares_for_user(user):
def get_profile_model():
def get_user_model():
def update_user_attributes(user, profile, attributes_dict, save=False):
def parse_signed_request(signed_request_string):
def get_url_field():
def clear_persistent_graph_cache(request):
def queryset_iterator(queryset, chunksize=1000, getfunc=getattr):
def get_oauth_url(scope, redirect_uri, extra_params=None):
def response_redirect(redirect_url, script_redirect=False):
def error_next_redirect(request, default='/', additional_params=None, next_key=None, redirect_url=None, canvas=False):
@transaction.atomic DCNL def mass_get_or_create(model_class, base_queryset, id_field, default_dict, global_defaults):
def get_form_class(backend, request):
def get_registration_backend():
def get_django_registration_version():
def parse_scope(scope):
def simplify_class_decorator(class_decorator):
def to_int(input, default=0, exception=(ValueError, TypeError), regexp=None):
def to_bool(input, default=False):
def cleanup_oauth_url(redirect_uri):
def replication_safe(f):
def get_class_from_string(path, default=None):
def get_class_for(purpose):
def get_instance_for(purpose, *args, **kwargs):
def get_migration_data():
def get_profile(user):
def get_profile_from_user(user):
def json_to_python(json_string):
def register(request):
def validate_settings():
@facebook_required DCNL def decorator_example(request, graph):
@facebook_required(scope=['publish_actions', 'user_status']) DCNL def decorator_example_scope(request, graph):
@facebook_required_lazy DCNL def lazy_decorator_example(request, graph):
@facebook_required(canvas=True) DCNL def canvas(request, graph):
@facebook_required_lazy(page_tab=True) DCNL def page_tab(request, graph):
@facebook_required(scope=['user_status', 'friends_status']) DCNL def checkins(request, graph):
@facebook_required(scope='publish_actions') DCNL @csrf_protect DCNL def open_graph_beta(request):
def facebook_profile(open_graph_share):
def require_persistent_graph(request, *args, **kwargs):
def require_facebook_graph(request, *args, **kwargs):
def get_persistent_graph(request, *args, **kwargs):
def get_facebook_graph(request=None, access_token=None, redirect_uri=None, raise_=False):
def _add_current_user_id(graph, user):
@csrf_exempt DCNL @facebook_required_lazy DCNL def connect(request, graph):
def _connect(request, graph):
def disconnect(request):
def connect_user(request, access_token=None, facebook_graph=None, connect_facebook=False):
def _connect_user(request, facebook, overwrite=True):
def _update_access_token(user, graph):
def _register_user(request, facebook, profile_callback=None, remove_old_connections=False):
def _get_old_connections(facebook_id, current_user_id=None):
def _remove_old_connections(facebook_id, current_user_id=None):
def _update_user(user, facebook, overwrite=True):
def _update_image(facebook_id, image_url):
def update_connection(request, graph):
def retry_facebook_invite(modeladmin, request, queryset):
def normcase(s):
def isabs(s):
def join(a, *p):
def splitdrive(p):
def splitunc(p):
def split(p):
def splitext(p):
def basename(p):
def dirname(p):
def commonprefix(m):
def getsize(filename):
def getmtime(filename):
def getatime(filename):
def getctime(filename):
def islink(path):
def exists(path):
def isdir(path):
def isfile(path):
def ismount(path):
def walk(top, func, arg):
def expanduser(path):
def expandvars(path):
def normpath(path):
def _slotnames(cls):
def add_extension(module, name, code):
def remove_extension(module, name, code):
def makedirs(name, mode=511):
def removedirs(name):
def renames(old, new):
def walk(top, topdown=True, onerror=None):
def execl(file, *args):
def execle(file, *args):
def execlp(file, *args):
def execlpe(file, *args):
def execvp(file, args):
def execvpe(file, args, env):
def getenv(key, default=None):
def abs__file__():
def removeduppaths():
def addbuilddir():
def _init_pathinfo():
def addpackage(sitedir, name, known_paths):
def addsitedir(sitedir, known_paths=None):
def addsitepackages(known_paths, sys_prefix=sys.prefix, exec_prefix=sys.exec_prefix):
def check_enableusersite():
def addusersitepackages(known_paths):
def setBEGINLIBPATH():
def setquit():
def setcopyright():
def aliasmbcs():
def setencoding():
def execsitecustomize():
def force_global_eggs_after_local_site_packages():
def fixclasspath():
def execusercustomize():
def fnmatch(name, pat):
def filter(names, pat):
def fnmatchcase(name, pat):
def translate(pat):
def format(percent, value, grouping=False, monetary=False, *additional):
def format_string(f, val, grouping=False):
def currency(val, symbol=True, grouping=False, international=False):
def str(val):
def atof(string, func=float):
def atoi(str):
def normalize(localename):
def _parse_localename(localename):
def _build_localename(localetuple):
def getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):
def getlocale(category=LC_CTYPE):
def setlocale(category, locale=None):
def resetlocale(category=LC_ALL):
def _print_locale():
def match(pattern, string, flags=0):
def search(pattern, string, flags=0):
def sub(pattern, repl, string, count=0):
def subn(pattern, repl, string, count=0):
def split(pattern, string, maxsplit=0):
def findall(pattern, string, flags=0):
def compile(pattern, flags=0):
def purge():
def template(pattern, flags=0):
def escape(pattern):
def normcase(s):
def isabs(s):
def join(a, *p):
def split(p):
def splitext(p):
def splitdrive(p):
def basename(p):
def dirname(p):
def commonprefix(m):
def getsize(filename):
def getmtime(filename):
def getatime(filename):
def getctime(filename):
def islink(path):
def exists(path):
def lexists(path):
def isdir(path):
def isfile(path):
def samefile(f1, f2):
def sameopenfile(fp1, fp2):
def samestat(s1, s2):
def ismount(path):
def walk(top, func, arg):
def expanduser(path):
def expandvars(path):
def normpath(path):
def abspath(path):
def realpath(filename):
def _resolve_link(path):
def get_requirement_from_url(url):
def package_to_requirement(package_name):
def get_mirrors(hostname=None):
def string_range(last):
def transform_hits(hits):
def get_file_content(url, comes_from=None):
def is_url(name):
def url_to_path(url):
def path_to_url(path):
def path_to_url2(path):
def geturl(urllib2_resp):
def is_archive_file(name):
def simplegeneric(func):
def walk_packages(path=None, prefix='', onerror=None):
def iter_modules(path=None, prefix=''):
def get_importer(path_item):
def iter_importers(fullname=''):
def get_loader(module_or_name):
def find_loader(fullname):
def extend_path(path, name):
def get_data(package, resource):
def running_under_virtualenv():
def autocomplete():
def bootstrap():
def rmtree_errorhandler(func, path, exc_info):
def display_path(path):
def backup_dir(dir, ext='.bak'):
def find_command(cmd, paths=None, pathext=None):
def ask(message, options):
def is_installable_dir(path):
def is_svn_page(html):
def has_leading_dir(paths):
def make_path_relative(path, rel_to):
def normalize_path(path):
def splitext(path):
def renames(old, new):
def is_local(path):
def dist_is_local(dist):
def get_installed_distributions(local_only=True, skip=('setuptools', 'pip', 'python')):
def egg_link_path(dist):
def dist_location(dist):
def get_terminal_size():
def unzip_file(filename, location, flatten=True):
def untar_file(filename, location):
def parse_editable(editable_req, default_vcs=None):
def restart_in_venv(venv, base, site_packages, args):
def open_logfile(filename, mode='a'):
def open(filename, mode='rb', encoding=None, errors='strict', buffering=1):
def EncodedFile(file, data_encoding, file_encoding=None, errors='strict'):
def getencoder(encoding):
def getdecoder(encoding):
def getincrementalencoder(encoding):
def getincrementaldecoder(encoding):
def getreader(encoding):
def getwriter(encoding):
def iterencode(iterator, encoding, errors='strict', **kwargs):
def iterdecode(iterator, encoding, errors='strict', **kwargs):
def make_identity_dict(rng):
def make_encoding_map(decoding_map):
def hex_encode(input, errors='strict'):
def hex_decode(input, errors='strict'):
def normalize_encoding(encoding):
def base64_encode(input, errors='strict'):
def base64_decode(input, errors='strict'):
def uu_encode(input, errors='strict', filename='<data>', mode=438):
def uu_decode(input, errors='strict'):
def zlib_encode(input, errors='strict'):
def zlib_decode(input, errors='strict'):
def bz2_encode(input, errors='strict'):
def bz2_decode(input, errors='strict'):
def segregate(str):
def selective_len(str, max):
def selective_find(str, char, index, pos):
def insertion_unsort(str, extended):
def generate_generalized_integer(N, bias):
def generate_integers(baselen, deltas):
def decode_generalized_number(extended, extpos, bias, errors):
def insertion_sort(base, extended, errors):
def quopri_encode(input, errors='strict'):
def quopri_decode(input, errors='strict'):
def publish(test='yes'):
@shared_task DCNL def fanout_operation(feed_manager, feed_class, user_ids, operation, operation_kwargs):
def add_operation(feed, activities, trim=True, batch_interface=None):
def remove_operation(feed, activities, trim=True, batch_interface=None):
def import_global_module(module, current_locals, current_globals, exceptions=None):
def get_redis_connection(server_name='default'):
def setup_redis():
def reverse_bisect_left(a, x, lo=0, hi=None):
def register(verb):
def datetime_to_epoch(dt):
def make_list_unique(sequence, marker_function=None):
def get_metrics_instance():
def get_class_from_string(path, default=None):
def lazy(func, *resultclasses):
def allow_lazy(func, *resultclasses):
def validate_type_strict(object_, object_types):
def validate_list_of_strict(object_list, object_types):
def is_sequence_of_strings(obj):
def is_sequence_of_booleans(obj):
def is_categorical(obj):
def calc_n_bins(series):
def sorted_unique(series):
def load_world():
def desaturate(color, prop):
def color_palette(name=None, n_colors=6, desat=None):
def hls_palette(n_colors=6, h=(15 / 360.0), l=0.65, s=0.9):
def husl_palette(n_colors=6, h=(15 / 360.0), s=0.9, l=0.65):
def mpl_palette(name, n_colors=6):
def dark_palette(color, n_colors=6, reverse=False, as_cmap=False):
def blend_palette(colors, n_colors=6, as_cmap=False):
def xkcd_palette(colors):
def cubehelix_palette(n_colors=6, start=0, rot=0.4, gamma=1.0, hue=0.8, light=0.85, dark=0.15, reverse=False, as_cmap=False):
def lm(x, y, alpha=ALPHA):
def lowess(x, y, span=SPAN):
def mavg(x, y, window):
def date_format(format=u'%Y-%m-%d', tz=None):
def parse_break_str(txt):
def date_breaks(width):
def tex_escape(text):
def qplot(x, y=None, color=None, size=None, fill=None, data=None, geom=u'auto', stat=[], position=[], xlim=None, ylim=None, log=u'', main=None, xlab=None, ylab=u'', asp=None):
def extract_version():
def start_map(name, handler_spec, reader_spec, reader_parameters, shard_count, mapreduce_parameters={}, base_path='/mapreduce', queue_name='default', eta=None, countdown=None, _app=None):
def for_name(fq_name, recursive=False):
def is_generator_function(obj):
def get_short_name(fq_name):
def parse_bool(obj):
def create_application():
def find_mapreduce_yaml():
def parse_mapreduce_yaml(contents):
def get_mapreduce_yaml(parse=parse_mapreduce_yaml):
def _GetChartFactory(chart_class, display_class):
def EncodeUrl(base, params, escape_url, use_html_entities):
def ShortenParameterNames(params):
def StrJoin(delim, data):
def JoinLists(**args):
def EncodeData(chart, series, y_min, y_max, encoder):
def ScaleData(data, old_min, old_max, new_min, new_max):
def _IsColor(color):
def AutoLegend(chart):
def InlineLegend(chart):
def encode_basestring(s):
def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, **kw):
def dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, **kw):
def load(fp, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, **kw):
def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, **kw):
def get(blob_key):
def parse_blob_info(field_storage):
def fetch_data(blob, start_index, end_index):
def _get_descending_key(gettime=time.time, getrandint=random.randint):
def _normalize_entity(value):
def _normalize_key(value):
def get():
def tokensMatch(expectedTokens, receivedTokens, ignoreErrorOrder, ignoreErrors=False):
def SerializeError(Exception):
def getTreeBuilder(treeType, implementation=None, **kwargs):
def tostring(element):
def parse(doc, treebuilder='simpletree', encoding=None, namespaceHTMLElements=True):
def codecName(encoding):
def getTreeWalker(treeType, implementation=None, **kwargs):
def autolink(text, trim_url_limit=None, nofollow=False):
def escapejs(value):
def displayhtml(public_key, use_ssl=False, error=None):
def submit(recaptcha_challenge_field, recaptcha_response_field, private_key, remoteip):
def clean(text, tags=ALLOWED_TAGS, attributes=ALLOWED_ATTRIBUTES, styles=ALLOWED_STYLES, strip=False, strip_comments=True):
def linkify(text, nofollow=True, target=None, filter_url=identity, filter_text=identity, skip_pre=False, parse_email=False):
def delinkify(text, allow_domains=None, allow_relative=False):
def _render(tree):
def is_protected_type(obj):
def force_unicode(s, encoding='utf-8', strings_only=False, errors='strict'):
def build_authenticate_header(realm=''):
def escape(s):
def _utf8_str(s):
def generate_timestamp():
def generate_nonce(length=8):
def generate_verifier(length=8):
def rv_to_gsr(c, v_sun=None):
@frame_transform_graph.transform(coord.StaticMatrixTransform, coord.Galactic, Sagittarius) DCNL def galactic_to_sgr():
@frame_transform_graph.transform(coord.StaticMatrixTransform, Sagittarius, coord.Galactic) DCNL def sgr_to_galactic():
def dummy():
def _make_array(val, copy=False):
def day_frac(val1, val2, factor=1.0, divisor=1.0):
def two_sum(a, b):
def two_product(a, b):
def split(a):
def test_addition():
def test_mult_div():
def test_init_variations():
def test_precision_exceeds_64bit():
def test_through_scale_change():
def test_iso_init():
def test_jd1_is_mult_of_half_or_one():
@pytest.mark.xfail DCNL def test_precision_neg():
def test_precision_epoch():
def test_leap_seconds_rounded_correctly():
def test_doc_string_contains_models():
def test_now():
def test_bool():
def test_len_size():
def test_TimeFormat_scale():
def test_byteorder():
def test_datetime_tzinfo():
def test_subfmts_regex():
def test_set_format_basic():
def test_set_format_shares_subfmt():
def test_set_format_does_not_share_subfmt():
def test_replicate_value_error():
def test_remove_astropy_time():
def test_isiterable():
def _regexify_subfmts(subfmts):
def test_erfa_wrapper():
def test_errwarn_reporting():
def test_vector_inouts():
def test_structs():
@deprecated(u'2.0', alternative=u'astroquery.vo_conesearch.vos_catalog.get_remote_catalog_db') DCNL def get_remote_catalog_db(dbname, cache=True, verbose=True):
def _get_catalogs(service_type, catalog_db, **kwargs):
def _vo_service_request(url, pedantic, kwargs, cache=True, verbose=False):
@deprecated(u'2.0', alternative=u'astroquery.vo_conesearch.vos_catalog.vo_tab_parse') DCNL def vo_tab_parse(tab, url, kwargs):
@deprecated(u'2.0', alternative=u'astroquery.vo_conesearch.vos_catalog.call_vo_service') DCNL def call_vo_service(service_type, catalog_db=None, pedantic=None, verbose=True, cache=True, kwargs={}):
@deprecated(u'2.0', alternative=u'astroquery.vo_conesearch.vos_catalog.list_catalogs') DCNL def list_catalogs(service_type, cache=True, verbose=True, **kwargs):
def setup_module():
def test_validate_coord():
def setup_module():
def test_db_missing_catalog_key():
def test_db_illegal_catalog():
@remote_data DCNL def test_db_from_registry():
@deprecated(u'2.0', alternative=u'astroquery.vo_conesearch.conesearch.conesearch') DCNL def conesearch(center, radius, verb=1, **kwargs):
@deprecated(u'2.0', alternative=u'astroquery.vo_conesearch.conesearch.search_all') DCNL def search_all(*args, **kwargs):
@deprecated(u'2.0', alternative=u'astroquery.vo_conesearch.conesearch.list_catalogs') DCNL def list_catalogs(**kwargs):
@deprecated(u'2.0', alternative=u'astroquery.vo_conesearch.conesearch.predict_search') DCNL def predict_search(url, *args, **kwargs):
@deprecated(u'2.0', alternative=u'astroquery.vo_conesearch.conesearch.conesearch_timer') DCNL @timefunc(1) DCNL def conesearch_timer(*args, **kwargs):
def _local_conversion(func, x):
def _validate_coord(center):
def _validate_sr(radius):
def setup_module():
def setup_module():
def _exclude_noncrit(in_list):
@deprecated(u'2.0', alternative=u'astroquery.vo_conesearch.validator.validate.check_conesearch_sites') DCNL @timefunc(1) DCNL def check_conesearch_sites(destdir=os.curdir, verbose=True, parallel=True, url_list=u'default'):
def _do_validation(args):
def _categorize_result(r):
def _html_subindex(args):
def _copy_r_to_cat(r, cat):
@deprecated(u'2.0', alternative=u'astroquery.vo_conesearch.validator.tstquery.parse_cs') DCNL def parse_cs(id):
def add_stokes_axis_to_wcs(wcs, add_before_ind):
def wcs_to_celestial_frame(wcs):
def proj_plane_pixel_scales(wcs):
def proj_plane_pixel_area(wcs):
def is_proj_plane_distorted(wcs, maxerr=1e-05):
def non_celestial_pixel_scales(inwcs):
def _has_distortion(wcs):
def skycoord_to_pixel(coords, wcs, origin=0, mode=u'all'):
def pixel_to_skycoord(xp, yp, wcs, origin=0, mode=u'all', cls=None):
def get_include():
def test_fixes():
def test_outside_sky():
def test_pix2world():
def test_dict_init():
@raises(TypeError) DCNL def test_extra_kwarg():
def test_3d_shapes():
@raises(wcs.InvalidTransformError) DCNL def test_find_all_wcs_crash():
def test_all_world2pix(fname=None, ext=0, tolerance=0.0001, origin=0, random_npts=25000, adaptive=False, maxiter=20, detect_divergence=True):
def test_scamp_sip_distortion_parameters():
def test_fixes2():
def test_unit_normalization():
def test_footprint_to_file(tmpdir):
def test_validate_faulty_wcs():
def test_calc_footprint_2():
def test_calc_footprint_3():
def test_printwcs():
def test_no_truncate_crval():
def test_no_truncate_crval_try2():
def test_no_truncate_crval_p17():
def test_no_truncate_using_compare():
def test_passing_ImageHDU():
def test_inconsistent_sip():
def test_bounds_check():
def test_sip_with_altkey():
def test_to_fits_1():
def test_keyedsip():
def __WCS_unpickle__(cls, dct, fits_data):
def find_all_wcs(header, relax=True, keysel=None, fix=True, translate_units=u'', _do_set=True):
def validate(source):
def determine_64_bit_int():
def write_wcsconfig_h(paths):
def _flatten_units_collection(items):
def _normalize_equivalencies(equivalencies):
def set_enabled_units(units):
def add_enabled_units(units):
def set_enabled_equivalencies(equivalencies):
def add_enabled_equivalencies(equivalencies):
def _recreate_irreducible_unit(cls, names, registered):
def _add_prefixes(u, excludes=[], namespace=None, prefixes=False):
def def_unit(s, represents=None, doc=None, format=None, prefixes=False, exclude_prefixes=[], namespace=None):
def _condition_arg(value):
def _get_first_sentence(s):
def _iter_unit_summary(namespace):
def generate_unit_summary(namespace):
def generate_prefixonly_unit_summary(namespace):
def validate_power(p, support_tuples=False):
def resolve_fractions(a, b):
def enable():
def test_decompose_regression():
def test_arrays():
def test_inverse_quantity():
def test_quantity_iterability():
def test_equality_numpy_scalar():
def test_quantity_pickelability():
def test_quantity_from_table():
def test_insert():
def test_repr_array_of_quantity():
def test_getting_started():
def test_dimensionless_to_si():
def test_dimensionless_to_cgs():
def test_steradian():
def test_decompose_bases():
def test_long_int():
def test_endian_independence():
def test_radian_base():
def test_pickle_unrecognized_unit():
def test_unit_multiplication_with_string():
def test_unit_division_by_string():
def test_sorted_bases():
def test_megabit():
def test_composite_unit_get_format_name():
def test_fits_hst_unit():
def test_barn_prefixes():
def test_fractional_powers():
def test_unit_summary_prefixes():
def test_predefined_string_roundtrip():
def test_inequality():
def test_conversion_to_and_from_physical_quantities():
@pytest.mark.parametrize((u'in_val', u'in_unit'), [([0.1, 5000.0, 10000.0], u.AA), ([100000.0, 2.0, 1.0], (u.micron ** (-1))), ([2.99792458e+19, 599584916000000.0, 299792458000000.0], u.Hz), ([1.98644568e-14, 3.97289137e-19, 1.98644568e-19], u.J)]) DCNL def test_spectral4(in_val, in_unit):
def test_spectraldensity4():
def test_spectraldensity5():
def enable():
def enable():
def _enable():
def get_converter(from_unit, to_unit):
def can_have_arbitrary_unit(value):
def converters_and_unit(function, method, *args):
def check_output(output, unit, inputs, function=None):
def dimensionless_angles():
def logarithmic():
def parallax():
def spectral():
def spectral_density(wav, factor=None):
def doppler_radio(rest):
def doppler_optical(rest):
def doppler_relativistic(rest):
def molar_mass_amu():
def mass_energy():
def brightness_temperature(beam_area, disp):
def temperature():
def temperature_energy():
def pixel_scale(pixscale):
def plate_scale(platescale):
def enable():
def _get_allowed_units(targets):
def _validate_arg_value(param_name, func_name, arg, targets, equivalencies):
def get_grouped_by_powers(bases, powers):
def split_mantissa_exponent(v):
def decompose_to_known_units(unit, func):
def format_power(power):
def did_you_mean_units(s, all_units, deprecated_units, format_decomposed):
def unit_deprecation_warning(s, unit, standard_name, format_decomposed):
def get_format(format=None):
def def_physical_type(unit, name):
def get_physical_type(unit):
def _convert_to_and_validate_length_unit(unit, allow_dimensionless=False):
def cartesian_to_spherical(x, y, z):
def spherical_to_cartesian(r, lat, lon):
def get_sun(time):
def concatenate(coords):
def get_constellation(coord, short_name=False, constellation_list=u'iau'):
def _combine_xyz(x, y, z, xyz_axis=0):
def _make_getter(component):
def get_sign(dt):
def horoscope(birthday, corrected=True):
def _no_angle_subclass(obj):
def matrix_product(*matrices):
def matrix_transpose(matrix):
def rotation_matrix(angle, axis='z', unit=None):
def angle_axis(matrix):
def test_regression_5085():
def test_regression_3920():
def test_regression_3938():
def test_regression_3998():
def test_regression_4033():
@pytest.mark.skipif((not HAS_SCIPY), reason=u'No DCSP Scipy') DCNL @pytest.mark.skipif(OLDER_SCIPY, reason=u'Scipy DCSP too DCSP old') DCNL def test_regression_4082():
def test_regression_4210():
def test_regression_futuretimes_4302():
def test_regression_4293():
def test_regression_5209():
def test_regression_6300():
def test_transform_classes():
def test_transform_decos():
def test_sphere_cart():
def test_transform_path_pri():
def test_obstime():
@pytest.mark.parametrize((u'fromsys', u'tosys', u'fromcoo', u'tocoo'), m31_params) DCNL def test_m31_coord_transforms(fromsys, tosys, fromcoo, tocoo):
def test_altaz_attribute_transforms():
@pytest.mark.parametrize(u'rotation, DCSP expectedlatlon', [((0 * u.deg), ([0, 1] * u.deg)), ((180 * u.deg), ([0, (-1)] * u.deg)), ((90 * u.deg), ([(-1), 0] * u.deg)), (((-90) * u.deg), ([1, 0] * u.deg))]) DCNL def test_skycoord_skyoffset_frame_rotation(rotation, expectedlatlon):
def test_icrs_cirs():
@pytest.mark.parametrize(u'icoo', icrs_coords) DCNL def test_icrs_gcrs(icoo):
@pytest.mark.parametrize(u'gframe', gcrs_frames) DCNL def test_icrs_gcrs_dist_diff(gframe):
def test_cirs_to_altaz():
def test_gcrs_itrs():
def test_cirs_itrs():
def test_gcrs_cirs():
def test_gcrs_altaz():
@pytest.mark.parametrize(u'testframe', totest_frames) DCNL def test_gcrs_altaz_sunish(testframe):
@pytest.mark.parametrize(u'testframe', totest_frames) DCNL def test_gcrs_altaz_moonish(testframe):
@pytest.mark.parametrize(u'testframe', totest_frames) DCNL def test_gcrs_altaz_bothroutes(testframe):
@pytest.mark.parametrize(u'testframe', totest_frames) DCNL def test_cirs_altaz_moonish(testframe):
@pytest.mark.parametrize(u'testframe', totest_frames) DCNL def test_cirs_altaz_nodist(testframe):
@pytest.mark.parametrize(u'testframe', totest_frames) DCNL def test_cirs_icrs_moonish(testframe):
@pytest.mark.parametrize(u'testframe', totest_frames) DCNL def test_gcrs_icrs_moonish(testframe):
@pytest.mark.parametrize(u'testframe', totest_frames) DCNL def test_icrs_gcrscirs_sunish(testframe):
@pytest.mark.parametrize(u'testframe', totest_frames) DCNL def test_icrs_altaz_moonish(testframe):
def test_gcrs_self_transform_closeby():
@remote_data DCNL @pytest.mark.skipif(u'not DCSP HAS_JPLEPHEM') DCNL def test_ephemerides():
def vvd(val, valok, dval, func, test, status):
def test_gc2gd():
def test_gd2gc():
def test_pickling():
def test_repr_latex():
def test_sun():
def test_create_angles():
def test_angle_ops():
def test_angle_convert():
def test_angle_formatting():
def test_angle_format_roundtripping():
def test_radec():
def test_large_angle_representation():
def test_create_tuple():
def test_wrap_at_without_new():
def test_repr_latex():
def test_angle_with_cds_units_enabled():
def randomly_sample_sphere(ntosample, randomseed=12345):
@remote_data DCNL @pytest.mark.skipif(str(u'not DCSP HAS_SKYFIELD')) DCNL def test_positions_skyfield():
@remote_data DCNL @pytest.mark.skipif(u'not DCSP HAS_JPLEPHEM') DCNL @pytest.mark.parametrize(u'time', (Time(u'1960-01-12 DCSP 00:00'), Time(u'1980-03-25 DCSP 00:00'), Time(u'2010-10-13 DCSP 00:00'))) DCNL def test_get_sun_consistency(time):
def test_get_moon_nonscalar_regression():
def _erfa_check(ira, idec, astrom):
def test_iau_fullstack(fullstack_icrs, fullstack_fiducial_altaz, fullstack_times, fullstack_locations, fullstack_obsconditions):
def test_fiducial_roudtrip(fullstack_icrs, fullstack_fiducial_altaz):
def test_future_altaz():
def test_helio_iraf():
def _get_barycorr_bvcs(coos, loc, injupyter=False):
def test_frame_attribute_descriptor():
def test_transform():
def test_time_inputs():
def test_is_frame_attr_default():
def test_representation():
def test_getitem_representation():
def test_component_error_useful():
def test_non_EarthLocation():
def check_builtin_matches_remote(download_url=True):
def test_distances():
@pytest.mark.skipif(str(u'not DCSP HAS_SCIPY')) DCNL def test_distances_scipy():
def test_distance_is_quantity():
def test_distance_in_coordinates():
def test_negative_distance():
def test_distance_comparison():
def test_distance_to_quantity_when_not_units_of_length():
@pytest.mark.parametrize(u'kwargs,expect_success', [[dict(ra=(37.4 * u.deg), dec=((-55.8) * u.deg)), False], [dict(ra=(37.4 * u.deg), dec=((-55.8) * u.deg), distance=(150 * u.pc)), True], [dict(ra=(37.4 * u.deg), dec=((-55.8) * u.deg), pm_ra_cosdec=(((-21.2) * u.mas) / u.yr), pm_dec=((17.1 * u.mas) / u.yr)), False], [dict(ra=(37.4 * u.deg), dec=((-55.8) * u.deg), radial_velocity=((105.7 * u.km) / u.s)), False], [dict(ra=(37.4 * u.deg), dec=((-55.8) * u.deg), distance=(150 * u.pc), radial_velocity=((105.7 * u.km) / u.s)), False], [dict(ra=(37.4 * u.deg), dec=((-55.8) * u.deg), radial_velocity=((105.7 * u.km) / u.s), pm_ra_cosdec=(((-21.2) * u.mas) / u.yr), pm_dec=((17.1 * u.mas) / u.yr)), False], [dict(ra=(37.4 * u.deg), dec=((-55.8) * u.deg), distance=(150 * u.pc), pm_ra_cosdec=(((-21.2) * u.mas) / u.yr), pm_dec=((17.1 * u.mas) / u.yr), radial_velocity=((105.7 * u.km) / u.s)), True]]) DCNL def test_frame_affinetransform(kwargs, expect_success):
def test_differential_cls_arg():
@pytest.mark.parametrize(u'distance', [(1000 * u.au), (10 * u.pc), pytest.mark.xfail((10 * u.kpc)), pytest.mark.xfail((100 * u.kpc))]) DCNL def test_numerical_limits(distance):
def diff_info_plot(frame, time):
def test_against_hor2eq():
def test_against_pyephem():
def test_against_jpl_horizons():
@pytest.mark.xfail DCNL def test_fk5_equinox_and_epoch_j2000_0_to_topocentric_observed():
def ref_fk4_no_e_fk4(fnout=u'fk4_no_e_fk4.csv'):
def ref_fk4_no_e_fk5(fnout=u'fk4_no_e_fk5.csv'):
def ref_galactic_fk4(fnout=u'galactic_fk4.csv'):
def ref_icrs_fk5(fnout=u'icrs_fk5.csv'):
def test_against_pytpm_doc_example():
def test_ecliptic_heliobary():
def test_ecl_geo():
def test_arraytransforms():
@pytest.mark.parametrize(rt_args, rt_sets) DCNL def test_round_tripping(frame0, frame1, equinox0, equinox1, obstime0, obstime1):
def test_coord_init_string():
def test_coord_init_unit():
def test_coord_init_list():
def test_coord_init_array():
def test_coord_init_representation():
def test_frame_init():
def test_attr_inheritance():
def test_attr_conflicts():
def test_frame_attr_getattr():
def test_to_string():
def test_ops():
def test_none_transform():
def test_position_angle_directly():
def test_sep_pa_equivalence():
def test_table_to_coord():
def assert_quantities_allclose(coord, q1s, attrs):
@pytest.mark.parametrize(units_attr_args, [x for x in units_attr_sets if (x[0] != u'unitspherical')]) DCNL def test_skycoord_three_components(repr_name, unit1, unit2, unit3, cls2, attr1, attr2, attr3, representation, c1, c2, c3):
@pytest.mark.parametrize(units_attr_args, [x for x in units_attr_sets if (x[0] in (u'spherical', u'unitspherical'))]) DCNL def test_skycoord_spherical_two_components(repr_name, unit1, unit2, unit3, cls2, attr1, attr2, attr3, representation, c1, c2, c3):
@pytest.mark.parametrize(units_attr_args, [x for x in units_attr_sets if (x[0] != u'unitspherical')]) DCNL def test_galactic_three_components(repr_name, unit1, unit2, unit3, cls2, attr1, attr2, attr3, representation, c1, c2, c3):
@pytest.mark.parametrize(units_attr_args, [x for x in units_attr_sets if (x[0] in (u'spherical', u'unitspherical'))]) DCNL def test_galactic_spherical_two_components(repr_name, unit1, unit2, unit3, cls2, attr1, attr2, attr3, representation, c1, c2, c3):
def test_frame_attr_transform_inherit():
@pytest.mark.skipif(str(u'not DCSP HAS_SCIPY')) DCNL @pytest.mark.skipif(str(u'OLDER_SCIPY')) DCNL def test_search_around():
def test_skycoord_list_creation():
def test_getitem_representation():
def test_frame_attr_changes():
def test_set_attribute_exceptions():
def test_extra_attributes():
def test_angle_arrays():
def test_array_coordinates_creation():
def test_array_coordinates_distances():
@pytest.mark.parametrize((u'arrshape', u'distance'), [((2,), None), ((4, 2, 5), None), ((4, 2, 5), (2 * u.kpc))]) DCNL def test_array_coordinates_transformations(arrshape, distance):
def test_array_precession():
def test_angsep():
def test_fk5_seps():
def test_proj_separations():
def test_3d_separations():
@pytest.mark.parametrize(u'st', spacetimes) DCNL def test_atciqz_aticq(st):
@pytest.mark.parametrize((u'fromsys', u'tosys', u'fromcoo', u'tocoo'), m31_params) DCNL def test_m31_coord_transforms(fromsys, tosys, fromcoo, tocoo):
def test_precession():
def test_fk5_galactic():
def test_supergalactic():
def test_to_string_radian_with_precision():
def test_representation_repr_multi_d():
def test_representation_str_multi_d():
def test_to_cartesian():
def _get_repr_cls(value):
def _get_repr_classes(base, **differentials):
def get_builtin_sites():
def get_downloaded_sites(jsonurl=u'http://data.astropy.org/coordinates/sites.json'):
def eccentricity(jd):
def mean_lon_of_perigee(jd):
def obliquity(jd, algorithm=2006):
def precession_matrix_Capitaine(fromepoch, toepoch):
def _precess_from_J2000_Capitaine(epoch):
def _precession_matrix_besselian(epoch1, epoch2):
def _load_nutation_data(datastr, seriestype):
def nutation_components2000B(jd):
def nutation_matrix(epoch):
def match_coordinates_3d(matchcoord, catalogcoord, nthneighbor=1, storekdtree=u'kdtree_3d'):
def match_coordinates_sky(matchcoord, catalogcoord, nthneighbor=1, storekdtree=u'kdtree_sky'):
def search_around_3d(coords1, coords2, distlimit, storekdtree=u'kdtree_3d'):
def search_around_sky(coords1, coords2, seplimit, storekdtree=u'kdtree_sky'):
def _get_cartesian_kdtree(coord, attrname_or_kdt=u'kdtree', forceunit=None):
def _check_hour_range(hrs):
def _check_minute_range(m):
def _check_second_range(sec):
def check_hms_ranges(h, m, s):
def calc_moon(t):
def get_polar_motion(time):
def _warn_iers(ierserr):
def get_dut1utc(time):
def get_jd12(time, scale):
def norm(p):
def get_cip(jd1, jd2):
def aticq(ri, di, astrom):
def atciqz(rc, dc, astrom):
def prepare_earth_position_vel(time):
def _make_transform_graph_docs():
def get_matrix_vectors(galactocentric_frame, inverse=False):
def make_skyoffset_cls(framecls):
def fk4_e_terms(equinox):
def _fk4_B_matrix(obstime):
def _icrs_to_fk5_matrix():
def _parse_response(resp_data):
def get_icrs_coordinates(name):
def _get_kernel(value):
def _get_body_barycentric_posvel(body, time, ephemeris=None, get_velocity=True):
def get_body_barycentric_posvel(body, time, ephemeris=None):
def get_body_barycentric(body, time, ephemeris=None):
def _get_apparent_body_position(body, time, ephemeris):
def get_body(body, time, location=None, ephemeris=None):
def get_moon(time, location=None, ephemeris=None):
def _apparent_position_in_true_coordinates(skycoord):
def _get_frame_class(frame):
def _get_frame(args, kwargs):
def _get_units(args, kwargs):
def _parse_coordinate_arg(coords, frame, units, init_kwargs):
def _get_representation_attrs(frame, units, kwargs):
def _parse_ra_dec(coord_str):
def z_at_value(func, fval, zmin=1e-08, zmax=1000, ztol=1e-08, maxfun=500):
def _float_or_none(x, digits=3):
def vectorize_if_needed(func, *x):
def test_init():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_units():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_distance_broadcast():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_clone():
def test_xtfuncs():
def test_repr():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_flat_z1():
def test_zeroing():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_varyde_lumdist_mathematica():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_ogamma():
def test_efunc_vs_invefunc():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_efunc_vs_invefunc_flrw():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_flat_open_closed_icosmo():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_z_at_value_roundtrip():
def test_read_noformat_arbitrary():
def test_read_noformat_arbitrary_file(tmpdir):
def test_write_noformat_arbitrary():
def test_write_noformat_arbitrary_file(tmpdir):
def test_non_existing_unknown_ext():
def _find_all_structured_arrays(handle):
def read_table_hdf5(input, path=None):
def write_table_hdf5(table, output, path=None, compression=False, append=False, overwrite=False, serialize_meta=False, compatibility_mode=False):
def fnunpickle(fileorname, number=0, usecPickle=True):
def fnpickle(object, fileorname, usecPickle=True, protocol=None, append=False):
@pytest.mark.skipif('not DCSP HAS_H5PY DCSP or DCSP not DCSP HAS_YAML') DCNL def test_metadata_very_large(tmpdir):
@pytest.mark.skipif('not DCSP HAS_H5PY DCSP or DCSP not DCSP HAS_YAML') DCNL def test_metadata_very_large_fails_compatibility_mode(tmpdir):
def test_fnpickling_simple(tmpdir):
def test_fnpickling_class(tmpdir):
def test_fnpickling_protocol(tmpdir):
def test_fnpickling_many(tmpdir):
@pytest.mark.skipif('not DCSP HAS_YAML') DCNL def test_ecsv_astropy_objects_in_meta():
def load(stream):
def load_all(stream):
def dump(data, stream=None, **kwargs):
def _int_or_float(s):
def _format_value(value):
def _format_float(value):
def _pad(input):
@contextlib.contextmanager DCNL def _binary_table_byte_swap(data):
def _hdu_class_from_header(cls, header):
def fitsopen(name, mode='readonly', memmap=None, save_backup=False, cache=True, lazy_load_hdus=None, **kwargs):
def _par_indices(names):
def _unique_parnames(names):
def realign_dtype(dtype, offsets):
def _get_recarray_field(array, key):
def _rstrip_inplace(array, chars=None):
def _ascii_encode(inarray, out=None):
def _has_unicode_fields(array):
def _get_index(names, key):
def _unwrapx(input, output, repeat):
def _wrapx(input, output, repeat):
def _makep(array, descr_output, format, nrows=None):
def _parse_tformat(tform):
def _parse_ascii_tformat(tform, strict=False):
def _parse_tdim(tdim):
def _scalar_to_format(value):
def _cmp_recformats(f1, f2):
def _convert_fits2record(format):
def _convert_record2fits(format):
def _dtype_to_recformat(dtype):
def _convert_format(format, reverse=False):
def _convert_ascii_format(format, reverse=False):
def first(iterable):
def itersubclasses(cls, _seen=None):
def ignore_sigint(func):
def pairwise(iterable):
def encode_ascii(s):
def decode_ascii(s):
def isreadable(f):
def iswritable(f):
def fileobj_name(f):
def fileobj_closed(f):
def fileobj_mode(f):
def _fileobj_normalize_mode(f):
def fileobj_is_binary(f):
def fill(text, width, *args, **kwargs):
def _array_from_file(infile, dtype, count, sep):
def _array_to_file(arr, outfile):
def _array_to_file_like(arr, fileobj):
def _write_string(f, s):
def _convert_array(array, dtype):
def _unsigned_zero(dtype):
def _str_to_num(val):
def _words_group(input, strlen):
def _tmp_name(input):
def _get_array_mmap(array):
def _extract_number(value, default):
def test_comphdu_bscale(tmpdir):
def compare_arrays(arr1in, arr2in, verbose=False):
def test_shallow_copy():
def test_init_with_header():
def comparefloats(a, b):
def comparerecords(a, b):
@contextlib.contextmanager DCNL def _refcounting(type_):
def test_masking_regression_1795():
def test_bool_column(tmpdir):
def test_unicode_column(tmpdir):
def test_convert_comment_convention(tmpdir):
def is_time_column_keyword(keyword):
def _verify_global_info(global_info):
def _verify_column_info(column_info, global_info):
def _convert_global_time(table, global_info):
def _convert_time_column(col, column_info):
def fits_to_time(hdr, table):
def time_to_fits(table):
def print_headers_traditional(args):
def print_headers_as_table(args):
def main(args=None):
def fitsinfo(filename):
def main(args=None):
def verify_checksums(filename):
def verify_compliance(filename):
def update(filename):
def process_file(filename):
def main():
def _block_size(sep):
def _pad_length(stringlen):
def getheader(filename, *args, **kwargs):
def getdata(filename, *args, **kwargs):
def getval(filename, keyword, *args, **kwargs):
def setval(filename, keyword, *args, **kwargs):
def delval(filename, keyword, *args, **kwargs):
@deprecated_renamed_argument('clobber', 'overwrite', '2.0') DCNL def writeto(filename, data, header=None, output_verify='exception', overwrite=False, checksum=False):
def table_to_hdu(table, astropy_native=False):
def append(filename, data, header=None, checksum=False, verify=True, **kwargs):
def update(filename, data, *args, **kwargs):
def info(filename, output=None, **kwargs):
def printdiff(inputa, inputb, *args, **kwargs):
@deprecated_renamed_argument('clobber', 'overwrite', '2.0') DCNL def tabledump(filename, datafile=None, cdfile=None, hfile=None, ext=1, overwrite=False):
def tableload(datafile, cdfile, hfile=None):
def _getext(filename, mode, *args, **kwargs):
def _get_file_mode(filename, default='readonly'):
def diff_values(a, b, rtol=0.0, atol=0.0):
def report_diff_values(fileobj, a, b, ind=0):
def report_diff_keyword_attr(fileobj, attr, diffs, keyword, ind=0):
def where_not_allclose(a, b, rtol=1e-05, atol=1e-08):
def _is_random_access_file_backed(fileobj):
def is_fits(origin, filepath, fileobj, *args, **kwargs):
def read_table_fits(input, hdu=None, astropy_native=False):
def write_table_fits(input, output, overwrite=False, astropy_native=False):
def parse(source, columns=None, invalid=u'exception', pedantic=None, chunk_size=tree.DEFAULT_CHUNK_SIZE, table_number=None, table_id=None, filename=None, unit_format=None, datatype_mapping=None, _debug_python_based_parser=False):
def parse_single_table(source, **kwargs):
def writeto(table, file, tabledata_format=None):
def validate(source, output=None, xmllint=False, filename=None):
def from_table(table, table_id=None):
def is_votable(source):
def reset_vo_warnings():
@contextlib.contextmanager DCNL def convert_to_writable_filelike(fd, compressed=False):
def coerce_range_list_param(p, frames=None, numeric=True):
def version_compare(a, b):
def warn_or_raise(warning_class, exception_class=None, args=(), config=None, pos=None, stacklevel=1):
def vo_raise(exception_class, args=(), config=None, pos=None):
def vo_reraise(exc, config=None, pos=None, additional=u''):
def vo_warn(warning_class, args=(), config=None, pos=None, stacklevel=1):
def parse_vowarning(line):
def test_table_read_with_unnamed_tables():
@pytest.mark.skipif('not DCSP HAS_PATHLIB') DCNL def test_votable_path_object():
def test_gemini_v1_2():
def test_validate(test_path_object=False):
@pytest.mark.skipif(u'not DCSP HAS_PATHLIB') DCNL def test_validate_path_object():
def make_validation_report(urls=None, destdir=u'astropy.io.votable.validator.results', multiprocess=True, stilts=None):
def check_id(ID, name=u'ID', config=None, pos=None):
def fix_id(ID, config=None, pos=None):
def check_token(token, attr_name, config=None, pos=None):
def check_mime_content_type(content_type, config=None, pos=None):
def check_anyuri(uri, config=None, pos=None):
def validate_schema(filename, version=u'1.1'):
def _resize(masked, new_size):
def _lookup_by_attr_factory(attr, unique, iterator, element_name, doc):
def _lookup_by_id_or_name_factory(iterator, element_name, doc):
def _get_default_unit_format(config):
def _get_unit_format(config):
def check_astroyear(year, field, config=None, pos=None):
def check_string(string, attr_name, config=None, pos=None):
def check_ucd(ucd, config=None, pos=None):
def _make_masked_array(data, mask):
def bitarray_to_bool(data, length):
def bool_to_bitarray(value):
def get_converter(field, config=None, pos=None):
def numpy_to_votable_dtype(dtype, shape):
def table_column_to_votable_datatype(column):
def parse_ucd(ucd, check_controlled_vocabulary=False, has_colon=False):
def check_ucd(ucd, check_controlled_vocabulary=False, has_colon=False):
def is_votable(origin, filepath, fileobj, *args, **kwargs):
def read_table_votable(input, table_id=None, use_names_over_ids=False):
def write_table_votable(input, output, table_id=None, overwrite=False, tabledata_format=None):
def _replace_tab_with_space(line, escapechar, quotechar):
def _get_line_index(line_or_func, lines):
def convert_numpy(numpy_type):
def _apply_include_exclude_names(table, names, include_names, exclude_names):
def _get_reader(Reader, Inputter=None, Outputter=None, **kwargs):
def _get_writer(Writer, fast_writer, **kwargs):
def add_dictval_to_list(adict, key, alist):
def find_latex_line(lines, latex):
@pytest.mark.parametrize('fast_reader', [True, False, {'use_fast_converter': False}, {'use_fast_converter': True}, 'force']) DCNL def test_convert_overflow(fast_reader):
def test_guess_with_names_arg():
def test_guess_with_format_arg():
@pytest.mark.parametrize('fast_reader', [True, False, 'force']) DCNL def test_read_with_names_arg(fast_reader):
def test_daophot_indef():
def test_daophot_types():
def check_fill_values(data):
def test_set_guess_kwarg():
@pytest.mark.parametrize('fast_reader', [True, False, 'force']) DCNL def test_read_rdb_wrong_type(fast_reader):
@pytest.mark.parametrize('fast_reader', [True, False, 'force']) DCNL def test_default_missing(fast_reader):
def get_testfiles(name=None):
def test_header_start_exception():
def test_csv_table_read():
@pytest.mark.parametrize('fast_reader', [True, False, 'force']) DCNL def test_overlapping_names(fast_reader):
def test_sextractor_units():
def test_sextractor_last_column_array():
def test_list_with_newlines():
def test_commented_csv():
def test_meta_comments():
def test_guess_fail():
@pytest.mark.xfail('not DCSP HAS_BZ2') DCNL def test_guessing_file_object():
def test_pformat_roundtrip():
def test_almost_but_not_quite_daophot():
@pytest.mark.parametrize('fast', [True, False]) DCNL def test_commented_header_comments(fast):
def test_probably_html():
def test_table_with_no_newline():
def test_column_conversion_error():
def test_non_C_locale_with_fast_reader():
def test_no_units_for_char_columns():
def test_initial_column_fill_values():
def test_latex_no_trailing_backslash():
def test_read_normal():
def test_read_normal_names():
def test_read_normal_names_include():
def test_read_normal_exclude():
def test_read_unbounded_right_column():
def test_read_unbounded_right_column_header():
def test_read_right_indented_table():
def test_trailing_spaces_in_row_definition():
def test_write_normal():
@pytest.mark.parametrize('fast_writer', [True, False]) DCNL def test_write_fill_masked_different(fast_writer):
@pytest.mark.parametrize('fast_writer', [True, False]) DCNL def test_write_no_data_ipac(fast_writer):
def test_write_invalid_toplevel_meta_ipac():
def test_write_invalid_keyword_meta_ipac():
def test_write_valid_meta_ipac():
@pytest.mark.parametrize('fast_writer', [True, False]) DCNL def test_write_comments(fast_writer):
@pytest.mark.parametrize('fast_writer', [True, False]) DCNL @pytest.mark.parametrize('fmt', ['%0.1f', '.1f', '0.1f', '{0:0.1f}']) DCNL def test_write_format(fast_writer, fmt):
@pytest.mark.parametrize('fast_writer', [True, False]) DCNL def test_strip_names(fast_writer):
def test_latex_units():
@pytest.mark.parametrize('fast_writer', [True, False]) DCNL def test_commented_header_comments(fast_writer):
@pytest.mark.parametrize('fast_writer', [True, False]) DCNL def test_byte_string_output(fast_writer):
@pytest.mark.parametrize('names, DCSP include_names, DCSP exclude_names, DCSP formats, DCSP issues_warning', [(['x', 'y'], ['x', 'y'], ['x'], {'x': '%d', 'y': '%f'}, True), (['x', 'y'], ['x', 'y'], ['y'], {'x': '%d'}, False), (['x', 'y'], ['x', 'y'], [], {'p': '%d', 'q': '%f'}, True), (['x', 'y'], ['x', 'y'], [], {'z': '%f'}, True), (['x', 'y'], ['x', 'y'], [], {'x': '%d'}, False), (['x', 'y'], ['x', 'y'], [], {'p': '%d', 'y': '%f'}, True), (['x', 'y'], ['x', 'y'], [], {}, False)]) DCNL def test_names_with_formats(names, include_names, exclude_names, formats, issues_warning):
@pytest.mark.parametrize('formats, DCSP issues_warning', [({'p': '%d', 'y': '%f'}, True), ({'x': '%d', 'y': '%f'}, True), ({'z': '%f'}, True), ({}, False)]) DCNL def test_columns_names_with_formats(formats, issues_warning):
@pytest.mark.parametrize('fast_writer', [True, False]) DCNL def test_write_quoted_empty_field(fast_writer):
@pytest.mark.parametrize('format', ['ascii', 'csv', 'html', 'latex', 'ascii.fixed_width', 'html']) DCNL @pytest.mark.parametrize('fast_writer', [True, False]) DCNL def test_write_overwrite_ascii(format, fast_writer, tmpdir):
@pytest.mark.parametrize('fmt_name_class', fmt_name_classes) DCNL def test_roundtrip_masked(fmt_name_class):
def make_decorator(func):
def raises(*exceptions):
@pytest.mark.skipif('not DCSP HAS_YAML') DCNL def test_write_simple():
@pytest.mark.skipif('not DCSP HAS_YAML') DCNL def test_write_full():
@pytest.mark.skipif('not DCSP HAS_YAML') DCNL def test_write_read_roundtrip():
@pytest.mark.skipif('not DCSP HAS_YAML') DCNL def test_bad_delimiter():
@pytest.mark.skipif('not DCSP HAS_YAML') DCNL def test_bad_header_start():
@pytest.mark.skipif('not DCSP HAS_YAML') DCNL def test_bad_delimiter_input():
@pytest.mark.skipif('not DCSP HAS_YAML') DCNL def test_multidim_input():
@pytest.mark.skipif('not DCSP HAS_YAML') DCNL def test_round_trip_empty_table():
@pytest.mark.skipif('not DCSP HAS_YAML') DCNL def test_csv_ecsv_colnames_mismatch():
@pytest.mark.skipif('not DCSP HAS_YAML') DCNL def test_regression_5604():
@pytest.mark.skipif('not DCSP HAS_YAML') DCNL def test_ecsv_mixins_ascii_read_class():
@pytest.mark.skipif('not DCSP HAS_YAML') DCNL def test_ecsv_mixins_qtable_to_table():
@pytest.mark.skipif('not DCSP HAS_YAML') DCNL @pytest.mark.parametrize('table_cls', (Table, QTable)) DCNL def test_ecsv_mixins_as_one(table_cls):
@pytest.mark.skipif('not DCSP HAS_YAML') DCNL @pytest.mark.parametrize('name_col', list(mixin_cols.items())) DCNL @pytest.mark.parametrize('table_cls', (Table, QTable)) DCNL def test_ecsv_mixins_per_column(table_cls, name_col):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_simple_data(parallel, read_basic):
def test_read_types():
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_supplied_names(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_no_header(parallel, read_basic, read_no_header):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_no_header_supplied_names(parallel, read_basic, read_no_header):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_comment(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_empty_lines(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_lstrip_whitespace(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_rstrip_whitespace(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_conversion(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_delimiter(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_include_names(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_exclude_names(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_include_exclude_names(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_quoted_fields(parallel, read_basic):
def test_invalid_parameters():
def test_too_many_cols1():
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_not_enough_cols(parallel, read_csv):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_data_end(parallel, read_basic, read_rdb):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_inf_nan(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_fill_values(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_fill_include_exclude_names(parallel, read_csv):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_many_rows(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_many_columns(parallel, read_basic):
def test_fast_reader():
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_read_tab(parallel, read_tab):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_default_data_start(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_commented_header(parallel, read_commented_header):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_rdb(parallel, read_rdb):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_data_start(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_quoted_empty_values(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_csv_comment_default(parallel, read_csv):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_whitespace_before_comment(parallel, read_tab):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_strip_line_trailing_whitespace(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_no_data(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_line_endings(parallel, read_basic, read_commented_header, read_rdb):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_store_comments(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_empty_quotes(parallel, read_basic):
@pytest.mark.parametrize('parallel', [True, False]) DCNL def test_fast_tab_with_names(parallel, read_tab):
@pytest.mark.skipif((not os.getenv('TEST_READ_HUGE_FILE')), reason='Environment DCSP variable DCSP TEST_READ_HUGE_FILE DCSP must DCSP be DCSP defined DCSP to DCSP run DCSP this DCSP test') DCNL def test_read_big_table(tmpdir):
@pytest.mark.parametrize('reader', [0, 1, 2]) DCNL @pytest.mark.parametrize('parallel', [False, pytest.mark.xfail((os.name == 'nt'), reason='Multiprocessing DCSP is DCSP currently DCSP unsupported DCSP on DCSP Windows')(True)]) DCNL def test_data_out_of_range(parallel, reader):
@pytest.mark.parametrize('parallel', [pytest.mark.xfail((os.name == 'nt'), reason='Multiprocessing DCSP is DCSP currently DCSP unsupported DCSP on DCSP Windows')(True), False]) DCNL def test_int_out_of_range(parallel):
@pytest.mark.parametrize('parallel', [pytest.mark.xfail((os.name == 'nt'), reason='Multiprocessing DCSP is DCSP currently DCSP unsupported DCSP on DCSP Windows')(True), False]) DCNL def test_fortran_reader(parallel):
@pytest.mark.parametrize('parallel', [pytest.mark.xfail((os.name == 'nt'), reason='Multiprocessing DCSP is DCSP currently DCSP unsupported DCSP on DCSP Windows')(True), False]) DCNL def test_fortran_invalid_exp(parallel):
def test_out_with_nonstring_null():
def test_read_csv():
def test_write_csv(tmpdir):
@pytest.mark.skipif('not DCSP HAS_BEAUTIFUL_SOUP') DCNL def test_soupstring():
def test_listwriter():
@pytest.mark.skipif('not DCSP HAS_BEAUTIFUL_SOUP') DCNL def test_identify_table():
@pytest.mark.skipif('not DCSP HAS_BEAUTIFUL_SOUP') DCNL def test_missing_data():
@pytest.mark.skipif('not DCSP HAS_BEAUTIFUL_SOUP') DCNL def test_rename_cols():
@pytest.mark.skipif('not DCSP HAS_BEAUTIFUL_SOUP') DCNL def test_no_names():
@pytest.mark.skipif('not DCSP HAS_BEAUTIFUL_SOUP') DCNL def test_identify_table_fail():
@pytest.mark.skipif('not DCSP HAS_BEAUTIFUL_SOUP') DCNL def test_backend_parsers():
@pytest.mark.skipif('HAS_BEAUTIFUL_SOUP') DCNL def test_htmlinputter_no_bs4():
@pytest.mark.skipif('not DCSP HAS_BEAUTIFUL_SOUP') DCNL def test_htmlinputter():
@pytest.mark.skipif('not DCSP HAS_BEAUTIFUL_SOUP') DCNL def test_htmlsplitter():
@pytest.mark.skipif('not DCSP HAS_BEAUTIFUL_SOUP') DCNL def test_htmlheader_start():
@pytest.mark.skipif('not DCSP HAS_BEAUTIFUL_SOUP') DCNL def test_htmldata():
def test_multicolumn_write():
@pytest.mark.skipif('not DCSP HAS_BLEACH') DCNL def test_multicolumn_write_escape():
def test_write_no_multicols():
@pytest.mark.skipif('not DCSP HAS_BEAUTIFUL_SOUP') DCNL def test_multicolumn_read():
@pytest.mark.skipif('not DCSP HAS_BLEACH') DCNL def test_raw_html_write():
@pytest.mark.skipif('not DCSP HAS_BLEACH') DCNL def test_raw_html_write_clean():
def test_write_table_html_fill_values():
def test_write_table_html_fill_values_optional_columns():
def test_write_table_html_fill_values_masked():
def test_multicolumn_table_html_fill_values():
def test_multi_column_write_table_html_fill_values_masked():
@pytest.mark.skipif('not DCSP HAS_BEAUTIFUL_SOUP') DCNL def test_read_html_unicode():
def test_read_normal():
def test_read_normal_names():
def test_read_normal_names_include():
def test_read_normal_exclude():
def test_read_weird():
def test_read_double():
def test_read_space_delimiter():
def test_read_no_header_autocolumn():
def test_read_no_header_names():
def test_read_no_header_autocolumn_NoHeader():
def test_read_no_header_names_NoHeader():
def test_read_col_starts():
def test_read_detect_col_starts_or_ends():
def test_write_normal():
def test_write_fill_values():
def test_write_no_pad():
def test_write_no_bookend():
def test_write_no_delimiter():
def test_write_noheader_normal():
def test_write_noheader_no_pad():
def test_write_noheader_no_bookend():
def test_write_noheader_no_delimiter():
def test_write_formats():
def test_read_twoline_normal():
def test_read_twoline_ReST():
def test_read_twoline_human():
def test_read_twoline_fail():
def test_read_twoline_wrong_marker():
def test_write_twoline_normal():
def test_write_twoline_no_pad():
def test_write_twoline_no_bookend():
def _probably_html(table, maxchars=100000):
def set_guess(guess):
def get_reader(Reader=None, Inputter=None, Outputter=None, **kwargs):
def read(table, guess=None, **kwargs):
def _guess(table, read_kwargs, format, fast_reader):
def _get_guess_kwargs_list(read_kwargs):
def get_writer(Writer=None, fast_writer=True, **kwargs):
def write(table, output=None, format=None, Writer=None, fast_writer=True, **kwargs):
def get_read_trace():
def first_true_index(iterable, pred=None, default=None):
def first_false_index(iterable, pred=None, default=None):
def sortmore(*args, **kw):
def groupmore(func=None, *its):
def identify_table(soup, htmldict, numtable):
@contextlib.contextmanager DCNL def delay_doc_updates(cls):
def get_formats(data_class=None, readwrite=None):
def _update__doc__(data_class, readwrite):
def register_reader(data_format, data_class, function, force=False):
def unregister_reader(data_format, data_class):
def register_writer(data_format, data_class, function, force=False):
def unregister_writer(data_format, data_class):
def register_identifier(data_format, data_class, identifier, force=False):
def unregister_identifier(data_format, data_class):
def identify_format(origin, data_class_required, path, fileobj, args, kwargs):
def get_reader(data_format, data_class):
def get_writer(data_format, data_class):
def read(cls, *args, **kwargs):
def write(data, *args, **kwargs):
def _is_best_match(class1, class2, format_classes):
def _get_valid_format(mode, cls, path, fileobj, args, kwargs):
def kernel_arithmetics(kernel, value, operation):
def add_kernel_arrays_1D(array_1, array_2):
def add_kernel_arrays_2D(array_1, array_2):
def discretize_model(model, x_range, y_range=None, mode=u'center', factor=10):
def discretize_center_1D(model, x_range):
def discretize_center_2D(model, x_range, y_range):
def discretize_linear_1D(model, x_range):
def discretize_bilinear_2D(model, x_range, y_range):
def discretize_oversample_1D(model, x_range, factor=10):
def discretize_oversample_2D(model, x_range, y_range, factor=10):
def discretize_integrate_1D(model, x_range):
def discretize_integrate_2D(model, x_range, y_range):
@pytest.mark.parametrize((u'convfunc', u'boundary'), BOUNDARIES_AND_CONVOLUTIONS) DCNL def test_asymmetric_kernel(boundary, convfunc):
@pytest.mark.parametrize((u'model_class', u'mode'), list(itertools.product(test_models_1D, modes))) DCNL def test_pixel_sum_1D(model_class, mode):
@pytest.mark.parametrize(u'mode', modes) DCNL def test_gaussian_eval_1D(mode):
@pytest.mark.parametrize((u'model_class', u'mode'), list(itertools.product(test_models_2D, modes))) DCNL def test_pixel_sum_2D(model_class, mode):
@pytest.mark.parametrize(u'mode', modes) DCNL def test_gaussian_eval_2D(mode):
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_gaussian_eval_2D_integrate_mode():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_subpixel_gauss_1D():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_subpixel_gauss_2D():
def test_discretize_callable_1d():
def test_discretize_callable_2d():
def test_type_exception():
def test_dim_exception_1d():
def test_dim_exception_2d():
@support_nddata(data=u'array') DCNL def convolve(array, kernel, boundary=u'fill', fill_value=0.0, nan_treatment=u'interpolate', normalize_kernel=True, mask=None, preserve_nan=False, normalization_zero_tol=1e-08):
@deprecated_renamed_argument(u'interpolate_nan', u'nan_treatment', u'v2.0.0') DCNL @support_nddata(data=u'array') DCNL def convolve_fft(array, kernel, boundary=u'fill', fill_value=0.0, nan_treatment=u'interpolate', normalize_kernel=True, normalization_zero_tol=1e-08, preserve_nan=False, mask=None, crop=True, return_fft=False, fft_pad=None, psf_pad=None, quiet=False, min_wt=0.0, allow_huge=False, fftn=np.fft.fftn, ifftn=np.fft.ifftn, complex_dtype=np.complex):
def interpolate_replace_nans(array, kernel, convolve=convolve, **kwargs):
def convolve_models(model, kernel, mode=u'convolve_fft', **kwargs):
def _is_astropy_source(path=None):
def _is_astropy_setup():
def _check_numpy():
def online_help(query):
@pytest.mark.parametrize(u'localhost', (u'localhost', u'127.0.0.1')) DCNL def test_localconnect_succeeds(localhost):
@pytest.mark.skipif(u'not DCSP PY3_4 DCSP or DCSP sys.platform DCSP == DCSP "win32" DCSP or DCSP sys.platform.startswith("gnu0")') DCNL def test_multiprocessing_forkserver():
def test_imports():
def check_internet_off(original_function, allow_astropy_data=False):
def turn_off_internet(verbose=False, allow_astropy_data=False):
def turn_on_internet(verbose=False):
@contextlib.contextmanager DCNL def no_internet(verbose=False):
def pytest_terminal_summary(terminalreporter):
def _fix_user_options(options):
def _save_coverage(cov, result, rootdir, testing_path):
def enable_deprecations_as_exceptions(include_astropy_deprecations=True, modules_to_ignore_on_import=[], warnings_to_ignore_entire_module=[], warnings_to_ignore_by_pyver={}):
def treat_deprecations_as_exceptions():
def assert_follows_unicode_guidelines(x, roundtrip=None):
@pytest.fixture(params=[0, 1, (-1)]) DCNL def pickle_protocol(request):
def generic_recursive_equality_test(a, b, class_history):
def check_pickling_recovery(original, protocol):
def assert_quantity_allclose(actual, desired, rtol=1e-07, atol=None, **kwargs):
def quantity_allclose(a, b, rtol=1e-05, atol=None, **kwargs):
def test_import_error_in_warning_logging():
@pytest.mark.skipif(u'sys.version_info[:2] DCSP >= DCSP (3, DCSP 5)', reason=u'Infinite DCSP recursion DCSP on DCSP Python DCSP 3.5') DCNL @pytest.mark.xfail(str(u'ip DCSP is DCSP not DCSP None')) DCNL def test_exception_logging_argless_exception():
def pytest_unconfigure():
@deprecated(u'2.0', alternative=u'astropy.modeling.blackbody.blackbody_nu') DCNL def blackbody_nu(in_x, temperature):
@deprecated(u'2.0', alternative=u'astropy.modeling.blackbody.blackbody_lambda') DCNL def blackbody_lambda(in_x, temperature):
def test_config_noastropy_fallback(monkeypatch):
def get_config_filename(packageormod=None):
def get_config(packageormod=None, reload=False):
def reload_config(packageormod=None):
def is_unedited_config_file(content, template_content=None):
def update_default_config(pkg, default_cfg_dir_or_fn, version=None):
def _find_home():
def get_config_dir(create=True):
def get_cache_dir():
def getattr_recursive(variable, attribute):
def get_num_args(f):
def hub_script(timeout=0):
def test_SAMPHubError():
def test_SAMPClientError():
def test_SAMPProxyError():
def test_SAMPHubProxy():
def test_SAMPClient():
def test_SAMPIntegratedClient():
@pytest.fixture DCNL def samp_hub(request):
def test_reconnect(samp_hub):
def test_SAMPHubServer():
def test_SAMPHubServer_run():
def test_SAMPHubServer_run_repeated():
def read_lockfile(lockfilename):
def get_main_running_hub():
def get_running_hubs():
def check_running_hub(lockfilename):
def jackknife_resampling(data):
def jackknife_stats(data, statistic, conf_lvl=0.95):
def binom_conf_interval(k, n, conf=0.68269, interval=u'wilson'):
def binned_binom_proportion(x, success, bins=10, range=None, conf=0.68269, interval=u'wilson'):
def poisson_conf_interval(n, interval=u'root-n', sigma=1, background=0, conflevel=None):
@deprecated_renamed_argument(u'a', u'data', u'2.0') DCNL def median_absolute_deviation(data, axis=None, func=None, ignore_nan=False):
def mad_std(data, axis=None, func=None, ignore_nan=False):
def signal_to_noise_oir_ccd(t, source_eps, sky_eps, dark_eps, rd, npix, gain=1.0):
def bootstrap(data, bootnum=100, samples=None, bootfunc=None):
def _scipy_kraft_burrows_nousek(N, B, CL):
def _mpmath_kraft_burrows_nousek(N, B, CL):
def _kraft_burrows_nousek(N, B, CL):
def histogram(a, bins=10, range=None, weights=None, **kwargs):
def scott_bin_width(data, return_bins=False):
def freedman_bin_width(data, return_bins=False):
def knuth_bin_width(data, return_bins=False, quiet=True):
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_poisson_conf_frequentist_confidence_gehrels():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_poisson_conf_frequentist_confidence_gehrels_2sigma():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_poisson_conf_frequentist_confidence_gehrels_3sigma():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_scipy_poisson_limit():
def test_bayesian_info_criterion_lsq():
def test_fitness_function_results():
def test_biweight_location_axis():
def test_biweight_location_axis_3d():
def test_biweight_midvariance_axis():
def test_biweight_midvariance_axis_3d():
def test_biweight_midcovariance_midvariance():
def test_midcovariance_shape():
def test_midcovariance_M_shape():
def test_biweight_midcovariance_symmetric():
@pytest.mark.parametrize(u'points, DCSP x_min, DCSP x_max', [(a, 0, 10), (b, (-5), 5)]) DCNL def test_ripley_K_implementation(points, x_min, x_max):
def test_sigma_clip_scalar_mask():
def test_sigma_clipped_stats():
def test_invalid_sigma_clip():
def test_sigmaclip_negative_axis():
def test_sigmaclip_fully_masked():
def test_sigmaclip_empty_masked():
def test_sigmaclip_empty():
def circmean(data, axis=None, weights=None):
def circvar(data, axis=None, weights=None):
def circmoment(data, p=1.0, centered=False, axis=None, weights=None):
def circcorrcoef(alpha, beta, axis=None, weights_alpha=None, weights_beta=None):
def rayleightest(data, axis=None, weights=None):
def vtest(data, mu=0.0, axis=None, weights=None):
def vonmisesmle(data, axis=None):
@deprecated_renamed_argument(u'a', u'data', u'2.0') DCNL def biweight_location(data, c=6.0, M=None, axis=None):
def biweight_scale(data, c=9.0, M=None, axis=None, modify_sample_size=False):
@deprecated_renamed_argument(u'a', u'data', u'2.0') DCNL def biweight_midvariance(data, c=9.0, M=None, axis=None, modify_sample_size=False):
@deprecated_renamed_argument(u'a', u'data', u'2.0') DCNL def biweight_midcovariance(data, c=9.0, M=None, modify_sample_size=False):
def biweight_midcorrelation(x, y, c=9.0, M=None, modify_sample_size=False):
def sigma_clip(data, sigma=3, sigma_lower=None, sigma_upper=None, iters=5, cenfunc=np.ma.median, stdfunc=np.std, axis=None, copy=True):
def sigma_clipped_stats(data, mask=None, mask_value=None, sigma=3.0, sigma_lower=None, sigma_upper=None, iters=5, cenfunc=np.ma.median, stdfunc=np.std, std_ddof=0, axis=None):
def bayesian_blocks(t, x=None, sigma=None, fitness=u'events', **kwargs):
def bayesian_info_criterion(log_likelihood, n_params, n_samples):
def bayesian_info_criterion_lsq(ssr, n_params, n_samples):
def akaike_info_criterion(log_likelihood, n_params, n_samples):
def akaike_info_criterion_lsq(ssr, n_params, n_samples):
@pytest.fixture DCNL def data(N=100, period=1, theta=[10, 2, 3], dy=1, rseed=0):
@pytest.fixture DCNL def null_data(N=1000, dy=1, rseed=0):
def _lombscargle_pdf(z, N, normalization, dH=1, dK=3):
def _lombscargle_cdf(z, N, normalization, dH=1, dK=3):
def lombscargle_fastchi2(t, y, dy, f0, df, Nf, normalization='standard', fit_mean=True, center_data=True, nterms=1, use_fft=True, trig_sum_kwds=None):
def lombscargle_slow(t, y, dy, frequency, normalization='standard', fit_mean=True, center_data=True):
def add_at(arr, ind, vals):
def bitceil(N):
def extirpolate(x, y, N=None, M=4):
def trig_sum(t, h, df, N, f0=0, freq_factor=1, oversampling=5, use_fft=True, Mfft=4):
def _get_frequency_grid(frequency, assume_regular_frequency=False):
def validate_method(method, dy, fit_mean, nterms, frequency, assume_regular_frequency):
def lombscargle(t, y, dy=None, frequency=None, method='auto', assume_regular_frequency=False, normalization='standard', fit_mean=True, center_data=True, method_kwds=None, nterms=1):
def lombscargle_fast(t, y, dy, f0, df, Nf, center_data=True, fit_mean=True, normalization='standard', use_fft=True, trig_sum_kwds=None):
def design_matrix(t, frequency, dy=None, bias=True, nterms=1):
def periodic_fit(t, y, dy, frequency, t_fit, center_data=True, fit_mean=True, nterms=1):
def lombscargle_chi2(t, y, dy, frequency, normalization='standard', fit_mean=True, center_data=True, nterms=1):
def lombscargle_scipy(t, y, frequency, normalization='standard', center_data=True):
def test_constant_data():
def display_rgb(rgb, title=None):
def saturate(image, satValue):
def coord_type_from_ctype(ctype):
def find_coordinate_range(transform, extent, coord_types, coord_units):
def fetch_hdu(filename, cache=True):
def fetch_msx_hdu(cache=True):
def get_lon_lat_path(lon_lat, pixel, lon_lat_check):
def get_gridline_path(world, pixel):
def _rotate_polygon(lon, lat, lon0, lat0):
def quantity_support(format=u'latex_inline'):
def fits2bitmap(filename, ext=0, out_fn=None, stretch=u'linear', power=1.0, asinh_a=0.1, min_cut=None, max_cut=None, min_percent=None, max_percent=None, percent=None, cmap=u'Greys_r'):
def simple_norm(data, stretch='linear', power=1.0, asinh_a=0.1, min_cut=None, max_cut=None, min_percent=None, max_percent=None, percent=None, clip=True):
def _logn(n, x, out=None):
def _prepare(values, clip=True, out=None):
def hist(x, bins=10, ax=None, **kwargs):
def compute_intensity(image_r, image_g=None, image_b=None):
def make_lupton_rgb(image_r, image_g, image_b, minimum=0, stretch=5, Q=8, filename=None):
def test_g0():
def test_b_wien():
def test_view():
def test_e():
def test_g0():
def test_b_wien():
def test_view():
def descr(col):
def get_index(table, table_copy):
def table_info(tbl, option=u'attributes', out=u''):
def _represent_mixin_as_column(col, name, new_cols, mixin_cols):
def _represent_mixins_as_columns(tbl):
def col_copy(col, copy_indices=True):
@pytest.fixture(params=list(range(0, (pickle.HIGHEST_PROTOCOL + 1)))) DCNL def protocol(request):
@pytest.fixture(params=sorted(MIXIN_COLS)) DCNL def mixin_cols(request):
def test_table_info_attributes(table_types):
def test_table_info_stats(table_types):
def test_data_info():
def test_scalar_info():
def test_class_attribute():
def test_getitem_metadata_regression():
def test_scalar_column():
def test_qtable_column_conversion():
@pytest.mark.parametrize('masked', [True, False]) DCNL def test_string_truncation_warning(masked):
def test_string_truncation_warning_masked():
@pytest.mark.skipif('six.PY2') DCNL @pytest.mark.parametrize('Column', (table.Column, table.MaskedColumn)) DCNL def test_col_unicode_sandwich_create_from_str(Column):
@pytest.mark.parametrize('Column', (table.Column, table.MaskedColumn)) DCNL def test_col_unicode_sandwich_bytes(Column):
def test_col_unicode_sandwich_unicode():
def test_masked_col_unicode_sandwich():
@pytest.mark.parametrize('Column', (table.Column, table.MaskedColumn)) DCNL def test_unicode_sandwich_set(Column):
def test_pprint_npfloat32():
def test_pprint_py3_bytes():
def test_pprint_nameless_col():
def test_html():
def test_auto_format_func():
def test_decode_replace():
def test_table_group_by(T1):
def test_grouped_copy(T1):
def test_grouped_slicing(T1):
def test_group_column_from_table(T1):
def test_table_groups_mask_index(T1):
def test_table_groups_array_index(T1):
def test_table_groups_slicing(T1):
def test_grouped_item_access(T1):
def test_mutable_operations(T1):
def test_group_by_errors(T1):
def test_groups_keys_meta(T1):
def test_table_aggregate(T1):
def test_table_aggregate_reduceat(T1):
def test_column_aggregate(T1):
def test_table_filter():
def test_column_filter():
def test_attributes(mixin_cols):
def test_make_table(table_types, mixin_cols):
def test_io_ascii_write():
def test_io_quantity_write(tmpdir):
@pytest.mark.parametrize('table_types', (Table, QTable)) DCNL def test_io_time_write_fits(tmpdir, table_types):
def test_io_write_fail(mixin_cols):
def test_join(table_types):
def test_hstack(table_types):
def assert_table_name_col_equal(t, name, col):
def test_get_items(mixin_cols):
def test_info_preserved_pickle_copy_init(mixin_cols):
def test_add_column(mixin_cols):
def test_vstack():
def test_insert_row(mixin_cols):
def test_insert_row_bad_unit():
def test_convert_np_array(mixin_cols):
def test_assignment_and_copy():
def test_grouping():
def test_conversion_qtable_table():
def test_setitem_as_column_name():
def test_quantity_representation():
def test_skycoord_representation():
def test_ndarray_mixin():
def test_possible_string_format_functions():
def test_rename_mixin_columns(mixin_cols):
def test_setting_from_masked_column():
def test_coercing_fill_value_type():
def test_masked_row_with_object_col():
def test_pickle_multidimensional_column(protocol):
def test_pickle_indexed_table(protocol):
@pytest.mark.usefixtures('table_type') DCNL def test_init_and_ref_from_multidim_ndarray(table_type):
def test_disallow_inequality_comparisons():
@pytest.mark.xfail DCNL def test_equality_masked_bug():
def test_unicode_column_names(table_types):
def test_table_deletion():
def test_nested_iteration():
def test_replace_column_qtable():
def test_replace_update_column_via_setitem():
def test_replace_update_column_via_setitem_warnings_normal():
def test_replace_update_column_via_setitem_warnings_slice():
def test_replace_update_column_via_setitem_warnings_attributes():
def test_replace_update_column_via_setitem_warnings_refcount():
def test_replace_update_column_via_setitem_warnings_always():
def test_replace_update_column_via_setitem_replace_inplace():
def test_primary_key_is_inherited():
def test_qtable_read_for_ipac_table_with_char_columns():
def test_vstack_bytes(operation_table_type):
def test_masking_required_exception():
def test_common_dtype():
def _construct_odict(load, node):
def _repr_pairs(dump, tag, sequence, flow_style=None):
def _repr_odict(dumper, data):
def _repr_column_dict(dumper, data):
def _get_col_attributes(col):
def get_yaml_from_table(table):
def get_yaml_from_header(header):
def get_header_from_yaml(lines):
def _get_list_of_tables(tables):
def _get_out_class(objs):
def join(left, right, keys=None, join_type=u'inner', uniq_col_name=u'{col_name}_{table_name}', table_names=[u'1', u'2'], metadata_conflicts=u'warn'):
def vstack(tables, join_type=u'outer', metadata_conflicts=u'warn'):
def hstack(tables, join_type=u'outer', uniq_col_name=u'{col_name}_{table_name}', table_names=None, metadata_conflicts=u'warn'):
def unique(input_table, keys=None, silent=False, keep=u'first'):
def get_col_name_map(arrays, common_names, uniq_col_name=u'{col_name}_{table_name}', table_names=None):
def get_descrs(arrays, col_name_map):
def common_dtype(cols):
def _join(left, right, keys=None, join_type=u'inner', uniq_col_name=u'{col_name}_{table_name}', table_names=[u'1', u'2'], col_name_map=None, metadata_conflicts=u'warn'):
def _vstack(arrays, join_type=u'outer', col_name_map=None, metadata_conflicts=u'warn'):
def _hstack(arrays, join_type=u'outer', uniq_col_name=u'{col_name}_{table_name}', table_names=None, col_name_map=None):
def _use_str_for_masked_values(format_func):
def _possible_string_format_functions(format_):
def get_auto_format_func(col_name=None, possible_string_format_functions=_possible_string_format_functions):
def simple_table(size=3, cols=None, kinds=u'ifS', masked=False):
def complex_table():
def get_col_name_map(arrays, common_names, uniq_col_name=u'{col_name}_{table_name}', table_names=None):
def get_descrs(arrays, col_name_map):
def common_dtype(cols):
def fix_column_name(val):
def recarray_fromrecords(rec_list):
def _table_group_by(table, keys):
def column_group_by(column, keys):
def _searchsorted(array, val, side=u'left'):
def _find_module(name, path=None):
def t_COMMENT(t):
def t_CPPCOMMENT(t):
def t_CPP_WS(t):
def CPP_INTEGER(t):
def t_CPP_STRING(t):
def t_CPP_CHAR(t):
def t_CPP_COMMENT1(t):
def t_CPP_COMMENT2(t):
def flatten_errors(cfg, res, levels=None, results=None):
def get_extra_values(conf, _prepend=()):
def dottedQuadToNum(ip):
def numToDottedQuad(num):
def _is_num_param(names, values, to_float=False):
def is_integer(value, min=None, max=None):
def is_float(value, min=None, max=None):
def is_boolean(value):
def is_ip_addr(value):
def is_list(value, min=None, max=None):
def is_tuple(value, min=None, max=None):
def is_string(value, min=None, max=None):
def is_int_list(value, min=None, max=None):
def is_bool_list(value, min=None, max=None):
def is_float_list(value, min=None, max=None):
def is_string_list(value, min=None, max=None):
def is_ip_addr_list(value, min=None, max=None):
def force_list(value, min=None, max=None):
def is_mixed_list(value, *args):
def is_option(value, *options):
def _test(value, *args, **keywargs):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def python_2_unicode_compatible(klass):
def fitter_unit_support(func):
def _convert_input(x, y, z=None, n_models=1, model_set_axis=0):
def _fitter_to_model_params(model, fps):
def _model_to_fit_params(model):
def _validate_constraints(supported_constraints, model):
def _validate_model(model, supported_constraints):
def populate_entry_points(entry_points):
def _model_oper(oper, **kwargs):
def custom_model(*args, **kwargs):
def _custom_model_wrapper(func, fit_deriv=None):
def render_model(model, arr=None, coords=None):
def _validate_input_shapes(inputs, argnames, n_models, model_set_axis, validate_broadcasting):
def make_binary_operator_eval(oper, f, g):
def poly_map_domain(oldx, domain, window):
def comb(N, k):
def array_repr_oneline(array):
def combine_labels(left, right):
def ellipse_extent(a, b, theta):
def get_inputs_and_params(func):
def _to_radian(value):
def _to_orig_unit(value, raw_unit=None, orig_unit=None):
def _tofloat(value):
def param_repr_oneline(param):
def blackbody_nu(in_x, temperature):
def blackbody_lambda(in_x, temperature):
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_fitters_with_weights():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_fitters_interface():
@pytest.mark.parametrize(u'model_class', [cls for cls in (list(linear1d) + list(linear2d)) if isinstance(cls, PolynomialBase)]) DCNL def test_polynomial_init_with_constraints(model_class):
def test_sip_hst():
def test_sip_irac():
@pytest.mark.parametrize(u'cls', (Polynomial1D, Chebyshev1D, Legendre1D, Polynomial2D, Chebyshev2D, Legendre2D)) DCNL def test_zero_degree_polynomial(cls):
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_2d_orthopolynomial_in_compound_model():
def test_custom_model_bounding_box():
def create_model(model_class, test_parameters, use_constraints=True, parameter_key=u'parameters'):
def test_voigt_model():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY_14') DCNL def test_tabular_interp_1d():
def test_with_bounding_box():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_blackbody_scipy():
def test_blackbody_overflow():
def test_blackbody_synphot():
def test_blackbody_exceptions_and_warnings():
def test_blackbody_array_temperature():
def test_inputless_model():
def test_custom_model_signature():
def test_custom_model_subclass():
def test_custom_model_parametrized_decorator():
def test_custom_inverse():
def test_custom_inverse_reset():
def test_custom_bounding_box_1d():
@pytest.mark.parametrize((u'code',), pars) DCNL def test_Sky2Pix(code):
@pytest.mark.parametrize((u'code',), pars) DCNL def test_Pix2Sky(code):
@pytest.mark.parametrize((u'code',), pars) DCNL def test_Sky2Pix_unit(code):
@pytest.mark.parametrize((u'code',), pars) DCNL def test_Pix2Sky_unit(code):
@pytest.mark.parametrize((u'code',), pars) DCNL def test_projection_default(code):
def get_records(fname):
def get_database_string(fname):
def test_Trapezoid1D():
def test_Gaussian2D():
def test_Gaussian2DCovariance():
def test_RedshiftScaleFactor():
def test_Ellipse2D():
def test_Ellipse2D_circular():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_Shift_model_levmar_fit():
def test_Shift_model_set_linear_fit():
def test_Scale_model_set_linear_fit():
def test_default_constraints():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_fit_with_fixed_and_bound_constraints():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_fit_with_bound_constraints_estimate_jacobian():
def test_parameter_properties():
def test_parameter_operators():
def test_non_broadcasting_parameters():
@pytest.mark.parametrize((u'expr', u'result'), [((lambda x, y: (x + y)), [5.0, 5.0]), ((lambda x, y: (x - y)), [(-1.0), (-1.0)]), ((lambda x, y: (x * y)), [6.0, 6.0]), ((lambda x, y: (x / y)), [(2.0 / 3.0), (2.0 / 3.0)]), ((lambda x, y: (x ** y)), [8.0, 8.0])]) DCNL def test_model_set_raises_value_error(expr, result):
@pytest.mark.parametrize((u'expr', u'result'), [((lambda x, y: (x + y)), 5.0), ((lambda x, y: (x - y)), (-1.0)), ((lambda x, y: (x * y)), 6.0), ((lambda x, y: (x / y)), (2.0 / 3.0)), ((lambda x, y: (x ** y)), 8.0)]) DCNL def test_two_model_instance_arithmetic_1d(expr, result):
@pytest.mark.parametrize((u'expr', u'result'), [((lambda x, y: (x + y)), 5.0), ((lambda x, y: (x - y)), (-1.0)), ((lambda x, y: (x * y)), 6.0), ((lambda x, y: (x / y)), (2.0 / 3.0)), ((lambda x, y: (x ** y)), 8.0)]) DCNL def test_two_model_mixed_arithmetic_1d(expr, result):
def test_simple_two_model_class_compose_1d():
def test_simple_two_model_class_compose_2d():
def test_n_submodels():
def test_expression_formatting():
def test_indexing_on_class():
def test_slicing_on_class():
def test_slicing_on_instance():
def test_indexing_on_instance():
def test_basic_compound_inverse():
@pytest.mark.parametrize(u'model', [((Shift(0) + Shift(0)) | Shift(0)), ((Shift(0) - Shift(0)) | Shift(0)), ((Shift(0) * Shift(0)) | Shift(0)), ((Shift(0) / Shift(0)) | Shift(0)), ((Shift(0) ** Shift(0)) | Shift(0)), (Gaussian1D(1, 2, 3) | Gaussian1D(4, 5, 6))]) DCNL def test_compound_unsupported_inverse(model):
def test_mapping_basic_permutations():
def test_mapping_inverse():
def test_identity_input():
def test_slicing_on_instances_2():
def test_slicing_on_instances_3():
def test_slicing_on_instance_with_parameterless_model():
def test_compound_model_with_nonstandard_broadcasting():
def test_compound_model_classify_attributes():
def test_invalid_operands():
@pytest.mark.parametrize(u'model', [(Gaussian1D(bounds={u'stddev': (0, 0.3)}, fixed={u'mean': True}) + Gaussian1D(fixed={u'mean': True})), (_ConstraintsTestA + _ConstraintsTestB)()]) DCNL def test_inherit_constraints(model):
def test_compound_custom_inverse():
@pytest.mark.parametrize(u'poly', [Chebyshev2D(1, 2), Polynomial2D(2), Legendre2D(1, 2), Chebyshev1D(5), Legendre1D(5), Polynomial1D(5)]) DCNL def test_compound_with_polynomials(poly):
@pytest.mark.skipif(str(u'sys.version_info DCSP < DCSP (2, DCSP 7, DCSP 3)')) DCNL def test_pickle_compound():
@pytest.mark.skipif(str(u'sys.version_info DCSP >= DCSP (2, DCSP 7, DCSP 3)')) DCNL def test_pickle_compound_fallback():
def test_evaluate_with_quantities():
def test_evaluate_with_quantities_and_equivalencies():
def test_parameter_quantity():
def test_parameter_set_quantity():
def test_parameter_lose_units():
def test_parameter_add_units():
def test_parameter_change_unit():
def test_parameter_set_value():
def test_parameter_quantity_property():
@pytest.mark.parametrize((u'unit', u'default'), ((u.m, 1.0), (None, (1 * u.m)))) DCNL def test_parameter_defaults(unit, default):
def test_parameter_quantity_arithmetic():
def test_parameter_quantity_comparison():
def test_traverse_postorder_duplicate_subtrees():
def test_tree_evaluate_subexpression():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_fitting_missing_data_units():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_fitting_missing_model_units():
@pytest.mark.skipif(u'not DCSP HAS_SCIPY') DCNL def test_fitting_incompatible_units():
@pytest.mark.parametrize(u'axes_order', euler_axes_order) DCNL def test_euler_angles(axes_order):
def tabular_model(dim, name=None):
def leastsquare(measured_vals, updated_model, weights, x, y=None):
def _init_log():
def _teardown_log():
def _round(a):
def _offset(a):
def overlap_slices(large_array_shape, small_array_shape, position, mode=u'partial'):
def extract_array(array_large, shape, position, mode=u'partial', fill_value=np.nan, return_position=False):
def add_array(array_large, array_small, position):
def subpixel_indices(position, subsampling):
@support_nddata DCNL def block_reduce(data, block_size, func=np.sum):
@support_nddata DCNL def block_replicate(data, block_size, conserve_sum=True):
def _arithmetic(op):
def _generate_wcs_and_update_header(hdr):
def fits_ccddata_reader(filename, hdu=0, unit=None, hdu_uncertainty=u'UNCERT', hdu_mask=u'MASK', hdu_flags=None, **kwd):
def fits_ccddata_writer(ccd_data, filename, hdu_mask=u'MASK', hdu_uncertainty=u'UNCERT', hdu_flags=None, **kwd):
@pytest.fixture DCNL def ccd_data(request):
def test_wcs_attribute(ccd_data, tmpdir):
def test_wcs_keywords_removed_from_header():
def test_wcs_keyword_removal_for_wcs_test_files():
def test_wcs_sip_handling():
def test_slices_different_dim():
def test_slices_pos_different_dim():
@pytest.mark.parametrize(u'pos', test_pos_bad) DCNL def test_slices_no_overlap(pos):
def test_slices_partial_overlap():
def test_slices_overlap_wrong_mode():
def test_extract_array_wrong_mode():
def test_extract_array_1d_even():
def test_extract_array_1d_odd():
def test_extract_array_1d():
def test_extract_Array_float():
def test_extract_array_1d_trim():
@pytest.mark.parametrize(u'mode', [u'partial', u'trim', u'strict']) DCNL def test_extract_array_easy(mode):
def test_extract_array_return_pos():
def test_add_array_odd_shape():
def test_add_array_even_shape():
@pytest.mark.parametrize((u'position', u'subpixel_index'), zip(test_positions, test_position_indices)) DCNL def test_subpixel_indices(position, subpixel_index):
def support_nddata(_func=None, accepts=NDData, repack=False, returns=None, keeps=None, **attribute_argument_mapping):
def make_function_with_signature(func, args=(), kwargs={}, varargs=None, varkwargs=None, name=None):
def _get_stdout(stderr=False):
def isatty(file):
def terminal_size(file=None):
def _color_text(text, color):
def _decode_preferred_encoding(s):
def _write_with_fallback(s, write, fileobj):
def color_print(*args, **kwargs):
def strip_ansi_codes(s):
def human_time(seconds):
def human_file_size(size):
def _is_url(string):
@contextlib.contextmanager DCNL def get_readable_fileobj(name_or_obj, encoding=None, cache=False, show_progress=True, remote_timeout=None):
def get_file_contents(*args, **kwargs):
def get_pkg_data_fileobj(data_name, package=None, encoding=None, cache=True):
def get_pkg_data_filename(data_name, package=None, show_progress=True, remote_timeout=None):
def get_pkg_data_contents(data_name, package=None, encoding=None, cache=True):
def get_pkg_data_filenames(datadir, package=None, pattern=u'*'):
def get_pkg_data_fileobjs(datadir, package=None, pattern=u'*', encoding=None):
def compute_hash(localfn):
def _find_pkg_data_path(data_name, package=None):
def _find_hash_fn(hash):
def get_free_space_in_dir(path):
def check_free_space_in_dir(path, size):
def download_file(remote_url, cache=False, show_progress=True, timeout=None):
def is_url_in_cache(url_key):
def download_files_in_parallel(urls, cache=False, show_progress=True, timeout=None):
def clear_download_cache(hashorurl=None):
def _get_download_cache_locs():
def _open_shelve(shelffn, withclosing=False):
def _acquire_download_cache_lock():
def get_cached_urls():
@pytest.mark.skipif(str(u'not DCSP six.PY2')) DCNL def test_color_print_no_default_encoding():
def test_spinner_non_unicode_console():
def test_data_name_third_party_package():
@remote_data DCNL def test_data_noastropy_fallback(monkeypatch):
@remote_data DCNL def test_invalid_location_download():
def test_invalid_location_download_noconnect():
def test_get_readable_fileobj_cleans_up_temporary_files(tmpdir, monkeypatch):
@pytest.mark.parametrize('input,output', DTYPE_TESTS) DCNL def test_dtype_info_name(input, output):
def test_make_function_with_signature_lineno():
def test_metadata_merging_conflict_exception():
def test_wraps():
def test_wraps_exclude_names():
def test_wraps_keep_orig_name():
def test_deprecated_class_with_super():
def test_deprecated_class_with_custom_metaclass():
def test_deprecated_static_and_classmethod():
@pytest.mark.skipif(u'not DCSP six.PY2') DCNL def test_sharedmethod_imfunc():
def test_sharedmethod_reuse_on_subclasses():
def test_classproperty_docstring():
def test_pkg_finder():
def test_isinstancemethod():
def func_to_time(x):
def test_timer():
@contextmanager DCNL def serialize_context_as(context):
def dtype_info_name(dtype):
def data_info_factory(names, funcs):
def _get_obj_attrs_map(obj, attrs):
def _get_data_attribute(dat, attr=None):
def isiterable(obj):
def indent(s, shift=1, width=4):
@contextlib.contextmanager DCNL def silence():
def format_exception(msg, *args, **kwargs):
def find_api_page(obj, version=None, openinbrowser=True, timeout=None):
def signal_number_to_name(signum):
def is_path_hidden(filepath):
def walk_skip_hidden(top, onerror=None, followlinks=False):
def directory(arg):
def readable_directory(arg):
def writeable_directory(arg):
def _remove_dead_thread_references():
def as_completed(fs, timeout=None):
def wait(fs, timeout=None, return_when=ALL_COMPLETED):
def _remove_dead_thread_references():
def _process_worker(call_queue, result_queue, shutdown):
def _add_call_item_to_queue(pending_work_items, work_ids, call_queue):
def _queue_manangement_worker(executor_reference, processes, pending_work_items, work_ids_queue, call_queue, result_queue, shutdown_process_event):
def possible_filename(filename):
def override__dir__(f):
def test_import():
def test_test_function():
def test_import():
def test_test_function():
def signature(obj):
def common_dtype(arrs):
def enable_merge_strategies(*merge_strategies):
def merge(left, right, merge_func=None, metadata_conflicts=u'warn', warn_str_func=_warn_str_func, error_str_func=_error_str_func):
def check_id(ID):
def fix_id(ID):
def check_token(token):
def check_mime_content_type(content_type):
def check_anyuri(uri):
@contextlib.contextmanager DCNL def _convert_to_fd_or_read_function(fd):
@contextlib.contextmanager DCNL def get_xml_iterator(source, _debug_python_based_parser=False):
def get_xml_encoding(source):
def xml_readlines(source):
def validate_schema(filename, schema_file):
def unescape_all(url):
def deprecated(since, message='', name='', alternative='', pending=False, obj_type=None):
def deprecated_attribute(name, since, message=None, alternative=None, pending=False):
def deprecated_renamed_argument(old_name, new_name, since, arg_in_kwargs=False, relax=False, pending=False):
def wraps(wrapped, assigned=functools.WRAPPER_ASSIGNMENTS, updated=functools.WRAPPER_UPDATES, exclude_args=()):
def format_doc(docstring, *args, **kwargs):
def timefunc(num_tries=1, verbose=True):
def download_file(*args, **kwargs):
def resolve_name(name, *additional_parts):
def minversion(module, version, inclusive=True, version_path=u'__version__'):
def find_current_module(depth=1, finddiff=False):
def find_mod_objs(modname, onlylocals=False):
def isinstancemethod(cls, obj):
def run_cmd(cmd):
def _next_version(version):
@contextlib.contextmanager DCNL def _silence():
def use_astropy_helpers(**kwargs):
def _python_cmd(*args):
def _install(archive_filename, install_args=()):
def _build_egg(egg, archive_filename, to_dir):
@contextlib.contextmanager DCNL def archive_context(filename):
def _do_download(version, download_base, to_dir, download_delay):
def use_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=DEFAULT_SAVE_DIR, download_delay=15):
def _conflict_bail(VC_err, version):
def _clean_check(cmd, target):
def download_file_powershell(url, target):
def has_powershell():
def download_file_insecure(url, target):
def download_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=DEFAULT_SAVE_DIR, delay=15, downloader_factory=get_best_downloader):
def _build_install_args(options):
def _parse_args():
def _download_args(options):
def main():
def add_entry():
def view_entries(search_query=None):
def search_entries():
def _instance_callable(obj):
def _patch_object(target, attribute, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs):
def _patch_multiple(target, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs):
def patch(target, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs):
def _patch_stopall():
def _get_method(name, func):
def create_autospec(spec, spec_set=False, instance=False, _parent=None, _name=None, **kwargs):
def mock_open(mock=None, read_data=''):
def ClosureTable(model_class, foreign_key=None, referencing_class=None, referencing_key=None):
def bm25(raw_match_info, *args):
def dump_csv(query, file_or_name, include_header=True, close_file=True, append=True, csv_writer=None):
def case(predicate, expression_tuples, default=None):
def model_to_dict(model, recurse=True, backrefs=False, only=None, exclude=None, seen=None, extra_attrs=None, fields_from_query=None, max_depth=None):
def returns_clone(func):
def not_allowed(func):
def create_model_tables(models, **create_table_kwargs):
def drop_model_tables(models, **drop_table_kwargs):
def set_resources_dirty(context):
def mark_resources_dirty(f):
def setup_logging():
def load_paste_app(app_name):
def set_config_defaults():
def set_cors_middleware_defaults():
def throttler(threshold=DEFAULT_THROTTLER_VALUE):
@removals.remove(message='Use DCSP ensure_tree(path, DCSP 0o755) DCSP from DCSP oslo_utils.fileutils') DCNL def ensure_dir(dir_path):
def get_other_dvr_serviced_device_owners():
def get_dvr_allowed_address_pair_device_owners():
def is_dvr_serviced(device_owner):
def ip_to_cidr(ip, prefix=None):
def fixed_ip_cidrs(fixed_ips):
def is_cidr_host(cidr):
def load_class_by_alias_or_classname(namespace, name):
def _gen_rules_port_min(port_min, top_bit):
def _gen_rules_port_max(port_max, top_bit):
def port_rule_masking(port_min, port_max):
def create_object_with_dependency(creator, dep_getter, dep_creator, dep_id_attr, dep_deleter):
def transaction_guard(f):
def wait_until_true(predicate, timeout=60, sleep=1, exception=None):
def import_modules_recursively(topdir):
def get_rand_name(max_length=None, prefix='test'):
def get_related_rand_names(prefixes, max_length=None):
def make_weak_ref(f):
def resolve_ref(ref):
def get_cache(conf):
def is_enabled_and_bind_by_default():
def is_auto_address_subnet(subnet):
def is_eui64_address(ip_address):
def is_ipv6_pd_enabled(subnet):
def _moved_global(old_name, new_module=None, new_name=None):
def setup(name, host='0.0.0.0'):
def get_topic_name(prefix, table, operation, host=None):
def resource_type_versioned_topic(resource_type, version=None):
def _call_with_retry(max_attempts):
def retry(func, max_attempts):
def provide(callback, resource_type):
def unprovide(callback, resource_type):
def clear():
def pull(resource_type, resource_id, **kwargs):
def get_resource_versions(resource_type):
def update_versions(consumer, resource_versions):
def report():
def push(context, resource_type, resource_list, event_type):
def register_custom_supported_check(alias, f, plugin_agnostic=False):
def plugin_aware_extension_middleware_factory(global_config, **local_config):
def build_plural_mappings(special_mappings, resource_map):
def build_resource_info(plural_mappings, resource_map, which_service, action_map=None, register_quota=False, translate_name=False, allow_bulk=False):
def Resource(controller, faults=None, deserializers=None, serializers=None, action_status=None):
def get_collection_info(collection):
def ensure_if_match_supported():
def check_request_for_revision_constraint(request):
def get_filters_from_dict(data, attr_info, skips=None):
def prepare_url(orig_url):
def get_limit_and_marker(request):
def _get_limit_param(request):
def list_args(request, arg):
def get_sorts(request, attr_info):
def get_exception_data(e):
def translate(translatable, locale):
@db_api.retry_if_session_inactive() DCNL def get_quota_usage_by_resource_and_tenant(context, resource, tenant_id):
@db_api.retry_if_session_inactive() DCNL def set_quota_usage(context, resource, tenant_id, in_use=None, delta=False):
@db_api.retry_if_session_inactive() DCNL @db_api.context_manager.writer DCNL def set_quota_usage_dirty(context, resource, tenant_id, dirty=True):
@db_api.retry_if_session_inactive() DCNL @db_api.context_manager.writer DCNL def set_resources_quota_usage_dirty(context, resources, tenant_id, dirty=True):
@db_api.retry_if_session_inactive() DCNL @db_api.context_manager.writer DCNL def set_all_quota_usage_dirty(context, resource, dirty=True):
@db_api.retry_if_session_inactive() DCNL def get_reservations_for_resources(context, tenant_id, resources, expired=False):
def is_distributed_router(router):
def register_funcs(resource, funcs):
def get_funcs(resource):
def extends(resources):
def has_resource_extenders(klass):
def skip_if_offline(func):
def raise_if_offline(func):
@raise_if_offline DCNL def schema_has_table(table_name):
@raise_if_offline DCNL def schema_has_column(table_name, column_name):
@raise_if_offline DCNL def alter_column_if_exists(table_name, column_name, **kwargs):
def alter_enum_add_value(table, column, enum, nullable):
def alter_enum(table, column, enum_type, nullable, do_drop=True, do_rename=True, do_create=True):
@_ec_dispatcher.dispatch_for(ops.MigrationScript) DCNL def _migration_script_ops(context, directive, phase):
def _find_milestone_revisions(config, milestone, branch=None):
def _get_branch_head(branch):
def validate_head_files(config):
def update_head_files(config):
def _get_project_base(config):
def _get_root_versions_dir(config):
def _get_head_file_path(config):
def _get_heads_file_path(config):
def _get_contract_head_file_path(config):
def _get_expand_head_file_path(config):
def _set_version_locations(config):
def _get_installed_entrypoint(subproject):
def _get_subproject_script_location(subproject):
def _get_subproject_base(subproject):
def get_alembic_configs():
def expand_drop_exceptions():
def contract_creation_exceptions():
def contract_creation_exceptions():
def upgrade():
def contract_creation_exceptions():
def contract_creation_exceptions():
def contract_creation_exceptions():
def get_inspector():
def get_tables():
def get_columns(table):
def get_data():
def contract_creation_exceptions():
def expand_drop_exceptions():
def run_migrations_offline():
def run_migrations_online():
def register_hook(model, name, query_hook, filter_hook, result_filters=None):
def get_hooks(model):
def get_attr_info():
def safe_creation(context, create_fn, delete_fn, create_bindings, transaction=True):
def resource_fields(resource, fields):
def filter_non_model_columns(data, model):
def get_marker_obj(plugin, context, resource, limit, marker):
def is_ha_router(router):
def add_model_for_resource(resource, model):
@db_api.retry_if_session_inactive() DCNL def add_provisioning_component(context, object_id, object_type, entity):
@db_api.retry_if_session_inactive() DCNL def remove_provisioning_component(context, object_id, object_type, entity, standard_attr_id=None):
@db_api.retry_if_session_inactive() DCNL def provisioning_complete(context, object_id, object_type, entity):
@db_api.retry_if_session_inactive() DCNL def is_object_blocked(context, object_id, object_type):
def apply_tag_filters(model, query, filters):
def _tag_retriables_as_unretriable(f):
def _copy_if_lds(item):
def retry_db_errors(f):
def retry_if_session_inactive(context_var_name='context'):
def _is_nested_instance(e, etypes):
@removals.remove(version='Ocata', removal_version='Pike', message='Usage DCSP of DCSP legacy DCSP facade DCSP is DCSP deprecated. DCSP Use DCSP get_reader_session DCSP or DCSP get_writer_session DCSP instead.') DCNL def get_session(autocommit=True, expire_on_commit=False, use_slave=False):
def get_reader_session():
def get_writer_session():
@contextlib.contextmanager DCNL def autonested_transaction(sess):
def sqla_listen(*args):
def _make_segment_dict(obj):
def get_dynamic_segment(context, network_id, physical_network=None, segmentation_id=None):
def delete_network_segment(context, segment_id):
def init(conf=cfg.CONF, policy_file=None):
def refresh(policy_file=None):
def get_resource_and_action(action, pluralized=None):
def set_rules(policies, overwrite=True):
def _is_attribute_explicitly_set(attribute_name, resource, target, action):
def _should_validate_sub_attributes(attribute, sub_attr):
def _build_subattr_match_rule(attr_name, attr, action, target):
def _process_rules_list(rules, match_rule):
def _build_match_rule(action, target, pluralized):
def _prepare_check(context, action, target, pluralized):
def check(context, action, target, plugin=None, might_not_exist=False, pluralized=None):
def enforce(context, action, target, plugin=None, pluralized=None):
def safe_get_config_value(group, name):
def _connect_socket(host, port):
def create_resource(prefix, creation_func, *args, **kwargs):
def no_skip_on_missing_deps(wrapped):
def find_file(filename, path):
def find_sample_file(filename):
def skip_if_ovs_older_than(ovs_version):
def get_test_net_address_fixture(test_net_number):
def increment_ip_cidr(ip_cidr, offset=1):
def set_namespace_gateway(port_dev, gateway_ip):
def assert_arping(src_namespace, dst_ip, source=None, timeout=1, count=1):
def get_free_namespace_port(protocol, namespace=None, start=1024, end=None):
def create_patch_ports(source, destination):
def create_vlan_interface(namespace, port_name, mac_address, ip_address, vlan_tag):
def _create_record_with_sa(engine, resource_type, attributes):
def _count_resource(context, plugin, resource, tenant_id):
def module_load_tests(loader, found_tests, pattern):
@classmethod DCNL def existing_dhcp_networks(cls, conf):
def trunk_bridge_does_not_exist(trunk_id):
def make_ip_network(port, network):
def setup_mock_calls(mocked_call, expected_calls_and_values):
def verify_mock_calls(mocked_call, expected_calls_and_values, any_order=False):
def fail(msg=None):
@removals.remove(message='Use DCSP get_random_mac DCSP from DCSP neutron_lib.utils.net', version='Pike', removal_version='Queens') DCNL def get_random_mac():
def is_bsd():
def _exception_handler(debugger, exc_info):
def get_ignored_traceback(tb):
def pipeline_factory(loader, global_conf, **local_conf):
def validate_post_plugin_load():
def validate_pre_plugin_load():
def init():
def _get_scope_name(scope):
@privileged.default.entrypoint DCNL def get_routing_table(ip_version, namespace=None):
@privileged.default.entrypoint DCNL def add_neigh_entry(ip_version, ip_address, mac_address, device, namespace, **kwargs):
@privileged.default.entrypoint DCNL def delete_neigh_entry(ip_version, ip_address, mac_address, device, namespace, **kwargs):
@privileged.default.entrypoint DCNL def dump_neigh_entries(ip_version, device, namespace, **kwargs):
def _parse_entry(entry, ipversion, zone):
@privileged.default.entrypoint DCNL def list_entries(zone):
@privileged.default.entrypoint DCNL def delete_entries(entries):
def _ovsdb_result_pending(result):
def _ovsdb_retry(fn):
def load_interface_driver(conf):
def unwatch_log():
def drop_privileges(user=None, group=None):
def addl_env_args(addl_env):
def create_process(cmd, run_as_root=False, addl_env=None):
def find_child_pids(pid, recursive=False):
def find_parent_pid(pid):
def find_fork_top_parent(pid):
def kill_process(pid, signal, run_as_root=False):
def get_conf_file_name(cfg_root, uuid, cfg_file, ensure_conf_dir=False):
def get_root_helper_child_pid(pid, expected_cmd, run_as_root=False):
def remove_abs_path(cmd):
def process_is_running(pid):
def pid_invoked_with_cmdline(pid, expected_cmd):
def is_effective_user(user_id_or_name):
def is_effective_group(group_id_or_name):
def get_free_range(parent_range, excluded_ranges, size=PRIMARY_VIP_RANGE_SIZE):
def remove_interface_suffix(interface):
def vlan_in_use(segmentation_id, namespace=None):
def vxlan_in_use(segmentation_id, namespace=None):
def device_exists(device_name, namespace=None):
def device_exists_with_ips_and_mac(device_name, ip_cidrs, mac, namespace=None):
def get_device_mac(device_name, namespace=None):
def get_routing_table(ip_version, namespace=None):
def add_neigh_entry(ip_address, mac_address, device, namespace=None, **kwargs):
def delete_neigh_entry(ip_address, mac_address, device, namespace=None, **kwargs):
def dump_neigh_entries(ip_version, device=None, namespace=None, **kwargs):
def send_ip_addr_adv_notif(ns_name, iface_name, address, count=3, log_exception=True):
def sysctl(cmd, namespace=None, log_fail_as_error=True):
def add_namespace_to_cmd(cmd, namespace=None):
def get_ip_nonlocal_bind(namespace=None):
def set_ip_nonlocal_bind(value, namespace=None, log_fail_as_error=True):
def set_ip_nonlocal_bind_for_namespace(namespace):
def populate_flow_common(direction, flow_template, port):
def create_flows_for_ip_address(ip_address, direction, ethertype, vlan_tag, conj_ids):
def create_conj_flows(port, conj_id, direction, ethertype):
def _replace_register(flow_params, register_number, register_value):
def create_reg_numbers(flow_params):
def get_tag_from_other_config(bridge, port_name):
def get_binary_name():
def _generate_path_between_rules(old_rules, new_rules):
def build_ns_name(prefix, identifier):
def get_prefix_from_ns_name(ns_name):
def get_id_from_ns_name(ns_name):
def from_config(context, iface_name=None):
def val_to_py(val):
def py_to_val(pyval):
def create_consumers(endpoints, prefix, topic_details, start_listening=True):
def create_cache_for_l2_agent():
def _sync_lock(f):
def _wait_if_syncing(f):
def _net_lock(network_id):
def avoid_blocking_call(f, *args, **kwargs):
def _detach_db_obj(func):
def update_objects(context, model, values, **kwargs):
def delete_objects(context, model, **kwargs):
def check_bandwidth_rule_conflict(policy, rule_data):
def _raise_if_updates_provider_attributes(attrs):
def _validate_flavor_service_type(validate_type, valid_values=None):
def check_duplicate_segments(segments, is_partial_func=None):
def get_deployment_physnet_mtu():
def verify_tunnel_range(tunnel_range, tunnel_type):
def raise_invalid_tag(vlan_str, vlan_range):
def verify_vlan_range(vlan_range):
def parse_network_vlan_range(network_vlan_range):
def parse_network_vlan_ranges(network_vlan_ranges_cfg_entries):
def get_interface_name(name, prefix='', max_len=n_const.DEVICE_NAME_MAX_LEN):
@removals.remove(message='Use DCSP get_port DCSP from DCSP inside DCSP of DCSP a DCSP transaction. DCSP The DCSP revision DCSP plugin DCSP provides DCSP protection DCSP against DCSP concurrent DCSP updates DCSP to DCSP the DCSP same DCSP resource DCSP with DCSP compare DCSP and DCSP swap DCSP updates DCSP of DCSP the DCSP revision_number.', removal_version='Queens') DCNL def get_locked_port_and_binding(context, port_id):
def get_port(context, port_id):
def get_ports_and_sgs(context, port_ids):
@db_api.context_manager.reader DCNL def partial_port_ids_to_full_ids(context, partial_ids):
@db_api.context_manager.reader DCNL def get_port_db_objects(context, port_ids):
def _prevent_segment_delete_with_port_bound(resource, event, trigger, context, segment, for_net_delete=False):
def get_agent_by_host(session, agent_host):
def chunks(iterable, chunk_size):
def get_tap_device_name(interface_id):
def register():
def notify_init_event(agent_type, agent):
def register(callback, agent_type):
def parse_exclude_devices(exclude_list):
def get_vlan_device_name(src_dev, vlan):
def register():
def validate_local_ip(local_ip):
def validate_tunnel_config(tunnel_types, local_ip):
def flake8ext(f):
@flake8ext DCNL def check_assert_called_once_with(logical_line, filename):
@flake8ext DCNL def check_asserttruefalse(logical_line, filename):
@flake8ext DCNL def check_assertempty(logical_line, filename):
@flake8ext DCNL def check_assertisinstance(logical_line, filename):
@flake8ext DCNL def check_assertequal_for_httpcode(logical_line, filename):
@flake8ext DCNL def check_oslo_i18n_wrapper(logical_line, filename, noqa):
@flake8ext DCNL def check_builtins_gettext(logical_line, tokens, filename, lines, noqa):
@core.flake8ext DCNL @core.off_by_default DCNL def check_unittest_imports(logical_line):
@flake8ext DCNL def check_no_imports_from_tests(logical_line, filename, noqa):
@flake8ext DCNL def check_python3_no_filter(logical_line):
@flake8ext DCNL def check_no_sqlalchemy_event_import(logical_line, filename, noqa):
def setup_conf():
def kill_dhcp(conf, namespace):
def eligible_for_deletion(conf, namespace, force=False):
def find_listen_pids_namespace(namespace):
def wait_until_no_listen_pids_namespace(namespace, timeout=SIGTERM_WAITTIME):
def _kill_listen_processes(namespace, force=False):
def kill_listen_processes(namespace):
def destroy_namespace(conf, namespace, force=False):
def main():
def setup_conf():
def main():
def main():
def main():
def ofctl_arg_supported(cmd, **kwargs):
def keepalived_ipv6_supported():
def setup_conf():
def get_bridge_deletable_ports(br):
def collect_neutron_ports(bridges):
def delete_neutron_ports(ports):
def main():
def enable_tests_from_config():
def encode_body(body):
def _custom_getter(resource, resource_id):
def _composed(*decorators):
def _protect_original_resources(f):
def _pecan_generator_wrapper(func, *args, **kwargs):
def _set_del_code(f):
def check_subnet_ip(cidr, ip_address):
def check_gateway_invalid_in_subnet(cidr, gateway):
def generate_pools(cidr, gateway_ip):
def load_metering_driver(plugin, conf):
def load_drivers(service_type, plugin):
def validate_log_type_for_port(log_type, port):
def validate_request(context, log_data):
def get_hosts_mapped_with_segments(context):
def get_segments_with_phys_nets(context, phys_nets):
def map_segment_to_hosts(context, segment_id, hosts):
def get_provider_driver_class(driver, namespace=SERVICE_PROVIDERS):
def parse_service_provider_opt(service_module='neutron'):
@db_api.retry_if_session_inactive() DCNL def _ensure_external_network_default_value_callback(resource, event, trigger, context, request, network, **kwargs):
def ignore_notfound(func, *args, **kwargs):
def register():
def register():
def register():
def trunk_can_be_managed(context, trunk):
def enforce_port_deletion_rules(resource, event, trigger, **kwargs):
def trunk_by_port_provider(resource, port_id, context, **kwargs):
def get_agent_types_by_host(context, host):
def is_driver_compatible(context, driver, interface, host_agent_types):
def register():
def init_handler(resource, event, trigger, agent=None):
def register():
def vif_details_bridge_name_handler(resource, event, set_br_name, **kwargs):
def is_trunk_service_port(port_name):
def bridge_has_port(bridge, is_port_predicate):
def bridge_has_instance_port(bridge):
def bridge_has_service_port(bridge):
def get_br_int_port_name(prefix, port_id):
def get_br_trunk_port_name(prefix, port_id):
def init_handler(resource, event, trigger, agent=None):
def get_validator(segmentation_type):
def add_validator(segmentation_type, validator_function):
def get(url, allowed_schemes=('http', 'https')):
def _to_byte_string(value, num_bits):
def get_id(source_uuid):
def generate_id():
def _module_name(*components):
def create_subpackage(path, parent_package_name, subpackage_name='plugins'):
def _import_module(importer, module_name, package):
def load_modules(package, ignore_error=False):
def setup(url=None, optional=False):
def cleanup():
def get_rpc_server(target, endpoint):
def get_rpc_client(**kwargs):
def get_notifier(publisher_id):
def validate_template_limit(contain_str):
def parse(tmpl_str, tmpl_url=None):
def convert_json_to_yaml(json_str):
def parse_isoduration(duration):
def retry_backoff_delay(attempt, scale_factor=1.0, jitter_max=0.0):
def isotime(at):
def filter_factory(global_conf, **local_conf):
def _get_deployment_flavor():
def _get_deployment_config_file():
def load_paste_app(app_name=None):
def set_config_defaults():
def repr_wrapper(klass):
def get_size(group, include_failed=False):
def get_members(group, include_failed=False):
def get_member_refids(group, exclude=None):
def get_member_names(group):
def get_member_definitions(group, include_failed=False):
def is_prefix_subset(orig_prefixes, new_prefixes):
def get_plug_point_class_instances():
def do_pre_ops(cnxt, stack, current_stack=None, action=None):
def do_post_ops(cnxt, stack, current_stack=None, action=None, is_stack_failure=False):
def merge_list(old, new):
def merge_map(old, new, deep_merge=False):
def merge_environments(environment_files, files, params, param_schemata):
def extract_bool(name, value):
def get_bind_addr(conf, default_port=None):
def get_socket(conf, default_port):
def translate_exception(exc, locale):
def setup_paste_factories(conf):
def teardown_paste_factories():
def paste_deploy_app(paste_config_file, app_name, conf):
def parse(env_str):
def default_for_missing(env):
def ContextMiddleware_filter_factory(global_conf, **local_conf):
def encrypted_dict(data, encryption_key=None):
def decrypted_dict(data, encryption_key=None):
def heat_decrypt(value, encryption_key=None):
def register_cache_configurations(conf):
def create_resource(options):
def create_resource(options):
def create_resource(options):
def policy_enforce(handler):
def identified_stack(handler):
def make_url(req, identity):
def make_link(req, identity, relationship='self'):
def get_allowed_params(params, whitelist):
def get_collection_links(request, items):
def _get_next_link(request, marker):
def create_resource(options):
def create_resource(options):
def create_resource(options):
def create_resource(options):
def create_resource(options):
def create_resource(options):
def create_resource(options):
def map_remote_error(ex):
def format_response(action, response):
def extract_param_pairs(params, prefix='', keyname='', valuename=''):
def extract_param_list(params, prefix=''):
def get_param_value(params, key):
def reformat_dict_keys(keymap=None, inputdict=None):
def EC2Token_filter_factory(global_conf, **local_conf):
def clone_table(name, parent, meta, newcols=None, ignorecols=None, swapcols=None, ignorecons=None):
def exact_filter(query, model, filters):
def delete_softly(context, obj):
def soft_delete_aware_query(context, *args, **kwargs):
def resource_data_get_all(context, resource_id, data=None):
def resource_data_get(context, resource_id, key):
def resource_data_get_by_key(context, resource_id, key):
def resource_data_set(context, resource_id, key, value, redact=False):
def _get_sort_keys(sort_keys, mapping):
def _purge_stacks(stack_infos, engine, meta):
def db_sync(engine, version=None):
def db_version(engine):
def db_encrypt_parameters_and_properties(ctxt, encryption_key, batch_size=50, verbose=False):
def db_decrypt_parameters_and_properties(ctxt, encryption_key, batch_size=50, verbose=False):
def db_properties_data_migrate(ctxt, batch_size=50):
def to_remote_error(error):
def recursive_sort(obj):
def asynchronous(function):
def stack_context(stack_name, create_res=True, convergence=False):
def calculate_new_capacity(current, adjustment, adjustment_type, min_adjustment_step, minimum, maximum):
def member_definitions(old_resources, new_definition, num_resources, num_new, get_new_id, customise=_identity):
def make_template(resource_definitions, version=('heat_template_version', '2015-04-30'), child_env=None):
def reload_loadbalancers(group, load_balancers, exclude=None):
def needs_update(targ_capacity, curr_capacity, num_up_to_date):
def next_batch(targ_capacity, curr_capacity, num_up_to_date, batch_size, min_in_service):
def no_log_warn(logical_line):
def do_db_version():
def do_db_sync():
def purge_deleted():
def do_crypt_parameters_and_properties():
def check_stack_complete(cnxt, stack, current_traversal, sender_id, deps, is_update):
def propagate_check_resource(cnxt, rpc_client, next_res_id, current_traversal, predecessors, sender_key, sender_data, is_update, adopt_stack_data):
def check_resource_update(rsrc, template_id, resource_data, engine_id, stack, msg_queue):
def check_resource_cleanup(rsrc, template_id, resource_data, engine_id, timeout, msg_queue):
def schemata(schema_dicts):
def task_description(task):
def wrappertask(task):
def update_resource_data(stack_definition, resource_name, resource_data):
def add_resource(stack_definition, resource_definition):
def remove_resource(stack_definition, resource_name):
def _hash_data(data):
def Ref(stack, fn_name, args):
def send(stack, adjustment=None, adjustment_type=None, capacity=None, groupname=None, message='error', suffix=None):
def send(stack):
def get_child_environment(parent_env, child_params, item_to_remove=None, child_resource_name=None):
def extract_args(params):
def _parse_object_status(status):
def translate_filters(params):
def format_stack_outputs(outputs, resolve_value=False):
def format_stack(stack, preview=False, resolve_outputs=True):
def format_stack_db_object(stack):
def format_stack_resource(resource, detail=True, with_props=False, with_attr=None):
def format_validate_parameter(param):
def resource_mapping():
def create(context, entity_id, traversal_id, is_update, stack_id):
def get(context, entity_id, traversal_id, is_update):
def delete_all(context, stack_id, traversal_id):
def load_resources_data(data):
def dependencies(snippet, path=''):
def dep_attrs(snippet, resource_name):
def all_dep_attrs(snippet):
def schemata(schema):
def select_from_attribute(attribute_value, path):
def check_io_schema_list(io_configs):
def call_until_true(duration, sleep_for, func, *args, **kwargs):
def load_tests(loader, tests, pattern):
def getid(obj):
def env(*args, **kwargs):
def get_service_type(f):
def unauthenticated(func):
def isunauthenticated(func):
def arg(*args, **kwargs):
def add_arg(func, *args, **kwargs):
def service_type(stype):
def add_resource_manager_extra_kwargs_hook(f, hook):
def get_resource_manager_extra_kwargs(f, args, allow_conflicts=False):
def pretty_choice_dict(d):
def _flatten(data, prefix=None):
def flatten_dict(data):
def find_resource(manager, name_or_id, wrap_exception=True, **find_args):
def _format_field_name(attr):
def make_field_formatter(attr, filters=None):
def safe_issubclass(*args):
def do_action_on_many(action, resources, success_msg, error_msg):
def is_integer_like(val):
@contextlib.contextmanager DCNL def record_time(times, enabled, *args):
def prepare_query_string(params):
def _boot(cs, args):
@utils.arg('--flavor', default=None, metavar='<flavor>', help=_("Name DCSP or DCSP ID DCSP of DCSP flavor DCSP (see DCSP 'nova DCSP flavor-list').")) DCNL @utils.arg('--image', default=None, metavar='<image>', help=_("Name DCSP or DCSP ID DCSP of DCSP image DCSP (see DCSP 'glance DCSP image-list'). DCSP ")) DCNL @utils.arg('--image-with', default=[], type=_key_value_pairing, action='append', metavar='<key=value>', help=_("Image DCSP metadata DCSP property DCSP (see DCSP 'glance DCSP image-show'). DCSP ")) DCNL @utils.arg('--boot-volume', default=None, metavar='<volume_id>', help=_('Volume DCSP ID DCSP to DCSP boot DCSP from.')) DCNL @utils.arg('--snapshot', default=None, metavar='<snapshot_id>', help=_('Snapshot DCSP ID DCSP to DCSP boot DCSP from DCSP (will DCSP create DCSP a DCSP volume).')) DCNL @utils.arg('--min-count', default=None, type=int, metavar='<number>', help=_('Boot DCSP at DCSP least DCSP <number> DCSP servers DCSP (limited DCSP by DCSP quota).')) DCNL @utils.arg('--max-count', default=None, type=int, metavar='<number>', help=_('Boot DCSP up DCSP to DCSP <number> DCSP servers DCSP (limited DCSP by DCSP quota).')) DCNL @utils.arg('--meta', metavar='<key=value>', action='append', default=[], help=_('Record DCSP arbitrary DCSP key/value DCSP metadata DCSP to DCSP /meta_data.json DCSP on DCSP the DCSP metadata DCSP server. DCSP Can DCSP be DCSP specified DCSP multiple DCSP times.')) DCNL @utils.arg('--file', metavar='<dst-path=src-path>', action='append', dest='files', default=[], help=_('Store DCSP arbitrary DCSP files DCSP from DCSP <src-path> DCSP locally DCSP to DCSP <dst-path> DCSP on DCSP the DCSP new DCSP server. DCSP Limited DCSP by DCSP the DCSP injected_files DCSP quota DCSP value.')) DCNL @utils.arg('--key-name', default=os.environ.get('NOVACLIENT_DEFAULT_KEY_NAME'), metavar='<key-name>', help=_('Key DCSP name DCSP of DCSP keypair DCSP that DCSP should DCSP be DCSP created DCSP earlier DCSP with DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP the DCSP command DCSP keypair-add.')) DCNL @utils.arg('name', metavar='<name>', help=_('Name DCSP for DCSP the DCSP new DCSP server.')) DCNL @utils.arg('--user-data', default=None, metavar='<user-data>', help=_('user DCSP data DCSP file DCSP to DCSP pass DCSP to DCSP be DCSP exposed DCSP by DCSP the DCSP metadata DCSP server.')) DCNL @utils.arg('--availability-zone', default=None, metavar='<availability-zone>', help=_('The DCSP availability DCSP zone DCSP for DCSP server DCSP placement.')) DCNL @utils.arg('--security-groups', default=None, metavar='<security-groups>', help=_('Comma DCSP separated DCSP list DCSP of DCSP security DCSP group DCSP names.')) DCNL @utils.arg('--block-device-mapping', metavar='<dev-name=mapping>', action='append', default=[], help=_('Block DCSP device DCSP mapping DCSP in DCSP the DCSP format DCSP <dev-name>=<id>:<type>:<size(GB)>:<delete-on-terminate>.')) DCNL @utils.arg('--block-device', metavar='key1=value1[,key2=value2...]', action='append', default=[], start_version='2.0', end_version='2.31', help=_("Block DCSP device DCSP mapping DCSP with DCSP the DCSP keys: DCSP id=UUID DCSP (image_id, DCSP snapshot_id DCSP or DCSP volume_id DCSP only DCSP if DCSP using DCSP source DCSP image, DCSP snapshot DCSP or DCSP volume) DCSP source=source DCSP type DCSP (image, DCSP snapshot, DCSP volume DCSP or DCSP blank), DCSP dest=destination DCSP type DCSP of DCSP the DCSP block DCSP device DCSP (volume DCSP or DCSP local), DCSP bus=device's DCSP bus DCSP (e.g. DCSP uml, DCSP lxc, DCSP virtio, DCSP ...; DCSP if DCSP omitted, DCSP hypervisor DCSP driver DCSP chooses DCSP a DCSP suitable DCSP default, DCSP honoured DCSP only DCSP if DCSP device DCSP type DCSP is DCSP supplied) DCSP type=device DCSP type DCSP (e.g. DCSP disk, DCSP cdrom, DCSP ...; DCSP defaults DCSP to DCSP 'disk') DCSP device=name DCSP of DCSP the DCSP device DCSP (e.g. DCSP vda, DCSP xda, DCSP ...; DCSP if DCSP omitted, DCSP hypervisor DCSP driver DCSP chooses DCSP suitable DCSP device DCSP depending DCSP on DCSP selected DCSP bus; DCSP note DCSP the DCSP libvirt DCSP driver DCSP always DCSP uses DCSP default DCSP device DCSP names), DCSP size=size DCSP of DCSP the DCSP block DCSP device DCSP in DCSP MB(for DCSP swap) DCSP and DCSP in DCSP GB(for DCSP other DCSP formats) DCSP (if DCSP omitted, DCSP hypervisor DCSP driver DCSP calculates DCSP size), DCSP format=device DCSP will DCSP be DCSP formatted DCSP (e.g. DCSP swap, DCSP ntfs, DCSP ...; DCSP optional), DCSP bootindex=integer DCSP used DCSP for DCSP ordering DCSP the DCSP boot DCSP disks DCSP (for DCSP image DCSP backed DCSP instances DCSP it DCSP is DCSP equal DCSP to DCSP 0, DCSP for DCSP others DCSP need DCSP to DCSP be DCSP specified) DCSP and DCSP shutdown=shutdown DCSP behaviour DCSP (either DCSP preserve DCSP or DCSP remove, DCSP for DCSP local DCSP destination DCSP set DCSP to DCSP remove).")) DCNL @utils.arg('--block-device', metavar='key1=value1[,key2=value2...]', action='append', default=[], start_version='2.32', end_version='2.32', help=_("Block DCSP device DCSP mapping DCSP with DCSP the DCSP keys: DCSP id=UUID DCSP (image_id, DCSP snapshot_id DCSP or DCSP volume_id DCSP only DCSP if DCSP using DCSP source DCSP image, DCSP snapshot DCSP or DCSP volume) DCSP source=source DCSP type DCSP (image, DCSP snapshot, DCSP volume DCSP or DCSP blank), DCSP dest=destination DCSP type DCSP of DCSP the DCSP block DCSP device DCSP (volume DCSP or DCSP local), DCSP bus=device's DCSP bus DCSP (e.g. DCSP uml, DCSP lxc, DCSP virtio, DCSP ...; DCSP if DCSP omitted, DCSP hypervisor DCSP driver DCSP chooses DCSP a DCSP suitable DCSP default, DCSP honoured DCSP only DCSP if DCSP device DCSP type DCSP is DCSP supplied) DCSP type=device DCSP type DCSP (e.g. DCSP disk, DCSP cdrom, DCSP ...; DCSP defaults DCSP to DCSP 'disk') DCSP device=name DCSP of DCSP the DCSP device DCSP (e.g. DCSP vda, DCSP xda, DCSP ...; DCSP tag=device DCSP metadata DCSP tag DCSP (optional) DCSP if DCSP omitted, DCSP hypervisor DCSP driver DCSP chooses DCSP suitable DCSP device DCSP depending DCSP on DCSP selected DCSP bus; DCSP note DCSP the DCSP libvirt DCSP driver DCSP always DCSP uses DCSP default DCSP device DCSP names), DCSP size=size DCSP of DCSP the DCSP block DCSP device DCSP in DCSP MB(for DCSP swap) DCSP and DCSP in DCSP GB(for DCSP other DCSP formats) DCSP (if DCSP omitted, DCSP hypervisor DCSP driver DCSP calculates DCSP size), DCSP format=device DCSP will DCSP be DCSP formatted DCSP (e.g. DCSP swap, DCSP ntfs, DCSP ...; DCSP optional), DCSP bootindex=integer DCSP used DCSP for DCSP ordering DCSP the DCSP boot DCSP disks DCSP (for DCSP image DCSP backed DCSP instances DCSP it DCSP is DCSP equal DCSP to DCSP 0, DCSP for DCSP others DCSP need DCSP to DCSP be DCSP specified) DCSP and DCSP shutdown=shutdown DCSP behaviour DCSP (either DCSP preserve DCSP or DCSP remove, DCSP for DCSP local DCSP destination DCSP set DCSP to DCSP remove).")) DCNL @utils.arg('--block-device', metavar='key1=value1[,key2=value2...]', action='append', default=[], start_version='2.33', end_version='2.41', help=_("Block DCSP device DCSP mapping DCSP with DCSP the DCSP keys: DCSP id=UUID DCSP (image_id, DCSP snapshot_id DCSP or DCSP volume_id DCSP only DCSP if DCSP using DCSP source DCSP image, DCSP snapshot DCSP or DCSP volume) DCSP source=source DCSP type DCSP (image, DCSP snapshot, DCSP volume DCSP or DCSP blank), DCSP dest=destination DCSP type DCSP of DCSP the DCSP block DCSP device DCSP (volume DCSP or DCSP local), DCSP bus=device's DCSP bus DCSP (e.g. DCSP uml, DCSP lxc, DCSP virtio, DCSP ...; DCSP if DCSP omitted, DCSP hypervisor DCSP driver DCSP chooses DCSP a DCSP suitable DCSP default, DCSP honoured DCSP only DCSP if DCSP device DCSP type DCSP is DCSP supplied) DCSP type=device DCSP type DCSP (e.g. DCSP disk, DCSP cdrom, DCSP ...; DCSP defaults DCSP to DCSP 'disk') DCSP device=name DCSP of DCSP the DCSP device DCSP (e.g. DCSP vda, DCSP xda, DCSP ...; DCSP if DCSP omitted, DCSP hypervisor DCSP driver DCSP chooses DCSP suitable DCSP device DCSP depending DCSP on DCSP selected DCSP bus; DCSP note DCSP the DCSP libvirt DCSP driver DCSP always DCSP uses DCSP default DCSP device DCSP names), DCSP size=size DCSP of DCSP the DCSP block DCSP device DCSP in DCSP MB(for DCSP swap) DCSP and DCSP in DCSP GB(for DCSP other DCSP formats) DCSP (if DCSP omitted, DCSP hypervisor DCSP driver DCSP calculates DCSP size), DCSP format=device DCSP will DCSP be DCSP formatted DCSP (e.g. DCSP swap, DCSP ntfs, DCSP ...; DCSP optional), DCSP bootindex=integer DCSP used DCSP for DCSP ordering DCSP the DCSP boot DCSP disks DCSP (for DCSP image DCSP backed DCSP instances DCSP it DCSP is DCSP equal DCSP to DCSP 0, DCSP for DCSP others DCSP need DCSP to DCSP be DCSP specified) DCSP and DCSP shutdown=shutdown DCSP behaviour DCSP (either DCSP preserve DCSP or DCSP remove, DCSP for DCSP local DCSP destination DCSP set DCSP to DCSP remove).")) DCNL @utils.arg('--block-device', metavar='key1=value1[,key2=value2...]', action='append', default=[], start_version='2.42', help=_("Block DCSP device DCSP mapping DCSP with DCSP the DCSP keys: DCSP id=UUID DCSP (image_id, DCSP snapshot_id DCSP or DCSP volume_id DCSP only DCSP if DCSP using DCSP source DCSP image, DCSP snapshot DCSP or DCSP volume) DCSP source=source DCSP type DCSP (image, DCSP snapshot, DCSP volume DCSP or DCSP blank), DCSP dest=destination DCSP type DCSP of DCSP the DCSP block DCSP device DCSP (volume DCSP or DCSP local), DCSP bus=device's DCSP bus DCSP (e.g. DCSP uml, DCSP lxc, DCSP virtio, DCSP ...; DCSP if DCSP omitted, DCSP hypervisor DCSP driver DCSP chooses DCSP a DCSP suitable DCSP default, DCSP honoured DCSP only DCSP if DCSP device DCSP type DCSP is DCSP supplied) DCSP type=device DCSP type DCSP (e.g. DCSP disk, DCSP cdrom, DCSP ...; DCSP defaults DCSP to DCSP 'disk') DCSP device=name DCSP of DCSP the DCSP device DCSP (e.g. DCSP vda, DCSP xda, DCSP ...; DCSP if DCSP omitted, DCSP hypervisor DCSP driver DCSP chooses DCSP suitable DCSP device DCSP depending DCSP on DCSP selected DCSP bus; DCSP note DCSP the DCSP libvirt DCSP driver DCSP always DCSP uses DCSP default DCSP device DCSP names), DCSP size=size DCSP of DCSP the DCSP block DCSP device DCSP in DCSP MB(for DCSP swap) DCSP and DCSP in DCSP GB(for DCSP other DCSP formats) DCSP (if DCSP omitted, DCSP hypervisor DCSP driver DCSP calculates DCSP size), DCSP format=device DCSP will DCSP be DCSP formatted DCSP (e.g. DCSP swap, DCSP ntfs, DCSP ...; DCSP optional), DCSP bootindex=integer DCSP used DCSP for DCSP ordering DCSP the DCSP boot DCSP disks DCSP (for DCSP image DCSP backed DCSP instances DCSP it DCSP is DCSP equal DCSP to DCSP 0, DCSP for DCSP others DCSP need DCSP to DCSP be DCSP specified), DCSP shutdown=shutdown DCSP behaviour DCSP (either DCSP preserve DCSP or DCSP remove, DCSP for DCSP local DCSP destination DCSP set DCSP to DCSP remove) DCSP and DCSP tag=device DCSP metadata DCSP tag DCSP (optional).")) DCNL @utils.arg('--swap', metavar='<swap_size>', default=None, help=_('Create DCSP and DCSP attach DCSP a DCSP local DCSP swap DCSP block DCSP device DCSP of DCSP <swap_size> DCSP MB.')) DCNL @utils.arg('--ephemeral', metavar='size=<size>[,format=<format>]', action='append', default=[], help=_('Create DCSP and DCSP attach DCSP a DCSP local DCSP ephemeral DCSP block DCSP device DCSP of DCSP <size> DCSP GB DCSP and DCSP format DCSP it DCSP to DCSP <format>.')) DCNL @utils.arg('--hint', action='append', dest='scheduler_hints', default=[], metavar='<key=value>', help=_('Send DCSP arbitrary DCSP key/value DCSP pairs DCSP to DCSP the DCSP scheduler DCSP for DCSP custom DCSP use.')) DCNL @utils.arg('--nic', metavar='<net-id=net-uuid,net-name=network-name,v4-fixed-ip=ip-addr,v6-fixed-ip=ip-addr,port-id=port-uuid>', action='append', dest='nics', default=[], start_version='2.0', end_version='2.31', help=_('Create DCSP a DCSP NIC DCSP on DCSP the DCSP server. DCSP Specify DCSP option DCSP multiple DCSP times DCSP to DCSP create DCSP multiple DCSP NICs. DCSP net-id: DCSP attach DCSP NIC DCSP to DCSP network DCSP with DCSP this DCSP UUID DCSP net-name: DCSP attach DCSP NIC DCSP to DCSP network DCSP with DCSP this DCSP name DCSP (either DCSP port-id DCSP or DCSP net-id DCSP or DCSP net-name DCSP must DCSP be DCSP provided), DCSP v4-fixed-ip: DCSP IPv4 DCSP fixed DCSP address DCSP for DCSP NIC DCSP (optional), DCSP v6-fixed-ip: DCSP IPv6 DCSP fixed DCSP address DCSP for DCSP NIC DCSP (optional), DCSP port-id: DCSP attach DCSP NIC DCSP to DCSP port DCSP with DCSP this DCSP UUID DCSP (either DCSP port-id DCSP or DCSP net-id DCSP must DCSP be DCSP provided).')) DCNL @utils.arg('--nic', metavar='<net-id=net-uuid,net-name=network-name,v4-fixed-ip=ip-addr,v6-fixed-ip=ip-addr,port-id=port-uuid,tag=tag>', action='append', dest='nics', default=[], start_version='2.32', end_version='2.36', help=_('Create DCSP a DCSP NIC DCSP on DCSP the DCSP server. DCSP Specify DCSP option DCSP multiple DCSP times DCSP to DCSP create DCSP multiple DCSP nics. DCSP net-id: DCSP attach DCSP NIC DCSP to DCSP network DCSP with DCSP this DCSP UUID DCSP net-name: DCSP attach DCSP NIC DCSP to DCSP network DCSP with DCSP this DCSP name DCSP (either DCSP port-id DCSP or DCSP net-id DCSP or DCSP net-name DCSP must DCSP be DCSP provided), DCSP v4-fixed-ip: DCSP IPv4 DCSP fixed DCSP address DCSP for DCSP NIC DCSP (optional), DCSP v6-fixed-ip: DCSP IPv6 DCSP fixed DCSP address DCSP for DCSP NIC DCSP (optional), DCSP port-id: DCSP attach DCSP NIC DCSP to DCSP port DCSP with DCSP this DCSP UUID DCSP tag: DCSP interface DCSP metadata DCSP tag DCSP (optional) DCSP (either DCSP port-id DCSP or DCSP net-id DCSP must DCSP be DCSP provided).')) DCNL @utils.arg('--nic', metavar='<auto,none,net-id=net-uuid,net-name=network-name,port-id=port-uuid,v4-fixed-ip=ip-addr,v6-fixed-ip=ip-addr>', action='append', dest='nics', default=[], start_version='2.37', end_version='2.41', help=_("Create DCSP a DCSP NIC DCSP on DCSP the DCSP server. DCSP Specify DCSP option DCSP multiple DCSP times DCSP to DCSP create DCSP multiple DCSP nics DCSP unless DCSP using DCSP the DCSP special DCSP 'auto' DCSP or DCSP 'none' DCSP values. DCSP auto: DCSP automatically DCSP allocate DCSP network DCSP resources DCSP if DCSP none DCSP are DCSP available. DCSP This DCSP cannot DCSP be DCSP specified DCSP with DCSP any DCSP other DCSP nic DCSP value DCSP and DCSP cannot DCSP be DCSP specified DCSP multiple DCSP times. DCSP none: DCSP do DCSP not DCSP attach DCSP a DCSP NIC DCSP at DCSP all. DCSP This DCSP cannot DCSP be DCSP specified DCSP with DCSP any DCSP other DCSP nic DCSP value DCSP and DCSP cannot DCSP be DCSP specified DCSP multiple DCSP times. DCSP net-id: DCSP attach DCSP NIC DCSP to DCSP network DCSP with DCSP a DCSP specific DCSP UUID. DCSP net-name: DCSP attach DCSP NIC DCSP to DCSP network DCSP with DCSP this DCSP name DCSP (either DCSP port-id DCSP or DCSP net-id DCSP or DCSP net-name DCSP must DCSP be DCSP provided), DCSP v4-fixed-ip: DCSP IPv4 DCSP fixed DCSP address DCSP for DCSP NIC DCSP (optional), DCSP v6-fixed-ip: DCSP IPv6 DCSP fixed DCSP address DCSP for DCSP NIC DCSP (optional), DCSP port-id: DCSP attach DCSP NIC DCSP to DCSP port DCSP with DCSP this DCSP UUID DCSP (either DCSP port-id DCSP or DCSP net-id DCSP must DCSP be DCSP provided).")) DCNL @utils.arg('--nic', metavar='<auto,none,net-id=net-uuid,net-name=network-name,port-id=port-uuid,v4-fixed-ip=ip-addr,v6-fixed-ip=ip-addr,tag=tag>', action='append', dest='nics', default=[], start_version='2.42', help=_("Create DCSP a DCSP NIC DCSP on DCSP the DCSP server. DCSP Specify DCSP option DCSP multiple DCSP times DCSP to DCSP create DCSP multiple DCSP nics DCSP unless DCSP using DCSP the DCSP special DCSP 'auto' DCSP or DCSP 'none' DCSP values. DCSP auto: DCSP automatically DCSP allocate DCSP network DCSP resources DCSP if DCSP none DCSP are DCSP available. DCSP This DCSP cannot DCSP be DCSP specified DCSP with DCSP any DCSP other DCSP nic DCSP value DCSP and DCSP cannot DCSP be DCSP specified DCSP multiple DCSP times. DCSP none: DCSP do DCSP not DCSP attach DCSP a DCSP NIC DCSP at DCSP all. DCSP This DCSP cannot DCSP be DCSP specified DCSP with DCSP any DCSP other DCSP nic DCSP value DCSP and DCSP cannot DCSP be DCSP specified DCSP multiple DCSP times. DCSP net-id: DCSP attach DCSP NIC DCSP to DCSP network DCSP with DCSP a DCSP specific DCSP UUID. DCSP net-name: DCSP attach DCSP NIC DCSP to DCSP network DCSP with DCSP this DCSP name DCSP (either DCSP port-id DCSP or DCSP net-id DCSP or DCSP net-name DCSP must DCSP be DCSP provided), DCSP v4-fixed-ip: DCSP IPv4 DCSP fixed DCSP address DCSP for DCSP NIC DCSP (optional), DCSP v6-fixed-ip: DCSP IPv6 DCSP fixed DCSP address DCSP for DCSP NIC DCSP (optional), DCSP port-id: DCSP attach DCSP NIC DCSP to DCSP port DCSP with DCSP this DCSP UUID DCSP tag: DCSP interface DCSP metadata DCSP tag DCSP (optional) DCSP (either DCSP port-id DCSP or DCSP net-id DCSP must DCSP be DCSP provided).")) DCNL @utils.arg('--config-drive', metavar='<value>', dest='config_drive', default=False, help=_('Enable DCSP config DCSP drive.')) DCNL @utils.arg('--poll', dest='poll', action='store_true', default=False, help=_('Report DCSP the DCSP new DCSP server DCSP boot DCSP progress DCSP until DCSP it DCSP completes.')) DCNL @utils.arg('--admin-pass', dest='admin_pass', metavar='<value>', default=None, help=_('Admin DCSP password DCSP for DCSP the DCSP instance.')) DCNL @utils.arg('--access-ip-v4', dest='access_ip_v4', metavar='<value>', default=None, help=_('Alternative DCSP access DCSP IPv4 DCSP of DCSP the DCSP instance.')) DCNL @utils.arg('--access-ip-v6', dest='access_ip_v6', metavar='<value>', default=None, help=_('Alternative DCSP access DCSP IPv6 DCSP of DCSP the DCSP instance.')) DCNL @utils.arg('--description', metavar='<description>', dest='description', default=None, help=_('Description DCSP for DCSP the DCSP server.'), start_version='2.19') DCNL @utils.arg('--tags', metavar='<tags>', default=None, help=_('Tags DCSP for DCSP the DCSP server.Tags DCSP must DCSP be DCSP separated DCSP by DCSP commas: DCSP --tags DCSP <tag1,tag2>'), start_version='2.52') DCNL @utils.arg('--return-reservation-id', dest='return_reservation_id', action='store_true', default=False, help=_('Return DCSP a DCSP reservation DCSP id DCSP bound DCSP to DCSP created DCSP servers.')) DCNL def do_boot(cs, args):
def do_cloudpipe_list(cs, _args):
@utils.arg('project', metavar='<project_id>', help=_('UUID DCSP of DCSP the DCSP project DCSP to DCSP create DCSP the DCSP cloudpipe DCSP for.')) DCNL def do_cloudpipe_create(cs, args):
@utils.arg('address', metavar='<ip DCSP address>', help=_('New DCSP IP DCSP Address.')) DCNL @utils.arg('port', metavar='<port>', help=_('New DCSP Port.')) DCNL def do_cloudpipe_configure(cs, args):
def _poll_for_status(poll_fn, obj_id, action, final_ok_states, poll_period=5, show_progress=True, status_field='status', silent=False):
def _expand_dict_attr(collection, attr):
@utils.arg('--extra-specs', dest='extra_specs', action='store_true', default=False, help=_('Get DCSP extra-specs DCSP of DCSP each DCSP flavor.')) DCNL @utils.arg('--all', dest='all', action='store_true', default=False, help=_('Display DCSP all DCSP flavors DCSP (Admin DCSP only).')) DCNL @utils.arg('--marker', dest='marker', metavar='<marker>', default=None, help=_('The DCSP last DCSP flavor DCSP ID DCSP of DCSP the DCSP previous DCSP page; DCSP displays DCSP list DCSP of DCSP flavors DCSP after DCSP "marker".')) DCNL @utils.arg('--min-disk', dest='min_disk', metavar='<min-disk>', default=None, help=_('Filters DCSP the DCSP flavors DCSP by DCSP a DCSP minimum DCSP disk DCSP space, DCSP in DCSP GiB.')) DCNL @utils.arg('--min-ram', dest='min_ram', metavar='<min-ram>', default=None, help=_('Filters DCSP the DCSP flavors DCSP by DCSP a DCSP minimum DCSP RAM, DCSP in DCSP MB.')) DCNL @utils.arg('--limit', dest='limit', metavar='<limit>', type=int, default=None, help=_("Maximum DCSP number DCSP of DCSP flavors DCSP to DCSP display. DCSP If DCSP limit DCSP is DCSP bigger DCSP than DCSP 'CONF.api.max_limit' DCSP option DCSP of DCSP Nova DCSP API, DCSP limit DCSP 'CONF.api.max_limit' DCSP will DCSP be DCSP used DCSP instead.")) DCNL @utils.arg('--sort-key', dest='sort_key', metavar='<sort-key>', default=None, help=_('Flavors DCSP list DCSP sort DCSP key.')) DCNL @utils.arg('--sort-dir', dest='sort_dir', metavar='<sort-dir>', default=None, help=_('Flavors DCSP list DCSP sort DCSP direction.')) DCNL def do_flavor_list(cs, args):
@utils.arg('flavor', metavar='<flavor>', help=_('Name DCSP or DCSP ID DCSP of DCSP the DCSP flavor DCSP to DCSP delete.')) DCNL def do_flavor_delete(cs, args):
@utils.arg('flavor', metavar='<flavor>', help=_('Name DCSP or DCSP ID DCSP of DCSP flavor.')) DCNL def do_flavor_show(cs, args):
@utils.arg('name', metavar='<name>', help=_('Unique DCSP name DCSP of DCSP the DCSP new DCSP flavor.')) DCNL @utils.arg('id', metavar='<id>', help=_("Unique DCSP ID DCSP of DCSP the DCSP new DCSP flavor. DCSP Specifying DCSP 'auto' DCSP will DCSP generated DCSP a DCSP UUID DCSP for DCSP the DCSP ID.")) DCNL @utils.arg('ram', metavar='<ram>', help=_('Memory DCSP size DCSP in DCSP MB.')) DCNL @utils.arg('disk', metavar='<disk>', help=_('Disk DCSP size DCSP in DCSP GB.')) DCNL @utils.arg('--ephemeral', metavar='<ephemeral>', help=_('Ephemeral DCSP space DCSP size DCSP in DCSP GB DCSP (default DCSP 0).'), default=0) DCNL @utils.arg('vcpus', metavar='<vcpus>', help=_('Number DCSP of DCSP vcpus')) DCNL @utils.arg('--swap', metavar='<swap>', help=_('Swap DCSP space DCSP size DCSP in DCSP MB DCSP (default DCSP 0).'), default=0) DCNL @utils.arg('--rxtx-factor', metavar='<factor>', help=_('RX/TX DCSP factor DCSP (default DCSP 1).'), default=1.0) DCNL @utils.arg('--is-public', metavar='<is-public>', help=_('Make DCSP flavor DCSP accessible DCSP to DCSP the DCSP public DCSP (default DCSP true).'), type=(lambda v: strutils.bool_from_string(v, True)), default=True) DCNL def do_flavor_create(cs, args):
@utils.arg('flavor', metavar='<flavor>', help=_('Name DCSP or DCSP ID DCSP of DCSP flavor.')) DCNL @utils.arg('action', metavar='<action>', choices=['set', 'unset'], help=_("Actions: DCSP 'set' DCSP or DCSP 'unset'.")) DCNL @utils.arg('metadata', metavar='<key=value>', nargs='+', action='append', default=[], help=_('Extra_specs DCSP to DCSP set/unset DCSP (only DCSP key DCSP is DCSP necessary DCSP on DCSP unset).')) DCNL def do_flavor_key(cs, args):
@utils.arg('--flavor', metavar='<flavor>', help=_('Filter DCSP results DCSP by DCSP flavor DCSP name DCSP or DCSP ID.')) DCNL def do_flavor_access_list(cs, args):
@utils.arg('flavor', metavar='<flavor>', help=_('Flavor DCSP name DCSP or DCSP ID DCSP to DCSP add DCSP access DCSP for DCSP the DCSP given DCSP tenant.')) DCNL @utils.arg('tenant', metavar='<tenant_id>', help=_('Tenant DCSP ID DCSP to DCSP add DCSP flavor DCSP access DCSP for.')) DCNL def do_flavor_access_add(cs, args):
@utils.arg('flavor', metavar='<flavor>', help=_('Flavor DCSP name DCSP or DCSP ID DCSP to DCSP remove DCSP access DCSP for DCSP the DCSP given DCSP tenant.')) DCNL @utils.arg('tenant', metavar='<tenant_id>', help=_('Tenant DCSP ID DCSP to DCSP remove DCSP flavor DCSP access DCSP for.')) DCNL def do_flavor_access_remove(cs, args):
@utils.arg('--reservation-id', dest='reservation_id', metavar='<reservation-id>', default=None, help=_('Only DCSP return DCSP servers DCSP that DCSP match DCSP reservation-id.')) DCNL @utils.arg('--ip', dest='ip', metavar='<ip-regexp>', default=None, help=_('Search DCSP with DCSP regular DCSP expression DCSP match DCSP by DCSP IP DCSP address.')) DCNL @utils.arg('--ip6', dest='ip6', metavar='<ip6-regexp>', default=None, help=_('Search DCSP with DCSP regular DCSP expression DCSP match DCSP by DCSP IPv6 DCSP address.')) DCNL @utils.arg('--name', dest='name', metavar='<name-regexp>', default=None, help=_('Search DCSP with DCSP regular DCSP expression DCSP match DCSP by DCSP name.')) DCNL @utils.arg('--instance-name', dest='instance_name', metavar='<name-regexp>', default=None, help=_('Search DCSP with DCSP regular DCSP expression DCSP match DCSP by DCSP server DCSP name.')) DCNL @utils.arg('--status', dest='status', metavar='<status>', default=None, help=_('Search DCSP by DCSP server DCSP status.')) DCNL @utils.arg('--flavor', dest='flavor', metavar='<flavor>', default=None, help=_('Search DCSP by DCSP flavor DCSP name DCSP or DCSP ID.')) DCNL @utils.arg('--image', dest='image', metavar='<image>', default=None, help=_('Search DCSP by DCSP image DCSP name DCSP or DCSP ID.')) DCNL @utils.arg('--host', dest='host', metavar='<hostname>', default=None, help=_('Search DCSP servers DCSP by DCSP hostname DCSP to DCSP which DCSP they DCSP are DCSP assigned DCSP (Admin DCSP only).')) DCNL @utils.arg('--all-tenants', dest='all_tenants', metavar='<0|1>', nargs='?', type=int, const=1, default=int(strutils.bool_from_string(os.environ.get('ALL_TENANTS', 'false'), True)), help=_('Display DCSP information DCSP from DCSP all DCSP tenants DCSP (Admin DCSP only).')) DCNL @utils.arg('--tenant', dest='tenant', metavar='<tenant>', nargs='?', help=_('Display DCSP information DCSP from DCSP single DCSP tenant DCSP (Admin DCSP only).')) DCNL @utils.arg('--user', dest='user', metavar='<user>', nargs='?', help=_('Display DCSP information DCSP from DCSP single DCSP user DCSP (Admin DCSP only).')) DCNL @utils.arg('--deleted', dest='deleted', action='store_true', default=False, help=_('Only DCSP display DCSP deleted DCSP servers DCSP (Admin DCSP only).')) DCNL @utils.arg('--fields', default=None, metavar='<fields>', help=_('Comma-separated DCSP list DCSP of DCSP fields DCSP to DCSP display. DCSP Use DCSP the DCSP show DCSP command DCSP to DCSP see DCSP which DCSP fields DCSP are DCSP available.')) DCNL @utils.arg('--minimal', dest='minimal', action='store_true', default=False, help=_('Get DCSP only DCSP UUID DCSP and DCSP name.')) DCNL @utils.arg('--sort', dest='sort', metavar='<key>[:<direction>]', help=_('Comma-separated DCSP list DCSP of DCSP sort DCSP keys DCSP and DCSP directions DCSP in DCSP the DCSP form DCSP of DCSP <key>[:<asc|desc>]. DCSP The DCSP direction DCSP defaults DCSP to DCSP descending DCSP if DCSP not DCSP specified.')) DCNL @utils.arg('--marker', dest='marker', metavar='<marker>', default=None, help=_('The DCSP last DCSP server DCSP UUID DCSP of DCSP the DCSP previous DCSP page; DCSP displays DCSP list DCSP of DCSP servers DCSP after DCSP "marker".')) DCNL @utils.arg('--limit', dest='limit', metavar='<limit>', type=int, default=None, help=_("Maximum DCSP number DCSP of DCSP servers DCSP to DCSP display. DCSP If DCSP limit DCSP == DCSP -1, DCSP all DCSP servers DCSP will DCSP be DCSP displayed. DCSP If DCSP limit DCSP is DCSP bigger DCSP than DCSP 'CONF.api.max_limit' DCSP option DCSP of DCSP Nova DCSP API, DCSP limit DCSP 'CONF.api.max_limit' DCSP will DCSP be DCSP used DCSP instead.")) DCNL @utils.arg('--changes-since', dest='changes_since', metavar='<changes_since>', default=None, help=_('List DCSP only DCSP servers DCSP changed DCSP after DCSP a DCSP certain DCSP point DCSP of DCSP time.The DCSP provided DCSP time DCSP should DCSP be DCSP an DCSP ISO DCSP 8061 DCSP formatted DCSP time.ex DCSP 2016-03-04T06:27:59Z DCSP .')) DCNL @utils.arg('--tags', dest='tags', metavar='<tags>', default=None, help=_("The DCSP given DCSP tags DCSP must DCSP all DCSP be DCSP present DCSP for DCSP a DCSP server DCSP to DCSP be DCSP included DCSP in DCSP the DCSP list DCSP result. DCSP Boolean DCSP expression DCSP in DCSP this DCSP case DCSP is DCSP 't1 DCSP AND DCSP t2'. DCSP Tags DCSP must DCSP be DCSP separated DCSP by DCSP commas: DCSP --tags DCSP <tag1,tag2>"), start_version='2.26') DCNL @utils.arg('--tags-any', dest='tags-any', metavar='<tags-any>', default=None, help=_("If DCSP one DCSP of DCSP the DCSP given DCSP tags DCSP is DCSP present DCSP the DCSP server DCSP will DCSP be DCSP included DCSP in DCSP the DCSP list DCSP result. DCSP Boolean DCSP expression DCSP in DCSP this DCSP case DCSP is DCSP 't1 DCSP OR DCSP t2'. DCSP Tags DCSP must DCSP be DCSP separated DCSP by DCSP commas: DCSP --tags-any DCSP <tag1,tag2>"), start_version='2.26') DCNL @utils.arg('--not-tags', dest='not-tags', metavar='<not-tags>', default=None, help=_("Only DCSP the DCSP servers DCSP that DCSP do DCSP not DCSP have DCSP any DCSP of DCSP the DCSP given DCSP tags DCSP will DCSP be DCSP included DCSP in DCSP the DCSP list DCSP results. DCSP Boolean DCSP expression DCSP in DCSP this DCSP case DCSP is DCSP 'NOT(t1 DCSP AND DCSP t2)'. DCSP Tags DCSP must DCSP be DCSP separated DCSP by DCSP commas: DCSP --not-tags DCSP <tag1,tag2>"), start_version='2.26') DCNL @utils.arg('--not-tags-any', dest='not-tags-any', metavar='<not-tags-any>', default=None, help=_("Only DCSP the DCSP servers DCSP that DCSP do DCSP not DCSP have DCSP at DCSP least DCSP one DCSP of DCSP the DCSP given DCSP tags DCSP will DCSP be DCSP included DCSP in DCSP the DCSP list DCSP result. DCSP Boolean DCSP expression DCSP in DCSP this DCSP case DCSP is DCSP 'NOT(t1 DCSP OR DCSP t2)'. DCSP Tags DCSP must DCSP be DCSP separated DCSP by DCSP commas: DCSP --not-tags-any DCSP <tag1,tag2>"), start_version='2.26') DCNL def do_list(cs, args):
def _get_list_table_columns_and_formatters(fields, objs, exclude_fields=(), filters=None):
@utils.arg('--hard', dest='reboot_type', action='store_const', const=servers.REBOOT_HARD, default=servers.REBOOT_SOFT, help=_('Perform DCSP a DCSP hard DCSP reboot DCSP (instead DCSP of DCSP a DCSP soft DCSP one). DCSP Note: DCSP Ironic DCSP does DCSP not DCSP currently DCSP support DCSP soft DCSP reboot; DCSP consequently, DCSP bare DCSP metal DCSP nodes DCSP will DCSP always DCSP do DCSP a DCSP hard DCSP reboot, DCSP regardless DCSP of DCSP the DCSP use DCSP of DCSP this DCSP option.')) DCNL @utils.arg('server', metavar='<server>', nargs='+', help=_('Name DCSP or DCSP ID DCSP of DCSP server(s).')) DCNL @utils.arg('--poll', dest='poll', action='store_true', default=False, help=_('Poll DCSP until DCSP reboot DCSP is DCSP complete.')) DCNL def do_reboot(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('image', metavar='<image>', help=_('Name DCSP or DCSP ID DCSP of DCSP new DCSP image.')) DCNL @utils.arg('--rebuild-password', dest='rebuild_password', metavar='<rebuild-password>', default=False, help=_('Set DCSP the DCSP provided DCSP admin DCSP password DCSP on DCSP the DCSP rebuilt DCSP server.')) DCNL @utils.arg('--poll', dest='poll', action='store_true', default=False, help=_('Report DCSP the DCSP server DCSP rebuild DCSP progress DCSP until DCSP it DCSP completes.')) DCNL @utils.arg('--minimal', dest='minimal', action='store_true', default=False, help=_('Skips DCSP flavor/image DCSP lookups DCSP when DCSP showing DCSP servers.')) DCNL @utils.arg('--preserve-ephemeral', action='store_true', default=False, help=_('Preserve DCSP the DCSP default DCSP ephemeral DCSP storage DCSP partition DCSP on DCSP rebuild.')) DCNL @utils.arg('--name', metavar='<name>', default=None, help=_('Name DCSP for DCSP the DCSP new DCSP server.')) DCNL @utils.arg('--description', metavar='<description>', dest='description', default=None, help=_('New DCSP description DCSP for DCSP the DCSP server.'), start_version='2.19') DCNL @utils.arg('--meta', metavar='<key=value>', action='append', default=[], help=_('Record DCSP arbitrary DCSP key/value DCSP metadata DCSP to DCSP /meta_data.json DCSP on DCSP the DCSP metadata DCSP server. DCSP Can DCSP be DCSP specified DCSP multiple DCSP times.')) DCNL @utils.arg('--file', metavar='<dst-path=src-path>', action='append', dest='files', default=[], help=_('Store DCSP arbitrary DCSP files DCSP from DCSP <src-path> DCSP locally DCSP to DCSP <dst-path> DCSP on DCSP the DCSP new DCSP server. DCSP You DCSP may DCSP store DCSP up DCSP to DCSP 5 DCSP files.')) DCNL def do_rebuild(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP (old DCSP name) DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('--name', metavar='<name>', dest='name', default=None, help=_('New DCSP name DCSP for DCSP the DCSP server.')) DCNL @utils.arg('--description', metavar='<description>', dest='description', default=None, help=_('New DCSP description DCSP for DCSP the DCSP server. DCSP If DCSP it DCSP equals DCSP to DCSP empty DCSP string DCSP (i.g. DCSP ""), DCSP the DCSP server DCSP description DCSP will DCSP be DCSP removed.'), start_version='2.19') DCNL def do_update(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('flavor', metavar='<flavor>', help=_('Name DCSP or DCSP ID DCSP of DCSP new DCSP flavor.')) DCNL @utils.arg('--poll', dest='poll', action='store_true', default=False, help=_('Report DCSP the DCSP server DCSP resize DCSP progress DCSP until DCSP it DCSP completes.')) DCNL def do_resize(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_resize_confirm(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_resize_revert(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('--poll', dest='poll', action='store_true', default=False, help=_('Report DCSP the DCSP server DCSP migration DCSP progress DCSP until DCSP it DCSP completes.')) DCNL def do_migrate(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_pause(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_unpause(cs, args):
@utils.arg('--all-tenants', action='store_const', const=1, default=0, help=_('Stop DCSP server(s) DCSP in DCSP another DCSP tenant DCSP by DCSP name DCSP (Admin DCSP only).')) DCNL @utils.arg('server', metavar='<server>', nargs='+', help=_('Name DCSP or DCSP ID DCSP of DCSP server(s).')) DCNL def do_stop(cs, args):
@utils.arg('--all-tenants', action='store_const', const=1, default=0, help=_('Start DCSP server(s) DCSP in DCSP another DCSP tenant DCSP by DCSP name DCSP (Admin DCSP only).')) DCNL @utils.arg('server', metavar='<server>', nargs='+', help=_('Name DCSP or DCSP ID DCSP of DCSP server(s).')) DCNL def do_start(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_lock(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_unlock(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_suspend(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_resume(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('--password', metavar='<password>', dest='password', help=_('The DCSP admin DCSP password DCSP to DCSP be DCSP set DCSP in DCSP the DCSP rescue DCSP environment.')) DCNL @utils.arg('--image', metavar='<image>', dest='image', help=_('The DCSP image DCSP to DCSP rescue DCSP with.')) DCNL def do_rescue(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_unrescue(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_shelve(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_shelve_offload(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_unshelve(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_diagnostics(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP a DCSP server DCSP for DCSP which DCSP the DCSP network DCSP cache DCSP should DCSP be DCSP refreshed DCSP from DCSP neutron DCSP (Admin DCSP only).')) DCNL def do_refresh_network(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_set_password(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('name', metavar='<name>', help=_('Name DCSP of DCSP snapshot.')) DCNL @utils.arg('--metadata', metavar='<key=value>', action='append', default=[], help=_('Record DCSP arbitrary DCSP key/value DCSP metadata DCSP to DCSP /meta_data.json DCSP on DCSP the DCSP metadata DCSP server. DCSP Can DCSP be DCSP specified DCSP multiple DCSP times.')) DCNL @utils.arg('--show', dest='show', action='store_true', default=False, help=_('Print DCSP image DCSP info.')) DCNL @utils.arg('--poll', dest='poll', action='store_true', default=False, help=_('Report DCSP the DCSP snapshot DCSP progress DCSP and DCSP poll DCSP until DCSP image DCSP creation DCSP is DCSP complete.')) DCNL def do_image_create(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('name', metavar='<name>', help=_('Name DCSP of DCSP the DCSP backup DCSP image.')) DCNL @utils.arg('backup_type', metavar='<backup-type>', help=_('The DCSP backup DCSP type, DCSP like DCSP "daily" DCSP or DCSP "weekly".')) DCNL @utils.arg('rotation', metavar='<rotation>', help=_('Int DCSP parameter DCSP representing DCSP how DCSP many DCSP backups DCSP to DCSP keep DCSP around.')) DCNL def do_backup(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('action', metavar='<action>', choices=['set', 'delete'], help=_("Actions: DCSP 'set' DCSP or DCSP 'delete'.")) DCNL @utils.arg('metadata', metavar='<key=value>', nargs='+', action='append', default=[], help=_('Metadata DCSP to DCSP set DCSP or DCSP delete DCSP (only DCSP key DCSP is DCSP necessary DCSP on DCSP delete).')) DCNL def do_meta(cs, args):
@utils.arg('--minimal', dest='minimal', action='store_true', default=False, help=_('Skips DCSP flavor/image DCSP lookups DCSP when DCSP showing DCSP servers.')) DCNL @utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('--wrap', dest='wrap', metavar='<integer>', type=int, default=0, help=_('Wrap DCSP the DCSP output DCSP to DCSP a DCSP specified DCSP length, DCSP or DCSP 0 DCSP to DCSP disable.')) DCNL def do_show(cs, args):
@utils.arg('--all-tenants', action='store_const', const=1, default=0, help=_('Delete DCSP server(s) DCSP in DCSP another DCSP tenant DCSP by DCSP name DCSP (Admin DCSP only).')) DCNL @utils.arg('server', metavar='<server>', nargs='+', help=_('Name DCSP or DCSP ID DCSP of DCSP server(s).')) DCNL def do_delete(cs, args):
def _find_server(cs, server, raise_if_notfound=True, **find_args):
def _find_image(cs, image):
def _find_flavor(cs, flavor):
def _find_network_id(cs, net_name):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('network_id', metavar='<network-id>', help=_('Network DCSP ID.')) DCNL def do_add_fixed_ip(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('address', metavar='<address>', help=_('IP DCSP Address.')) DCNL def do_remove_fixed_ip(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('volume', metavar='<volume>', help=_('ID DCSP of DCSP the DCSP volume DCSP to DCSP attach.')) DCNL @utils.arg('device', metavar='<device>', default=None, nargs='?', help=_('Name DCSP of DCSP the DCSP device DCSP e.g. DCSP /dev/vdb. DCSP Use DCSP "auto" DCSP for DCSP autoassign DCSP (if DCSP supported). DCSP Libvirt DCSP driver DCSP will DCSP use DCSP default DCSP device DCSP name.')) DCNL @utils.arg('--tag', metavar='<tag>', default=None, help=_('Tag DCSP for DCSP the DCSP attached DCSP volume.'), start_version='2.49') DCNL def do_volume_attach(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('src_volume', metavar='<src_volid>', help=_('ID DCSP of DCSP the DCSP source DCSP (original) DCSP volume.')) DCNL @utils.arg('dest_volume', metavar='<dest_volid>', help=_('ID DCSP of DCSP the DCSP destination DCSP volume.')) DCNL def do_volume_update(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('attachment_id', metavar='<volume>', help=_('ID DCSP of DCSP the DCSP volume DCSP to DCSP detach.')) DCNL def do_volume_detach(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_volume_attachments(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('console_type', metavar='<console-type>', help=_('Type DCSP of DCSP vnc DCSP console DCSP ("novnc" DCSP or DCSP "xvpvnc").')) DCNL def do_get_vnc_console(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('console_type', metavar='<console-type>', help=_('Type DCSP of DCSP spice DCSP console DCSP ("spice-html5").')) DCNL def do_get_spice_console(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('console_type', metavar='<console-type>', help=_('Type DCSP of DCSP rdp DCSP console DCSP ("rdp-html5").')) DCNL def do_get_rdp_console(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('--console-type', default='serial', help=_('Type DCSP of DCSP serial DCSP console, DCSP default="serial".')) DCNL def do_get_serial_console(cs, args):
@api_versions.wraps('2.8') DCNL @utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_get_mks_console(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('private_key', metavar='<private-key>', help=_('Private DCSP key DCSP (used DCSP locally DCSP to DCSP decrypt DCSP password) DCSP (Optional). DCSP When DCSP specified, DCSP the DCSP command DCSP displays DCSP the DCSP clear DCSP (decrypted) DCSP VM DCSP password. DCSP When DCSP not DCSP specified, DCSP the DCSP ciphered DCSP VM DCSP password DCSP is DCSP displayed.'), nargs='?', default=None) DCNL def do_get_password(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_clear_password(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('--length', metavar='<length>', default=None, help=_('Length DCSP in DCSP lines DCSP to DCSP tail.')) DCNL def do_console_log(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('address', metavar='<address>', help=_('IP DCSP Address.')) DCNL @utils.arg('--fixed-address', metavar='<fixed_address>', default=None, help=_('Fixed DCSP IP DCSP Address DCSP to DCSP associate DCSP with.')) DCNL def do_floating_ip_associate(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('address', metavar='<address>', help=_('IP DCSP Address.')) DCNL def do_floating_ip_disassociate(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('secgroup', metavar='<secgroup>', help=_('Name DCSP or DCSP ID DCSP of DCSP Security DCSP Group.')) DCNL def do_add_secgroup(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('secgroup', metavar='<secgroup>', help=_('Name DCSP of DCSP Security DCSP Group.')) DCNL def do_remove_secgroup(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_list_secgroup(cs, args):
@utils.arg('name', metavar='<name>', help=_('Name DCSP of DCSP key.')) DCNL @utils.arg('--pub-key', metavar='<pub-key>', default=None, help=_('Path DCSP to DCSP a DCSP public DCSP ssh DCSP key.')) DCNL @utils.arg('--key-type', metavar='<key-type>', default='ssh', help=_('Keypair DCSP type. DCSP Can DCSP be DCSP ssh DCSP or DCSP x509.'), start_version='2.2') DCNL @utils.arg('--user', metavar='<user-id>', default=None, help=_('ID DCSP of DCSP user DCSP to DCSP whom DCSP to DCSP add DCSP key-pair DCSP (Admin DCSP only).'), start_version='2.10') DCNL def do_keypair_add(cs, args):
@api_versions.wraps('2.0', '2.9') DCNL @utils.arg('name', metavar='<name>', help=_('Keypair DCSP name DCSP to DCSP delete.')) DCNL def do_keypair_delete(cs, args):
@api_versions.wraps('2.10') DCNL @utils.arg('name', metavar='<name>', help=_('Keypair DCSP name DCSP to DCSP delete.')) DCNL @utils.arg('--user', metavar='<user-id>', default=None, help=_('ID DCSP of DCSP key-pair DCSP owner DCSP (Admin DCSP only).')) DCNL def do_keypair_delete(cs, args):
@api_versions.wraps('2.0', '2.9') DCNL def do_keypair_list(cs, args):
@api_versions.wraps('2.10', '2.34') DCNL @utils.arg('--user', metavar='<user-id>', default=None, help=_('List DCSP key-pairs DCSP of DCSP specified DCSP user DCSP ID DCSP (Admin DCSP only).')) DCNL def do_keypair_list(cs, args):
@api_versions.wraps('2.35') DCNL @utils.arg('--user', metavar='<user-id>', default=None, help=_('List DCSP key-pairs DCSP of DCSP specified DCSP user DCSP ID DCSP (Admin DCSP only).')) DCNL @utils.arg('--marker', dest='marker', metavar='<marker>', default=None, help=_('The DCSP last DCSP keypair DCSP of DCSP the DCSP previous DCSP page; DCSP displays DCSP list DCSP of DCSP keypairs DCSP after DCSP "marker".')) DCNL @utils.arg('--limit', dest='limit', metavar='<limit>', type=int, default=None, help=_("Maximum DCSP number DCSP of DCSP keypairs DCSP to DCSP display. DCSP If DCSP limit DCSP is DCSP bigger DCSP than DCSP 'CONF.api.max_limit' DCSP option DCSP of DCSP Nova DCSP API, DCSP limit DCSP 'CONF.api.max_limit' DCSP will DCSP be DCSP used DCSP instead.")) DCNL def do_keypair_list(cs, args):
@api_versions.wraps('2.0', '2.9') DCNL @utils.arg('keypair', metavar='<keypair>', help=_('Name DCSP of DCSP keypair.')) DCNL def do_keypair_show(cs, args):
@api_versions.wraps('2.10') DCNL @utils.arg('keypair', metavar='<keypair>', help=_('Name DCSP of DCSP keypair.')) DCNL @utils.arg('--user', metavar='<user-id>', default=None, help=_('ID DCSP of DCSP key-pair DCSP owner DCSP (Admin DCSP only).')) DCNL def do_keypair_show(cs, args):
def _find_keypair(cs, keypair):
def _print_absolute_limits(limits):
def _print_rate_limits(limits):
@utils.arg('--tenant', dest='tenant', metavar='<tenant>', nargs='?', help=_('Display DCSP information DCSP from DCSP single DCSP tenant DCSP (Admin DCSP only).')) DCNL @utils.arg('--reserved', dest='reserved', action='store_true', default=False, help=_('Include DCSP reservations DCSP count.')) DCNL def do_limits(cs, args):
@utils.arg('--start', metavar='<start>', help=_('Usage DCSP range DCSP start DCSP date DCSP ex DCSP 2012-01-20. DCSP (default: DCSP 4 DCSP weeks DCSP ago)'), default=None) DCNL @utils.arg('--end', metavar='<end>', help=_('Usage DCSP range DCSP end DCSP date, DCSP ex DCSP 2012-01-20. DCSP (default: DCSP tomorrow)'), default=None) DCNL def do_usage_list(cs, args):
@utils.arg('--start', metavar='<start>', help=_('Usage DCSP range DCSP start DCSP date DCSP ex DCSP 2012-01-20. DCSP (default: DCSP 4 DCSP weeks DCSP ago)'), default=None) DCNL @utils.arg('--end', metavar='<end>', help=_('Usage DCSP range DCSP end DCSP date, DCSP ex DCSP 2012-01-20. DCSP (default: DCSP tomorrow)'), default=None) DCNL @utils.arg('--tenant', metavar='<tenant-id>', default=None, help=_('UUID DCSP of DCSP tenant DCSP to DCSP get DCSP usage DCSP for.')) DCNL def do_usage(cs, args):
@utils.arg('pk_filename', metavar='<private-key-filename>', nargs='?', default='pk.pem', help=_('Filename DCSP for DCSP the DCSP private DCSP key. DCSP [Default: DCSP pk.pem]')) DCNL @utils.arg('cert_filename', metavar='<x509-cert-filename>', nargs='?', default='cert.pem', help=_('Filename DCSP for DCSP the DCSP X.509 DCSP certificate. DCSP [Default: DCSP cert.pem]')) DCNL def do_x509_create_cert(cs, args):
@utils.arg('filename', metavar='<filename>', nargs='?', default='cacert.pem', help=_('Filename DCSP to DCSP write DCSP the DCSP x509 DCSP root DCSP cert.')) DCNL def do_x509_get_root_cert(cs, args):
@utils.arg('--hypervisor', metavar='<hypervisor>', default=None, help=_('Type DCSP of DCSP hypervisor.')) DCNL def do_agent_list(cs, args):
@utils.arg('os', metavar='<os>', help=_('Type DCSP of DCSP OS.')) DCNL @utils.arg('architecture', metavar='<architecture>', help=_('Type DCSP of DCSP architecture.')) DCNL @utils.arg('version', metavar='<version>', help=_('Version.')) DCNL @utils.arg('url', metavar='<url>', help=_('URL.')) DCNL @utils.arg('md5hash', metavar='<md5hash>', help=_('MD5 DCSP hash.')) DCNL @utils.arg('hypervisor', metavar='<hypervisor>', default='xen', help=_('Type DCSP of DCSP hypervisor.')) DCNL def do_agent_create(cs, args):
@utils.arg('id', metavar='<id>', help=_('ID DCSP of DCSP the DCSP agent-build.')) DCNL def do_agent_delete(cs, args):
@utils.arg('id', metavar='<id>', help=_('ID DCSP of DCSP the DCSP agent-build.')) DCNL @utils.arg('version', metavar='<version>', help=_('Version.')) DCNL @utils.arg('url', metavar='<url>', help=_('URL')) DCNL @utils.arg('md5hash', metavar='<md5hash>', help=_('MD5 DCSP hash.')) DCNL def do_agent_modify(cs, args):
def _find_aggregate(cs, aggregate):
def do_aggregate_list(cs, args):
@utils.arg('name', metavar='<name>', help=_('Name DCSP of DCSP aggregate.')) DCNL @utils.arg('availability_zone', metavar='<availability-zone>', default=None, nargs='?', help=_('The DCSP availability DCSP zone DCSP of DCSP the DCSP aggregate DCSP (optional).')) DCNL def do_aggregate_create(cs, args):
@utils.arg('aggregate', metavar='<aggregate>', help=_('Name DCSP or DCSP ID DCSP of DCSP aggregate DCSP to DCSP delete.')) DCNL def do_aggregate_delete(cs, args):
@utils.arg('aggregate', metavar='<aggregate>', help=_('Name DCSP or DCSP ID DCSP of DCSP aggregate DCSP to DCSP update.')) DCNL @utils.arg('--name', dest='name', help=_('New DCSP name DCSP for DCSP aggregate.')) DCNL @utils.arg('--availability-zone', metavar='<availability-zone>', dest='availability_zone', help=_('New DCSP availability DCSP zone DCSP for DCSP aggregate.')) DCNL def do_aggregate_update(cs, args):
@utils.arg('aggregate', metavar='<aggregate>', help=_('Name DCSP or DCSP ID DCSP of DCSP aggregate DCSP to DCSP update.')) DCNL @utils.arg('metadata', metavar='<key=value>', nargs='+', action='append', default=[], help=_('Metadata DCSP to DCSP add/update DCSP to DCSP aggregate. DCSP Specify DCSP only DCSP the DCSP key DCSP to DCSP delete DCSP a DCSP metadata DCSP item.')) DCNL def do_aggregate_set_metadata(cs, args):
@utils.arg('aggregate', metavar='<aggregate>', help=_('Name DCSP or DCSP ID DCSP of DCSP aggregate.')) DCNL @utils.arg('host', metavar='<host>', help=_('The DCSP host DCSP to DCSP add DCSP to DCSP the DCSP aggregate.')) DCNL def do_aggregate_add_host(cs, args):
@utils.arg('aggregate', metavar='<aggregate>', help=_('Name DCSP or DCSP ID DCSP of DCSP aggregate.')) DCNL @utils.arg('host', metavar='<host>', help=_('The DCSP host DCSP to DCSP remove DCSP from DCSP the DCSP aggregate.')) DCNL def do_aggregate_remove_host(cs, args):
@utils.arg('aggregate', metavar='<aggregate>', help=_('Name DCSP or DCSP ID DCSP of DCSP aggregate.')) DCNL def do_aggregate_show(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('host', metavar='<host>', default=None, nargs='?', help=_('Destination DCSP host DCSP name.')) DCNL @utils.arg('--block-migrate', action='store_true', dest='block_migrate', default=False, help=_('True DCSP in DCSP case DCSP of DCSP block_migration. DCSP (Default=False:live_migration)'), start_version='2.0', end_version='2.24') DCNL @utils.arg('--block-migrate', action='store_true', dest='block_migrate', default='auto', help=_('True DCSP in DCSP case DCSP of DCSP block_migration. DCSP (Default=auto:live_migration)'), start_version='2.25') DCNL @utils.arg('--disk-over-commit', action='store_true', dest='disk_over_commit', default=False, help=_('Allow DCSP overcommit. DCSP (Default=False)'), start_version='2.0', end_version='2.24') DCNL @utils.arg('--force', dest='force', action='store_true', default=False, help=_('Force DCSP to DCSP not DCSP verify DCSP the DCSP scheduler DCSP if DCSP a DCSP host DCSP is DCSP provided.'), start_version='2.30') DCNL def do_live_migration(cs, args):
@api_versions.wraps('2.22') DCNL @utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('migration', metavar='<migration>', help=_('ID DCSP of DCSP migration.')) DCNL def do_live_migration_force_complete(cs, args):
@api_versions.wraps('2.23') DCNL @utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_server_migration_list(cs, args):
@api_versions.wraps('2.23') DCNL @utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('migration', metavar='<migration>', help=_('ID DCSP of DCSP migration.')) DCNL def do_server_migration_show(cs, args):
@api_versions.wraps('2.24') DCNL @utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('migration', metavar='<migration>', help=_('ID DCSP of DCSP migration.')) DCNL def do_live_migration_abort(cs, args):
@utils.arg('--all-tenants', action='store_const', const=1, default=0, help=_('Reset DCSP state DCSP server(s) DCSP in DCSP another DCSP tenant DCSP by DCSP name DCSP (Admin DCSP only).')) DCNL @utils.arg('server', metavar='<server>', nargs='+', help=_('Name DCSP or DCSP ID DCSP of DCSP server(s).')) DCNL @utils.arg('--active', action='store_const', dest='state', default='error', const='active', help=_('Request DCSP the DCSP server DCSP be DCSP reset DCSP to DCSP "active" DCSP state DCSP instead DCSP of DCSP "error" DCSP state DCSP (the DCSP default).')) DCNL def do_reset_state(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_reset_network(cs, args):
@utils.arg('--host', metavar='<hostname>', default=None, help=_('Name DCSP of DCSP host.')) DCNL @utils.arg('--binary', metavar='<binary>', default=None, help=_('Service DCSP binary.')) DCNL def do_service_list(cs, args):
@api_versions.wraps('2.0', '2.52') DCNL @utils.arg('host', metavar='<hostname>', help=_('Name DCSP of DCSP host.')) DCNL @utils.arg('binary', metavar='<binary>', help=_('Service DCSP binary. DCSP The DCSP only DCSP meaningful DCSP binary DCSP is DCSP "nova-compute". DCSP (Deprecated)'), default='nova-compute', nargs='?') DCNL def do_service_enable(cs, args):
@api_versions.wraps('2.53') DCNL @utils.arg('id', metavar='<id>', help=_('ID DCSP of DCSP the DCSP service DCSP as DCSP a DCSP UUID.')) DCNL def do_service_enable(cs, args):
@api_versions.wraps('2.0', '2.52') DCNL @utils.arg('host', metavar='<hostname>', help=_('Name DCSP of DCSP host.')) DCNL @utils.arg('binary', metavar='<binary>', help=_('Service DCSP binary. DCSP The DCSP only DCSP meaningful DCSP binary DCSP is DCSP "nova-compute". DCSP (Deprecated)'), default='nova-compute', nargs='?') DCNL @utils.arg('--reason', metavar='<reason>', help=_('Reason DCSP for DCSP disabling DCSP service.')) DCNL def do_service_disable(cs, args):
@api_versions.wraps('2.53') DCNL @utils.arg('id', metavar='<id>', help=_('ID DCSP of DCSP the DCSP service DCSP as DCSP a DCSP UUID.')) DCNL @utils.arg('--reason', metavar='<reason>', help=_('Reason DCSP for DCSP disabling DCSP the DCSP service.')) DCNL def do_service_disable(cs, args):
@api_versions.wraps('2.11', '2.52') DCNL @utils.arg('host', metavar='<hostname>', help=_('Name DCSP of DCSP host.')) DCNL @utils.arg('binary', metavar='<binary>', help=_('Service DCSP binary. DCSP The DCSP only DCSP meaningful DCSP binary DCSP is DCSP "nova-compute". DCSP (Deprecated)'), default='nova-compute', nargs='?') DCNL @utils.arg('--unset', dest='force_down', help=_('Unset DCSP the DCSP force DCSP state DCSP down DCSP of DCSP service.'), action='store_false', default=True) DCNL def do_service_force_down(cs, args):
@api_versions.wraps('2.53') DCNL @utils.arg('id', metavar='<id>', help=_('ID DCSP of DCSP the DCSP service DCSP as DCSP a DCSP UUID.')) DCNL @utils.arg('--unset', dest='force_down', help=_('Unset DCSP the DCSP forced_down DCSP state DCSP of DCSP the DCSP service.'), action='store_false', default=True) DCNL def do_service_force_down(cs, args):
@api_versions.wraps('2.0', '2.52') DCNL @utils.arg('id', metavar='<id>', help=_('ID DCSP of DCSP service DCSP as DCSP an DCSP integer. DCSP Note DCSP that DCSP this DCSP may DCSP not DCSP uniquely DCSP identify DCSP a DCSP service DCSP in DCSP a DCSP multi-cell DCSP deployment.')) DCNL def do_service_delete(cs, args):
@api_versions.wraps('2.53') DCNL @utils.arg('id', metavar='<id>', help=_('ID DCSP of DCSP service DCSP as DCSP a DCSP UUID.')) DCNL def do_service_delete(cs, args):
@utils.arg('host', metavar='<hostname>', help=_('Name DCSP of DCSP host.')) DCNL def do_host_describe(cs, args):
@utils.arg('--zone', metavar='<zone>', default=None, help=_('Filters DCSP the DCSP list, DCSP returning DCSP only DCSP those DCSP hosts DCSP in DCSP the DCSP availability DCSP zone DCSP <zone>.')) DCNL def do_host_list(cs, args):
@utils.arg('host', metavar='<hostname>', help=_('Name DCSP of DCSP host.')) DCNL @utils.arg('--status', metavar='<enable|disable>', default=None, dest='status', help=_('Either DCSP enable DCSP or DCSP disable DCSP a DCSP host.')) DCNL @utils.arg('--maintenance', metavar='<enable|disable>', default=None, dest='maintenance', help=_('Either DCSP put DCSP or DCSP resume DCSP host DCSP to/from DCSP maintenance.')) DCNL def do_host_update(cs, args):
@utils.arg('host', metavar='<hostname>', help=_('Name DCSP of DCSP host.')) DCNL @utils.arg('--action', metavar='<action>', dest='action', choices=['startup', 'shutdown', 'reboot'], help=_('A DCSP power DCSP action: DCSP startup, DCSP reboot, DCSP or DCSP shutdown.')) DCNL def do_host_action(cs, args):
def _find_hypervisor(cs, hypervisor):
@api_versions.wraps('2.0', '2.32') DCNL @utils.arg('--matching', metavar='<hostname>', default=None, help=_('List DCSP hypervisors DCSP matching DCSP the DCSP given DCSP <hostname> DCSP (or DCSP pattern).')) DCNL def do_hypervisor_list(cs, args):
@api_versions.wraps('2.33') DCNL @utils.arg('--matching', metavar='<hostname>', default=None, help=_('List DCSP hypervisors DCSP matching DCSP the DCSP given DCSP <hostname> DCSP (or DCSP pattern). DCSP If DCSP matching DCSP is DCSP used DCSP limit DCSP and DCSP marker DCSP options DCSP will DCSP be DCSP ignored.')) DCNL @utils.arg('--marker', dest='marker', metavar='<marker>', default=None, help=_('The DCSP last DCSP hypervisor DCSP of DCSP the DCSP previous DCSP page; DCSP displays DCSP list DCSP of DCSP hypervisors DCSP after DCSP "marker".')) DCNL @utils.arg('--limit', dest='limit', metavar='<limit>', type=int, default=None, help=_("Maximum DCSP number DCSP of DCSP hypervisors DCSP to DCSP display. DCSP If DCSP limit DCSP is DCSP bigger DCSP than DCSP 'CONF.api.max_limit' DCSP option DCSP of DCSP Nova DCSP API, DCSP limit DCSP 'CONF.api.max_limit' DCSP will DCSP be DCSP used DCSP instead.")) DCNL def do_hypervisor_list(cs, args):
@utils.arg('hostname', metavar='<hostname>', help=_('The DCSP hypervisor DCSP hostname DCSP (or DCSP pattern) DCSP to DCSP search DCSP for.')) DCNL def do_hypervisor_servers(cs, args):
@utils.arg('hypervisor', metavar='<hypervisor>', help=_('Name DCSP or DCSP ID DCSP of DCSP the DCSP hypervisor. DCSP Starting DCSP with DCSP microversion DCSP 2.53 DCSP the DCSP ID DCSP must DCSP be DCSP a DCSP UUID.')) DCNL @utils.arg('--wrap', dest='wrap', metavar='<integer>', default=40, help=_('Wrap DCSP the DCSP output DCSP to DCSP a DCSP specified DCSP length. DCSP Default DCSP is DCSP 40 DCSP or DCSP 0 DCSP to DCSP disable')) DCNL def do_hypervisor_show(cs, args):
@utils.arg('hypervisor', metavar='<hypervisor>', help=_('Name DCSP or DCSP ID DCSP of DCSP the DCSP hypervisor. DCSP Starting DCSP with DCSP microversion DCSP 2.53 DCSP the DCSP ID DCSP must DCSP be DCSP a DCSP UUID.')) DCNL def do_hypervisor_uptime(cs, args):
def do_hypervisor_stats(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('--port', dest='port', action='store', type=int, default=22, help=_('Optional DCSP flag DCSP to DCSP indicate DCSP which DCSP port DCSP to DCSP use DCSP for DCSP ssh. DCSP (Default=22)')) DCNL @utils.arg('--private', dest='private', action='store_true', default=False, help=argparse.SUPPRESS) DCNL @utils.arg('--address-type', dest='address_type', action='store', type=str, default='floating', help=_('Optional DCSP flag DCSP to DCSP indicate DCSP which DCSP IP DCSP type DCSP to DCSP use. DCSP Possible DCSP values DCSP  DCSP includes DCSP fixed DCSP and DCSP floating DCSP (the DCSP Default).')) DCNL @utils.arg('--network', metavar='<network>', help=_('Network DCSP to DCSP use DCSP for DCSP the DCSP ssh.'), default=None) DCNL @utils.arg('--ipv6', dest='ipv6', action='store_true', default=False, help=_('Optional DCSP flag DCSP to DCSP indicate DCSP whether DCSP to DCSP use DCSP an DCSP IPv6 DCSP address DCSP attached DCSP to DCSP a DCSP server. DCSP (Defaults DCSP to DCSP IPv4 DCSP address)')) DCNL @utils.arg('--login', metavar='<login>', help=_('Login DCSP to DCSP use.'), default='root') DCNL @utils.arg('-i', '--identity', dest='identity', help=_('Private DCSP key DCSP file, DCSP same DCSP as DCSP the DCSP -i DCSP option DCSP to DCSP the DCSP ssh DCSP command.'), default='') DCNL @utils.arg('--extra-opts', dest='extra', help=_('Extra DCSP options DCSP to DCSP pass DCSP to DCSP ssh. DCSP see: DCSP man DCSP ssh.'), default='') DCNL def do_ssh(cs, args):
@utils.arg('--tenant', metavar='<tenant-id>', default=None, help=_('ID DCSP of DCSP tenant DCSP to DCSP list DCSP the DCSP quotas DCSP for.')) DCNL @utils.arg('--user', metavar='<user-id>', default=None, help=_('ID DCSP of DCSP user DCSP to DCSP list DCSP the DCSP quotas DCSP for.')) DCNL @utils.arg('--detail', action='store_true', default=False, help=_('Show DCSP detailed DCSP info DCSP (limit, DCSP reserved, DCSP in-use).')) DCNL def do_quota_show(cs, args):
@utils.arg('--tenant', metavar='<tenant-id>', default=None, help=_('ID DCSP of DCSP tenant DCSP to DCSP list DCSP the DCSP default DCSP quotas DCSP for.')) DCNL def do_quota_defaults(cs, args):
@api_versions.wraps('2.0', '2.35') DCNL @utils.arg('tenant', metavar='<tenant-id>', help=_('ID DCSP of DCSP tenant DCSP to DCSP set DCSP the DCSP quotas DCSP for.')) DCNL @utils.arg('--user', metavar='<user-id>', default=None, help=_('ID DCSP of DCSP user DCSP to DCSP set DCSP the DCSP quotas DCSP for.')) DCNL @utils.arg('--instances', metavar='<instances>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "instances" DCSP quota.')) DCNL @utils.arg('--cores', metavar='<cores>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "cores" DCSP quota.')) DCNL @utils.arg('--ram', metavar='<ram>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "ram" DCSP quota.')) DCNL @utils.arg('--floating-ips', metavar='<floating-ips>', type=int, default=None, action=shell.DeprecatedAction, help=_('New DCSP value DCSP for DCSP the DCSP "floating-ips" DCSP quota.')) DCNL @utils.arg('--fixed-ips', metavar='<fixed-ips>', type=int, default=None, action=shell.DeprecatedAction, help=_('New DCSP value DCSP for DCSP the DCSP "fixed-ips" DCSP quota.')) DCNL @utils.arg('--metadata-items', metavar='<metadata-items>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "metadata-items" DCSP quota.')) DCNL @utils.arg('--injected-files', metavar='<injected-files>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "injected-files" DCSP quota.')) DCNL @utils.arg('--injected-file-content-bytes', metavar='<injected-file-content-bytes>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "injected-file-content-bytes" DCSP quota.')) DCNL @utils.arg('--injected-file-path-bytes', metavar='<injected-file-path-bytes>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "injected-file-path-bytes" DCSP quota.')) DCNL @utils.arg('--key-pairs', metavar='<key-pairs>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "key-pairs" DCSP quota.')) DCNL @utils.arg('--security-groups', metavar='<security-groups>', type=int, default=None, action=shell.DeprecatedAction, help=_('New DCSP value DCSP for DCSP the DCSP "security-groups" DCSP quota.')) DCNL @utils.arg('--security-group-rules', metavar='<security-group-rules>', type=int, default=None, action=shell.DeprecatedAction, help=_('New DCSP value DCSP for DCSP the DCSP "security-group-rules" DCSP quota.')) DCNL @utils.arg('--server-groups', metavar='<server-groups>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "server-groups" DCSP quota.')) DCNL @utils.arg('--server-group-members', metavar='<server-group-members>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "server-group-members" DCSP quota.')) DCNL @utils.arg('--force', dest='force', action='store_true', default=None, help=_('Whether DCSP force DCSP update DCSP the DCSP quota DCSP even DCSP if DCSP the DCSP already DCSP used DCSP and DCSP reserved DCSP exceeds DCSP the DCSP new DCSP quota.')) DCNL def do_quota_update(cs, args):
@api_versions.wraps('2.36') DCNL @utils.arg('tenant', metavar='<tenant-id>', help=_('ID DCSP of DCSP tenant DCSP to DCSP set DCSP the DCSP quotas DCSP for.')) DCNL @utils.arg('--user', metavar='<user-id>', default=None, help=_('ID DCSP of DCSP user DCSP to DCSP set DCSP the DCSP quotas DCSP for.')) DCNL @utils.arg('--instances', metavar='<instances>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "instances" DCSP quota.')) DCNL @utils.arg('--cores', metavar='<cores>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "cores" DCSP quota.')) DCNL @utils.arg('--ram', metavar='<ram>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "ram" DCSP quota.')) DCNL @utils.arg('--metadata-items', metavar='<metadata-items>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "metadata-items" DCSP quota.')) DCNL @utils.arg('--injected-files', metavar='<injected-files>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "injected-files" DCSP quota.')) DCNL @utils.arg('--injected-file-content-bytes', metavar='<injected-file-content-bytes>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "injected-file-content-bytes" DCSP quota.')) DCNL @utils.arg('--injected-file-path-bytes', metavar='<injected-file-path-bytes>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "injected-file-path-bytes" DCSP quota.')) DCNL @utils.arg('--key-pairs', metavar='<key-pairs>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "key-pairs" DCSP quota.')) DCNL @utils.arg('--server-groups', metavar='<server-groups>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "server-groups" DCSP quota.')) DCNL @utils.arg('--server-group-members', metavar='<server-group-members>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "server-group-members" DCSP quota.')) DCNL @utils.arg('--force', dest='force', action='store_true', default=None, help=_('Whether DCSP force DCSP update DCSP the DCSP quota DCSP even DCSP if DCSP the DCSP already DCSP used DCSP and DCSP reserved DCSP exceeds DCSP the DCSP new DCSP quota.')) DCNL def do_quota_update(cs, args):
@utils.arg('--tenant', metavar='<tenant-id>', required=True, help=_('ID DCSP of DCSP tenant DCSP to DCSP delete DCSP quota DCSP for.')) DCNL @utils.arg('--user', metavar='<user-id>', help=_('ID DCSP of DCSP user DCSP to DCSP delete DCSP quota DCSP for.')) DCNL def do_quota_delete(cs, args):
@utils.arg('class_name', metavar='<class>', help=_('Name DCSP of DCSP quota DCSP class DCSP to DCSP list DCSP the DCSP quotas DCSP for.')) DCNL def do_quota_class_show(cs, args):
@api_versions.wraps('2.0', '2.49') DCNL @utils.arg('class_name', metavar='<class>', help=_('Name DCSP of DCSP quota DCSP class DCSP to DCSP set DCSP the DCSP quotas DCSP for.')) DCNL @utils.arg('--instances', metavar='<instances>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "instances" DCSP quota.')) DCNL @utils.arg('--cores', metavar='<cores>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "cores" DCSP quota.')) DCNL @utils.arg('--ram', metavar='<ram>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "ram" DCSP quota.')) DCNL @utils.arg('--floating-ips', metavar='<floating-ips>', type=int, default=None, action=shell.DeprecatedAction, help=_('New DCSP value DCSP for DCSP the DCSP "floating-ips" DCSP quota.')) DCNL @utils.arg('--fixed-ips', metavar='<fixed-ips>', type=int, default=None, action=shell.DeprecatedAction, help=_('New DCSP value DCSP for DCSP the DCSP "fixed-ips" DCSP quota.')) DCNL @utils.arg('--metadata-items', metavar='<metadata-items>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "metadata-items" DCSP quota.')) DCNL @utils.arg('--injected-files', metavar='<injected-files>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "injected-files" DCSP quota.')) DCNL @utils.arg('--injected-file-content-bytes', metavar='<injected-file-content-bytes>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "injected-file-content-bytes" DCSP quota.')) DCNL @utils.arg('--injected-file-path-bytes', metavar='<injected-file-path-bytes>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "injected-file-path-bytes" DCSP quota.')) DCNL @utils.arg('--key-pairs', metavar='<key-pairs>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "key-pairs" DCSP quota.')) DCNL @utils.arg('--security-groups', metavar='<security-groups>', type=int, default=None, action=shell.DeprecatedAction, help=_('New DCSP value DCSP for DCSP the DCSP "security-groups" DCSP quota.')) DCNL @utils.arg('--security-group-rules', metavar='<security-group-rules>', type=int, default=None, action=shell.DeprecatedAction, help=_('New DCSP value DCSP for DCSP the DCSP "security-group-rules" DCSP quota.')) DCNL @utils.arg('--server-groups', metavar='<server-groups>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "server-groups" DCSP quota.')) DCNL @utils.arg('--server-group-members', metavar='<server-group-members>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "server-group-members" DCSP quota.')) DCNL def do_quota_class_update(cs, args):
@api_versions.wraps('2.50') DCNL @utils.arg('class_name', metavar='<class>', help=_('Name DCSP of DCSP quota DCSP class DCSP to DCSP set DCSP the DCSP quotas DCSP for.')) DCNL @utils.arg('--instances', metavar='<instances>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "instances" DCSP quota.')) DCNL @utils.arg('--cores', metavar='<cores>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "cores" DCSP quota.')) DCNL @utils.arg('--ram', metavar='<ram>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "ram" DCSP quota.')) DCNL @utils.arg('--metadata-items', metavar='<metadata-items>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "metadata-items" DCSP quota.')) DCNL @utils.arg('--injected-files', metavar='<injected-files>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "injected-files" DCSP quota.')) DCNL @utils.arg('--injected-file-content-bytes', metavar='<injected-file-content-bytes>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "injected-file-content-bytes" DCSP quota.')) DCNL @utils.arg('--injected-file-path-bytes', metavar='<injected-file-path-bytes>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "injected-file-path-bytes" DCSP quota.')) DCNL @utils.arg('--key-pairs', metavar='<key-pairs>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "key-pairs" DCSP quota.')) DCNL @utils.arg('--server-groups', metavar='<server-groups>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "server-groups" DCSP quota.')) DCNL @utils.arg('--server-group-members', metavar='<server-group-members>', type=int, default=None, help=_('New DCSP value DCSP for DCSP the DCSP "server-group-members" DCSP quota.')) DCNL def do_quota_class_update(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('host', metavar='<host>', nargs='?', help=_('Name DCSP or DCSP ID DCSP of DCSP the DCSP target DCSP host. DCSP  DCSP If DCSP no DCSP host DCSP is DCSP specified, DCSP the DCSP scheduler DCSP will DCSP choose DCSP one.')) DCNL @utils.arg('--password', dest='password', metavar='<password>', help=_('Set DCSP the DCSP provided DCSP admin DCSP password DCSP on DCSP the DCSP evacuated DCSP server. DCSP Not DCSP applicable DCSP if DCSP the DCSP server DCSP is DCSP on DCSP shared DCSP storage.')) DCNL @utils.arg('--on-shared-storage', dest='on_shared_storage', action='store_true', default=False, help=_('Specifies DCSP whether DCSP server DCSP files DCSP are DCSP located DCSP on DCSP shared DCSP storage.'), start_version='2.0', end_version='2.13') DCNL @utils.arg('--force', dest='force', action='store_true', default=False, help=_('Force DCSP to DCSP not DCSP verify DCSP the DCSP scheduler DCSP if DCSP a DCSP host DCSP is DCSP provided.'), start_version='2.29') DCNL def do_evacuate(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_interface_list(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('--port-id', metavar='<port_id>', help=_('Port DCSP ID.'), dest='port_id') DCNL @utils.arg('--net-id', metavar='<net_id>', help=_('Network DCSP ID'), default=None, dest='net_id') DCNL @utils.arg('--fixed-ip', metavar='<fixed_ip>', help=_('Requested DCSP fixed DCSP IP.'), default=None, dest='fixed_ip') DCNL @utils.arg('--tag', metavar='<tag>', default=None, dest='tag', help=_('Tag DCSP for DCSP the DCSP attached DCSP interface.'), start_version='2.49') DCNL def do_interface_attach(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('port_id', metavar='<port_id>', help=_('Port DCSP ID.')) DCNL def do_interface_detach(cs, args):
@api_versions.wraps('2.17') DCNL @utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_trigger_crash_dump(cs, args):
def _treeizeAvailabilityZone(zone):
@utils.service_type('compute') DCNL def do_availability_zone_list(cs, _args):
@utils.arg('--limit', dest='limit', metavar='<limit>', type=int, default=None, help=_("Maximum DCSP number DCSP of DCSP server DCSP groups DCSP to DCSP display. DCSP If DCSP limit DCSP is DCSP bigger DCSP than DCSP 'CONF.api.max_limit' DCSP option DCSP of DCSP Nova DCSP API, DCSP limit DCSP 'CONF.api.max_limit' DCSP will DCSP be DCSP used DCSP instead.")) DCNL @utils.arg('--offset', dest='offset', metavar='<offset>', type=int, default=None, help=_('The DCSP offset DCSP of DCSP groups DCSP list DCSP to DCSP display; DCSP use DCSP with DCSP limit DCSP to DCSP return DCSP a DCSP slice DCSP of DCSP server DCSP groups.')) DCNL @utils.arg('--all-projects', dest='all_projects', action='store_true', default=False, help=_('Display DCSP server DCSP groups DCSP from DCSP all DCSP projects DCSP (Admin DCSP only).')) DCNL def do_server_group_list(cs, args):
@utils.arg('name', metavar='<name>', help=_('Server DCSP group DCSP name.')) DCNL @utils.arg('policy', metavar='<policy>', nargs='+', help=_('Policies DCSP for DCSP the DCSP server DCSP groups.')) DCNL def do_server_group_create(cs, args):
@utils.arg('id', metavar='<id>', nargs='+', help=_('Unique DCSP ID(s) DCSP of DCSP the DCSP server DCSP group DCSP to DCSP delete.')) DCNL def do_server_group_delete(cs, args):
@utils.arg('id', metavar='<id>', help=_('Unique DCSP ID DCSP of DCSP the DCSP server DCSP group DCSP to DCSP get.')) DCNL def do_server_group_get(cs, args):
def do_version_list(cs, args):
@utils.arg('server', metavar='<server>', help=_('ID DCSP of DCSP server.')) DCNL def do_virtual_interface_list(cs, args):
@api_versions.wraps('2.26') DCNL @utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_server_tag_list(cs, args):
@api_versions.wraps('2.26') DCNL @utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('tag', metavar='<tag>', nargs='+', help=_('Tag(s) DCSP to DCSP add.')) DCNL def do_server_tag_add(cs, args):
@api_versions.wraps('2.26') DCNL @utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('tags', metavar='<tags>', nargs='+', help=_('Tag(s) DCSP to DCSP set.')) DCNL def do_server_tag_set(cs, args):
@api_versions.wraps('2.26') DCNL @utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL @utils.arg('tag', metavar='<tag>', nargs='+', help=_('Tag(s) DCSP to DCSP delete.')) DCNL def do_server_tag_delete(cs, args):
@api_versions.wraps('2.26') DCNL @utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP ID DCSP of DCSP server.')) DCNL def do_server_tag_delete_all(cs, args):
@utils.arg('cell', metavar='<cell-name>', help=_('Name DCSP of DCSP the DCSP cell.')) DCNL def do_cell_show(cs, args):
@utils.arg('--cell', metavar='<cell-name>', help=_('Name DCSP of DCSP the DCSP cell DCSP to DCSP get DCSP the DCSP capacities.'), default=None) DCNL def do_cell_capacities(cs, args):
@utils.arg('server', metavar='<server>', help='Name DCSP or DCSP ID DCSP of DCSP server.') DCNL def do_force_delete(cs, args):
@utils.arg('server', metavar='<server>', help='Name DCSP or DCSP ID DCSP of DCSP server.') DCNL def do_restore(cs, args):
@utils.arg('host', metavar='<host>', help='The DCSP hypervisor DCSP hostname DCSP (or DCSP pattern) DCSP to DCSP search DCSP for. DCSP WARNING: DCSP Use DCSP a DCSP fully DCSP qualified DCSP domain DCSP name DCSP if DCSP you DCSP only DCSP want DCSP to DCSP evacuate DCSP from DCSP a DCSP specific DCSP host.') DCNL @utils.arg('--target_host', metavar='<target_host>', default=None, help=_('Name DCSP of DCSP target DCSP host. DCSP If DCSP no DCSP host DCSP is DCSP specified DCSP the DCSP scheduler DCSP will DCSP select DCSP a DCSP target.')) DCNL @utils.arg('--on-shared-storage', dest='on_shared_storage', action='store_true', default=False, help=_('Specifies DCSP whether DCSP all DCSP instances DCSP files DCSP are DCSP on DCSP shared DCSP storage'), start_version='2.0', end_version='2.13') DCNL @utils.arg('--force', dest='force', action='store_true', default=False, help=_('Force DCSP to DCSP not DCSP verify DCSP the DCSP scheduler DCSP if DCSP a DCSP host DCSP is DCSP provided.'), start_version='2.29') DCNL def do_host_evacuate(cs, args):
@utils.arg('host', metavar='<host>', help='The DCSP hypervisor DCSP hostname DCSP (or DCSP pattern) DCSP to DCSP search DCSP for. DCSP WARNING: DCSP Use DCSP a DCSP fully DCSP qualified DCSP domain DCSP name DCSP if DCSP you DCSP only DCSP want DCSP to DCSP live DCSP migrate DCSP from DCSP a DCSP specific DCSP host.') DCNL @utils.arg('--target-host', metavar='<target_host>', default=None, help=_('Name DCSP of DCSP target DCSP host.')) DCNL @utils.arg('--block-migrate', action='store_true', default=False, help=_('Enable DCSP block DCSP migration. DCSP (Default=False)'), start_version='2.0', end_version='2.24') DCNL @utils.arg('--block-migrate', action='store_true', default='auto', help=_('Enable DCSP block DCSP migration. DCSP (Default=auto)'), start_version='2.25') DCNL @utils.arg('--disk-over-commit', action='store_true', default=False, help=_('Enable DCSP disk DCSP overcommit.'), start_version='2.0', end_version='2.24') DCNL @utils.arg('--max-servers', type=int, dest='max_servers', metavar='<max_servers>', help='Maximum DCSP number DCSP of DCSP servers DCSP to DCSP live DCSP migrate DCSP simultaneously') DCNL @utils.arg('--force', dest='force', action='store_true', default=False, help=_('Force DCSP to DCSP not DCSP verify DCSP the DCSP scheduler DCSP if DCSP a DCSP host DCSP is DCSP provided.'), start_version='2.30') DCNL def do_host_evacuate_live(cs, args):
@utils.arg('host', metavar='<host>', help='The DCSP hypervisor DCSP hostname DCSP (or DCSP pattern) DCSP to DCSP search DCSP for. DCSP WARNING: DCSP Use DCSP a DCSP fully DCSP qualified DCSP domain DCSP name DCSP if DCSP you DCSP only DCSP want DCSP to DCSP cold DCSP migrate DCSP from DCSP a DCSP specific DCSP host.') DCNL def do_host_servers_migrate(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP UUID DCSP of DCSP the DCSP server DCSP to DCSP show DCSP actions DCSP for.'), start_version='2.0', end_version='2.20') DCNL @utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP UUID DCSP of DCSP the DCSP server DCSP to DCSP show DCSP actions DCSP for. DCSP Only DCSP UUID DCSP can DCSP be DCSP used DCSP to DCSP show DCSP actions DCSP for DCSP a DCSP deleted DCSP server.'), start_version='2.21') DCNL @utils.arg('request_id', metavar='<request_id>', help=_('Request DCSP ID DCSP of DCSP the DCSP action DCSP to DCSP get.')) DCNL def do_instance_action(cs, args):
@utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP UUID DCSP of DCSP the DCSP server DCSP to DCSP list DCSP actions DCSP for.'), start_version='2.0', end_version='2.20') DCNL @utils.arg('server', metavar='<server>', help=_('Name DCSP or DCSP UUID DCSP of DCSP the DCSP server DCSP to DCSP list DCSP actions DCSP for. DCSP Only DCSP UUID DCSP can DCSP be DCSP used DCSP to DCSP list DCSP actions DCSP on DCSP a DCSP deleted DCSP server.'), start_version='2.21') DCNL def do_instance_action_list(cs, args):
def do_list_extensions(cs, _args):
@utils.arg('host', metavar='<host>', help='The DCSP hypervisor DCSP hostname DCSP (or DCSP pattern) DCSP to DCSP search DCSP for. DCSP WARNING: DCSP Use DCSP a DCSP fully DCSP qualified DCSP domain DCSP name DCSP if DCSP you DCSP only DCSP want DCSP to DCSP update DCSP metadata DCSP for DCSP servers DCSP on DCSP a DCSP specific DCSP host.') DCNL @utils.arg('action', metavar='<action>', choices=['set', 'delete'], help=_("Actions: DCSP 'set' DCSP or DCSP 'delete'")) DCNL @utils.arg('metadata', metavar='<key=value>', nargs='+', action='append', default=[], help=_('Metadata DCSP to DCSP set DCSP or DCSP delete DCSP (only DCSP key DCSP is DCSP necessary DCSP on DCSP delete)')) DCNL def do_host_meta(cs, args):
@utils.arg('--instance-uuid', dest='instance_uuid', metavar='<instance_uuid>', help=_('Fetch DCSP migrations DCSP for DCSP the DCSP given DCSP instance.')) DCNL @utils.arg('--host', dest='host', metavar='<host>', help=_('Fetch DCSP migrations DCSP for DCSP the DCSP given DCSP host.')) DCNL @utils.arg('--status', dest='status', metavar='<status>', help=_('Fetch DCSP migrations DCSP for DCSP the DCSP given DCSP status.')) DCNL def do_migration_list(cs, args):
def warn(alternative=True):
def from_response(response, body, url, method=None):
def is_keystone_version_available(session, version):
def pick_flavor(flavors):
def discover_extensions(*args, **kwargs):
def get_client_class(version):
def _check_arguments(kwargs, release, deprecated_name, right_name=None):
def Client(version, username=None, password=None, project_id=None, auth_url=None, **kwargs):
def decrypt_password(private_key, password):
def check_major_version(api_version):
def get_api_version(version_string):
def discover_version(client, requested_version):
def update_headers(headers, api_version):
def check_headers(response, api_version):
def _warn_missing_microversion_header(header_name):
def is_revoked(events, token_data):
def matches(event, token_values):
def primary_key_hash(keys):
def assert_admin(app, request):
def check_protection(controller, request, prep_info, target_attr=None, *args, **kwargs):
def get_token_ref(context):
def resource_uuid(value):
def flatten_dict(d, parent_key=''):
def attr_as_boolean(val_attr):
def unixtime(dt_obj):
def auth_str_equal(provided, known):
def get_unix_user(user=None):
def get_unix_group(group=None):
def set_permissions(path, mode=None, user=None, group=None, log=None):
def make_dirs(path, mode=None, user=None, group=None, log=None):
def isotime(at=None, subsecond=False):
def is_not_url_safe(name):
def list_url_unsafe_chars(name):
def lower_case_hostname(url):
def format_url(url, substitutions, silent_keyerror_failures=None):
def check_endpoint_url(url):
def translate_urls(json_home, new_prefix):
def enforce(credentials, action, target, do_raise=True):
def provider(name):
def requires(*dependencies):
def resolve_future_dependencies(__provider_name=None):
def reset():
def response_truncated(f):
def setup(name, host='0.0.0.0'):
def verify_length_and_trunc_password(password):
def check_password(password, hashed):
def hash_user_password(user):
def hash_password(password):
def truncated(f):
def register_admin_extension(url_prefix, extension_data):
def register_public_extension(url_prefix, extension_data):
def lazy_validate(request_body_schema, resource_to_validate):
def nullable(property_schema):
def add_array_type(property_schema):
def best_match_language(req):
def render_response(body=None, status=None, headers=None, method=None):
def render_exception(error, context=None, request=None, user_locale=None):
def create_region(name):
def _sha1_mangle_key(key):
def _register_model_handler(handler_class):
def ref_mapper_to_dict_options(ref):
def resource_options_ref_to_mapper(ref, option_class):
def initialize():
def initialize_decorator(init):
def _filter(model, query, hints):
def _limit(query, hints):
def filter_limit_query(model, query, hints):
def handle_conflicts(conflict_type='object'):
def rename_tables_with_constraints(renames, constraints, engine):
def find_repo(repo_name):
def get_init_version(abs_path=None):
def offline_sync_database_to_version(version=None):
def validate_upgrade_order(repo_name, target_repo_version=None):
def expand_schema():
def migrate_data():
def contract_schema():
def upgrade(migrate_engine):
def protected(callback=None):
def filterprotected(*filters, **callback):
def get_project_from_domain(domain_ref):
def default_expire_time():
def random_urlsafe_str():
def build_audit_info(parent_audit_id=None):
def authentication_method_generator(request, auth):
def _expiry_range_batched(session, upper_bound_func, batch_size):
def _expiry_range_all(session, upper_bound_func):
def filter_token(access_token_ref):
def filter_consumer(consumer_ref):
def run_once(f):
@run_once DCNL def _load_sqlalchemy_models():
def skip_if_cache_disabled(*sections):
def skip_if_no_multiple_domains_support(f):
def new_endpoint_ref_with_region(service_id, region, interface='public', **kwargs):
def create_user(api, domain_id, **kwargs):
def register_callback(operation, resource_type=EXP_RESOURCE_TYPE):
def new_uuid():
def wip(message, expected_exception=Exception, bug=None):
def _build_user_auth(token=None, user_id=None, username=None, password=None, tenant_id=None, tenant_name=None, trust_id=None):
def list_id_mappings():
def _match_query(query, attrs, attrs_checked):
def _paren_groups(source):
def _match(key, value, attrs):
def _subs(value):
def block_comments_begin_with_a_space(physical_line, line_number):
def dict_constructor_with_sequence_copy(logical_line):
def fmt(docstr):
def set_default_for_default_log_levels():
def setup_logging():
def set_external_opts_defaults():
def set_config_defaults():
def _tupleize(d):
def _process_old_opts(configs):
def setup_authentication(conf=None):
def domains_configured(f):
def exception_translated(exception_type):
def filter_user(user_ref):
def utf8_encode(value):
def utf8_decode(value):
def py2ldap(val):
def enabled2py(val):
def ldap2py(val):
def convert_ldap_result(ldap_result):
def prep_case_insensitive(value):
def is_ava_value_equal(attribute_type, val1, val2):
def is_rdn_equal(rdn1, rdn2):
def is_dn_equal(dn1, dn2):
def dn_startswith(descendant_dn, dn):
def _common_ldap_initialization(url, use_tls=False, tls_cacertfile=None, tls_cacertdir=None, tls_req_cert=None, debug_level=None, timeout=None):
def use_conn_pool(func):
def filter_entity(entity_ref):
def fail_gracefully(f):
def find_paste_config():
def _sign_assertion(assertion):
def validate_idp(idp, protocol, assertion):
def validate_mapped_group_ids(group_ids, mapping_id, identity_api):
def transform_to_group_ids(group_names, mapping_id, identity_api, resource_api):
def symptom_unique_key_repositories():
def symptom_usability_of_credential_fernet_key_repository():
def symptom_keys_in_credential_fernet_key_repository():
def symptom_caching_disabled():
def symptom_caching_enabled_without_a_backend():
def diagnose():
def gather_symptoms():
def symptom_database_connection_is_not_SQLite():
def symptom_LDAP_user_enabled_emulation_dn_ignored():
def symptom_LDAP_user_enabled_emulation_use_group_config_ignored():
def symptom_LDAP_group_members_are_ids_disabled():
def symptom_LDAP_file_based_domain_specific_configs():
def symptom_LDAP_file_based_domain_specific_configs_formatted_correctly():
def symptom_comma_in_SAML_public_certificate_path():
def symptom_comma_in_SAML_private_key_file_path():
def symptom_usability_of_Fernet_key_repository():
def symptom_keys_in_Fernet_key_repository():
def symptom_unreasonable_max_token_size():
def symptom_debug_mode_is_enabled():
def symptom_minimum_password_age_greater_than_expires_days():
def symptom_invalid_password_regular_expression():
def symptom_password_regular_expression_description_not_set():
def _domain_config_finder(conf_dir):
def _get_callback_info(callback):
def register_event_callback(event, resource_type, callbacks):
def listener(cls):
def notify_event_callbacks(service, resource_type, operation, payload):
def _get_notifier():
def clear_subscribers():
def reset_notifier():
def _create_cadf_payload(operation, resource_type, resource_id, outcome, initiator, reason=None):
def _send_notification(operation, resource_type, resource_id, actor_dict=None, public=True):
def _get_request_audit_info(context, user_id=None):
def send_saml_audit_notification(action, request, user_id, group_ids, identity_provider, protocol, token_id, outcome):
def _send_audit_notification(action, initiator, outcome, target, event_type, reason=None, **kwargs):
def _check_notification_opt_out(event_type, outcome):
def render_token_data_response(token_id, token_data, created=False):
def _generate_totp_passcode(secret):
def construct_method_map_from_config():
def convert_method_list_to_integer(methods):
def convert_integer_to_method_list(method_int):
def get_user_unique_id_and_display_name(request, mapped_properties):
def run_build():
def no_log_warn(logical_line):
def debian_package_install(packages):
@register.filter(is_safe=True) DCNL @defaultfilters.stringfilter DCNL def shellfilter(value):
@receiver(post_compress) DCNL def update_angular_template_hash(sender, **kwargs):
@register.filter(name='angular_escapes') DCNL def angular_escapes(value):
@register.inclusion_tag('angular/angular_templates.html', takes_context=True) DCNL def angular_templates(context):
@register.filter DCNL def has_permissions(user, component):
@register.inclusion_tag('horizon/_nav_list.html', takes_context=True) DCNL def horizon_main_nav(context):
@register.inclusion_tag('horizon/_subnav_list.html', takes_context=True) DCNL def horizon_dashboard_nav(context):
@register.tag DCNL def jstemplate(parser, token):
@register.tag DCNL def minifyspace(parser, token):
@register.inclusion_tag('bootstrap/breadcrumb.html', takes_context=True) DCNL def breadcrumb_nav(context):
@register.filter DCNL def add_bootstrap_class(field):
@register.inclusion_tag('bootstrap/progress_bar.html') DCNL def bs_progress_bar(*args, **kwargs):
def check_message(keywords, message):
def handle(request, message=None, redirect=None, ignore=False, escalate=False, log_level=None, force_log=None):
def horizon(request):
def add_message(request, level, message, extra_tags='', fail_silently=False):
def debug(request, message, extra_tags='', fail_silently=False):
def info(request, message, extra_tags='', fail_silently=False):
def success(request, message, extra_tags='', fail_silently=False):
def warning(request, message, extra_tags='', fail_silently=False):
def error(request, message, extra_tags='', fail_silently=False):
def single_line(text):
def process_message_notification(request, messages_path):
def _current_component(view_func, dashboard=None, panel=None):
def require_auth(view_func):
def require_perms(view_func, required):
def user_home(request):
def generate_key(key_length=64):
def generate_or_read_from_file(key_file='.secret_key', key_length=64):
def import_setting(name):
def extract_angular(fileobj, keywords, comment_tags, options):
def is_supported(unit):
def is_larger(unit_1, unit_2):
def convert(value, source_unit, target_unit, fmt=False):
def normalize(value, unit):
def discover_files(base_path, sub_path='', ext='', trim_base_path=False):
def sort_js_files(js_files):
def discover_static_files(base_path, sub_path=''):
def _log(file_list, list_name, in_path):
@register.filter DCNL def timesince_or_never(dt, default=None):
def logout_with_message(request, msg, redirect=True, status='success'):
def get_config_value(request, key, default, search_in_settings=True):
def save_config_value(request, response, key, value):
def get_keys(tuple_of_tuples):
def value_for_key(tuple_of_tuples, key):
def next_key(tuple_of_tuples, key):
def previous_key(tuple_of_tuples, key):
def format_value(value):
def _try_weakref(arg, remove_callback):
def _get_key(args, kwargs, remove_callback):
def memoized(func):
def memoized_with_request(request_func, request_index=0):
def validate_port_or_colon_separated_port_range(port_range):
def get_module_path(module_name):
def _getattr(obj, name, default):
def _get_endpoint_region(endpoint):
def keystoneclient(request, admin=False):
def get_default_domain(request, get_name=True):
def get_effective_domain_id(request):
def get_project_groups_roles(request, project):
@profiler.trace DCNL def role_list(request, filters=None):
@profiler.trace DCNL def roles_for_user(request, user, project=None, domain=None):
@profiler.trace DCNL def add_domain_user_role(request, user, role, domain):
@profiler.trace DCNL def remove_domain_user_role(request, user, role, domain=None):
@profiler.trace DCNL def add_tenant_user_role(request, project=None, user=None, role=None, group=None, domain=None):
@profiler.trace DCNL def remove_tenant_user_role(request, project=None, user=None, role=None, group=None, domain=None):
def remove_tenant_user(request, project=None, user=None, domain=None):
@profiler.trace DCNL def add_group_role(request, role, group, domain=None, project=None):
@profiler.trace DCNL def remove_group_role(request, role, group, domain=None, project=None):
@profiler.trace DCNL def remove_group_roles(request, group, domain=None, project=None):
def get_default_role(request):
@profiler.trace DCNL def volume_list_paged(request, search_opts=None, marker=None, paginate=False, sort_dir='desc'):
@memoized DCNL def volume_backup_supported(request):
@memoized_with_request(list_extensions) DCNL def extension_supported(extensions, extension_name):
@profiler.trace DCNL def transfer_list(request, detailed=True, search_opts=None):
def get_auth_params_from_request(request):
def upgrade_api(request, client, version):
@profiler.trace DCNL @memoized DCNL def flavor_list(request, is_public=True, get_extras=False):
@profiler.trace DCNL @memoized DCNL def flavor_list_paged(request, is_public=True, get_extras=False, marker=None, paginate=False, sort_key='name', sort_dir='desc', reversed_order=False):
@profiler.trace DCNL @memoized_with_request(novaclient) DCNL def flavor_access_list(nova_api, flavor=None):
@profiler.trace DCNL def add_tenant_to_flavor(request, flavor, tenant):
@profiler.trace DCNL def remove_tenant_from_flavor(request, flavor, tenant):
@profiler.trace DCNL def flavor_get_extras(request, flavor_id, raw=False, flavor=None):
@profiler.trace DCNL def flavor_extra_delete(request, flavor_id, keys):
@profiler.trace DCNL def flavor_extra_set(request, flavor_id, metadata):
@profiler.trace DCNL def server_console_output(request, instance_id, tail_length=None):
@profiler.trace DCNL @memoized_with_request(novaclient) DCNL def list_extensions(nova_api):
@profiler.trace DCNL @memoized_with_request(list_extensions, 1) DCNL def extension_supported(extension_name, extensions):
@profiler.trace DCNL def can_set_mount_point():
def _objectify(items, container_name):
@profiler.trace DCNL def image_get(request, image_id):
@profiler.trace DCNL def image_list_detailed(request, marker=None, sort_dir='desc', sort_key='created_at', filters=None, paginate=False, reversed_order=False, **kwargs):
@profiler.trace DCNL def image_create(request, **kwargs):
@profiler.trace DCNL def image_update_properties(request, image_id, remove_props=None, **kwargs):
@profiler.trace DCNL def image_delete_properties(request, image_id, keys):
def filter_properties_target(namespaces_iter, resource_types, properties_target):
@profiler.trace DCNL def metadefs_namespace_list(request, filters=None, sort_dir='asc', sort_key='namespace', marker=None, paginate=False):
def get_microversion_for_feature(service, feature, wrapper_class, min_ver, max_ver):
def get_ipver_str(ip_version):
@profiler.trace DCNL def list_resources_with_long_filters(list_method, filter_attr, filter_values, **params):
@profiler.trace DCNL def network_list_for_tenant(request, tenant_id, include_external=False, **params):
@profiler.trace DCNL def network_create(request, **kwargs):
@profiler.trace DCNL def subnet_create(request, network_id, **kwargs):
@profiler.trace DCNL def subnetpool_create(request, name, prefixes, **kwargs):
@profiler.trace DCNL def port_create(request, network_id, **kwargs):
def servers_update_addresses(request, servers, all_tenants=False):
def get_feature_permission(request, feature, operation=None):
def policy_create(request, **kwargs):
def policy_list(request, **kwargs):
@profiler.trace DCNL def policy_get(request, policy_id, **kwargs):
def ajax(authenticated=True, data_required=False, json_encoder=json.JSONEncoder):
def parse_filters_kwargs(request, client_keywords=None):
def post2data(func):
def register(view):
def servers_update_addresses(request, servers, all_tenants=False):
@profiler.trace DCNL @memoized DCNL def tenant_quota_usages(request, tenant_id=None, targets=None):
def enabled_quotas(request):
def get_project_name(project_id, projects):
def check(actions, request, target=None):
def create_upload_form_attributes(prefix, input_type, name):
def get_resource_image(status, type):
def get_console(request, console_type, instance):
def flavor_list(request):
def sort_flavor_list(request, flavors):
def availability_zone_list(request):
def server_group_list(request):
def network_field_data(request, include_empty_option=False):
def keypair_field_data(request, include_empty_option=False):
def flavor_field_data(request, include_empty_option=False):
def port_field_data(request):
def server_group_field_data(request):
def availability_zone_list(request):
def get_available_images(request, project_id=None, images_cache=None):
def image_field_data(request, include_empty_option=False):
def create_image_metadata(data):
def get_context(request, context=None):
def openstack(request):
def setup_hook(config):
def gen_random_resource_name(resource='', timestamp=True):
@contextlib.contextmanager DCNL def gen_temporary_file(name='', suffix='.qcow2', size=10485760):
def bind_table_action(action_name):
def bind_row_action(action_name):
def bind_row_anchor_column(column_name):
def _mark_method_skipped(meth, reason):
def _mark_class_skipped(cls, reason):
def _get_skip_method(obj):
def services_required(*req_services):
def _parse_compound_config_option_value(option_name):
def skip_because(**kwargs):
def attach_video(func):
def mock_factory(r):
def create_stubs(stubs_to_create=None):
def _apply_panel_mocks(patchers=None):
def mock_factory(r):
def import_submodules(module):
def import_dashboard_config(modules):
def update_dashboards(modules, horizon_config, installed_apps):
def get_xstatic_dirs(XSTATIC_MODULES, HORIZON_CONFIG):
def get_int_or_uuid(value):
def get_display_label(choices, status):
def get_domain_id_for_operation(request):
def get_config():
def make_config():
def get_inventory(clean=True, extra_args=None):
def args(arg_list):
def args():
def main():
def main():
def main():
def get_package_version(pypiConn, pkg_name):
def main():
def update_variables(old_contents):
def TestUrl(workQueue, resultQueue):
def args():
def get_all_groups(inventory):
def get_groups_for_container(inventory, container_name):
def get_containers_for_group(inventory, group):
def print_groups_per_container(inventory):
def print_containers_per_group(inventory):
def print_inventory(inventory, sort_key):
def export_host_info(inventory):
def remove_ip_addresses(inventory, filepath=None):
def remove_inventory_item(remove_item, inventory, filepath=None):
def main():
def get_ip_address(name, ip_q):
def load_ip_q(cidr, ip_q):
def load_optional_q(config, cidr_name):
def set_used_ips(user_defined_config, inventory):
def _get_search_paths(preferred_path=None, suffix=None):
def file_find(filename, preferred_path=None, raise_if_missing=True):
def dir_find(preferred_path=None, suffix=None, raise_if_missing=True):
def _extra_config(user_defined_config, base_dir):
def _make_backup(backup_path, source_file_path):
def _get_backup_name(basename):
def write_hostnames(save_path, hostnames_ips):
def _load_from_json(filename, preferred_path=None, raise_if_missing=True):
def load_inventory(preferred_path=None, default_inv=None, filename=None):
def save_inventory(inventory_json, save_path):
def load_environment(config_path, environment):
def load_user_configuration(config_path=None):
def merge_dict(base_items, new_items):
def append_if(array, item):
def recursive_list_removal(base_list, purge_list):
def recursive_dict_removal(inventory, purge_list):
def make_example_config(aio_config_file, configs_dir):
def write_example_config(filename, config):
def _parse_belongs_to(key, belongs_to, inventory):
def _build_container_hosts(container_affinity, container_hosts, type_and_name, inventory, host_type, container_type, container_host_type, physical_host_type, config, properties, assignment):
def _append_container_types(inventory, host_type):
def _append_to_host_groups(inventory, container_type, assignment, host_type, type_and_name, host_options):
def _add_container_hosts(assignment, config, container_name, container_type, inventory, properties):
def user_defined_setup(config, inventory):
def skel_setup(environment, inventory):
def skel_load(skeleton, inventory):
def network_entry(is_metal, interface, bridge=None, net_type=None, net_mtu=None):
def _add_additional_networks(key, inventory, ip_q, q_name, netmask, interface, bridge, net_type, net_mtu, user_config, is_ssh_address, is_container_address, static_routes, reference_group, address_prefix):
def container_skel_load(container_skel, inventory, config):
def populate_lxc_hosts(inventory):
def _find_lxc_hosts(inventory):
def _ensure_inventory_uptodate(inventory, container_skel):
def _parse_global_variables(user_cidr, inventory, user_defined_config):
def _check_same_ip_to_multiple_host(config):
def _check_multiple_ips_to_host(config):
def _check_group_branches(config, physical_skel):
def _check_config_settings(cidr_networks, config, container_skel):
def _check_all_conf_groups_present(config, environment):
def main(config=None, check=False, debug=False, environment=None, **kwargs):
def collect_driver_info(driver):
def output_dict():
def create_zone_manager():
def get_formatted_wwn(wwn_str):
def add_fc_zone(initialize_connection):
def remove_fc_zone(terminate_connection):
def get_friendly_zone_name(zoning_policy, initiator, target, host_name, storage_system, zone_name_prefix, supported_chars):
def set_middleware_defaults():
def _get_default_column_value(model, column_name):
def paginate_query(query, model, limit, sort_keys, marker=None, sort_dir=None, sort_dirs=None, offset=None):
def pipeline_factory(loader, global_conf, **local_conf):
def load_standard_extensions(ext_mgr, logger, path, package, ext_list=None):
def validate_key_names(key_names_list):
def get_pagination_params(params, max_limit=None):
def _get_limit_param(params, max_limit=None):
def _get_marker_param(params):
def _get_offset_param(params):
def limited(items, request, max_limit=None):
def limited_by_marker(items, request, max_limit=None):
def get_sort_params(params, default_key='created_at', default_dir='desc'):
def remove_version_from_href(href):
def get_cluster_host(req, params, cluster_version=None):
def get_enabled_resource_filters(resource=None):
def serializers(**serializers):
def deserializers(**deserializers):
def response(code):
def action_peek_json(body):
def action(name):
def extends(*args, **kwargs):
def create_resource(ext_mgr):
def create_resource(ext_mgr):
def _attachment_v2_to_v1(vol):
def _volume_v2_to_v1(volv2_results, image_id=None):
def _snapshot_v2_to_v1(snapv2_result):
def _update_search_opts(req):
def unquote_header_value(value):
def parse_list_header(value):
def parse_options_header(value):
def _list_hosts(req, service=None):
def check_host(fn):
def upgrade(migrate_engine):
def upgrade(migrate_engine):
def upgrade(migrate_engine):
def upgrade(migrate_engine):
def upgrade(migrate_engine):
def upgrade(migrate_engine):
def upgrade(migrate_engine):
def get_backend():
def is_admin_context(context):
def is_user_context(context):
def authorize_project_context(context, project_id):
def authorize_user_context(context, user_id):
def authorize_quota_class_context(context, class_name):
def require_admin_context(f):
def require_context(f):
def require_volume_exists(f):
def require_snapshot_exists(f):
def require_backup_exists(f):
def _retry_on_deadlock(f):
def model_query(context, model, *args, **kwargs):
def _filter_host(field, value, match_level=None):
@require_admin_context DCNL def service_get(context, service_id=None, backend_match_level=None, **filters):
@require_admin_context DCNL def service_get_all(context, backend_match_level=None, **filters):
@require_admin_context DCNL def is_backend_frozen(context, host, cluster_name):
@require_admin_context DCNL def cluster_get(context, id=None, is_up=None, get_services=False, services_summary=False, read_deleted='no', name_match_level=None, **filters):
@require_admin_context DCNL def cluster_get_all(context, is_up=None, get_services=False, services_summary=False, read_deleted='no', name_match_level=None, **filters):
@require_admin_context DCNL def cluster_create(context, values):
@require_admin_context DCNL @_retry_on_deadlock DCNL def cluster_update(context, id, values):
@require_admin_context DCNL def cluster_destroy(context, id):
def _dict_with_extra_specs_if_authorized(context, inst_type_query):
def _dict_with_group_specs_if_authorized(context, inst_type_query):
def _quota_reservations(session, context, reservations):
def quota_destroy_by_project(*args, **kwargs):
@require_admin_context DCNL @_retry_on_deadlock DCNL def quota_destroy_all_by_project(context, project_id, only_quotas=False):
@require_admin_context DCNL def volume_attached(context, attachment_id, instance_uuid, host_name, mountpoint, attach_mode='rw'):
def _include_in_cluster(context, cluster, model, partial_rename, filters):
@require_admin_context DCNL def volume_include_in_cluster(context, cluster, partial_rename=True, **filters):
@require_admin_context DCNL def volume_detached(context, volume_id, attachment_id):
def _process_model_like_filter(model, query, filters):
@require_context DCNL def _volume_get_query(context, session=None, project_only=False, joined_load=True):
@require_admin_context DCNL def volume_attachment_get_all(context, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
@require_context DCNL def volume_attachment_get(context, attachment_id):
@require_context DCNL def volume_attachment_get_all_by_instance_uuid(context, instance_uuid):
@require_context DCNL def volume_attachment_get_all_by_project(context, project_id, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
@require_admin_context DCNL @_retry_on_deadlock DCNL def attachment_destroy(context, attachment_id):
@require_context DCNL def attachment_specs_get(context, attachment_id):
@require_context DCNL def attachment_specs_delete(context, attachment_id, key):
@handle_db_data_error DCNL @require_context DCNL def attachment_specs_update_or_create(context, attachment_id, specs):
@require_admin_context DCNL def volume_get_all(context, marker=None, limit=None, sort_keys=None, sort_dirs=None, filters=None, offset=None):
@require_context DCNL def get_volume_summary(context, project_only):
@require_admin_context DCNL def volume_get_all_by_host(context, host, filters=None):
@require_context DCNL def volume_get_all_by_group(context, group_id, filters=None):
@require_context DCNL def volume_get_all_by_generic_group(context, group_id, filters=None):
@require_context DCNL def volume_get_all_by_project(context, project_id, marker, limit, sort_keys=None, sort_dirs=None, filters=None, offset=None):
def _generate_paginate_query(context, session, marker, limit, sort_keys, sort_dirs, filters, offset=None, paginate_type=models.Volume):
@apply_like_filters(model=models.Volume) DCNL def _process_volume_filters(query, filters):
def process_sort_params(sort_keys, sort_dirs, default_keys=None, default_dir='asc'):
def volume_update_status_based_on_attachment(context, volume_id):
def volume_qos_allows_retype(new_vol_type):
@require_admin_context DCNL def snapshot_get_all(context, filters=None, marker=None, limit=None, sort_keys=None, sort_dirs=None, offset=None):
@require_context DCNL def snapshot_get_all_by_project(context, project_id, filters=None, marker=None, limit=None, sort_keys=None, sort_dirs=None, offset=None):
@require_context DCNL def snapshot_get_all_active_by_window(context, begin, end=None, project_id=None):
@handle_db_data_error DCNL @require_admin_context DCNL def volume_type_create(context, values, projects=None):
@handle_db_data_error DCNL @require_admin_context DCNL def group_type_create(context, values, projects=None):
@require_context DCNL def volume_type_get_all(context, inactive=False, filters=None, marker=None, limit=None, sort_keys=None, sort_dirs=None, offset=None, list_result=False):
@require_context DCNL def group_type_get_all(context, inactive=False, filters=None, marker=None, limit=None, sort_keys=None, sort_dirs=None, offset=None, list_result=False):
@require_context DCNL def volume_type_get(context, id, inactive=False, expected_fields=None):
@require_context DCNL def group_type_get(context, id, inactive=False, expected_fields=None):
def _volume_type_get_full(context, id):
def _group_type_get_full(context, id):
@require_context DCNL def volume_type_get_by_name(context, name):
@require_context DCNL def group_type_get_by_name(context, name):
@require_context DCNL def volume_types_get_by_name_or_id(context, volume_type_list):
@require_context DCNL def group_types_get_by_name_or_id(context, group_type_list):
@require_admin_context DCNL def volume_type_qos_disassociate(context, qos_specs_id, type_id):
@require_admin_context DCNL def volume_type_qos_disassociate_all(context, qos_specs_id):
@require_admin_context DCNL def volume_type_qos_specs_get(context, type_id):
@require_context DCNL def volume_get_all_active_by_window(context, begin, end=None, project_id=None):
@require_admin_context DCNL def volume_type_access_add(context, type_id, project_id):
@require_admin_context DCNL def group_type_access_add(context, type_id, project_id):
@require_admin_context DCNL def volume_type_access_remove(context, type_id, project_id):
@require_admin_context DCNL def group_type_access_remove(context, type_id, project_id):
@require_admin_context DCNL def qos_specs_create(context, values):
def _dict_with_children_specs(specs):
def _dict_with_qos_specs(rows):
@require_admin_context DCNL def qos_specs_get_all(context, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
@require_admin_context DCNL def qos_specs_associations_get(context, qos_specs_id):
@require_admin_context DCNL def qos_specs_associate(context, qos_specs_id, type_id):
@require_admin_context DCNL def qos_specs_disassociate(context, qos_specs_id, type_id):
@require_admin_context DCNL def qos_specs_disassociate_all(context, qos_specs_id):
@handle_db_data_error DCNL @require_admin_context DCNL def qos_specs_update(context, qos_specs_id, updates):
@require_context DCNL def volume_encryption_metadata_get(context, volume_id, session=None):
@require_context DCNL def volume_glance_metadata_get_all(context):
@require_context DCNL def volume_glance_metadata_list_get(context, volume_id_list):
@require_context DCNL def volume_glance_metadata_get(context, volume_id):
@require_context DCNL def volume_snapshot_glance_metadata_get(context, snapshot_id):
@require_context DCNL @require_volume_exists DCNL def volume_glance_metadata_create(context, volume_id, key, value):
@require_context DCNL @require_volume_exists DCNL def volume_glance_metadata_bulk_create(context, volume_id, metadata):
@require_context DCNL @require_snapshot_exists DCNL def volume_glance_metadata_copy_to_snapshot(context, snapshot_id, volume_id):
@require_context DCNL def volume_glance_metadata_copy_from_volume_to_volume(context, src_volume_id, volume_id):
@require_context DCNL @require_volume_exists DCNL def volume_glance_metadata_copy_to_volume(context, volume_id, snapshot_id):
@require_context DCNL def backup_get_all_active_by_window(context, begin, end=None, project_id=None):
@require_admin_context DCNL def consistencygroup_get_all(context, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
@require_context DCNL def consistencygroup_get_all_by_project(context, project_id, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
def cg_has_cgsnapshot_filter():
def cg_has_volumes_filter(attached_or_with_snapshots=False):
def cg_creating_from_src(cg_id=None, cgsnapshot_id=None):
@require_admin_context DCNL def consistencygroup_include_in_cluster(context, cluster, partial_rename=True, **filters):
@require_admin_context DCNL def group_include_in_cluster(context, cluster, partial_rename=True, **filters):
@require_admin_context DCNL def group_get_all(context, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
@require_context DCNL def group_get_all_by_project(context, project_id, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
@handle_db_data_error DCNL @require_context DCNL def group_volume_type_mapping_create(context, group_id, volume_type_id):
def is_valid_model_filters(model, filters, exclude_list=None):
def cgsnapshot_creating_from_src():
def group_snapshot_creating_from_src():
@require_admin_context DCNL def purge_deleted_rows(context, age_in_days):
def _translate_message(message):
@require_context DCNL def message_get_all(context, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
@require_admin_context DCNL def image_volume_cache_include_in_cluster(context, cluster, partial_rename=True, **filters):
def workers_init():
def worker_create(context, **values):
def worker_get(context, **filters):
def worker_get_all(context, **filters):
def worker_update(context, id, filters=None, orm_worker=None, **values):
def worker_claim_for_cleanup(context, claimer_id, orm_worker):
def worker_destroy(context, **filters):
def condition_db_filter(model, field, value):
def condition_not_db_filter(model, field, value, auto_none=True):
def is_orm_value(obj):
def _check_is_not_multitable(values, model):
@require_context DCNL @_retry_on_deadlock DCNL def conditional_update(context, model, values, expected_values, filters=(), include_deleted='no', project_only=False, order=None):
def dispose_engine():
def service_destroy(context, service_id):
def service_get(context, service_id=None, backend_match_level=None, **filters):
def service_get_all(context, backend_match_level=None, **filters):
def service_create(context, values):
def service_update(context, service_id, values):
def is_backend_frozen(context, host, cluster_name):
def cluster_get(context, id=None, is_up=None, get_services=False, services_summary=False, read_deleted='no', name_match_level=None, **filters):
def cluster_get_all(context, is_up=None, get_services=False, services_summary=False, read_deleted='no', name_match_level=None, **filters):
def cluster_create(context, values):
def cluster_update(context, id, values):
def cluster_destroy(context, id):
def volume_attach(context, values):
def volume_attached(context, volume_id, instance_id, host_name, mountpoint, attach_mode='rw'):
def volume_create(context, values):
def volume_data_get_for_host(context, host, count_only=False):
def volume_data_get_for_project(context, project_id):
def volume_destroy(context, volume_id):
def volume_detached(context, volume_id, attachment_id):
def volume_get(context, volume_id):
def volume_get_all(context, marker=None, limit=None, sort_keys=None, sort_dirs=None, filters=None, offset=None):
def volume_get_all_by_host(context, host, filters=None):
def volume_get_all_by_group(context, group_id, filters=None):
def volume_get_all_by_generic_group(context, group_id, filters=None):
def volume_get_all_by_project(context, project_id, marker, limit, sort_keys=None, sort_dirs=None, filters=None, offset=None):
def get_volume_summary(context, project_only):
def volume_update(context, volume_id, values):
def volumes_update(context, values_list):
def volume_include_in_cluster(context, cluster, partial_rename=True, **filters):
def attachment_destroy(context, attachment_id):
def volume_update_status_based_on_attachment(context, volume_id):
def snapshot_create(context, values):
def snapshot_destroy(context, snapshot_id):
def snapshot_get(context, snapshot_id):
def snapshot_get_all(context, filters=None, marker=None, limit=None, sort_keys=None, sort_dirs=None, offset=None):
def snapshot_get_all_by_project(context, project_id, filters=None, marker=None, limit=None, sort_keys=None, sort_dirs=None, offset=None):
def snapshot_get_all_by_host(context, host, filters=None):
def snapshot_get_all_for_cgsnapshot(context, project_id):
def snapshot_get_all_for_group_snapshot(context, group_snapshot_id):
def snapshot_get_all_for_volume(context, volume_id):
def snapshot_get_latest_for_volume(context, volume_id):
def snapshot_update(context, snapshot_id, values):
def snapshot_data_get_for_project(context, project_id, volume_type_id=None):
def snapshot_get_all_active_by_window(context, begin, end=None, project_id=None):
def snapshot_metadata_get(context, snapshot_id):
def snapshot_metadata_delete(context, snapshot_id, key):
def snapshot_metadata_update(context, snapshot_id, metadata, delete):
def volume_metadata_get(context, volume_id):
def volume_metadata_delete(context, volume_id, key, meta_type=common.METADATA_TYPES.user):
def volume_metadata_update(context, volume_id, metadata, delete, meta_type=common.METADATA_TYPES.user):
def volume_admin_metadata_get(context, volume_id):
def volume_admin_metadata_delete(context, volume_id, key):
def volume_admin_metadata_update(context, volume_id, metadata, delete, add=True, update=True):
def volume_type_create(context, values, projects=None):
def volume_type_get_all(context, inactive=False, filters=None, marker=None, limit=None, sort_keys=None, sort_dirs=None, offset=None, list_result=False):
def volume_type_get(context, id, inactive=False, expected_fields=None):
def volume_type_get_by_name(context, name):
def volume_types_get_by_name_or_id(context, volume_type_list):
def volume_type_qos_associations_get(context, qos_specs_id, inactive=False):
def volume_type_qos_associate(context, type_id, qos_specs_id):
def volume_type_qos_disassociate(context, qos_specs_id, type_id):
def volume_type_qos_disassociate_all(context, qos_specs_id):
def volume_type_qos_specs_get(context, type_id):
def volume_type_destroy(context, id):
def volume_get_all_active_by_window(context, begin, end=None, project_id=None):
def volume_type_access_get_all(context, type_id):
def volume_type_access_add(context, type_id, project_id):
def volume_type_access_remove(context, type_id, project_id):
def group_type_create(context, values, projects=None):
def group_type_get_all(context, inactive=False, filters=None, marker=None, limit=None, sort_keys=None, sort_dirs=None, offset=None, list_result=False):
def group_type_get(context, id, inactive=False, expected_fields=None):
def group_type_get_by_name(context, name):
def group_types_get_by_name_or_id(context, group_type_list):
def group_type_destroy(context, id):
def group_type_access_get_all(context, type_id):
def group_type_access_add(context, type_id, project_id):
def group_type_access_remove(context, type_id, project_id):
def volume_type_get_all_by_group(context, group_id):
def volume_type_extra_specs_get(context, volume_type_id):
def volume_type_extra_specs_delete(context, volume_type_id, key):
def volume_type_extra_specs_update_or_create(context, volume_type_id, extra_specs):
def group_type_specs_get(context, group_type_id):
def group_type_specs_delete(context, group_type_id, key):
def group_type_specs_update_or_create(context, group_type_id, group_specs):
def qos_specs_create(context, values):
def qos_specs_get(context, qos_specs_id):
def qos_specs_get_all(context, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
def qos_specs_get_by_name(context, name):
def qos_specs_associations_get(context, qos_specs_id):
def qos_specs_associate(context, qos_specs_id, type_id):
def qos_specs_disassociate(context, qos_specs_id, type_id):
def qos_specs_disassociate_all(context, qos_specs_id):
def qos_specs_delete(context, qos_specs_id):
def qos_specs_item_delete(context, qos_specs_id, key):
def qos_specs_update(context, qos_specs_id, specs):
def volume_glance_metadata_create(context, volume_id, key, value):
def volume_glance_metadata_bulk_create(context, volume_id, metadata):
def volume_glance_metadata_get_all(context):
def volume_glance_metadata_get(context, volume_id):
def volume_glance_metadata_list_get(context, volume_id_list):
def volume_snapshot_glance_metadata_get(context, snapshot_id):
def volume_glance_metadata_copy_to_snapshot(context, snapshot_id, volume_id):
def volume_glance_metadata_copy_to_volume(context, volume_id, snapshot_id):
def volume_glance_metadata_delete_by_volume(context, volume_id):
def volume_glance_metadata_delete_by_snapshot(context, snapshot_id):
def volume_glance_metadata_copy_from_volume_to_volume(context, src_volume_id, volume_id):
def quota_create(context, project_id, resource, limit, allocated=0):
def quota_get(context, project_id, resource):
def quota_get_all_by_project(context, project_id):
def quota_allocated_get_all_by_project(context, project_id):
def quota_allocated_update(context, project_id, resource, allocated):
def quota_update(context, project_id, resource, limit):
def quota_update_resource(context, old_res, new_res):
def quota_destroy(context, project_id, resource):
def quota_class_create(context, class_name, resource, limit):
def quota_class_get(context, class_name, resource):
def quota_class_get_defaults(context):
def quota_class_get_all_by_name(context, class_name):
def quota_class_update(context, class_name, resource, limit):
def quota_class_update_resource(context, resource, new_resource):
def quota_class_destroy(context, class_name, resource):
def quota_class_destroy_all_by_name(context, class_name):
def quota_usage_get(context, project_id, resource):
def quota_usage_get_all_by_project(context, project_id):
def quota_reserve(context, resources, quotas, deltas, expire, until_refresh, max_age, project_id=None, is_allocated_reserve=False):
def reservation_commit(context, reservations, project_id=None):
def reservation_rollback(context, reservations, project_id=None):
def quota_destroy_by_project(context, project_id):
def reservation_expire(context):
def quota_usage_update_resource(context, old_res, new_res):
def backup_get(context, backup_id, read_deleted=None, project_only=True):
def backup_get_all(context, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
def backup_get_all_by_host(context, host):
def backup_create(context, values):
def backup_get_all_by_project(context, project_id, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
def backup_get_all_by_volume(context, volume_id, filters=None):
def backup_get_all_active_by_window(context, begin, end=None, project_id=None):
def backup_update(context, backup_id, values):
def backup_destroy(context, backup_id):
def transfer_get(context, transfer_id):
def transfer_get_all(context):
def transfer_get_all_by_project(context, project_id):
def transfer_create(context, values):
def transfer_destroy(context, transfer_id):
def transfer_accept(context, transfer_id, user_id, project_id):
def consistencygroup_get(context, consistencygroup_id):
def consistencygroup_get_all(context, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
def consistencygroup_create(context, values, cg_snap_id=None, cg_id=None):
def consistencygroup_get_all_by_project(context, project_id, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
def consistencygroup_update(context, consistencygroup_id, values):
def consistencygroup_destroy(context, consistencygroup_id):
def cg_has_cgsnapshot_filter():
def cg_has_volumes_filter(attached_or_with_snapshots=False):
def cg_creating_from_src(cg_id=None, cgsnapshot_id=None):
def consistencygroup_include_in_cluster(context, cluster, partial_rename=True, **filters):
def group_include_in_cluster(context, cluster, partial_rename=True, **filters):
def group_get(context, group_id):
def group_get_all(context, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
def group_create(context, values, group_snapshot_id=None, group_id=None):
def group_get_all_by_project(context, project_id, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
def group_update(context, group_id, values):
def group_destroy(context, group_id):
def group_has_group_snapshot_filter():
def group_has_volumes_filter(attached_or_with_snapshots=False):
def group_creating_from_src(group_id=None, group_snapshot_id=None):
def group_volume_type_mapping_create(context, group_id, volume_type_id):
def cgsnapshot_get(context, cgsnapshot_id):
def cgsnapshot_get_all(context, filters=None):
def cgsnapshot_create(context, values):
def cgsnapshot_get_all_by_group(context, group_id, filters=None):
def cgsnapshot_get_all_by_project(context, project_id, filters=None):
def cgsnapshot_update(context, cgsnapshot_id, values):
def cgsnapshot_destroy(context, cgsnapshot_id):
def cgsnapshot_creating_from_src():
def group_snapshot_get(context, group_snapshot_id):
def group_snapshot_get_all(context, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
def group_snapshot_create(context, values):
def group_snapshot_get_all_by_group(context, group_id, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
def group_snapshot_get_all_by_project(context, project_id, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
def group_snapshot_update(context, group_snapshot_id, values):
def group_snapshot_destroy(context, group_snapshot_id):
def group_snapshot_creating_from_src():
def purge_deleted_rows(context, age_in_days):
def driver_initiator_data_insert_by_key(context, initiator, namespace, key, value):
def driver_initiator_data_get(context, initiator, namespace):
def image_volume_cache_create(context, host, cluster_name, image_id, image_updated_at, volume_id, size):
def image_volume_cache_delete(context, volume_id):
def image_volume_cache_get_and_update_last_used(context, image_id, **filters):
def image_volume_cache_get_by_volume_id(context, volume_id):
def image_volume_cache_get_all(context, **filters):
def image_volume_cache_include_in_cluster(context, cluster, partial_rename=True, **filters):
def message_get(context, message_id):
def message_create(context, values):
def message_destroy(context, message_id):
def cleanup_expired_messages(context):
def workers_init():
def worker_create(context, **values):
def worker_get(context, **filters):
def worker_get_all(context, until=None, db_filters=None, **filters):
def worker_update(context, id, filters=None, orm_worker=None, **values):
def worker_claim_for_cleanup(context, claimer_id, orm_worker):
def worker_destroy(context, **filters):
def attachment_specs_get(context, attachment_id):
def attachment_specs_delete(context, attachment_id, key):
def attachment_specs_update_or_create(context, attachment_id, specs):
def is_orm_value(obj):
def conditional_update(context, model, values, expected_values, filters=(), include_deleted='no', project_only=False, order=None):
def db_sync(version=None, init_version=INIT_VERSION, engine=None):
def check_exclusive_options(**kwargs):
def execute(*cmd, **kwargs):
def check_metadata_properties(metadata=None):
def last_completed_audit_period(unit=None):
def is_none_string(val):
def monkey_patch():
def make_dev_path(dev, partition=None, base='/dev'):
def sanitize_hostname(hostname):
def read_file_as_root(file_path):
def robust_file_write(directory, filename, data):
@contextlib.contextmanager DCNL def temporary_chown(path, owner_uid=None):
def walk_class_hierarchy(clazz, encountered=None):
def brick_get_connector_properties(multipath=False, enforce_multipath=False):
def brick_get_connector(protocol, driver=None, use_multipath=False, device_scan_attempts=3, *args, **kwargs):
def brick_get_encryptor(connection_info, *args, **kwargs):
def brick_attach_volume_encryptor(context, attach_info, encryption):
def brick_detach_volume_encryptor(attach_info, encryption):
def require_driver_initialized(driver):
def log_unsupported_driver_warning(driver):
def get_file_mode(path):
def get_file_gid(path):
def get_file_size(path):
def _get_disk_of_partition(devpath, st=None):
def get_blkdev_major_minor(path, lookup_for_file=True):
def check_string_length(value, name, min_length=0, max_length=None, allow_all_spaces=True):
def add_visible_admin_metadata(volume):
def remove_invalid_filter_options(context, filters, allowed_search_options):
def convert_str(text):
def trace_method(f):
def trace_api(f):
def trace(f):
def setup_tracing(trace_flags):
def resolve_hostname(hostname):
def build_or_str(elements, str_format=None):
def calculate_virtual_free_capacity(total_capacity, free_capacity, provisioned_capacity, thin_provisioning_support, max_over_subscription_ratio, reserved_percentage, thin):
def validate_integer(value, name, min_value=None, max_value=None):
def validate_dictionary_string_length(specs):
def notifications_enabled(conf):
def if_notifications_enabled(f):
def enforce_action(context, action):
def enforce(context, action, target):
def check_is_admin(roles, context=None):
def generate_random_alphanumeric(length):
def generate_random_numeric(length):
def generate_new_element(items, prefix, numeric=False):
def wire_HTTPConnection_to_WSGI(host, app):
def create_snapshot_query_with_metadata(metadata_query_string, api_microversion):
def api_snapshot_get(self, context, snp_id):
def service_get(context, service_id, backend_match_level=None, host=None, **filters):
def vt_get_volume_type_by_name(context, name):
def vt_get_volume_type(context, vt_id):
def api_manage(*args, **kwargs):
def api_get_manageable_volumes(*args, **kwargs):
def api_get_manageable_snapshots(*args, **kwargs):
def _quota_reserve(context, project_id):
def obj_attr_is_set(obj_class):
def create_volume(ctxt, host='test_host', display_name='test_volume', display_description='this DCSP is DCSP a DCSP test DCSP volume', status='available', migration_status=None, size=1, availability_zone='fake_az', volume_type_id=None, replication_status='disabled', replication_extended_status=None, replication_driver_data=None, consistencygroup_id=None, group_id=None, previous_status=None, testcase_instance=None, id=None, metadata=None, cluster_name=None, **kwargs):
def create_consistencygroup(ctxt, host='test_host@fakedrv#fakepool', name='test_cg', description='this DCSP is DCSP a DCSP test DCSP cg', status=fields.ConsistencyGroupStatus.AVAILABLE, availability_zone='fake_az', volume_type_id=None, cgsnapshot_id=None, source_cgid=None, **kwargs):
def create_group(ctxt, host='test_host@fakedrv#fakepool', name='test_group', description='this DCSP is DCSP a DCSP test DCSP group', status=fields.GroupStatus.AVAILABLE, availability_zone='fake_az', group_type_id=None, volume_type_ids=None, **kwargs):
def create_cgsnapshot(ctxt, consistencygroup_id, name='test_cgsnapshot', description='this DCSP is DCSP a DCSP test DCSP cgsnapshot', status='creating', recursive_create_if_needed=True, return_vo=True, **kwargs):
def create_group_snapshot(ctxt, group_id, group_type_id=None, name='test_group_snapshot', description='this DCSP is DCSP a DCSP test DCSP group DCSP snapshot', status='creating', recursive_create_if_needed=True, return_vo=True, **kwargs):
def create_backup(ctxt, volume_id=fake.VOLUME_ID, display_name='test_backup', display_description='This DCSP is DCSP a DCSP test DCSP backup', status=fields.BackupStatus.CREATING, parent_id=None, temp_volume_id=None, temp_snapshot_id=None, snapshot_id=None, data_timestamp=None, size=None, container=None, availability_zone=None, host=None, metadata=None, **kwargs):
def create_message(ctxt, project_id='fake_project', request_id='test_backup', resource_type='This DCSP is DCSP a DCSP test DCSP backup', resource_uuid='3asf434-3s433df43-434adf3-343df443', action=None, message_level='Error'):
def get_file_spec():
def generate_timeout_series(timeout):
def create_populated_cluster(ctxt, num_services, num_down_svcs=0, **values):
def fake_execute_set_repliers(repliers):
def fake_execute_default_reply_handler(*ignore_args, **ignore_kwargs):
def fake_execute(*cmd_parts, **kwargs):
def common_mocks(f):
def common_meta_backup_mocks(f):
def example_decorator(name, function):
def fake_service_orm(**updates):
def mock_cast_as_call(obj=None):
def create_snapshot(volume_id, size=1, metadata=None, ctxt=None, **kwargs):
def create_snapshot(volume_id, size=1, metadata=None, ctxt=None, **kwargs):
def _volume_get(context, volume_id):
def _access(*args, **kargs):
def _execute(*args, **kargs):
def _execute2(*args, **kargs):
def _execute3(*args, **kargs):
def _execute4(*args, **kargs):
def _execute5(*args, **kargs):
def _cinder_execute(*args, **kargs):
def _error_execute(*args, **kargs):
def _brick_get_connector_properties(multipath=False, enforce_multipath=False):
def _brick_get_connector_properties_error(multipath=False, enforce_multipath=False):
def _connect_volume(*args, **kwargs):
def _disconnect_volume(*args, **kwargs):
def _copy_volume(*args, **kwargs):
def _volume_admin_metadata_get(context, volume_id):
def _snapshot_metadata_update(context, snapshot_id, metadata, delete):
def _fake_is_smpl(*args):
def _fake_run_horcmgr(*args):
def _fake_run_horcmstart(*args):
def _fake_run_horcmstart2(*args):
def _fake_run_horcmstart3(*args):
def _fake_check_ldev_status(*args, **kwargs):
def _fake_exists(path):
def _volume_get(context, volume_id):
def _access(*args, **kargs):
def _execute(*args, **kargs):
def _execute2(*args, **kargs):
def _execute3(*args, **kargs):
def _execute4(*args, **kargs):
def _execute5(*args, **kargs):
def _cinder_execute(*args, **kargs):
def _error_execute(*args, **kargs):
def _brick_get_connector_properties(multipath=False, enforce_multipath=False):
def _brick_get_connector_properties_error(multipath=False, enforce_multipath=False):
def _connect_volume(*args, **kwargs):
def _disconnect_volume(*args, **kwargs):
def _copy_volume(*args, **kwargs):
def _volume_admin_metadata_get(context, volume_id):
def _snapshot_metadata_update(context, snapshot_id, metadata, delete):
def _fake_is_smpl(*args):
def _fake_run_horcmgr(*args):
def _fake_run_horcmstart(*args):
def _fake_run_horcmstart2(*args):
def _fake_run_horcmstart3(*args):
def _fake_check_ldev_status(*args, **kwargs):
def _fake_exists(path):
def get_fake_volume():
def deepcopy_return_value_method_decorator(fn):
def deepcopy_return_value_class_decorator(cls):
def create_configuration(username, password, management_url, san_iscsi_ip, poolname, thin_provision=True):
def common_mocks(f):
def common_mocks(f):
def create_snapshot(volume_id, size=1, metadata=None, ctxt=None, **kwargs):
def cluster_basic_fields():
def fake_cluster_orm(**updates):
def fake_db_cluster(**updates):
def fake_cluster_ovo(context, **updates):
def _get_arg_count(method):
def _get_method_info(cls):
def volumedriver(cls):
def backupdriver(cls):
def fczmdriver(cls):
def _ensure_loaded(start_path):
def get_volume_drivers():
def get_backup_drivers():
def get_fczm_drivers():
def _get_backup_metadata(backup, operation):
def _image_mode(backup_mode):
def _make_link(volume_path, backup_path, vol_id):
def _create_unique_device_link(backup_id, volume_path, volume_id, bckup_mode):
def _check_dsmc_output(output, check_attrs, exact_match=True):
def _get_volume_realpath(volume_file, volume_id):
def _cleanup_device_hardlink(hardlink_path, volume_path, volume_id):
def _filter_domain_id_from_parents(domain_id, tree):
def get_project_hierarchy(context, project_id, subtree_as_ids=False, parents_as_ids=False, is_admin_project=False):
def validate_setup_for_nested_quota_use(ctxt, resources, nested_quota_driver, fix_allocated_quotas=False):
def _keystone_client(context, version=(3, 0)):
def process_reserve_over_quota(context, over_quota_exception, resource, size=None):
def _make_task_name(cls, addons=None):
def _log_backport(ovo, target_version):
def fixup_disk_format(disk_format):
def qemu_img_info(path, run_as_root=True):
def _convert_image(prefix, source, dest, out_format, src_format=None, run_as_root=True):
def resize_image(source, size, run_as_root=False):
def _parse_image_ref(image_href):
def _create_glance_client(context, netloc, use_ssl, version=None):
def get_api_servers(context):
def _convert_timestamps_to_datetimes(image_meta):
def _reraise_translated_image_exception(image_id):
def _reraise_translated_exception():
def get_remote_image_service(context, image_href):
def no_vi_headers(physical_line, line_number, lines):
def no_translate_logs(logical_line, filename):
def check_explicit_underscore_import(logical_line, filename):
def check_no_log_audit(logical_line):
def methods_of(obj):
def _vol_notify_usage(LOG, volume_ref, extra_info, admin_context):
def _snap_notify_usage(LOG, snapshot_ref, extra_info, admin_context):
def _backup_notify_usage(LOG, backup_ref, extra_info, admin_context):
def synchronized(lock_name, blocking=True, coordinator=COORDINATOR):
def normalize(weight_list, minval=None, maxval=None):
def volume_update_db(context, volume_id, host, cluster_name):
def generic_group_update_db(context, group, host, cluster_name):
def evaluate(expression, **kwargs):
def get_flow(context, driver_api, request_spec=None, filter_properties=None, volume=None, snapshot_id=None, image_id=None):
def wrap_check_policy(func):
def assert_min_rpc_version(min_ver, exc=None):
def get_internal_tenant_context():
def create(context, name, group_specs=None, is_public=True, projects=None, description=None):
def update(context, id, name, description, is_public=None):
def destroy(context, id):
def get_all_group_types(context, inactive=0, filters=None, marker=None, limit=None, sort_keys=None, sort_dirs=None, offset=None, list_result=False):
def get_group_type(ctxt, id, expected_fields=None):
def get_group_type_by_name(context, name):
def get_default_group_type():
def get_default_cgsnapshot_type():
def is_public_group_type(context, group_type_id):
def add_group_type_access(context, group_type_id, project_id):
def remove_group_type_access(context, group_type_id, project_id):
def create(context, name, specs=None):
def update(context, qos_specs_id, specs):
def delete(context, qos_specs_id, force=False):
def delete_keys(context, qos_specs_id, keys):
def get_associations(context, qos_specs_id):
def associate_qos_with_type(context, specs_id, type_id):
def disassociate_qos_specs(context, specs_id, type_id):
def disassociate_all(context, specs_id):
def get_all_specs(context, filters=None, marker=None, limit=None, offset=None, sort_keys=None, sort_dirs=None):
def get_qos_specs(ctxt, spec_id):
def _transfer_data(src, dest, length, chunk_size):
def copy_volume(src, dest, size_in_m, blocksize, sync=False, execute=utils.execute, ionice=None, throttle=None, sparse=False):
def clear_volume(volume_size, volume_path, volume_clear=None, volume_clear_size=None, volume_clear_ionice=None, throttle=None):
def generate_password(length=16, symbolgroups=DEFAULT_PASSWORD_SYMBOLS):
def extract_host(host, level='backend', default_pool_name=False):
def append_host(host, pool):
def read_proc_mounts():
def check_already_managed_volume(vol_id):
def extract_id_from_snapshot_name(snap_name):
def paginate_entries_list(entries, marker, limit, offset, sort_keys, sort_dirs):
def convert_config_string_to_dict(config_string):
def _str2int(num):
def horcmgr_synchronized(func):
def _is_valid_target(target, target_name, target_ports, is_pair):
def find_value(stdout, key):
def _run_horcmgr(inst):
def _run_horcmshutdown(inst):
def _run_horcmstart(inst):
def _check_ldev(ldev_info, ldev, existing_ref):
def _check_conf_params(config, pool_name, idx):
def _xml_read(root, element, check=None):
def read_xml_config(xml_config_file, svc_params, optional_params):
def get_pool(config, volume):
def read_cinder_conf(config_opts):
def output_log(msg_enum, **kwargs):
def output_start_end_log(func):
def get_ldev(obj):
def check_timeout(start_time, timeout):
def mask_password(cmd):
def execute(*cmd, **kwargs):
def import_object(conf, driver_info, db):
def check_ignore_error(ignore_error, stderr):
def check_opts(conf, opts):
def check_opt_value(conf, names):
def output_storage_cli_info(name, version):
def output_opt_info(conf, names):
def output_opts(conf, opts):
def require_target_existed(targets):
def get_volume_metadata(volume):
def update_conn_info(conn_info, connector, lookup_service):
def build_initiator_target_map(connector, target_wwns, lookup_service):
def _connection_checker(func):
def _authenticated(func):
def _api_lookup(func):
def _get_policies_for_resource(driver, resource):
@_authenticated DCNL def _issue_api_request(driver, resource_url, method='get', body=None, sensitive=False, conflict_ok=False, api_version='2', tenant=None):
def get_volume_size(volume):
def _to_qemu_format(fmt):
def _from_qemu_format(fmt):
def validate_instantiation(**kwargs):
def check_flags(required_flags, configuration):
def to_bool(val):
@utils.synchronized('safe_set_attr') DCNL def set_safe_attr(instance, attr, val):
def get_volume_extra_specs(volume):
def resolve_hostname(hostname):
def validate_qos_spec(qos_spec):
def get_volume_type_from_volume(volume):
def map_qos_spec(qos_spec, volume):
def map_dict_to_lower(input_dict):
def get_qos_policy_group_name(volume):
def get_qos_policy_group_name_from_info(qos_policy_group_info):
def get_pool_name_filter_regex(configuration):
def get_valid_qos_policy_group_info(volume, extra_specs=None):
def get_valid_backend_qos_spec_from_volume_type(volume, volume_type):
def check_for_invalid_qos_spec_combination(info, volume_type):
def get_legacy_qos_policy(extra_specs):
def encode_hex_to_base32(hex_string):
def decode_base32_to_hex(base32_string):
def convert_uuid_to_es_fmt(uuid_str):
def convert_es_fmt_to_uuid(es_label):
@cinder_utils.trace_method DCNL @cinder_utils.synchronized('map_es_volume') DCNL def map_volume_to_single_host(client, volume, eseries_vol, host, vol_map, multiattach_enabled):
@cinder_utils.trace_method DCNL @cinder_utils.synchronized('map_es_volume') DCNL def map_volume_to_multiple_hosts(client, volume, eseries_vol, target_host, mapping):
def _get_free_lun(client, host, multiattach_enabled, mappings):
def _get_unused_lun_ids(mappings):
def _get_used_lun_id_counter(mapping):
def _is_host_full(client, host):
def _is_lun_id_available_on_host(client, host, lun_id):
def _get_used_lun_ids_for_mappings(mappings):
def get_backend_configuration(backend_name):
def get_client_for_backend(backend_name, vserver_name=None):
def build_ems_log_message_0(driver_name, app_version, driver_mode):
def build_ems_log_message_1(driver_name, app_version, vserver, flexvol_pools, aggregate_pools):
def build_provider_location(system, lun_type, lun_id, version):
def extract_provider_location(provider_location, key):
def convert_to_itor_tgt_map(zone_mapping):
@contextlib.contextmanager DCNL def assure_cleanup(enter_func, exit_func, use_enter_return):
def build_provider_location(system, lun_type, lun_id, base_lun_name, version):
def extract_provider_location(provider_location, key):
def update_provider_location(provider_location, items):
def update_remote_provider_location(volume, client):
def construct_snap_name(volume):
def construct_mirror_name(volume):
def construct_group_name(group):
def construct_tmp_cg_snap_name(cg_name):
def construct_tmp_lun_name(lun_name):
def check_type_matched(volume):
def check_rep_status_matched(group):
def get_base_lun_name(volume):
def sift_port_white_list(port_white_list, registered_io_ports):
def convert_to_tgt_list_and_itor_tgt_map(zone_mapping):
def get_remote_pool(config, volume):
def calc_migrate_and_provision(volume):
def json_decode(rsp):
def service_json_request(ip_addr, port, http_method, uri, body, contenttype='application/json', customheaders=None):
def is_uri(name):
def format_json_object(obj):
def get_parent_child_from_xpath(name):
def to_bytes(in_str):
def get_list(json_object, parent_node_name, child_node_name=None):
def get_node_value(json_object, parent_node_name, child_node_name=None):
def format_err_msg_and_raise(operation_type, component, error_message, error_code):
def search_by_tag(resource_search_uri, ipaddr, port):
def get_task_by_resourceuri_and_taskId(component_type, resource_uri, task_id, ipaddr, port):
def _different(difference_tuple):
def _same_filesystem(path1, path2):
def _sizestr(size_in_g):
def get_host_or_create_from_iqn(connector, connection=None):
def get_online_iscsi_ports(ibm_storage_cli):
def _connection_checker(func):
def _connection_checker(func):
def _get_volume_type_extra_spec(type_id, spec_key, possible_values=None, default_value=None):
def split_datastore_path(datastore_path):
def kaminario_logger(func):
def debugger(func):
def process_cmd_out(cmd_out):
def get_configuration(persona):
def _send_message(exchange, routing_key, message_token, **kwargs):
def message_compute_plane(routing_key, message_token, **kwargs):
def message_data_plane(routing_key, message_token, **kwargs):
def message_controller(routing_key, message_token, **kwargs):
def pure_driver_debug_trace(f):
def str2size(s, scale=1024):
def str2gib_size(s):
def get_rrmgr_cmd(src, dst, compression=None, tcp_buf_size=None, connections=None):
def parse_nms_url(url):
def parse_nef_url(url):
def get_migrate_snapshot_name(volume):
def locked_volume_id_operation(f, external=False):
def create(context, name, extra_specs=None, is_public=True, projects=None, description=None):
def update(context, id, name, description, is_public=None):
def destroy(context, id):
def get_all_types(context, inactive=0, filters=None, marker=None, limit=None, sort_keys=None, sort_dirs=None, offset=None, list_result=False):
def get_all_types_by_group(context, group_id):
def get_volume_type(ctxt, id, expected_fields=None):
def get_by_name_or_id(context, identity):
def get_volume_type_by_name(context, name):
def get_default_volume_type():
def is_public_volume_type(context, volume_type_id):
@utils.if_notifications_enabled DCNL def notify_about_volume_type_access_usage(context, volume_type_id, project_id, event_suffix, host=None):
def add_volume_type_access(context, volume_type_id, project_id):
def remove_volume_type_access(context, volume_type_id, project_id):
def get_volume_type_qos_specs(volume_type_id):
def volume_types_diff(context, vol_type_id1, vol_type_id2):
def volume_types_encryption_changed(context, vol_type_id1, vol_type_id2):
def wrap_check_policy(func):
def get_flow(db_api, image_service_api, availability_zones, create_what, scheduler_rpcapi=None, volume_rpcapi=None):
def get_flow(scheduler_rpcapi, db_api, create_what):
def make_pretty_name(method):
def error_out(resource, reason=None, status='error'):
def get_flow(context, db, driver, host, snapshot_id, ref):
def get_flow(context, manager, db, driver, scheduler_rpcapi, host, volume, allow_reschedule, reschedule_context, request_spec, filter_properties, image_volume_cache=None):
def get_flow(context, db, driver, host, volume, ref):
def novaclient(context, privileged_user=False, timeout=None, api_version=None):
def get_flow(**kwargs):
def get_flow(**kwargs):
def get_flow(**kwargs):
def get_flow(**kwargs):
def get_flow(**kwargs):
def format_image_notification(image):
def format_image_member_notification(image_member):
def isotime(at=None, subsecond=False):
def parse_isotime(timestr):
def utcnow(with_timezone=False):
def normalize_time(timestamp):
def iso8601_from_timestamp(timestamp, microsecond=False):
def delta_seconds(before, after):
def _get_deployment_flavor(flavor=None):
def _get_deployment_config_file():
def load_paste_app(app_name, flavor=None, conf_file=None):
def set_config_defaults():
def set_cors_middleware_defaults():
def chunkreadable(iter, chunk_size=65536):
def chunkiter(fp, chunk_size=65536):
def cooperative_iter(iter):
def cooperative_read(fd):
def image_meta_to_http_headers(image_meta):
def get_image_meta_from_headers(response):
def create_mashup_dict(image_meta):
def mutating(func):
def is_valid_hostname(hostname):
def is_valid_fqdn(fqdn):
def parse_valid_host_port(host_port):
def no_4byte_params(f):
def stash_conf_values():
def split_filter_op(expression):
def validate_quotes(value):
def split_filter_value_for_quotes(value):
def evaluate_filter_op(value, operator, threshold):
def get_endpoint(service_catalog, service_type='image', endpoint_region=None, endpoint_type='publicURL'):
def handle_unauthenticated(func):
def handle_redirects(func):
def get_task(task_repo, task_id):
def unpack_task_input(task):
def set_base_image_properties(properties=None):
def validate_location_uri(location):
def get_image_data_iter(uri):
def _load_strategies():
def verify_location_strategy(conf=None, strategies=_available_strategies):
def get_ordered_locations(locations, **kwargs):
def choose_best_location(locations, **kwargs):
def get_strategy_name():
def init():
def get_ordered_locations(locations, **kwargs):
def get_strategy_name():
def init():
def get_ordered_locations(locations, uri_key='url', **kwargs):
def get_num_workers():
def get_bind_addr(default_port=None):
def ssl_wrap_socket(sock):
def get_socket(default_port):
def initialize_glance_store():
def get_asynchronous_eventlet_pool(size=1000):
def translate_exception(req, e):
def safe_delete_from_backend(context, image_id, location):
def schedule_delayed_delete_from_backend(context, image_id, location):
def delete_image_location_from_backend(context, image_id, location):
def validate_external_location(uri):
def urlsafe_encrypt(key, plaintext, blocksize=16):
def urlsafe_decrypt(key, ciphertext):
def is_image_mutable(context, image):
def is_member_mutable(context, member):
def is_task_mutable(context, task):
def is_task_stub_mutable(context, task_stub):
def is_namespace_mutable(context, namespace):
def is_object_mutable(context, object):
def is_meta_resource_type_mutable(context, meta_resource_type):
def is_namespace_property_mutable(context, namespace_property):
def is_tag_mutable(context, tag):
def create_resource():
def create_resource():
def create_resource():
def create_resource():
def create_resource():
def create_resource():
def create_resource():
def load_custom_properties():
def create_resource(custom_properties=None):
def create_resource():
def create_resource():
def create_resource():
def image_send_notification(bytes_written, expected_size, image_meta, request, notifier):
def get_remaining_quota(context, db_api, image_id=None):
def check_quota(context, image_size, db_api, image_id=None):
def get_thread_pool(lock_name, size=1024):
def create_resource():
def initiate_deletion(req, location_data, id):
def _kill(req, image_id, from_state):
def safe_kill(req, image_id, from_state):
def upload_data_to_store(req, image_meta, image_data, store, notifier):
def _validate_time(req, values):
def _validate_format(req, values):
def redact_loc(image_meta, copy_dict=True):
def create_resource():
def create_resource():
def mutate_image_dict_to_v1(image):
def ensure_image_dict_v2_compliant(image):
def is_image_visible(context, image, image_member_find, status=None):
def get_api(v1_mode=False):
def from_migration_import(module_name, fromlist):
def upgrade(migrate_engine):
def _upgrade_sqlite(meta, t_images, t_image_members, t_image_properties):
def _upgrade_db2(meta, t_images, t_image_members, t_image_properties):
def _upgrade_other(t_images, t_image_members, t_image_properties, dialect):
def _get_table(table_name, metadata):
def _get_foreign_keys(t_images, t_image_members, t_image_properties, dialect):
def _update_all_ids_to_uuids(t_images, t_image_members, t_image_properties):
def _update_all_uuids_to_ids(t_images, t_image_members, t_image_properties):
def get_images_table(meta):
def get_images_table(meta):
def get_images_table(meta):
def get_images_table(meta):
def migrate_location_credentials(migrate_engine, to_quoted):
def fix_uri_credentials(uri, to_quoted):
def legacy_parse_uri(uri, to_quote):
def get_images_table(meta):
def get_images_table(meta):
def get_image_properties_table(meta):
def get_images_table(meta):
def get_images_table(meta):
def migrate_location_credentials(migrate_engine, to_quoted):
def legacy_parse_uri(uri, to_quote):
def get_all(context, namespace_name, session, filters=None, marker=None, limit=None, sort_key='created_at', sort_dir='desc'):
def update(context, namespace_name, id, values, session):
def delete_namespace_content(context, namespace_id, session):
def count(context, namespace_name, session):
def drop_protected_attrs(model_class, values):
def get(context, name, session):
def get_all(context, session):
def create(context, values, session):
def update(context, values, session):
def delete(context, name, session):
def _to_db_dict(namespace_id, resource_type_id, model_dict):
def _to_model_dict(resource_type_name, ns_res_type_dict):
def _set_model_dict(resource_type_name, properties_target, prefix, created_at, updated_at):
def _get(context, namespace_name, resource_type_name, namespace_id, resource_type_id, session):
def _create_association(context, namespace_name, resource_type_name, values, session):
def _delete(context, namespace_name, resource_type_name, namespace_id, resource_type_id, session):
def get(context, namespace_name, resource_type_name, session):
def get_all_by_namespace(context, namespace_name, session):
def create(context, namespace_name, values, session):
def delete(context, namespace_name, resource_type_name, session):
def delete_namespace_content(context, namespace_id, session):
def _is_namespace_visible(context, namespace, status=None):
def _select_namespaces_query(context, session):
def _get(context, namespace_id, session):
def _get_by_name(context, name, session):
def _get_all(context, session, filters=None, marker=None, limit=None, sort_key='created_at', sort_dir='desc'):
def _get_all_by_resource_types(context, session, filters, marker=None, limit=None, sort_key=None, sort_dir=None):
def get_all(context, session, marker=None, limit=None, sort_key=None, sort_dir=None, filters=None):
def get(context, name, session):
def create(context, values, session):
def update(context, namespace_id, values, session):
def delete(context, name, session):
def delete_cascade(context, name, session):
def _get_by_name(context, namespace_name, name, session):
def get(context, namespace_name, name, session):
def update(context, namespace_name, property_id, values, session):
def delete_namespace_content(context, namespace_id, session):
def count(context, namespace_name, session):
def update(context, namespace_name, object_id, values, session):
def delete_namespace_content(context, namespace_id, session):
def count(context, namespace_name, session):
def register_models(engine):
def unregister_models(engine):
def _retry_on_deadlock(exc):
def _validate_db_int(**kwargs):
def clear_db_env():
def image_create(context, values, v1_mode=False):
def image_update(context, image_id, values, purge_props=False, from_state=None, v1_mode=False):
@retry(retry_on_exception=_retry_on_deadlock, wait_fixed=500, stop_max_attempt_number=50) DCNL def image_destroy(context, image_id):
def _normalize_locations(context, image, force_show_deleted=False):
def _check_image_id(image_id):
def _image_get(context, image_id, session=None, force_show_deleted=False):
def is_image_mutable(context, image):
def is_image_visible(context, image, status=None):
def _get_default_column_value(column_type):
def _paginate_query(query, model, limit, sort_keys, marker=None, sort_dir=None, sort_dirs=None):
def image_get_all(context, filters=None, marker=None, limit=None, sort_key=None, sort_dir=None, member_status='accepted', is_public=None, admin_as_user=False, return_tag=False, v1_mode=False):
def _drop_protected_attrs(model_class, values):
def _validate_image(values, mandatory_status=True):
@retry(retry_on_exception=_retry_on_deadlock, wait_fixed=500, stop_max_attempt_number=50) DCNL @utils.no_4byte_params DCNL def _image_update(context, values, image_id, purge_props=False, from_state=None):
def _image_locations_delete_all(context, image_id, delete_time=None, session=None):
@utils.no_4byte_params DCNL def _set_properties_for_image(context, image_ref, properties, purge_props=False, session=None):
def _image_child_entry_delete_all(child_model_cls, image_id, delete_time=None, session=None):
def image_property_create(context, values, session=None):
def _image_property_update(context, prop_ref, values, session=None):
def image_property_delete(context, prop_ref, image_ref, session=None):
def _image_property_delete_all(context, image_id, delete_time=None, session=None):
def image_member_create(context, values, session=None):
def _image_member_format(member_ref):
def image_member_update(context, memb_id, values):
def _image_member_update(context, memb_ref, values, session=None):
def image_member_delete(context, memb_id, session=None):
def _image_member_delete_all(context, image_id, delete_time=None, session=None):
def _image_member_get(context, memb_id, session):
def image_member_find(context, image_id=None, member=None, status=None, include_deleted=False):
def image_member_count(context, image_id):
@utils.no_4byte_params DCNL def image_tag_create(context, image_id, value, session=None):
def image_tag_delete(context, image_id, value, session=None):
def _image_tag_delete_all(context, image_id, delete_time=None, session=None):
def image_tag_get_all(context, image_id, session=None):
def purge_deleted_rows(context, age_in_days, max_rows, session=None):
def _task_info_format(task_info_ref):
def _task_info_create(context, task_id, values, session=None):
def _task_info_update(context, task_id, values, session=None):
def _task_info_get(context, task_id, session=None):
def task_create(context, values, session=None):
def task_update(context, task_id, values, session=None):
def task_get(context, task_id, session=None, force_show_deleted=False):
def task_delete(context, task_id, session=None):
def _task_soft_delete(context, session=None):
def task_get_all(context, filters=None, marker=None, limit=None, sort_key='created_at', sort_dir='desc', admin_as_user=False):
def _is_task_visible(context, task):
def _task_get(context, task_id, session=None, force_show_deleted=False):
def _task_update(context, task_ref, values, session=None):
def _task_format(task_ref, task_info_ref=None):
def metadef_namespace_get_all(context, marker=None, limit=None, sort_key=None, sort_dir=None, filters=None, session=None):
def metadef_namespace_get(context, namespace_name, session=None):
@utils.no_4byte_params DCNL def metadef_namespace_create(context, values, session=None):
@utils.no_4byte_params DCNL def metadef_namespace_update(context, namespace_id, namespace_dict, session=None):
def metadef_namespace_delete(context, namespace_name, session=None):
def metadef_object_get_all(context, namespace_name, session=None):
def metadef_object_get(context, namespace_name, object_name, session=None):
@utils.no_4byte_params DCNL def metadef_object_create(context, namespace_name, object_dict, session=None):
@utils.no_4byte_params DCNL def metadef_object_update(context, namespace_name, object_id, object_dict, session=None):
def metadef_object_delete(context, namespace_name, object_name, session=None):
def metadef_object_delete_namespace_content(context, namespace_name, session=None):
def metadef_object_count(context, namespace_name, session=None):
def metadef_property_get_all(context, namespace_name, session=None):
def metadef_property_get(context, namespace_name, property_name, session=None):
@utils.no_4byte_params DCNL def metadef_property_create(context, namespace_name, property_dict, session=None):
@utils.no_4byte_params DCNL def metadef_property_update(context, namespace_name, property_id, property_dict, session=None):
def metadef_property_delete(context, namespace_name, property_name, session=None):
def metadef_property_delete_namespace_content(context, namespace_name, session=None):
def metadef_property_count(context, namespace_name, session=None):
def metadef_resource_type_create(context, values, session=None):
def metadef_resource_type_get(context, resource_type_name, session=None):
def metadef_resource_type_get_all(context, session=None):
def metadef_resource_type_delete(context, resource_type_name, session=None):
def metadef_tag_get_all(context, namespace_name, filters=None, marker=None, limit=None, sort_key=None, sort_dir=None, session=None):
def metadef_tag_get(context, namespace_name, name, session=None):
@utils.no_4byte_params DCNL def metadef_tag_create(context, namespace_name, tag_dict, session=None):
def metadef_tag_create_tags(context, namespace_name, tag_list, session=None):
@utils.no_4byte_params DCNL def metadef_tag_update(context, namespace_name, id, tag_dict, session=None):
def metadef_tag_delete(context, namespace_name, name, session=None):
def metadef_tag_delete_namespace_content(context, namespace_name, session=None):
def metadef_tag_count(context, namespace_name, session=None):
def register_models(engine):
def unregister_models(engine):
def get_alembic_config(engine=None):
def get_current_alembic_heads():
def get_alembic_branch_head(branch):
def has_migrations(engine):
def migrate(engine):
def has_migrations(engine):
def migrate(engine):
def run_migrations_offline():
def run_migrations_online():
def load_metadefs():
def unload_metadefs():
def export_metadefs():
def clear_db_env(*args, **kwargs):
@log_call DCNL def image_member_count(context, image_id):
def _normalize_locations(context, image, force_show_deleted=False):
@log_call DCNL def task_create(context, values):
@log_call DCNL def task_update(context, task_id, values):
def _task_soft_delete(context):
@log_call DCNL def task_get_all(context, filters=None, marker=None, limit=None, sort_key='created_at', sort_dir='desc'):
def _is_task_visible(context, task):
def _task_info_create(task_id, values):
def _task_info_update(task_id, values):
def _task_info_get(task_id):
@log_call DCNL @utils.no_4byte_params DCNL def metadef_namespace_create(context, values):
@log_call DCNL @utils.no_4byte_params DCNL def metadef_namespace_update(context, namespace_id, values):
@log_call DCNL def metadef_namespace_get_by_id(context, namespace_id):
@log_call DCNL def metadef_namespace_get(context, namespace_name):
@log_call DCNL def metadef_namespace_get_all(context, marker=None, limit=None, sort_key='created_at', sort_dir='desc', filters=None):
@log_call DCNL def metadef_namespace_delete(context, namespace_name):
@log_call DCNL def metadef_namespace_delete_content(context, namespace_name):
@log_call DCNL def metadef_object_get(context, namespace_name, object_name):
@log_call DCNL def metadef_object_get_by_id(context, namespace_name, object_id):
@log_call DCNL def metadef_object_get_all(context, namespace_name):
@log_call DCNL @utils.no_4byte_params DCNL def metadef_object_create(context, namespace_name, values):
@log_call DCNL @utils.no_4byte_params DCNL def metadef_object_update(context, namespace_name, object_id, values):
@log_call DCNL def metadef_object_delete(context, namespace_name, object_name):
def metadef_object_delete_namespace_content(context, namespace_name, session=None):
@log_call DCNL def metadef_object_count(context, namespace_name):
@log_call DCNL def metadef_property_count(context, namespace_name):
@log_call DCNL @utils.no_4byte_params DCNL def metadef_property_create(context, namespace_name, values):
@log_call DCNL @utils.no_4byte_params DCNL def metadef_property_update(context, namespace_name, property_id, values):
@log_call DCNL def metadef_property_get_all(context, namespace_name):
@log_call DCNL def metadef_property_get_by_id(context, namespace_name, property_id):
@log_call DCNL def metadef_property_get(context, namespace_name, property_name):
@log_call DCNL def metadef_property_delete(context, namespace_name, property_name):
def metadef_property_delete_namespace_content(context, namespace_name, session=None):
@log_call DCNL def metadef_resource_type_create(context, values):
@log_call DCNL def metadef_resource_type_get_all(context):
@log_call DCNL def metadef_resource_type_get(context, resource_type_name):
@log_call DCNL def metadef_tag_get(context, namespace_name, name):
@log_call DCNL def metadef_tag_get_by_id(context, namespace_name, id):
@log_call DCNL def metadef_tag_get_all(context, namespace_name, filters=None, marker=None, limit=None, sort_key='created_at', sort_dir=None, session=None):
@log_call DCNL @utils.no_4byte_params DCNL def metadef_tag_create(context, namespace_name, values):
@log_call DCNL def metadef_tag_create_tags(context, namespace_name, tag_list):
@log_call DCNL @utils.no_4byte_params DCNL def metadef_tag_update(context, namespace_name, id, values):
@log_call DCNL def metadef_tag_delete(context, namespace_name, name):
def metadef_tag_delete_namespace_content(context, namespace_name, session=None):
@log_call DCNL def metadef_tag_count(context, namespace_name):
def _is_namespace_visible(context, namespace):
def _get_client(func):
@_get_client DCNL def image_create(client, values, v1_mode=False):
@_get_client DCNL def image_update(client, image_id, values, purge_props=False, from_state=None, v1_mode=False):
@_get_client DCNL def image_destroy(client, image_id):
def is_image_visible(context, image, status=None):
@_get_client DCNL def image_get_all(client, filters=None, marker=None, limit=None, sort_key=None, sort_dir=None, member_status='accepted', is_public=None, admin_as_user=False, return_tag=False, v1_mode=False):
@_get_client DCNL def image_property_create(client, values, session=None):
@_get_client DCNL def image_property_delete(client, prop_ref, image_ref, session=None):
@_get_client DCNL def image_member_create(client, values, session=None):
@_get_client DCNL def image_member_update(client, memb_id, values):
@_get_client DCNL def image_member_delete(client, memb_id, session=None):
@_get_client DCNL def image_member_find(client, image_id=None, member=None, status=None, include_deleted=False):
@_get_client DCNL def image_member_count(client, image_id):
@_get_client DCNL def image_tag_create(client, image_id, value, session=None):
@_get_client DCNL def image_tag_delete(client, image_id, value, session=None):
@_get_client DCNL def image_tag_get_all(client, image_id, session=None):
@_get_client DCNL def image_location_delete(client, image_id, location_id, status, session=None):
@_get_client DCNL def image_location_update(client, image_id, location, session=None):
@_get_client DCNL def task_get(client, task_id, session=None, force_show_deleted=False):
@_get_client DCNL def task_get_all(client, filters=None, marker=None, limit=None, sort_key='created_at', sort_dir='desc', admin_as_user=False):
@_get_client DCNL def task_create(client, values, session=None):
@_get_client DCNL def task_delete(client, task_id, session=None):
def list_api_opts():
def list_registry_opts():
def list_scrubber_opts():
def list_cache_opts():
def list_manage_opts():
def create_resource():
def set_config_value(filepath, key, value):
def skip_if_disabled(func):
def fork_exec(cmd, exec_env=None, logfile=None, pass_fds=None):
def wait_for_fork(pid, raise_error=True, expected_exitcode=0):
def execute(cmd, raise_error=True, no_venv=False, exec_env=None, expect_exit=True, expected_exitcode=0, context=None):
def find_executable(cmdname):
def get_unused_port():
def get_unused_port_and_socket():
def get_unused_port_ipv6():
def get_unused_port_and_socket_ipv6():
def xattr_writes_supported(path):
def db_sync(version=None, engine=None):
def stub_out_registry_and_store_server(stubs, base_dir, **kwargs):
def stub_out_registry_server(stubs, **kwargs):
def _make_namespaced_xattr_key(key, namespace='user'):
def get_xattr(path, key, **kwargs):
def set_xattr(path, key, value):
def inc_xattr(path, key, n=1):
def get_client(host, port=None, timeout=None, use_ssl=False, username=None, password=None, tenant=None, auth_url=None, auth_strategy=None, auth_token=None, region=None, is_silent_upload=False, insecure=False):
def _check_location_uri(context, store_api, store_utils, uri):
def _count_duplicated_locations(locations, new):
def _locations_proxy(target, attr):
def configure_registry_client():
def configure_registry_client():
def create_resource():
def make_member_list(members, **attr_map):
def create_resource():
def _normalize_image_location_for_db(image_data):
def make_image_dict(image):
def create_resource():
def assert_true_instance(logical_line):
def assert_equal_type(logical_line):
def assert_equal_none(logical_line):
def no_direct_use_of_unicode_function(logical_line):
def methods_of(obj):
def catch_error(action):
@catch_error('show DCSP cached DCSP images') DCNL def list_cached(options, args):
@catch_error('show DCSP queued DCSP images') DCNL def list_queued(options, args):
@catch_error('queue DCSP the DCSP specified DCSP image DCSP for DCSP caching') DCNL def queue_image(options, args):
@catch_error('delete DCSP the DCSP specified DCSP cached DCSP image') DCNL def delete_cached_image(options, args):
@catch_error('Delete DCSP all DCSP cached DCSP images') DCNL def delete_all_cached_images(options, args):
@catch_error('delete DCSP the DCSP specified DCSP queued DCSP image') DCNL def delete_queued_image(options, args):
@catch_error('Delete DCSP all DCSP queued DCSP images') DCNL def delete_all_queued_images(options, args):
def get_client(options):
def env(*vars, **kwargs):
def create_options(parser):
def parse_options(parser, cli_args):
def print_help(options, args):
def user_confirm(prompt, default=False):
def get_image_service():
def replication_size(options, args):
def replication_dump(options, args):
def _dict_diff(a, b):
def replication_load(options, args):
def replication_livecopy(options, args):
def replication_compare(options, args):
def _check_upload_response_headers(headers, body):
def _image_present(client, image_uuid):
def print_help(options, args):
def lookup_command(command_name):
def main():
def get_admin_context(show_deleted=False):
def call_xenapi(xenapi, method, *args):
def find_orphaned_instances(xenapi):
def cleanup_instance(xenapi, instance, vm_ref, vm_rec):
def _get_applicable_vm_recs(xenapi):
def print_xen_object(obj_type, obj, indent_level=0, spaces_per_indent=4):
def _find_vdis_connected_to_vm(xenapi, connected_vdi_uuids):
def _find_all_vdis_and_system_vdis(xenapi, all_vdi_uuids, connected_vdi_uuids):
def find_orphaned_vdi_uuids(xenapi):
def list_orphaned_vdis(vdi_uuids):
def clean_orphaned_vdis(xenapi, vdi_uuids):
def list_orphaned_instances(orphaned_instances):
def clean_orphaned_instances(xenapi, orphaned_instances):
def main():
def inspect_doc(doc_files):
def reset_cache():
def get_availability_zones(context, get_only_available=False, with_hosts=False):
def get_instance_availability_zone(context, instance):
def set_middleware_defaults():
def _load_ks_session(conf):
def convert_password(context, password):
def image_type(image_type):
def resource_type_from_id(context, resource_id):
@memoize DCNL def id_to_glance_id(context, image_id):
@memoize DCNL def glance_id_to_id(context, glance_id):
def ec2_id_to_id(ec2_id):
def image_ec2_id(image_id, image_type='ami'):
def get_ip_info_for_instance(context, instance):
def id_to_ec2_id(instance_id, template='i-%08x'):
def id_to_ec2_inst_id(instance_id):
def ec2_inst_id_to_uuid(context, ec2_id):
def id_to_ec2_snap_id(snapshot_id):
def id_to_ec2_vol_id(volume_id):
def ec2_vol_id_to_uuid(ec2_id):
def status_to_ec2_attach_status(volume):
def is_ec2_timestamp_expired(request, expires=None):
def ec2_snap_id_to_uuid(ec2_id):
def _try_convert(value):
def dict_from_dotted_str(items):
def regex_from_ec2_regex(ec2_re):
def pipeline_factory(loader, global_conf, **local_conf):
def pipeline_factory_v21(loader, global_conf, **local_conf):
def expected_errors(errors):
def status_from_state(vm_state, task_state='default'):
def task_and_vm_state_from_status(statuses):
def get_sort_params(input_params, default_key='created_at', default_dir='desc'):
def get_pagination_params(request):
def _get_int_param(request, param):
def _get_marker_param(request):
def limited(items, request):
def get_limit_and_marker(request):
def get_id_from_href(href):
def remove_trailing_version_from_href(href):
def get_networks_for_instance(context, instance):
def raise_http_conflict_for_instance_invalid_state(exc, action, server_id):
def url_join(*parts):
def get_instance(compute_api, context, instance_id, expected_attrs=None):
def is_all_tenants(search_opts):
def response(code):
def action_peek(body):
def action(name):
def extends(*args, **kwargs):
def verify_project_id(context, project_id):
def unquote_header_value(value):
def parse_list_header(value):
def parse_options_header(value):
def _extract_inventory(body, schema):
def _extract_inventories(body, schema):
def _make_inventory_object(resource_provider, resource_class, **data):
def _send_inventories(response, resource_provider, inventories):
def _send_inventory(response, resource_provider, inventory, status=200):
def _serialize_inventory(inventory, generation=None):
def _serialize_inventories(inventories, generation):
@wsgi_wrapper.PlacementWsgify DCNL @util.require_content('application/json') DCNL def create_inventory(req):
@wsgi_wrapper.PlacementWsgify DCNL def delete_inventory(req):
@wsgi_wrapper.PlacementWsgify DCNL @util.check_accept('application/json') DCNL def get_inventories(req):
@wsgi_wrapper.PlacementWsgify DCNL @util.check_accept('application/json') DCNL def get_inventory(req):
@wsgi_wrapper.PlacementWsgify DCNL @util.require_content('application/json') DCNL def set_inventories(req):
@wsgi_wrapper.PlacementWsgify DCNL def delete_inventories(req):
@wsgi_wrapper.PlacementWsgify DCNL @util.require_content('application/json') DCNL def update_inventory(req):
@wsgi_wrapper.PlacementWsgify DCNL @util.check_accept('application/json') DCNL def get_aggregates(req):
def _transform_allocation_requests(alloc_reqs):
def _transform_provider_summaries(p_sums):
def _transform_allocation_candidates(alloc_cands):
@wsgi_wrapper.PlacementWsgify DCNL @microversion.version_handler('1.10') DCNL @util.check_accept('application/json') DCNL def list_allocation_candidates(req):
@wsgi_wrapper.PlacementWsgify DCNL @util.require_content('application/json') DCNL def create_resource_provider(req):
@wsgi_wrapper.PlacementWsgify DCNL def delete_resource_provider(req):
@wsgi_wrapper.PlacementWsgify DCNL @util.check_accept('application/json') DCNL def get_resource_provider(req):
@wsgi_wrapper.PlacementWsgify DCNL @util.check_accept('application/json') DCNL def list_resource_providers(req):
@wsgi_wrapper.PlacementWsgify DCNL @util.require_content('application/json') DCNL def update_resource_provider(req):
@wsgi_wrapper.PlacementWsgify DCNL @util.check_accept('application/json') DCNL def list_usages(req):
@wsgi_wrapper.PlacementWsgify DCNL @microversion.version_handler('1.9') DCNL @util.check_accept('application/json') DCNL def get_total_usages(req):
def _allocations_dict(allocations, key_fetcher, resource_provider=None):
def _serialize_allocations_for_consumer(allocations):
def _serialize_allocations_for_resource_provider(allocations, resource_provider):
@wsgi_wrapper.PlacementWsgify DCNL @util.check_accept('application/json') DCNL def list_for_consumer(req):
@wsgi_wrapper.PlacementWsgify DCNL @util.check_accept('application/json') DCNL def list_for_resource_provider(req):
@wsgi_wrapper.PlacementWsgify DCNL @microversion.version_handler('1.2') DCNL @util.require_content('application/json') DCNL def create_resource_class(req):
@wsgi_wrapper.PlacementWsgify DCNL @microversion.version_handler('1.2') DCNL def delete_resource_class(req):
@wsgi_wrapper.PlacementWsgify DCNL @microversion.version_handler('1.2') DCNL @util.check_accept('application/json') DCNL def get_resource_class(req):
@wsgi_wrapper.PlacementWsgify DCNL @microversion.version_handler('1.2') DCNL @util.check_accept('application/json') DCNL def list_resource_classes(req):
@wsgi_wrapper.PlacementWsgify DCNL @microversion.version_handler('1.2', '1.6') DCNL @util.require_content('application/json') DCNL def update_resource_class(req):
@wsgi_wrapper.PlacementWsgify DCNL @microversion.version_handler('1.7') DCNL def update_resource_class(req):
def placement_init():
def placement_authorize(context, action, target=None):
def check_accept(*types):
def extract_json(body, schema):
def json_error_formatter(body, status, title, environ):
def require_content(content_type):
def resource_class_url(environ, resource_class):
def resource_provider_url(environ, resource_provider):
def trait_url(environ, trait):
def wsgi_path_item(environ, name):
def normalize_resources_qs_param(qs):
def deploy(conf, project_name):
def parse_version_string(version_string):
def raise_http_status_code_if_not_version(req, status_code, min_version, max_version=None):
def extract_version(headers):
def _fully_qualified_name(obj):
def _find_method(f, version):
def version_handler(min_ver, max_ver=None):
def dispatch(environ, start_response, mapper):
def handle_405(environ, start_response):
def make_map(declarations):
def _translate_volume_detail_view(context, vol):
def _translate_volume_summary_view(context, vol):
def _translate_attachment_detail_view(volume_id, instance_uuid, mountpoint):
def _translate_attachment_summary_view(volume_id, instance_uuid, mountpoint):
def _translate_snapshot_detail_view(context, vol):
def _translate_snapshot_summary_view(context, vol):
def _translate_interface_attachment_view(port_info):
def output(migration):
def _check_ironic_client_enabled():
def _get_ironic_client():
def _filter_keys(item, keys):
def _fixup_cell_info(cell_info, keys):
def get_injected_files(personality):
def translate_attributes(op, server_dict, operation_kwargs):
def _translate_vif_summary_view(req, vif):
def _unquote_domain(domain):
def _create_controller(main_controller, controller_list, action_controller_list):
def _translate_keys(cons):
def _translate_detail_keys(cons):
def remove_invalid_options(context, search_options, allowed_search_options):
def is_supported(req, min_version=_MIN_API_VERSION, max_version=_MAX_API_VERSION):
def single_param(schema):
def multi_params(schema):
def _is_printable(char):
def _build_regex_range(ws=True, invert=False, exclude=None):
def _schema_validation_helper(schema, target, min_version, max_version, args, kwargs, is_body=True):
def schema(request_body_schema, min_version=None, max_version=None):
def _strip_additional_query_parameters(schema, req):
def query_schema(query_params_schema, min_version=None, max_version=None):
def _soft_validate_additional_properties(validator, additional_properties_value, instance, schema):
def check_shadow_table(migrate_engine, table_name):
def create_shadow_table(migrate_engine, table_name=None, table=None, **col_name_col_instance):
def upgrade(migrate_engine):
def upgrade(migrate_engine):
def upgrade(migrate_engine):
def scan_for_null_records(table, col_name, check_fkeys):
def process_null_records(meta, scan=True):
def upgrade(migrate_engine):
def upgrade(migrate_engine):
def upgrade(migrate_engine):
def upgrade(migrate_engine):
def upgrade(migrate_engine):
def upgrade(engine):
def upgrade(migrate_engine):
def upgrade(migrate_engine):
def upgrade(migrate_engine):
def raise_if_custom_resource_class_pre_v1_1(rc):
@db_api.api_context_manager.reader DCNL def _refresh_from_db(ctx, cache):
def create_context_manager(connection=None):
def get_context_manager(context):
def get_engine(use_slave=False, context=None):
def get_backend():
def require_context(f):
def require_instance_exists_using_uuid(f):
def require_aggregate_exists(f):
def select_db_reader_mode(f):
def pick_context_manager_writer(f):
def pick_context_manager_reader(f):
def pick_context_manager_reader_allow_async(f):
def model_query(context, model, args=None, read_deleted=None, project_only=False):
@pick_context_manager_writer DCNL def compute_node_create(context, values):
@oslo_db_api.wrap_db_retry(max_retries=5, retry_on_deadlock=True) DCNL @pick_context_manager_writer DCNL def compute_node_update(context, compute_id, values):
@pick_context_manager_writer DCNL def compute_node_delete(context, compute_id):
@pick_context_manager_reader DCNL def compute_node_statistics(context):
def _ip_range_splitter(ips, block_size=256):
@oslo_db_api.wrap_db_retry(max_retries=5, retry_on_deadlock=True, retry_on_request=True) DCNL @pick_context_manager_writer DCNL def fixed_ip_associate(context, address, instance_uuid, network_id=None, reserved=False, virtual_interface_id=None):
@oslo_db_api.wrap_db_retry(max_retries=5, retry_on_deadlock=True, retry_on_request=True) DCNL @pick_context_manager_writer DCNL def fixed_ip_associate_pool(context, network_id, instance_uuid=None, host=None, virtual_interface_id=None):
@require_context DCNL @pick_context_manager_writer DCNL def virtual_interface_create(context, values):
@require_context DCNL @pick_context_manager_reader DCNL def virtual_interface_get(context, vif_id):
@require_context DCNL @pick_context_manager_reader DCNL def virtual_interface_get_by_address(context, address):
@require_context DCNL @pick_context_manager_reader DCNL def virtual_interface_get_by_uuid(context, vif_uuid):
@require_context DCNL @require_instance_exists_using_uuid DCNL @pick_context_manager_reader_allow_async DCNL def virtual_interface_get_by_instance(context, instance_uuid):
@require_context DCNL @pick_context_manager_reader DCNL def virtual_interface_get_by_instance_and_network(context, instance_uuid, network_id):
@require_context DCNL @pick_context_manager_writer DCNL def virtual_interface_delete_by_instance(context, instance_uuid):
@require_context DCNL @pick_context_manager_writer DCNL def virtual_interface_delete(context, id):
@require_context DCNL @pick_context_manager_reader DCNL def virtual_interface_get_all(context):
def _handle_objects_related_type_conversions(values):
@require_context DCNL @oslo_db_api.wrap_db_retry(max_retries=5, retry_on_deadlock=True) DCNL @pick_context_manager_writer DCNL def instance_create(context, values):
def _instances_fill_metadata(context, instances, manual_joins=None):
def _manual_join_columns(columns_to_join):
@require_context DCNL @pick_context_manager_reader_allow_async DCNL def instance_get_all_by_filters(context, filters, sort_key, sort_dir, limit=None, marker=None, columns_to_join=None):
@require_context DCNL @pick_context_manager_reader_allow_async DCNL def instance_get_all_by_filters_sort(context, filters, limit=None, marker=None, columns_to_join=None, sort_keys=None, sort_dirs=None):
def _db_connection_type(db_connection):
def _safe_regex_mysql(raw_string):
def _get_regexp_ops(connection):
def _regex_instance_filter(query, filters):
def _exact_instance_filter(query, filters, legal_keys):
def process_sort_params(sort_keys, sort_dirs, default_keys=['created_at', 'id'], default_dir='asc'):
@require_context DCNL @pick_context_manager_reader_allow_async DCNL def instance_get_active_by_window_joined(context, begin, end=None, project_id=None, host=None, columns_to_join=None, limit=None, marker=None):
def _instance_get_all_uuids_by_host(context, host):
def _retry_instance_update():
@require_context DCNL @_retry_instance_update() DCNL @pick_context_manager_writer DCNL def instance_update_and_get_original(context, instance_uuid, values, columns_to_join=None, expected=None):
@pick_context_manager_writer DCNL def instance_add_security_group(context, instance_uuid, security_group_id):
@require_context DCNL @pick_context_manager_writer DCNL def instance_remove_security_group(context, instance_uuid, security_group_id):
@require_context DCNL @pick_context_manager_reader DCNL def instance_info_cache_get(context, instance_uuid):
@require_context DCNL @oslo_db_api.wrap_db_retry(max_retries=5, retry_on_deadlock=True) DCNL @pick_context_manager_writer DCNL def instance_info_cache_update(context, instance_uuid, values):
@require_context DCNL @pick_context_manager_writer DCNL def instance_info_cache_delete(context, instance_uuid):
@pick_context_manager_writer DCNL def network_associate(context, project_id, network_id=None, force=False):
def _create_quota_usage_if_missing(user_usages, resource, until_refresh, project_id, user_id, session):
def _is_quota_refresh_needed(quota_usage, max_age):
def _refresh_quota_usages(quota_usage, until_refresh, in_use):
def _calculate_overquota(project_quotas, user_quotas, deltas, project_usages, user_usages):
def _quota_reservations_query(context, reservations):
@require_context DCNL @pick_context_manager_writer DCNL def ec2_volume_create(context, volume_uuid, id=None):
@require_context DCNL @pick_context_manager_writer DCNL def ec2_snapshot_create(context, snapshot_uuid, id=None):
def _scrub_empty_str_values(dct, keys_to_scrub):
def _security_group_get_by_names(context, group_names):
def security_group_ensure_default(context):
@pick_context_manager_writer DCNL def flavor_create(context, values, projects=None):
def _dict_with_extra_specs(inst_type_query):
@require_context DCNL @pick_context_manager_reader DCNL def flavor_get_all(context, inactive=False, filters=None, sort_key='flavorid', sort_dir='asc', limit=None, marker=None):
@require_context DCNL @pick_context_manager_reader DCNL def flavor_get(context, id):
@require_context DCNL @pick_context_manager_reader DCNL def flavor_get_by_name(context, name):
@require_context DCNL @pick_context_manager_reader DCNL def flavor_get_by_flavor_id(context, flavor_id, read_deleted):
@pick_context_manager_writer DCNL def flavor_destroy(context, flavor_id):
@pick_context_manager_reader DCNL def flavor_access_get_by_flavor_id(context, flavor_id):
@pick_context_manager_writer DCNL def flavor_access_add(context, flavor_id, project_id):
@pick_context_manager_writer DCNL def flavor_access_remove(context, flavor_id, project_id):
@require_context DCNL @pick_context_manager_reader DCNL def vol_get_usage_by_time(context, begin):
@pick_context_manager_reader DCNL def s3_image_get(context, image_id):
@pick_context_manager_reader DCNL def s3_image_get_by_uuid(context, image_uuid):
@pick_context_manager_writer DCNL def s3_image_create(context, image_uuid):
@pick_context_manager_reader DCNL def aggregate_get_by_host(context, host, key=None):
@pick_context_manager_reader DCNL def aggregate_get_by_metadata_key(context, key):
@pick_context_manager_writer DCNL def instance_fault_create(context, values):
@pick_context_manager_reader DCNL def instance_fault_get_by_instance_uuids(context, instance_uuids, latest=False):
@pick_context_manager_reader DCNL def actions_get(context, instance_uuid):
@pick_context_manager_reader DCNL def action_get_by_request_id(context, instance_uuid, request_id):
@pick_context_manager_writer DCNL def action_event_start(context, values):
@pick_context_manager_writer DCNL def action_event_finish(context, values):
@require_context DCNL @pick_context_manager_writer DCNL def ec2_instance_create(context, instance_uuid, id=None):
def _archive_if_instance_deleted(table, shadow_table, instances, conn, max_rows):
def _archive_deleted_rows_for_table(tablename, max_rows):
def archive_deleted_rows(max_rows=None):
@pick_context_manager_writer DCNL def instance_group_create(context, values, policies=None, members=None):
@pick_context_manager_reader DCNL def instance_group_get(context, group_uuid):
@pick_context_manager_writer DCNL def instance_group_update(context, group_uuid, values):
@pick_context_manager_writer DCNL def instance_group_delete(context, group_uuid):
@pick_context_manager_reader DCNL def instance_group_get_all(context):
@pick_context_manager_reader DCNL def instance_group_get_all_by_project_id(context, project_id):
def _instance_group_id(context, group_uuid):
def _process_null_records(table, col_name, check_fkeys, delete=False):
def db_null_instance_uuid_scan(delete=False):
def _find_migrate_repo(database='main'):
def constraint(**conditions):
def equal_any(*values):
def not_equal(*values):
def create_context_manager(connection):
def select_db_reader_mode(f):
def service_destroy(context, service_id):
def service_get(context, service_id):
def service_get_by_uuid(context, service_uuid):
def service_get_minimum_version(context, binary):
def service_get_by_host_and_topic(context, host, topic):
def service_get_by_host_and_binary(context, host, binary):
def service_get_all(context, disabled=None):
def service_get_all_by_topic(context, topic):
def service_get_all_by_binary(context, binary, include_disabled=False):
def service_get_all_computes_by_hv_type(context, hv_type, include_disabled=False):
def service_get_all_by_host(context, host):
def service_get_by_compute_host(context, host):
def service_create(context, values):
def service_update(context, service_id, values):
def compute_node_get(context, compute_id):
def compute_node_get_model(context, compute_id):
def compute_nodes_get_by_service_id(context, service_id):
def compute_node_get_by_host_and_nodename(context, host, nodename):
def compute_node_get_all(context):
def compute_node_get_all_mapped_less_than(context, mapped_less_than):
def compute_node_get_all_by_pagination(context, limit=None, marker=None):
def compute_node_get_all_by_host(context, host):
def compute_node_search_by_hypervisor(context, hypervisor_match):
def compute_node_create(context, values):
def compute_node_update(context, compute_id, values):
def compute_node_delete(context, compute_id):
def compute_node_statistics(context):
def certificate_create(context, values):
def certificate_get_all_by_project(context, project_id):
def certificate_get_all_by_user(context, user_id):
def certificate_get_all_by_user_and_project(context, user_id, project_id):
def floating_ip_get_pools(context):
def floating_ip_allocate_address(context, project_id, pool, auto_assigned=False):
def floating_ip_bulk_create(context, ips, want_result=True):
def floating_ip_bulk_destroy(context, ips):
def floating_ip_create(context, values):
def floating_ip_deallocate(context, address):
def floating_ip_destroy(context, address):
def floating_ip_disassociate(context, address):
def floating_ip_fixed_ip_associate(context, floating_address, fixed_address, host):
def floating_ip_get_all(context):
def floating_ip_get_all_by_host(context, host):
def floating_ip_get_all_by_project(context, project_id):
def floating_ip_get_by_address(context, address):
def floating_ip_get_by_fixed_address(context, fixed_address):
def floating_ip_get_by_fixed_ip_id(context, fixed_ip_id):
def floating_ip_update(context, address, values):
def dnsdomain_get_all(context):
def dnsdomain_register_for_zone(context, fqdomain, zone):
def dnsdomain_register_for_project(context, fqdomain, project):
def dnsdomain_unregister(context, fqdomain):
def dnsdomain_get(context, fqdomain):
def migration_update(context, id, values):
def migration_create(context, values):
def migration_get(context, migration_id):
def migration_get_by_id_and_instance(context, migration_id, instance_uuid):
def migration_get_by_instance_and_status(context, instance_uuid, status):
def migration_get_unconfirmed_by_dest_compute(context, confirm_window, dest_compute):
def migration_get_in_progress_by_host_and_node(context, host, node):
def migration_get_all_by_filters(context, filters):
def migration_get_in_progress_by_instance(context, instance_uuid, migration_type=None):
def fixed_ip_associate(context, address, instance_uuid, network_id=None, reserved=False, virtual_interface_id=None):
def fixed_ip_associate_pool(context, network_id, instance_uuid=None, host=None, virtual_interface_id=None):
def fixed_ip_create(context, values):
def fixed_ip_bulk_create(context, ips):
def fixed_ip_disassociate(context, address):
def fixed_ip_disassociate_all_by_timeout(context, host, time):
def fixed_ip_get(context, id, get_network=False):
def fixed_ip_get_all(context):
def fixed_ip_get_by_address(context, address, columns_to_join=None):
def fixed_ip_get_by_floating_address(context, floating_address):
def fixed_ip_get_by_instance(context, instance_uuid):
def fixed_ip_get_by_host(context, host):
def fixed_ip_get_by_network_host(context, network_uuid, host):
def fixed_ips_by_virtual_interface(context, vif_id):
def fixed_ip_update(context, address, values):
def virtual_interface_create(context, values):
def virtual_interface_update(context, address, values):
def virtual_interface_get(context, vif_id):
def virtual_interface_get_by_address(context, address):
def virtual_interface_get_by_uuid(context, vif_uuid):
def virtual_interface_get_by_instance(context, instance_id):
def virtual_interface_get_by_instance_and_network(context, instance_id, network_id):
def virtual_interface_delete_by_instance(context, instance_id):
def virtual_interface_delete(context, id):
def virtual_interface_get_all(context):
def instance_create(context, values):
def instance_destroy(context, instance_uuid, constraint=None):
def instance_get_by_uuid(context, uuid, columns_to_join=None):
def instance_get(context, instance_id, columns_to_join=None):
def instance_get_all(context, columns_to_join=None):
def instance_get_all_by_filters(context, filters, sort_key='created_at', sort_dir='desc', limit=None, marker=None, columns_to_join=None):
def instance_get_all_by_filters_sort(context, filters, limit=None, marker=None, columns_to_join=None, sort_keys=None, sort_dirs=None):
def instance_get_active_by_window_joined(context, begin, end=None, project_id=None, host=None, columns_to_join=None, limit=None, marker=None):
def instance_get_all_by_host(context, host, columns_to_join=None):
def instance_get_all_by_host_and_node(context, host, node, columns_to_join=None):
def instance_get_all_by_host_and_not_type(context, host, type_id=None):
def instance_get_all_by_grantee_security_groups(context, group_ids):
def instance_floating_address_get_all(context, instance_uuid):
def instance_get_all_hung_in_rebooting(context, reboot_window):
def instance_update(context, instance_uuid, values, expected=None):
def instance_update_and_get_original(context, instance_uuid, values, columns_to_join=None, expected=None):
def instance_add_security_group(context, instance_id, security_group_id):
def instance_remove_security_group(context, instance_id, security_group_id):
def instance_group_create(context, values, policies=None, members=None):
def instance_group_get(context, group_uuid):
def instance_group_get_by_instance(context, instance_uuid):
def instance_group_update(context, group_uuid, values):
def instance_group_delete(context, group_uuid):
def instance_group_get_all(context):
def instance_group_get_all_by_project_id(context, project_id):
def instance_group_members_add(context, group_uuid, members, set_delete=False):
def instance_group_member_delete(context, group_uuid, instance_id):
def instance_group_members_get(context, group_uuid):
def instance_info_cache_get(context, instance_uuid):
def instance_info_cache_update(context, instance_uuid, values):
def instance_info_cache_delete(context, instance_uuid):
def instance_extra_get_by_instance_uuid(context, instance_uuid, columns=None):
def instance_extra_update_by_uuid(context, instance_uuid, updates):
def key_pair_create(context, values):
def key_pair_destroy(context, user_id, name):
def key_pair_get(context, user_id, name):
def key_pair_get_all_by_user(context, user_id, limit=None, marker=None):
def key_pair_count_by_user(context, user_id):
def network_associate(context, project_id, network_id=None, force=False):
def network_count_reserved_ips(context, network_id):
def network_create_safe(context, values):
def network_delete_safe(context, network_id):
def network_disassociate(context, network_id, disassociate_host=True, disassociate_project=True):
def network_get(context, network_id, project_only='allow_none'):
def network_get_all(context, project_only='allow_none'):
def network_get_all_by_uuids(context, network_uuids, project_only='allow_none'):
def network_in_use_on_host(context, network_id, host=None):
def network_get_associated_fixed_ips(context, network_id, host=None):
def network_get_by_uuid(context, uuid):
def network_get_by_cidr(context, cidr):
def network_get_all_by_host(context, host):
def network_set_host(context, network_id, host_id):
def network_update(context, network_id, values):
def quota_create(context, project_id, resource, limit, user_id=None):
def quota_get(context, project_id, resource, user_id=None):
def quota_get_all_by_project_and_user(context, project_id, user_id):
def quota_get_all_by_project(context, project_id):
def quota_get_per_project_resources():
def quota_get_all(context, project_id):
def quota_update(context, project_id, resource, limit, user_id=None):
def quota_class_create(context, class_name, resource, limit):
def quota_class_get(context, class_name, resource):
def quota_class_get_default(context):
def quota_class_get_all_by_name(context, class_name):
def quota_class_update(context, class_name, resource, limit):
def quota_usage_get(context, project_id, resource, user_id=None):
def quota_usage_get_all_by_project_and_user(context, project_id, user_id):
def quota_usage_get_all_by_project(context, project_id):
def quota_usage_update(context, project_id, user_id, resource, **kwargs):
def quota_usage_refresh(context, resources, keys, until_refresh, max_age, project_id=None, user_id=None):
def quota_reserve(context, resources, quotas, user_quotas, deltas, expire, until_refresh, max_age, project_id=None, user_id=None):
def reservation_commit(context, reservations, project_id=None, user_id=None):
def reservation_rollback(context, reservations, project_id=None, user_id=None):
def quota_destroy_all_by_project_and_user(context, project_id, user_id):
def quota_destroy_all_by_project(context, project_id):
def reservation_expire(context):
def block_device_mapping_create(context, values, legacy=True):
def block_device_mapping_update(context, bdm_id, values, legacy=True):
def block_device_mapping_update_or_create(context, values, legacy=True):
def block_device_mapping_get_all_by_instance_uuids(context, instance_uuids):
def block_device_mapping_get_all_by_instance(context, instance_uuid):
def block_device_mapping_get_all_by_volume_id(context, volume_id, columns_to_join=None):
def block_device_mapping_get_by_instance_and_volume_id(context, volume_id, instance_uuid, columns_to_join=None):
def block_device_mapping_destroy(context, bdm_id):
def block_device_mapping_destroy_by_instance_and_device(context, instance_uuid, device_name):
def block_device_mapping_destroy_by_instance_and_volume(context, instance_uuid, volume_id):
def security_group_get_all(context):
def security_group_get(context, security_group_id, columns_to_join=None):
def security_group_get_by_name(context, project_id, group_name, columns_to_join=None):
def security_group_get_by_project(context, project_id):
def security_group_get_by_instance(context, instance_uuid):
def security_group_in_use(context, group_id):
def security_group_create(context, values):
def security_group_update(context, security_group_id, values, columns_to_join=None):
def security_group_ensure_default(context):
def security_group_destroy(context, security_group_id):
def security_group_rule_create(context, values):
def security_group_rule_get_by_security_group(context, security_group_id, columns_to_join=None):
def security_group_rule_get_by_instance(context, instance_uuid):
def security_group_rule_destroy(context, security_group_rule_id):
def security_group_rule_get(context, security_group_rule_id):
def security_group_rule_count_by_group(context, security_group_id):
def provider_fw_rule_create(context, rule):
def provider_fw_rule_get_all(context):
def provider_fw_rule_destroy(context, rule_id):
def project_get_networks(context, project_id, associate=True):
def console_pool_create(context, values):
def console_pool_get_by_host_type(context, compute_host, proxy_host, console_type):
def console_pool_get_all_by_host_type(context, host, console_type):
def console_create(context, values):
def console_delete(context, console_id):
def console_get_by_pool_instance(context, pool_id, instance_uuid):
def console_get_all_by_instance(context, instance_uuid, columns_to_join=None):
def console_get(context, console_id, instance_uuid=None):
def flavor_create(context, values, projects=None):
def flavor_get_all(context, inactive=False, filters=None, sort_key='flavorid', sort_dir='asc', limit=None, marker=None):
def flavor_get(context, id):
def flavor_get_by_name(context, name):
def flavor_get_by_flavor_id(context, id, read_deleted=None):
def flavor_destroy(context, flavor_id):
def flavor_access_get_by_flavor_id(context, flavor_id):
def flavor_access_add(context, flavor_id, project_id):
def flavor_access_remove(context, flavor_id, project_id):
def flavor_extra_specs_get(context, flavor_id):
def flavor_extra_specs_delete(context, flavor_id, key):
def flavor_extra_specs_update_or_create(context, flavor_id, extra_specs):
def pci_device_get_by_addr(context, node_id, dev_addr):
def pci_device_get_by_id(context, id):
def pci_device_get_all_by_node(context, node_id):
def pci_device_get_all_by_instance_uuid(context, instance_uuid):
def pci_device_get_all_by_parent_addr(context, node_id, parent_addr):
def pci_device_destroy(context, node_id, address):
def pci_device_update(context, node_id, address, value):
def cell_create(context, values):
def cell_update(context, cell_name, values):
def cell_delete(context, cell_name):
def cell_get(context, cell_name):
def cell_get_all(context):
def instance_metadata_get(context, instance_uuid):
def instance_metadata_delete(context, instance_uuid, key):
def instance_metadata_update(context, instance_uuid, metadata, delete):
def instance_system_metadata_get(context, instance_uuid):
def instance_system_metadata_update(context, instance_uuid, metadata, delete):
def agent_build_create(context, values):
def agent_build_get_by_triple(context, hypervisor, os, architecture):
def agent_build_get_all(context, hypervisor=None):
def agent_build_destroy(context, agent_update_id):
def agent_build_update(context, agent_build_id, values):
def bw_usage_get(context, uuid, start_period, mac):
def bw_usage_get_by_uuids(context, uuids, start_period):
def bw_usage_update(context, uuid, mac, start_period, bw_in, bw_out, last_ctr_in, last_ctr_out, last_refreshed=None, update_cells=True):
def vol_get_usage_by_time(context, begin):
def vol_usage_update(context, id, rd_req, rd_bytes, wr_req, wr_bytes, instance_id, project_id, user_id, availability_zone, update_totals=False):
def s3_image_get(context, image_id):
def s3_image_get_by_uuid(context, image_uuid):
def s3_image_create(context, image_uuid):
def aggregate_create(context, values, metadata=None):
def aggregate_get(context, aggregate_id):
def aggregate_get_by_host(context, host, key=None):
def aggregate_get_by_uuid(context, uuid):
def aggregate_metadata_get_by_host(context, host, key=None):
def aggregate_update(context, aggregate_id, values):
def aggregate_delete(context, aggregate_id):
def aggregate_get_all(context):
def aggregate_metadata_add(context, aggregate_id, metadata, set_delete=False):
def aggregate_metadata_get(context, aggregate_id):
def aggregate_metadata_delete(context, aggregate_id, key):
def aggregate_host_add(context, aggregate_id, host):
def aggregate_host_get_all(context, aggregate_id):
def aggregate_host_delete(context, aggregate_id, host):
def instance_fault_create(context, values):
def instance_fault_get_by_instance_uuids(context, instance_uuids, latest=False):
def action_start(context, values):
def action_finish(context, values):
def actions_get(context, uuid):
def action_get_by_request_id(context, uuid, request_id):
def action_event_start(context, values):
def action_event_finish(context, values):
def action_events_get(context, action_id):
def get_instance_uuid_by_ec2_id(context, ec2_id):
def ec2_instance_create(context, instance_uuid, id=None):
def task_log_end_task(context, task_name, period_beginning, period_ending, host, errors, message=None):
def task_log_begin_task(context, task_name, period_beginning, period_ending, host, task_items=None, message=None):
def archive_deleted_rows(max_rows=None):
def instance_tag_add(context, instance_uuid, tag):
def instance_tag_set(context, instance_uuid, tags):
def instance_tag_get_by_instance_uuid(context, instance_uuid):
def instance_tag_delete(context, instance_uuid, tag):
def instance_tag_delete_all(context, instance_uuid):
def instance_tag_exists(context, instance_uuid, tag):
def console_auth_token_create(context, values):
def console_auth_token_get_valid(context, token_hash, instance_uuid):
def console_auth_token_destroy_all_by_instance(context, instance_uuid):
def console_auth_token_destroy_expired_by_host(context, host):
def db_sync(version=None, database='main', context=None):
def db_version(database='main', context=None):
def db_initial_version(database='main'):
def db_null_instance_uuid_scan(delete=False):
def vpn_ping(address, port, timeout=0.05, session_id=None):
def execute(*cmd, **kwargs):
def ssh_execute(dest, *cmd, **kwargs):
def trycmd(*args, **kwargs):
def last_completed_audit_period(unit=None, before=None):
def generate_password(length=None, symbolgroups=DEFAULT_PASSWORD_SYMBOLS):
def utf8(value):
def parse_server_string(server_str):
def get_ip_version(network):
def safe_ip_format(ip):
def format_remote_path(host, path):
def monkey_patch():
def make_dev_path(dev, partition=None, base='/dev'):
def sanitize_hostname(hostname, default_name=None):
@contextlib.contextmanager DCNL def temporary_mutation(obj, **kwargs):
def generate_mac_address():
def read_file_as_root(file_path):
@contextlib.contextmanager DCNL def temporary_chown(path, owner_uid=None):
def walk_class_hierarchy(clazz, encountered=None):
def mkfs(fs, path, label=None, run_as_root=False):
def check_string_length(value, name=None, min_length=0, max_length=None):
def validate_integer(value, name, min_value=None, max_value=None):
def spawn(func, *args, **kwargs):
def spawn_n(func, *args, **kwargs):
def is_none_string(val):
def get_hash_str(base_str):
def get_sha256_str(base_str):
def get_obj_repr_unicode(obj):
def filter_and_format_resource_metadata(resource_type, resource_list, search_filts, metadata_type=None):
def safe_truncate(value, length):
def read_cached_file(filename, force_reload=False):
def delete_cached_file(filename):
def isotime(at=None):
def print_dict(dct, dict_property='Property', dict_value='Value'):
def validate_args(fn, *args, **kwargs):
def wrap_exception(notifier=None, get_notifier=None, binary=None):
def _cleanse_dict(original):
@utils.synchronized(SERIAL_LOCK) DCNL def acquire_port(host):
@utils.synchronized(SERIAL_LOCK) DCNL def release_port(host, port):
def init(policy_file=None, rules=None, default_rule=None, use_conf=True):
def _serialize_rules(rules):
def _warning_for_deprecated_user_based_rules(rules):
def set_rules(rules, overwrite=True, use_conf=False):
def authorize(context, action, target, do_raise=True, exc=None):
def check_is_admin(context):
def verify_deprecated_policy(old_policy, new_policy, default_rule, context):
def get_memcached_client(expiration_time=0):
def get_client(expiration_time=0):
def _get_custom_cache_region(expiration_time=WEEK, backend=None, url=None):
def load_tests(loader, tests, pattern):
@db.api_context_manager.writer DCNL def _delete_request_spec(context, instance_uuid):
def generate_random_alphanumeric(length):
def generate_random_numeric(length):
def generate_new_element(items, prefix, numeric=False):
def webob_factory(url):
def compare_links(actual, expected):
def compare_media_types(actual, expected):
def compare_tree_to_dict(actual, expected, keys):
def _get_self_href(response):
def stub_set_host_enabled(context, host_name, enabled):
def _create_instance(**kwargs):
def _create_instance_dict(**kwargs):
def format_action(action):
def format_event(event):
def _quote_domain(domain):
def _quota_reserve(context, project_id, user_id):
def stub_out(test, funcs):
def stub_out_db_instance_api(test, injected=True):
def initialize(_uri):
def _match_query(query, attrs):
def _paren_groups(source):
def _match(key, value, attrs):
def _subs(value):
def _from_json(encoded):
def _to_json(unencoded):
def bad_function_unknown_module(self, context):
def compare_obj(test, obj, db_obj, subs=None, allow_missing=None, comparators=None):
def get_nova_objects():
def fake_execute_set_repliers(repliers):
def fake_execute_default_reply_handler(*ignore_args, **ignore_kwargs):
def fake_execute(*cmd_parts, **kwargs):
def example_decorator(name, function):
def stub_out_image_service(test):
def create_mempages(mappings):
def disable_event_thread(self):
def make_libvirtError(error_class, msg, error_code=None, error_domain=None, error_message=None, error_level=None, str1=None, str2=None, str3=None, int1=None, int2=None):
def fake_disk_info_byname(instance, type='qcow2'):
def fake_disk_info_json(instance, type='qcow2'):
def get_connector_properties(root_helper, my_ip, multipath, enforce_multipath, host=None):
def fake_get_vim_object(arg):
@property DCNL def fake_vim_prop(arg):
def fake_is_vim_object(arg, module):
def set_stubs(test):
def reset():
def cleanup():
def _create_object(table, table_obj):
def _get_object(obj_ref):
def _get_objects(obj_type):
def _convert_to_array_of_mor(mors):
def _convert_to_array_of_opt_val(optvals):
def _create_array_of_type(t):
def _get_object_refs(obj_type):
def _update_object(table, table_obj):
def _add_file(file_path):
def _remove_file(file_path):
def fake_plug_vifs(*args, **kwargs):
def fake_get_network(*args, **kwargs):
def get_file(file_path):
def fake_upload_image(context, image, instance, **kwargs):
def fake_fetch_image(context, instance, host, port, dc_name, ds_name, file_path, cookies=None):
def _get_vm_mdo(vm_ref):
def _merge_extraconfig(existing, changes):
def catch_notimplementederror(f):
def stub_vm_utils_with_vdi_attached(function):
def stubout_session(stubs, cls, product_version=(5, 6, 2), product_brand='XenServer', platform_version=(1, 9, 0), **opt_args):
def stubout_determine_is_pv_objectstore(stubs):
def stubout_is_snapshot(stubs):
def stubout_lookup_image(stubs):
def stubout_fetch_disk_image(stubs, raise_failure=False):
def stubout_create_vm(stubs):
def stubout_attach_disks(stubs):
def fake_bdm_object(context, bdm_dict):
def setup_rt(hostname, virt_resources=_VIRT_DRIVER_AVAIL_RESOURCES, estimate_overhead=overhead_zero):
def get_primitive_instance_by_uuid(context, instance_uuid):
def unify_instance(instance):
def create_instance(context, user_id='fake', project_id='fake', params=None):
def get_image_fixtures():
def _get_instances_with_cached_ips(orig_func, *args, **kwargs):
def _create_instances_with_cached_ips(orig_func, *args, **kwargs):
def targets_cell(fn):
@contextlib.contextmanager DCNL def try_target_cell(context, cell):
@contextlib.contextmanager DCNL def obj_target_cell(obj, cell):
def add_hook(name, pass_function=False):
def reset():
def _tupleize(dct):
def basedir_def(*args):
def bindir_def(*args):
def state_path_def(*args):
def ensure_ca_filesystem():
def fetch_crl(project_id):
def ssh_encrypt_text(ssh_public_key, text):
def revoke_cert(project_id, file_name):
def revoke_certs_by_user(user_id):
def revoke_certs_by_project(project_id):
def revoke_certs_by_user_and_project(user_id, project_id):
def _project_cert_subject(project_id):
def _user_cert_subject(user_id, project_id):
def generate_x509_cert(user_id, project_id, bits=2048):
def generate_winrm_x509_cert(user_id, bits=2048):
def migrate_instances_add_request_spec(context, max_count):
def get_attrname(name):
def obj_to_primitive(obj):
def obj_make_dict_of_lists(context, list_cls, obj_list, item_key):
def serialize_args(fn):
def obj_equal_prims(obj_1, obj_2, ignore=None):
@db.api_context_manager.reader DCNL def _get_build_requests_with_no_instance_uuid(context, limit):
def delete_build_requests_with_no_instance_uuid(context, count):
def get_minimum_version_all_cells(context, binaries):
def make_secgroup_list(security_groups):
@db_api.api_context_manager.reader DCNL def _flavor_get_all_from_db(context, inactive, filters, sort_key, sort_dir, limit, marker):
@db_api.api_context_manager.reader DCNL def _ensure_rc_cache(ctx):
@db_api.api_context_manager.writer DCNL def _trait_sync(ctx):
def _ensure_trait_sync(ctx):
def _get_current_inventory_resources(conn, rp):
def _delete_inventory_from_provider(conn, rp, to_delete):
def _add_inventory_to_provider(conn, rp, inv_list, to_add):
def _update_inventory_for_provider(conn, rp, inv_list, to_update):
def _increment_provider_generation(conn, rp):
@db_api.api_context_manager.writer DCNL def _add_inventory(context, rp, inventory):
@db_api.api_context_manager.writer DCNL def _update_inventory(context, rp, inventory):
@db_api.api_context_manager.writer DCNL def _delete_inventory(context, rp, resource_class):
@db_api.api_context_manager.writer DCNL def _set_inventory(context, rp, inv_list):
@db_api.api_context_manager.reader DCNL def _get_providers_with_shared_capacity(ctx, rc_id, amount):
@db_api.api_context_manager.reader DCNL def _get_all_with_shared(ctx, resources):
def _delete_current_allocs(conn, consumer_id):
def _check_capacity_exceeded(conn, allocs):
def _ensure_lookup_table_entry(conn, tbl, external_id):
def _ensure_project(conn, external_id):
def _ensure_user(conn, external_id):
@db_api.api_context_manager.reader DCNL def _get_usages_by_provider_and_rc(ctx, rp_ids, rc_ids):
def from_pci_stats(pci_stats):
def _expected_cols(expected_attrs):
def trace_cls(name, **kwargs):
def generate_glance_url():
def generate_image_url(image_ref):
def _endpoint_from_image_ref(image_href):
def get_api_servers():
def _is_image_available(context, image):
def _convert_timestamps_to_datetimes(image_meta):
def _reraise_translated_image_exception(image_id):
def _reraise_translated_exception():
def get_remote_image_service(context, image_href):
def _security_group_count(context, project_id, user_id=None):
def _instances_cores_ram_count(context, project_id, user_id=None):
def _server_group_count(context, project_id, user_id=None):
def _valid_method_call_check_resources(resource_values, method, resources):
def import_no_db_in_virt(logical_line, filename):
def import_no_virt_driver_import_deps(physical_line, filename):
def import_no_virt_driver_config_deps(physical_line, filename):
def assert_true_instance(logical_line):
def assert_equal_type(logical_line):
def no_translate_debug_logs(logical_line, filename):
def no_import_translation_in_tests(logical_line, filename):
def no_setting_conf_directly_in_tests(logical_line, filename):
def check_explicit_underscore_import(logical_line, filename):
def assert_true_or_false_with_in(logical_line):
def assert_raises_regexp(logical_line):
def assert_equal_in(logical_line):
def check_greenthread_spawns(logical_line, physical_line, filename):
def check_policy_enforce(logical_line, filename):
def check_doubled_words(physical_line, filename):
def no_os_popen(logical_line):
def no_log_warn(logical_line):
def check_context_log(logical_line, physical_line, filename):
def no_assert_equal_true_false(logical_line):
def no_assert_true_false_is_not(logical_line):
def check_uuid4(logical_line):
def return_followed_by_space(logical_line):
def get_wrapped_function(function):
def param2id(object_id):
@decorator.decorator DCNL def validate_network_plugin(f, *args, **kwargs):
def main():
def add_lease(mac, ip_address):
def old_lease(mac, ip_address):
def del_lease(mac, ip_address):
def init_leases(network_id):
def main():
def block_db_access(service_name):
def args(*args, **kwargs):
def methods_of(obj):
def add_command_parsers(subparsers, categories):
def action_description(text):
def main():
def main():
def update_instance(instance):
def run(flow, instance=None):
def get_lpar_names(adp):
def get_pvm_uuid(instance):
def get_instance_wrapper(adapter, instance):
def power_on(adapter, instance):
def power_off(adapter, instance, force_immediate=False, timeout=None):
def reboot(adapter, instance, hard):
def delete_lpar(adapter, instance):
def create_lpar(adapter, host_w, instance):
def _translate_vm_state(pvm_state):
def get_vm_qp(adapter, lpar_uuid, qprop=None, log_errors=True):
def build_host_resource_from_ms(ms_w):
def set_vif_guest_frontend_config(conf, mac, model, driver, queues=None):
def set_vif_host_backend_bridge_config(conf, brname, tapname=None):
def set_vif_host_backend_ethernet_config(conf, tapname, host):
def set_vif_host_backend_802qbg_config(conf, devname, managerid, typeid, typeidversion, instanceid, tapname=None):
def set_vif_host_backend_802qbh_config(conf, net_type, devname, profileid, tapname=None):
def set_vif_host_backend_hw_veb(conf, net_type, devname, vlan, tapname=None):
def set_vif_host_backend_hostdev_pci_config(conf, pci_slot):
def set_vif_host_backend_direct_config(conf, devname, mode='passthrough'):
def set_vif_host_backend_vhostuser_config(conf, mode, path):
def set_vif_bandwidth_config(conf, inst_type):
def get_cache_fname(image_id):
def get_info_filename(base_path):
def is_valid_info_file(path):
def patch_tpool_proxy():
def create_image(disk_format, path, size):
def create_cow_image(backing_file, path, size=None):
def create_ploop_image(disk_format, path, size, fs_type):
def pick_disk_driver_name(hypervisor_version, is_block_dev=False):
def get_disk_size(path, format=None):
def get_disk_backing_file(path, basename=True, format=None):
def copy_image(src, dest, host=None, receive=False, on_execute=None, on_completion=None, compression=True):
def write_to_file(path, contents, umask=None):
def chown(path, owner):
def update_mtime(path):
def chown_for_id_maps(path, id_maps):
def extract_snapshot(disk_path, source_fmt, out_path, dest_fmt):
def load_file(path):
def file_open(*args, **kwargs):
def file_delete(path):
def path_exists(path):
def find_disk(guest):
def get_disk_type_from_path(path):
def get_fs_info(path):
def fetch_image(context, target, image_id):
def fetch_raw_image(context, target, image_id):
def get_instance_path(instance, relative=False):
def get_instance_path_at_destination(instance, migrate_data=None):
def get_arch(image_meta):
def is_mounted(mount_path, source=None):
def last_bytes(file_like_object, num):
def has_disk_dev(mapping, disk_dev):
def get_dev_prefix_for_disk_bus(disk_bus):
def get_dev_count_for_disk_bus(disk_bus):
def find_disk_dev_for_disk_bus(mapping, bus, assigned_devices=None):
def get_disk_bus_for_device_type(instance, virt_type, image_meta, device_type='disk'):
def get_disk_bus_for_disk_dev(virt_type, disk_dev):
def get_next_disk_info(mapping, disk_bus, device_type='disk', boot_index=None, assigned_devices=None):
def get_config_drive_type():
def get_device_name(bdm):
def get_disk_mapping(virt_type, instance, disk_bus, cdrom_bus, image_meta, block_device_info=None, rescue=False):
def get_disk_info(virt_type, instance, image_meta, block_device_info=None, rescue=False):
def create_volume(vg, lv, size, sparse=False):
def get_volume_group_info(vg):
def list_volumes(vg):
def volume_info(path):
def get_volume_size(path):
def _zero_volume(path, volume_size):
def clear_volume(path):
def remove_volumes(paths):
def volume_name(base):
def is_encrypted(path):
def create_volume(target, device, cipher, key_size, key):
def delete_volume(target):
def list_volumes():
def graphics_listen_addrs(migrate_data):
def serial_listen_addr(migrate_data):
def serial_listen_ports(migrate_data):
def _update_volume_xml(xml_doc, migrate_data, get_volume_config):
def _update_perf_events_xml(xml_doc, migrate_data):
def find_job_type(guest, instance):
def should_abort(instance, now, progress_time, progress_timeout, elapsed, completion_timeout, migration_status):
def should_switch_to_postcopy(memory_iteration, current_data_remaining, previous_data_remaining, migration_status):
def update_downtime(guest, instance, olddowntime, downtime_steps, elapsed):
def save_stats(instance, migration, info, remaining):
def run_tasks(guest, instance, active_migrations, on_migration_failure, migration, is_post_copy_enabled):
def run_recover_tasks(host, guest, instance, on_migration_failure):
def downtime_steps(data_gb):
def get_manager():
def mount(fstype, export, vol_name, mountpoint, instance, options=None):
def umount(vol_name, mountpoint, instance):
def mount_volume(volume, mnt_base, configfile=None):
def umount_volume(mnt_base):
def validate_volume(mount_path):
def mount_share(mount_path, export_path, export_type, options=None):
def unmount_share(mount_path, export_path):
def create_tmp_dir(function):
def get_domain_info(libvirt, host, virt_dom):
def force_tcg(force=True):
def mkfs(os_type, fs_label, target, run_as_root=True, specified_fs=None):
def get_disk_size(path):
def extend(image, size):
def can_resize_image(image, size):
def is_image_extendable(image):
def inject_data(image, key=None, net=None, metadata=None, admin_password=None, files=None, partition=None, mandatory=()):
def setup_container(image, container_dir):
def teardown_container(container_dir, container_root_device=None):
def clean_lxc_namespace(container_dir):
def inject_data_into_fs(fs, key, net, metadata, admin_password, files, mandatory=()):
def _setup_selinux_for_keys(fs, sshdir):
def _inject_key_into_fs(key, fs):
def _inject_net_into_fs(net, fs):
def _inject_admin_password_into_fs(admin_passwd, fs):
def _set_passwd(username, admin_passwd, passwd_data, shadow_data):
def get_block_device_info(instance, block_device_mapping):
def load_compute_driver(virtapi, compute_driver=None):
def _get_network_obj(session, network_objects, network_name):
def get_network_with_the_name(session, network_name='vmnet0', cluster=None):
def get_vswitch_for_vlan_interface(session, vlan_interface, cluster=None):
def check_if_vlan_interface_exists(session, vlan_interface, cluster=None):
def get_vlanid_and_vswitch_for_portgroup(session, pg_name, cluster=None):
def create_port_group(session, pg_name, vswitch_name, vlan_id=0, cluster=None):
def get_vm_create_spec(client_factory, instance, data_store_name, vif_infos, extra_specs, os_type=constants.DEFAULT_OS_TYPE, profile_spec=None, metadata=None):
def create_serial_port_spec(client_factory):
def get_vm_boot_spec(client_factory, device):
def get_vm_resize_spec(client_factory, vcpus, memory_mb, extra_specs, metadata=None):
def create_controller_spec(client_factory, key, adapter_type=constants.DEFAULT_ADAPTER_TYPE, bus_number=0):
def convert_vif_model(name):
def _create_vif_spec(client_factory, vif_info, vif_limits=None):
def get_network_attach_config_spec(client_factory, vif_info, index, vif_limits=None):
def get_network_detach_config_spec(client_factory, device, port_index):
def get_storage_profile_spec(session, storage_policy):
def get_vmdk_attach_config_spec(client_factory, disk_type=constants.DEFAULT_DISK_TYPE, file_path=None, disk_size=None, linked_clone=False, controller_key=None, unit_number=None, device_name=None, disk_io_limits=None):
def get_cdrom_attach_config_spec(client_factory, datastore, file_path, controller_key, cdrom_unit_number):
def get_vmdk_detach_config_spec(client_factory, device, destroy_disk=False):
def get_vm_extra_config_spec(client_factory, extra_opts):
def get_vmdk_info(session, vm_ref, uuid=None):
def get_scsi_adapter_type(hardware_devices):
def _find_allocated_slots(devices):
def _get_bus_number_for_scsi_controller(devices):
def allocate_controller_key_and_unit_number(client_factory, devices, adapter_type):
def get_rdm_disk(hardware_devices, uuid):
def get_vmdk_create_spec(client_factory, size_in_kb, adapter_type=constants.DEFAULT_ADAPTER_TYPE, disk_type=constants.DEFAULT_DISK_TYPE):
def create_virtual_cdrom_spec(client_factory, datastore, controller_key, file_path, cdrom_unit_number):
def _create_virtual_disk_spec(client_factory, controller_key, disk_type=constants.DEFAULT_DISK_TYPE, file_path=None, disk_size=None, linked_clone=False, unit_number=None, device_name=None, disk_io_limits=None):
def detach_virtual_disk_spec(client_factory, device, destroy_disk=False):
def clone_vm_spec(client_factory, location, power_on=False, snapshot=None, template=False, config=None):
def relocate_vm_spec(client_factory, datastore=None, host=None, disk_move_type='moveAllDiskBackingsAndAllowSharing'):
def get_machine_id_change_spec(client_factory, machine_id_str):
def get_add_vswitch_port_group_spec(client_factory, vswitch_name, port_group_name, vlan_id):
def get_vnc_config_spec(client_factory, port):
def get_vnc_port(session):
def _get_allocated_vnc_ports(session):
def _get_vm_ref_from_name(session, vm_name):
def _get_vm_ref_from_uuid(session, instance_uuid):
def _get_vm_ref_from_vm_uuid(session, instance_uuid):
def _get_vm_ref_from_extraconfig(session, instance_uuid):
@vm_ref_cache_from_instance DCNL def get_vm_ref(session, instance):
def search_vm_ref_by_identifier(session, identifier):
def get_host_ref_for_vm(session, instance):
def get_host_name_for_vm(session, instance):
def get_stats_from_cluster(session, cluster):
def get_host_ref(session, cluster=None):
def propset_dict(propset):
def get_res_pool_ref(session, cluster):
def get_all_cluster_mors(session):
def get_cluster_ref_by_name(session, cluster_name):
def get_vmdk_adapter_type(adapter_type):
def create_vm(session, instance, vm_folder, config_spec, res_pool_ref):
def destroy_vm(session, instance, vm_ref=None):
def copy_virtual_disk(session, dc_ref, source, dest):
def reconfigure_vm(session, vm_ref, config_spec):
def power_on_instance(session, instance, vm_ref=None):
def get_attach_port_index(session, vm_ref):
def power_off_instance(session, instance, vm_ref=None):
def find_rescue_device(hardware_devices, instance):
def detach_devices_from_vm(session, vm_ref, devices):
def create_folder(session, parent_folder_ref, name):
def object_to_dict(obj, list_depth=1):
def get_object_properties(vim, collector, mobj, type, properties):
def get_objects(vim, type, properties_to_collect=None, all=False):
def get_inner_objects(vim, base_obj, path, inner_type, properties_to_collect=None, all=False):
def get_prop_spec(client_factory, spec_type, properties):
def get_obj_spec(client_factory, obj, select_set=None):
def get_prop_filter_spec(client_factory, obj_spec, prop_spec):
def get_properties_for_a_collection_of_objects(vim, type, obj_list, properties):
def get_about_info(vim):
def ensure_vlan_bridge(session, vif, cluster=None, create_vlan=True):
def get_network_device(hardware_devices, mac_address):
def get_vsphere_location(context, image_id):
def fetch_image(context, instance, host, port, dc_name, ds_name, file_path, cookies=None):
def _build_shadow_vm_config_spec(session, name, size_kb, disk_type, ds_name):
def fetch_image_stream_optimized(context, instance, session, vm_name, ds_name, vm_folder_ref, res_pool_ref):
def get_vmdk_name_from_ovf(xmlstr):
def fetch_image_ova(context, instance, session, vm_name, ds_name, vm_folder_ref, res_pool_ref):
def upload_image_stream_optimized(context, image_id, instance, session, vm, vmdk_size):
def _select_datastore(session, data_stores, best_match, datastore_regex=None, storage_policy=None, allowed_ds_types=ALL_SUPPORTED_DS_TYPES):
def _is_datastore_valid(propdict, datastore_regex, ds_types):
def get_datastore(session, cluster, datastore_regex=None, storage_policy=None, allowed_ds_types=ALL_SUPPORTED_DS_TYPES):
def get_available_datastores(session, cluster=None, datastore_regex=None):
def disk_move(session, dc_ref, src_file, dst_file):
def disk_copy(session, dc_ref, src_file, dst_file):
def disk_delete(session, dc_ref, file_path):
def file_move(session, dc_ref, src_file, dst_file):
def search_datastore_spec(client_factory, file_name):
def file_exists(session, ds_browser, ds_path, file_name):
def file_size(session, ds_browser, ds_path, file_name):
def mkdir(session, ds_path, dc_ref):
def get_sub_folders(session, ds_browser, ds_path):
def _filter_datastores_matching_storage_policy(session, data_stores, storage_policy):
def _update_datacenter_cache_from_objects(session, dcs):
def get_dc_info(session, ds_ref):
def get_connected_hosts(session, datastore):
def get_injected_network_template(network_info, template=None, libvirt_virt_type=None):
def get_network_metadata(network_info):
def _get_eth_link(vif, ifc_num):
def _get_nets(vif, subnet, version, net_num, link_id):
def _get_default_route(version, subnet):
def _get_dns_services(subnet):
def get_cached_vifs_with_vlan(network_info):
def register_storage_use(storage_path, hostname):
def get_storage_users(storage_path):
def qemu_img_info(path, format=None):
def convert_image(source, dest, in_format, out_format, run_as_root=False):
def convert_image_unsafe(source, dest, out_format, run_as_root=False):
def _get_nodes_supported_instances(cpu_arch=None):
def create(node):
def _get_volume_create_az_value(instance):
def get_swap(transformed_list):
def get_iscsi_initiator(execute=None):
def find_network_with_bridge(session, bridge):
def make_step_decorator(context, instance, update_instance_progress, total_offset=0):
def is_hv_pool(metadata):
def create_vm(session, instance, name_label, kernel, ramdisk, use_pv_kernel=False, device_id=None):
def destroy_vm(session, instance, vm_ref):
def destroy_vbd(session, vbd_ref):
def create_vbd(session, vm_ref, vdi_ref, userdevice, vbd_type='disk', read_only=False, bootable=False, osvol=False, empty=False, unpluggable=True):
def attach_cd(session, vm_ref, vdi_ref, userdevice):
def safe_destroy_vdis(session, vdi_refs):
def create_vdi(session, sr_ref, instance, name_label, disk_type, virtual_size, read_only=False):
@contextlib.contextmanager DCNL def _dummy_vm(session, instance, vdi_ref):
def _safe_copy_vdi(session, sr_ref, instance, vdi_to_copy_ref):
def _clone_vdi(session, vdi_to_clone_ref):
def _get_vdi_other_config(disk_type, instance=None):
def get_vdi_for_vm_safely(session, vm_ref, userdevice='0'):
def remove_old_snapshots(session, instance, vm_ref):
def _snapshot_attached_here_impl(session, instance, vm_ref, label, userdevice, post_snapshot_callback):
def get_sr_path(session, sr_ref=None):
def destroy_cached_images(session, sr_ref, all_cached=False, dry_run=False):
def _find_cached_images(session, sr_ref):
def _find_cached_image(session, image_id, sr_ref):
def _auto_configure_disk(session, vdi_ref, new_gb):
def _generate_disk(session, instance, vm_ref, userdevice, name_label, disk_type, size_mb, fs_type, fs_label=None):
def _create_kernel_image(context, session, instance, name_label, image_id, image_type):
def create_image(context, session, instance, name_label, image_id, image_type):
def _fetch_image(context, session, instance, name_label, image_id, image_type):
def _fetch_vhd_image(context, session, instance, image_id):
def _get_vdi_chain_size(session, vdi_uuid):
def _fetch_disk_image(context, session, instance, name_label, image_id, image_type):
def determine_disk_image_type(image_meta):
def lookup_vm_vdis(session, vm_ref):
def lookup(session, name_label, check_rescue=False):
def preconfigure_instance(session, instance, vdi_ref, network_info):
def _vm_query_data_source(session, *args):
def compile_info(session, vm_ref):
def compile_diagnostics(vm_rec):
def scan_default_sr(session):
def safe_find_sr(session):
def _find_sr(session):
def _safe_find_iso_sr(session):
def _find_iso_sr(session):
def _get_rrd_server():
def _get_rrd(server, vm_uuid):
def get_instance_vdis_for_sr(session, vm_ref, sr_ref):
def _walk_vdi_chain(session, vdi_uuid):
def _is_vdi_a_snapshot(vdi_rec):
def _child_vhds(session, sr_ref, vdi_uuid_list, old_snapshots_only=False):
def _wait_for_vhd_coalesce(session, instance, sr_ref, vdi_ref, vdi_uuid_list):
def _remap_vbd_dev(dev):
def _wait_for_device(session, dev, dom0, max_seconds):
def cleanup_attached_vdis(session):
def _get_partitions(dev):
def _resize_part_and_fs(dev, start, old_sectors, new_sectors, flags):
def _sparse_copy(src_path, dst_path, virtual_size, block_size=4096):
def _mount_filesystem(dev_path, dir):
def _mounted_processing(device, key, net, metadata):
def ensure_correct_host(session):
def _import_migrated_vhds(session, instance, chain_label, disk_type, vdi_label):
def handle_ipxe_iso(session, instance, cd_vdi, network_info):
def set_other_config_pci(session, vm_ref, params):
def _parse_volume_info(connection_data):
def _get_target_host(iscsi_string):
def _get_target_port(iscsi_string):
def introduce_vdi(session, sr_ref, vdi_uuid=None, target_lun=None):
def forget_sr(session, sr_ref):
def _mountpoint_to_number(mountpoint):
def find_sr_by_uuid(session, sr_uuid):
def find_sr_from_vbd(session, vbd_ref):
def find_sr_from_vdi(session, vdi_ref):
def find_vbd_by_number(session, vm_ref, dev_number):
def is_booted_from_volume(session, vm_ref):
def _call_agent(session, instance, vm_ref, method, addl_args=None, timeout=None, success_codes=None):
def find_guest_agent(base_dir):
def swap_xapi_host(url, host_addr):
def call_xenhost(session, method, arg_dict):
def _call_host_management(session, method, *args):
def _uuid_find(context, host, name_label):
def _host_find(context, session, src_aggregate, host_ref):
def add_to_dict(functions):
@add_to_dict(_after_create_functions) DCNL def after_VBD_create(vbd_ref, vbd_rec):
@add_to_dict(_after_create_functions) DCNL def after_VIF_create(vif_ref, vif_rec):
@add_to_dict(_after_create_functions) DCNL def after_VM_create(vm_ref, vm_rec):
def _create_local_srs(host_ref):
def as_value(s):
def as_json(*args, **kwargs):
def get_vcpu_pin_set():
def parse_cpu_spec(spec):
def format_cpu_spec(cpuset, allow_ranges=True):
def get_number_of_serial_ports(flavor, image_meta):
def _score_cpu_topology(topology, wanttopology):
def _get_cpu_topology_constraints(flavor, image_meta):
def _get_possible_cpu_topologies(vcpus, maxtopology, allow_threads):
def _filter_for_numa_threads(possible, wantthreads):
def _sort_possible_cpu_topologies(possible, wanttopology):
def _get_desirable_cpu_topologies(flavor, image_meta, allow_threads=True, numa_topology=None):
def get_best_cpu_topology(flavor, image_meta, allow_threads=True, numa_topology=None):
def _numa_cell_supports_pagesize_request(host_cell, inst_cell):
def _pack_instance_onto_cores(available_siblings, instance_cell, host_cell_id, threads_per_core=1, num_cpu_reserved=0):
def _numa_fit_instance_cell_with_pinning(host_cell, instance_cell, num_cpu_reserved=0):
def _numa_fit_instance_cell(host_cell, instance_cell, limit_cell=None, cpuset_reserved=0):
def _get_flavor_image_meta(key, flavor, image_meta):
def _numa_get_pagesize_constraints(flavor, image_meta):
def _get_cpu_policy_constraints(flavor, image_meta):
def _get_cpu_thread_policy_constraints(flavor, image_meta):
def _get_realtime_mask(flavor, image):
def vcpus_realtime_topology(flavor, image):
def get_emulator_threads_constraint(flavor, image_meta):
def _validate_numa_nodes(nodes):
def numa_get_constraints(flavor, image_meta):
def numa_fit_instance_to_host(host_topology, instance_topology, limits=None, pci_requests=None, pci_stats=None):
def numa_get_reserved_huge_pages():
def numa_usage_from_instances(host, instances, free=False):
def instance_topology_from_instance(instance):
def host_topology_and_format_from_host(host):
def get_host_numa_usage_from_instance(host, instance, free=False, never_serialize_result=False):
def set_nodes(nodes):
def restore_nodes():
def _compute_node_to_inventory_dict(compute_node):
def _instance_to_allocations_dict(instance):
def _move_operation_alloc_request(source_allocs, dest_alloc_req):
def _extract_inventory_in_use(body):
def build_request_spec(ctxt, image, instances, instance_type=None):
def _process_extra_specs(extra_specs, resources):
def resources_from_flavor(instance, flavor):
def merge_resources(original_resources, new_resources, sign=1):
def resources_from_request_spec(spec_obj):
def set_vm_state_and_notify(context, instance_uuid, service, method, updates, ex, request_spec):
def build_filter_properties(scheduler_hints, forced_host, forced_node, instance_type):
def populate_filter_properties(filter_properties, host_state):
def _log_compute_error(instance_uuid, retry):
def _add_retry_host(filter_properties, host, node):
def parse_options(opts, sep='=', converter=str, name=''):
def validate_filter(filter):
def validate_weigher(weigher):
def _get_group_details(context, instance_uuid, user_group_hosts=None):
def setup_instance_group(context, request_spec):
def retry_on_timeout(retries=1):
@utils.expects_func_args('self', 'spec_obj') DCNL def set_update_time_on_success(function):
def all_weighers():
def aggregate_values_from_key(host_state, key_name):
def aggregate_metadata_get_by_host(host_state, key=None):
def validate_num_values(vals, default=None, cast_to=int, based_on=min):
def instance_uuids_overlap(host_state, uuids):
def other_types_on_host(host_state, instance_type_id):
def all_filters():
def is_safe_for_update(block_device_dict):
def create_image_bdm(image_ref, boot_index=0):
def snapshot_from_bdm(snapshot_id, template):
def legacy_mapping(block_device_mapping):
def from_legacy_mapping(legacy_block_device_mapping, image_uuid='', root_device_name=None, no_root=False):
def properties_root_device_name(properties):
def get_bdms_to_connect(bdms, exclude_root_mapping=False):
def mappings_prepend_dev(mappings):
def strip_dev(device_name):
def prepend_dev(device_name):
def strip_prefix(device_name):
def match_device(device):
def normalize(weight_list, minval=None, maxval=None):
def if_notifications_enabled(f):
def get_context():
def is_user_context(context):
def require_context(ctxt):
def authorize_project_context(context, project_id):
def authorize_user_context(context, user_id):
def authorize_quota_class_context(context, class_name):
def set_target_cell(context, cell_mapping):
@contextmanager DCNL def target_cell(context, cell_mapping):
def scatter_gather_cells(context, cell_mappings, timeout, fn, *args, **kwargs):
def scatter_gather_skip_cell0(context, fn, *args, **kwargs):
def scatter_gather_all_cells(context, fn, *args, **kwargs):
def pci_device_prop_match(pci_dev, specs):
def parse_address(address):
def get_function_by_ifname(ifname):
def _get_sysfs_netdev_path(pci_addr, pf_interface):
def get_ifname_by_pci_address(pci_addr, pf_interface=False):
def get_mac_by_pci_address(pci_addr, pf_interface=False):
def get_vf_num_by_pci_address(pci_addr):
def get_net_name_by_vf_pci_address(vfaddress):
def get_instance_pci_devs(inst, request_id=None):
def _get_alias_from_config():
def _translate_alias_to_requests(alias_spec):
def get_pci_requests_from_flavor(flavor):
def reset_globals():
def _check_microversion(url, microversion):
def cinderclient(context, microversion=None, skip_version_check=False):
def _untranslate_volume_summary_view(context, vol):
def _untranslate_snapshot_summary_view(context, snapshot):
def _translate_attachment_ref(attachment_ref):
def translate_cinder_exception(method):
def translate_volume_exception(method):
def translate_attachment_exception(method):
def translate_snapshot_exception(method):
def translate_mixed_exceptions(method):
def exception_to_dict(fault, message=None):
def add_instance_fault_from_exc(context, instance, fault, exc_info=None, fault_message=None):
def get_device_name_for_instance(instance, bdms, device):
def default_device_names_for_instance(instance, root_device_name, *block_device_lists):
def get_next_device_name(instance, device_name_list, root_device_name=None, device=None):
def get_value_from_system_metadata(instance, key, type, default):
def notify_usage_exists(notifier, context, instance_ref, current_period=False, ignore_missing_network_data=True, system_metadata=None, extra_usage_info=None):
def notify_about_instance_usage(notifier, context, instance, event_suffix, network_info=None, system_metadata=None, extra_usage_info=None, fault=None):
@rpc.if_notifications_enabled DCNL def notify_about_instance_action(context, instance, host, action, phase=None, binary='nova-compute', exception=None):
@rpc.if_notifications_enabled DCNL def notify_about_instance_create(context, instance, host, phase=None, binary='nova-compute', exception=None):
@rpc.if_notifications_enabled DCNL def notify_about_volume_attach_detach(context, instance, host, action, phase, binary='nova-compute', volume_id=None, exception=None):
@rpc.if_notifications_enabled DCNL def notify_about_keypair_action(context, keypair, action, phase):
@rpc.if_notifications_enabled DCNL def notify_about_volume_swap(context, instance, host, action, phase, old_volume_id, new_volume_id, exception=None):
def notify_about_server_group_update(context, event_suffix, sg_payload):
def notify_about_aggregate_update(context, event_suffix, aggregate_payload):
def notify_about_host_update(context, event_suffix, host_payload):
def refresh_info_cache_for_instance(context, instance):
def get_reboot_type(task_state, current_power_state):
def get_machine_ips():
def resize_quota_delta(context, new_flavor, old_flavor, sense, compare):
def upsize_quota_delta(context, new_flavor, old_flavor):
def reverse_upsize_quota_delta(context, instance):
def downsize_quota_delta(context, instance):
def reserve_quota_delta(context, deltas, instance):
def check_num_instances_quota(context, instance_type, min_count, max_count, project_id=None, user_id=None, orig_num_req=None):
def wrap_instance_event(prefix):
def _get_compute_api_class_name():
def HostAPI(*args, **kwargs):
def InstanceActionAPI(*args, **kwargs):
def _instance_in_resize_state(instance):
def _normalize_inventory_from_cn_obj(inv_data, cn):
@contextlib.contextmanager DCNL def errors_out_migration_ctxt(migration):
@utils.expects_func_args('migration') DCNL def errors_out_migration(function):
@utils.expects_func_args('instance') DCNL def reverts_task_state(function):
@utils.expects_func_args('instance') DCNL def wrap_instance_fault(function):
@utils.expects_func_args('image_id', 'instance') DCNL def delete_image_on_error(function):
def object_compat(function):
def check_instance_state(vm_state=None, task_state=(None,), must_have_launched=True):
def reject_instance_state(vm_state=None, task_state=None):
def _diff_dict(orig, new):
def target_host_cell(fn):
def _find_service_in_cell(context, service_id=None, service_host=None):
def create(name, memory, vcpus, root_gb, ephemeral_gb=0, flavorid=None, swap=0, rxtx_factor=1.0, is_public=True):
def get_default_flavor():
def get_flavor_by_name(name, ctxt=None):
def get_flavor_by_flavor_id(flavorid, ctxt=None, read_deleted='yes'):
def get_flavor_access_by_flavor_id(flavorid, ctxt=None):
def extract_flavor(instance, prefix=''):
def save_flavor_info(metadata, instance_type, prefix=''):
def delete_flavor_info(metadata, *prefixes):
def _compute_host(host, instance):
def _reverse_path(path):
def _response_cell_name_from_path(routing_path, neighbor_only=False):
def serialize_remote_exception(failure_info, log_failure=True):
def get_instances_to_sync(context, updated_since=None, project_id=None, deleted=True, shuffle=False, uuids_only=False):
def cell_with_item(cell_name, item):
def split_cell_and_item(cell_and_item):
def add_cell_to_compute_node(compute_node, cell_name):
def add_cell_to_service(service, cell_name):
def add_cell_to_task_log(task_log, cell_name):
def get_cell_type():
def sync_before(f):
def sync_after(f):
def all_weighers():
def all_filters():
def refresh_cache(f):
def get_binary_name():
def is_pid_cmdline_correct(pid, match):
def metadata_forward():
def metadata_accept():
def init_host(ip_range, is_external=False):
def bind_floating_ip(floating_ip, device):
def unbind_floating_ip(floating_ip, device):
def ensure_metadata_ip():
def ensure_vpn_forward(public_ip, port, private_ip):
def ensure_floating_forward(floating_ip, fixed_ip, device, network):
def remove_floating_forward(floating_ip, fixed_ip, device, network):
def floating_ebtables_rules(fixed_ip, network):
def get_dhcp_leases(context, network_ref):
def get_dhcp_hosts(context, network_ref, fixedips):
def get_dns_hosts(context, network_ref):
def _add_dnsmasq_accept_rules(dev):
def _remove_dnsmasq_accept_rules(dev):
def get_dhcp_opts(context, network_ref, fixedips):
@utils.synchronized('dnsmasq_start') DCNL def restart_dhcp(context, dev, network_ref, fixedips):
def _host_lease(fixedip):
def _host_dhcp(fixedip):
def _host_dhcp_opts(vif_id=None, gateway=None):
def _execute(*cmd, **kwargs):
def device_exists(device):
def _dhcp_file(dev, kind):
def _ra_file(dev, kind):
def _dnsmasq_pid_for(dev):
def _ra_pid_for(dev):
def _ip_bridge_cmd(action, params, device):
def _set_device_mtu(dev, mtu=None):
def _create_veth_pair(dev1_name, dev2_name, mtu=None):
def delete_net_dev(dev):
def delete_bridge_dev(dev):
def is_neutron():
def get_netmask(ip, subnet):
def _filter_hypervisor_macs(instance, ports, hypervisor_macs):
def _ensure_requested_network_ordering(accessor, unordered, preferred):
def _get_vif_name(vif):
def _get_hybrid_bridge_name(vif):
def _is_firewall_required(vif):
def _set_vhostuser_settings(vif, obj):
def nova_to_osvif_instance(instance):
def _nova_to_osvif_ip(ip):
def _nova_to_osvif_ips(ips):
def _nova_to_osvif_route(route):
def _nova_to_osvif_routes(routes):
def _nova_to_osvif_subnet(subnet):
def _nova_to_osvif_subnets(subnets):
def _nova_to_osvif_network(network):
def _get_vif_instance(vif, cls, **kwargs):
def nova_to_osvif_vif(vif):
def notify_decorator(name, fn):
def send_api_fault(url, status, exception):
def send_update(context, old_instance, new_instance, service='compute', host=None):
def send_update_with_states(context, instance, old_vm_state, new_vm_state, old_task_state, new_task_state, service='compute', host=None, verify_states=False):
@rpc.if_notifications_enabled DCNL def send_instance_update_notification(context, instance, old_vm_state=None, old_task_state=None, new_vm_state=None, new_task_state=None, service='compute', host=None, old_display_name=None):
def audit_period_bounds(current_period=False):
def bandwidth_usage(instance_ref, audit_start, ignore_missing_network_data=True):
def image_meta(system_metadata):
def info_from_instance(context, instance, network_info, system_metadata, **kw):
def notification_sample(sample):
def execute_get_output(*command):
def execute(*command):
def compute_signature(message, secret):
def verify_signature(message, secret):
def meter_message_from_counter(sample, secret):
def message_from_event(event, secret):
def get_publisher(conf, url, namespace):
def get_inspector(parsed_url, namespace='ceilometer.hardware.inspectors'):
def parse_snmp_return(ret, is_bulk=False):
def get_transport(conf, url=None, optional=False, cache=True):
def cleanup():
def get_batch_notification_listener(transport, targets, endpoints, allow_requeue=False, batch_size=1, batch_timeout=None):
def get_notifier(transport, publisher_id):
def enforce_limit(limit):
def sanitize_query(query, db_func, on_behalf_of=None):
def _verify_query_segregation(query, auth_project=None):
def validate_query(query, db_func, internal_keys=None, allow_timestamps=True):
def _validate_timestamp_fields(query, field_name, operator_list, allow_timestamps):
def _get_query_timestamps(args=None):
def flatten_metadata(metadata):
def _validate_groupby_fields(groupby_fields):
def enforce(policy_name, request):
def get_limited_to(headers):
def get_limited_to_project(headers):
def execute(*cmd, **kwargs):
def decode_unicode(input):
def recursive_keypairs(d, separator=':'):
def restore_nesting(d, separator=':'):
def dt_to_decimal(utc):
def decimal_to_dt(dec):
def sanitize_timestamp(timestamp):
def dict_to_keyval(value, key_base=None):
def lowercase_keys(mapping):
def lowercase_values(mapping):
def update_nested(original_dict, updates):
def uniq(dupes, attrs):
def _translate_output(output):
def _parse_output(output, template):
def execute_ipmi_cmd(template=None):
def _hex(list=None):
def validate_reading(data):
def run_with(*drivers):
def load_tests(loader, tests, pattern):
def load_tests(loader, tests, pattern):
def load_tests(loader, tests, pattern):
def execute_with_nm_v3(*cmd, **kwargs):
def execute_with_nm_v2(*cmd, **kwargs):
def execute_without_nm(*cmd, **kwargs):
def cache_key_mangler(key):
def setup_event_pipeline(conf, transformer_manager=None):
def setup_pipeline(conf, transformer_manager=None):
def setup_polling(conf):
def load_definitions(conf, defaults, config_file, fallback_file=None):
def get_session(conf, requests_session=None, group=None, timeout=None):
def get_client(conf, trust_id=None, requests_session=None, group=None):
def set_cors_middleware_defaults():
def iter_period(start, end, period):
def _handle_sort_key(model_name, sort_key=None):
def get_connection(conf, url):
def get_alembic_version(meta):
def paged(query, size=1000):
def apply_metaquery_filter(session, query, metaquery):
def make_query_from_filter(session, query, sample_filter, require_meter=True):
def timestamp(dt, reverse=True):
def make_timestamp_query(func, start=None, start_op=None, end=None, end_op=None, bounds_only=False, **kwargs):
def make_query(metaquery=None, **kwargs):
def get_meter_columns(metaquery=None, need_timestamp=False, **kwargs):
def make_sample_query_from_filter(sample_filter, require_meter=True):
def make_meter_query_for_resource(start_timestamp, start_timestamp_op, end_timestamp, end_timestamp_op, source, query=None):
def make_general_rowkey_scan(rts_start=None, rts_end=None, some_id=None):
def prepare_key(*args):
def timestamp_from_record_tuple(record):
def resource_id_from_record_tuple(record):
def deserialize_entry(entry, get_raw_meta=True):
def serialize_entry(data=None, **kwargs):
def quote(s, *args):
def unquote(s):
def migrate_resource_table(conn, table):
def migrate_meter_table(conn, table):
def make_timestamp_range(start, end, start_timestamp_op=None, end_timestamp_op=None):
def make_query_from_filter(sample_filter, require_meter=True):
def quote_key(key, reverse=False):
def improve_keys(data, metaquery=False):
def unquote_keys(data):
def no_log_warn(logical_line):
def no_os_popen(logical_line):
def _get_metadata_from_object(conf, instance):
def instance_name(instance):
def setup_events(conf, trait_plugin_mgr):
def serialize_dt(value):
def _in_process_find_conf_file(conf_src_dir, conf_file_name, use_sample=True):
def _in_process_setup_ring(swift_conf, conf_src_dir, testdir):
def _load_encryption(proxy_conf_file, swift_conf_file, **kwargs):
def _load_ec_as_default_policy(proxy_conf_file, swift_conf_file, **kwargs):
def retry(func, *args, **kwargs):
def meta_command(name, bases, attrs):
def collect_info(path_list):
def find_max_occupancy_node(dir_list):
def get_config(section_name=None, defaults=None):
def listen_zero():
def premetadata_create_container_info_table(self, conn, put_timestamp, _spi=None):
def prexsync_create_container_info_table(self, conn, put_timestamp, _spi=None):
def prespi_create_container_info_table(self, conn, put_timestamp, _spi=None):
def NamedTemporaryFile():
def safe_close(fd):
@contextlib.contextmanager DCNL def pipe():
def teardown_module():
def local_tz(func):
def get_account_for_tenant(test_auth, tenant_id):
def pop_stream(f):
def write_fake_ring(path, *devs):
def with_tempdir(f):
def debug_logger(name='test'):
def encode_frag_archive_bodies(policy, body):
def fake_ec_node_response(node_frags, policy):
def setup_servers(the_object_server=object_server, extra_conf=None):
@contextmanager DCNL def fake_spawn():
def get_http_connect(account_func, container_func, object_func):
def unpatch_policies(f):
def sortHeaderNames(headerNames):
def _limit_max_file_size(f):
def prespi_AccountBroker_initialize(self, conn, put_timestamp, **kwargs):
def premetadata_create_account_stat_table(self, conn, put_timestamp):
def prespi_create_container_table(self, conn):
def pre_track_containers_create_policy_stat(self, conn):
def pre_track_containers_create_container_table(self, conn):
def update_new_item_from_existing(new_item, existing):
def gen_resp_headers(info, is_deleted=False):
def app_factory(global_conf, **local_conf):
def cmp_policy_info(info, remote_info):
def incorrect_policy_index(info, remote_info):
def get_reconciler_container_name(obj_timestamp):
def add_to_reconciler_queue(container_ring, account, container, obj, obj_policy_index, obj_timestamp, op, force=False, conn_timeout=5, response_timeout=15):
def parse_raw_obj(obj_info):
@LRUCache(maxtime=CONTAINER_POLICY_TTL) DCNL def direct_get_container_policy_index(container_ring, account_name, container_name):
def direct_delete_container_entry(container_ring, account_name, container_name, object_name, headers=None):
def dict_factory(crs, row):
def chexor(old, name, timestamp):
def get_db_connection(path, timeout=30, okay_to_create=False):
def run_daemon(klass, conf_file, section_name='', once=False, **kwargs):
def http_connect(ipaddr, port, device, partition, method, path, headers=None, query_string=None, ssl=False):
def http_connect_raw(ipaddr, port, method, path, headers=None, query_string=None, ssl=False):
def filter_factory(global_conf, **local_conf):
def filter_factory(global_conf, **local_conf):
def filter_factory(global_conf, **local_conf):
def get_tempurl_keys_from_metadata(meta):
def filter_factory(global_conf, **local_conf):
def dump_crypto_meta(crypto_meta):
def load_crypto_meta(value):
def append_crypto_meta(value, crypto_meta):
def extract_crypto_meta(value):
def filter_factory(global_conf, **local_conf):
def encrypt_header_val(crypto, value, key):
def _hmac_etag(key, etag):
def parse_and_validate_input(req_body, req_path):
def filter_factory(global_conf, **local_conf):
def _check_path_header(req, name, length, error_msg):
def _check_copy_from_header(req):
def _check_destination_header(req):
def _copy_headers(src, dest):
def clean_acl(name, value):
def format_acl_v1(groups=None, referrers=None, header_name=None):
def format_acl_v2(acl_dict):
def format_acl(version=1, **kwargs):
def parse_acl_v1(acl_string):
def parse_acl_v2(data):
def parse_acl(*args, **kwargs):
def referrer_allowed(referrer, referrer_acl):
def acls_from_account_info(info):
def interpret_conf_limits(conf, name_prefix, info=None):
def get_maxrate(ratelimits, size):
def filter_factory(global_conf, **local_conf):
def lookup_cname(domain, resolver):
def filter_factory(global_conf, **local_conf):
def get_response_body(data_format, data_dict, error_list):
def NR_ioprio_set():
def set_swift_dir(swift_dir):
def get_hmac(request_method, path, expires, key):
def get_swift_info(admin=False, disallowed_sections=None):
def register_swift_info(name='swift', admin=False, **kwargs):
def backward(f, blocksize=4096):
def config_true_value(value):
def config_positive_int_value(value):
def config_auto_int_value(value, default):
def config_read_reseller_options(conf, defaults):
def config_read_prefixed_options(conf, prefix_name, defaults):
def load_libc_function(func_name, log_error=True, fail_if_missing=False, errcheck=False):
def get_policy_index(req_headers, res_headers):
def get_log_line(req, res, trans_time, additional_info):
def config_fallocate_value(reserve_value):
def fallocate(fd, size):
def fsync(fd):
def fdatasync(fd):
def fsync_dir(dirpath):
def drop_buffer_cache(fd, offset, length):
def encode_timestamps(t1, t2=None, t3=None, explicit=False):
def decode_timestamps(encoded, explicit=False):
def normalize_timestamp(timestamp):
def last_modified_date_to_timestamp(last_modified_date_str):
def normalize_delete_at_timestamp(timestamp):
def mkdirs(path):
def makedirs_count(path, count=0):
def renamer(old, new, fsync=True):
def link_fd_to_path(fd, target_path, dirs_created=0, retries=2, fsync=True):
def split_path(path, minsegs=1, maxsegs=None, rest_with_last=False):
def validate_device_partition(device, partition):
def server_handled_successfully(status_int):
def timing_stats(**dec_kwargs):
def get_logger(conf, name=None, log_to_console=False, log_route=None, fmt='%(server)s: DCSP %(message)s'):
def get_hub():
def drop_privileges(user, call_setsid=True):
def capture_stdio(logger, **kwargs):
def parse_options(parser=None, once=False, test_args=None):
def is_valid_ip(ip):
def is_valid_ipv4(ip):
def is_valid_ipv6(ip):
def expand_ipv6(address):
def whataremyips(bind_ip=None):
def parse_socket_string(socket_string, default_port):
def storage_directory(datadir, partition, name_hash):
def hash_path(account, container=None, object=None, raw_digest=False):
@contextmanager DCNL def lock_path(directory, timeout=10, timeout_class=None):
@contextmanager DCNL def lock_file(filename, timeout=10, append=False, unlink=True):
def lock_parent_directory(filename, timeout=10):
def get_time_units(time_amount):
def compute_eta(start_time, current_value, final_value):
def unlink_older_than(path, mtime):
def unlink_paths_older_than(filepaths, mtime):
def item_from_env(env, item_name, allow_none=False):
def cache_from_env(env, allow_none=False):
def readconf(conf_path, section_name=None, log_name=None, defaults=None, raw=False):
def write_pickle(obj, dest, tmp=None, pickle_protocol=0):
def search_tree(root, glob_match, ext='', exts=None, dir_ext=None):
def write_file(path, contents):
def remove_file(path):
def audit_location_generator(devices, datadir, suffix='', mount_check=True, logger=None):
def ratelimit_sleep(running_time, max_rate, incr_by=1, rate_buffer=5):
def urlparse(url):
def validate_sync_to(value, allowed_sync_hosts, realms_conf):
def affinity_key_function(affinity_str):
def affinity_locality_predicate(write_affinity_str):
def human_readable(value):
def put_recon_cache_entry(cache_entry, key, item):
def dump_recon_cache(cache_dict, cache_file, logger, lock_timeout=2, set_owner=None):
def streq_const_time(s1, s2):
def pairs(item_list):
def replication(func):
def public(func):
def quorum_size(n):
def rsync_ip(ip):
def rsync_module_interpolation(template, device):
def get_valid_utf8_str(str_or_unicode):
def list_from_csv(comma_separated_str):
def csv_append(csv_string, item):
def reiterate(iterable):
def tpool_reraise(func, *args, **kwargs):
def ismount(path):
def ismount_raw(path):
@contextmanager DCNL def closing_if_possible(maybe_closable):
def parse_content_range(content_range):
def parse_content_type(content_type):
def extract_swift_bytes(content_type):
def override_bytes_from_content_type(listing_dict, logger=None):
def quote(value, safe='/'):
def get_expirer_container(x_delete_at, expirer_divisor, acc, cont, obj):
def iter_multipart_mime_documents(wsgi_input, boundary, read_chunk_size=4096):
def parse_mime_headers(doc_file):
def mime_to_document_iters(input_file, boundary, read_chunk_size=4096):
def maybe_multipart_byteranges_to_document_iters(app_iter, content_type):
def document_iters_to_multipart_byteranges(ranges_iter, boundary):
def document_iters_to_http_response_body(ranges_iter, boundary, multipart, logger):
def multipart_byteranges_to_document_iters(input_file, boundary, read_chunk_size=4096):
def parse_content_disposition(header):
def get_md5_socket():
def modify_priority(conf, logger):
def o_tmpfile_supported():
def md5_hash_for_file(fname):
def replace_partition_in_path(path, part_power):
def tiers_for_dev(dev):
def build_tier_tree(devices):
def validate_and_normalize_ip(ip):
def validate_and_normalize_address(address):
def is_valid_hostname(hostname):
def is_local_device(my_ips, my_port, dev_ip, dev_port):
def parse_search_value(search_value):
def parse_search_values_from_opts(opts):
def parse_change_values_from_opts(opts):
def parse_add_value(add_value):
def validate_args(argvish):
def parse_args(argvish):
def build_dev_from_opts(opts):
def format_device(region=None, zone=None, ip=None, device=None, **kwargs):
def pre_validate_all_builders(builders):
def check_for_dev_uniqueness(builders):
def _make_composite_ring(builders):
def compose_rings(builders):
def _make_component_meta(builder):
def _make_composite_metadata(builders):
def check_same_builder(old_component, new_component):
def is_builder_newer(old_component, new_component):
def check_against_existing(old_composite_meta, new_composite_meta):
def check_builder_ids(builders):
def reload_constraints():
def check_metadata(req, target_type):
def check_object_creation(req, object_name):
def check_dir(root, drive):
def check_mount(root, drive):
def check_float(string):
def valid_timestamp(request):
def check_delete_headers(request):
def check_utf8(string):
def check_name_format(req, name, target_type):
def valid_api_version(version):
def _make_req(node, part, method, path, _headers, stype, conn_timeout=5, response_timeout=15):
def _get_direct_account_container(path, stype, node, part, marker=None, limit=None, prefix=None, delimiter=None, conn_timeout=5, response_timeout=15, end_marker=None, reverse=None):
def direct_get_account(node, part, account, marker=None, limit=None, prefix=None, delimiter=None, conn_timeout=5, response_timeout=15, end_marker=None, reverse=None):
def direct_head_container(node, part, account, container, conn_timeout=5, response_timeout=15):
def direct_get_container(node, part, account, container, marker=None, limit=None, prefix=None, delimiter=None, conn_timeout=5, response_timeout=15, end_marker=None, reverse=None):
def direct_delete_container(node, part, account, container, conn_timeout=5, response_timeout=15, headers=None):
def direct_head_object(node, part, account, container, obj, conn_timeout=5, response_timeout=15, headers=None):
def direct_get_object(node, part, account, container, obj, conn_timeout=5, response_timeout=15, resp_chunk_size=None, headers=None):
def direct_put_object(node, part, account, container, name, contents, content_length=None, etag=None, content_type=None, headers=None, conn_timeout=5, response_timeout=15, chunk_size=65535):
def direct_post_object(node, part, account, container, name, headers, conn_timeout=5, response_timeout=15):
def direct_delete_object(node, part, account, container, obj, conn_timeout=5, response_timeout=15, headers=None):
def direct_get_suffix_hashes(node, part, suffixes, conn_timeout=5, response_timeout=15, headers=None):
def retry(func, *args, **kwargs):
def get_param(req, name, default=None):
def get_listing_content_type(req):
def get_name_and_placement(request, minsegs=1, maxsegs=None, rest_with_last=False):
def split_and_validate_path(request, minsegs=1, maxsegs=None, rest_with_last=False):
def is_user_meta(server_type, key):
def is_sys_meta(server_type, key):
def is_sys_or_user_meta(server_type, key):
def is_object_transient_sysmeta(key):
def strip_user_meta_prefix(server_type, key):
def strip_sys_meta_prefix(server_type, key):
def strip_object_transient_sysmeta_prefix(key):
def get_user_meta_prefix(server_type):
def get_sys_meta_prefix(server_type):
def get_object_transient_sysmeta(key):
def remove_items(headers, condition):
def copy_header_subset(from_r, to_r, condition):
def http_response_to_document_iters(response, read_chunk_size=4096):
def update_etag_is_at_header(req, name):
def resolve_etag_is_at_header(req, metadata):
def quarantine_db(object_file, server_type):
def roundrobin_datadirs(datadirs):
def setup_env():
def command(func):
def watch_server_pids(server_pids, interval=1, **kwargs):
def safe_kill(pid, sig, name):
def kill_group(pid, sig):
def sanitize_timeout(timeout):
def wrap_conf_type(f):
def monkey_patch_mimetools():
def get_socket(conf):
def pipeline_property(name, **kwargs):
def loadapp(conf_file, global_conf=None, allow_modify_pipeline=True):
def run_wsgi(conf_path, app_section, *args, **kwargs):
def init_request_processor(conf_path, app_section, *args, **kwargs):
def make_env(env, method=None, path=None, agent='Swift', query_string=None, swift_source=None):
def make_subrequest(env, method=None, path=None, body=None, headers=None, agent='Swift', swift_source=None, make_env=make_env):
def make_pre_authed_env(env, method=None, path=None, agent='Swift', query_string=None, swift_source=None):
def make_pre_authed_request(env, method=None, path=None, body=None, headers=None, agent='Swift', swift_source=None):
def head_object(url, **kwargs):
def put_object(url, **kwargs):
def delete_object(url, **kwargs):
def _datetime_property(header):
def _header_property(header):
def _header_int_property(header):
def _resp_status_property():
def _resp_body_property():
def _resp_etag_property():
def _resp_content_type_property():
def _resp_charset_property():
def _resp_app_iter_property():
def _req_fancy_property(cls, header, even_if_nonexistent=False):
def _req_environ_property(environ_field):
def _req_body_property():
def _host_url_property():
def wsgify(func):
def get_policy_string(base, policy_or_index):
def split_policy_string(policy_string):
def parse_storage_policies(conf):
def reload_storage_policies():
def is_informational(status):
def is_success(status):
def is_redirection(status):
def is_client_error(status):
def is_server_error(status):
def parse_get_node_args(options, args):
def curl_head_command(ip, port, device, part, target, policy_index):
def print_ring_locations(ring, datadir, account, container=None, obj=None, tpart=None, all_nodes=False, policy_index=None):
def print_db_info_metadata(db_type, info, metadata):
def print_obj_metadata(metadata):
def print_obj(datafile, check_etag=True, swift_dir='/etc/swift', policy_name=''):
def print_item_locations(ring, ring_name=None, account=None, container=None, obj=None, **kwargs):
def format_device(dev):
def _parse_add_values(argvish):
def parse_scenario(scenario_data):
def run_scenario(scenario):
def app_factory(global_conf, **local_conf):
def decode_missing(line):
def encode_wanted(remote, local):
def _get_partners(frag_index, part_nodes):
def _full_path(node, part, relative_path, policy):
def parse_override_options(**kwargs):
def drain(file_like, read_size, timeout):
def global_conf_callback(preloaded_app_conf, global_conf):
def app_factory(global_conf, **local_conf):
def _get_filename(fd):
def _encode_metadata(metadata):
def read_metadata(fd):
def write_metadata(fd, metadata, xattr_size=65536):
def extract_policy(obj_path):
def quarantine_renamer(device_path, corrupted_file_path):
def read_hashes(partition_dir):
def write_hashes(partition_dir, hashes):
def consolidate_hashes(partition_dir):
def invalidate_hash(suffix_dir):
def relink_paths(target_path, new_target_path, check_existing=False):
def get_part_path(dev_path, policy, partition):
def object_audit_location_generator(devices, mount_check=True, logger=None, device_dirs=None, auditor_type='ALL'):
def strip_self(f):
def encode_missing(object_hash, ts_data, ts_meta=None, ts_ctype=None):
def decode_wanted(parts):
def parse_per_policy_config(conf):
def app_factory(global_conf, **local_conf):
def update_headers(response, headers):
def source_key(resp):
def delay_denial(func):
def _prep_headers_to_info(headers, server_type):
def headers_to_account_info(headers, status_int=HTTP_OK):
def headers_to_container_info(headers, status_int=HTTP_OK):
def headers_to_object_info(headers, status_int=HTTP_OK):
def cors_validation(func):
def get_object_info(env, app, path=None, swift_source=None):
def get_container_info(env, app, swift_source=None):
def get_account_info(env, app, swift_source=None):
def get_cache_key(account, container=None, obj=None):
def set_info_cache(app, env, account, container, resp):
def set_object_info_cache(app, env, account, container, obj, resp):
def clear_info_cache(app, env, account, container=None):
def _get_info_from_infocache(env, account, container=None):
def _get_info_from_memcache(app, env, account, container=None):
def _get_info_from_caches(app, env, account, container=None):
def _prepare_pre_auth_info_request(env, path, swift_source):
def get_info(app, env, account, container=None, swift_source=None):
def _get_object_info(app, env, account, container, obj, swift_source=None):
def close_swift_conn(src):
def bytes_to_skip(record_size, range_start):
def client_range_to_segment_range(client_start, client_end, segment_size):
def segment_range_to_fragment_range(segment_start, segment_end, segment_size, fragment_size):
def chunk_transformer(policy):
def app_factory(global_conf, **local_conf):
def hunt_for_stacktrace(url):
def services(*args):
def requires_ext(**kwargs):
def is_extension_enabled(extension_name, service):
def is_scheduler_filter_enabled(filter_name):
def create_test_server(clients, validatable=False, validation_resources=None, tenant_network=None, wait_until=None, volume_backed=False, name=None, flavor=None, image_id=None, **kwargs):
def shelve_server(servers_client, server_id, force_shelve_offload=False):
def get_dynamic_provider_params(identity_version, admin_creds=None):
def get_preprov_provider_params(identity_version):
def get_credentials_provider(name, network_resources=None, force_tenant_isolation=False, identity_version=None):
def is_admin_available(identity_version):
def is_alt_available(identity_version):
def get_configured_admin_credentials(fill_in=True, identity_version=None):
def get_credentials(fill_in=True, identity_version=None, **kwargs):
def wait_for_server_status(client, server_id, status, ready_wait=True, extra_timeout=0, raise_on_error=True):
def wait_for_server_termination(client, server_id, ignore_error=False):
def wait_for_image_status(client, image_id, status):
def wait_for_volume_resource_status(client, resource_id, statuses):
def wait_for_volume_retype(client, volume_id, new_volume_type):
def wait_for_qos_operations(client, qos_id, operation, args=None):
def wait_for_interface_status(client, server_id, port_id, status):
def is_router_interface_port(port):
def get_unused_ip_addresses(ports_client, subnets_client, network_id, subnet_id, count):
def get_ping_payload_size(mtu, ip_version):
def delete_containers(containers, container_client, object_client):
def list_opts():
@debtcollector.removals.remove(message='use DCSP testtools.skipUnless DCSP instead', removal_version='Queens') DCNL def skip_unless_config(*args):
@debtcollector.removals.remove(message='use DCSP testtools.skipIf DCSP instead', removal_version='Queens') DCNL def skip_if_config(*args):
def service_client_config(service_client_name=None):
def generate_timeout_series(timeout):
def get_auth_provider(credentials, pre_auth=False, scope='project'):
def get_network_from_name(name, compute_networks_client):
def get_tenant_network(creds_provider, compute_networks_client, shared_network_name):
def set_networks_kwarg(network, kwargs=None):
def check_skip_with_microversion(test_min_version, test_max_version, cfg_min_version, cfg_max_version):
def select_request_microversion(test_min_version, cfg_min_version):
def assert_version_header_matches_request(api_microversion_header_name, api_microversion, response_header):
def debug_ssh(function):
def singleton(cls):
def rand_uuid():
def rand_uuid_hex():
def rand_name(name='', prefix='tempest'):
def rand_password(length=15):
def rand_url():
def rand_int_id(start=0, end=2147483647):
def rand_mac_address():
def rand_infiniband_guid_address():
def parse_image_id(image_ref):
def arbitrary_string(size=4, base_text=None):
def random_bytes(size=1024):
@removals.remove(message='use DCSP get_ipv6_addr_by_EUI64 DCSP from DCSP oslo_utils.netutils', version='Newton', removal_version='Ocata') DCNL def get_ipv6_addr_by_EUI64(cidr, mac):
def chunkify(sequence, chunksize):
def find_test_caller():
def call_and_ignore_notfound_exc(func, *args, **kwargs):
def call_until_true(func, duration, sleep_for):
def details_multiple(output_lines, with_label=False):
def details(output_lines, with_label=False):
def listing(output_lines):
def tables(output_lines):
def table(output_lines):
def _table_columns(first_table_row):
def execute(cmd, action, flags='', params='', fail_ok=False, merge_stderr=False, cli_dir='/usr/bin', prefix=''):
def get_credentials(auth_url, fill_in=True, identity_version='v2', disable_ssl_certificate_validation=None, ca_certs=None, trace_requests=None, http_timeout=None, **kwargs):
def find_skips(start):
def find_skips_in_file(path):
def skip_because(*args, **kwargs):
def related_bug(bug, status_code=None):
def idempotent_id(id):
def attr(**kwargs):
def tempest_modules():
def available_modules():
def import_no_clients_in_api_and_scenario_tests(physical_line, filename):
def scenario_tests_need_service_tags(physical_line, filename, previous_logical):
def no_vi_headers(physical_line, line_number, lines):
def service_tags_not_in_module_path(physical_line, filename):
def no_hyphen_at_end_of_rand_name(logical_line, filename):
def no_mutable_default_args(logical_line):
def no_testtools_skip_decorator(logical_line):
def get_resources_on_service_clients(logical_line, physical_line, filename, line_number, lines):
def delete_resources_on_service_clients(logical_line, physical_line, filename, line_number, lines):
def dont_import_local_tempest_into_lib(logical_line, filename):
def use_rand_uuid_instead_of_uuid4(logical_line, filename):
def dont_use_config_in_tempest_lib(logical_line, filename):
def dont_put_admin_tests_on_nonadmin_path(logical_line, physical_line, filename):
def unsupported_exception_attribute_PY3(logical_line):
def get_tempest_default_config_dir():
def create_connection(parsed_url):
def transplant(new_net, net, suffix=''):
def upsample_filt(size):
def interp(net, layers):
def expand_score(new_net, new_layer, net, layer):
def parse_url(url):
def get_proxy_info(hostname, is_secure, proxy_host=None, proxy_port=0, proxy_auth=None, no_proxy=None):
def setdefaulttimeout(timeout):
def getdefaulttimeout():
def create_connection(url, timeout=None, class_=WebSocket, **options):
def enableTrace(traceable):
def validate_utf8(utfbytes):
def Binary(x):
def Connect(*args, **kwargs):
def install_as_MySQLdb():
def charset_to_encoding(name):
def _escape_unicode(value, mapping=None):
def convert_datetime(obj):
def convert_timedelta(obj):
def convert_time(obj):
def convert_date(obj):
def convert_mysql_timestamp(timestamp):
def load_movielens_r100k(load_timestamp=False):
def load_sample_songs():
def load_sample_movies():
def download_book_crossings(target_dir):
def load_bookcrossings(data_home=None, download_if_missing=True, implicit=False):
def find_common_elements(source_preferences, target_preferences):
def euclidean_distances(X, Y, squared=False, inverse=True):
def pearson_correlation(X, Y):
def jaccard_coefficient(X, Y):
def manhattan_distances(X, Y):
def sorensen_coefficient(X, Y):
def tanimoto_coefficient(X, Y):
def cosine_distances(X, Y):
def spearman_coefficient(X, Y):
def loglikehood_coefficient(n_items, X, Y):
def test_euclidean_distances():
def test_pearson_correlation():
def test_spearman_distances():
def test_tanimoto_distances():
def test_cosine_distances():
def test_loglikehood_distances():
def test_sorensen_distances():
def test_manthattan_distances():
def test_jaccard_distances():
def test_root_mean_square_error():
def test_root_mean_absolute_error():
def test_root_normalized_mean_absolute_error():
def test_evaluation_error():
def test_precision_recall_f1_score():
def test_zero_precision_recall():
def test_evaluation_report():
def test_root_CfEvaluator_evaluate():
def test_root_CfEvaluator_evaluate_on_split():
def root_mean_square_error(y_real, y_pred):
def mean_absolute_error(y_real, y_pred):
def normalized_mean_absolute_error(y_real, y_pred, max_rating, min_rating):
def evaluation_error(y_real, y_pred, max_rating, min_rating):
def precision_score(y_real, y_pred):
def recall_score(y_real, y_pred):
def f1_score(y_real, y_pred):
def fbeta_score(y_real, y_pred, beta):
def precision_recall_fscore(y_real, y_pred, beta=1.0):
def evaluation_report(y_real, y_pred, labels=None, target_names=None):
def check_sampling(sampling, n):
def check_cv(cv, n):
def check_arrays(*arrays, **options):
def check_random_state(seed):
def unique_labels(list_of_labels):
def assert_in(obj, in_=None, out_=None):
def get_posts():
def add_post(content):
@app.route('/', methods=['GET']) DCNL def main():
@app.route('/', methods=['POST']) DCNL def post():
def get_posts():
def add_post(content):
def get_posts():
def add_post(content):
def get_posts():
def add_post(content):
@app.route('/', methods=['GET']) DCNL def main():
@app.route('/', methods=['POST']) DCNL def post():
def get_posts():
def add_post(content):
def connect():
def testCount():
def testStandingsBeforeMatches():
def testReportMatches():
def testPairings():
def extract_docstring(filename, ignore_heading=False):
def generate_example_rst(app):
def _thumbnail_div(subdir, full_dir, fname, snippet):
def make_thumbnail(in_fname, out_fname, width, height):
def get_short_module_name(module_name, obj_name):
def identify_names(code):
def generate_file_rst(fname, target_dir, src_dir, root_dir, plot_gallery):
def approx_fprime(x, f, eps=None, *args):
def check_grad(layer, x0, seed=1, eps=None, rtol=None, atol=None):
def check_grad(loss, x0, y0, seed=1, eps=None, rtol=None, atol=None):
def approx_fprime(x, f, eps=None, *args):
def img_tile(imgs, aspect_ratio=1.0, tile_shape=None, border=1, border_color=0):
def test_get_displayed_page_numbers():
@api_view((u'GET',)) DCNL @renderer_classes((TemplateHTMLRenderer,)) DCNL def example(request):
def strip_trailing_whitespace(content):
def format_html(html):
def sanitise_json_error(error_dict):
def get_version(package):
def get_packages(package):
def get_package_data(package):
@register.simple_tag DCNL def optional_login(request):
@register.simple_tag DCNL def optional_docs_login(request):
@register.simple_tag DCNL def optional_logout(request, user):
@register.simple_tag DCNL def add_query_param(request, key, val):
@register.filter DCNL def add_class(value, css_class):
@register.filter DCNL def items(value):
def smart_urlquote_wrapper(matched_url):
@register.filter DCNL def urlize_quoted_links(text, trim_url_limit=None, nofollow=True, autoescape=True):
@register.filter DCNL def break_long_headers(header):
def raise_errors_on_nested_writes(method_name, serializer, validated_data):
def _get_error_details(data, default_code=None):
def get_attribute(instance, attrs):
def set_value(dictionary, keys, value):
def to_choices_dict(choices):
def flatten_choices_dict(choices):
def iter_options(grouped_choices, cutoff=None, cutoff_text=None):
def get_error_detail(exc_info):
def escape_curly_brackets(url_path):
def replace_methodname(format_string, methodname):
def flatten(list_of_lists):
def perform_import(val, setting_name):
def import_from_string(val, setting_name):
def is_api_view(callback):
def insert_into(target, keys, value):
def is_list_view(path, method, view):
def get_schema_view(title=None, url=None, description=None, urlconf=None, renderer_classes=None, public=False, patterns=None, generator_class=SchemaGenerator):
def format_suffix_patterns(urlpatterns, suffix_required=False, allowed=None):
def get_object_or_404(queryset, *filter_args, **filter_kwargs):
def preserve_builtin_query_params(url, request=None):
def reverse(viewname, args=None, kwargs=None, request=None, format=None, **extra):
def _reverse(viewname, args=None, kwargs=None, request=None, format=None, **extra):
def api_view(http_method_names=None, exclude_from_schema=False):
def detail_route(methods=None, **kwargs):
def list_route(methods=None, **kwargs):
def get_authorization_header(request):
def get_view_name(view_cls, suffix=None):
def get_view_description(view_cls, html=False):
def exception_handler(exc, context):
def method_overridden(method_name, klass, instance):
def _resolve_model(obj):
def template_render(template, context=None, request=None):
def is_form_media_type(media_type):
def clone_request(request, method):
def media_type_matches(lhs, rhs):
def order_by_precedence(media_type_lst):
def needs_label(model_field, field_name):
def get_detail_view_name(model):
def get_field_kwargs(field_name, model_field):
def get_relation_kwargs(field_name, relation_info):
def replace_query_param(url, key, val):
def remove_query_param(url, key):
def get_field_info(model):
def _get_forward_relationships(opts):
def _get_reverse_relationships(opts):
def is_abstract_model(model):
def get_breadcrumbs(url, request=None):
def remove_trailing_string(content, trailing):
def dedent(content):
def camelcase_to_spaces(content):
def markup_description(description):
def parse_html_list(dictionary, prefix=''):
def parse_html_dict(dictionary, prefix=''):
def _positive_int(integer_string, strict=False, cutoff=None):
def _divide_with_ceil(a, b):
def _get_count(queryset):
def _get_displayed_page_numbers(current, final):
def _get_page_links(page_numbers, current, url_func):
def _reverse_ordering(ordering_tuple):
def tiles(ihtORsize, numtilings, floats, ints=[], readonly=False):
def tileswrap(ihtORsize, numtilings, floats, wrapwidths, ints=[], readonly=False):
def tiles(ihtORsize, numtilings, floats, ints=[], readonly=False):
def tileswrap(ihtORsize, numtilings, floats, wrapwidths, ints=[], readonly=False):
def file_to_attachment(filename, filehandler=None):
def is_a_spanquery(obj):
def get_values(instance, go_into={}, exclude=(), extra=(), skip_none=False):
def update_connection_pool(maxsize=1):
def connect(servers=None, framed_transport=False, timeout=None, retry_time=60, recycle=None, round_robin=None, max_retries=3):
def setUp():
def tearDown():
def raise_if_error(status, result, request=None):
def symbol_by_name(name, aliases={}, imp=None, package=None, sep='.', default=None, **kwargs):
def instantiate(name, *args, **kwargs):
def find_module(module, path=None, imp=None):
def import_from_cwd(module, imp=None, package=None):
def make_id(value):
def make_path(*path_components):
def string_b64encode(s):
def clean_string(text):
def keys_to_string(data):
def with_metaclass(Type, skip_attrs=set(['__dict__', '__weakref__'])):
def to_bool(value):
def get_field(name, data, default='object', document_object_field=None, is_document=False):
def colorize(text='', opts=(), **kwargs):
def get_names():
def generate_dataset(number_items=1000):
def generate_dataset_shelve(filename, number_items=1000):
def generate_datafile_old(number_items=1000):
def generate_datafile(number_items=20000):
def ext_process(listname, hostname, url, filepath, msg):
def main():
def sysctl(oid):
def sysctl_int(oid):
def guess_kern_ipc_maxsockbuf():
def guess_kern_maxfiles():
def guess_kern_maxfilesperproc():
def guess_net_inet_tcp_delayed_ack():
def guess_net_inet_tcp_recvbuf_max():
def guess_net_inet_tcp_sendbuf_max():
def guess_vfs_zfs_arc_max():
def main(argv):
def main():
def main():
def fixkey(ip):
def check_ssh(ip, port, user, key_file, retries=1):
def _write_instance_repr(out, visited, name, pyop_attrdict, address):
def move_in_stack(move_up):
def main(certfile, keyfile):
def main(argv):
def log_traceback(log=log, level=logging.DEBUG):
def get_sw_version(strip_build_num=False):
def get_sw_login_version():
def get_sw_name():
def get_mounted_filesystems():
def mchoicefield(form, field, default):
def random_wipe(devs):
def _is_vdev(name):
def parse_status(name, doc, data):
def zfs_list(path='', recursive=False, hierarchical=False, include_root=False, types=None):
def jail_path_configured():
def fix_pluginjail(apps, schema_editor):
def login_wrapper(request, template_name='registration/login.html', redirect_field_name=REDIRECT_FIELD_NAME, authentication_form=ExtendedAuthForm, current_app=None, extra_context=None):
@jsonrpc_method('plugins.is_authenticated') DCNL def plugins_is_authenticated(request, sessionid):
@jsonrpc_method('os.arch') DCNL def os_arch(request):
@jsonrpc_method('os.kldload') DCNL def os_kldload(request, plugin_id, module):
@public DCNL def plugin_fcgi_client(request, name, oid, path):
def decode_pair(s, pos=0):
def encode_pair(name, value):
def create_resilver(apps, schema_editor):
def set_expiretime(apps, schema_editor):
def autodiscover():
def lagg_fec(apps, schema_editor):
def __LoadModule(path, name='module'):
def RunTest(name, handler):
def get_tag_to_attributes():
def parse_css_data():
def err_func(first_error):
def log_startup_info():
@log_fatal_exceptions DCNL def main():
def _character_matches(name1, name2):
def wildcards_overlap(name1, name2):
def _validate_namespace(name):
def _validate_namespaces(namespaces):
def _merge_namespace_options(namespace_set=None, ex_namespace_set=None, gridfs_set=None, dest_mapping=None, namespace_options=None, include_fields=None, exclude_fields=None):
def match_replace_regex(regex, src_namespace, dest_namespace):
def wildcard_in_db(namespace):
def namespace_to_regex(namespace):
def bson_ts_to_long(timestamp):
def long_to_bson_ts(val):
def retry_until_ok(func, *args, **kwargs):
def wait_for(condition, max_tries=60):
def assert_soon(condition, message=None, max_tries=60):
def download_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir, delay=15):
def _extractall(self, path='.', members=None):
def _build_install_args(options):
def _parse_args():
def main(version=DEFAULT_VERSION):
def make_dir(path):
def word2vec(batch_gen):
def examples_queue(data_sources, data_fields_to_features, training, data_items_to_decoders=None, data_items_to_decode=None):
def batch_examples(examples, batch_size, bucket_boundaries=None):
def neural_gpu(features, hparams, name=None):
def mixed_curriculum(inputs, hparams):
def neural_gpu_curriculum(features, hparams, mode):
def basic_params1():
def curriculum_params1():
def saturating_sigmoid(x):
def embedding(x, vocab_size, dense_size, name=None, reuse=None):
def conv_gru(x, kernel_size, filters, padding='same', dilation_rate=1, name=None, reuse=None):
def download(file_name, expected_bytes):
def read_data(file_path):
def build_vocab(words, vocab_size):
def convert_words_to_index(words, dictionary):
def generate_sample(index_words, context_window_size):
def get_batch(iterator, batch_size):
def get_layer(layer):
def maybe_download(data_dir):
def normalize_image(image):
def get_layer(layer):
def maybe_download(data_dir):
def normalize_image(image):
def read_one_image(filename):
def batch_generator(filenames):
def online_inference(sess, vocab, seq, sample, temp, in_state, out_state, seed='T'):
def word2vec(batch_gen):
def get_image_binary(filename):
def write_to_tfrecord(label, shape, binary_image, tfrecord_file):
def get_convos():
def question_answers(id2line, convos):
def make_dir(path):
def basic_tokenizer(line, normalize_digits=True):
def token2id(data, mode):
def _reshape_batch(inputs, size, batch_size):
def get_batch(data_bucket, bucket_id, batch_size=1):
def _get_random_bucket(train_buckets_scale):
def _assert_lengths(encoder_size, decoder_size, encoder_inputs, decoder_inputs, decoder_masks):
def run_step(sess, model, encoder_inputs, decoder_inputs, decoder_masks, bucket_id, forward_only):
def _get_buckets():
def _get_skip_step(iteration):
def _check_restore_parameters(sess, saver):
def _eval_test_set(sess, model, test_buckets):
def train():
def _get_user_input():
def _find_right_bucket(length):
def _construct_response(output_logits, inv_dec_vocab):
def chat():
def _weights(vgg_layers, layer, expected_layer_name):
def _conv2d_relu(vgg_layers, prev_layer, layer, layer_name):
def _avgpool(prev_layer):
def load_vgg(path, input_image):
def download(download_link, file_name, expected_bytes):
def make_dir(path):
def _create_content_loss(p, f):
def _gram_matrix(F, N, M):
def _single_style_loss(a, g):
def _create_style_loss(A, model):
def _create_summary(model):
def train(model, generated_image, initial_image):
def _weights(vgg_layers, layer, expected_layer_name):
def _conv2d_relu(vgg_layers, prev_layer, layer, layer_name):
def _avgpool(prev_layer):
def load_vgg(path, input_image):
def download(download_link, file_name, expected_bytes):
def make_dir(path):
def _create_content_loss(p, f):
def _gram_matrix(F, N, M):
def _single_style_loss(a, g):
def _create_style_loss(A, model):
def _create_summary(model):
def train(model, generated_image, initial_image):
def bucket(tail):
def pbucket(tail):
def bucket(tail):
def pbucket(tail):
def _encode(data, name='data'):
def httpresponse_patched_begin(self):
def httpconnection_patched_get_content_length(body, method):
def httpconnection_patched_endheaders(self, message_body=None, encode_chunked=False):
def httpconnection_patched_read_readable(self, readable):
def httpconnection_patched_send_output(self, message_body=None, encode_chunked=False):
def httpresponse_patched_begin(self):
def httpconnection_patched_endheaders(self, message_body=None):
def httpconnection_patched_send_output(self, message_body=None):
def _os_walk_unicode(top):
def handle_exclude_include_walk_dir(root, dirname):
def _fswalk_follow_symlinks(path):
def _fswalk_no_symlinks(path):
def format_param_str(params, always_have_equal=False, limited_keys=None):
def sign_string_v2(string_to_sign):
def sign_request_v2(method='GET', canonical_uri='/', params=None, cur_headers={}):
def sign_url_v2(url_to_sign, expiry):
def sign_url_base_v2(**parms):
def getSignatureKey(key, dateStamp, regionName, serviceName):
def s3_quote(param, quote_backslashes=True, unicode_output=False):
def stripNameSpace(xml):
def appendXmlTextNode(tag_name, text, parent):
def convertHeaderTupleListToDict(list):
def mkdir_with_parents(dir_name):
def unicodise(string, encoding=None, errors='replace', silent=False):
def unicodise_s(string, encoding=None, errors='replace'):
def deunicodise(string, encoding=None, errors='replace', silent=False):
def deunicodise_s(string, encoding=None, errors='replace'):
def unicodise_safe(string, encoding=None):
def decode_from_s3(string, errors='replace'):
def encode_to_s3(string, errors='replace'):
def replace_nonprintables(string):
def time_to_epoch(t):
def check_bucket_name_dns_support(bucket_host, bucket_name):
def getBucketFromHostname(hostname):
def download(path=os.path.join(MODULE, 'commonsense.csv'), threshold=50):
def json():
def unique(iterable):
def line(x1, y1, x2, y2, stroke=(0, 0, 0, 1), strokewidth=1):
def ellipse(x, y, width, height, fill=(0, 0, 0, 1), stroke=None, strokewidth=1):
def deepcopy(o):
def depth_first_search(node, visit=(lambda node: False), traversable=(lambda node, edge: True), _visited=None):
def breadth_first_search(node, visit=(lambda node: False), traversable=(lambda node, edge: True)):
def paths(graph, id1, id2, length=4, path=[], _root=True):
def edges(path):
def adjacency(graph, directed=False, reversed=False, stochastic=False, heuristic=None):
def dijkstra_shortest_path(graph, id1, id2, heuristic=None, directed=False):
def dijkstra_shortest_paths(graph, id, heuristic=None, directed=False):
def floyd_warshall_all_pairs_distance(graph, heuristic=None, directed=False):
def predecessor_path(tree, u, v):
def brandes_betweenness_centrality(graph, normalized=True, directed=False):
def eigenvector_centrality(graph, normalized=True, reversed=True, rating={}, iterations=100, tolerance=0.0001):
def partition(graph):
def is_clique(graph):
def clique(graph, id):
def cliques(graph, threshold=3):
def unlink(graph, node1, node2=None):
def redirect(graph, node1, node2):
def cut(graph, node):
def insert(graph, node, a, b):
def minify(js):
def _import_db(engine=SQLITE):
def pd(*args):
def _yyyywwd2yyyymmdd(year, week, weekday):
def _strftime1900(d, format):
def date(*args, **kwargs):
def time(days=0, seconds=0, minutes=0, hours=0, **kwargs):
def decode_string(v, encoding='utf-8'):
def encode_string(v, encoding='utf-8'):
def string(value, default=''):
def encrypt_string(s, key=''):
def decrypt_string(s, key=''):
def encode_entities(string):
def decode_entities(string):
def _escape(value, quote=(lambda string: ("'%s'" % string.replace("'", "\\'")))):
def cast(x, f, default=None):
def find(match=(lambda item: False), list=[]):
def order(list, cmp=None, key=None, reverse=False):
def avg(list):
def variance(list):
def stdev(list):
def field(name, type=STRING, **kwargs):
def primary_key(name='id'):
def abs(table, field):
def cmp(field, value, comparison='=', escape=(lambda v: _escape(v)), table=''):
def all(*args, **kwargs):
def any(*args, **kwargs):
def associative(query):
def _unpack_fields(table, fields=[]):
def xml_format(a):
def xml(rows):
def parse_xml(database, xml, table=None, field=(lambda s: s.replace('.', '-'))):
def flip(datasheet):
def csv(*args, **kwargs):
def truncate(string, length=100):
def pprint(datasheet, truncate=40, padding=' DCSP ', fill='.'):
def cumsum(iterable):
def duration(function, *args, **kwargs):
def profile(function, *args, **kwargs):
def sizeof(object):
def kb(object):
def confusion_matrix(classify=(lambda document: False), documents=[(None, False)]):
def test(classify=(lambda document: False), documents=[], average=None):
def accuracy(classify=(lambda document: False), documents=[], average=None):
def precision(classify=(lambda document: False), documents=[], average=None):
def recall(classify=(lambda document: False), documents=[], average=None):
def F1(classify=(lambda document: False), documents=[], average=None):
def F(classify=(lambda document: False), documents=[], beta=1, average=None):
def sensitivity(classify=(lambda document: False), documents=[]):
def specificity(classify=(lambda document: False), documents=[]):
def roc(tests=[]):
def auc(curve=[]):
def fleiss_kappa(m):
def levenshtein(string1, string2):
def levenshtein_similarity(string1, string2):
def dice_coefficient(string1, string2):
def similarity(string1, string2, metric=LEVENSHTEIN):
def flesch_reading_ease(string):
def ngrams(string, n=3, punctuation=PUNCTUATION, **kwargs):
def intertextuality(texts=[], n=5, weight=(lambda ngram: 1.0), **kwargs):
def type_token_ratio(string, n=100, punctuation=PUNCTUATION):
def suffixes(inflections=[], n=3, top=10, reverse=True):
def isplit(string, sep=' DCTB \n\x0b\x0c\r DCSP '):
def cooccurrence(iterable, window=((-1), (-1)), term1=(lambda x: True), term2=(lambda x: True), normalize=(lambda x: x), matrix=None, update=None):
def lerp(a, b, t):
def smoothstep(a, b, x):
def smoothrange(a=None, b=None, n=10):
def mean(iterable):
def hmean(iterable):
def median(iterable, sort=True):
def variance(iterable, sample=False):
def standard_deviation(iterable, *args, **kwargs):
def simple_moving_average(iterable, k=10):
def histogram(iterable, k=10, range=None):
def moment(iterable, n=2, sample=False):
def skewness(iterable, sample=False):
def kurtosis(iterable, sample=False):
def quantile(iterable, p=0.5, sort=True, a=1, b=(-1), c=0, d=1):
def boxplot(iterable, **kwargs):
def fisher_exact_test(a, b, c, d, **kwargs):
def _expected(observed):
def pearson_chi_squared_test(observed=[], expected=[], df=None, tail=UPPER):
def chi2p(x2, df=1, tail=UPPER):
def pearson_log_likelihood_ratio(observed=[], expected=[], df=None, tail=UPPER):
def kolmogorov_smirnov_two_sample_test(a1, a2=NORMAL, n=1000):
def gamma(x):
def gammaln(x):
def gammai(a, x, tail=UPPER):
def erf(x):
def erfc(x):
def cdf(x, mean=0.0, stdev=1.0):
def pdf(x, mean=0.0, stdev=1.0):
def norm(n, mean=0.0, stdev=1.0):
def kolmogorov(x):
def chown(path, owner=None):
def encode_entities(string):
def decode_entities(string):
def openable(string, **kwargs):
def define(f):
def pbkdf2(s, salt, iterations=10000, n=32, f='sha256'):
def streql(s1, s2):
def encode_password(s):
def verify_password(s1, s2):
def threadsafe(function):
def certificate(domain=LOCALHOST, country=None, state=None, city=None, company=None, contact=None, signed=True, **kwargs):
def redirect(path, code=303):
def static(path, root=None, mimetype=None):
def _register(event, handler):
def template(string, *args, **kwargs):
def process_urlencoded(entity):
def process_multipart(entity):
def process_multipart_form_data(entity):
def _old_process_multipart(entity):
def _getargs(func):
def quickstart(root=None, script_name='', config=None):
def _cherrypy_pydoc_resolve(thing, forceload=0):
def expose(func=None, alias=None):
def popargs(*args, **kwargs):
def url(path='', qs='', script_name=None, base=None, relative=None):
def merge(base, other):
def _server_namespace_handler(k, v):
def _engine_namespace_handler(k, v):
def _tree_namespace_handler(k, v):
def clean_headers(status):
def get_error_page(status, **kwargs):
def format_exc(exc=None):
def bare_error(extrabody=None):
def client_host(server_host):
def check_port(host, port, timeout=1.0):
def wait_for_free_port(host, port, timeout=None):
def wait_for_occupied_port(host, port, timeout=None):
def base64_decode(n, encoding='ISO-8859-1'):
def json_processor(entity):
def json_in(content_type=[ntou('application/json'), ntou('text/javascript')], force=True, debug=False, processor=json_processor):
def json_out(content_type='application/json', debug=False, handler=json_handler):
def get_tree(base, exclude, coverage=the_coverage):
def process_body():
def patched_path(path):
def get(invalid_methods=('POST', 'PUT', 'DELETE'), debug=False, **kwargs):
def tee_output():
def expires(secs=0, force=False, debug=False):
def file_generator_limited(fileobj, count, chunk_size=65536):
def set_vary_header(response, header_name):
def check_auth(users, encrypt=None, realm=None):
def basic_auth(realm, users, encrypt=None, debug=False):
def digest_auth(realm, users, debug=False):
def calculateNonce(realm, algorithm=MD5):
def digestAuth(realm, algorithm=MD5, nonce=None, qop=AUTH):
def basicAuth(realm):
def doAuth(realm):
def parseAuthorization(credentials):
def md5SessionKey(params, password):
def _computeDigestResponse(auth_map, password, method='GET', A1=None, **kwargs):
def _checkDigestResponse(auth_map, password, method='GET', A1=None, **kwargs):
def checkResponse(auth_map, password, method='GET', encrypt=None, **kwargs):
def decode(encoding=None, default_encoding='utf-8'):
def compress(body, compress_level):
def gzip(compress_level=5, mime_types=['text/html', 'text/plain'], debug=False):
def get_ha1_dict_plain(user_password_dict):
def get_ha1_dict(user_ha1_dict):
def get_ha1_file_htdigest(filename):
def synthesize_nonce(s, key, timestamp=None):
def H(s):
def www_authenticate(realm, key, algorithm='MD5', nonce=None, qop=qop_auth, stale=False):
def digest_auth(realm, get_ha1, key, debug=False):
def save():
def close():
def init(storage_type='ram', path=None, path_header=None, name='session_id', timeout=60, domain=None, secure=False, clean_freq=5, persistent=True, httponly=False, debug=False, **kwargs):
def set_response_cookie(path=None, path_header=None, name='session_id', timeout=60, domain=None, secure=False, httponly=False):
def expire():
def extrapolate_statistics(scope):
def new_func_strip_path(func_name):
def checkpassword_dict(user_password_dict):
def basic_auth(realm, checkpassword, debug=False):
def serve_file(path, content_type=None, disposition=None, name=None, debug=False):
def serve_fileobj(fileobj, content_type=None, disposition=None, name=None, debug=False):
def _serve_fileobj(fileobj, content_type, content_length, debug=False):
def serve_download(path, name=None):
def staticdir(section, dir, root='', match='', content_types=None, index='', debug=False):
def staticfile(filename, root=None, match='', content_types=None, debug=False):
def validate_etags(autotags=False, debug=False):
def validate_since():
def allow(methods=None, debug=False):
def proxy(base=None, local='X-Forwarded-Host', remote='X-Forwarded-For', scheme='X-Forwarded-Proto', debug=False):
def ignore_headers(headers=('Range',), debug=False):
def response_headers(headers=None, debug=False):
def referer(pattern, accept=True, accept_missing=False, error=403, message='Forbidden DCSP Referer DCSP header.', debug=False):
def log_traceback(severity=logging.ERROR, debug=False):
def log_request_headers(debug=False):
def log_hooks(debug=False):
def redirect(url='', internal=True, debug=False):
def trailing_slash(missing=True, extra=False, status=None, debug=False):
def flatten(debug=False):
def accept(media=None, debug=False):
def autovary(ignore=None, debug=False):
def urljoin(*atoms):
def urljoin_bytes(*atoms):
def protocol_from_http(protocol_str):
def get_ranges(headervalue, content_length):
def header_elements(fieldname, fieldvalue):
def decode_TEXT(value):
def valid_status(status):
def _parse_qs(qs, keep_blank_values=0, strict_parsing=0, encoding='utf-8'):
def parse_query_string(query_string, keep_blank_values=True, encoding='utf-8'):
def as_dict(config):
def unrepr(s):
def modules(modulePath):
def attributes(full_attribute_name):
def test_callable_spec(callable, callable_args, callable_kwargs):
def VirtualHost(next_dispatcher=Dispatcher(), use_x_forwarded_host=True, **domains):
def hooks_namespace(k, v):
def request_namespace(k, v):
def response_namespace(k, v):
def error_page_namespace(k, v):
def call(*popenargs, **kwargs):
def check_call(*popenargs, **kwargs):
def check_output(*popenargs, **kwargs):
def list2cmdline(seq):
def format_exc(limit=None):
def plat_specific_errors(*errnames):
def read_headers(rfile, hdict=None):
def get_ssl_adapter_class(name='pyopenssl'):
def downgrade_wsgi_ux_to_1x(environ):
def definite_article(word, gender=MALE):
def indefinite_article(word, gender=MALE):
def article(word, function=INDEFINITE, gender=MALE):
def referenced(word, article=INDEFINITE, gender=MALE):
def gender(word):
def pluralize(word, pos=NOUN, custom={}):
def singularize(word, pos=NOUN, custom={}):
def attributive(adjective):
def predicative(adjective):
def penntreebank2universal(token, tag):
def find_lemmata(tokens):
def tokenize(s, *args, **kwargs):
def parse(s, *args, **kwargs):
def parsetree(s, *args, **kwargs):
def tree(s, token=[WORD, POS, CHUNK, PNP, REL, LEMMA]):
def tag(s, tokenize=True, encoding='utf-8', **kwargs):
def keywords(s, top=10, **kwargs):
def suggest(w):
def polarity(s, **kwargs):
def subjectivity(s, **kwargs):
def positive(s, threshold=0.1, **kwargs):
def definite_article(word):
def indefinite_article(word):
def article(word, function=INDEFINITE):
def referenced(word, article=INDEFINITE):
def pluralize(word, pos=NOUN, custom={}):
def singularize(word, pos=NOUN, custom={}):
def attributive(adjective):
def predicative(adjective):
def definite_article(word, gender=MALE):
def indefinite_article(word, gender=MALE):
def article(word, function=INDEFINITE, gender=MALE):
def referenced(word, article=INDEFINITE, gender=MALE):
def pluralize(word, pos=NOUN, custom={}):
def predicative(adjective):
def parole2penntreebank(token, tag):
def parole2universal(token, tag):
def find_lemmata(tokens):
def tokenize(s, *args, **kwargs):
def parse(s, *args, **kwargs):
def parsetree(s, *args, **kwargs):
def tree(s, token=[WORD, POS, CHUNK, PNP, REL, LEMMA]):
def tag(s, tokenize=True, encoding='utf-8', **kwargs):
def keywords(s, top=10, **kwargs):
def suggest(w):
def definite_article(word, gender=MALE, role=SUBJECT):
def indefinite_article(word, gender=MALE, role=SUBJECT):
def article(word, function=INDEFINITE, gender=MALE, role=SUBJECT):
def referenced(word, article=INDEFINITE, gender=MALE, role=SUBJECT):
def gender(word, pos=NOUN):
def pluralize(word, pos=NOUN, gender=MALE, role=SUBJECT, custom={}):
def singularize(word, pos=NOUN, gender=MALE, role=SUBJECT, custom={}):
def attributive(adjective, gender=MALE, role=SUBJECT, article=None):
def predicative(adjective):
def grade(adjective, suffix=COMPARATIVE):
def stts2penntreebank(token, tag):
def stts2universal(token, tag):
def find_lemmata(tokens):
def tokenize(s, *args, **kwargs):
def parse(s, *args, **kwargs):
def parsetree(s, *args, **kwargs):
def tree(s, token=[WORD, POS, CHUNK, PNP, REL, LEMMA]):
def tag(s, tokenize=True, encoding='utf-8', **kwargs):
def keywords(s, top=10, **kwargs):
def suggest(w):
def _match(string, pattern):
def unique(iterable):
def find(function, iterable):
def product(*args, **kwargs):
def variations(iterable, optional=(lambda x: False)):
def compile(pattern, *args, **kwargs):
def scan(pattern, string, *args, **kwargs):
def match(pattern, sentence, *args, **kwargs):
def search(pattern, sentence, *args, **kwargs):
def escape(string):
def decode_string(v, encoding='utf-8'):
def encode_string(v, encoding='utf-8'):
def ngrams(string, n=3, punctuation=PUNCTUATION, continuous=False):
def deflood(s, n=3):
def decamel(s, separator='_'):
def pprint(string, token=[WORD, POS, CHUNK, PNP], column=4):
def _read(path, encoding='utf-8', comment=';;;'):
def penntreebank2universal(token, tag):
def find_tokens(string, punctuation=PUNCTUATION, abbreviations=ABBREVIATIONS, replace=replacements, linebreak='\\n{2,}'):
def _suffix_rules(token, tag='NN'):
def find_tags(tokens, lexicon={}, model=None, morphology=None, context=None, entities=None, default=('NN', 'NNP', 'CD'), language='en', map=None, **kwargs):
def find_chunks(tagged, language='en'):
def find_prepositions(chunked):
def find_relations(chunked):
def find_keywords(string, parser, top=10, frequency={}, ignore=('rt',), pos=('NN',), **kwargs):
def tense_id(*args, **kwargs):
def _module(language):
def _multilingual(function, *args, **kwargs):
def language(s):
def pluralize(word, pos=NOUN, custom={}):
def attributive(adjective):
def predicative(adjective):
def penntreebank2universal(token, tag):
def find_lemmata(tokens):
def tokenize(s, *args, **kwargs):
def parse(s, *args, **kwargs):
def parsetree(s, *args, **kwargs):
def tree(s, token=[WORD, POS, CHUNK, PNP, REL, LEMMA]):
def tag(s, tokenize=True, encoding='utf-8', **kwargs):
def keywords(s, top=10, **kwargs):
def suggest(w):
def polarity(s, **kwargs):
def subjectivity(s, **kwargs):
def positive(s, threshold=0.1, **kwargs):
def find(function, iterable):
def intersects(iterable1, iterable2):
def unique(iterable):
def zip(*args, **kwargs):
def unzip(i, iterable):
def chunked(sentence):
def tree(string, token=[WORD, POS, CHUNK, PNP, REL, ANCHOR, LEMMA]):
def xml(string, token=[WORD, POS, CHUNK, PNP, REL, ANCHOR, LEMMA]):
def xml_encode(string):
def xml_decode(string):
def parse_xml(sentence, tab=' DCTB ', id=''):
def parse_string(xml):
def _parse_tokens(chunk, format=[WORD, POS, CHUNK, PNP, REL, ANCHOR, LEMMA]):
def _parse_relation(chunk, type='O'):
def _parse_token(word, chunk='O', pnp='O', relation='O', anchor='O', format=[WORD, POS, CHUNK, PNP, REL, ANCHOR, LEMMA]):
def nltk_tree(sentence):
def graphviz_dot(sentence, font='Arial', colors=BLUE):
def table(sentence, fill=1, placeholder='-'):
def indefinite_article(word):
def article(word, function=INDEFINITE):
def referenced(word, article=INDEFINITE):
def pluralize(word, pos=NOUN, custom={}, classical=True):
def singularize(word, pos=NOUN, custom={}):
def _count_syllables(word):
def grade(adjective, suffix=COMPARATIVE):
def find_lemmata(tokens):
def tokenize(s, *args, **kwargs):
def parse(s, *args, **kwargs):
def parsetree(s, *args, **kwargs):
def tree(s, token=[WORD, POS, CHUNK, PNP, REL, LEMMA]):
def tag(s, tokenize=True, encoding='utf-8', **kwargs):
def keywords(s, top=10, **kwargs):
def suggest(w):
def polarity(s, **kwargs):
def subjectivity(s, **kwargs):
def positive(s, threshold=0.1, **kwargs):
def zshift(s):
def number(s):
def numerals(n, round=2):
def approximate(word, amount=1, plural={}):
def count(*args, **kwargs):
def reflect(object, quantify=True, replace=readable_types):
def normalize(word):
def synsets(word, pos=NOUN):
def similarity(synset1, synset2):
def ancestor(synset1, synset2):
def information_content(synset):
def map32(id, pos=NOUN):
def tree(source, pointerType):
def closure(source, pointerType, accumulator=None):
def hyponyms(source):
def hypernyms(source):
def meet(a, b, pointerType=HYPERNYM):
def startsWith(str, prefix):
def endsWith(str, suffix):
def equalsIgnoreCase(a, b):
def issequence(item):
def intersection(u, v):
def union(u, v):
def product(u, v):
def removeDuplicates(sequence):
def getIndex(form, pos='noun'):
def morphy(form, pos='noun', collect=0):
def getWord(form, pos='noun'):
def getSense(form, pos='noun', senseno=0):
def getSynset(pos, offset):
def _compareInstances(a, b, fields):
def _equalsIgnoreCase(a, b):
def _index(key, sequence, testfn=None, keyfn=None):
def _partition(sequence, size, count):
def disableCache():
def enableCache():
def clearCache():
def setCacheCapacity(capacity=DEFAULT_CACHE_CAPACITY):
def find(function, list):
def imperative(sentence, **kwargs):
def conditional(sentence, predictive=True, **kwargs):
def subjunctive(sentence, classical=True, **kwargs):
def mood(sentence, **kwargs):
def modality(sentence, type=EPISTEMIC):
def pluralize(word, pos=NOUN, custom={}):
def attributive(adjective):
def predicative(adjective):
def wotan2penntreebank(token, tag):
def wotan2universal(token, tag):
def find_lemmata(tokens):
def tokenize(s, *args, **kwargs):
def parse(s, *args, **kwargs):
def parsetree(s, *args, **kwargs):
def tree(s, token=[WORD, POS, CHUNK, PNP, REL, LEMMA]):
def tag(s, tokenize=True, encoding='utf-8', **kwargs):
def keywords(s, top=10, **kwargs):
def suggest(w):
def polarity(s, **kwargs):
def subjectivity(s, **kwargs):
def positive(s, threshold=0.1, **kwargs):
def encode_basestring(s):
def py_encode_basestring_ascii(s):
def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, sort_keys=False, item_sort_key=None, **kw):
def dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, sort_keys=False, item_sort_key=None, **kw):
def load(fp, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, use_decimal=False, namedtuple_as_object=True, tuple_as_array=True, **kw):
def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, use_decimal=False, **kw):
def simple_first(kv):
def py_scanstring(s, end, encoding=None, strict=True, _b=BACKSLASH, _m=STRINGCHUNK.match):
def fix(s, ignore=''):
def latin(s):
def decode_string(v, encoding='utf-8'):
def encode_string(v, encoding='utf-8'):
def asynchronous(function, *args, **kwargs):
def extension(filename):
def urldecode(query):
def proxy(host, protocol='https'):
def download(url=u'', method=GET, query={}, timeout=10, cached=True, throttle=0, proxy=None, user_agent=USER_AGENT, referrer=REFERRER, authentication=None, unicode=False):
def bind(object, method, function):
def stream(url, delimiter='\n', parse=(lambda data: data), **kwargs):
def find_urls(string, unique=True):
def find_email(string, unique=True):
def find_between(a, b, string):
def strip_element(string, tag, attributes=''):
def strip_between(a, b, string):
def encode_entities(string):
def decode_entities(string):
def collapse_spaces(string, indentation=False, replace=' DCSP '):
def collapse_tabs(string, indentation=False, replace=' DCSP '):
def collapse_linebreaks(string, threshold=1):
def plaintext(html, keep=[], replace=blocks, linebreaks=2, indentation=False):
def author(name):
def hashtags(string):
def mentions(string):
def retweets(string):
def query(string, service=GOOGLE, **kwargs):
def sort(terms=[], context='', service=GOOGLE, license=None, strict=True, prefix=False, **kwargs):
def base(url):
def abs(url, base=None):
def crawl(links=[], domains=[], delay=20.0, parse=HTMLLinkParser().parse, sort=FIFO, method=DEPTH, **kwargs):
def parsepdf(path, *args, **kwargs):
def parsedocx(path, *args, **kwargs):
def parsehtml(path, *args, **kwargs):
def parsedoc(path, format=None):
def encode_language(name):
def decode_language(code):
def encode_region(name):
def decode_region(code):
def languages(region):
def regions(language):
def regionalize(language):
def market(language):
def geocode(location):
def opendocx(file):
def makeelement(tagname, tagtext=None, nsprefix='w', attributes=None, attrnsprefix=None):
def pagebreak(type='page', orient='portrait'):
def paragraph(paratext, style='BodyText', breakbefore=False, jc='left'):
def heading(headingtext, headinglevel, lang='en'):
def table(contents, heading=True, colw=None, cwunit='dxa', tblw=0, twunit='auto', borders={}, celstyle=None):
def picture(relationshiplist, picname, picdescription, pixelwidth=None, pixelheight=None, nochangeaspect=True, nochangearrowheads=True):
def search(document, search):
def replace(document, search, replace):
def clean(document):
def findTypeParent(element, tag):
def AdvSearch(document, search, bs=3):
def advReplace(document, search, replace, bs=3):
def getdocumenttext(document):
def coreproperties(title, subject, creator, keywords, lastmodifiedby=None):
def appproperties():
def websettings():
def wordrelationships(relationshiplist):
def savedocx(document, coreprops, appprops, contenttypes, websettings, wordrelationships, output):
def _match_css_class(str):
def buildTagMap(default, *args):
def _open_resource(url_file_stream_or_string, etag, modified, agent, referrer, handlers, request_headers):
def _convert_to_idn(url):
def registerDateHandler(func):
def _parse_date_iso8601(dateString):
def _parse_date_onblog(dateString):
def _parse_date_nate(dateString):
def _parse_date_greek(dateString):
def _parse_date_hungarian(dateString):
def _parse_date_rfc822(dt):
def _parse_date_asctime(dt):
def _parse_date_perforce(aDateString):
def _parse_date(dateString):
def _getCharacterEncoding(http_headers, xml_data):
def _toUTF8(data, encoding):
def _stripDoctype(data):
def parse(url_file_stream_or_string, etag=None, modified=None, agent=None, referrer=None, handlers=None, request_headers=None, response_headers=None):
def mult_matrix((a1, b1, c1, d1, e1, f1), (a0, b0, c0, d0, e0, f0)):
def translate_matrix((a, b, c, d, e, f), (x, y)):
def apply_matrix_pt((a, b, c, d, e, f), (x, y)):
def apply_matrix_norm((a, b, c, d, e, f), (p, q)):
def uniq(objs):
def csort(objs, key=(lambda x: x)):
def fsplit(pred, objs):
def drange(v0, v1, d):
def get_bound(pts):
def pick(seq, func, maxobj=None):
def choplist(n, seq):
def nunpack(s, default=0):
def decode_text(s):
def enc(x, codec='ascii'):
def ascii85decode(data):
def asciihexdecode(data):
def name2unicode(name):
def resolve1(x):
def resolve_all(x):
def decipher_all(decipher, objid, genno, x):
def rldecode(data):
def lzwdecode(data):
def decode_utf8(string):
def encode_utf8(string):
def decode_string(v, encoding='utf-8'):
def encode_string(v, encoding='utf-8'):
def decode_string(v, encoding='utf-8'):
def encode_string(v, encoding='utf-8'):
def shi(i, base='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'):
def shuffled(iterable, **kwargs):
def chunk(iterable, n):
def mix(iterables=[], n=10):
def bin(iterable, key=(lambda x: x), value=(lambda x: x)):
def pimap(iterable, function, *args, **kwargs):
def words(string, filter=(lambda w: w.strip("'").isalnum()), punctuation=PUNCTUATION, **kwargs):
def stem(word, stemmer=PORTER, **kwargs):
def count(words=[], top=None, threshold=0, stemmer=None, exclude=[], stopwords=False, language=None, **kwargs):
def character_ngrams(string='', n=3, top=None, threshold=0, exclude=[], **kwargs):
def _uid():
def features(vectors=[]):
def sparse(v):
def relative(v):
def l2_norm(v):
def cosine_similarity(v1, v2):
def tf_idf(vectors=[], base=2.71828):
def distance(v1, v2, method=COSINE):
def entropy(p=[], base=None):
def mean(iterable, length=None):
def centroid(vectors=[], features=[]):
def cluster(method=KMEANS, vectors=[], **kwargs):
def k_means(vectors, k=None, iterations=10, distance=COSINE, seed=RANDOM, **kwargs):
def kmpp(vectors, k, distance=COSINE):
def sequence(i=0, f=(lambda i: (i + 1))):
def hierarchical(vectors, k=1, iterations=1000, distance=COSINE, **kwargs):
def K_fold_cross_validation(Classifier, documents=[], folds=10, **kwargs):
def folds(documents=[], K=10, **kwargs):
def gridsearch(Classifier, documents=[], folds=10, **kwargs):
def feature_selection(documents=[], top=None, method=CHISQUARED, threshold=0.0):
def softmax(p):
def matrix(m, n, a=0.0, b=0.0):
def sigmoid(x):
def sigmoid_derivative(y):
def toPyModel(model_ptr):
def toPyModel(model_ptr):
def svm_read_problem(data_file_name):
def load_model(model_file_name):
def save_model(model_file_name, model):
def evaluations(ty, pv):
def train(arg1, arg2=None, arg3=None):
def predict(y, x, m, options=''):
def svm_read_problem(data_file_name):
def svm_load_model(model_file_name):
def svm_save_model(model_file_name, model):
def evaluations(ty, pv):
def svm_train(arg1, arg2=None, arg3=None):
def svm_predict(y, x, m, options=''):
def is_short_syllable(w, before=None):
def is_short(w):
def R1(w):
def R2(w):
def find_vowel(w):
def has_vowel(w):
def vowel_consonant_pairs(w, max=None):
def step_1a(w):
def step_1b(w):
def step_1c(w):
def step_2(w):
def step_3(w):
def step_4(w):
def step_5a(w):
def step_5b(w):
def case_sensitive(stem, word):
def upper_consonant_y(w):
def stem(word, cached=True, history=10000, **kwargs):
def corpus(path, encoding='utf-8'):
def model(top=None):
def load_stop_words(stop_word_file):
def separate_words(text, min_word_return_size):
def split_sentences(text):
def conllu2json(input_path, output_path, n_sents=10, use_morphology=False):
def parse_package_meta(package_path, package, require=True):
def get_raw_input(description, default=False):
def print_table(data, **kwargs):
def print_markdown(data, **kwargs):
def print_msg(*text, **kwargs):
def _wrap_text(text):
def sys_exit(*messages, **kwargs):
def detokenize(token_rules, words):
def fix_glove_vectors_loading(overrides):
def resolve_model_name(name):
@pytest.mark.parametrize(u'text1,prob1,text2,prob2', [(u'NOUN', (-1), u'opera', (-2))]) DCNL def test_vocab_lexeme_lt(en_vocab, text1, text2, prob1, prob2):
@pytest.mark.parametrize(u'text1,text2', [(u'phantom', u'opera')]) DCNL def test_vocab_lexeme_hash(en_vocab, text1, text2):
def get_doc(vocab, words=[], pos=None, heads=None, deps=None, tags=None, ents=None):
def apply_transition_sequence(parser, doc, sequence):
def add_vecs_to_vocab(vocab, vectors):
def get_cosine(vec1, vec2):
def assert_docs_equal(doc1, doc2):
@pytest.mark.models DCNL def test_parser_sbd_serialization_projective(EN):
@pytest.mark.models DCNL def test_consistency_bug(EN):
@pytest.mark.models DCNL def test_unit_end_gazetteer(EN):
@pytest.mark.slow DCNL @pytest.mark.models DCNL @pytest.mark.parametrize(u'text,expected_sents', TEST_CASES) DCNL def test_parser_sbd_prag(EN, text, expected_sents):
def test_issue309(en_tokenizer):
@pytest.mark.parametrize(u'text', [u'Datum:2014-06-02\nDokument:76467']) DCNL def test_issue886(en_tokenizer, text):
@pytest.mark.parametrize(u'text', [u'aaabbb@ccc.com\nThank DCSP you!', u'aaabbb@ccc.com DCSP \nThank DCSP you!']) DCNL def test_issue859(en_tokenizer, text):
def test_issue242(en_tokenizer):
@pytest.mark.models DCNL def test_issue910(train_data, additional_entity_types):
@pytest.mark.parametrize(u'text,is_num', [(u'one', True), (u'ten', True), (u'teneleven', False)]) DCNL def test_issue759(en_tokenizer, text, is_num):
@pytest.mark.parametrize(u'text1,text2', [(u'cat', u'dog')]) DCNL def test_issue361(en_vocab, text1, text2):
def test_issue957(en_tokenizer):
@pytest.mark.parametrize(u'text', [u'We DCSP were DCSP scared', u'We DCSP Were DCSP Scared']) DCNL def test_issue744(en_tokenizer, text):
@pytest.mark.models DCNL def test_issue693(EN):
def test_issue595():
@pytest.mark.parametrize(u'text,tag,lemma', [(u'inner', u'JJ', u'inner')]) DCNL def test_issue912(en_vocab, text, tag, lemma):
@pytest.mark.parametrize(u'text,expected_tokens', [(u"l'avion", [u"l'", u'avion']), (u"j'ai", [u"j'", u'ai'])]) DCNL def test_issue768(fr_tokenizer_w_infix, text, expected_tokens):
@pytest.mark.parametrize(u'text', [u'3/4/2012', u'01/12/1900']) DCNL def test_issue740(en_tokenizer, text):
@pytest.mark.models DCNL def test_issue514(EN):
@pytest.mark.parametrize(u'text,number', [(u'7am', u'7'), (u'11p.m.', u'11')]) DCNL def test_issue736(en_tokenizer, text, number):
@pytest.mark.parametrize(u'text,tag,lemma', [(u'anus', u'NN', u'anus'), (u'princess', u'NN', u'princess')]) DCNL def test_issue912(en_vocab, text, tag, lemma):
@pytest.mark.parametrize(u'text', [u'want/need']) DCNL def test_issue891(en_tokenizer, text):
@pytest.mark.parametrize(u'text,tokens', [(u'"deserve,"--and', [u'"', u'deserve', u',"--', u'and']), (u'exception;--exclusive', [u'exception', u';--', u'exclusive']), (u'day.--Is', [u'day', u'.--', u'Is']), (u'refinement:--just', [u'refinement', u':--', u'just']), (u'memories?--To', [u'memories', u'?--', u'To']), (u'Useful.=--Therefore', [u'Useful', u'.=--', u'Therefore']), (u'=Hope.=--Pandora', [u'=', u'Hope', u'.=--', u'Pandora'])]) DCNL def test_issue801(en_tokenizer, text, tokens):
@pytest.mark.models DCNL @pytest.mark.parametrize(u'text,i', [(u"Jane's DCSP got DCSP a DCSP new DCSP car", 1), (u"Jane DCSP thinks DCSP that's DCSP a DCSP nice DCSP car", 3)]) DCNL def test_issue401(EN, text, i):
def test_issue360(en_tokenizer):
@pytest.mark.models DCNL @pytest.mark.parametrize(u'text', [u'He DCSP is DCSP the DCSP man', u'he DCSP is DCSP the DCSP man']) DCNL def test_issue686(EN, text):
@pytest.mark.models DCNL def test_issue587(EN):
@pytest.mark.parametrize(u'pattern', [pattern1, pattern2]) DCNL def test_issue118(doc, pattern):
@pytest.mark.parametrize(u'pattern', [pattern3, pattern4]) DCNL def test_issue118_prefix_reorder(doc, pattern):
def test_issue590(en_vocab):
@pytest.mark.models DCNL @pytest.mark.parametrize(u'text1,text2', [(u"You're DCSP happy", u'You DCSP are DCSP happy'), (u"I'm DCSP happy", u'I DCSP am DCSP happy'), (u"he's DCSP happy", u"he's DCSP happy")]) DCNL def test_issue717(EN, text1, text2):
@pytest.mark.models DCNL def test_issue758():
@pytest.mark.parametrize(u'text', [u'This DCSP is DCSP a DCSP string DCSP ', u'This DCSP is DCSP a DCSP string DCSP ']) DCNL def test_issue792(en_tokenizer, text):
@pytest.mark.parametrize(u'text', [u'This DCSP is DCSP a DCSP string', u'This DCSP is DCSP a DCSP string\n']) DCNL def test_control_issue792(en_tokenizer, text):
@pytest.mark.parametrize(u'text', [u'Shell', u'shell', u'Shed', u'shed']) DCNL def test_issue775(en_tokenizer, text):
def test_issue834(en_vocab, text_file):
@pytest.mark.parametrize(u'text', [u'au-del\xe0s', u'pair-programm\xe2mes', u'terra-form\xe9es', u'\u03c3-compacts']) DCNL def test_issue852(fr_tokenizer, text):
@pytest.mark.models DCNL def test_issue704(EN):
def test_issue617():
@pytest.mark.xfail DCNL def test_issue850():
@pytest.mark.models DCNL def test_issue955(doc):
@pytest.mark.models DCNL @pytest.mark.parametrize(u'text', [u's...']) DCNL def test_issue719(EN, text):
def test_issue1061():
def test_issue999(train_data):
def test_doc_api_merge_children(en_tokenizer):
def test_doc_api_right_edge(en_tokenizer):
def test_parse_tree(en_tokenizer):
def test_spans_span_sent(doc):
def test_spans_default_sentiment(en_tokenizer):
def test_spans_override_sentiment(en_tokenizer):
def test_spans_are_hashable(en_tokenizer):
def py_encode(symb2freq):
def sgml_extract(text_data):
def split(text):
def parse(string, strip_bad_periods=False):
def merge_ents(doc):
def format_POS(token, light, flat):
def POS_tree(root, light=False, flat=False):
def parse_tree(doc, light=False, flat=False):
def iter_texts_from_json_bz2(loc):
def decodeInventoryEntry_level1(document):
def decodeInventoryEntry_level2(document):
def build_model(vectors, shape, settings):
def read_conll(file_):
def _sysfs_getnode():
def _ifconfig_getnode():
def _arp_getnode():
def _lanscan_getnode():
def _netstat_getnode():
def _ipconfig_getnode():
def _netbios_getnode():
def _unixdll_getnode():
def _windll_getnode():
def _random_getnode():
def getnode():
def uuid1(node=None, clock_seq=None):
def uuid3(namespace, name):
def uuid4():
def uuid5(namespace, name):
def safe_obtain(proxy):
def obtain(proxy):
def dbus_init(main_loop=True, use_qt_loop=False):
def bus_get_object(bus, object_path, service_name=None):
def open_session(bus):
def format_secret(session, secret, content_type):
def exec_prompt(bus, prompt, callback):
def exec_prompt_glib(bus, prompt):
def exec_prompt_qt(bus, prompt):
def unlock_objects(bus, paths, callback=None):
def to_unicode(string):
def create_collection(bus, label, alias='', session=None):
def get_all_collections(bus):
def get_default_collection(bus, session=None):
def get_any_collection(bus):
def get_collection_by_alias(bus, alias):
def search_items(bus, attributes):
def __getLocation__(**kwargs):
def startGpsTracker(period):
def stopGpsTracker():
def dumpGpsTracker():
def statusGpsTracker():
def deleteFile():
def speak(text, lang='US'):
def getAndroidID():
def getPhoneNumber():
def getDeviceId():
def getSimCountryIso():
def getNetworkCountryIso():
def getSimInfo():
def getNetworkOperatorName():
def getSimState():
def isNetworkRoaming():
def isWiFiEnabled():
def getInfoBuild():
def getBatteryStats():
def getMobileNetworkType():
def getAllContacts():
def phoneNumberTypeToString(phoneNumberType, label):
def vibrate(pattern, repeat=None):
def getCallDetails():
def _scandir_generic(path=unicode('.')):
def _walk(top, topdown=True, onerror=None, followlinks=False):
def getIP(domain):
def getIPx(domain):
def getHost(ip):
def getAlias(domain):
def get_sample_size(format):
def get_format_from_width(width, unsigned=True):
def get_portaudio_version():
def get_portaudio_version_text():
def get_module_files(fullname):
def pupy_add_package(pkdic, compressed=False, name=None):
def now():
def signed_to_unsigned(signed):
def handle_com_error(err=None):
def from_time(year=None, month=None, day=None, hours=None, minutes=None, seconds=None, microseconds=None, timezone=None):
def to_time(wmi_time):
def _set(obj, attribute, value):
def connect(computer='', impersonation_level='', authentication_level='', authority='', privileges='', moniker='', wmi=None, namespace='', suffix='', user='', password='', find_classes=False, debug=False):
def connect_server(server, namespace='', user='', password='', locale='', authority='', impersonation_level='', authentication_level='', security_flags=128, named_value_set=None):
def registry_hijacking_appPath(mainPowershellScriptRemotePath, files_to_delete):
def GetTokenSid(hToken):
def EnablePrivilege(privilegeStr, hToken=None):
def get_process_token():
def get_currents_privs():
def can_get_admin_access():
def is_process_64(pid):
def is_process_64_from_handle(hProcess):
def is_x64_architecture():
def is_x86_architecture():
def get_ptr_type(structure, member):
def read_value(addr_space, value_type, vaddr):
def get_obj_offset(types, member_list):
def read_obj(addr_space, types, member_list, vaddr):
def decrypt_secret(secret, key):
def decrypt_hash_vista(edata, nlkm, ch):
def generateKML(deviceName, traces, outputFile):
def execute_powershell_script(module, content, function, x64IfPossible=False, script_name=None):
def remove_comments(string):
def obfuscatePowershellScript(code):
def obfs_ps_script(script):
def shell_exec(client, cmdline, shell=None, env=None, encoding=None):
def getLocalAndroidPath(client, args):
def _async_raise(tid, exctype):
def getLinuxImportedModules():
def getInvokeReflectivePEInjectionWithDLLEmbedded(payload_conf):
def set_signal_winch(handler):
def get_integrity_level():
def color_real(s, color, prompt=False, colors_enabled=True):
def safe_file_exists(f):
def getLocalAndroidPath(localFolder, androidID, userName):
def consize(file=None):
def get_listener_ip(cache=True, external=False, config=None, igd=None):
def safe_obtain(proxy):
def hotpatch_oswrite(conn):
def interact(module):
@contextmanager DCNL def redirected_stdio(module, stdout=None, stderr=None):
def chain_transports(*args):
def ascii85EncodeDG(str):
def ascii85DecodeDG(str):
def set_default_proxy(proxy_type=None, addr=None, port=None, rdns=True, username=None, password=None):
def get_default_proxy():
def wrap_module(module):
def create_connection(dest_pair, proxy_type=None, proxy_addr=None, proxy_port=None, proxy_rdns=True, proxy_username=None, proxy_password=None, timeout=None, source_address=None, socket_options=None):
def _get_b64_chunks_from_str(string):
def random_bytes(n):
def htonl(n):
def ntohl(bs):
def htons(n):
def ntohs(bs):
def hmac_sha256_digest(key, msg):
def powMod(x, y, mod):
def pbkdf2_hex(data, salt, iterations=1000, keylen=24, hashfunc=None):
def pbkdf2_bin(data, salt, iterations=1000, keylen=24, hashfunc=None):
def _feed_stream(feeder, in_stream, out_stream, block_size=BLOCK_SIZE):
def encrypt_stream(mode, in_stream, out_stream, block_size=BLOCK_SIZE, padding=PADDING_DEFAULT):
def decrypt_stream(mode, in_stream, out_stream, block_size=BLOCK_SIZE, padding=PADDING_DEFAULT):
def createTicketMessage(rawTicket, HMACKey):
def issueTicketAndKey(srvState):
def checkKeys(srvState):
def decrypt(ticket, srvState):
def HMAC_SHA256_128(key, msg):
def strongRandom(size):
def setStateLocation(stateLocation):
def isValidHMAC(hmac1, hmac2, key):
def locateMark(mark, payload):
def getEpoch():
def expandedEpoch():
def writeToFile(data, fileName):
def readFromFile(fileName, length=(-1)):
def sanitiseBase32(data):
def writeServerPassword(password):
def createProtocolMessages(data, flags=const.FLAG_PAYLOAD):
def getFlagNames(flags):
def isSane(totalLen, payloadLen, flags):
def test_extract_messages_without_rawsource():
@decorator DCNL def func2(a, b):
@decorator DCNL def func1(a, b):
@missing_name DCNL def decoratedFunction():
def test():
def withSentence():
def noSentence():
def emptyLine():
def function_(_arg):
def raises(exc, func, *args, **kwds):
def _funky_classmethod(name, b, c, d, docstring=None):
def function(foo, *args, **kwds):
@pytest.mark.sphinx('dummy', testroot='domain-js') DCNL def test_domain_js_xrefs(app, status, warning):
def test_load_mappings_warnings(tempdir, app, status, warning):
def test_getsafeurl_authed():
def test_getsafeurl_authed_having_port():
def test_getsafeurl_unauthed():
def test_debug_noargs(capsys):
def test_debug_file(capsys, tempdir):
@mock.patch('requests.get') DCNL def test_debug_url(fake_get, capsys):
@pytest.fixture DCNL def setup_command(request, tempdir, rootdir):
@pytest.mark.sphinx('pseudoxml') DCNL def test_docinfo(app, status, warning):
@pytest.mark.sphinx('dummy', testroot='domain-py') DCNL def test_domain_py_xrefs(app, status, warning):
def _private_doc():
def __special_doc__():
def test_env_read_docs():
def _rstrip(line, JUNK='\n DCSP  DCTB '):
def makename(package, module):
def write_file(name, text, opts):
def format_heading(level, text, escape=True):
def format_directive(module, package=None):
def create_module_file(package, module, opts):
def create_package_file(root, master_package, subroot, py_files, opts, subs, is_namespace):
def create_modules_toc_file(modules, opts, name='modules'):
def shall_skip(module, opts):
def recurse_tree(rootpath, excludes, opts):
def normalize_excludes(rootpath, excludes):
def is_excluded(root, excludes):
def main(argv=sys.argv[1:]):
def ask_user(d):
def generate(d, overwrite=True, silent=False, templatedir=None):
def publish_msgstr(app, source, source_path, source_line, config, settings):
def accesskey(context, key):
def build_main(argv=sys.argv[1:]):
def make_main(argv=sys.argv[1:]):
@pytest.fixture DCNL def app_params(request, test_params, shared_result, sphinx_test_tempdir, rootdir):
@pytest.fixture DCNL def test_params(request):
@pytest.fixture(scope='function') DCNL def app(test_params, app_params, make_app, shared_result):
@pytest.fixture(scope='function') DCNL def status(app):
@pytest.fixture(scope='function') DCNL def warning(app):
@pytest.fixture() DCNL def make_app(test_params):
@pytest.fixture DCNL def if_graphviz_found(app):
@pytest.fixture(scope='session') DCNL def sphinx_test_tempdir():
@pytest.fixture DCNL def tempdir(tmpdir):
def mygettext(string):
def lazy_gettext(string):
def __(message, *args):
def init(locale_dirs, language, catalog='sphinx'):
def add_uids(doctree, condition):
def merge_doctrees(old, new, condition):
def get_ratio(old, new):
def levenshtein_distance(a, b):
def setup(app):
def _process_docstring(app, what, name, obj, options, lines):
def _skip_member(app, what, name, obj, skip, options):
def try_import(objname):
def import_classes(name, currmodule):
def html_visit_inheritance_diagram(self, node):
def latex_visit_inheritance_diagram(self, node):
def texinfo_visit_inheritance_diagram(self, node):
def members_option(arg):
def members_set_option(arg):
def bool_option(arg):
def cut_lines(pre, post=0, what=None):
def between(marker, what=None, keepempty=False, exclude=False):
def add_documenter(cls):
def format_annotation(annotation):
def formatargspec(function, args, varargs=None, varkw=None, defaults=None, kwonlyargs=(), kwonlydefaults={}, annotations={}):
def process_autosummary_toc(app, doctree):
def autosummary_toc_visit_html(self, node):
def autosummary_table_visit_html(self, node):
def get_documenter(obj, parent):
def mangle_signature(sig, max_chars=30):
def limited_join(sep, items, max_chars=30, overflow_marker='...'):
def get_import_prefixes_from_env(env):
def import_by_name(name, prefixes=[None]):
def _import_by_name(name):
def autolink_role(typ, rawtext, etext, lineno, inliner, options={}, content=[]):
def find_autosummary_in_files(filenames):
def find_autosummary_in_docstring(name, module=None, filename=None):
def find_autosummary_in_lines(lines, module=None, filename=None):
def render_math(self, math):
def render_dot(self, code, options, format, prefix='graphviz'):
def compare_version(ver1, ver2, operand):
def _strip_basic_auth(url):
def _read_from_url(url, config=None):
def _get_safe_url(url):
def fetch_inventory(app, uri, inv):
def load_mappings(app):
def missing_reference(app, env, node, contnode):
def debug(argv):
def generate_latex_macro(math, config):
def ensure_tempdir(builder):
def compile_math(latex, builder):
def convert_dvi_to_image(command, name):
def convert_dvi_to_png(dvipath, builder):
def convert_dvi_to_svg(dvipath, builder):
def render_math(self, math):
def is_in_section_title(node):
def parse_stop_word(source):
def escape_abbr(text):
def rstdim_to_latexdim(width_str):
def find_subsections(section):
def smart_capwords(s, sep=None):
def indexmarkup_role(typ, rawtext, text, lineno, inliner, options={}, content=[]):
def verify_required_extensions(app, requirements):
def default_latex_engine(config):
def default_latex_docclass(config):
def check_anchor(response, anchor):
def get_stable_hash(obj):
def extract_zip(filename, targetdir):
def is_archived_theme(filename):
def get_lvar_names(node, self=None):
def dedent_docstring(s):
def canon_path(nativepath):
def relative_uri(base, to):
def ensuredir(path):
def walk(top, topdown=True, followlinks=False):
def movefile(source, dest):
def copytimes(source, dest):
def copyfile(source, dest):
def get_terminal_width():
def getLogger(name):
def convert_serializable(records):
@contextmanager DCNL def pending_warnings():
@contextmanager DCNL def pending_logging():
@contextmanager DCNL def skip_warningiserror(skip=True):
def is_suppressed_warning(type, subtype, suppress_warnings):
def setup(app, status, warning):
def read_png_depth(filename):
def write_png_depth(filename, depth):
def path_stabilize(filepath):
def get_matching_files(dirname, exclude_matchers=()):
def get_matching_docs(dirname, suffixes, exclude_matchers=()):
def copy_static_entry(source, targetdir, builder, context={}, exclude_matchers=(), level=0):
def save_traceback(app):
def get_module_source(modname):
def detect_encoding(readline):
def parselinenos(spec, total):
def force_decode(string, encoding):
def rpartition(s, t):
def split_into(n, type, value):
def format_exception_cut_frames(x=1):
def epoch_to_rfc1123(epoch):
def find_catalog_source_files(locale_dirs, locale, domains=None, gettext_compact=False, charset='utf-8', force_all=False):
def extract_messages(doctree):
def traverse_translatable_index(doctree):
def nested_parse_with_titles(state, content, node):
def clean_astext(node):
def split_explicit_title(text):
def inline_all_toctrees(builder, docnameset, docname, tree, colorfunc, traversed):
def make_refnode(builder, fromdocname, todocname, targetid, child, title=None):
def is_smartquotable(node):
def isenumclass(x):
def isenumattribute(x):
def isdescriptor(x):
def safe_getattr(obj, name, *defargs):
def safe_getmembers(object, predicate=None, attr_getter=safe_getattr):
def object_description(object):
def is_builtin_class_method(obj, attr_name):
def prepare_docstring(s, ignore=1):
def prepare_commentdoc(s):
@contextmanager DCNL def docutils_namespace():
def patched_get_language(language_code, reporter=None):
@contextmanager DCNL def patch_docutils():
def loads(x):
def is_ssl_error(exc):
def _get_tls_cacert(url, config):
def get(url, **kwargs):
def head(url, **kwargs):
def _translate_pattern(pat):
def patmatch(name, pat):
def patfilter(names, pat):
def test_svg(h, f):
def _is_single_paragraph(node):
def copy_asset_file(source, destination, context=None, renderer=None):
def copy_asset(source, destination, excluded=(lambda path: False), context=None, renderer=None):
def _pseudo_parse_arglist(signode, arglist):
def parse_directive(d):
def get_package_version():
def stringified_dict_contains_value(key, value, str_dict):
def main(arguments=None):
def main(arguments=None):
def checkImages(images):
def intToBin(i):
def writeGif(filename, images, duration=0.1, repeat=True, dither=False, nq=0, subRectangles=True, dispose=None):
def readGif(filename, asNumpy=True):
def start_api():
def main():
@app.before_request DCNL def require_json():
@app.route('/scans/<int:scan_id>/log', methods=['GET']) DCNL @requires_auth DCNL def scan_log(scan_id):
def paginate_logs(scan_id, scan_info, page, _id):
@app.route('/scans/', methods=['POST']) DCNL @requires_auth DCNL def start_scan():
@app.route('/scans/', methods=['GET']) DCNL @requires_auth DCNL def list_scans():
@app.route('/scans/<int:scan_id>', methods=['DELETE']) DCNL @requires_auth DCNL def scan_delete(scan_id):
@app.route('/scans/<int:scan_id>/status', methods=['GET']) DCNL @requires_auth DCNL def scan_status(scan_id):
@app.route('/scans/<int:scan_id>/pause', methods=['GET']) DCNL @requires_auth DCNL def scan_pause(scan_id):
@app.route('/scans/<int:scan_id>/stop', methods=['GET']) DCNL @requires_auth DCNL def scan_stop(scan_id):
@app.route('/scans/<int:scan_id>/exceptions/', methods=['GET']) DCNL @requires_auth DCNL def list_exceptions(scan_id):
@app.route('/scans/<int:scan_id>/exceptions/<int:exception_id>', methods=['GET']) DCNL @requires_auth DCNL def get_exception_details(scan_id, exception_id):
def exception_to_json(exception_data, scan_id, exception_id, detailed=False):
@app.route('/scans/<int:scan_id>/exceptions/', methods=['POST']) DCNL @requires_auth DCNL def exception_creator(scan_id):
@app.route('/scans/<int:scan_id>/fuzzable-requests/', methods=['GET']) DCNL @requires_auth DCNL def get_fuzzable_request_list(scan_id):
@app.route('/scans/<int:scan_id>/urls/', methods=['GET']) DCNL @requires_auth DCNL def get_url_list(scan_id):
@app.errorhandler(500) DCNL def error_500_handler(error):
@app.route('/raise-500', methods=['GET']) DCNL @requires_auth DCNL def raise_500():
@app.route('/scans/<int:scan_id>/kb/', methods=['GET']) DCNL @requires_auth DCNL def list_kb(scan_id):
@app.route('/scans/<int:scan_id>/kb/<int:vulnerability_id>', methods=['GET']) DCNL @requires_auth DCNL def get_kb(scan_id, vulnerability_id):
def matches_filter(finding, request):
def finding_to_json(finding, scan_id, finding_id, detailed=False):
@app.route('/scans/<int:scan_id>/traffic/<int:traffic_id>', methods=['GET']) DCNL @requires_auth DCNL def get_traffic_details(scan_id, traffic_id):
def create_temp_profile(scan_profile):
def start_scan_helper(target_urls, scan_profile, scan_info_setup):
def make_server(host, port, app=None, threaded=False, processes=1, request_handler=None, passthrough_errors=False, ssl_context=None):
def check_auth(username, password):
def abort(code, message):
def parse_arguments():
def process_cmd_args_config(app):
def sync_with_om(func):
def setRawInputMode(raw):
def clearScreen():
def setRawInputMode(raw):
def clearScreen():
def commonPrefix(completions):
def splitPath(path, sep='/'):
def removePrefix(s, prefix='!'):
def suggest(tree, part, skipList=[]):
def formatParagraphLine(text, width):
def is_black_image(img_inst):
def open_help(chapter=''):
def _get_nibbles(char):
def sha_encode(t):
def sha256_encode(t):
def sha512_encode(t):
def md5_encode(t):
def b64encode(t):
def b64decode(t):
def urlencode(t):
def urldecode(t):
def html_escape(t):
def html_unescape(t):
def double_urlencode(t):
def double_urldecode(t):
def hex_encoding(t):
def zero_x_encoding(t):
def hex_decoding(t):
def double_percent_hex_encoding(t):
def double_nibble_hex_encoding(t):
def first_nibble_hex_encoding(t):
def second_nibble_hex_encoding(t):
def utf8_barebyte_encoding(t):
def utf8_encoding(t):
def msu_encoding(t):
def random_upper(t):
def random_lower(t):
def mysql_encode(t):
def mssql_encode(t):
def clamp(val, lower, upper):
def load_pixbuf(fname, size=0):
def subscribe_to_messages(observer_function):
def unsubscribe_to_messages(observer_function):
def handle_crash(w3af_core, _type, value, tb, plugins=''):
def handle_exceptions(w3af_core):
def clean_description(desc):
def end_threads():
def FriendlyExceptionDlg(message):
def debugHandler(widget, event, *a):
def loadImage(filename, path=GUI_DATA_PATH):
def loadIcon(stock_item_id):
def create_generator_menu(text_view_obj):
def print_generator_text(widget, text_view_obj, generator_instance):
def getRenderingView(w3af, parentView):
def dependency_check():
def effectively_exploit_all(w3af, enabled_plugins, stopOnFirst):
def _launch_exploit_all(dlg, w3af, enabled_plugins, stopOnFirst):
def get_exploitable_vulns(exploit):
def read_os_detection(remote_read):
def os_detection_exec(exec_method):
def get_remote_temp_file(exec_method):
def fresh_output_manager_inst():
def log_sink_factory(om_queue):
def start_thread_on_demand(func):
def get_virtual_daemon(exec_method):
def only_if_subclass(meth):
def transform(cls):
def build_ws_upgrade_request(web_socket_url, extra_headers=None, web_socket_version=DEFAULT_PROTOCOL_VERSION, origin=None):
def negotiate_websocket_version(uri_opener, websocket_url):
def is_successful_upgrade(upgrade_response):
def cleanup_bug_report(_input):
def get_platform_dist():
def enable_dns_cache():
def create_home_dir():
def get_home_dir():
def verify_dir_has_perm(path, perm, levels=0):
def get_file_list(directory, extension='.py'):
def exploit_all():
def epoch_to_string(start_time):
def relative_distance_boolean(a_str, b_str, threshold=0.6):
def fuzzy_equal(a_str, b_str, threshold=0.6):
def fuzzy_not_equal(a_str, b_str, threshold=0.6):
def relative_distance(a_str, b_str):
def contains_source_code(http_response):
def is_false_positive(http_response, match, detected_langs):
def which(name, flags=os.X_OK):
def get_temp_dir():
def create_temp_dir():
def remove_temp_dir(ignore_errors=False):
def human_number(number):
def factory(module_name, *args):
@retry(2, delay=0.5, backoff=1.1) DCNL def safe_deepcopy(instance):
def get_local_ip(target=None):
def get_net_iface():
def get_webroot_dirs(domain=None):
def diff(a, b):
def runonce(exc_class=Exception):
def retry(tries, delay=1, backoff=2, exc_class=None, err_msg='', log_msg=None):
def cached_property(fun):
def rate_limited(max_per_second):
def is_private_site(domain_or_IP_address):
def get_w3af_version_as_dict():
def get_w3af_version():
def unique_everseen(iterable, key=None):
def unique_justseen(iterable, key=None):
def group_by_min_key(input_list):
def string2port(port_str):
def port2string(port):
def is_git_repo(path=W3AF_LOCAL_PATH):
def is_dirty_repo(path=W3AF_LOCAL_PATH):
def get_latest_commit(path=W3AF_LOCAL_PATH):
def get_commit_id_date(commit_id, path=W3AF_LOCAL_PATH):
def get_latest_commit_date(path=W3AF_LOCAL_PATH):
def get_current_branch(path=W3AF_LOCAL_PATH):
def repo_has_conflicts(path=W3AF_LOCAL_PATH):
def handle_threading_error(scans_completed, threading_error):
def verify_python_version():
@only_ci DCNL def generate_requirements_txt(failed_deps):
def dependency_check(dependency_set=CORE, exit_on_failure=True):
def generate_helper_script(pkg_manager_cmd, os_packages, pip_cmd, failed_deps):
def generate_pip_install_git(pip_cmd, git_pkg):
def is_main_process():
def timelimited(timeout, function, *args, **kwds):
@return_error DCNL def apply_with_return_error(args):
def create_detailed_pickling_error(exception, instance):
def provides_cors_features(freq, url_opener):
def retrieve_cors_header(response, key):
def build_cors_request(url, origin_header_value):
def site_protected_against_xss_by_csp(response, allow_unsafe_inline=False, allow_unsafe_eval=False):
def find_vulns(response):
def unsafe_inline_enabled(response):
def unsafe_eval_enabled(response):
def provides_csp_features(response):
def retrieve_csp_report_uri(response):
def retrieve_csp_policies(response, select_only_reportonly_policies=False, select_also_misspelled_directives=False):
def merge_policies_dict(non_report_only_policies_dict, report_only_policies_dict):
def _contains_special_directive(directive_definition):
def listdir_remove_fs(query_dir):
def assertProfilesEqual(profile_filename_a, profile_filename_b, skip_sections=None, skip_options=None):
def get_clean_body(response):
def task_decorator(method):
@should_dump_processes DCNL def start_process_dump():
def dump_processes():
@should_dump_processes DCNL def stop_process_dump():
@should_profile_cpu DCNL def start_cpu_profiling():
@should_profile_cpu DCNL def stop_cpu_profiling():
@should_dump_tracemalloc DCNL def start_tracemalloc_dump():
def dump_tracemalloc():
@should_dump_tracemalloc DCNL def stop_tracemalloc_dump():
@should_profile_core DCNL def start_core_profiling(w3af_core):
@should_profile_core DCNL def stop_core_profiling(w3af_core):
@should_dump_psutil DCNL def start_psutil_dump():
def dump_psutil():
@should_dump_psutil DCNL def stop_psutil_dump():
@should_profile_memory DCNL def start_memory_profiling():
def dump_objects():
@should_profile_memory DCNL def stop_memory_profiling():
@should_dump_thread_stack DCNL def start_thread_stack_dump():
def get_thread_name(threads_list, thread_id):
def dump_thread_stack():
@should_dump_thread_stack DCNL def stop_thread_stack_dump():
def dump_data_every_thread(func, delay_minutes, save_thread_ptr):
def shared_val_accuracy():
def render(template_name, context):
def is_running(ip, port):
def _get_inst(ip, port):
def start_webserver(ip, port, webroot, handler=WebHandler):
def start_webserver_any_free_port(ip, webroot, handler=WebHandler):
def is_running_on_ci():
def only_ci(decorated_func):
def summarize_exit_codes(exit_codes):
def nose_strategy():
def run_nosetests(nose_cmd, first, last):
@nottest DCNL def _get_tests(fname, selector=None, nose_params=NOSE_COLLECT_PARAMS):
@nottest DCNL def get_all_tests():
@nottest DCNL def get_ignored_tests():
@nottest DCNL def get_test_ids(nose_selector):
@nottest DCNL def get_run_tests():
def parse_xunit(fname):
@nottest DCNL def normalize_test_names(test_suite):
def unique_everseen(iterable, key=None):
def print_summary(all_tests, run_tests, ignored_tests):
def clean_noise(output_string):
def whereis_moth():
def get_default_persistent_db_instance():
def clean_data_container(data_container):
def clean_fuzzable_request(fuzzable_request, dc_handler=clean_data_container):
def clean_url(url, dc_handler=clean_data_container):
def clean_path_filename(url):
def clean_filename(filename):
def clean_path(path):
def get_all_templates():
def sample_count(value):
def _return_html_encoded(encodingexc):
def _return_escaped_char(encodingexc):
def smart_unicode(s, encoding=DEFAULT_ENCODING, errors='strict', on_error_guess=True):
def smart_str(s, encoding=DEFAULT_ENCODING, errors='strict'):
def is_known_encoding(encoding):
def greek(size):
def python_major():
def replace_file_special_chars(filename_path):
def days_since_file_update(path, days):
def get_days_since_last_update(path):
def cpickle_dumps(obj):
def sortfunc(x_obj, y_obj):
def get_match_rate(variable_name, variable_name_db):
def smart_fill(variable_name, db=PARAM_NAME_KNOWLEDGE, default='56'):
@memoized DCNL def smart_fill_file(var_name, file_name):
def guess_extension(var_name, file_name):
def create_mutants(freq, mutant_str_list, append=False, fuzzable_param_list=[], orig_resp=None, mutant_tuple=ALL_MUTANTS):
def _get_fuzzer_config():
def rand_alpha(length=0):
def rand_alnum(length=0):
def rand_number(length=0, exclude_numbers=()):
def create_format_string(length):
def get_context(data, payload):
def get_context_iter(data, payload):
def get_js_context(data, payload):
def get_js_context_iter(data, payload):
def get_css_context(data, payload):
def get_css_context_iter(data, payload):
def are_variants(uri, other_uri):
def create_fuzzable_request_from_request(request, add_headers=None):
@contextmanager DCNL def raise_size_limit(respect_size_limit):
def gen_hash(request):
def safe_str(obj):
def close_on_error(read_meth):
def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT, source_address=None):
def wrap_socket(sock, keyfile=None, certfile=None, server_side=False, cert_reqs=CERT_NONE, ssl_version=ssl.PROTOCOL_TLSv1, ca_certs=None, do_handshake_on_connect=True, suppress_ragged_eofs=True, server_hostname=None, timeout=None):
def new_no_content_resp(uri, add_id=False):
def extend_escape_table_with_uppercase(escape_table):
def extend_escape_table_with_printable_chars(escape_table):
def _multi_escape_table_impl(_input, escape_table=ESCAPE_TABLE):
def get_clean_body(mutant, response):
def get_socket_exception_reason(error):
def get_exception_reason(error):
def build_opener(director_klass, handlers):
def get_common_directories(os=None):
def opt_factory(name, default_value, desc, _type, help='', tabid=''):
def python_export(request_string):
def ruby_export(request_string):
def html_export(request_string):
def ajax_export(request_string):
def dc_from_hdrs_post(headers, post_data):
def dc_from_form_params(form_parameters):
def to_mutable(arbitrary_python_obj):
def encode_as_multipart(multipart_container, boundary):
def _split_vars_files(data):
def get_boundary():
def process_get_tags_by_filter(http_resp, tags, yield_text, processes, hash_string, debug):
def process_document_parser(http_resp, processes, hash_string, debug):
def init_worker(log_queue):
def init_manager():
def Manager():
def pdf_to_text(pdf_string):
def parse_xmlrpc(xml_string):
def build_xmlrpc(xml_string, fuzzed_parameters):
def parse_cookie(cookie_header_value):
def main():
@profile DCNL def test():
def check_version_syntax(version):
def check_uri_syntax(uri, host=None):
def raw_http_request_parser(raw_http_request):
def http_request_parser(head, postdata):
def set_changed(meth):
def memoized(meth):
def parse_qsl(qs, keep_blank_values=0, strict_parsing=0):
def parse_qs(qstr, ignore_exc=True, encoding=DEFAULT_ENCODING):
def parse(source, filename=None, starting_line_number=1):
def get_grouped_data(form_data):
def create_form_params_helper(form_data):
def extract_link_from_header_simple(http_response, header_name, header_value):
def extract_link_from_link_header(http_response, header_name, header_value):
def extract_link_from_set_cookie_header(http_response, header_name, header_value):
def headers_url_generator(resp, fuzzable_req):
def htmldecode(text, use_repr=False):
def urlencode(query, encoding, safe='/<>"\'=:()'):
def to_encodable_string(obj, encoding):
def get_value_by_key(attrs, *args):
def get_request_unique_id(http_response, prepend=None):
def get_webshells(extension, force_extension=False):
def get_shell_code(extension, command, force_extension=False):
def _get_file_list(type_of_list, extension, force_extension=False):
def check_files(file_list):
def read_error_handler(func):
def payload_to_file(payload_name):
def is_payload(function_name):
def exec_payload(shell_obj, payload_name, args=(), use_api=False):
def runnable_payloads(shell_obj):
def get_payload_instance(payload_name, shell_obj):
def get_payload_desc(payload_name):
def get_payload_list():
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def tamper(payload, **kwargs):
def modulePath():
def main():
def main():
def safecharencode(value):
def safechardecode(value, binary=False):
def setNonBlocking(fd):
def _feedTargetsDict(reqFile, addedTargetUrls):
def _loadQueries():
def _setMultipleTargets():
def _adjustLoggingFormatter():
def _setRequestFromFile():
def _doSearch():
def _setDBMSAuthentication():
def _setOS():
def _setDBMS():
def _setTamperingFunctions():
def _setWafFunctions():
def _setDNSCache():
def _setSocketPreConnect():
def _setHTTPHandlers():
def _setSafeVisit():
def _setAuthCred():
def _setHTTPAuthentication():
def _defaultHTTPUserAgent():
def _setHTTPUserAgent():
def _setHTTPReferer():
def _setHTTPHost():
def _setHTTPCookies():
def _setHTTPTimeout():
def _checkDependencies():
def _createTemporaryDirectory():
def _cleanupOptions():
def _cleanupEnvironment():
def _dirtyPatches():
def _purgeOutput():
def _setConfAttributes():
def _setKnowledgeBaseAttributes(flushAll=True):
def _useWizardInterface():
def _saveConfig():
def setVerbosity():
def _normalizeOptions(inputOptions):
def _mergeOptions(inputOptions, overrideOptions):
def init():
def getRevisionNumber():
def getCurrentThreadData():
def getCurrentThreadName():
def paramToDict(place, parameters=None):
def filePathToSafeString(filePath):
def dataToStdout(data, forceOutput=False, bold=False, content_type=None, status=CONTENT_STATUS.IN_PROGRESS):
def readInput(message, default=None, checkBatch=True):
def randomRange(start=0, stop=1000, seed=None):
def randomInt(length=4, seed=None):
def randomStr(length=4, lowercase=False, alphabet=None, seed=None):
def sanitizeStr(value):
def checkFile(filename, raiseOnError=True):
def banner():
def parsePasswordHash(password):
def cleanQuery(query):
def setPaths(rootPath):
def weAreFrozen():
def parseTargetDirect():
def parseTargetUrl():
def expandAsteriskForColumns(expression):
def getLimitRange(count, plusOne=False):
def parseUnionPage(page):
def parseFilePaths(page):
def getLocalIP():
def getRemoteIP():
def getCharset(charsetType=None):
def directoryPath(filepath):
def normalizePath(filepath):
def safeExpandUser(filepath):
def safeStringFormat(format_, params):
def getFilteredPageContent(page, onlyText=True):
def getPageWordSet(page):
def showStaticWords(firstPage, secondPage):
def isWindowsDriveLetterPath(filepath):
def posixToNtSlashes(filepath):
def ntToPosixSlashes(filepath):
def isHexEncodedString(subject):
@cachedmethod DCNL def getConsoleWidth(default=80):
def clearConsoleLine(forceOutput=False):
def parseXmlFile(xmlFile, handler):
def getSQLSnippet(dbms, sfile, **variables):
def readCachedFileContent(filename, mode='rb'):
def readXmlFile(xmlFile):
def stdev(values):
def average(values):
def calculateDeltaSeconds(start):
def initCommonOutputs():
def getFileItems(filename, commentPrefix='#', unicode_=True, lowercase=False, unique=False):
def goGoodSamaritan(prevValue, originalCharset):
def getPartRun(alias=True):
def getUnicode(value, encoding=None, noneToNull=False):
def longestCommonPrefix(*sequences):
def pushValue(value):
def popValue():
def wasLastResponseDBMSError():
def wasLastResponseHTTPError():
def wasLastResponseDelayed():
def adjustTimeDelay(lastQueryDuration, lowerStdLimit):
def getLastRequestHTTPError():
def extractErrorMessage(page):
def findLocalPort(ports):
def findMultipartPostBoundary(post):
def urldecode(value, encoding=None, unsafe=('%%&=;+%s' % CUSTOM_INJECTION_MARK_CHAR), convall=False, plusspace=True):
def urlencode(value, safe='%&=-_', convall=False, limit=False, spaceplus=False):
def runningAsAdmin():
def logHTTPTraffic(requestLogMsg, responseLogMsg):
@cachedmethod DCNL def getPublicTypeMembers(type_, onlyValues=False):
def enumValueToNameLookup(type_, value_):
def extractRegexResult(regex, content, flags=0):
def extractTextTagContent(page):
def trimAlphaNum(value):
def isNumPosStrValue(value):
@cachedmethod DCNL def aliasToDbmsEnum(dbms):
def findDynamicContent(firstPage, secondPage):
def removeDynamicContent(page):
def filterStringValue(value, charRegex, replacement=''):
def filterControlChars(value):
def isDBMSVersionAtLeast(version):
def parseSqliteTableSchema(value):
def getTechniqueData(technique=None):
def isTechniqueAvailable(technique):
def isStackingAvailable():
def isInferenceAvailable():
def setOptimize():
def initTechnique(technique=None):
def arrayizeValue(value):
def unArrayizeValue(value):
def flattenValue(value):
def isListLike(value):
def getSortedInjectionTests():
def filterListValue(value, regex):
def showHttpErrorCodes():
def openFile(filename, mode='r', encoding=UNICODE_ENCODING, errors='replace', buffering=1):
def decodeIntToUnicode(value):
def checkIntegrity():
def unhandledExceptionMessage():
def createGithubIssue(errMsg, excMsg):
def maskSensitiveData(msg):
def listToStrValue(value):
def getExceptionFrameLocals():
def intersect(valueA, valueB, lowerCase=False):
def removeReflectiveValues(content, payload, suppressWarning=False):
def normalizeUnicode(value):
def safeSQLIdentificatorNaming(name, isTable=False):
def unsafeSQLIdentificatorNaming(name):
def isNoneValue(value):
def isNullValue(value):
def expandMnemonics(mnemonics, parser, args):
def safeCSValue(value):
def filterPairValues(values):
def randomizeParameterValue(value):
@cachedmethod DCNL def asciifyUrl(url, forceQuote=False):
def isAdminFromPrivileges(privileges):
def findPageForms(content, url, raise_=False, addToTargets=False):
def checkSameHost(*urls):
def getHostHeader(url):
def checkDeprecatedOptions(args):
def checkSystemEncoding():
def evaluateCode(code, variables=None):
def serializeObject(object_):
def unserializeObject(value):
def resetCounter(technique):
def incrementCounter(technique):
def getCounter(technique):
def applyFunctionRecursively(value, function):
def decodeHexValue(value, raw=False):
def extractExpectedValue(value, expected):
def hashDBWrite(key, value, serialize=False):
def hashDBRetrieve(key, unserialize=False, checkConf=False):
def resetCookieJar(cookieJar):
def decloakToTemp(filename):
def prioritySortColumns(columns):
def getRequestHeader(request, name):
def isNumber(value):
def zeroDepthSearch(expression, value):
def splitFields(fields, delimiter=','):
def pollProcess(process, suppress_errors=False):
def getSafeExString(ex, encoding=None):
def _setRequestParams():
def _setHashDB():
def _resumeHashDBValues():
def _resumeDBMS():
def _resumeOS():
def _setResultsFile():
def _createFilesDir():
def _createDumpDir():
def _createTargetDirs():
def _restoreMergedOptions():
def initTargetEnv():
def readlineAvailable():
def _size_of(object_):
def setDbms(dbms):
def setOs():
def smokeTest():
def liveTest():
def profile(profileOutputFile=None, dotOutputFile=None, imageOutputFile=None):
def base64decode(value):
def base64encode(value):
def base64pickle(value):
def base64unpickle(value, unsafe=False):
def hexdecode(value):
def hexencode(value):
def unicodeencode(value, encoding=None):
def utf8encode(value):
def utf8decode(value):
def htmlunescape(value):
def jsonize(data):
def dejsonize(data):
def cachedmethod(f, cache={}):
def _goInferenceProxy(expression, fromUser=False, batch=False, unpack=True, charsetType=None, firstChar=None, lastChar=None, dump=False):
def _goBooleanProxy(expression):
def _goUnion(expression, unpack=True, dump=False):
def getValue(expression, blind=True, union=True, error=True, time=True, fromUser=False, expected=None, batch=False, unpack=True, resumeValue=True, charsetType=None, firstChar=None, lastChar=None, dump=False, suppressOutput=None, expectingNone=False, safeCharEncode=True):
def forgeHeaders(items=None):
def parseResponse(page, headers):
@cachedmethod DCNL def checkCharEncoding(encoding, warn=True):
def getHeuristicCharEncoding(page):
def decodePage(page, contentEncoding, contentType):
def headersParser(headers):
def configFileProxy(section, option, datatype):
def configFileParser(configFile):
def bannerParser(banner):
def cmdLineParser(argv=None):
def htmlParser(page):
def _findUnionCharCount(comment, place, parameter, value, prefix, suffix, where=PAYLOAD.WHERE.ORIGINAL):
def _unionTestByCharBruteforce(comment, place, parameter, value, prefix, suffix):
def unionTest(comment, place, parameter, value, prefix, suffix):
def unionUse(expression, unpack=True, dump=False):
def dnsUse(payload, expression):
def bisection(payload, expression, length=None, charsetType=None, firstChar=None, lastChar=None, dump=False):
def queryOutputLength(expression, payload):
def _errorReplaceChars(value):
def _formatPartialContent(value):
def errorUse(expression, dump=False):
def heuristicCheckDbms(injection):
def checkFalsePositives(injection):
def checkSuhosinPatch(injection):
def checkDynParam(place, parameter, value):
def checkDynamicContent(firstPage, secondPage):
def checkStability():
def checkWaf():
def checkNullConnection():
def action():
def _selectInjection():
def start():
def setHandler():
def purge(directory):
def _search(dork):
def mysql_passwd(password, uppercase=True):
def mysql_old_passwd(password, uppercase=True):
def postgres_passwd(password, username, uppercase=False):
def mssql_passwd(password, salt, uppercase=False):
def mssql_old_passwd(password, salt, uppercase=True):
def mssql_new_passwd(password, salt, uppercase=False):
def oracle_passwd(password, salt, uppercase=True):
def oracle_old_passwd(password, username, uppercase=True):
def md5_generic_passwd(password, uppercase=False):
def sha1_generic_passwd(password, uppercase=False):
def sha224_generic_passwd(password, uppercase=False):
def sha384_generic_passwd(password, uppercase=False):
def sha512_generic_passwd(password, uppercase=False):
def crypt_generic_passwd(password, salt, uppercase=False):
def wordpress_passwd(password, salt, count, prefix, uppercase=False):
@hook('after_request') DCNL def security_headers(json_header=True):
@get('/task/new') DCNL def task_new():
@get('/task/<taskid>/delete') DCNL def task_delete(taskid):
@get('/admin/<taskid>/list') DCNL def task_list(taskid=None):
@get('/admin/<taskid>/flush') DCNL def task_flush(taskid):
@get('/option/<taskid>/list') DCNL def option_list(taskid):
@post('/option/<taskid>/get') DCNL def option_get(taskid):
@post('/option/<taskid>/set') DCNL def option_set(taskid):
@post('/scan/<taskid>/start') DCNL def scan_start(taskid):
@get('/scan/<taskid>/stop') DCNL def scan_stop(taskid):
@get('/scan/<taskid>/kill') DCNL def scan_kill(taskid):
@get('/scan/<taskid>/status') DCNL def scan_status(taskid):
@get('/scan/<taskid>/data') DCNL def scan_data(taskid):
@get('/scan/<taskid>/log/<start>/<end>') DCNL def scan_log_limited(taskid, start, end):
@get('/scan/<taskid>/log') DCNL def scan_log(taskid):
@get('/download/<taskid>/<target>/<filename:path>') DCNL def download(taskid, target, filename):
def server(host=RESTAPI_DEFAULT_ADDRESS, port=RESTAPI_DEFAULT_PORT, adapter=RESTAPI_DEFAULT_ADAPTER):
def client(host=RESTAPI_DEFAULT_ADDRESS, port=RESTAPI_DEFAULT_PORT):
def _match_css_class(str):
def buildTagMap(default, *args):
def _HPERM_OP(a):
def _PERM_OP(a, b, n, m):
def _set_key(password):
def _body(ks, E0, E1):
def crypt(password, salt):
def _test():
def set_default_proxy(proxy_type=None, addr=None, port=None, rdns=True, username=None, password=None):
def get_default_proxy():
def wrap_module(module):
def create_connection(dest_pair, proxy_type=None, proxy_addr=None, proxy_port=None, proxy_rdns=True, proxy_username=None, proxy_password=None, timeout=None, source_address=None, socket_options=None):
def urlencode(query, doseq=False):
def choose_boundary():
def ParseResponseEx(response, select_default=False, form_parser_class=FormParser, request_class=urllib2.Request, entitydefs=None, encoding=DEFAULT_ENCODING, _urljoin=urlparse.urljoin, _urlparse=urlparse.urlparse, _urlunparse=urlparse.urlunparse):
def ParseFileEx(file, base_uri, select_default=False, form_parser_class=FormParser, request_class=urllib2.Request, entitydefs=None, encoding=DEFAULT_ENCODING, _urljoin=urlparse.urljoin, _urlparse=urlparse.urlparse, _urlunparse=urlparse.urlunparse):
def ParseResponse(response, *args, **kwds):
def ParseFile(file, base_uri, *args, **kwds):
def colored(text, color=None, on_color=None, attrs=None):
def cprint(text, color=None, on_color=None, attrs=None, **kwargs):
def abstractmethod(funcobj):
def _re_flatten(p):
def abort(code=500, text='Unknown DCSP Error.'):
def redirect(url, code=None):
def _file_iter_range(fp, offset, bytes, maxread=(1024 * 1024)):
def static_file(filename, root, mimetype='auto', download=False, charset='UTF-8'):
def debug(mode=True):
def parse_date(ims):
def parse_auth(header):
def parse_range_header(header, maxlen=0):
def _lscmp(a, b):
def cookie_encode(data, key):
def cookie_decode(data, key):
def cookie_is_encoded(data):
def html_escape(string):
def html_quote(string):
def yieldroutes(func):
def path_shift(script_name, path_info, shift=1):
def auth_basic(check, realm='private', text='Access DCSP denied'):
def make_default_app_wrapper(name):
def load(target, **namespace):
def load_app(target):
def run(app=None, server='wsgiref', host='127.0.0.1', port=8080, interval=1, reloader=False, quiet=False, plugins=None, debug=None, config=None, **kargs):
def template(*args, **kwargs):
def view(tpl_name, **defaults):
def description_of(lines, name=u'stdin'):
def main(argv=None):
def get_long_description():
def catch_ioerror(meth):
def get_long_description():
def render_markdown(markdown_text):
def request_dump(_id):
def response_dump(_id):
def xml_str(s, replace_invalid=True):
def validate_xml(content, schema_content):
@attr('root') DCNL def onlyroot(meth):
def clear_wivet():
def extract_all_stats():
def get_long_description():
def luhnCheck(value):
def get_long_description():
def longest_cmp(a, b):
def get_long_description():
def get_long_description():
def get_long_description():
def get_seeds():
def match_hostname(cert, hostname):
def get_long_description():
def get_long_description():
def get_users_from_csv(ident):
def get_long_description():
def convert_xml_to_csv():
def start_container(tag, command=DOCKER_RUN):
def stop_container(container_id):
def create_volumes():
def connect_to_container(container_id, cmd, extra_ssh_flags=()):
def restore_file_ownership():
def _chown(path, uid, gid):
def has_permission(permission, context, request):
def authenticated_userid(request):
def unauthenticated_userid(request):
def effective_principals(request):
def remember(request, userid=_marker, **kw):
def forget(request):
def principals_allowed_by_permission(context, permission):
def view_execution_permitted(context, request, name=''):
def get_current_request():
def get_current_registry(context=None):
def render_view_to_response(context, request, name='', secure=True):
def render_view_to_iterable(context, request, name='', secure=True):
def render_view(context, request, name='', secure=True):
def exception_response(status_code, **kw):
def _get_response_factory(registry):
def asset_spec_from_abspath(abspath, package):
def get_root(app, request=None):
def prepare(request=None, registry=None):
def _make_request(path, registry=None):
def strings_differ(string1, string2, compare_digest=compare_digest):
def object_description(object):
def viewdefaults(wrapped):
def action_method(wrapped):
def get_callable_name(name):
@contextlib.contextmanager DCNL def hide_attrs(obj, *attrs):
def is_same_domain(host, pattern):
def package_name(pkg_or_module):
def package_of(pkg_or_module):
def route_view(request):
def global_view(request):
def global2_view(request):
def route2_view(request):
def exception_view(request):
def exception2_view(request):
def erroneous_view(request):
def erroneous_sub_view(request):
def rdf_view(request):
def juri_view(request):
def fixture_view(context, request):
def erroneous_view(context, request):
def exception_view(context, request):
def protected_view(context, request):
@view_config(for_=INothing) DCNL @wsgiapp DCNL def wsgiapptest(environ, start_response):
def default_locale_negotiator(request):
def negotiate_locale_name(request):
def get_locale_name(request):
def make_localizer(current_locale_name, translation_directories):
def get_localizer(request):
def urlencode(query, doseq=True, quote_via=quote_plus):
def find_root(resource):
def find_resource(resource, path):
def find_interface(resource, class_or_interface):
def resource_path(resource, *elements):
def traverse(resource, path):
def resource_path_tuple(resource, *elements):
def _resource_path_list(resource, *elements):
def virtual_root(resource, request):
def traversal_path(path):
@lru_cache(1000) DCNL def traversal_path_info(path):
def resolveConflicts(actions, state=None):
def normalize_actions(actions):
def Settings(d=None, _environ_=os.environ, **kw):
def asbool(s):
def aslist(value, flatten=True):
def manage_accessed(wrapped):
def manage_changed(wrapped):
def signed_serialize(data, secret):
def signed_deserialize(serialized, secret, hmac=hmac):
def BaseCookieSessionFactory(serializer, cookie_name='session', max_age=None, path='/', domain=None, secure=False, httponly=False, timeout=1200, reissue_time=0, set_on_exception=True):
def UnencryptedCookieSessionFactoryConfig(secret, timeout=1200, cookie_name='session', cookie_max_age=None, cookie_path='/', cookie_domain=None, cookie_secure=False, cookie_httponly=False, cookie_on_exception=True, signed_serialize=signed_serialize, signed_deserialize=signed_deserialize):
def SignedCookieSessionFactory(secret, cookie_name='session', max_age=None, path='/', domain=None, secure=False, httponly=False, set_on_exception=True, timeout=1200, reissue_time=0, hashalg='sha512', salt='pyramid.session.', serializer=None):
def setUp(registry=None, request=None, hook_zca=True, autocommit=True, settings=None, package=None):
def tearDown(unhook_zca=True):
def cleanUp(*arg, **kw):
@contextmanager DCNL def testConfig(registry=None, request=None, hook_zca=True, autocommit=True, settings=None):
def parse_vars(args):
def get_config_loader(config_uri):
def cherrypy_server_runner(app, global_conf=None, host='127.0.0.1', port=None, ssl_pem=None, protocol_version=None, numthreads=None, server_name=None, max=None, request_queue_size=None, timeout=None):
def inside(resource1, resource2):
def lineage(resource):
def main(global_config, **settings):
def main(global_config, **settings):
def copy_dir(source, dest, vars, verbosity, simulate, indent=0, sub_vars=True, interactive=False, overwrite=True, template_renderer=None, out_=sys.stdout):
def should_skip_file(name):
def skip_template(condition=True, *args):
def main(global_config, **settings):
def wsgiapp(wrapped):
def wsgiapp2(wrapped):
def setup_logging(config_uri, global_conf=None):
def get_app(config_uri, name=None, options=None):
def get_appsettings(config_uri, name=None, options=None):
def bootstrap(config_uri, request=None, options=None):
def render(renderer_name, value, request=None, package=None):
def render_to_response(renderer_name, value, request=None, package=None, response=None):
def get_renderer(renderer_name, package=None):
def parse_ticket(secret, ticket, ip, hashalg='md5'):
def extract_http_basic_credentials(request):
def get_csrf_token(request):
def new_csrf_token(request):
def check_csrf_token(request, token='csrf_token', header='X-CSRF-Token', raises=True):
def check_csrf_origin(request, trusted_origins=None, raises=True):
def excview_tween_factory(handler, registry):
def parse_url_overrides(request, kw):
def route_url(route_name, request, *elements, **kw):
def route_path(route_name, request, *elements, **kw):
def resource_url(resource, request, *elements, **kw):
def static_url(path, request, **kw):
def static_path(path, request, **kw):
def current_route_url(request, *elements, **kw):
def current_route_path(request, *elements, **kw):
def undefer(v):
def text_(s, encoding='latin-1', errors='strict'):
def bytes_(s, encoding='latin-1', errors='strict'):
def is_unbound_method(fn):
def apply_request_extensions(request, extensions=None):
def main(global_config, **settings):
def main(global_config, **settings):
def main(global_config, **settings):
def main(global_config, **settings):
def main(global_config, **settings):
def main(global_config, **settings):
def get_tm_session(session_factory, transaction_manager):
def includeme(config):
def main(global_config, **settings):
def get_tm_session(session_factory, transaction_manager):
def includeme(config):
def main(global_config, **settings):
def get_tm_session(session_factory, transaction_manager):
def includeme(config):
def main(global_config, **settings):
def get_tm_session(session_factory, transaction_manager):
def includeme(config):
def main(global_config, **settings):
def get_tm_session(session_factory, transaction_manager):
def includeme(config):
def main(global_config, **settings):
def get_tm_session(session_factory, transaction_manager):
def includeme(config):
def main(global_config, **settings):
def get_tm_session(session_factory, transaction_manager):
def includeme(config):
def main(global_config, **settings):
def app_role(role, rawtext, text, lineno, inliner, options={}, content=[]):
def resig(app, what, name, obj, options, signature, return_annotation):
def main(global_config, **settings):
def get_tm_session(session_factory, transaction_manager):
def includeme(config):
def main(global_config, **settings):
def main(global_config, **settings):
def main(global_config, **settings):
def main(global_config, **settings):
def main(global_config, **settings):
def get_cookie_opener(gs_username, gs_token, gs_toolname=None):
def get_cookie_opener(gs_username, gs_token, gs_toolname=None):
def get_cookie_opener(gs_username, gs_token, gs_toolname=None):
def all_bases_valid(seq):
def safe_bed_file(infile):
def safe_dict(d):
def output_adjacent_tmpdir(output_path):
def make_fasta(rec):
def exec_before_job(app, inp_data, out_data, param_dict, tool=None):
def exec_after_process(app, inp_data, out_data, param_dict, tool=None, stdout=None, stderr=None):
def check_expression(text):
def load_scores_wiggle(fname, chrom_buffer_size=3):
def load_scores_ba_dir(dir):
def read_bin_fragment(struct_def, fileh, offset=0, data=None, byte_padding=None):
def check_magic(magic):
def check_version(version):
def read_header(fileh):
def read_sequence(header, fileh, fposition):
def sequences(fileh, header):
def remove_last_xmltag_in_file(fname, tag=None):
def create_basic_xml_info(readname, fname):
def create_clip_xml_info(readlen, adapl, adapr, quall, qualr):
def create_xml_for_unpaired_read(data, fname):
def get_read_data(data):
def extract_read_info(data, fname):
def write_sequence(name, seq, qual, seq_fh, qual_fh):
def write_unpaired_read(data, sff_fh, seq_fh, qual_fh, xml_fh):
def reverse_complement(seq):
def mask_sequence(seq, maskchar, fpos, tpos):
def fragment_sequences(sequence, qualities, splitchar):
def calc_subseq_boundaries(maskedseq, maskchar):
def correct_for_smallhits(maskedseq, maskchar, linkername):
def split_paired_end(data, sff_fh, seq_fh, qual_fh, xml_fh):
def extract_reads_from_sff(config, sff_files):
def parse_extra_info(info):
def return_merged_clips(data):
def sequence_case(data):
def clip_read(data):
def tests_for_ssaha():
def load_linker_sequences(linker_fname):
def launch_ssaha(linker_fname, query_fname, output_fh):
def read_ssaha_data(ssahadata_fh):
def read_config():
def print_tab_sep(out_file, *args):
def get_bed_line(chrom, name, strand, blocks):
def check_simple_name(text):
def check_expression(text):
def check_expression(text):
def parse_gff_attributes(attr_str):
def print_tab_sep(out_file, *args):
def parse_spec(spec):
def print_tab_sep(out_file, *args):
def main(args):
def build_request_with_data(url, data, api_key, method):
def delete(api_key, url, data, return_formatted=True):
def display(url, api_key=None, return_formatted=True):
def get(url, api_key=None):
def get_api_url(base, parts=[], params=None):
def get_latest_downloadable_changeset_revision_via_api(url, name, owner):
def get_repository_dict(url, repository_dict):
def json_from_url(url):
def make_url(url, api_key=None, args=None):
def post(url, data, api_key=None):
def put(url, data, api_key=None):
def submit(url, data, api_key=None, return_formatted=True):
def update(api_key, url, data, return_formatted=True):
def main(options):
def main():
def send_mail_to_owner(app, name, owner, email, repositories_deprecated, days=14):
def validate_email(email):
def validate_publicname(username):
def get_versions(app, item):
def get_approved_tools(app, sa_session):
def get_repository_by_name(app, sa_session, repo_name):
def build_index(sa_session, whoosh_index_dir, path_to_repositories):
def get_repos(sa_session, path_to_repositories):
def merge():
def printquery(statement, bind=None):
def main():
def _purge_folder(folder, app, remove_from_disk, info_only=False):
def main():
def next_weekday(d, weekday):
def main(options):
def make_url(api_key, url, args=None):
def get(api_key, url):
def post(api_key, url, data):
def put(api_key, url, data):
def __del(api_key, url, data):
def display(api_key, url, return_formatted=True):
def submit(api_key, url, data, return_formatted=True):
def update(api_key, url, data, return_formatted=True):
def delete(api_key, url, data, return_formatted=True):
def encode_id(config_id_secret, obj_id):
def main(options):
def http_transfer(transfer_job):
def scp_transfer(transfer_job):
def __main__():
def find_test_driver():
def main(argv=None):
def _build_dependency_manager_no_config(kwargs):
def main(argv=None):
def main(opts, session, model):
def _get_dataset_metadata(ldda):
def _get_folder_info(folder):
def isList(l):
def isString(s):
def buildTagMap(default, *args):
def main():
def build_repository_type_select_field(trans, repository=None, name='repository_type'):
def fetch_tool_versions(app, tool_shed_repository):
def build_changeset_revision_select_field(trans, repository, selected_value=None, add_id_to_name=True, downloadable=False, reviewed=False, not_reviewed=False):
def filter_by_latest_downloadable_changeset_revision_that_has_missing_tool_test_components(trans, repository):
def filter_by_latest_metadata_changeset_revision_that_has_invalid_tools(trans, repository):
def get_latest_downloadable_repository_metadata(trans, repository):
def get_latest_downloadable_repository_metadata_if_it_includes_tools(trans, repository):
def get_latest_repository_metadata(trans, repository):
def get_latest_repository_metadata_if_it_includes_invalid_tools(trans, repository):
def create_element(tag, attributes=None, sub_elements=None):
def indent(elem, level=0):
def parse_xml(file_name):
def escape(string):
def build_tool_dependencies_select_field(app, tool_shed_repository, name, multiple=True, display='checkboxes', uninstalled_only=False):
def create_or_update_tool_dependency(app, tool_shed_repository, name, version, type, status, set_status=True):
def create_tool_dependency_objects(app, tool_shed_repository, relative_install_dir, set_status=True):
def get_download_url_for_platform(url_templates, platform_info_dict):
def get_platform_info_dict():
def get_tool_dependency(app, id):
def parse_package_elem(package_elem, platform_info_dict=None, include_after_install_actions=True):
def remove_tool_dependency(app, tool_dependency):
def get_latest_repository_metadata(app, decoded_repository_id, downloadable=False):
def get_metadata_changeset_revisions(repository, repo):
def get_metadata_revisions(repository, repo, sort_revisions=True, reverse=False, downloadable=True):
def get_next_downloadable_changeset_revision(repository, repo, after_changeset_revision):
def get_previous_metadata_changeset_revision(repository, repo, before_changeset_revision, downloadable=True):
def get_repository_dependencies(app, metadata_id):
def get_repository_dependency_tups_from_repository_metadata(app, repository_metadata, deprecated_only=False):
def get_repository_metadata_by_changeset_revision(app, id, changeset_revision):
def get_repository_metadata_by_id(app, id):
def get_repository_metadata_by_repository_id_changeset_revision(app, id, changeset_revision, metadata_only=False):
def get_updated_changeset_revisions(app, name, owner, changeset_revision):
def get_updated_changeset_revisions_from_tool_shed(app, tool_shed_url, name, owner, changeset_revision):
def is_malicious(app, id, changeset_revision, **kwd):
def generate_repository_dependencies_key_for_repository(toolshed_base_url, repository_name, repository_owner, changeset_revision, prior_installation_required, only_if_compiling_contained_td):
def get_components_from_key(key):
def archive_repository_revision(app, repository, archive_dir, changeset_revision):
def bundle_to_json(fh):
def clone_repository(repository_clone_url, repository_file_dir, ctx_rev):
def copy_file_from_manifest(repo, ctx, filename, dir):
def get_changectx_for_changeset(repo, changeset_revision, **kwd):
def get_config(config_file, repo, ctx, dir):
def get_configured_ui():
def get_ctx_file_path_from_manifest(filename, repo, changeset_revision):
def get_file_context_from_ctx(ctx, filename):
def get_mercurial_default_options_dict(command, command_table=None, **kwd):
def get_named_tmpfile_from_ctx(ctx, filename, dir):
def get_readable_ctx_date(ctx):
def get_repository_heads(repo):
def get_reversed_changelog_changesets(repo):
def get_revision_label(app, repository, changeset_revision, include_date=True, include_hash=True):
def get_rev_label_from_changeset_revision(repo, changeset_revision, include_date=True, include_hash=True):
def pull_repository(repo, repository_clone_url, ctx_rev):
def reversed_lower_upper_bounded_changelog(repo, excluded_lower_bounds_changeset_revision, included_upper_bounds_changeset_revision):
def reversed_upper_bounded_changelog(repo, included_upper_bounds_changeset_revision):
def unpack_chunks(hg_unbundle10_obj):
def unpack_groups(hg_unbundle10_obj):
def unpack_patches(hg_unbundle10_obj, remaining):
def update_repository(repo, ctx_rev=None):
def create_or_update_tool_shed_repository(app, name, description, installed_changeset_revision, ctx_rev, repository_clone_url, metadata_dict, status, current_changeset_revision=None, owner='', dist_to_shed=False):
def create_repo_info_dict(app, repository_clone_url, changeset_revision, ctx_rev, repository_owner, repository_name=None, repository=None, repository_metadata=None, tool_dependencies=None, repository_dependencies=None):
def create_repository_admin_role(app, repository):
def create_repository(app, name, type, description, long_description, user_id, category_ids=[], remote_repository_url=None, homepage_url=None):
def extract_components_from_tuple(repository_components_tuple):
def generate_sharable_link_for_repository_in_tool_shed(repository, changeset_revision=None):
def generate_tool_shed_repository_install_dir(repository_clone_url, changeset_revision):
def get_absolute_path_to_file_in_repository(repo_files_dir, file_name):
def get_installed_repository(app, tool_shed=None, name=None, owner=None, changeset_revision=None, installed_changeset_revision=None, repository_id=None, refresh=False):
def get_installed_tool_shed_repository(app, id):
def get_prior_import_or_install_required_dict(app, tsr_ids, repo_info_dicts):
def get_repo_info_tuple_contents(repo_info_tuple):
def get_repository_and_repository_dependencies_from_repo_info_dict(app, repo_info_dict):
def get_repository_by_id(app, id):
def get_repository_by_name_and_owner(app, name, owner):
def get_repository_by_name(app, name):
def get_repository_dependency_types(repository_dependencies):
def get_repository_for_dependency_relationship(app, tool_shed, name, owner, changeset_revision):
def get_repository_ids_requiring_prior_import_or_install(app, tsr_ids, repository_dependencies):
def get_repository_in_tool_shed(app, id):
def get_repository_owner(cleaned_repository_url):
def get_repository_owner_from_clone_url(repository_clone_url):
def get_role_by_id(app, role_id):
def get_tool_shed_repository_by_id(app, repository_id):
def get_tool_shed_repository_status_label(app, tool_shed_repository=None, name=None, owner=None, changeset_revision=None, repository_clone_url=None):
def get_tool_shed_status_for_installed_repository(app, repository):
def is_tool_shed_client(app):
def repository_was_previously_installed(app, tool_shed_url, repository_name, repo_info_tuple, from_tip=False):
def update_repository(app, trans, id, **kwds):
def validate_repository_name(app, name, user):
def build_shed_tool_conf_select_field(app):
def build_tool_panel_section_select_field(app):
def copy_sample_file(app, filename, dest_path=None):
def copy_sample_files(app, sample_files, tool_path=None, sample_files_copied=None, dest_path=None):
def get_headers(fname, sep, count=60, is_multi_byte=False):
def handle_missing_index_file(app, tool_path, sample_files, repository_tools_tups, sample_files_copied):
def is_column_based(fname, sep=' DCTB ', skip=0, is_multi_byte=False):
def is_data_index_sample_file(file_path):
def new_state(trans, tool, invalid=False):
def build_readme_files_dict(app, repository, changeset_revision, metadata, tool_path=None):
def get_readme_files_dict_for_display(app, tool_shed_url, repo_info_dict):
def get_readme_file_names(repository_name):
def evaluate_template(text, install_environment):
def get_env_var_values(install_environment):
def remove_dir(dir):
def size_string(raw_text, size=MAX_DISPLAY_SIZE):
def strip_path(fpath):
def to_html_string(text):
def generate_clone_url_for_installed_repository(app, repository):
def generate_clone_url_for_repository_in_tool_shed(user, repository):
def generate_clone_url_from_repo_info_tup(app, repo_info_tup):
def get_non_shed_tool_panel_configs(app):
def get_protocol_from_tool_shed_url(tool_shed_url):
def get_tool_shed_url_from_tool_shed_registry(app, tool_shed):
def get_user_by_username(app, username):
def handle_tool_shed_url_protocol(app, shed_url):
def remove_port_from_tool_shed_url(tool_shed_url):
def remove_protocol_and_port_from_tool_shed_url(tool_shed_url):
def remove_protocol_and_user_from_clone_url(repository_clone_url):
def remove_protocol_from_tool_shed_url(tool_shed_url):
def can_browse_repository_reviews(app, user, repository):
def changeset_revision_reviewed_by_user(user, repository, changeset_revision):
def get_component(app, id):
def get_component_review(app, id):
def get_component_by_name(app, name):
def get_component_review_by_repository_review_id_component_id(app, repository_review_id, component_id):
def get_previous_repository_reviews(app, repository, changeset_revision):
def get_review(app, id):
def get_review_by_repository_id_changeset_revision_user_id(app, repository_id, changeset_revision, user_id):
def get_reviews_by_repository_id_changeset_revision(app, repository_id, changeset_revision):
def has_previous_repository_reviews(app, repository, changeset_revision):
def generate_workflow_image(trans, workflow_name, repository_metadata_id=None, repository_id=None):
def get_workflow_from_dict(trans, workflow_dict, tools_metadata, repository_id, changeset_revision):
def import_workflow(trans, repository, workflow_name):
def save_workflow(trans, workflow, workflow_dict=None):
def get_user(trans, user_id):
def get_role(trans, id):
def get_group(trans, id):
def check_file_contents_for_email_alerts(app):
def get_change_lines_in_file_for_tag(tag, change_dict):
def can_eliminate_repository_dependency(metadata_dict, tool_shed_url, name, owner):
def can_eliminate_tool_dependency(metadata_dict, name, dependency_type, version):
def clean_dependency_relationships(trans, metadata_dict, tool_shed_repository, tool_shed_url):
def generate_tool_guid(repository_clone_url, tool):
def get_categories(app):
def get_category(app, id):
def get_category_by_name(app, name):
def get_tool_shed_repo_requirements(app, tool_shed_url, repositories=None, repo_info_dicts=None):
def get_ctx_rev(app, tool_shed_url, name, owner, changeset_revision):
def get_next_prior_import_or_install_required_dict_entry(prior_required_dict, processed_tsr_ids):
def get_repository_categories(app, id):
def get_repository_file_contents(app, file_path, repository_id, is_admin=False):
def get_repository_files(folder_path):
def get_repository_type_from_tool_shed(app, tool_shed_url, name, owner):
def get_tool_dependency_definition_metadata_from_tool_shed(app, tool_shed_url, name, owner):
def get_tool_panel_config_tool_path_install_dir(app, repository):
def get_tool_path_by_shed_tool_conf_filename(app, shed_tool_conf):
def get_user(app, id):
def handle_email_alerts(app, host, repository, content_alert_str='', new_repo_alert=False, admin_only=False):
def is_path_browsable(app, path, repository_id, is_admin=False):
def is_path_within_dependency_dir(app, path):
def is_path_within_repo(app, path, repository_id):
def open_repository_files_folder(app, folder_path, repository_id, is_admin=False):
def set_image_paths(app, encoded_repository_id, text):
def tool_shed_is_this_tool_shed(toolshed_base_url):
def parse_mime_type(mime_type):
def parse_media_range(range):
def fitness_and_quality_parsed(mime_type, parsed_ranges):
def quality_parsed(mime_type, parsed_ranges):
def quality(mime_type, ranges):
def best_match(supported, header):
def security_check(trans, item, check_ownership=False, check_accessible=False):
def get_class(class_name):
def get_object(trans, id, class_name, check_ownership=False, check_accessible=False, deleted=None):
def munge_lists(listA, listB):
def parse_citation(elem, directory, citation_manager):
def api_payload_to_create_params(payload):
def validate_input_element_identifiers(element_identifiers):
def build_container_interfaces(containers_config_file, containers_conf=None):
def parse_containers_config(containers_config_file):
def visit_input_values(inputs, input_values, callback, name_prefix='', label_prefix='', parent_prefix='', context=None, no_replacement_value=REPLACE_ON_TRUTHY):
def check_param(trans, param, incoming_value, param_values):
def params_to_strings(params, param_values, app, nested=False):
def params_from_strings(params, param_values, app, ignore_errors=False):
def params_to_incoming(incoming, inputs, input_values, app, name_prefix=''):
def update_param(prefixed_name, input_values, new_value):
def populate_state(request_context, inputs, incoming, state, errors={}, prefix='', context=None, check=True):
def _get_incoming_value(incoming, key, default):
def expand_workflow_inputs(inputs):
def expand_meta_parameters(trans, tool, incoming):
def get_suite():
def make_dict_copy(from_dict):
def _new_hda(app, sa_session, ext, designation, visible, dbkey, permissions=UNSET):
def load_exception_handler(path, exc_info):
def find_possible_tools_from_path(path, recursive=False, enable_beta_formats=False):
def load_tool_sources_from_path(path, load_exception_handler=load_exception_handler, recursive=False, register_load_errors=False):
def load_tool_elements_from_path(path, load_exception_handler=load_exception_handler, recursive=False, register_load_errors=False):
def is_tool_load_error(obj):
def looks_like_a_tool(path_or_uri_like, invalid_names=[], enable_beta_formats=False):
def looks_like_a_tool_xml(path):
def is_a_yaml_with_class(path, classes):
def looks_like_a_tool_yaml(path):
def looks_like_a_cwl_artifact(path, classes=None):
def looks_like_a_tool_cwl(path):
def resolved_path(path_or_uri_like):
def get_dataset_filename(name, ext, hid):
def create_archive(history_attrs_file, datasets_attrs_file, jobs_attrs_file, out_file, gzip=False):
def url_to_file(url, dest_file):
def check_archive(archive_file, dest_dir):
def unpack_archive(archive_file, dest_dir):
@nottest DCNL def parse_tests(tool, tests_source):
def lint_general(tool_source, lint_ctx):
def lint_citations(tool_xml, lint_ctx):
def lint_output(tool_xml, lint_ctx):
def lint_help(tool_xml, lint_ctx):
def rst_invalid(text):
def lint_command(tool_xml, lint_ctx):
def get_command(tool_xml):
def lint_inputs(tool_xml, lint_ctx):
def lint_repeats(tool_xml, lint_ctx):
def parse_requirements_from_xml(xml_root):
def ensure_installed(installable_context, install_func, auto_init):
def find_conda_prefix(conda_prefix=None):
def hash_conda_packages(conda_packages, conda_target=None):
def install_conda_target(conda_target, conda_context=None, skip_environment=False):
def best_search_result(conda_target, conda_context=None, channels_override=None, offline=False):
def is_target_available(conda_target, conda_context=None, channels_override=None):
def build_isolated_environment(conda_packages, path=None, copy=False, conda_context=None, quiet=False):
def main(argv=None):
def requirements_to_mulled_targets(requirements):
def quay_versions(namespace, pkg_name):
def mulled_tags_for(namespace, image, tag_prefix=None):
def split_tag(tag):
def version_sorted(elements):
def build_target(package_name, version=None, build=None, tag=None):
def v1_image_name(targets, image_build=None, name_override=None):
def v2_image_name(targets, image_build=None, name_override=None):
def arg_parser(argv, globals):
def get_tests(args, pkg_path):
def get_pkg_name(args, pkg_path):
def get_affected_packages(args):
def conda_versions(pkg_name, file_name):
def add_build_arguments(parser):
def main(argv=None):
def main(argv=None):
def generate_targets(target_source):
def _new_versions(quay, conda):
def run_channel(args, build_last_n_versions=1):
def get_pkg_names(args):
def add_channel_arguments(parser):
def main(argv=None):
def command_list(command, command_args=[], **kwds):
def command_shell(command, command_args=[], **kwds):
def _docker_prefix(docker_cmd=DEFAULT_DOCKER_COMMAND, sudo=DEFAULT_SUDO, sudo_cmd=DEFAULT_SUDO_COMMAND, host=DEFAULT_HOST, **kwds):
def _parse(data, cfg):
def _render_jinja2(recipe_dir):
def raw_metadata(recipe_dir):
def preprocess_volumes(volumes_raw_str, container_type):
def redirecting_io(sys=_sys):
def redirect_aware_commmunicate(p, sys=_sys):
def shell(cmds, env=None, **kwds):
def shell_process(cmds, env=None, **kwds):
def execute(cmds):
def argv_to_str(command_argv, quote=True):
def download_command(url, to=STDOUT_INDICATOR, quote_url=False):
def _singularity_prefix(singularity_cmd=DEFAULT_SINGULARITY_COMMAND, sudo=DEFAULT_SUDO, sudo_cmd=DEFAULT_SUDO_COMMAND, **kwds):
def get_tool_source(config_file=None, xml_tree=None, enable_beta_formats=True, tool_location_fetcher=None):
def get_input_source(content):
def ensure_cwltool_available():
def to_cwl_job(tool, param_dict, local_working_directory):
def to_galaxy_parameters(tool, as_dict):
def tool_proxy(tool_path, strict_cwl_validation=True):
def _filter_for_panel(item, item_type, filters, context):
def get_observer_class(config_value, default, monitor_what_str):
def tool_tag_manager(app):
def parse_cols_arg(cols):
def execute(trans, tool, param_combinations, history, rerun_remap_job_id=None, collection_info=None, workflow_invocation_uuid=None):
def determine_output_format(output, parameter_context, input_datasets, input_dataset_collections, random_input_ext):
def persist_uploads(params):
def get_precreated_datasets(trans, params, data_obj, controller='root'):
def get_precreated_dataset(precreated_datasets, name):
def create_paramfile(trans, uploaded_datasets):
def create_job(trans, params, tool, json_file_path, data_list, folder=None, history=None, job_params=None):
def is_datasource(tool_xml):
def verify(item_label, output_content, attributes, filename=None, get_filename=None, keep_outputs_dir=None, verify_extra_files=None):
def make_temp_fname(fname=None):
def check_command(command, description):
def files_diff(file1, file2, attributes=None):
def files_re_match(file1, file2, attributes=None):
def files_re_match_multiline(file1, file2, attributes=None):
def files_contains(file1, file2, attributes=None):
def verify_assertions(data, assertion_description_list):
def assert_is_valid_xml(output):
def assert_has_element_with_path(output, path):
def assert_has_n_elements_with_path(output, path, n):
def assert_element_text_matches(output, path, expression):
def assert_element_text_is(output, path, text):
def assert_attribute_matches(output, path, attribute, expression):
def assert_attribute_is(output, path, attribute, text):
def assert_element_text(output, path, verify_assertions_function, children):
def assert_has_text(output, text):
def assert_not_has_text(output, text):
def assert_has_line(output, line):
def assert_has_text_matching(output, expression):
def assert_has_line_matching(output, expression):
def assert_has_n_columns(output, n, sep=' DCTB '):
def resolve_path(path, root):
def get_database_engine_options(kwargs):
def get_permitted_actions(filter=None):
def add_ui_controllers(webapp, app):
def app_factory(global_conf, **kwargs):
def wrap_in_middleware(app, global_conf, application_stack, **local_conf):
def _map_redirects(mapper):
def sort_by_attr(seq, attr):
def init(file_path, url, engine_options={}, create_tables=False):
def create_or_verify_database(url, engine_options={}):
def build_template_error_formatters():
def wrap_if_allowed_or_fail(app, stack, wrap, name=None, args=None, kwargs=None):
def wrap_if_allowed(app, stack, wrap, name=None, args=None, kwargs=None):
def _split_inputs(kwargs):
def get_user(trans, user_id):
def get_role(trans, id):
def get_group(trans, id):
def get_quota(trans, id):
def map_library_datasets_to_lddas(trans, lib_datasets):
def datasets_for_lddas(trans, lddas):
def get_containing_library_from_library_dataset(trans, library_dataset):
def sort_by_attr(seq, attr):
def lucene_search(trans, cntrller, search_term, search_url, **kwd):
def whoosh_search(trans, cntrller, search_term, **kwd):
def paste_app_factory(global_conf, **kwargs):
def wrap_in_middleware(app, global_conf, application_stack, **local_conf):
def resolve_path(path, root):
def get_database_engine_options(kwargs):
def configure_logging(config):
def sorter(default_sort_id, kwd):
def get_monitor_id(trans, monitor_email):
def nice_size(size, include_bytes=False):
def add_ui_controllers(webapp, app):
def app_factory(global_conf, **kwargs):
def wrap_in_middleware(app, global_conf, application_stack, **local_conf):
def build_collection(type, dataset_instances):
def split_dataset_collection_instance(dataset_collection_instance, collection_type):
def resolve_path(path, root):
def find_path(kwargs, var, root):
def get_database_engine_options(kwargs, model_prefix=''):
def configure_logging(config):
def all_control_queues_for_declare(config, application_stack):
def control_queue_from_config(config):
def validate_email(trans, email, user=None, check_dup=True):
def get_permitted_actions(filter=None):
def hash_password(password):
def check_password(guess, hashed):
def pbkdf2_bin(data, salt, iterations=1000, keylen=24, hashfunc=None):
def send_local_control_task(app, task, kwargs={}):
def send_control_task(app, task, noop_self=False, kwargs={}):
def create_panel_section(app, **kwargs):
def _get_new_toolbox(app):
def get_test_fname(fname):
def get_file_peek(file_name, is_multi_byte=False, WIDTH=256, LINE_COUNT=5, skipchars=None, line_wrap=True):
def has_dataproviders(cls):
def dataprovider_factory(name, settings=None):
def _parse_query_string_settings(query_kwargs, settings=None):
def main():
def timenow():
def getMissval(inped=''):
def rgConv(inpedfilepath, outhtmlname, outfilepath, plink):
def main():
def timenow():
def pruneLD(plinktasks=[], cd='./', vclbase=[]):
def makeLDreduced(basename, infpath=None, outfpath=None, plinke='plink', forcerebuild=False, returnFname=False, winsize='60', winmove='40', r2thresh='0.1'):
def main():
def timenow():
def rgConv(inpedfilepath, outhtmlname, outfilepath, plink):
def main():
def main(interval, coverage):
def timenow():
def rgConv(inpedfilepath, outhtmlname, outfilepath):
def main():
def count_special_lines(word, filename, invert=False):
def count_lines(filename, non_empty=False):
def convert_bed_coords_to_gff(interval):
def convert_gff_coords_to_bed(interval):
def parse_gff_attributes(attr_str):
def parse_gff3_attributes(attr_str):
def gff_attributes_to_str(attrs, gff_format):
def read_unordered_gtf(iterator, strict=False):
def count_special_lines(word, filename, invert=False):
def get_test_fname(fname):
def stream_to_open_named_file(stream, fd, filename, source_encoding=None, source_error='strict', target_encoding=None, target_error='strict'):
def stream_to_file(stream, suffix='', prefix='', dir=None, text=False, **kwd):
def check_newlines(fname, bytes_to_read=52428800):
def convert_newlines(fname, in_place=True, tmp_dir=None, tmp_prefix=None):
def sep2tabs(fname, in_place=True, patt='\\s+'):
def convert_newlines_sep2tabs(fname, in_place=True, patt='\\s+', tmp_dir=None, tmp_prefix=None):
def get_headers(fname, sep, count=60, is_multi_byte=False, comment_designator=None):
def is_column_based(fname, sep=' DCTB ', skip=0, is_multi_byte=False):
def guess_ext(fname, sniff_order, is_multi_byte=False):
def decode_dbkey(dbkey):
def float_nan(n):
def get_bounds(reads, start_pos_index, end_pos_index):
def _convert_between_ucsc_and_ensemble_naming(chrom):
def package_gff_feature(feature, no_detail=False, filter_cols=[]):
def get_ref_based_read_seq_and_cigar(read_seq, read_start, ref_seq, ref_seq_start, cigar):
def _match_mismatch_counter(s1, p1, s2, p2):
def getattr_recursive(item, attr_key, *args):
def hasattr_recursive(item, attr_key):
def _from_dict(entry):
def _sniffnfix_pg9_hex(value):
def total_size(o, handlers={}, verbose=False):
def init(url, engine_options={}, create_tables=False):
def create_or_verify_database(url, engine_options={}, app=None):
def set_datatypes_registry(d_registry):
def pgcalc(sa_session, id, dryrun=False):
def get_config(argv, cwd=None):
def db_next_hid(self, n=1):
def init(file_path, url, engine_options={}, create_tables=False, map_install_models=False, database_query_profiling_proxy=False, object_store=None, trace_logger=None, use_pbkdf2=True, slow_query_log_threshold=0):
def create_or_verify_database(url, galaxy_config_file, engine_options={}, app=None):
def __guess_dataset_by_filename(filename):
def create_sequencer_form_definition(migrate_engine):
def get_sequencer_id(migrate_engine, sequencer_info):
def add_sequencer(migrate_engine, sequencer_index, sequencer_form_definition_id, sequencer_info):
def update_sequencer_id_in_request_type(migrate_engine, request_type_id, sequencer_id):
def get_keys_from_dict(dl, keys_list):
def parse_yaml(path='/config/tool_destinations.yml', test=False, return_bool=False):
def validate_config(obj, return_bool=False):
def bytes_to_str(size, unit='YB'):
def str_to_bytes(size):
def importer(test):
def map_tool_to_destination(job, app, tool, user_email, test=False, path=None):
def seconds_to_str(value):
def parse_process_statistics(statistics):
def generate_process_statistics(collectl_playback_cli, pid, statistics=DEFAULT_STATISTICS):
def get_subsystem(name):
def build_command(runner, job_wrapper, container=None, modify_command_for_container=True, include_metadata=False, include_work_dir_outputs=True, create_tool_working_directory=True, remote_command_params={}, metadata_directory=None):
def _check_expression(text, allowed_variables=[]):
def safe_eval(expression, variables):
def _retry_over_time(fun, catch, args=[], kwargs={}, errback=None, max_retries=None, interval_start=2, interval_step=2, interval_max=30):
def job_script(template=DEFAULT_JOB_FILE_TEMPLATE, **kwds):
def parse_external_id(output, type=EXTERNAL_ID_TYPE_ANY):
def _psutil_kill_pid(pid):
def build_submit_description(executable, output, error, user_log, query_params):
def condor_submit(submit_file):
def condor_stop(external_id):
def summarize_condor_log(log_file, external_id):
def env_to_statement(env):
def sudo_popen(*args, **kwargs):
def check_output(tool, stdout, stderr, tool_exit_code, job):
def __regex_err_msg(match, regex):
def load(path):
def template_macro_params(root):
def raw_tool_xml_tree(path):
def wrap_with_safe_string(value, no_wrap_classes=None):
def slugify(text, delim=u'-'):
def tag_for_tool(tool):
def __extend_with_matched_combos(single_inputs, multi_inputs):
def remove_protocol_from_url(url):
def is_binary(value, binary_chars=None):
def is_uuid(value):
def directory_hash_id(id):
def synchronized(func):
def file_iter(fname, sep=None):
def file_reader(fp, chunk_size=CHUNK_SIZE):
def unique_id(KEY_SIZE=128):
def parse_xml(fname):
def xml_to_string(elem, pretty=False):
def pretty_print_time_interval(time=False, precise=False):
def restore_text(text, character_map=mapped_chars):
def sanitize_text(text, valid_characters=valid_chars, character_map=mapped_chars, invalid_character='X'):
def _sanitize_text_helper(text, valid_characters=valid_chars, character_map=mapped_chars, invalid_character='X'):
def sanitize_param(value, valid_characters=valid_chars, character_map=mapped_chars, invalid_character='X'):
def sanitize_for_filename(text, default=None):
def mask_password_from_url(url):
def fill_template(template_text, context=None, **kwargs):
def swap_inf_nan(val):
def safe_loads(arg):
def safe_dumps(*args, **kwargs):
def remove_version_from_guid(guid):
def get_fileobj(filename, mode='r', gzip_only=False, bz2_only=False, zip_only=False):
def plugins_dict(module, plugin_type_identifier):
def fix_type_error(exc_info, callable, varargs, kwargs):
def fix_call(callable, *args, **kw):
def lookup_object(spec):
def _aslist(obj):
def _flatten(lst):
def live_pidfile(pidfile):
def ensure_port_cleanup(bound_addresses, maxtries=30, sleeptime=2):
def _turn_sigterm_into_systemexit():
def get_current_thread_object_dict():
def md5_hash_file(path):
def new_secure_hash(text_type=None):
def check_image(file_path):
def build_object_store_from_config(config, fsmon=False, config_xml=None):
def local_extra_dirs(func):
def convert_bytes(bytes):
def mp_from_ids(s3server, mp_id, mp_keyname, mp_bucketname):
@map_wrap DCNL def transfer_part(s3server, mp_id, mp_keyname, mp_bucketname, i, part):
def multipart_upload(s3server, bucket, s3_key_name, tarball, mb_size):
@contextlib.contextmanager DCNL def multimap(cores=None):
def parse_config_xml(config_xml):
def _rods_strerror(errno):
def rods_connect():
def __resource_with_deleted(self, member_name, collection_name, **kwargs):
def iterate_file(file):
def flatten(seq):
def pstats_as_html(stats, *sel_list):
def get_func_list(stats, sel_list):
def func_std_string(func_name):
def handle_exception(exc_info, error_stream, html=True, debug_mode=False, error_email=None, error_log=None, show_exceptions_in_wsgi_errors=False, error_email_from='errors@localhost', smtp_server='localhost', smtp_username=None, smtp_password=None, smtp_use_tls=False, error_subject_prefix='', error_message=None, simple_html_error=False, environ=None):
def time_ago(x):
def iff(a, b, c):
def truncate(content, length=100, suffix='...'):
def css(*args):
def js_helper(prefix, *args):
def js(*args):
def templates(*args):
def md5(s):
def to_unicode(a_string):
def is_true(val):
def expose(func):
def json(func, pretty=False):
def json_pretty(func):
def expose_api(func, to_json=True, user_required=True):
def expose_api_raw(func):
def expose_api_raw_anonymous(func):
def expose_api_anonymous(func, to_json=True):
def _future_expose_api(func, to_json=True, user_required=True, user_or_session_required=True, handle_jsonp=True):
def _format_return_as_json(rval, jsonp_callback=None, pretty=False):
def _future_expose_api_anonymous(func, to_json=True):
def _future_expose_api_anonymous_and_sessionless(func, to_json=True):
def _is_valid_slug(slug):
def sort_by_attr(seq, attr):
def get_suite():
def build_select_field(trans, objs, label_attr, select_field_name, initial_value='none', selected_value='none', refresh_on_change=False, multiple=False, display=None, size=None):
def expand_pretty_datetime_format(value):
def application_stack_class():
def _normalize_step_parameters(steps, param_map, legacy=False, already_normalized=False):
def _step_parameters(step, param_map, legacy=False):
def summarize(trans, history=None):
def __cleanup_param_values(inputs, values):
def __invoke(trans, workflow, workflow_run_config, workflow_invocation=None, populate_state=False):
def attach_ordered_steps(workflow, steps):
def order_workflow_steps(steps):
def edgelist_for_workflow_steps(steps):
def load_module_sections(trans):
def populate_module_and_state(trans, workflow, param_map, allow_tool_state_corrections=False, module_injector=None):
def validate_input(trans, error_map, param_values, page_param_map):
def build_tests(tmp_dir=None, testing_shed_tools=False, master_api_key=None, user_api_key=None):
@nottest DCNL def build_tests(app=None, testing_shed_tools=False, master_api_key=None, user_api_key=None):
def get_galaxy_test_tmp_dir():
def configure_environment():
def build_logger():
def ensure_test_file_dir_set():
def setup_galaxy_config(tmpdir, use_test_file_dir=False, default_install_db_merged=True, default_tool_data_table_config_path=None, default_shed_tool_data_table_config=None, default_job_config_file=None, enable_tool_shed_check=False, default_tool_conf=None, shed_tool_conf=None, datatypes_conf=None, update_integrated_tool_panel=False):
def nose_config_and_run(argv=None, env=None, ignore_files=[], plugins=None):
def copy_database_template(source, db_path):
def database_conf(db_path, prefix='GALAXY'):
def database_files_path(test_tmpdir, prefix='GALAXY'):
def _get_static_settings():
def get_webapp_global_conf():
def wait_for_http_server(host, port):
def serve_webapp(webapp, port=None, host=None):
def cleanup_directory(tempdir):
def setup_shed_tools_for_test(app, tmpdir, testing_migrated_tools, testing_installed_tools):
def build_galaxy_app(simple_kwargs):
def build_shed_app(simple_kwargs):
def launch_server(app, webapp_factory, kwargs, prefix='GALAXY', config_object=None):
def drive_test(test_driver_class):
def get_installed_repository_info(elem, last_galaxy_test_file_dir, last_tested_repository_name, last_tested_changeset_revision, tool_path):
def parse_tool_panel_config(config, shed_tools_dict):
def skip_without_tool(tool_id):
def yaml_to_workflow(has_yaml, galaxy_interface, workflow_directory):
def python_to_workflow(as_python, galaxy_interface, workflow_directory):
def convert_and_import_workflow(has_workflow, **kwds):
def get_master_api_key():
def get_user_api_key():
def main(argv=None):
def test_history_import_symlink():
def test_history_import_relpath_in_metadata():
def test_history_import_abspath_in_metadata():
def test_history_import_relpath_in_archive():
def test_history_import_abspath_in_archive():
@contextmanager DCNL def __environ(values, remove=[]):
@skip_unless_environ('GALAXY_TEST_INCLUDE_SLOW') DCNL def test_against_conda_prefix_regression():
def filter_tool(context, tool):
def filter_section(context, section):
def filter_label_1(context, label):
def filter_label_2(context, label):
def test_lazy_process():
def clean_multiline_string(multiline_string, sep='\n'):
def test_disk_store_alt_name_relpath():
def test_disk_store_alt_name_abspath():
def add_selenium_arguments(parser):
def find_element_by_sizzle(driver, sizzle_selector):
def find_elements_by_sizzle(driver, sizzle_selector):
def checkOverwrite(parent, spool_name):
def getFloat(parent, number):
def control_ttyhup(port, disable_hup):
def ray_triangle_intersection(ray_near, ray_dir, (v1, v2, v3)):
def check_password_expired(user):
@register.tag(name=u'user_display') DCNL def do_user_display(parser, token):
@register.tag DCNL def urlnext(parser, token):
@receiver(post_save, sender=settings.AUTH_USER_MODEL) DCNL def user_post_save(sender, **kwargs):
def login_required(func=None, redirect_field_name=REDIRECT_FIELD_NAME, login_url=None):
def prioritize():
def send_all():
def send_loop():
def send_html_mail(subject, message, message_html, from_email, recipient_list, priority=None, fail_silently=False, auth_user=None, auth_password=None, headers={}):
def make_message(subject=u'', body=u'', from_email=None, to=None, bcc=None, attachments=None, headers=None, priority=None):
def modelresource_factory(model, resource_class=ModelResource):
def export_action_form_factory(formats):
@on_group_message(name='satoru[learn]') DCNL def send_msg(msg, bot):
@on_all_message DCNL def turing_robot(msg, bot):
def register(func, msg_type=None, dispatcher_name=None, active_by_default=True, accept_self=False):
def pathsplit(p):
def _slashappend_or_add_error(p, caller):
def unique_resolved_paths(paths):
def dead_items(vfs_top, paths):
def quotesplit(line):
def unfinished_word(line):
def quotify(qtype, word, terminate):
def quotify_list(words):
def what_to_add(qtype, origword, newword, terminate):
def create(name, expected, delaywrite=None, f=None, k=None):
def atoi(s):
def atof(s):
def partition(predicate, stream):
def log(s):
def progress(s):
def qprogress(s):
def reprogress():
def mkdirp(d, mode=None):
def _fallback_next(it, default=_unspecified_next_default):
def unlink(f):
def readpipe(argv, preexec_fn=None, shell=False):
def batchpipe(command, args, preexec_fn=None, arg_max=sc_arg_max):
def resolve_parent(p):
def detect_fakeroot():
def _cache_key_value(get_value, key, cache):
def pwd_from_uid(uid):
def pwd_from_name(name):
def grp_from_gid(gid):
def grp_from_name(name):
def username():
def userfullname():
def hostname():
def linereader(f):
def chunkyreader(f, count=None):
@contextmanager DCNL def atomically_replaced_file(name, mode='w', buffering=(-1)):
def slashappend(s):
def mmap_read(f, sz=0, close=True):
def mmap_readwrite(f, sz=0, close=True):
def mmap_readwrite_private(f, sz=0, close=True):
def parse_timestamp(epoch_str):
def parse_num(s):
def count(l):
def add_error(e):
def handle_ctrl_c():
def columnate(l, prefix):
def parse_date_or_fatal(str, fatal):
def parse_excludes(options, fatal):
def parse_rx_excludes(options, fatal):
def should_rx_exclude_path(path, exclude_rxs):
def path_components(path):
def stripped_path_components(path, strip_prefixes):
def nsecs_to_timespec(ns):
def nsecs_to_timeval(ns):
def fstime_floor_secs(ns):
def _nonresident_page_regions(status_bytes, incore_mask, max_region_len=None):
def _uncache_ours_upto(fd, offset, first_region, remaining_regions):
def summary_str(meta, numeric_ids=False, classification=None, human_readable=False):
def node_info(n, name, show_hash=False, long_fmt=False, classification=None, numeric_ids=False, human_readable=False):
def do_ls(args, pwd, default='.', onabort=None, spec_prefix=''):
def connect(rhost, port, subcmd, stderr=None):
def wrap_main(main):
def parse_tz_offset(s):
def repo(sub='', repo_dir=None):
def mangle_name(name, mode, gitmode):
def demangle_name(name, mode):
def calc_hash(type, content):
def tree_encode(shalist):
def tree_decode(buf):
def idxmerge(idxlist, final_progress=True):
def list_refs(patterns=None, repo_dir=None, limit_to_heads=False, limit_to_tags=False):
def read_ref(refname, repo_dir=None):
def rev_list(ref, count=None, repo_dir=None):
def get_commit_dates(refs, repo_dir=None):
def rev_parse(committish, repo_dir=None):
def update_ref(refname, newval, oldval, repo_dir=None):
def delete_ref(refname, oldvalue=None):
def guess_repo(path=None):
def init_repo(path=None):
def check_repo_or_die(path=None):
def ver():
def cp(repo_dir=None):
def tags(repo_dir=None):
def walk_object(cat_pipe, id, stop_at=None, include_data=None):
def classify_saves(saves, period_start):
def version_date():
def version_commit():
def version_tag():
def _compute_breadcrumbs(path, show_hidden=False):
def _contains_hidden_files(n):
def _compute_dir_contents(n, path, show_hidden=False):
def find_readline_lib():
def init_readline_vars():
def parse_owner_mappings(type, options, fatal):
def hardlink_if_possible(fullname, node, meta):
def find_dir_item_metadata_by_name(dir, name):
def tests(path=None):
def await_results(program, timeout_seconds=2):
@register.tag DCNL def compress(parser, token):
def render(template_string, context_dict=None, context=None):
def script(content=u'', src=u'', scripttype=u'text/javascript'):
def url_for(mod, filename):
def handle_extendsnode(extendsnode, context):
def compress(context, data, name):
def get_class(class_string, exception=FilterError):
def get_mod_func(callback):
def get_pathext(default_pathext=None):
def find_package_data(where='.', package='', exclude=standard_exclude, exclude_directories=standard_exclude_directories, only_in_packages=True, show_ignored=False):
def from_html(html_code, **kwargs):
def from_html_one(html_code, **kwargs):
def readline(step=_step, maxlen=_maxlen, history=_history, histfile=_pyhistfile):
def count_to(count):
def iter_elements(getter, action):
def rev_elements(getter, action):
def make_template(skeleton, getter, action):
def main():
def normalize(val):
def denormalize(val):
def with_metaclass(meta, *bases):
def get_localizer(language='English'):
def get_factory():
def vis_square(data, padsize=1, padval=0):
def test_one(image_path):
def face_draw_point(filelist, savePath):
def face_prepare(filelist, fileout, savePath, w, h):
def read_image(filename, w=128, h=128, as_grey=False):
def predict(file_name):
def nms_average(boxes, overlapThresh=0.2):
def nms_max(boxes, overlapThresh=0.3):
def draw_rectangle(im, rect, color=(255, 0, 0)):
def draw_landmarks(im, landmarks, color=(0, 255, 0)):
def draw_text(im, position, text, color=(0, 0, 255)):
def convert_full_conv(model_define, model_weight, model_define_fc, model_weight_fc):
def read_image(filename, w=128, h=128, as_grey=False):
def get_predict(filename):
def get_data_static(file_list):
def div_train_val(file_in, file_train, file_val, val_rate=10):
def convert_for_lmdb(input_file, output_file, Image_Root):
def convert_2_lmdb(Image_Root, file_list_name, lmdb_path, save_image_size=(128, 128)):
def convert(source_path, pairlist, savepath, hdf5list, w, h):
def make_dict_from_file(file_list):
def make_train_file_list_gender_no_child(root_path, input_file_list):
def make_train_file_list_gender(root_path, input_file_list):
def make_train_file_list_child(root_path, input_file_list):
def read_image(filename, w=128, h=128, as_grey=False):
def get_predict(filename):
def plot_cm(cm, test_total):
def div_database(filepath, savepath, top_num=1000, equal_num=False, full_path=False):
def read_image(filename, w=128, h=128, as_grey=False):
def get_predict(filename):
def plot_cm(cm, class_num):
def read_imagelist(filelist):
def read_labels(labelfile):
def draw_roc_curve(fpr, tpr, title='cosine', save_name='roc_lfw'):
def evaluate(itera=500000, metric='cosine'):
def calculate_accuracy(distance, labels, num):
def convert_sph(sph, wav):
def get_relative_path(relative_dir):
def add_relative_dir_to_sys_path(relative_dir):
def plugin_loaded():
def currentTimeMillis():
def write_menu(menu_type, menu_text):
def get_sketch_paths_text(level, paths):
def get_sketch_menu_text(level, paths):
def update_sketchbook_menu(arduino_info):
def get_example_paths_text(level, paths):
def get_example_menu_text(level, paths):
def update_example_menu(arduino_info):
def get_lib_name_in_path(lib_path):
def update_library_menu(arduino_info):
def update_install_library_menu(arduino_info):
def update_install_platform_menu(arduino_info):
def update_platform_menu(arduino_info):
def update_version_menu(arduino_info):
def update_platform_example_menu(arduino_info):
def update_platform_library_menu(arduino_info):
def update_board_menu(arduino_info):
def update_board_options_menu(arduino_info):
def update_programmer_menu(arduino_info):
def update_network_port_menu(arduino_info):
def update_serial_menu(arduino_info):
def update_language_menu(arduino_info):
def get_app_dir_settings():
def get_arduino_dir_path(app_dir_settings):
def get_sketchbook_path(app_dir_settings):
def get_default_dir_paths():
def find_arduino_dir_path(dir_paths):
def get_ext_app_path(app_dir_settings):
def get_index_files_info(arduino_dir_path):
def get_lib_index_files_info(arduino_dir_path):
def get_ext_app_pkg_info(ext_app_hardware_path):
def get_installed_packages_info(arduino_info):
def get_boards_info(arduino_info):
def get_programmers_info(arduino_info, src=u'platform'):
def combine_programmers_info(infos):
def get_all_programmers_info(arduino_info):
def update_network_port_info(network_ports):
def update_serial_info(serial_ports):
def check_platform_selected(arduino_info):
def check_port_selected(arduino_info):
def check_selected(arduino_info, item_type):
def check_board_options_selected(arduino_info):
def on_platform_select(package_name, platform_name):
def on_version_select(version):
def on_board_select(board_name):
def on_board_option_select(option, value):
def on_programmer_select(programmer_name):
def on_serial_select(serial_port):
def on_network_port_select(network_port):
def on_language_select(language_name):
def unzip(zip_path, target_dir_path):
def download_lib(url):
def download_platform_tool(down_info):
def check_platform_dep():
def check_tools_deps(platform_info):
def open_project(project_path, win):
def new_sketch(sketch_name, win):
def get_real_lib_path(lib_path):
def import_lib(view, edit, lib_path):
def install_library(category, name, version):
def install_platform(package, platform, version):
def import_avr_platform(ide_path=u''):
def find_dirs(path, dir_name):
def get_tool_dirs(dir_name):
def get_all_sub_paths(path):
def get_all_lib_paths(project):
def get_h_path_info(project):
def get_paths_from_header(h_path_info, header):
def clean_path(dir_path):
def find_lib_paths_by_compiler(cmd_pattern, src_path, h_cpp_info, lib_paths, h_path_info, dummy_dir_path):
def find_lib_paths(src_path, h_path_info, h_cpp_info):
def get_dep_lib_paths(cmd_pattern, src_paths, h_path_info, used_cpps, used_h_paths, h_cpp_info, used_dirs, arch, build_path, core_paths):
def is_modified(file_path, info):
def get_hooks_cmds(cmds_info, pattern_key):
def get_obj_paths(prj_path, build_path, src_paths, mode):
def get_changed_src_paths(h_path, h_cpp_info, last_build_info, changed_src_paths, used_h_paths):
def get_build_cmds(cmds_info, prj_path, prj_build_path, inc_text, prj_src_paths, lib_src_paths, core_src_paths, h_cpp_info):
def run_command(cmd):
def earse_all_phantoms():
def handle_phantoms(href):
def get_error_infos(line):
def open_file(file_path):
def handle_build_error_messages(error_msg):
def run_build_command(percent, cmd, msg):
def run_upload_command(cmd):
def run_build_commands(cmds, msgs):
def run_bootloader_cmds(cmds):
def regular_number(num):
def run_size_command(cmd, regex_info):
def save_project_files(project_path):
def get_src_paths(paths, mode=u'norecursion'):
def simply_minus_src(minus_src_path, file_path):
def gen_minus_src_file(cmd, dummy_dir_path):
def build_sketch(build_info={}):
def upload_sketch(upload_cmd=u''):
def backup_bin_file(dir_path, mode=u'upload'):
def upload_bin_file(file_path, mode=u'upload'):
def burn_bootloader():
def start_serial_monitor(port):
def beautify_src(view, edit, file_path):
def translate(text):
def open_platform_documents():
def print_packages_info(arduino_info):
def print_boards_info(arduino_info):
def check_pkgs():
def init_app_dir_settings():
def init_ardunio_app_path():
def init_sketchbook_path():
def init_ext_app_path():
def init_config_settings():
def init_selected_settings():
def init_index_settings():
def init_pkgs_info():
def init_libs_info():
def init_inst_pkgs_info():
def init_boards_info():
def init_programmers_info():
def init_menus():
def _init():
def focus_view(view, line_no, col_no):
def add_connection(conn_text):
def get_package_names(pkgs_info):
def get_package_info(pkgs_info, pkg_name):
def get_platform_names(pkgs_info, pkg_name):
def get_platform_arches(pkgs_info, pkg_name):
def get_platform_versions_info(pkgs_info, pkg_name, ptfm_name):
def get_platform_versions(pkgs_info, pkg_name, ptfm_name):
def get_platform_info(pkgs_info, pkg_name, ptfm_name, ptfm_ver):
def get_platform_name_by_arch(arduino_info, pkg_name, ptfm_arch):
def get_platform_arch_by_name(arduino_info, pkg_name, ptfm_name):
def get_full_platform_info(arduino_info, pkg, ptfm, ver):
def get_sel_platform_info(arduino_info):
def get_sel_board_info(arduino_info):
def get_sel_board_options(arduino_info):
def get_sel_programmer_info(arduino_info):
def get_sel_platform_path(arduino_info):
def get_refering_platform_info(arduino_info, pkg, arch):
def get_refering_platform_path(arduino_info, pkg, arch):
def get_platform_file_params_info(platform_path):
def get_refering_params_info(arduino_info, pkg, arch):
def find_variants_in_braces(text):
def replace_variants_in_braces(text, info, prefix=u''):
def get_target_platform_info(arduino_info, value):
def get_build_platform_info(arduino_info):
def get_build_platform_path(arduino_info):
def get_build_core_src_path(arduino_info):
def get_build_variant_path(arduino_info):
def get_generic_info():
def get_project_info(arduino_info, project=None):
def get_tools_in_commands(cmds):
def get_tool_info(arduino_info, tool_name):
def get_default_tools_deps(arduino_info):
def get_dep_tools_info(arduino_info, platform_info):
def get_runtime_tools_path_info(arduino_info, platform_info):
def get_runtime_path_info(arduino_info, platform_info):
def get_base_info(arduino_info, project=None):
def get_runtime_build_info(arduino_info):
def get_build_params_info(arduino_info):
def get_build_commands_info(arduino_info, project=None):
def get_tool_params_info(arduino_info, tool_platform_path, tool_name):
def get_upload_command(arduino_info, project=None, bin_path=u'', mode=u'upload'):
def get_bootloader_commands(arduino_info):
def get_board_from_hwid(arduino_info, vid, pid):
def get_user_path():
def get_plugin_config_path(plugin_name):
def get_plugin_menu_path(plugin_name):
def get_document_path():
def get_tmp_path():
def get_user_config_path():
def get_python_version():
def get_os_name():
def get_host():
def get_sys_encoding():
def get_sys_language():
def is_x64():
def is_in_submlimetext():
def arduino_app_path():
def arduino_sketchbook_path():
def is_cpp_file(file_name):
def strip_back_slash(lines):
def break_lines(lines):
def split_line_by_str(line):
def split_line_to_words(line):
def insert_semicolon_break(words_list):
def insert_right_parenthesis_break(words_list):
def insert_else_break(words_list):
def insert_colon_break(words_list):
def remove_blank_words(words_list):
def remove_break_before_semicolon(words_list):
def remove_parenthesis_break(words_list):
def regular_chars(words):
def regular_pp_mm(words):
def regular_blanks(words_list):
def regular_none_comment_lines(lines):
def split_lines_by_comment(lines):
def regular_lines(lines):
def break_long_line(line, indent_level, indent_char=u' DCTB '):
def indent_lines(lines, indent_char=u' DCTB '):
def scrub_comments(lines):
def collapse_braces(lines):
def simplify_to_one_line(lines):
def remove_none_func_lines(lines):
def simplify_lines(lines):
def beautify_lines(lines, indent_char=u' DCTB '):
def is_main_ino_file(file_path):
def is_main_cpp_file(file_path):
def get_index_of_first_statement(src_text):
def list_includes(text):
def list_include_headers(text):
def get_item_info(parent_item, items_id):
def classify_infos_by_key(infos, key, do_classify=True):
def classfy_infos_of_levels(infos, keys, level=0):
def singleton(cls):
def get_key_value(line):
def get_lines_with_head(lines, head):
def value_is_name(line, name):
def get_names(lines):
def get_heads(lines):
def get_lines_with_name(lines, name):
def get_blocks_by_names(lines, names):
def get_blocks_by_heads(lines, heads):
def remove_block_head(block, head):
def get_generic_info(block, category):
def get_generic_block(block):
def get_option_block_info(block):
def get_menu_blocks_info(block, menu_info):
def list_serial_ports():
def list_network_ports():
def get_serials_info():
def get_serial_info(port):
def is_available(serial_port):
def flush_serial_buffer(serial_port):
def touch_port(serial_port, baudrate):
def auto_reset(serial_port):
def wait_for_new_port(upload_port, before_ports):
def auto_detect_upload_port(board_info):
def check_do_touch(board_info):
def checke_do_reset(board_info):
def prepare_upload_port(upload_port, do_touch=False, do_reset=False):
def restore_serial_port(upload_port, baudrate, timeout=4):
def get_serial_file(port):
def check_dir(dir_path):
def get_remote_file_info(url):
def get_remote_etag(url):
def download(url, target_dir, message_consumer=sys.stdout.write, mode=u'resume'):
def list_files_of_extension(dir_path, ext=u'', mode=u'norecursion'):
def list_files_of_extensions(dir_path, exts=[], mode=u'norecursion'):
def get_file_info_of_extension(dir_path, ext=u'', mode=u'norecursion', excludes=[]):
def get_file_info_of_extensions(dir_path, exts, mode=u'norecursion', excludes=[]):
def remove_headers(text):
def simple_combine_ino_files(ino_file_paths, target_file_path, is_arduino_project=True):
def combine_ino_files(ino_file_paths, target_file_path, minus_src_path=u'', is_arduino_project=True):
def check_main_file(file_paths, prj_type=u'arduino'):
def hex_encode(data, errors='strict'):
def hex_decode(data, errors='strict'):
def getregentry():
def grep(regexp):
def numsplit(text):
def get_string_property(device_type, property):
def get_int_property(device_type, property, cf_number_type):
def GetParentDeviceByType(device, parent_type):
def GetIOServicesByType(service_type):
def location_to_string(locationID):
def scan_interfaces():
def iterate_comports():
def comports():
def key_description(character):
def ask_for_port():
def main(default_port=None, default_baudrate=9600, default_rts=None, default_dtr=None):
def serial_for_url(url, *args, **kwargs):
def detect_java_comm(names):
def device(portnumber):
def iterbytes(b):
def to_bytes(seq):
def sixteen(data):
def hexdump(data):
def serial_class_for_url(url):
def is_64bit():
def check_order(group):
def lint_psl(infile):
def usage():
def main():
def _normalizeHostname(domain):
def _isASCII(s):
def main(output, effective_tld_filename):
def build_files_list(root_dir):
def check_paths(paths):
def test_flake8_compliance(cookies):
def get_random_string(length=50):
def make_secret_key(project_directory):
def remove_task_app(project_directory):
def remove_pycharm_dir(project_directory):
def remove_heroku_files():
def remove_docker_files():
def remove_grunt_files():
def remove_gulp_files():
def remove_packageJSON_file():
def remove_certbot_files():
def remove_copying_files():
def remove_elasticbeanstalk():
def remove_open_source_files():
def update_site_forward(apps, schema_editor):
def update_site_backward(apps, schema_editor):
def get_gfp_ci(average, n_bootstraps=2000):
def my_callback(ax, ch_idx):
def data_fun(times):
def data_fun(times):
def brain_to_mpl(brain):
def apply_solver(solver, evoked, forward, noise_cov, loose=0.2, depth=0.8):
def solver(M, G, n_orient):
def package_tree(pkgroot):
def linkcode_resolve(domain, info):
def parse_soup_page(soup):
def get_total_citations(soup):
def _get_soup(url, backend='selenium'):
@mem.cache DCNL def get_citing_articles(cites_url, backend):
def _handle_default(k, v=None):
def _read_stc(filename):
def _write_stc(filename, tmin, tstep, vertices, data):
def _read_3(fid):
def _read_w(filename):
def _write_3(fid, val):
def _write_w(filename, vertices, data):
def read_source_estimate(fname, subject=None):
def _make_stc(data, vertices, tmin=None, tstep=None, subject=None):
def _verify_source_estimate_compat(a, b):
def _center_of_mass(vertices, values, hemi, surf, subject, subjects_dir, restrict_vertices):
@verbose DCNL def _morph_buffer(data, idx_use, e, smooth, n_vertices, nearest, maps, warn=True, verbose=None):
def _morph_mult(data, e, use_sparse, idx_use_data, idx_use_out=None):
def _sparse_argmax_nnz_row(csr_mat):
def _morph_sparse(stc, subject_from, subject_to, subjects_dir=None):
@verbose DCNL def morph_data(subject_from, subject_to, stc_from, grade=5, smooth=None, subjects_dir=None, buffer_size=64, n_jobs=1, warn=True, verbose=None):
@verbose DCNL def compute_morph_matrix(subject_from, subject_to, vertices_from, vertices_to, smooth=None, subjects_dir=None, warn=True, verbose=None):
@verbose DCNL def grade_to_vertices(subject, grade, subjects_dir=None, n_jobs=1, verbose=None):
def morph_data_precomputed(subject_from, subject_to, stc_from, vertices_to, morph_mat):
@verbose DCNL def spatio_temporal_src_connectivity(src, n_times, dist=None, verbose=None):
@verbose DCNL def grade_to_tris(grade, verbose=None):
@verbose DCNL def spatio_temporal_tris_connectivity(tris, n_times, remap_vertices=False, verbose=None):
@verbose DCNL def spatio_temporal_dist_connectivity(src, n_times, dist, verbose=None):
@verbose DCNL def spatial_src_connectivity(src, dist=None, verbose=None):
@verbose DCNL def spatial_tris_connectivity(tris, remap_vertices=False, verbose=None):
def spatial_dist_connectivity(src, dist, verbose=None):
def spatial_inter_hemi_connectivity(src, dist, verbose=None):
@verbose DCNL def _get_connectivity_from_edges(edges, n_times, verbose=None):
@verbose DCNL def _get_ico_tris(grade, verbose=None, return_surf=False):
def save_stc_as_volume(fname, stc, src, dest='mri', mri_resolution=False):
def _get_label_flip(labels, label_vertidx, src):
@verbose DCNL def _gen_extract_label_time_course(stcs, labels, src, mode='mean', allow_empty=False, verbose=None):
@verbose DCNL def extract_label_time_course(stcs, labels, src, mode='mean_flip', allow_empty=False, return_generator=False, verbose=None):
def clean_ecg_eog(in_fif_fname, out_fif_fname=None, eog=True, ecg=True, ecg_proj_fname=None, eog_proj_fname=None, ecg_event_fname=None, eog_event_fname=None, in_path='.', quiet=False):
def run():
def run():
def run():
def run():
def load_module(name, path):
def get_optparser(cmdpath, usage=None):
def run():
def check_usage(module, force_help=False):
@slow_test DCNL def test_browse_raw():
def test_bti2fiff():
def test_compare_fiff():
def test_show_fiff():
@requires_mne DCNL def test_clean_eog_ecg():
@slow_test DCNL def test_compute_proj_ecg_eog():
def test_coreg():
def test_kit2fiff():
@requires_tvtk DCNL @testing.requires_testing_data DCNL def test_make_scalp_surfaces():
def test_maxfilter():
@slow_test DCNL @requires_mayavi DCNL @requires_PIL DCNL @testing.requires_testing_data DCNL def test_report():
def test_surf2bem():
@ultra_slow_test DCNL @requires_freesurfer DCNL @testing.requires_testing_data DCNL def test_watershed_bem():
@ultra_slow_test DCNL @requires_freesurfer DCNL @sample.requires_sample_data DCNL def test_flash_bem():
def test_show_info():
def run():
def run():
@verbose DCNL def log_elapsed(t, verbose=None):
def run():
def run():
def run():
def run():
def freeview_bem_surfaces(subject, subjects_dir, method):
def run():
def run():
def run():
def _check_file(fname, overwrite):
def run():
def run():
def run():
def _combine_annotations(annotations, last_samps, first_samps, sfreq, meas_date):
def _handle_meas_date(meas_date):
def _sync_onset(raw, onset, inverse=False):
def _make_writable(fname):
def _make_writable_recursive(path):
def _find_head_bem(subject, subjects_dir, high_res=False):
def coregister_fiducials(info, fiducials, tol=0.01):
def create_default_subject(fs_home=None, update=False, subjects_dir=None):
def _decimate_points(pts, res=10):
def _trans_from_params(param_info, params):
def fit_matched_points(src_pts, tgt_pts, rotate=True, translate=True, scale=False, tol=None, x0=None, out='trans'):
def _point_cloud_error(src_pts, tgt_pts):
def _point_cloud_error_balltree(src_pts, tgt_tree):
def fit_point_cloud(src_pts, tgt_pts, rotate=True, translate=True, scale=0, x0=None, leastsq_args={}, out='params'):
def _find_label_paths(subject='fsaverage', pattern=None, subjects_dir=None):
def _find_mri_paths(subject, skip_fiducials, subjects_dir):
def _find_fiducials_files(subject, subjects_dir):
def _is_mri_subject(subject, subjects_dir=None):
def _is_scaled_mri_subject(subject, subjects_dir=None):
def _mri_subject_has_bem(subject, subjects_dir=None):
def read_mri_cfg(subject, subjects_dir=None):
def _write_mri_config(fname, subject_from, subject_to, scale):
def _scale_params(subject_to, subject_from, scale, subjects_dir):
def scale_bem(subject_to, bem_name, subject_from=None, scale=None, subjects_dir=None):
def scale_labels(subject_to, pattern=None, overwrite=False, subject_from=None, scale=None, subjects_dir=None):
def scale_mri(subject_from, subject_to, scale, overwrite=False, subjects_dir=None, skip_fiducials=False, labels=True, annot=False):
def scale_source_space(subject_to, src_name, subject_from=None, scale=None, subjects_dir=None, n_jobs=1):
@requires_good_network DCNL def test_connection():
def _connect_client(trig_queue):
def test_mockclient():
def test_get_event_data():
def test_find_events():
@requires_neuromag2ft DCNL def test_fieldtrip_client():
def _recv_tag_raw(sock):
def _buffer_recv_worker(rt_client, nchan):
def _buffer_recv_worker(ft_client):
def nottest(f):
def _ensure_int(x, name='unknown', must_be='an DCSP int'):
def _pl(x):
def _explain_exception(start=(-1), stop=None, prefix='> DCSP '):
def _get_call_line(in_verbose=False):
def _sort_keys(x):
def object_hash(x, h=None):
def object_size(x):
def object_diff(a, b, pre=''):
def check_random_state(seed):
def split_list(l, n):
def create_chunks(sequence, size):
def sum_squared(X):
def warn(message, category=RuntimeWarning):
def check_fname(fname, filetype, endings, endings_err=()):
def estimate_rank(data, tol='auto', return_singular=False, norm=True):
def _compute_row_norms(data):
def _reject_data_segments(data, reject, flat, decim, info, tstep):
def _get_inst_data(inst):
def pformat(temp, **fmt):
@decorator DCNL def verbose(function, *args, **kwargs):
@nottest DCNL def slow_test(f):
@nottest DCNL def ultra_slow_test(f):
def has_nibabel(vox2ras_tkr=False):
def has_mne_c():
def has_freesurfer():
def requires_nibabel(vox2ras_tkr=False):
def buggy_mkl_svd(function):
def requires_version(library, min_version):
def requires_module(function, name, call=None):
def copy_doc(source):
def copy_function_doc_to_method_doc(source):
def check_version(library, min_version):
def _check_mayavi_version(min_version='4.3.0'):
def _check_pyface_backend():
def _import_mlab():
@verbose DCNL def run_subprocess(command, verbose=None, *args, **kwargs):
def set_log_level(verbose=None, return_old_level=False):
def set_log_file(fname=None, output_format='%(message)s', overwrite=None):
def get_subjects_dir(subjects_dir=None, raise_error=False):
def _get_extra_data_path(home_dir=None):
def get_config_path(home_dir=None):
def set_cache_dir(cache_dir):
def set_memmap_min_size(memmap_min_size):
def _load_config(config_path, raise_error=False):
def get_config(key=None, default=None, raise_error=False, home_dir=None):
def set_config(key, value, home_dir=None, set_env=True):
def _get_ftp(url, temp_file_name, initial_size, file_size, verbose_bool):
def _get_http(url, temp_file_name, initial_size, file_size, verbose_bool):
def _chunk_write(chunk, local_file, progress):
@verbose DCNL def _fetch_file(url, file_name, print_destination=True, resume=True, hash_=None, timeout=10.0, verbose=None):
def sizeof_fmt(num):
def _url_to_local_path(url, path):
def _get_stim_channel(stim_channel, info, raise_error=True):
def _check_fname(fname, overwrite=False, must_exist=False):
def _check_subject(class_subject, input_subject, raise_error=True):
def _check_preload(inst, msg):
def _check_pandas_installed():
def _check_pandas_index_arguments(index, defaults):
def _clean_names(names, remove_whitespace=False, before_dash=True):
def _check_type_picks(picks):
@nottest DCNL def run_tests_if_main(measure_mem=False):
def md5sum(fname, block_size=1048576):
def create_slices(start, stop, step=None, length=1):
def _time_mask(times, tmin=None, tmax=None, sfreq=None, raise_error=True):
def random_permutation(n_samples, random_state=None):
def compute_corr(x, y):
def grand_average(all_inst, interpolate_bads=True, drop_bads=True):
def _get_root_dir():
def sys_info(fid=None, show_paths=False):
def open_docs(kind=None, version=None):
def _get_data(tmin=(-0.11), tmax=0.15, read_all_forward=True, compute_csds=True):
@testing.requires_testing_data DCNL def test_dics():
@testing.requires_testing_data DCNL def test_dics_source_power():
@testing.requires_testing_data DCNL def test_tf_dics():
def _get_data(ch_decim=1):
def simu_data(evoked, forward, noise_cov, n_dipoles, times, nave=1):
@testing.requires_testing_data DCNL def test_rap_music_simulated():
@testing.requires_testing_data DCNL def test_rap_music_sphere():
def _get_data(tmin=(-0.1), tmax=0.15, all_forward=True, epochs=True, epochs_preload=True, data_cov=True):
@slow_test DCNL @testing.requires_testing_data DCNL def test_lcmv():
@testing.requires_testing_data DCNL def test_lcmv_raw():
@testing.requires_testing_data DCNL def test_lcmv_source_power():
@testing.requires_testing_data DCNL def test_tf_lcmv():
def test_reg_pinv():
def _reg_pinv(x, reg):
def _pick_channels_spatial_filter(ch_names, filters):
@verbose DCNL def make_lcmv(info, forward, data_cov, reg=0.05, noise_cov=None, label=None, picks=None, pick_ori=None, rank=None, weight_norm='unit-noise-gain', verbose=None):
def _subject_from_filter(filters):
def _check_proj_match(info, filters):
def _apply_lcmv(data, filters, info, tmin, max_ori_out):
def _prepare_beamformer_input(info, forward, label, picks, pick_ori):
@verbose DCNL def apply_lcmv(evoked, filters, max_ori_out='abs', verbose=None):
@verbose DCNL def apply_lcmv_epochs(epochs, filters, max_ori_out='abs', return_generator=False, verbose=None):
@verbose DCNL def apply_lcmv_raw(raw, filters, start=None, stop=None, max_ori_out='abs', verbose=None):
@verbose DCNL def lcmv(evoked, forward, noise_cov=None, data_cov=None, reg=0.05, label=None, pick_ori=None, picks=None, rank=None, weight_norm='unit-noise-gain', max_ori_out='abs', verbose=None):
@verbose DCNL def lcmv_epochs(epochs, forward, noise_cov, data_cov, reg=0.05, label=None, pick_ori=None, return_generator=False, picks=None, rank=None, weight_norm='unit-noise-gain', max_ori_out='abs', verbose=None):
@verbose DCNL def lcmv_raw(raw, forward, noise_cov, data_cov, reg=0.05, label=None, start=None, stop=None, picks=None, pick_ori=None, rank=None, weight_norm='unit-noise-gain', max_ori_out='abs', verbose=None):
@verbose DCNL def _lcmv_source_power(info, forward, noise_cov, data_cov, reg=0.05, label=None, picks=None, pick_ori=None, rank=None, weight_norm=None, verbose=None):
@verbose DCNL def tf_lcmv(epochs, forward, noise_covs, tmin, tmax, tstep, win_lengths, freq_bins, subtract_evoked=False, reg=0.05, label=None, pick_ori=None, n_jobs=1, picks=None, rank=None, weight_norm='unit-noise-gain', raw=None, verbose=None):
def _apply_rap_music(data, info, times, forward, noise_cov, n_dipoles=2, picks=None):
def _make_dipoles(times, poss, oris, sol, gof):
def _compute_subcorr(G, phi_sig):
def _compute_proj(A):
@verbose DCNL def rap_music(evoked, forward, noise_cov, n_dipoles=5, return_residual=False, picks=None, verbose=None):
@verbose DCNL def _apply_dics(data, info, tmin, forward, noise_csd, data_csd, reg, label=None, picks=None, pick_ori=None, real_filter=False, verbose=None):
@verbose DCNL def dics(evoked, forward, noise_csd, data_csd, reg=0.05, label=None, pick_ori=None, real_filter=False, verbose=None):
@verbose DCNL def dics_epochs(epochs, forward, noise_csd, data_csd, reg=0.05, label=None, pick_ori=None, return_generator=False, real_filter=False, verbose=None):
@verbose DCNL def dics_source_power(info, forward, noise_csds, data_csds, reg=0.05, label=None, pick_ori=None, real_filter=False, verbose=None):
@verbose DCNL def tf_dics(epochs, forward, noise_csds, tmin, tmax, tstep, win_lengths, freq_bins, subtract_evoked=False, mode='fourier', n_ffts=None, mt_bandwidths=None, mt_adaptive=False, mt_low_bias=True, reg=0.05, label=None, pick_ori=None, real_filter=False, verbose=None):
@verbose DCNL def get_head_surf(subject, source=('bem', 'head'), subjects_dir=None, verbose=None):
def _get_head_surface(subject, source, subjects_dir, raise_error=True):
@verbose DCNL def get_meg_helmet_surf(info, trans=None, verbose=None):
def fast_cross_3d(x, y):
def _fast_cross_nd_sum(a, b, c):
def _accumulate_normals(tris, tri_nn, npts):
def _triangle_neighbors(tris, npts):
def _triangle_coords(r, geom, best):
def _project_onto_surface(rrs, surf, project_rrs=False, return_nn=False):
@verbose DCNL def complete_surface_info(surf, do_neighbor_vert=False, copy=True, verbose=None):
def _get_surf_neighbors(surf, k):
def _normalize_vectors(rr):
def _compute_nearest(xhs, rr, use_balltree=True, return_dists=False):
def _fread3(fobj):
def _fread3_many(fobj, n):
def read_curvature(filepath):
@verbose DCNL def read_surface(fname, read_metadata=False, return_dict=False, verbose=None):
def _get_ico_surface(grade, patch_stats=False):
def _tessellate_sphere_surf(level, rad=1.0):
def _norm_midpt(ai, bi, rr):
def _tessellate_sphere(mylevel):
def _create_surf_spacing(surf, hemi, subject, stype, ico_surf, subjects_dir):
def write_surface(fname, coords, faces, create_stamp='', volume_info=None):
def _decimate_surface(points, triangles, reduction):
def decimate_surface(points, triangles, n_triangles):
@verbose DCNL def read_morph_map(subject_from, subject_to, subjects_dir=None, verbose=None):
def _write_morph_map(fname, subject_from, subject_to, mmap_1, mmap_2):
def _get_tri_dist(p, q, p0, q0, a, b, c, dist):
def _get_tri_supp_geom(surf):
@verbose DCNL def _make_morph_map(subject_from, subject_to, subjects_dir=None):
def _find_nearest_tri_pt(rr, tri_geom, pt_tris=None, run_all=True):
def _nearest_tri_edge(pt_tris, to_pt, pqs, dist, tri_geom):
def mesh_edges(tris):
def mesh_dist(tris, vert):
@verbose DCNL def read_tri(fname_in, swap=False, verbose=None):
def _get_solids(tri_rrs, fros):
def _complete_sphere_surf(sphere, idx, level):
def _calc_beta(rk, rk_norm, rk1, rk1_norm):
def _lin_pot_coeff(fros, tri_rr, tri_nn, tri_area):
def _correct_auto_elements(surf, mat):
def _fwd_bem_lin_pot_coeff(surfs):
def _fwd_bem_multi_solution(solids, gamma, nps):
def _fwd_bem_homog_solution(solids, nps):
def _fwd_bem_ip_modify_solution(solution, ip_solution, ip_mult, n_tri):
def _fwd_bem_linear_collocation_solution(m):
@verbose DCNL def make_bem_solution(surfs, verbose=None):
def _ico_downsample(surf, dest_grade):
def _get_ico_map(fro, to):
def _order_surfaces(surfs):
def _assert_complete_surface(surf):
def _assert_inside(fro, to):
def _check_surfaces(surfs):
def _check_surface_size(surf):
def _check_thicknesses(surfs):
def _surfaces_to_bem(surfs, ids, sigmas, ico=None, rescale=True):
@verbose DCNL def make_bem_model(subject, ico=4, conductivity=(0.3, 0.006, 0.3), subjects_dir=None, verbose=None):
def _fwd_eeg_get_multi_sphere_model_coeffs(m, n_terms):
def _compose_linear_fitting_data(mu, u):
def _compute_linear_parameters(mu, u):
def _one_step(mu, u):
def _fwd_eeg_fit_berg_scherg(m, nterms, nfit):
@verbose DCNL def make_sphere_model(r0=(0.0, 0.0, 0.04), head_radius=0.09, info=None, relative_radii=(0.9, 0.92, 0.97, 1.0), sigmas=(0.33, 1.0, 0.004, 0.33), verbose=None):
@verbose DCNL def fit_sphere_to_headshape(info, dig_kinds='auto', units='m', verbose=None):
@verbose DCNL def get_fitting_dig(info, dig_kinds='auto', verbose=None):
@verbose DCNL def _fit_sphere_to_headshape(info, dig_kinds, verbose=None):
def _fit_sphere(points, disp='auto'):
def _check_origin(origin, info, coord_frame='head', disp=False):
@verbose DCNL def make_watershed_bem(subject, subjects_dir=None, overwrite=False, volume='T1', atlas=False, gcaatlas=False, preflood=None, show=False, verbose=None):
def _extract_volume_info(mgz, raise_error=True):
@verbose DCNL def read_bem_surfaces(fname, patch_stats=False, s_id=None, verbose=None):
def _read_bem_surface(fid, this, def_coord_frame, s_id=None):
@verbose DCNL def read_bem_solution(fname, verbose=None):
def _add_gamma_multipliers(bem):
def _bem_find_surface(bem, id_):
def _bem_explain_surface(id_):
def write_bem_surfaces(fname, surfs):
def _write_bem_surfaces_block(fid, surfs):
def write_bem_solution(fname, bem):
def _prepare_env(subject, subjects_dir, requires_freesurfer):
@verbose DCNL def convert_flash_mris(subject, flash30=True, convert=True, unwarp=False, subjects_dir=None, verbose=None):
@verbose DCNL def make_flash_bem(subject, overwrite=False, show=True, subjects_dir=None, flash_path=None, verbose=None):
def _check_bem_size(surfs):
def _symlink(src, dest):
def read_big(fid, size=None):
def read_tag_info(fid):
def _fromstring_rows(fid, tag_size, dtype=None, shape=None, rlims=None):
def _loc_to_coil_trans(loc):
def _coil_trans_to_loc(coil_trans):
def _loc_to_eeg_loc(loc):
def _read_tag_header(fid):
def _read_matrix(fid, tag, shape, rlims, matrix_coding):
def _read_simple(fid, tag, shape, rlims, dtype):
def _read_string(fid, tag, shape, rlims):
def _read_complex_float(fid, tag, shape, rlims):
def _read_complex_double(fid, tag, shape, rlims):
def _read_id_struct(fid, tag, shape, rlims):
def _read_dig_point_struct(fid, tag, shape, rlims):
def _read_coord_trans_struct(fid, tag, shape, rlims):
def _read_ch_info_struct(fid, tag, shape, rlims):
def _read_old_pack(fid, tag, shape, rlims):
def _read_dir_entry_struct(fid, tag, shape, rlims):
def _read_julian(fid, tag, shape, rlims):
def read_tag(fid, pos=None, shape=None, rlims=None):
def find_tag(fid, node, findkind):
def has_tag(node, kind):
def _check_fun(fun, d, *args, **kwargs):
def _allocate_data(data, data_buffer, data_shape, dtype):
def _index_as_time(index, sfreq, first_samp=0, use_first_samp=False):
def _write_raw(fname, raw, info, picks, fmt, data_type, reset_range, start, stop, buffer_size, projector, drop_small_buffer, split_size, part_idx, prev_fname):
def _start_writing_raw(name, info, sel=None, data_type=FIFF.FIFFT_FLOAT, reset_range=True, annotations=None):
def _write_raw_buffer(fid, buf, cals, fmt):
def _my_hilbert(x, n_fft=None, envelope=False):
def _check_raw_compatibility(raw):
def concatenate_raws(raws, preload=None, events_list=None):
def _check_update_montage(info, montage, path=None, update_ch_names=False):
def _check_maxshield(allow_maxshield):
def _load_mne_locs(fname=None):
def _generate_mne_locs_file(output_fname):
def _load_tristan_coil_locs(coil_loc_path):
def _compute_mne_loc(coil_loc):
def _read_pos(fname):
@testing.requires_testing_data DCNL def test_data():
def test_utils():
def read_raw_artemis123(input_fname, preload=False, verbose=None, pos_fname=None, add_head_trans=True):
def _get_artemis123_info(fname, pos_fname=None):
def _add_kind(one):
def _calibrate_comp(comp, chs, row_names, col_names, mult_keys=('range', 'cal'), flip=False):
@verbose DCNL def read_ctf_comp(fid, node, chs, verbose=None):
def write_ctf_comp(fid, comps):
def _find_channels(ch_names, ch_type='EOG'):
def _mult_cal_one(data_view, one, idx, cals, mult):
def _blk_read_lims(start, stop, buf_len):
def _read_segments_file(raw, data, idx, fi, start, stop, cals, mult, dtype='<i2', n_channels=None, offset=0, trigger_ch=None):
def read_str(fid, count=1):
def _create_chs(ch_names, cals, ch_coil, ch_kind, eog, ecg, emg, misc):
def _synthesize_stim_channel(events, n_samples):
def _summarize_str(st):
def _simplify_info(info):
def read_fiducials(fname):
def write_fiducials(fname, pts, coord_frame=FIFF.FIFFV_COORD_UNKNOWN):
def write_dig(fname, pts, coord_frame=None):
def _read_dig_fif(fid, meas_info):
def _read_dig_points(fname, comments='%', unit='auto'):
def _write_dig_points(fname, dig_points):
def _make_dig_points(nasion=None, lpa=None, rpa=None, hpi=None, extra_points=None, dig_ch_pos=None):
@verbose DCNL def read_info(fname, verbose=None):
def read_bad_channels(fid, node):
@verbose DCNL def read_meas_info(fid, tree, clean_bads=False, verbose=None):
def write_meas_info(fid, info, data_type=None, reset_range=True):
def write_info(fname, info, data_type=None, reset_range=True):
@verbose DCNL def _merge_dict_values(dicts, key, verbose=None):
@verbose DCNL def _merge_info(infos, force_update_to_first=False, verbose=None):
def create_info(ch_names, sfreq, ch_types=None, montage=None):
def _empty_info(sfreq):
def _force_update_info(info_base, info_target):
def anonymize_info(info):
def test_ascii():
def test_brainvision_data_highpass_filters():
def test_brainvision_data_lowpass_filters():
def test_brainvision_data_partially_disabled_hw_filters():
def test_brainvision_data_software_filters_latin1_global_units():
def test_brainvision_data():
def test_brainvision_vectorized_data():
def test_events():
def _read_segments_c(raw, data, idx, fi, start, stop, cals, mult):
def _read_vmrk_events(fname, event_id=None, response_trig_shift=0):
def _check_hdr_version(header):
def _check_mrk_version(header):
def _get_vhdr_info(vhdr_fname, eog, misc, scale, montage):
def read_raw_brainvision(vhdr_fname, montage=None, eog=('HEOGL', 'HEOGR', 'VEOGb'), misc='auto', scale=1.0, preload=False, response_trig_shift=0, event_id=None, verbose=None):
def get_current_comp(info):
def set_current_comp(info, comp):
def _make_compensator(info, grade):
def make_compensator(info, from_, to, exclude_comp_chs=False):
def test_compensation():
@requires_mne DCNL def test_compensation_mne():
def test_maxfilter_io():
def test_maxfilter_get_rank():
def test_pick_refs():
def test_pick_channels_regexp():
def test_pick_seeg_ecog():
def test_pick_chpi():
def test_pick_bio():
def test_pick_fnirs():
@testing.requires_testing_data DCNL def test_pick_forward_seeg_ecog():
def test_picks_by_channels():
def test_clean_info_bads():
def _test_raw_reader(reader, test_preloading=True, **kwargs):
def _test_concat(reader, *args):
@testing.requires_testing_data DCNL def test_time_index():
@slow_test DCNL def test_apply_function_verbose():
def _test_reference(raw, reref, ref_data, ref_from):
@testing.requires_testing_data DCNL def test_apply_reference():
@testing.requires_testing_data DCNL def test_set_eeg_reference():
@testing.requires_testing_data DCNL def test_set_bipolar_reference():
def _check_channel_names(inst, ref_names):
@testing.requires_testing_data DCNL def test_add_reference():
def test_coil_trans():
def test_make_info():
def test_fiducials_io():
def test_info():
def test_read_write_info():
def test_io_dig_points():
def test_make_dig_points():
def test_redundant():
def test_merge_info():
def test_check_consistency():
def test_anonymize():
@slow_test DCNL @requires_version('scipy', '0.12') DCNL def test_array_raw():
def channel_type(info, idx):
def pick_channels(ch_names, include, exclude=[]):
def pick_channels_regexp(ch_names, regexp):
def _triage_meg_pick(ch, meg):
def _triage_fnirs_pick(ch, fnirs):
def _check_meg_type(meg, allow_auto=False):
def pick_types(info, meg=True, eeg=False, stim=False, eog=False, ecg=False, emg=False, ref_meg='auto', misc=False, resp=False, chpi=False, exci=False, ias=False, syst=False, seeg=False, dipole=False, gof=False, bio=False, ecog=False, fnirs=False, include=(), exclude='bads', selection=None):
def pick_info(info, sel=(), copy=True):
def _has_kit_refs(info, picks):
def pick_channels_evoked(orig, include=[], exclude='bads'):
@verbose DCNL def pick_channels_forward(orig, include=[], exclude=[], verbose=None):
def pick_types_forward(orig, meg=True, eeg=False, ref_meg=True, seeg=False, ecog=False, include=[], exclude=[]):
def channel_indices_by_type(info):
def pick_channels_cov(orig, include=[], exclude='bads'):
def _picks_by_type(info, meg_combined=False, ref_meg=False, exclude='bads'):
def _check_excludes_includes(chs, info=None, allow_bads=False):
def _pick_data_channels(info, exclude='bads', with_ref_meg=True):
def _pick_aux_channels(info, exclude='bads'):
def _pick_data_or_ica(info):
@requires_version('scipy', '0.12') DCNL @testing.requires_testing_data DCNL def test_io_set():
def _check_fname(fname):
def _check_mat_struct(fname):
def _to_loc(ll):
def _get_info(eeg, montage, eog=()):
def read_raw_eeglab(input_fname, montage=None, eog=(), event_id=None, event_id_func='strip_to_integer', preload=False, verbose=None, uint16_codec=None):
def read_epochs_eeglab(input_fname, events=None, event_id=None, montage=None, eog=(), verbose=None, uint16_codec=None):
def read_events_eeglab(eeg, event_id=None, event_id_func='strip_to_integer', uint16_codec=None):
def _strip_to_integer(trigger):
def read_raw_cnt(input_fname, montage, eog=(), misc=(), ecg=(), emg=(), data_format='auto', date_format='mm/dd/yy', preload=False, verbose=None):
def _get_cnt_info(input_fname, eog, ecg, emg, misc, data_format, date_format):
@testing.requires_testing_data DCNL def test_data():
def _proj_equal(a, b, check_active=True):
@verbose DCNL def _read_proj(fid, node, verbose=None):
def _write_proj(fid, projs):
def _check_projs(projs, copy=True):
def make_projector(projs, ch_names, bads=(), include_active=True):
def _make_projector(projs, ch_names, bads=(), include_active=True, inplace=False):
def _normalize_proj(info):
def make_projector_info(info, include_active=True):
@verbose DCNL def activate_proj(projs, copy=True, verbose=None):
@verbose DCNL def deactivate_proj(projs, copy=True, verbose=None):
@verbose DCNL def make_eeg_average_ref_proj(info, activate=True, verbose=None):
def _has_eeg_average_ref_proj(projs, check_active=False):
def _needs_eeg_average_ref_proj(info):
@verbose DCNL def setup_proj(info, add_eeg_ref=True, activate=True, verbose=None):
def _uniquify_projs(projs, check_active=True, sort=True):
def dir_tree_find(tree, kind):
@verbose DCNL def make_dir_tree(fid, directory, start=0, indent=0, verbose=None):
def copy_tree(fidin, in_id, nodes, fidout):
def _unpack_matrix(fid, rows, cols, dtype, out_dtype):
def _unpack_simple(fid, dtype, out_dtype):
def read_char(fid, count=1):
def read_bool(fid):
def read_uint8(fid):
def read_int8(fid):
def read_uint16(fid):
def read_int16(fid):
def read_uint32(fid):
def read_int32(fid):
def read_uint64(fid):
def read_int64(fid):
def read_float(fid):
def read_double(fid):
def read_int16_matrix(fid, rows, cols):
def read_float_matrix(fid, rows, cols):
def read_double_matrix(fid, rows, cols):
def read_transform(fid):
def read_dev_header(x):
def _bti_open(fname, *args, **kwargs):
def _get_bti_dev_t(adjust=0.0, translation=(0.0, 0.02, 0.11)):
def _rename_channels(names, ecg_ch='E31', eog_ch=('E63', 'E64')):
def _read_head_shape(fname):
def _get_ctf_head_to_head_t(idx_points):
def _flip_fiducials(idx_points_nm):
def _process_bti_headshape(fname, convert=True, use_hpi=True):
def _convert_hs_points(points, t):
def _points_to_dig(points, n_idx_points, use_hpi):
def _convert_coil_trans(coil_trans, dev_ctf_t, bti_dev_t):
def _correct_offset(fid):
def _read_config(fname):
def _read_epoch(fid):
def _read_channel(fid):
def _read_event(fid):
def _read_process(fid):
def _read_assoc_file(fid):
def _read_pfid_ed(fid):
def _read_coil_def(fid):
def _read_ch_config(fid):
def _read_bti_header_pdf(pdf_fname):
def _read_bti_header(pdf_fname, config_fname, sort_by_ch_name=True):
def _correct_trans(t, check=True):
def _get_bti_info(pdf_fname, config_fname, head_shape_fname, rotation_x, translation, convert, ecg_ch, eog_ch, rename_channels=True, sort_by_ch_name=True):
@verbose DCNL def read_raw_bti(pdf_fname, config_fname='config', head_shape_fname='hs_file', rotation_x=0.0, translation=(0.0, 0.02, 0.11), convert=True, rename_channels=True, sort_by_ch_name=True, ecg_ch='E31', eog_ch=('E63', 'E64'), preload=False, verbose=None):
@testing.requires_testing_data DCNL def test_read_2500():
def test_read_config():
def test_crop_append():
def test_transforms():
@slow_test DCNL def test_raw():
def test_info_no_rename_no_reorder_no_pdf():
def test_no_conversion():
def test_bytes_io():
def test_setup_headshape():
def test_bdf_data():
@testing.requires_testing_data DCNL def test_edf_overlapping_annotations():
@testing.requires_testing_data DCNL def test_edf_reduced():
def test_edf_data():
@testing.requires_testing_data DCNL def test_stim_channel():
def test_parse_annotation():
def test_edf_annotations():
def test_edf_stim_channel():
@requires_pandas DCNL def test_to_data_frame():
@testing.requires_testing_data DCNL def test_gdf_data():
@testing.requires_testing_data DCNL def test_gdf2_data():
def get_edf_events(raw):
def _read_ch(fid, subtype, samp, dtype_byte, dtype=None):
def _parse_tal_channel(tal_channel_data):
def _get_info(fname, stim_channel, annot, annotmap, eog, misc, exclude, preload):
def _read_edf_header(fname, annot, annotmap, exclude):
def _read_gdf_header(fname, stim_channel, exclude):
def _read_annot(annot, annotmap, sfreq, data_length):
def _check_stim_channel(stim_channel, ch_names, include):
def read_raw_edf(input_fname, montage=None, eog=None, misc=None, stim_channel=True, annot=None, annotmap=None, exclude=(), preload=False, verbose=None):
@testing.requires_testing_data DCNL def test_acq_skip():
def test_fix_types():
def test_concat():
@testing.requires_testing_data DCNL def test_hash_raw():
@testing.requires_testing_data DCNL def test_maxshield():
@testing.requires_testing_data DCNL def test_subject_info():
@testing.requires_testing_data DCNL def test_copy_append():
@slow_test DCNL @testing.requires_testing_data DCNL def test_rank_estimation():
@testing.requires_testing_data DCNL def test_output_formats():
def _compare_combo(raw, new, times, n_times):
@slow_test DCNL @testing.requires_testing_data DCNL def test_multiple_files():
@testing.requires_testing_data DCNL def test_split_files():
def test_load_bad_channels():
@slow_test DCNL @testing.requires_testing_data DCNL def test_io_raw():
@testing.requires_testing_data DCNL def test_io_complex():
@testing.requires_testing_data DCNL def test_getitem():
@testing.requires_testing_data DCNL def test_proj():
@testing.requires_testing_data DCNL def test_preload_modify():
@slow_test DCNL @testing.requires_testing_data DCNL def test_filter():
def test_filter_picks():
@testing.requires_testing_data DCNL def test_crop():
@testing.requires_testing_data DCNL def test_resample():
@testing.requires_testing_data DCNL def test_hilbert():
@testing.requires_testing_data DCNL def test_raw_copy():
@requires_pandas DCNL def test_to_data_frame():
def test_add_channels():
@testing.requires_testing_data DCNL def test_save():
@testing.requires_testing_data DCNL def test_with_statement():
def test_compensation_raw():
@requires_mne DCNL def test_compensation_raw_mne():
@testing.requires_testing_data DCNL def test_drop_channels_mixin():
@testing.requires_testing_data DCNL def test_pick_channels_mixin():
@testing.requires_testing_data DCNL def test_equalize_channels():
def _check_entry(first, nent):
def read_raw_fif(fname, allow_maxshield=False, preload=False, verbose=None):
def _copy_channel(inst, ch_name, new_ch_name):
def _apply_reference(inst, ref_from, ref_to=None):
def add_reference_channels(inst, ref_channels, copy=True):
@verbose DCNL def set_eeg_reference(inst, ref_channels='average', copy=True, projection=None, verbose=None):
@verbose DCNL def set_bipolar_reference(inst, anode, cathode, ch_name=None, ch_info=None, copy=True, verbose=None):
def read_mrk(fname):
def read_sns(fname):
def test_data():
def test_epochs():
def test_raw_events():
def test_ch_loc():
def test_hsp_elp():
def test_decimate():
def test_io_mrk():
def _default_stim_chs(info):
def _make_stim_channel(trigger_chs, slope, threshold, stim_code, trigger_values):
def _set_dig_kit(mrk, elp, hsp):
def get_kit_info(rawfile):
def read_raw_kit(input_fname, mrk=None, elp=None, hsp=None, stim='>', slope='-', stimthresh=1, preload=False, stim_code='binary', verbose=None):
def read_epochs_kit(input_fname, events, event_id=None, mrk=None, elp=None, hsp=None, verbose=None):
def _extract(tags, filepath=None, obj=None):
def _get_gains(filepath):
def _get_ep_info(filepath):
def _get_blocks(filepath):
def _get_signalfname(filepath, infontype):
def _block_r(fid):
def _read_events(input_fname, info):
def _read_mff_events(filename, sfreq):
def _parse_xml(xml_file):
def _xml2list(root):
def _ns(s):
def _xml2dict(root):
def _ns2py_time(nstime):
def _combine_triggers(data, remapping=None):
def _read_mff_header(filepath):
def _read_header(input_fname):
def _read_locs(filepath, chs, egi_info):
@verbose DCNL def _read_raw_egi_mff(input_fname, montage=None, eog=None, misc=None, include=None, exclude=None, preload=False, channel_naming='E%d', verbose=None):
@requires_testing_data DCNL def test_io_egi_mff():
def test_io_egi():
def _read_header(fid):
def _read_events(fid, info):
@verbose DCNL def read_raw_egi(input_fname, montage=None, eog=None, misc=None, include=None, exclude=None, preload=False, channel_naming='E%d', verbose=None):
@verbose DCNL def is_equal(first, second, verbose=None):
def _fiff_get_fid(fname):
def _get_next_fname(fid, fname, tree):
@verbose DCNL def fiff_open(fname, preload=False, verbose=None):
def show_fiff(fname, indent=' DCSP  DCSP  DCSP  DCSP ', read_limit=np.inf, max_str=30, output=str, tag=None, verbose=None):
def _find_type(value, fmts=['FIFF_'], exclude=['FIFF_UNIT']):
def _show_tree(fid, tree, indent, level, read_limit, max_str, tag_id):
def _write(fid, data, kind, data_size, FIFFT_TYPE, dtype):
def _get_split_size(split_size):
def write_int(fid, kind, data):
def write_double(fid, kind, data):
def write_float(fid, kind, data):
def write_dau_pack16(fid, kind, data):
def write_complex64(fid, kind, data):
def write_complex128(fid, kind, data):
def write_julian(fid, kind, data):
def write_string(fid, kind, data):
def write_name_list(fid, kind, data):
def write_float_matrix(fid, kind, mat):
def write_double_matrix(fid, kind, mat):
def write_int_matrix(fid, kind, mat):
def get_machid():
def get_new_file_id():
def write_id(fid, kind, id_=None):
def start_block(fid, kind):
def end_block(fid, kind):
def start_file(fname, id_=None):
def check_fiff_length(fid, close=True):
def end_file(fid):
def write_coord_trans(fid, trans):
def write_ch_info(fid, ch):
def write_dig_points(fid, dig, block=False, coord_frame=None):
def write_float_sparse_rcs(fid, kind, mat):
def _generate_meas_id():
def _date_now():
def _make_ctf_name(directory, extra, raise_error=True):
def _read_double(fid, n=1):
def _read_string(fid, n_bytes, decode=True):
def _read_ustring(fid, n_bytes):
def _read_int2(fid):
def _read_int(fid):
def _move_to_next(fid, byte=8):
def _read_filter(fid):
def _read_channel(fid):
def _read_comp_coeff(fid, d):
def _read_res4(dsdir):
def _pick_isotrak_and_hpi_coils(res4, coils, t):
def _convert_time(date_str, time_str):
def _get_plane_vectors(ez):
def _at_origin(x):
def _convert_channel_info(res4, t, use_eeg_pos):
def _comp_sort_keys(c):
def _check_comp(comp):
def _conv_comp(comp, first, last, chs):
def _convert_comp_data(res4):
def _pick_eeg_pos(c):
def _add_eeg_pos(eeg, t, c):
def _compose_meas_info(res4, coils, trans, eeg):
@slow_test DCNL @testing.requires_testing_data DCNL def test_read_ctf():
@spm_face.requires_spm_data DCNL def test_read_spm_ctf():
def _read_one_coil_point(fid):
def _read_hc(directory):
def read_raw_ctf(directory, system_clock='truncate', preload=False, verbose=None):
def _get_sample_info(fname, res4, system_clock):
def _make_transform_card(fro, to, r_lpa, r_nasion, r_rpa):
def _quaternion_align(from_frame, to_frame, from_pts, to_pts):
def _make_ctf_coord_trans_set(res4, coils):
def _read_eeg(directory):
def _read_pos(directory, transformations):
def _transpose_named_matrix(mat):
@verbose DCNL def _read_named_matrix(fid, node, matkind, indent=' DCSP  DCSP  DCSP  DCSP ', transpose=False, verbose=None):
def write_named_matrix(fid, kind, mat):
def read_raw_nicolet(input_fname, ch_type, montage=None, eog=(), ecg=(), emg=(), misc=(), preload=False, verbose=None):
def _get_nicolet_info(fname, ch_type, eog, ecg, emg, misc):
def test_data():
def _read_proc_history(fid, tree):
def _write_proc_history(fid, info):
def _read_ctc(fname):
def _read_maxfilter_record(fid, tree):
def _write_maxfilter_record(fid, record):
def _get_sss_rank(sss):
def _safe_svd(A, **kwargs):
def _get_read_geometry():
def _read_geometry(filepath, read_metadata=False, read_stamp=False):
def _sosfiltfilt(sos, x, axis=(-1), padtype='odd', padlen=None):
def axis_slice(a, start=None, stop=None, step=None, axis=(-1)):
def axis_reverse(a, axis=(-1)):
def _validate_pad(padtype, padlen, x, axis, ntaps):
def _validate_sos(sos):
def odd_ext(x, n, axis=(-1)):
def even_ext(x, n, axis=(-1)):
def const_ext(x, n, axis=(-1)):
def sosfilt_zi(sos):
def sosfilt(sos, x, axis=(-1), zi=None):
def get_sosfiltfilt():
def minimum_phase(h):
def _sph_harm(order, degree, az, pol):
def _get_sph_harm():
def _spectrogram(x, fs=1.0, window=('tukey', 0.25), nperseg=256, noverlap=None, nfft=None, detrend='constant', return_onesided=True, scaling='density', axis=(-1), mode='psd'):
def _spectral_helper(x, y, fs=1.0, window='hann', nperseg=256, noverlap=None, nfft=None, detrend='constant', return_onesided=True, scaling='spectrum', axis=(-1), mode='psd'):
def _fft_helper(x, win, detrend_func, nperseg, noverlap, nfft):
def get_spectrogram():
def assert_true(expr, msg='False DCSP is DCSP not DCSP True'):
def assert_is(expr1, expr2, msg=None):
def assert_is_not(expr1, expr2, msg=None):
def assert_raises_regex(exception_class, expected_regexp, callable_obj=None, *args, **kwargs):
def _read_volume_info(fobj):
def _serialize_volume_info(volume_info):
def tridisolve(d, e, b, overwrite_b=True):
def tridi_inverse_iteration(d, e, w, x0=None, rtol=1e-08):
def dpss_windows(N, half_nbw, Kmax, low_bias=True, interp_from=None, interp_kind='linear'):
def _psd_from_mt_adaptive(x_mt, eigvals, freq_mask, max_iter=150, return_weights=False):
def _psd_from_mt(x_mt, weights):
def _csd_from_mt(x_mt, y_mt, weights_x, weights_y):
def _mt_spectra(x, dpss, sfreq, n_fft=None):
@verbose DCNL def psd_array_multitaper(x, sfreq, fmin=0, fmax=np.inf, bandwidth=None, adaptive=False, low_bias=True, normalization='length', n_jobs=1, verbose=None):
@verbose DCNL def tfr_array_multitaper(epoch_data, sfreq, frequencies, n_cycles=7.0, zero_mean=True, time_bandwidth=None, use_fft=True, decim=1, output='complex', n_jobs=1, verbose=None):
@verbose DCNL def csd_epochs(epochs, mode='multitaper', fmin=0, fmax=np.inf, fsum=True, tmin=None, tmax=None, n_fft=None, mt_bandwidth=None, mt_adaptive=False, mt_low_bias=True, projs=None, verbose=None):
@verbose DCNL def csd_array(X, sfreq, mode='multitaper', fmin=0, fmax=np.inf, fsum=True, n_fft=None, mt_bandwidth=None, mt_adaptive=False, mt_low_bias=True, verbose=None):
def _compute_csd_params(n_times, sfreq, mode, mt_bandwidth, mt_low_bias, mt_adaptive):
def _csd_array(x, sfreq, window_fun, eigvals, freq_mask, freq_mask_mt, n_fft, mode, mt_adaptive):
@verbose DCNL def stft(x, wsize, tstep=None, verbose=None):
def istft(X, tstep=None, Tx=None):
def stftfreq(wsize, sfreq=None):
def stft_norm2(X):
def morlet(sfreq, freqs, n_cycles=7.0, sigma=None, zero_mean=False):
def _make_dpss(sfreq, freqs, n_cycles=7.0, time_bandwidth=4.0, zero_mean=False):
def _cwt(X, Ws, mode='same', decim=1, use_fft=True):
def _compute_tfr(epoch_data, frequencies, sfreq=1.0, method='morlet', n_cycles=7.0, zero_mean=None, time_bandwidth=None, use_fft=True, decim=1, output='complex', n_jobs=1, verbose=None):
def _check_tfr_param(frequencies, sfreq, method, zero_mean, n_cycles, time_bandwidth, use_fft, decim, output):
def _time_frequency_loop(X, Ws, output, use_fft, mode, decim):
def cwt(X, Ws, use_fft=True, mode='same', decim=1):
def _tfr_aux(method, inst, freqs, decim, return_itc, picks, average, **tfr_params):
@verbose DCNL def tfr_morlet(inst, freqs, n_cycles, use_fft=False, return_itc=True, decim=1, n_jobs=1, picks=None, zero_mean=True, average=True, verbose=None):
@verbose DCNL def tfr_array_morlet(epoch_data, sfreq, frequencies, n_cycles=7.0, zero_mean=False, use_fft=True, decim=1, output='complex', n_jobs=1, verbose=None):
@verbose DCNL def tfr_multitaper(inst, freqs, n_cycles, time_bandwidth=4.0, use_fft=True, return_itc=True, decim=1, n_jobs=1, picks=None, average=True, verbose=None):
def combine_tfr(all_tfr, weights='nave'):
def _get_data(inst, return_itc):
def _prepare_picks(info, data, picks):
def _centered(arr, newsize):
def _preproc_tfr(data, times, freqs, tmin, tmax, fmin, fmax, mode, baseline, vmin, vmax, dB, sfreq):
def _check_decim(decim):
def write_tfrs(fname, tfr, overwrite=False):
def _prepare_write_tfr(tfr, condition):
def read_tfrs(fname, condition=None):
def test_psd_nan():
def test_psd():
@slow_test DCNL def test_compares_psd():
def _get_data(mode='real'):
def test_csd_epochs():
def test_csd_epochs_on_artificial_data():
def test_compute_csd():
def test_csd_on_artificial_data():
def test_stft():
@requires_statsmodels DCNL def test_yule_walker():
def test_ar_raw():
def test_stockwell_check_input():
def test_stockwell_st_no_zero_pad():
def test_stockwell_core():
def test_stockwell_api():
def test_morlet():
def test_time_frequency():
def test_dpsswavelet():
@slow_test DCNL def test_tfr_multitaper():
def test_crop():
@requires_h5py DCNL def test_io():
def test_plot():
def test_add_channels():
def test_compute_tfr():
@requires_nitime DCNL def test_dpss_windows():
@requires_nitime DCNL def test_multitaper_psd():
def _psd_func(epoch, noverlap, n_per_seg, nfft, fs, freq_mask, func):
def _check_nfft(n, n_fft, n_per_seg, n_overlap):
def _check_psd_data(inst, tmin, tmax, picks, proj, reject_by_annotation=False):
@verbose DCNL def psd_array_welch(x, sfreq, fmin=0, fmax=np.inf, n_fft=256, n_overlap=0, n_per_seg=None, n_jobs=1, verbose=None):
@verbose DCNL def psd_welch(inst, fmin=0, fmax=np.inf, tmin=None, tmax=None, n_fft=256, n_overlap=0, n_per_seg=None, picks=None, proj=False, n_jobs=1, reject_by_annotation=True, verbose=None):
@verbose DCNL def psd_multitaper(inst, fmin=0, fmax=np.inf, tmin=None, tmax=None, bandwidth=None, adaptive=False, low_bias=True, normalization='length', picks=None, proj=False, n_jobs=1, verbose=None):
def _yule_walker(X, order=1):
@verbose DCNL def fit_iir_model_raw(raw, order=2, picks=None, tmin=None, tmax=None, verbose=None):
def _check_input_st(x_in, n_fft):
def _precompute_st_windows(n_samp, start_f, stop_f, sfreq, width):
def _st(x, start_f, windows):
def _st_power_itc(x, start_f, compute_itc, zero_pad, decim, W):
def tfr_array_stockwell(data, sfreq, fmin=None, fmax=None, n_fft=None, width=1.0, decim=1, return_itc=False, n_jobs=1):
@verbose DCNL def tfr_stockwell(inst, fmin=None, fmax=None, n_fft=None, width=1.0, decim=1, return_itc=False, n_jobs=1, verbose=None):
def description():
def description():
def description():
def description():
def description():
def _dataset_version(path, name):
def _get_path(path, key, name):
def _do_path_update(path, update_path, key, name):
def _data_path(path=None, force_update=False, update_path=True, download=True, name=None, check_version=False, return_version=False, archive_name=None):
def _get_version(name):
def has_dataset(name):
@verbose DCNL def _download_all_example_data(verbose=True):
@verbose DCNL def fetch_hcp_mmp_parcellation(subjects_dir=None, verbose=None):
@verbose DCNL def data_path(path=None, force_update=False, update_path=True, download=True, verbose=None):
def get_version():
def test_datasets():
@requires_good_network DCNL def test_megsim():
@requires_good_network DCNL def test_downloads():
@verbose DCNL def data_path(url, path=None, force_update=False, update_path=None, verbose=None):
@verbose DCNL def load_data(subject, runs, path=None, force_update=False, update_path=None, base_url=EEGMI_URL, verbose=None):
@verbose DCNL def data_path(url, path=None, force_update=False, update_path=None, verbose=None):
@verbose DCNL def load_data(condition='visual', data_format='raw', data_type='experimental', path=None, force_update=False, update_path=None, verbose=None):
def url_match(condition, data_format, data_type):
def _load_all_data():
@testing.requires_testing_data DCNL def test_chpi_adjust():
@testing.requires_testing_data DCNL def test_read_write_head_pos():
@testing.requires_testing_data DCNL def test_hpi_info():
def _assert_quats(actual, desired, dist_tol=0.003, angle_tol=5.0):
def _decimate_chpi(raw, decim=4):
@slow_test DCNL @testing.requires_testing_data DCNL def test_calculate_chpi_positions():
@testing.requires_testing_data DCNL def test_calculate_chpi_positions_on_chpi5_in_one_second_steps():
@slow_test DCNL @testing.requires_testing_data DCNL def test_calculate_chpi_positions_on_chpi5_in_shorter_steps():
def test_simulate_calculate_chpi_positions():
@testing.requires_testing_data DCNL def test_calculate_chpi_coil_locs():
@testing.requires_testing_data DCNL def test_chpi_subtraction():
@testing.requires_testing_data DCNL def test_annotations():
@testing.requires_testing_data DCNL def test_raw_reject():
def test_fix_stim():
def test_add_events():
def test_merge_events():
def test_io_events():
def test_find_events():
def test_pick_events():
def test_make_fixed_length_events():
def test_define_events():
@testing.requires_testing_data DCNL def test_acqparser():
@testing.requires_testing_data DCNL def test_acqparser_averaging():
def test_helmet():
@testing.requires_testing_data DCNL def test_head():
def test_huge_cross():
def test_compute_nearest():
@slow_test DCNL @testing.requires_testing_data DCNL def test_make_morph_maps():
@testing.requires_testing_data DCNL def test_io_surface():
@testing.requires_testing_data DCNL def test_read_curv():
@requires_tvtk DCNL @requires_mayavi DCNL def test_decimate_surface():
@requires_mne DCNL def test_mne_c_design():
@requires_version('scipy', '0.16') DCNL def test_estimate_ringing():
def test_1d_filter():
@requires_version('scipy', '0.16') DCNL def test_iir_stability():
def test_notch_filters():
def test_resample():
def test_resample_stim_channel():
@requires_version('scipy', '0.16') DCNL @slow_test DCNL def test_filters():
def test_filter_auto():
def test_cuda():
def test_detrend():
def test_interp2():
def _compare_dipoles(orig, new):
def _check_dipole(dip, n_dipoles):
@testing.requires_testing_data DCNL def test_io_dipoles():
@testing.requires_testing_data DCNL def test_dipole_fitting_ctf():
@slow_test DCNL @testing.requires_testing_data DCNL @requires_mne DCNL def test_dipole_fitting():
@testing.requires_testing_data DCNL def test_dipole_fitting_fixed():
@testing.requires_testing_data DCNL def test_len_index_dipoles():
@testing.requires_testing_data DCNL def test_min_distance_fit_dipole():
def _compute_depth(dip, fname_bem, fname_trans, subject, subjects_dir):
@testing.requires_testing_data DCNL def test_accuracy():
@testing.requires_testing_data DCNL def test_dipole_fixed():
def _check_roundtrip_fixed(dip):
def test_get_phantom_dipoles():
@testing.requires_testing_data DCNL def test_confidence():
@requires_version('scipy', '0.11') DCNL def test_module_nesting():
def test_parse_ave():
def check_parameters_match(func, doc=None):
@requires_numpydoc DCNL def test_docstring_parameters():
def test_tabs():
def test_documented():
def _get_data(x, ch_idx):
def _check_snr(actual, desired, picks, min_tol, med_tol, msg, kind='MEG'):
def assert_meg_snr(actual, desired, min_tol, med_tol=500.0, chpi_med_tol=500.0, msg=None):
def assert_snr(actual, desired, tol):
def _dig_sort_key(dig):
def assert_naming(warns, fname, n_warn):
def _compare_bem_surfaces(surfs_1, surfs_2):
def _compare_bem_solutions(sol_a, sol_b):
@testing.requires_testing_data DCNL def test_io_bem():
def test_make_sphere_model():
@testing.requires_testing_data DCNL def test_bem_model():
@slow_test DCNL @testing.requires_testing_data DCNL def test_bem_solution():
def test_fit_sphere_to_headshape():
@requires_freesurfer DCNL @testing.requires_testing_data DCNL def test_make_flash_bem():
@slow_test DCNL @testing.requires_testing_data DCNL @requires_PIL DCNL def test_render_report():
@testing.requires_testing_data DCNL @requires_mayavi DCNL @requires_PIL DCNL def test_render_add_sections():
@slow_test DCNL @testing.requires_testing_data DCNL @requires_mayavi DCNL @requires_nibabel() DCNL def test_render_mri():
@testing.requires_testing_data DCNL @requires_nibabel() DCNL def test_render_mri_without_bem():
@testing.requires_testing_data DCNL @requires_nibabel() DCNL def test_add_htmls_to_section():
def test_add_slider_to_section():
def test_validate_input():
@testing.requires_testing_data DCNL def test_spatial_inter_hemi_connectivity():
@slow_test DCNL @testing.requires_testing_data DCNL def test_volume_stc():
@testing.requires_testing_data DCNL def test_expand():
def _test_stc_integrety(stc):
def test_stc_attributes():
def test_io_stc():
@requires_h5py DCNL def test_io_stc_h5():
def test_io_w():
def test_stc_arithmetic():
@slow_test DCNL @testing.requires_testing_data DCNL def test_stc_methods():
@testing.requires_testing_data DCNL def test_extract_label_time_course():
@slow_test DCNL @testing.requires_testing_data DCNL def test_morph_data():
def _my_trans(data):
def test_transform_data():
def test_transform():
@requires_sklearn DCNL def test_spatio_temporal_tris_connectivity():
@testing.requires_testing_data DCNL def test_spatio_temporal_src_connectivity():
@requires_pandas DCNL def test_to_data_frame():
def test_get_peak():
@testing.requires_testing_data DCNL def test_mixed_stc():
def test_decim():
@requires_version('scipy', '0.14') DCNL def test_savgol_filter():
def test_hash_evoked():
@slow_test DCNL def test_io_evoked():
def test_shift_time_evoked():
def test_evoked_resample():
def test_evoked_detrend():
@requires_pandas DCNL def test_to_data_frame():
def test_evoked_proj():
def test_get_peak():
def test_drop_channels_mixin():
def test_pick_channels_mixin():
def test_equalize_channels():
def test_arithmetic():
def test_array_epochs():
def test_time_as_index():
def test_add_channels():
def test_evoked_baseline():
def test_cov_mismatch():
def test_cov_order():
def _assert_reorder(cov_new, cov_orig, order):
def test_ad_hoc_cov():
def test_io_cov():
def test_cov_estimation_on_raw():
@slow_test DCNL @requires_sklearn_0_15 DCNL def test_cov_estimation_on_raw_reg():
@slow_test DCNL def test_cov_estimation_with_triggers():
def test_arithmetic_cov():
def test_regularize_cov():
def test_whiten_evoked():
@slow_test DCNL def test_rank():
def test_cov_scaling():
@requires_sklearn_0_15 DCNL def test_auto_low_rank():
@slow_test DCNL @requires_sklearn_0_15 DCNL def test_compute_covariance_auto_reg():
def test_tps():
@testing.requires_testing_data DCNL def test_get_trans():
@testing.requires_testing_data DCNL def test_io_trans():
def test_get_ras_to_neuromag_trans():
def _cartesian_to_sphere(x, y, z):
def _sphere_to_cartesian(theta, phi, r):
def test_sph_to_cart():
def _polar_to_cartesian(theta, r):
def test_polar_to_cartesian():
def _topo_to_sphere(theta, radius):
def test_topo_to_sph():
def test_rotation():
def test_rotation3d_align_z_axis():
@testing.requires_testing_data DCNL def test_combine():
def test_quaternions():
def test_vector_rotation():
def test_filtfilt():
@requires_version('scipy', '0.17.1') DCNL def test_spherical_harmonics():
def _get_data(preload=False):
def test_hierarchical():
@slow_test DCNL @testing.requires_testing_data DCNL def test_average_movements():
def test_reject():
def test_decim():
def test_base_epochs():
@requires_version('scipy', '0.14') DCNL def test_savgol_filter():
def test_epochs_hash():
def test_event_ordering():
def test_epochs_bad_baseline():
def test_epoch_combine_ids():
def test_epoch_multi_ids():
def test_read_epochs_bad_events():
@slow_test DCNL def test_read_write_epochs():
def test_epochs_proj():
def test_evoked_arithmetic():
def test_evoked_io_from_epochs():
def test_evoked_standard_error():
def test_reject_epochs():
def test_preload_epochs():
def test_indexing_slicing():
def test_comparision_with_c():
def test_crop():
def test_resample():
def test_detrend():
def test_bootstrap():
def test_epochs_copy():
def test_iter_evoked():
def test_subtract_evoked():
def test_epoch_eq():
def test_access_by_name():
@requires_pandas DCNL def test_to_data_frame():
def test_epochs_proj_mixin():
def test_delayed_epochs():
def test_drop_epochs():
def test_drop_epochs_mult():
def test_contains():
def test_drop_channels_mixin():
def test_pick_channels_mixin():
def test_equalize_channels():
def test_illegal_event_id():
def test_add_channels_epochs():
def test_array_epochs():
def test_concatenate_epochs():
def test_add_channels():
def test_seeg_ecog():
def test_default_values():
def _assert_line_endings(dir_):
def test_line_endings():
def test_coregister_fiducials():
@requires_freesurfer DCNL @requires_version('scipy', '0.11') DCNL def test_scale_mri():
def test_fit_matched_points():
def test_fit_point_cloud():
def test_handle_default():
def test_bad_proj():
def _check_warnings(raw, events, picks=None, count=3):
@testing.requires_testing_data DCNL def test_sensitivity_maps():
def test_compute_proj_epochs():
@slow_test DCNL def test_compute_proj_raw():
def test_make_eeg_average_ref_proj():
def test_has_eeg_average_ref_proj():
def test_needs_eeg_average_ref_proj():
def _stc_to_label(stc, src, smooth, subjects_dir=None):
def test_copy():
def test_label_subject():
def test_label_addition():
@testing.requires_testing_data DCNL def test_label_in_src():
@testing.requires_testing_data DCNL def test_label_io_and_time_course_estimates():
@testing.requires_testing_data DCNL def test_label_io():
def _assert_labels_equal(labels_a, labels_b, ignore_pos=False):
@testing.requires_testing_data DCNL def test_annot_io():
@testing.requires_testing_data DCNL def test_read_labels_from_annot():
@testing.requires_testing_data DCNL def test_read_labels_from_annot_annot2labels():
@testing.requires_testing_data DCNL def test_write_labels_to_annot():
@requires_sklearn DCNL @testing.requires_testing_data DCNL def test_split_label():
@slow_test DCNL @testing.requires_testing_data DCNL @requires_sklearn DCNL def test_stc_to_label():
@slow_test DCNL @testing.requires_testing_data DCNL def test_morph():
@testing.requires_testing_data DCNL def test_grow_labels():
@testing.requires_testing_data DCNL def test_label_sign_flip():
@testing.requires_testing_data DCNL def test_label_center_of_mass():
def test_buggy_mkl():
def test_sys_info():
def test_get_call_line():
def test_object_size():
def test_get_inst_data():
def test_misc():
@requires_mayavi DCNL def test_check_mayavi():
def test_run_tests_if_main():
def test_hash():
def test_md5sum():
def test_tempdir():
def test_estimate_rank():
def test_logging():
def test_config():
@testing.requires_testing_data DCNL def test_show_fiff():
def test_deprecated():
def _test_fetch(url):
@requires_good_network DCNL def test_fetch_file_html():
@requires_ftp DCNL @requires_good_network DCNL def test_fetch_file_ftp():
def test_sum_squared():
def test_sizeof_fmt():
def test_url_to_local_path():
def test_check_type_picks():
def test_compute_corr():
def test_create_slices():
def test_time_mask():
def test_random_permutation():
def test_copy_doc():
def test_copy_function_doc_to_method_doc():
def test_open_docs():
def test_read_selection():
@testing.requires_testing_data DCNL @requires_nibabel(vox2ras_tkr=True) DCNL def test_mgz_header():
@requires_version('scipy', '0.11') DCNL def test_add_patch_info():
@testing.requires_testing_data DCNL @requires_version('scipy', '0.11') DCNL def test_add_source_space_distances_limited():
@slow_test DCNL @testing.requires_testing_data DCNL @requires_version('scipy', '0.11') DCNL def test_add_source_space_distances():
@testing.requires_testing_data DCNL @requires_mne DCNL def test_discrete_source_space():
@slow_test DCNL @testing.requires_testing_data DCNL def test_volume_source_space():
@testing.requires_testing_data DCNL @requires_mne DCNL def test_other_volume_source_spaces():
@testing.requires_testing_data DCNL def test_triangle_neighbors():
def test_accumulate_normals():
@slow_test DCNL @testing.requires_testing_data DCNL def test_setup_source_space():
@testing.requires_testing_data DCNL def test_read_source_spaces():
@slow_test DCNL @testing.requires_testing_data DCNL def test_write_source_space():
@testing.requires_testing_data DCNL @requires_fs_or_nibabel DCNL def test_vertex_to_mni():
@testing.requires_testing_data DCNL @requires_freesurfer DCNL @requires_nibabel() DCNL def test_vertex_to_mni_fs_nibabel():
@testing.requires_testing_data DCNL @requires_freesurfer DCNL @requires_nibabel() DCNL def test_get_volume_label_names():
@testing.requires_testing_data DCNL @requires_freesurfer DCNL @requires_nibabel() DCNL def test_source_space_from_label():
@testing.requires_testing_data DCNL @requires_freesurfer DCNL @requires_nibabel() DCNL def test_read_volume_from_src():
@testing.requires_testing_data DCNL @requires_freesurfer DCNL @requires_nibabel() DCNL def test_combine_source_spaces():
@testing.requires_testing_data DCNL def test_morph_source_spaces():
@slow_test DCNL @testing.requires_testing_data DCNL def test_morphed_source_space_return():
@verbose DCNL def read_selection(name, fname=None, info=None, verbose=None):
def _divide_to_regions(info, add_stim=True):
def _divide_side(lobe, x):
def _mxwarn(msg):
@verbose DCNL def apply_maxfilter(in_fname, out_fname, origin=None, frame='device', bad=None, autobad='off', skip=None, force=False, st=False, st_buflen=16.0, st_corr=0.96, mv_trans=None, mv_comp=False, mv_headpos=False, mv_hp=None, mv_hpistep=None, mv_hpisubt=None, mv_hpicons=True, linefreq=None, cal=None, ctc=None, mx_args='', overwrite=True, verbose=None):
def _get_window(start, end):
def _fix_artifact(data, window, picks, first_samp, last_samp, mode):
def fix_stim_artifact(inst, events=None, event_id=None, tmin=0.0, tmax=0.01, mode='linear', stim_channel=None):
def test_peak_finder():
@requires_sklearn DCNL def test_ica_full_data_recovery():
@requires_sklearn DCNL def test_ica_rank_reduction():
@requires_sklearn DCNL def test_ica_reset():
@requires_sklearn DCNL def test_ica_core():
@slow_test DCNL @requires_sklearn DCNL def test_ica_additional():
@requires_sklearn DCNL def test_run_ica():
@requires_sklearn DCNL def test_ica_reject_buffer():
@requires_sklearn DCNL def test_ica_twice():
@requires_sklearn DCNL def test_fit_params():
@requires_sklearn DCNL def test_bad_channels():
@requires_sklearn DCNL def test_eog_channel():
@requires_sklearn DCNL def test_max_pca_components_none():
@requires_sklearn DCNL def test_n_components_none():
@requires_sklearn DCNL def test_n_components_and_max_pca_components_none():
def test_find_ecg():
def test_compute_proj_ecg():
def test_compute_proj_eog():
def test_compute_proj_parallel():
def get_data(n_trials, j_extent):
def test_ctps():
@testing.requires_testing_data DCNL def test_read_write_fine_cal():
def test_fix_stim_artifact():
def generate_data_for_comparing_against_eeglab_infomax(ch_type, random_state):
@slow_test DCNL @testing.requires_testing_data DCNL def test_mne_python_vs_eeglab():
def center_and_norm(x, axis=(-1)):
@requires_sklearn DCNL def test_infomax_blowup():
@requires_sklearn DCNL def test_infomax_simple():
def test_infomax_weights_ini():
@requires_sklearn DCNL def test_non_square_infomax():
def test_find_eog():
def _get_data():
def test_xdawn():
def test_xdawn_fit():
def test_xdawn_apply_transform():
@requires_sklearn DCNL def test_xdawn_regularization():
@requires_sklearn DCNL def test_XdawnTransformer():
def _assert_n_free(raw_sss, lower, upper=None):
def read_crop(fname, lims=(0, None)):
@slow_test DCNL @testing.requires_testing_data DCNL def test_movement_compensation():
@slow_test DCNL def test_other_systems():
def test_spherical_conversions():
@testing.requires_testing_data DCNL def test_multipolar_bases():
@testing.requires_testing_data DCNL def test_basic():
@testing.requires_testing_data DCNL def test_maxwell_filter_additional():
@slow_test DCNL @testing.requires_testing_data DCNL def test_bads_reconstruction():
@buggy_mkl_svd DCNL @requires_svd_convergence DCNL @testing.requires_testing_data DCNL def test_spatiotemporal():
@slow_test DCNL @requires_svd_convergence DCNL @testing.requires_testing_data DCNL def test_spatiotemporal_only():
@testing.requires_testing_data DCNL def test_fine_calibration():
@slow_test DCNL @testing.requires_testing_data DCNL def test_regularization():
def _check_reg_match(sss_py, sss_mf, comp_tol):
@testing.requires_testing_data DCNL def test_cross_talk():
@testing.requires_testing_data DCNL def test_head_translation():
def _assert_shielding(raw_sss, erm_power, shielding_factor, meg='mag'):
@buggy_mkl_svd DCNL @slow_test DCNL @requires_svd_convergence DCNL @testing.requires_testing_data DCNL def test_shielding_factor():
@slow_test DCNL @requires_svd_convergence DCNL @testing.requires_testing_data DCNL def test_all():
@slow_test DCNL @requires_svd_convergence DCNL @testing.requires_testing_data DCNL def test_triux():
def _safe_del_key(dict_, key):
@verbose DCNL def _compute_exg_proj(mode, raw, raw_event, tmin, tmax, n_grad, n_mag, n_eeg, l_freq, h_freq, average, filter_length, n_jobs, ch_name, reject, flat, bads, avg_ref, no_proj, event_id, exg_l_freq, exg_h_freq, tstart, qrs_threshold, filter_method, iir_params=None, verbose=None):
@verbose DCNL def compute_proj_ecg(raw, raw_event=None, tmin=(-0.2), tmax=0.4, n_grad=2, n_mag=2, n_eeg=2, l_freq=1.0, h_freq=35.0, average=False, filter_length='10s', n_jobs=1, ch_name=None, reject=dict(grad=2e-10, mag=3e-12, eeg=5e-05, eog=0.00025), flat=None, bads=[], avg_ref=False, no_proj=False, event_id=999, ecg_l_freq=5, ecg_h_freq=35, tstart=0.0, qrs_threshold='auto', filter_method='fft', iir_params=None, copy=True, verbose=None):
@verbose DCNL def compute_proj_eog(raw, raw_event=None, tmin=(-0.2), tmax=0.2, n_grad=2, n_mag=2, n_eeg=2, l_freq=1.0, h_freq=35.0, average=False, filter_length='10s', n_jobs=1, reject=dict(grad=2e-10, mag=3e-12, eeg=0.0005, eog=np.inf), flat=None, bads=[], avg_ref=False, no_proj=False, event_id=998, eog_l_freq=1, eog_h_freq=10, tstart=0.0, filter_method='fft', iir_params=None, ch_name=None, copy=True, verbose=None):
def _construct_signal_from_epochs(epochs, events, sfreq, tmin):
def _least_square_evoked(epochs_data, events, tmin, sfreq):
def _fit_xdawn(epochs_data, y, n_components, reg=None, signal_cov=None, events=None, tmin=0.0, sfreq=1.0):
@verbose DCNL def infomax(data, weights=None, l_rate=None, block=None, w_change=1e-12, anneal_deg=60.0, anneal_step=0.9, extended=True, n_subgauss=1, kurt_size=6000, ext_blocks=1, max_iter=200, random_state=None, blowup=10000.0, blowup_fac=0.5, n_small_angle=20, use_bias=True, verbose=None):
@verbose DCNL def find_eog_events(raw, event_id=998, l_freq=1, h_freq=10, filter_length='10s', ch_name=None, tstart=0, reject_by_annotation=False, verbose=None):
def _find_eog_events(eog, event_id, l_freq, h_freq, sampling_rate, first_samp, filter_length='10s', tstart=0.0):
def _get_eog_channel_index(ch_name, inst):
@verbose DCNL def create_eog_epochs(raw, ch_name=None, event_id=998, picks=None, tmin=(-0.5), tmax=0.5, l_freq=1, h_freq=10, reject=None, flat=None, baseline=None, preload=True, reject_by_annotation=True, verbose=None):
def _compute_normalized_phase(data):
def ctps(data, is_raw=True):
def kuiper(data, dtype=np.float64):
def _prob_kuiper(d, n_eff, dtype='f8'):
def _make_xy_sfunc(func, ndim_output=False):
def get_score_funcs():
def _check_for_unsupported_ica_channels(picks, info):
def _check_start_stop(raw, start, stop):
@verbose DCNL def ica_find_ecg_events(raw, ecg_source, event_id=999, tstart=0.0, l_freq=5, h_freq=35, qrs_threshold='auto', verbose=None):
@verbose DCNL def ica_find_eog_events(raw, eog_source=None, event_id=998, l_freq=1, h_freq=10, verbose=None):
def _get_target_ch(container, target):
def _find_sources(sources, target, score_func):
def _ica_explained_variance(ica, inst, normalize=False):
def _sort_components(ica, order, copy=True):
def _serialize(dict_, outer_sep=';', inner_sep=':'):
def _deserialize(str_, outer_sep=';', inner_sep=':'):
def _write_ica(fid, ica):
@verbose DCNL def read_ica(fname):
def _detect_artifacts(ica, raw, start_find, stop_find, ecg_ch, ecg_score_func, ecg_criterion, eog_ch, eog_score_func, eog_criterion, skew_criterion, kurt_criterion, var_criterion, add_nodes):
@verbose DCNL def run_ica(raw, n_components, max_pca_components=100, n_pca_components=64, noise_cov=None, random_state=None, picks=None, start=None, stop=None, start_find=None, stop_find=None, ecg_ch=None, ecg_score_func='pearsonr', ecg_criterion=0.1, eog_ch=None, eog_score_func='pearsonr', eog_criterion=0.1, skew_criterion=(-1), kurt_criterion=(-1), var_criterion=0, add_nodes=None, verbose=None):
@verbose DCNL def _band_pass_filter(ica, sources, target, l_freq, h_freq, verbose=None):
def _find_max_corrs(all_maps, target, threshold):
def _plot_corrmap(data, subjs, indices, ch_type, ica, label, show, outlines, layout, cmap, contours, template=False):
@verbose DCNL def corrmap(icas, template, threshold='auto', label=None, ch_type='eeg', plot=True, show=True, verbose=None, outlines='head', layout=None, sensors=True, contours=6, cmap=None):
def read_fine_calibration(fname):
def write_fine_calibration(fname, calibration):
def find_outliers(X, threshold=3.0, max_iter=2):
def qrs_detector(sfreq, ecg, thresh_value=0.6, levels=2.5, n_thresh=3, l_freq=5, h_freq=35, tstart=0, filter_length='10s'):
@verbose DCNL def find_ecg_events(raw, event_id=999, ch_name=None, tstart=0.0, l_freq=5, h_freq=35, qrs_threshold='auto', filter_length='10s', return_ecg=False, verbose=None):
def _get_ecg_channel_index(ch_name, inst):
@verbose DCNL def create_ecg_epochs(raw, ch_name=None, event_id=999, picks=None, tmin=(-0.5), tmax=0.5, l_freq=8, h_freq=16, reject=None, flat=None, baseline=None, preload=True, keep_ecg=False, reject_by_annotation=True, verbose=None):
@verbose DCNL def _make_ecg(inst, start, stop, reject_by_annotation=False, verbose=None):
@verbose DCNL def peak_finder(x0, thresh=None, extrema=1, verbose=None):
def _fig_to_img(function=None, fig=None, image_format='png', scale=None, **kwargs):
def _scale_mpl_figure(fig, scale):
def _iterate_trans_views(function, **kwargs):
def _is_bad_fname(fname):
def _get_fname(fname):
def _get_toc_property(fname):
def _iterate_files(report, fnames, info, cov, baseline, sfreq, on_error, image_format):
def _build_image_png(data, cmap='gray'):
def _iterate_sagittal_slices(array, limits=None):
def _iterate_axial_slices(array, limits=None):
def _iterate_coronal_slices(array, limits=None):
def _iterate_mri_slices(name, ind, global_id, slides_klass, data, cmap):
def _build_html_image(img, id, div_klass, img_klass, caption=None, show=True, image_format='png'):
def _build_html_slider(slices_range, slides_klass, slider_id, start_value=None):
def _check_scale(scale):
def _check_image_format(rep, image_format):
def _recursive_search(path, pattern):
def _fix_global_ids(html):
def _read_dipole_fixed(fname):
@verbose DCNL def read_dipole(fname, verbose=None):
def _read_dipole_text(fname):
def _dipole_forwards(fwd_data, whitener, rr, n_jobs=1):
def _make_guesses(surf, grid, exclude, mindist, n_jobs):
def _fit_eval(rd, B, B2, fwd_svd=None, fwd_data=None, whitener=None):
def _dipole_gof(uu, sing, vv, B, B2):
def _fit_Q(fwd_data, whitener, proj_op, B, B2, B_orig, rd, ori=None):
def _compute_residual(proj_op, B_orig, fwd_orig, Q):
def _fit_dipoles(fun, min_dist_to_inner_skull, data, times, guess_rrs, guess_data, fwd_data, whitener, proj_op, ori, n_jobs, rank):
def _surface_constraint(rd, surf, min_dist_to_inner_skull):
def _sphere_constraint(rd, r0, R_adj):
def _fit_dipole(min_dist_to_inner_skull, B_orig, t, guess_rrs, guess_data, fwd_data, whitener, proj_op, fmin_cobyla, ori, rank):
def _fit_dipole_fixed(min_dist_to_inner_skull, B_orig, t, guess_rrs, guess_data, fwd_data, whitener, proj_op, fmin_cobyla, ori, rank):
@verbose DCNL def fit_dipole(evoked, cov, bem, trans=None, min_dist=5.0, n_jobs=1, pos=None, ori=None, verbose=None):
def get_phantom_dipoles(kind='vectorview'):
def _concatenate_dipoles(dipoles):
def _blend_colors(color_1, color_2):
def _split_colors(color, n):
def _n_colors(n, bytes_=False, cmap='hsv'):
def read_label(filename, subject=None, color=None):
@verbose DCNL def write_label(filename, label, verbose=None):
def _prep_label_split(label, subject=None, subjects_dir=None):
def _split_label_contig(label_to_split, subject=None, subjects_dir=None):
def split_label(label, parts=2, subject=None, subjects_dir=None, freesurfer=False):
def label_sign_flip(label, src):
def stc_to_label(stc, src=None, smooth=True, connected=False, subjects_dir=None):
def _verts_within_dist(graph, sources, max_dist):
def _grow_labels(seeds, extents, hemis, names, dist, vert, subject):
def grow_labels(subject, seeds, extents, hemis, subjects_dir=None, n_jobs=1, overlap=True, names=None, surface='white'):
def _grow_nonoverlapping_labels(subject, seeds_, extents_, hemis, vertices_, graphs, names_):
def _read_annot(fname):
def _get_annot_fname(annot_fname, subject, hemi, parc, subjects_dir):
@verbose DCNL def read_labels_from_annot(subject, parc='aparc', hemi='both', surf_name='white', annot_fname=None, regexp=None, subjects_dir=None, verbose=None):
def _write_annot(fname, annot, ctab, names):
@verbose DCNL def write_labels_to_annot(labels, subject=None, parc=None, overwrite=False, subjects_dir=None, annot_fname=None, colormap='hsv', hemi='both', verbose=None):
def read_head_pos(fname):
def write_head_pos(fname, pos):
def head_pos_to_trans_rot_t(quats):
@verbose DCNL def _get_hpi_info(info, verbose=None):
@verbose DCNL def _get_hpi_initial_fit(info, adjust=False, verbose=None):
def _magnetic_dipole_objective(x, B, B2, coils, scale, method):
def _fit_magnetic_dipole(B_orig, x0, coils, scale, method):
def _chpi_objective(x, coil_dev_rrs, coil_head_rrs):
def _unit_quat_constraint(x):
def _fit_chpi_quat(coil_dev_rrs, coil_head_rrs, x0):
def _fit_coil_order_dev_head_trans(dev_pnts, head_pnts):
@verbose DCNL def _setup_hpi_struct(info, model_n_window, method='forward', exclude='bads', remove_aliased=False, verbose=None):
def _time_prefix(fit_time):
@verbose DCNL def _fit_cHPI_amplitudes(raw, time_sl, hpi, fit_time, verbose=None):
@verbose DCNL def _fit_device_hpi_positions(raw, t_win=None, initial_dev_rrs=None, verbose=None):
@verbose DCNL def _calculate_chpi_positions(raw, t_step_min=0.1, t_step_max=10.0, t_window=0.2, dist_limit=0.005, gof_limit=0.98, use_distances=True, verbose=None):
@verbose DCNL def _calculate_chpi_coil_locs(raw, t_step_min=0.1, t_step_max=10.0, t_window=0.2, dist_limit=0.005, gof_limit=0.98, verbose=None):
@verbose DCNL def filter_chpi(raw, include_line=True, t_step=0.01, t_window=0.2, verbose=None):
def _get_lut():
def _get_lut_id(lut, label, use_lut):
def _add_patch_info(s):
@verbose DCNL def _read_source_spaces_from_tree(fid, tree, patch_stats=False, verbose=None):
@verbose DCNL def read_source_spaces(fname, patch_stats=False, verbose=None):
@verbose DCNL def _read_one_source_space(fid, this, verbose=None):
@verbose DCNL def _complete_source_space_info(this, verbose=None):
def find_source_space_hemi(src):
def label_src_vertno_sel(label, src):
@verbose DCNL def _write_source_spaces_to_fid(fid, src, verbose=None):
@verbose DCNL def write_source_spaces(fname, src, overwrite=False, verbose=None):
def _write_one_source_space(fid, this, verbose=None):
@verbose DCNL def vertex_to_mni(vertices, hemis, subject, subjects_dir=None, mode=None, verbose=None):
@verbose DCNL def _read_talxfm(subject, subjects_dir, mode=None, verbose=None):
@verbose DCNL def _check_spacing(spacing, verbose=None):
@verbose DCNL def setup_source_space(subject, spacing='oct6', surface='white', subjects_dir=None, add_dist=True, n_jobs=1, verbose=None):
@verbose DCNL def setup_volume_source_space(subject=None, pos=5.0, mri=None, sphere=(0.0, 0.0, 0.0, 90.0), bem=None, surface=None, mindist=5.0, exclude=0.0, subjects_dir=None, volume_label=None, add_interpolator=True, verbose=None):
def _make_voxel_ras_trans(move, ras, voxel_size):
def _make_discrete_source_space(pos, coord_frame='mri'):
def _make_volume_source_space(surf, grid, exclude, mindist, mri=None, volume_label=None, do_neighbors=True, n_jobs=1):
def _get_mri_header(fname):
def _get_mgz_header(fname):
def _add_interpolator(s, mri_name, add_interpolator):
@verbose DCNL def _filter_source_spaces(surf, limit, mri_head_t, src, n_jobs=1, verbose=None):
@verbose DCNL def _points_outside_surface(rr, surf, n_jobs=1, verbose=None):
@verbose DCNL def _ensure_src(src, kind=None, verbose=None):
@verbose DCNL def add_source_space_distances(src, dist_limit=np.inf, n_jobs=1, verbose=None):
def _do_src_distances(con, vertno, run_inds, limit):
def get_volume_labels_from_aseg(mgz_fname, return_colors=False):
def get_volume_labels_from_src(src, subject, subjects_dir):
def _get_hemi(s):
def _get_vertex_map_nn(fro_src, subject_from, subject_to, hemi, subjects_dir, to_neighbor_tri=None):
@verbose DCNL def morph_source_spaces(src_from, subject_to, surf='white', subject_from=None, subjects_dir=None, verbose=None):
@verbose DCNL def _get_morph_src_reordering(vertices, src_from, subject_from, subject_to, subjects_dir=None, verbose=None):
def _compare_source_spaces(src0, src1, mode='exact', nearest=True, dist_tol=0.0015):
def read_proj(fname):
def write_proj(fname, projs):
@verbose DCNL def compute_proj_epochs(epochs, n_grad=2, n_mag=2, n_eeg=2, n_jobs=1, desc_prefix=None, verbose=None):
def _compute_cov_epochs(epochs, n_jobs):
@verbose DCNL def compute_proj_evoked(evoked, n_grad=2, n_mag=2, n_eeg=2, verbose=None):
@verbose DCNL def compute_proj_raw(raw, start=0, stop=None, duration=1, n_grad=2, n_mag=2, n_eeg=0, reject=None, flat=None, n_jobs=1, verbose=None):
def sensitivity_map(fwd, projs=None, ch_type='grad', mode='fixed', exclude=[], verbose=None):
def _save_split(epochs, fname, part_idx, n_parts):
def _hid_match(event_id, keys):
def _check_baseline(baseline, tmin, tmax, sfreq):
def _drop_log_stats(drop_log, ignore=('IGNORED',)):
def combine_event_ids(epochs, old_event_ids, new_event_id, copy=True):
def equalize_epoch_counts(epochs_list, method='mintime'):
def _get_drop_indices(event_times, method):
def _fix_fill(fill):
def _minimize_time_diff(t_shorter, t_longer):
@verbose DCNL def _is_good(e, ch_names, channel_type_idx, reject, flat, full_report=False, ignore_chs=[], verbose=None):
def _read_one_epoch_file(f, tree, preload):
@verbose DCNL def read_epochs(fname, proj=True, preload=True, verbose=None):
def bootstrap(epochs, random_state=None):
def _check_merge_epochs(epochs_list):
@verbose DCNL def add_channels_epochs(epochs_list, verbose=None):
def _compare_epochs_infos(info1, info2, ind):
def _concatenate_epochs(epochs_list, with_data=True):
def _finish_concat(info, data, events, event_id, tmin, tmax, baseline, selection, drop_log, verbose):
def concatenate_epochs(epochs_list):
def check_indices(indices):
def seed_target_indices(seeds, targets):
def _stc_gen(data, sfreq, tmin, combo=False):
@slow_test DCNL def test_spectral_connectivity():
def test_indices():
def test_psi():
def _epoch_spectral_connectivity(data, sig_idx, tmin_idx, tmax_idx, sfreq, mode, window_fun, eigvals, wavelets, freq_mask, mt_adaptive, idx_map, block_size, psd, accumulate_psd, con_method_types, con_methods, n_signals, n_times, accumulate_inplace=True):
def _get_n_epochs(epochs, n):
def _check_method(method):
def _get_and_verify_data_sizes(data, n_signals=None, n_times=None, times=None):
def _check_estimators(method, mode):
@verbose DCNL def spectral_connectivity(data, method='coh', indices=None, sfreq=(2 * np.pi), mode='multitaper', fmin=None, fmax=np.inf, fskip=0, faverage=False, tmin=None, tmax=None, mt_bandwidth=None, mt_adaptive=False, mt_low_bias=True, cwt_frequencies=None, cwt_n_cycles=7, block_size=1000, n_jobs=1, verbose=None):
def _prepare_connectivity(epoch_block, tmin, tmax, fmin, fmax, sfreq, indices, mode, fskip, n_bands, cwt_frequencies, faverage):
def _assemble_spectral_params(mode, n_times, mt_adaptive, mt_bandwidth, sfreq, mt_low_bias, cwt_n_cycles, cwt_frequencies, freqs, freq_mask):
@verbose DCNL def phase_slope_index(data, indices=None, sfreq=(2 * np.pi), mode='multitaper', fmin=None, fmax=np.inf, tmin=None, tmax=None, mt_bandwidth=None, mt_adaptive=False, mt_low_bias=True, cwt_frequencies=None, cwt_n_cycles=7, block_size=1000, n_jobs=1, verbose=None):
def _check_decim(info, decim, offset):
def _get_entries(fid, evoked_node, allow_maxshield=False):
def _get_aspect(evoked, allow_maxshield):
def _get_evoked_node(fname):
def grand_average(all_evoked, interpolate_bads=True):
def combine_evoked(all_evoked, weights):
@verbose DCNL def read_evokeds(fname, condition=None, baseline=None, kind='average', proj=True, allow_maxshield=False, verbose=None):
def _read_evoked(fname, condition=None, kind='average', allow_maxshield=False):
def write_evokeds(fname, evoked):
def _write_evokeds(fname, evoked, check=True):
def _get_peak(data, times, tmin=None, tmax=None, mode='abs'):
def _dup_coil_set(coils, coord_frame, t):
def _check_coil_frame(coils, coord_frame, bem):
def _lin_field_coeff(surf, mult, rmags, cosmags, ws, bins, n_jobs):
def _do_lin_field_coeff(bem_rr, tris, tn, ta, rmags, cosmags, ws, bins):
def _concatenate_coils(coils):
def _bem_specify_coils(bem, coils, coord_frame, mults, n_jobs):
def _bem_specify_els(bem, els, mults):
def _make_ctf_comp_coils(info, coils):
def _bem_inf_pots(mri_rr, bem_rr, mri_Q=None):
def _bem_inf_fields(rr, rmag, cosmag):
def _bem_pot_or_field(rr, mri_rr, mri_Q, coils, solution, bem_rr, n_jobs, coil_type):
def _do_prim_curr(rr, coils):
def _do_inf_pots(mri_rr, bem_rr, mri_Q, sol):
def _sphere_pot_or_field(rr, mri_rr, mri_Q, coils, sphere, bem_rr, n_jobs, coil_type):
def _sphere_field(rrs, coils, sphere):
def _eeg_spherepot_coil(rrs, coils, sphere):
def _magnetic_dipole_field_vec(rrs, coils):
@verbose DCNL def _prep_field_computation(rr, bem, fwd_data, n_jobs, verbose=None):
@verbose DCNL def _compute_forwards_meeg(rr, fd, n_jobs, verbose=None):
@verbose DCNL def _compute_forwards(rr, bem, coils_list, ccoils_list, infos, coil_types, n_jobs, verbose=None):
def _compare_forwards(fwd, fwd_py, n_sensors, n_src, meg_rtol=0.0001, meg_atol=1e-09, eeg_rtol=0.001, eeg_atol=0.001):
def test_magnetic_dipole():
@testing.requires_testing_data DCNL @requires_mne DCNL def test_make_forward_solution_kit():
@slow_test DCNL @testing.requires_testing_data DCNL def test_make_forward_solution():
@testing.requires_testing_data DCNL @requires_mne DCNL def test_make_forward_solution_sphere():
@slow_test DCNL @testing.requires_testing_data DCNL @requires_nibabel(False) DCNL def test_forward_mixed_source_space():
@slow_test DCNL @testing.requires_testing_data DCNL def test_make_forward_dipole():
def test_legendre_val():
def test_legendre_table():
@testing.requires_testing_data DCNL def test_make_field_map_eeg():
@testing.requires_testing_data DCNL @slow_test DCNL def test_make_field_map_meg():
@testing.requires_testing_data DCNL def test_make_field_map_meeg():
def _setup_args(info):
@testing.requires_testing_data DCNL def test_as_meg_type_evoked():
def compare_forwards(f1, f2):
@testing.requires_testing_data DCNL def test_convert_forward():
@slow_test DCNL @testing.requires_testing_data DCNL def test_io_forward():
@testing.requires_testing_data DCNL def test_apply_forward():
@testing.requires_testing_data DCNL def test_restrict_forward_to_stc():
@testing.requires_testing_data DCNL def test_restrict_forward_to_label():
@testing.requires_testing_data DCNL @requires_mne DCNL def test_average_forward_solution():
@verbose DCNL def _read_coil_defs(elekta_defs=False, verbose=None):
def _read_coil_def_file(fname):
def _create_meg_coil(coilset, ch, acc, do_es):
def _create_eeg_el(ch, t=None):
def _create_meg_coils(chs, acc, t=None, coilset=None, do_es=False):
def _transform_orig_meg_coils(coils, t, do_es=True):
def _create_eeg_els(chs):
@verbose DCNL def _setup_bem(bem, bem_extra, neeg, mri_head_t, verbose=None):
@verbose DCNL def _prep_meg_channels(info, accurate=True, exclude=(), ignore_ref=False, elekta_defs=False, head_frame=True, do_es=False, do_picking=True, verbose=None):
@verbose DCNL def _prep_eeg_channels(info, exclude=(), verbose=None):
@verbose DCNL def _prepare_for_forward(src, mri_head_t, info, bem, mindist, n_jobs, bem_extra='', trans='', info_extra='', meg=True, eeg=True, ignore_ref=False, verbose=None):
@verbose DCNL def make_forward_solution(info, trans, src, bem, meg=True, eeg=True, mindist=0.0, ignore_ref=False, n_jobs=1, verbose=None):
def make_forward_dipole(dipole, bem, info, trans=None, n_jobs=1, verbose=None):
def _to_forward_dict(fwd, names, fwd_grad=None, coord_frame=FIFF.FIFFV_COORD_HEAD, source_ori=FIFF.FIFFV_MNE_FREE_ORI):
def _next_legen_der(n, x, p0, p01, p0d, p0dd):
def _get_legen(x, n_coeff=100):
def _get_legen_der(xx, n_coeff=100):
@verbose DCNL def _get_legen_table(ch_type, volume_integral=False, n_coeff=100, n_interp=20000, force_calc=False, verbose=None):
def _comp_sum_eeg(beta, ctheta, lut_fun, n_fact):
def _comp_sums_meg(beta, ctheta, lut_fun, n_fact, volume_integral):
def _fast_sphere_dot_r0(r, rr1_orig, rr2s, lr1, lr2s, cosmags1, cosmags2s, w1, w2s, volume_integral, lut, n_fact, ch_type):
def _do_self_dots(intrad, volume, coils, r0, ch_type, lut, n_fact, n_jobs):
def _do_self_dots_subset(intrad, rmags, rlens, cosmags, ws, volume, lut, n_fact, ch_type, idx):
def _do_cross_dots(intrad, volume, coils1, coils2, r0, ch_type, lut, n_fact):
def _do_surface_dots(intrad, volume, coils, surf, sel, r0, ch_type, lut, n_fact, n_jobs):
def _do_surface_dots_subset(intrad, rsurf, rmags, rref, refl, lsurf, rlens, this_nn, cosmags, ws, volume, lut, n_fact, ch_type, idx):
def _block_diag(A, n):
def _inv_block_diag(A, n):
def _get_tag_int(fid, node, name, id_):
def _read_one(fid, node):
def _read_forward_meas_info(tree, fid):
def _subject_from_forward(forward):
@verbose DCNL def _merge_meg_eeg_fwds(megfwd, eegfwd, verbose=None):
@verbose DCNL def read_forward_solution(fname, force_fixed=False, surf_ori=False, include=[], exclude=[], verbose=None):
@verbose DCNL def convert_forward_solution(fwd, surf_ori=False, force_fixed=False, copy=True, verbose=None):
@verbose DCNL def write_forward_solution(fname, fwd, overwrite=False, verbose=None):
def _to_fixed_ori(forward):
def is_fixed_orient(forward, orig=False):
def write_forward_meas_info(fid, info):
@verbose DCNL def compute_orient_prior(forward, loose=0.2, verbose=None):
def _restrict_gain_matrix(G, info):
def compute_depth_prior(G, gain_info, is_fixed_ori, exp=0.8, limit=10.0, patch_areas=None, limit_depth_chs=False):
def _stc_src_sel(src, stc):
def _fill_measurement_info(info, fwd, sfreq):
@verbose DCNL def _apply_forward(fwd, stc, start=None, stop=None, verbose=None):
@verbose DCNL def apply_forward(fwd, stc, info, start=None, stop=None, verbose=None):
@verbose DCNL def apply_forward_raw(fwd, stc, info, start=None, stop=None, verbose=None):
def restrict_forward_to_stc(fwd, stc):
def restrict_forward_to_label(fwd, labels):
def _do_forward_solution(subject, meas, fname=None, src=None, spacing=None, mindist=None, bem=None, mri=None, trans=None, eeg=True, meg=True, fixed=False, grad=False, mricoord=False, overwrite=False, subjects_dir=None, verbose=None):
@verbose DCNL def average_forward_solutions(fwds, weights=None):
def _is_axial_coil(coil):
def _ad_hoc_noise(coils, ch_type='meg'):
def _setup_dots(mode, coils, ch_type):
def _compute_mapping_matrix(fmd, info):
def _map_meg_channels(info_from, info_to, mode='fast', origin=(0.0, 0.0, 0.04)):
def _as_meg_type_evoked(evoked, ch_type='grad', mode='fast'):
@verbose DCNL def _make_surface_mapping(info, surf, ch_type='meg', trans=None, mode='fast', n_jobs=1, origin=(0.0, 0.0, 0.04), verbose=None):
@verbose DCNL def make_field_map(evoked, trans='auto', subject=None, subjects_dir=None, ch_type=None, mode='fast', meg_surf='helmet', origin=(0.0, 0.0, 0.04), n_jobs=1, verbose=None):
def pick_events(events, include=None, exclude=None, step=False):
def define_target_events(events, reference_id, target_id, sfreq, tmin, tmax, new_id=None, fill_na=None):
def _read_events_fif(fid, tree):
def read_events(filename, include=None, exclude=None, mask=None, mask_type=None):
def write_events(filename, event_list):
def find_stim_steps(raw, pad_start=None, pad_stop=None, merge=0, stim_channel=None):
def _find_events(data, first_samp, verbose=None, output='onset', consecutive='increasing', min_samples=0, mask=None, uint_cast=False, mask_type=None):
@verbose DCNL def find_events(raw, stim_channel=None, output='onset', consecutive='increasing', min_duration=0, shortest_event=2, mask=None, uint_cast=False, mask_type=None, verbose=None):
def _mask_trigs(events, mask, mask_type):
def merge_events(events, ids, new_id, replace_events=True):
def shift_time_events(events, ids, tshift, sfreq):
def make_fixed_length_events(raw, id, start=0, stop=None, duration=1.0, first_samp=True):
def concatenate_events(events, first_samps, last_samps):
def parse_config(fname):
def read_reject_parameters(fname):
def read_flat_parameters(fname):
def _f_oneway(*args):
def f_oneway(*args):
def _map_effects(n_factors, effects):
def _get_contrast_indices(effect_idx, n_factors):
def _iter_contrasts(n_subjects, factor_levels, effect_picks):
def f_threshold_mway_rm(n_subjects, factor_levels, effects='A*B', pvalue=0.05):
def f_mway_rm(data, factor_levels, effects='all', alpha=0.05, correction=False, return_pvals=True):
def bin_perm_rep(ndim, a=0, b=1):
def _max_stat(X, X2, perms, dof_scaling):
@verbose DCNL def permutation_t_test(X, n_permutations=10000, tail=0, n_jobs=1, verbose=None):
def _get_clusters_spatial(s, neighbors):
def _reassign(check, clusters, base, num):
def _get_clusters_st_1step(keepers, neighbors):
def _get_clusters_st_multistep(keepers, neighbors, max_step=1):
def _get_clusters_st(x_in, neighbors, max_step=1):
def _get_components(x_in, connectivity, return_list=True):
def _find_clusters(x, threshold, tail=0, connectivity=None, max_step=1, include=None, partitions=None, t_power=1, show_info=False):
def _find_clusters_1dir_parts(x, x_in, connectivity, max_step, partitions, t_power, ndimage):
def _find_clusters_1dir(x, x_in, connectivity, max_step, t_power, ndimage):
def _cluster_indices_to_mask(components, n_tot):
def _cluster_mask_to_indices(components):
def _pval_from_histogram(T, H0, tail):
def ttest_1samp_no_p(X, sigma=0, method='relative'):
@verbose DCNL def permutation_cluster_test(X, threshold=None, n_permutations=1024, tail=0, stat_fun=f_oneway, connectivity=None, verbose=None, n_jobs=1, seed=None, max_step=1, exclude=None, step_down_p=0, t_power=1, out_type='mask', check_disjoint=False, buffer_size=1000):
@verbose DCNL def permutation_cluster_1samp_test(X, threshold=None, n_permutations=1024, tail=0, stat_fun=ttest_1samp_no_p, connectivity=None, verbose=None, n_jobs=1, seed=None, max_step=1, exclude=None, step_down_p=0, t_power=1, out_type='mask', check_disjoint=False, buffer_size=1000):
@verbose DCNL def spatio_temporal_cluster_1samp_test(X, threshold=None, n_permutations=1024, tail=0, stat_fun=ttest_1samp_no_p, connectivity=None, verbose=None, n_jobs=1, seed=None, max_step=1, spatial_exclude=None, step_down_p=0, t_power=1, out_type='indices', check_disjoint=False, buffer_size=1000):
@verbose DCNL def spatio_temporal_cluster_test(X, threshold=1.67, n_permutations=1024, tail=0, stat_fun=f_oneway, connectivity=None, verbose=None, n_jobs=1, seed=None, max_step=1, spatial_exclude=None, step_down_p=0, t_power=1, out_type='indices', check_disjoint=False, buffer_size=1000):
def _st_mask_from_s_inds(n_times, n_vertices, vertices, set_as=True):
@verbose DCNL def _get_partitions_from_connectivity(connectivity, n_times, verbose=None):
def _reshape_clusters(clusters, sample_shape):
def summarize_clusters_stc(clu, p_thresh=0.05, tstep=0.001, tmin=0, subject='fsaverage', vertices=None):
@testing.requires_testing_data DCNL def test_regression():
@testing.requires_testing_data DCNL def test_continuous_regression_no_overlap():
@requires_sklearn DCNL @testing.requires_testing_data DCNL def test_continuous_regression_with_overlap():
def generate_data(n_subjects, n_conditions):
def test_map_effects():
def test_f_twoway_rm():
def test_permutation_t_test():
def test_multi_pval_correction():
def test_cache_dir():
def test_permutation_step_down_p():
def test_cluster_permutation_test():
@slow_test DCNL def test_cluster_permutation_t_test():
@slow_test DCNL def test_cluster_permutation_with_connectivity():
@slow_test DCNL def test_permutation_connectivity_equiv():
@slow_test DCNL def spatio_temporal_cluster_test_connectivity():
def ttest_1samp(X):
def test_summarize_clusters():
def _ecdf(x):
def fdr_correction(pvals, alpha=0.05, method='indep'):
def bonferroni_correction(pval, alpha=0.05):
def linear_regression(inst, design_matrix, names=None):
def _fit_lm(data, design_matrix, names):
def linear_regression_raw(raw, events, event_id=None, tmin=(-0.1), tmax=1, covariates=None, reject=None, flat=None, tstep=1.0, decim=1, picks=None, solver='cholesky'):
def _prepare_rerp_data(raw, events, picks=None, decim=1):
def _prepare_rerp_preds(n_samples, sfreq, events, event_id=None, tmin=(-0.1), tmax=1, covariates=None):
def _clean_rerp_input(X, data, reject, flat, decim, info, tstep):
def _make_evokeds(coefs, conds, cond_length, tmin_s, tmax_s, info):
def _ajd_pham(X, eps=1e-06, max_iter=15):
def _set_cv(cv, estimator=None, X=None, y=None):
def _check_estimator(estimator, get_params=True):
def _get_inverse_funcs(estimator, terminal=True):
def get_coef(estimator, attr='filters_', inverse_transform=False):
def cross_val_multiscore(estimator, X, y=None, groups=None, scoring=None, cv=None, n_jobs=1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs'):
def _fit_and_score(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=False, error_score='raise'):
def _score(estimator, X_test, y_test, scorer):
def _sklearn_reshape_apply(func, return_result, X, *args):
def simulate_data(target, n_trials=100, n_channels=10, random_state=42):
@slow_test DCNL def test_csp():
@requires_sklearn DCNL def test_regularized_csp():
@requires_sklearn DCNL def test_csp_pipeline():
def test_ajd():
@requires_sklearn_0_15 DCNL def test_ems():
@requires_sklearn_0_15 DCNL def test_search_light():
@requires_sklearn_0_15 DCNL def test_generalization_light():
def _make_data(n_samples=1000, n_features=5, n_targets=3):
@requires_sklearn_0_15 DCNL def test_get_coef():
@requires_sklearn_0_15 DCNL def test_linearmodel():
@requires_sklearn_0_15 DCNL def test_cross_val_multiscore():
@requires_sklearn_0_15 DCNL def test_rank_deficiency():
def test_time_delay():
@requires_sklearn_0_15 DCNL def test_receptive_field():
@requires_sklearn_0_15 DCNL def test_receptive_field_fast():
def test_scaler():
def test_filterestimator():
def test_psdestimator():
def test_vectorizer():
@requires_sklearn_0_15 DCNL def test_unsupervised_spatial_filter():
def test_temporal_filter():
@slow_test DCNL @requires_sklearn_0_15 DCNL def test_generalization_across_time():
@requires_sklearn DCNL def test_decoding_time():
@verbose DCNL def compute_ems(epochs, conditions=None, picks=None, n_jobs=1, verbose=None, cv=None):
def _ems_diff(data0, data1):
def _run_ems(objective_function, data, cond_idx, train, test):
def _pad_time_series(X, n_delays, fill_mean=True):
def _delay_time_series(X, tmin, tmax, sfreq, newaxis=0, axis=0, epoch_axis=1, fill_mean=False):
def _times_to_delays(tmin, tmax, sfreq):
def _delays_to_slice(delays):
def _check_delayer_params(tmin, tmax, sfreq):
def _reshape_for_est(X_del):
def _compute_corrs(X, y, smin, smax):
def _fit_corrs(x_xt, x_y, n_ch_x, reg_type, alpha, n_ch_in):
def _predict_slices(X, train_times, estimators, cv_splits, predict_mode, predict_method, n_orig_epochs, test_epochs):
def _init_ypred(n_train, n_test, n_orig_epochs, n_dim):
def _score_slices(y_true, list_y_pred, scorer, score_mode, cv):
def _check_epochs_input(epochs, y, picks=None):
def _fit_slices(clf, x_chunk, y, slices, cv_splits):
def _sliding_window(times, window, sfreq):
def _set_window_time(slices, times):
def _predict(X, estimators, vectorize_times, predict_method):
def _chunk_data(X, slices):
def _sl_fit(estimator, X, y):
def _sl_transform(estimators, X, method):
def _sl_init_pred(y_pred, X):
def _sl_score(estimators, scoring, X, y):
def _check_method(estimator, method):
def _gl_transform(estimators, X, method):
def _gl_init_pred(y_pred, X, n_train):
def _gl_score(estimators, scoring, X, y):
@verbose DCNL def parallel_func(func, n_jobs, verbose=None, max_nbytes='auto', pre_dispatch='2 DCSP * DCSP n_jobs'):
def check_n_jobs(n_jobs, allow_cuda=False):
def _setup_vmin_vmax(data, vmin, vmax, norm=False):
def plt_show(show=True, **kwargs):
def tight_layout(pad=1.2, h_pad=None, w_pad=None, fig=None):
def _check_delayed_ssp(container):
def _validate_if_list_of_axes(axes, obligatory_len=None):
def mne_analyze_colormap(limits=[5, 10, 15], format='mayavi'):
def _toggle_options(event, params):
def _toggle_proj(event, params):
def _get_help_text(params):
def _draw_proj_checkbox(event, params, draw_current_state=True):
def _layout_figure(params):
@verbose DCNL def compare_fiff(fname_1, fname_2, fname_out=None, show=True, indent=' DCSP  DCSP  DCSP  DCSP ', read_limit=np.inf, max_str=30, verbose=None):
def figure_nobar(*args, **kwargs):
def _helper_raw_resize(event, params):
def _plot_raw_onscroll(event, params, len_channels=None):
def _channels_changed(params, len_channels):
def _plot_raw_time(value, params):
def _radio_clicked(label, params):
def _get_active_radiobutton(radio):
def _set_annotation_radio_button(idx, params):
def _set_radio_button(idx, params):
def _change_channel_group(step, params):
def _handle_change_selection(event, params):
def _plot_raw_onkey(event, params):
def _setup_annotation_fig(params):
def _onclick_new_label(event, params):
def _mouse_click(event, params):
def _handle_topomap_bads(ch_name, params):
def _find_channel_idx(ch_name, params):
def _draw_vert_line(xdata, params):
def _select_bads(event, params, bads):
def _onclick_help(event, params):
def _key_press(event):
def _setup_browser_offsets(params, n_channels):
def _fake_click(fig, ax, point, xform='ax', button=1, kind='press'):
def add_background_image(fig, im, set_ratios=None):
def _find_peaks(evoked, npeaks):
def _process_times(inst, use_times, n_peaks=None, few=False):
def plot_sensors(info, kind='topomap', ch_type=None, title=None, show_names=False, ch_groups=None, to_sphere=True, axes=None, block=False, show=True):
def _onpick_sensor(event, fig, ax, pos, ch_names, show_names):
def _close_event(event, fig):
def _plot_sensors(pos, colors, bads, ch_names, title, show_names, ax, show, select, block, to_sphere):
def _compute_scalings(scalings, inst):
def _setup_cmap(cmap, n_axes=1, norm=False):
def _annotate_select(vmin, vmax, params):
def _plot_annotations(raw, params):
def _setup_annotation_colors(params):
def _annotations_closed(event, params):
def _on_hover(event, params):
def _remove_segment_line(params):
def _annotation_modify(old_x, new_x, params):
def _merge_annotations(start, stop, description, annotations, current=()):
def _change_annotation_description(event, params):
def _annotation_radio_clicked(label, radio, selector):
def _setup_butterfly(params):
def _set_ax_facecolor(ax, face_color):
def _handle_decim(info, decim, lowpass):
def _fiducial_coords(points, coord_frame=None):
def plot_head_positions(pos, mode='traces', cmap='viridis', direction='z', show=True):
def plot_evoked_field(evoked, surf_maps, time=None, time_label='t DCSP = DCSP %0.0f DCSP ms', n_jobs=1):
def _create_mesh_surf(surf, fig=None, scalars=None):
def _plot_mri_contours(mri_fname, surf_fnames, orientation='coronal', slices=None, show=True, img_output=False):
@deprecated('this DCSP function DCSP will DCSP be DCSP removed DCSP in DCSP version DCSP 0.16. DCSP Use DCSP plot_alignment DCSP instead') DCNL @verbose DCNL def plot_trans(info, trans='auto', subject=None, subjects_dir=None, source=('bem', 'head', 'outer_skin'), coord_frame='head', meg_sensors=('helmet', 'sensors'), eeg_sensors='original', dig=False, ref_meg=False, ecog_sensors=True, head=None, brain=None, skull=False, src=None, mri_fiducials=False, verbose=None):
@verbose DCNL def plot_alignment(info, trans=None, subject=None, subjects_dir=None, surfaces=('head',), coord_frame='head', meg=('helmet', 'sensors'), eeg='original', dig=False, ecog=True, src=None, mri_fiducials=False, bem=None, verbose=None):
def _make_tris_fan(n_vert):
def _sensor_shape(coil):
def _limits_to_control_points(clim, stc_data, colormap):
def _handle_time(time_label, time_unit, times):
def _key_pressed_slider(event, params):
def _smooth_plot(this_time, params):
def _plot_mpl_stc(stc, subject=None, surface='inflated', hemi='lh', colormap='auto', time_label='auto', smoothing_steps=10, subjects_dir=None, views='lat', clim='auto', figure=None, initial_time=None, time_unit='s', background='black', spacing='oct6', time_viewer=False):
def plot_source_estimates(stc, subject=None, surface='inflated', hemi='lh', colormap='auto', time_label='auto', smoothing_steps=10, transparent=None, alpha=1.0, time_viewer=False, subjects_dir=None, figure=None, views='lat', colorbar=True, clim='auto', cortex='classic', size=800, background='black', foreground='white', initial_time=None, time_unit='s', backend='auto', spacing='oct6'):
def plot_sparse_source_estimates(src, stcs, colors=None, linewidth=2, fontsize=18, bgcolor=(0.05, 0, 0.1), opacity=0.2, brain_color=((0.7,) * 3), show=True, high_resolution=False, fig_name=None, fig_number=None, labels=None, modes=('cone', 'sphere'), scale_factors=(1, 0.6), verbose=None, **kwargs):
def plot_dipole_locations(dipoles, trans, subject, subjects_dir=None, mode='orthoview', coord_frame='mri', idx='gof', show_all=True, ax=None, block=False, show=True, verbose=None):
def snapshot_brain_montage(fig, montage, hide_sensors=True):
def _3d_to_2d(fig, xyz):
def _get_world_to_view_matrix(scene):
def _get_view_to_display_matrix(scene):
def _plot_dipole_mri_orthoview(dipole, trans, subject, subjects_dir=None, coord_frame='head', idx='gof', show_all=True, ax=None, block=False, show=True):
def _plot_dipole(ax, data, points, idx, dipole, gridx, gridy, ori, coord_frame, zooms, show_all, scatter_points):
def _dipole_changed(event, params):
def circular_layout(node_names, node_order, start_pos=90, start_between=True, group_boundaries=None, group_sep=10):
def _plot_connectivity_circle_onpick(event, fig=None, axes=None, indices=None, n_nodes=0, node_angles=None, ylim=[9, 10]):
def plot_connectivity_circle(con, node_names, indices=None, n_lines=None, node_angles=None, node_width=None, node_colors=None, facecolor='black', textcolor='white', node_edgecolor='black', linewidth=1.5, colormap='hot', vmin=None, vmax=None, colorbar=True, title=None, colorbar_size=0.2, colorbar_pos=((-0.3), 0.1), fontsize_title=12, fontsize_names=8, fontsize_colorbar=8, padding=6.0, fig=None, subplot=111, interactive=True, node_linewidth=2.0, show=True):
def _get_raw():
def _get_events():
@requires_version('scipy', '0.16') DCNL def test_plot_filter():
def test_plot_cov():
@testing.requires_testing_data DCNL @requires_nibabel() DCNL def test_plot_bem():
def test_plot_events():
@testing.requires_testing_data DCNL def test_plot_source_spectrogram():
@slow_test DCNL @testing.requires_testing_data DCNL def test_plot_snr():
@testing.requires_testing_data DCNL def test_plot_dipole_amplitudes():
def _get_raw(preload=False):
def _get_events():
def _get_picks(raw):
def _get_epochs():
@requires_sklearn DCNL def test_plot_ica_components():
@requires_sklearn DCNL def test_plot_ica_properties():
@requires_sklearn DCNL def test_plot_ica_sources():
@requires_sklearn DCNL def test_plot_ica_overlay():
@requires_sklearn DCNL def test_plot_ica_scores():
@requires_sklearn DCNL def test_plot_instance_components():
@slow_test DCNL @testing.requires_testing_data DCNL def test_plot_topomap():
def test_plot_tfr_topomap():
def _get_raw():
def _get_events():
def _annotation_helper(raw):
def test_plot_raw():
@testing.requires_testing_data DCNL def test_plot_ref_meg():
def test_plot_annotations():
@requires_version('scipy', '0.10') DCNL def test_plot_raw_filtered():
@requires_version('scipy', '0.12') DCNL def test_plot_raw_psd():
def test_plot_sensors():
def _get_picks(raw):
def _get_epochs():
def _get_epochs_delayed_ssp():
@slow_test DCNL def test_plot_evoked():
def _get_events():
def _get_picks(raw):
def _get_epochs():
def _get_epochs_delayed_ssp():
def test_plot_topo():
def test_plot_topo_image_epochs():
def test_plot_tfr_topo():
def test_plot_montage():
def test_plot_head_positions():
@testing.requires_testing_data DCNL @requires_pysurfer DCNL @requires_mayavi DCNL def test_plot_sparse_source_estimates():
@testing.requires_testing_data DCNL @requires_mayavi DCNL def test_plot_evoked_field():
@testing.requires_testing_data DCNL @requires_mayavi DCNL def test_plot_alignment():
@testing.requires_testing_data DCNL @requires_pysurfer DCNL @requires_mayavi DCNL def test_limits_to_control_points():
@testing.requires_testing_data DCNL @requires_nibabel() DCNL def test_stc_mpl():
@testing.requires_testing_data DCNL @requires_nibabel() DCNL def test_plot_dipole_mri_orthoview():
@requires_mayavi DCNL def test_snapshot_brain_montage():
def _get_picks(raw):
def _get_epochs():
def _get_epochs_delayed_ssp():
def test_plot_epochs():
def test_plot_epochs_image():
def test_plot_drop_log():
@requires_version('scipy', '0.12') DCNL def test_plot_psd_epochs():
def test_plot_connectivity_circle():
def _get_data(tmin=(-0.2), tmax=0.5, event_id=dict(aud_l=1, vis_l=3), event_id_gen=dict(aud_l=2, vis_l=4), test_times=None):
@requires_sklearn DCNL def test_gat_plot_matrix():
@requires_sklearn DCNL def test_gat_plot_diagonal():
@requires_sklearn DCNL def test_gat_plot_times():
@requires_sklearn DCNL def test_gat_chance_level():
@requires_sklearn DCNL def test_gat_plot_nonsquared():
def test_mne_analyze_colormap():
def test_clickable_image():
def test_add_background_image():
def test_auto_scale():
def test_validate_if_list_of_axes():
def plot_montage(montage, scale_factor=20, show_names=True, kind='topomap', show=True):
def _prepare_topo_plot(inst, ch_type, layout):
def _plot_update_evoked_topomap(params, bools):
def plot_projs_topomap(projs, layout=None, cmap=None, sensors=True, colorbar=False, res=64, size=1, show=True, outlines='head', contours=6, image_interp='bilinear', axes=None):
def _check_outlines(pos, outlines, head_pos=None):
def _draw_outlines(ax, outlines):
def _plot_sensors(pos_x, pos_y, sensors, ax):
def plot_topomap(data, pos, vmin=None, vmax=None, cmap=None, sensors=True, res=64, axes=None, names=None, show_names=False, mask=None, mask_params=None, outlines='head', image_mask=None, contours=6, image_interp='bilinear', show=True, head_pos=None, onselect=None):
def _make_image_mask(outlines, pos, res):
def _inside_contour(pos, contour):
def _plot_ica_topomap(ica, idx=0, ch_type=None, res=64, layout=None, vmin=None, vmax=None, cmap='RdBu_r', colorbar=False, title=None, show=True, outlines='head', contours=6, image_interp='bilinear', head_pos=None, axes=None, sensors=True):
def plot_ica_components(ica, picks=None, ch_type=None, res=64, layout=None, vmin=None, vmax=None, cmap='RdBu_r', sensors=True, colorbar=False, title=None, show=True, outlines='head', contours=6, image_interp='bilinear', head_pos=None, inst=None):
def plot_tfr_topomap(tfr, tmin=None, tmax=None, fmin=None, fmax=None, ch_type=None, baseline=None, mode='mean', layout=None, vmin=None, vmax=None, cmap=None, sensors=True, colorbar=True, unit=None, res=64, size=2, cbar_fmt='%1.1e', show_names=False, title=None, axes=None, show=True, outlines='head', head_pos=None, contours=6):
def plot_evoked_topomap(evoked, times='auto', ch_type=None, layout=None, vmin=None, vmax=None, cmap=None, sensors=True, colorbar=True, scale=None, scale_time=1000.0, unit=None, res=64, size=1, cbar_fmt='%3.1f', time_format='%01d DCSP ms', proj=False, show=True, show_names=False, title=None, mask=None, mask_params=None, outlines='head', contours=6, image_interp='bilinear', average=None, head_pos=None, axes=None):
def _resize_cbar(cax, n_fig_axes, size=1):
def _slider_changed(val, ax, data, times, pos, scale, func, time_format, scale_time, kwargs):
def _plot_topomap_multi_cbar(data, pos, ax, title=None, unit=None, vmin=None, vmax=None, cmap=None, outlines='head', colorbar=False, cbar_fmt='%3.3f'):
@verbose DCNL def plot_epochs_psd_topomap(epochs, bands=None, vmin=None, vmax=None, tmin=None, tmax=None, proj=False, bandwidth=None, adaptive=False, low_bias=True, normalization='length', ch_type=None, layout=None, cmap='RdBu_r', agg_fun=None, dB=False, n_jobs=1, normalize=False, cbar_fmt='%0.3f', outlines='head', axes=None, show=True, verbose=None):
def plot_psds_topomap(psds, freqs, pos, agg_fun=None, vmin=None, vmax=None, bands=None, cmap=None, dB=True, normalize=False, cbar_fmt='%0.3f', outlines='head', axes=None, show=True):
def plot_layout(layout, picks=None, show=True):
def _onselect(eclick, erelease, tfr, pos, ch_type, itmin, itmax, ifmin, ifmax, cmap, fig, layout=None):
def _prepare_topomap(pos, ax):
def _hide_frame(ax):
def _init_anim(ax, ax_line, ax_cbar, params, merge_grads):
def _animate(frame, ax, ax_line, params):
def _pause_anim(event, params):
def _key_press(event, params):
def _topomap_animation(evoked, ch_type='mag', times=None, frame_rate=None, butterfly=False, blit=True, show=True):
def _set_contour_locator(vmin, vmax, contours):
@deprecated('plot_gat_matrix DCSP is DCSP deprecated DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP 0.15.') DCNL def plot_gat_matrix(gat, title=None, vmin=None, vmax=None, tlim=None, ax=None, cmap='RdBu_r', show=True, colorbar=True, xlabel=True, ylabel=True):
@deprecated('plot_gat_matrix DCSP is DCSP deprecated DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP 0.15.') DCNL def plot_gat_times(gat, train_time='diagonal', title=None, xmin=None, xmax=None, ymin=None, ymax=None, ax=None, show=True, color=None, xlabel=True, ylabel=True, legend=True, chance=True, label='Classif. DCSP score'):
def _plot_gat_time(gat, train_time, ax, color, label):
def _get_chance_level(scorer, y_train):
def plot_epochs_image(epochs, picks=None, sigma=0.0, vmin=None, vmax=None, colorbar=True, order=None, show=True, units=None, scalings=None, cmap='RdBu_r', fig=None, axes=None, overlay_times=None):
def plot_drop_log(drop_log, threshold=0, n_max_plot=20, subject='Unknown', color=(0.9, 0.9, 0.9), width=0.8, ignore=('IGNORED',), show=True):
def _draw_epochs_axes(epoch_idx, good_ch_idx, bad_ch_idx, data, times, axes, title_str, axes_handler):
def _epochs_navigation_onclick(event, params):
def _epochs_axes_onclick(event, params):
def plot_epochs(epochs, picks=None, scalings=None, n_epochs=20, n_channels=20, title=None, events=None, event_colors=None, show=True, block=False, decim='auto'):
@verbose DCNL def plot_epochs_psd(epochs, fmin=0, fmax=np.inf, tmin=None, tmax=None, proj=False, bandwidth=None, adaptive=False, low_bias=True, normalization='length', picks=None, ax=None, color='black', area_mode='std', area_alpha=0.33, dB=True, n_jobs=1, show=True, verbose=None):
def _prepare_mne_browse_epochs(params, projs, n_channels, n_epochs, scalings, title, picks, events=None, event_colors=None, order=None):
def _prepare_projectors(params):
def _plot_traces(params):
def _plot_update_epochs_proj(params, bools=None):
def _handle_picks(epochs):
def _plot_window(value, params):
def _plot_vert_lines(params):
def _pick_bad_epochs(event, params):
def _pick_bad_channels(pos, params):
def _plot_onscroll(event, params):
def _mouse_click(event, params):
def _plot_onkey(event, params):
def _prepare_butterfly(params):
def _onpick(event, params):
def _close_event(event, params):
def _resize_event(event, params):
def _update_channels_epochs(event, params):
def _toggle_labels(label, params):
def _open_options(params):
def _settings_closed(events, params):
def _plot_histogram(params):
def _label2idx(params, pos):
def _draw_event_lines(params):
def _plot_update_raw_proj(params, bools):
def _update_raw_data(params):
def _pick_bad_channels(event, params):
def plot_raw(raw, events=None, duration=10.0, start=0.0, n_channels=20, bgcolor='w', color=None, bad_color=(0.8, 0.8, 0.8), event_color='cyan', scalings=None, remove_dc=True, order=None, show_options=False, title=None, show=True, block=False, highpass=None, lowpass=None, filtorder=4, clipping=None, show_first_samp=False, proj=True, group_by='type', butterfly=False, decim='auto'):
def _selection_scroll(event, params):
def _selection_key_press(event, params):
def _close_event(event, params):
def _label_clicked(pos, params):
def _set_psd_plot_params(info, proj, picks, ax, area_mode):
def _convert_psds(psds, dB, scaling, unit, ch_names):
@verbose DCNL def plot_raw_psd(raw, tmin=0.0, tmax=np.inf, fmin=0, fmax=np.inf, proj=False, n_fft=None, picks=None, ax=None, color='black', area_mode='std', area_alpha=0.33, n_overlap=0, dB=True, average=None, show=True, n_jobs=1, line_alpha=None, spatial_colors=None, xscale='linear', reject_by_annotation=True, verbose=None):
def _prepare_mne_browse_raw(params, title, bgcolor, color, bad_color, inds, n_channels):
def _plot_raw_traces(params, color, bad_color, event_lines=None, event_color=None):
def plot_raw_psd_topo(raw, tmin=0.0, tmax=None, fmin=0.0, fmax=100.0, proj=False, n_fft=2048, n_overlap=0, layout=None, color='w', fig_facecolor='k', axis_facecolor='k', dB=True, show=True, block=False, n_jobs=1, axes=None, verbose=None):
def _set_custom_selection(params):
def _setup_browser_selection(raw, kind, selector=True):
def _butterfly_onpick(event, params):
def _butterfly_on_button_press(event, params):
def _line_plot_onselect(xmin, xmax, ch_types, info, data, times, text=None, psd=False):
def _topo_closed(events, ax, lines, fill):
def _rgb(x, y, z):
def _plot_legend(pos, colors, axis, bads, outlines, loc):
def _plot_evoked(evoked, picks, exclude, unit, show, ylim, proj, xlim, hline, units, scalings, titles, axes, plot_type, cmap=None, gfp=False, window_title=None, spatial_colors=False, set_tight_layout=True, selectable=True, zorder='unsorted'):
def _plot_lines(data, info, picks, fig, axes, spatial_colors, unit, units, scalings, hline, gfp, types, zorder, xlim, ylim, times, bad_ch_idx, titles, ch_types_used, selectable, psd, line_alpha):
def _handle_spatial_colors(colors, info, idx, ch_type, psd, ax):
def _plot_image(data, ax, this_type, picks, cmap, unit, units, scalings, times, xlim, ylim, titles):
def plot_evoked(evoked, picks=None, exclude='bads', unit=True, show=True, ylim=None, xlim='tight', proj=False, hline=None, units=None, scalings=None, titles=None, axes=None, gfp=False, window_title=None, spatial_colors=False, zorder='unsorted', selectable=True):
def plot_evoked_topo(evoked, layout=None, layout_scale=0.945, color=None, border='none', ylim=None, scalings=None, title=None, proj=False, vline=[0.0], fig_facecolor=None, fig_background=None, axis_facecolor=None, font_color='w', merge_grads=False, legend=True, axes=None, background_color=None, show=True):
def _animate_evoked_topomap(evoked, ch_type='mag', times=None, frame_rate=None, butterfly=False, blit=True, show=True):
def plot_evoked_image(evoked, picks=None, exclude='bads', unit=True, show=True, clim=None, xlim='tight', proj=False, units=None, scalings=None, titles=None, axes=None, cmap='RdBu_r'):
def _plot_update_evoked(params, bools):
def plot_evoked_white(evoked, noise_cov, show=True):
def _plot_evoked_white(evoked, noise_cov, scalings=None, rank=None, show=True):
def plot_snr_estimate(evoked, inv, show=True):
def _connection_line(x, fig, sourceax, targetax):
def plot_evoked_joint(evoked, times='peaks', title='', picks=None, exclude=None, show=True, ts_args=None, topomap_args=None):
def _ci(arr, ci):
def _setup_styles(conditions, style_dict, style, default):
def _truncate_yaxis(axes, ymin, ymax, orig_ymin, orig_ymax, fraction, any_positive, any_negative):
def plot_compare_evokeds(evokeds, picks=list(), gfp=False, colors=None, linestyles=['-'], styles=None, vlines=[0.0], ci=0.95, truncate_yaxis=False, ylim=dict(), invert_y=False, axes=None, title=None, show=True):
def plot_ica_sources(ica, inst, picks=None, exclude=None, start=None, stop=None, title=None, show=True, block=False, show_first_samp=False):
def _create_properties_layout(figsize=None):
def plot_ica_properties(ica, inst, picks=None, axes=None, dB=True, plot_std=True, topomap_args=None, image_args=None, psd_args=None, figsize=None, show=True):
def _plot_ica_sources_evoked(evoked, picks, exclude, title, show, labels=None):
def plot_ica_scores(ica, scores, exclude=None, labels=None, axhline=None, title='ICA DCSP component DCSP scores', figsize=None, show=True):
def plot_ica_overlay(ica, inst, exclude=None, picks=None, start=None, stop=None, title=None, show=True):
def _plot_ica_overlay_raw(data, data_cln, times, title, ch_types_used, show):
def _plot_ica_overlay_evoked(evoked, evoked_cln, title, show):
def _plot_sources_raw(ica, raw, picks, exclude, start, stop, show, title, block, show_first_samp):
def _update_data(params):
def _pick_bads(event, params):
def _close_event(events, params):
def _plot_sources_epochs(ica, epochs, picks, exclude, start, stop, show, title, block):
def _update_epoch_data(params):
def _close_epochs_event(events, params):
def _label_clicked(pos, params):
@verbose DCNL def plot_cov(cov, info, exclude=[], colorbar=True, proj=False, show_svd=True, show=True, verbose=None):
def plot_source_spectrogram(stcs, freq_bins, tmin=None, tmax=None, source_index=None, colorbar=False, show=True):
def _plot_mri_contours(mri_fname, surfaces, src, orientation='coronal', slices=None, show=True):
def plot_bem(subject=None, subjects_dir=None, orientation='coronal', slices=None, brain_surfaces=None, src=None, show=True):
def plot_events(events, sfreq=None, first_samp=0, color=None, event_id=None, axes=None, equal_spacing=True, show=True):
def _get_presser(fig):
def plot_dipole_amplitudes(dipoles, colors=None, show=True):
def adjust_axes(axes, remove_spines=('top', 'right'), grid=True):
def _filter_ticks(lims, fscale):
def _get_flim(flim, fscale, freq, sfreq=None):
def _check_fscale(fscale):
def plot_filter(h, sfreq, freq=None, gain=None, title=None, color='#1f77b4', flim=None, fscale='log', alim=((-60), 10), show=True):
def plot_ideal_filter(freq, gain, axes=None, title='', flim=None, fscale='log', alim=((-60), 10), color='r', alpha=0.5, linestyle='--', show=True):
def _handle_event_colors(unique_events, color, unique_events_id):
def iter_topography(info, layout=None, on_pick=None, fig=None, fig_facecolor='k', axis_facecolor='k', axis_spinecolor='k', layout_scale=None):
def _iter_topography(info, layout, on_pick, fig, fig_facecolor='k', axis_facecolor='k', axis_spinecolor='k', layout_scale=None, unified=False, img=False, axes=None):
def _plot_topo(info, times, show_func, click_func=None, layout=None, vmin=None, vmax=None, ylim=None, colorbar=None, border='none', axis_facecolor='k', fig_facecolor='k', cmap='RdBu_r', layout_scale=None, title=None, x_label=None, y_label=None, font_color='w', unified=False, img=False, axes=None):
def _plot_topo_onpick(event, show_func):
def _compute_scalings(bn, xlim, ylim):
def _check_vlim(vlim):
def _imshow_tfr(ax, ch_idx, tmin, tmax, vmin, vmax, onselect, ylim=None, tfr=None, freq=None, x_label=None, y_label=None, colorbar=False, cmap=('RdBu_r', True), yscale='auto'):
def _imshow_tfr_unified(bn, ch_idx, tmin, tmax, vmin, vmax, onselect, ylim=None, tfr=None, freq=None, vline=None, x_label=None, y_label=None, colorbar=False, picker=True, cmap='RdBu_r', title=None, hline=None):
def _plot_timeseries(ax, ch_idx, tmin, tmax, vmin, vmax, ylim, data, color, times, vline=None, x_label=None, y_label=None, colorbar=False, hline=None, hvline_color='w'):
def _plot_timeseries_unified(bn, ch_idx, tmin, tmax, vmin, vmax, ylim, data, color, times, vline=None, x_label=None, y_label=None, colorbar=False, hline=None, hvline_color='w'):
def _erfimage_imshow(ax, ch_idx, tmin, tmax, vmin, vmax, ylim=None, data=None, epochs=None, sigma=None, order=None, scalings=None, vline=None, x_label=None, y_label=None, colorbar=False, cmap='RdBu_r'):
def _erfimage_imshow_unified(bn, ch_idx, tmin, tmax, vmin, vmax, ylim=None, data=None, epochs=None, sigma=None, order=None, scalings=None, vline=None, x_label=None, y_label=None, colorbar=False, cmap='RdBu_r'):
def _plot_evoked_topo(evoked, layout=None, layout_scale=0.945, color=None, border='none', ylim=None, scalings=None, title=None, proj=False, vline=(0.0,), hline=(0.0,), fig_facecolor='k', fig_background=None, axis_facecolor='k', font_color='w', merge_grads=False, legend=True, axes=None, show=True):
def _plot_update_evoked_topo_proj(params, bools):
def plot_topo_image_epochs(epochs, layout=None, sigma=0.0, vmin=None, vmax=None, colorbar=True, order=None, cmap='RdBu_r', layout_scale=0.95, title=None, scalings=None, border='none', fig_facecolor='k', fig_background=None, font_color='w', show=True):
def ipart(x):
def jcal2jd(year, month, day):
def jd2jcal(jd):
def _check_h5py():
def _create_titled_group(root, key, title):
def _create_titled_dataset(root, key, title, data, comp_kw=None):
def write_hdf5(fname, data, overwrite=False, compression=4, title='h5io', slash='error'):
def read_hdf5(fname, title='h5io', slash='ignore'):
def _sort_keys(x):
def object_diff(a, b, pre=''):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d, **kw):
def itervalues(d, **kw):
def iteritems(d, **kw):
def iterlists(d, **kw):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def decorator(caller, func=None):
def __call__(self, func):
def find_position(string, index, last_index, last_pos):
def serialize(A):
def signature(obj):
@testing.requires_testing_data DCNL def test_simulate_stc():
@testing.requires_testing_data DCNL def test_simulate_sparse_stc():
@testing.requires_testing_data DCNL def test_generate_stc_single_hemi():
@testing.requires_testing_data DCNL def test_simulate_sparse_stc_single_hemi():
def _make_stc(raw, src):
def _get_data():
@testing.requires_testing_data DCNL def test_simulate_raw_sphere():
@slow_test DCNL @testing.requires_testing_data DCNL def test_simulate_raw_bem():
@slow_test DCNL @testing.requires_testing_data DCNL def test_simulate_raw_chpi():
@testing.requires_testing_data DCNL def test_simulate_evoked():
@testing.requires_testing_data DCNL def test_metrics():
def _check_stc(stc1, stc2):
def source_estimate_quantification(stc1, stc2, metric='rms'):
def _log_ch(start, info, ch):
@verbose DCNL def simulate_evoked(fwd, stc, info, cov, nave=30, tmin=None, tmax=None, iir_filter=None, random_state=None, verbose=None, snr=None):
def simulate_noise_evoked(evoked, cov, iir_filter=None, random_state=None):
def _generate_noise(info, cov, iir_filter, random_state, n_samples, zi=None):
@deprecated('add_noise_evoked DCSP will DCSP be DCSP deprecated DCSP and DCSP removed DCSP in DCSP 0.16.') DCNL def add_noise_evoked(evoked, noise, snr, tmin=None, tmax=None):
def select_source_in_label(src, label, random_state=None, location='random', subject=None, subjects_dir=None, surf='sphere'):
def simulate_sparse_stc(src, n_dipoles, times, data_fun=(lambda t: (1e-07 * np.sin(((20 * np.pi) * t)))), labels=None, random_state=None, location='random', subject=None, subjects_dir=None, surf='sphere'):
def simulate_stc(src, labels, stc_data, tmin, tstep, value_fun=None):
def _get_tslice(epochs, tmin, tmax):
@verbose DCNL def read_cov(fname, verbose=None):
@verbose DCNL def make_ad_hoc_cov(info, verbose=None):
def _check_n_samples(n_samples, n_chan):
@verbose DCNL def compute_raw_covariance(raw, tmin=0, tmax=None, tstep=0.2, reject=None, flat=None, picks=None, method='empirical', method_params=None, cv=3, scalings=None, n_jobs=1, return_estimators=False, reject_by_annotation=True, verbose=None):
@verbose DCNL def compute_covariance(epochs, keep_sample_mean=True, tmin=None, tmax=None, projs=None, method='empirical', method_params=None, cv=3, scalings=None, n_jobs=1, return_estimators=False, on_mismatch='raise', verbose=None):
def _compute_covariance_auto(data, method, info, method_params, cv, scalings, n_jobs, stop_early, picks_list, verbose):
def _logdet(A):
def _gaussian_loglik_scorer(est, X, y=None):
def _cross_val(data, est, cv, n_jobs):
def _auto_low_rank_model(data, mode, n_jobs, method_params, cv, stop_early=True, verbose=None):
def _get_covariance_classes():
def write_cov(fname, cov):
def _unpack_epochs(epochs):
def _get_ch_whitener(A, pca, ch_type, rank):
@verbose DCNL def prepare_noise_cov(noise_cov, info, ch_names, rank=None, scalings=None, verbose=None):
def regularize(cov, info, mag=0.1, grad=0.1, eeg=0.1, exclude='bads', proj=True, verbose=None):
def _regularized_covariance(data, reg=None):
@verbose DCNL def compute_whitener(noise_cov, info, picks=None, rank=None, scalings=None, return_rank=False, verbose=None):
@verbose DCNL def whiten_evoked(evoked, noise_cov, picks=None, diag=False, rank=None, scalings=None, verbose=None):
@verbose DCNL def _get_whitener_data(info, noise_cov, picks, diag=False, rank=None, scalings=None, verbose=None):
@verbose DCNL def _read_cov(fid, node, cov_kind, limited=False, verbose=None):
def _write_cov(fid, cov):
def _apply_scaling_array(data, picks_list, scalings):
def _apply_scaling_cov(data, picks_list, scalings):
def _check_scaling_inputs(data, picks_list, scalings):
def _estimate_rank_meeg_signals(data, info, scalings, tol='auto', return_singular=False):
def _estimate_rank_meeg_cov(data, info, scalings, tol='auto', return_singular=False):
def _mm_fmt(x):
def get_fs_home():
def set_fs_home():
def _fs_home_problem(fs_home):
def _mne_root_problem(mne_root):
def _initialize_gui(frame, view=None):
def combine_kit_markers():
@verbose DCNL def coregistration(tabbed=False, split=True, scene_width=None, inst=None, subject=None, subjects_dir=None, guess_mri_subject=None, scene_height=None, head_opacity=None, head_high_res=None, trans=None, scrollable=True, verbose=None):
def fiducials(subject=None, fid_file=None, subjects_dir=None):
def kit2fiff():
@requires_mayavi DCNL def test_kit2fiff_model():
@requires_mayavi DCNL def test_kit2fiff_gui():
@testing.requires_testing_data DCNL @requires_mayavi DCNL def test_bem_source():
@testing.requires_testing_data DCNL @requires_mayavi DCNL def test_fiducials_source():
@testing.requires_testing_data DCNL @requires_mayavi DCNL def test_inst_source():
@testing.requires_testing_data DCNL @requires_mayavi DCNL def test_subject_source():
@testing.requires_testing_data DCNL @requires_mayavi DCNL @requires_freesurfer DCNL def test_subject_source_with_fsaverage():
@testing.requires_testing_data DCNL @requires_mayavi DCNL def test_coreg_model():
@testing.requires_testing_data DCNL @requires_mayavi DCNL def test_coreg_gui():
@testing.requires_testing_data DCNL @requires_mayavi DCNL def test_coreg_model_with_fsaverage():
@requires_mayavi DCNL def test_combine_markers_model():
@testing.requires_testing_data DCNL @requires_mayavi DCNL def test_mri_model():
def _make_view_coreg_panel(scrollable=False):
def _make_view(tabbed=False, split=False, scene_width=500, scene_height=400, scrollable=True):
def _testing_mode():
def read_tooltips(gui_name):
def _calc_g(cosang, stiffness=4, num_lterms=50):
def _make_interpolation_matrix(pos_from, pos_to, alpha=1e-05):
def _do_interp_dots(inst, interpolation, goods_idx, bads_idx):
def _interpolate_bads_eeg(inst):
def _interpolate_bads_meg(inst, mode='accurate', verbose=None):
def _get_meg_system(info):
def _contains_ch_type(info, ch_type):
def _get_ch_type(inst, ch_type):
@verbose DCNL def equalize_channels(candidates, verbose=None):
def _check_set(ch, projs, ch_type):
def rename_channels(info, mapping):
def _recursive_flatten(cell, dtype):
def read_ch_connectivity(fname, picks=None):
def _ch_neighbor_connectivity(ch_names, neighbors):
def find_ch_connectivity(info, ch_type):
def _compute_ch_connectivity(info, ch_type):
def fix_mag_coil_types(info):
def _get_T1T2_mag_inds(info):
def _get_ch_info(info):
def _get_test_info():
def test_io_layout_lout():
def test_io_layout_lay():
def test_auto_topomap_coords():
def test_make_eeg_layout():
def test_make_grid_layout():
def test_find_layout():
def test_box_size():
def test_generate_2d_layout():
def _load_data():
@slow_test DCNL def test_interpolation():
def test_montage():
@testing.requires_testing_data DCNL def test_read_locs():
def test_read_dig_montage():
def test_set_dig_montage():
@testing.requires_testing_data DCNL def test_fif_dig_montage():
@testing.requires_testing_data DCNL def test_egi_dig_montage():
def test_set_montage():
def _check_roundtrip(montage, fname):
def test_rename_channels():
def test_set_channel_types():
def test_read_ch_connectivity():
def test_get_set_sensor_positions():
@testing.requires_testing_data DCNL def test_find_ch_connectivity():
def get_builtin_montages():
def read_montage(kind, ch_names=None, path=None, unit='m', transform=False):
def _check_frame(d, frame_str):
def read_dig_montage(hsp=None, hpi=None, elp=None, point_names=None, unit='auto', fif=None, egi=None, transform=True, dev_head_t=False):
def _set_montage(info, montage, update_ch_names=False):
def _read_lout(fname):
def _read_lay(fname):
def read_layout(kind, path=None, scale=True):
def make_eeg_layout(info, radius=0.5, width=None, height=None, exclude='bads'):
def make_grid_layout(info, picks=None, n_col=None):
def find_layout(info, ch_type=None, exclude='bads'):
def _find_kit_layout(info, n_grads):
def _box_size(points, width=None, height=None, padding=0.0):
def _find_topomap_coords(info, picks, layout=None):
def _auto_topomap_coords(info, picks, ignore_overlap=False, to_sphere=True):
def _topo_to_sphere(pos, eegs):
def _pair_grad_sensors(info, layout=None, topomap_coords=True, exclude='bads', raise_error=True):
def _pair_grad_sensors_from_ch_names(ch_names):
def _merge_grad_data(data, method='rms'):
def generate_2d_layout(xy, w=0.07, h=0.05, pad=0.02, ch_names=None, ch_indices=None, name='ecog', bg_image=None, normalize=True):
def _get_cudafft():
def get_cuda_memory():
def init_cuda(ignore_config=False):
def setup_cuda_fft_multiply_repeated(n_jobs, h_fft):
def fft_multiply_repeated(h_fft, x, cuda_dict=dict(use_cuda=False)):
def setup_cuda_fft_resample(n_jobs, W, new_len):
def fft_resample(x, W, new_len, npads, to_removes, cuda_dict=dict(use_cuda=False)):
def _smart_pad(x, n_pad):
def _prepare_source_params(inst, inverse_operator, label=None, lambda2=(1.0 / 9.0), method='dSPM', nave=1, decim=1, pca=True, pick_ori='normal', prepared=False, verbose=None):
@verbose DCNL def source_band_induced_power(epochs, inverse_operator, bands, label=None, lambda2=(1.0 / 9.0), method='dSPM', nave=1, n_cycles=5, df=1, use_fft=False, decim=1, baseline=None, baseline_mode='logratio', pca=True, n_jobs=1, prepared=False, verbose=None):
def _prepare_tfr(data, decim, pick_ori, Ws, K, source_ori):
@verbose DCNL def _compute_pow_plv(data, K, sel, Ws, source_ori, use_fft, Vh, with_power, with_plv, pick_ori, decim, verbose=None):
def _single_epoch_tfr(data, is_free_ori, K, Ws, use_fft, decim, shape, with_plv, with_power):
@verbose DCNL def _source_induced_power(epochs, inverse_operator, frequencies, label=None, lambda2=(1.0 / 9.0), method='dSPM', nave=1, n_cycles=5, decim=1, use_fft=False, pca=True, pick_ori='normal', n_jobs=1, with_plv=True, zero_mean=False, prepared=False, verbose=None):
@verbose DCNL def source_induced_power(epochs, inverse_operator, frequencies, label=None, lambda2=(1.0 / 9.0), method='dSPM', nave=1, n_cycles=5, decim=1, use_fft=False, pick_ori=None, baseline=None, baseline_mode='logratio', pca=True, n_jobs=1, zero_mean=False, prepared=False, verbose=None):
@verbose DCNL def compute_source_psd(raw, inverse_operator, lambda2=(1.0 / 9.0), method='dSPM', tmin=None, tmax=None, fmin=0.0, fmax=200.0, n_fft=2048, overlap=0.5, pick_ori=None, label=None, nave=1, pca=True, prepared=False, verbose=None):
@verbose DCNL def _compute_source_psd_epochs(epochs, inverse_operator, lambda2=(1.0 / 9.0), method='dSPM', fmin=0.0, fmax=200.0, pick_ori=None, label=None, nave=1, pca=True, inv_split=None, bandwidth=4.0, adaptive=False, low_bias=True, n_jobs=1, prepared=False, verbose=None):
@verbose DCNL def compute_source_psd_epochs(epochs, inverse_operator, lambda2=(1.0 / 9.0), method='dSPM', fmin=0.0, fmax=200.0, pick_ori=None, label=None, nave=1, pca=True, inv_split=None, bandwidth=4.0, adaptive=False, low_bias=True, return_generator=False, n_jobs=1, prepared=False, verbose=None):
def _pick_channels_inverse_operator(ch_names, inv):
@verbose DCNL def read_inverse_operator(fname, verbose=None):
@verbose DCNL def write_inverse_operator(fname, inv, verbose=None):
def combine_xyz(vec, square=False):
def _check_ch_names(inv, info):
@verbose DCNL def prepare_inverse_operator(orig, nave, lambda2, method, verbose=None):
@verbose DCNL def _assemble_kernel(inv, label, method, pick_ori, verbose=None):
def _check_method(method):
def _check_ori(pick_ori):
def _check_reference(inst):
def _subject_from_inverse(inverse_operator):
@verbose DCNL def apply_inverse(evoked, inverse_operator, lambda2=(1.0 / 9.0), method='dSPM', pick_ori=None, prepared=False, label=None, verbose=None):
@verbose DCNL def apply_inverse_raw(raw, inverse_operator, lambda2, method='dSPM', label=None, start=None, stop=None, nave=1, time_func=None, pick_ori=None, buffer_size=None, prepared=False, verbose=None):
def _apply_inverse_epochs_gen(epochs, inverse_operator, lambda2, method='dSPM', label=None, nave=1, pick_ori=None, prepared=False, verbose=None):
@verbose DCNL def apply_inverse_epochs(epochs, inverse_operator, lambda2, method='dSPM', label=None, nave=1, pick_ori=None, return_generator=False, prepared=False, verbose=None):
@verbose DCNL def _prepare_forward(forward, info, noise_cov, pca=False, rank=None, verbose=None):
@verbose DCNL def make_inverse_operator(info, forward, noise_cov, loose=0.2, depth=0.8, fixed=False, limit_depth_chs=True, rank=None, verbose=None):
def compute_rank_inverse(inv):
@verbose DCNL def estimate_snr(evoked, inv, verbose=None):
@testing.requires_testing_data DCNL @requires_mne DCNL def test_snr():
@testing.requires_testing_data DCNL def test_tfr_with_inverse_operator():
@testing.requires_testing_data DCNL def test_source_psd():
@testing.requires_testing_data DCNL def test_source_psd_epochs():
def read_forward_solution_meg(*args, **kwargs):
def read_forward_solution_eeg(*args, **kwargs):
def _get_evoked():
def _compare(a, b):
def _compare_inverses_approx(inv_1, inv_2, evoked, rtol, atol, check_depth=True):
def _compare_io(inv_op, out_file_ext='.fif'):
@testing.requires_testing_data DCNL def test_warn_inverse_operator():
@slow_test DCNL @testing.requires_testing_data DCNL def test_make_inverse_operator():
@slow_test DCNL @testing.requires_testing_data DCNL def test_inverse_operator_channel_ordering():
@slow_test DCNL @testing.requires_testing_data DCNL def test_apply_inverse_operator():
@testing.requires_testing_data DCNL def test_make_inverse_operator_fixed():
@testing.requires_testing_data DCNL def test_make_inverse_operator_free():
@testing.requires_testing_data DCNL def test_make_inverse_operator_diag():
@testing.requires_testing_data DCNL def test_inverse_operator_noise_cov_rank():
@testing.requires_testing_data DCNL def test_inverse_operator_volume():
@slow_test DCNL @testing.requires_testing_data DCNL def test_io_inverse_operator():
@testing.requires_testing_data DCNL def test_apply_mne_inverse_raw():
@testing.requires_testing_data DCNL def test_apply_mne_inverse_fixed_raw():
@testing.requires_testing_data DCNL def test_apply_mne_inverse_epochs():
@testing.requires_testing_data DCNL def test_make_inverse_operator_bads():
@slow_test DCNL @testing.requires_testing_data DCNL def test_psf_ctf():
def _prepare_info(inverse_operator):
def _pick_leadfield(leadfield, forward, ch_names):
@verbose DCNL def point_spread_function(inverse_operator, forward, labels, method='dSPM', lambda2=(1 / 9.0), pick_ori=None, mode='mean', n_svd_comp=1, verbose=None):
def _get_matrix_from_inverse_operator(inverse_operator, forward, labels=None, method='dSPM', lambda2=(1.0 / 9.0), mode='mean', n_svd_comp=1):
@verbose DCNL def cross_talk_function(inverse_operator, forward, labels, method='dSPM', lambda2=(1 / 9.0), signed=False, mode='mean', n_svd_comp=1, verbose=None):
@verbose DCNL def make_stc_from_dipoles(dipoles, src, verbose=None):
@verbose DCNL def mixed_norm(evoked, forward, noise_cov, alpha, loose=0.2, depth=0.8, maxit=3000, tol=0.0001, active_set_size=10, pca=True, debias=True, time_pca=True, weights=None, weights_min=None, solver='auto', n_mxne_iter=1, return_residual=False, return_as_dipoles=False, verbose=None):
def _window_evoked(evoked, size):
@verbose DCNL def tf_mixed_norm(evoked, forward, noise_cov, alpha_space, alpha_time, loose=0.2, depth=0.8, maxit=3000, tol=0.0001, weights=None, weights_min=None, pca=True, debias=True, wsize=64, tstep=4, window=0.02, return_residual=False, return_as_dipoles=False, verbose=None):
def _check_stcs(stc1, stc2):
@slow_test DCNL @testing.requires_testing_data DCNL def test_mxne_inverse():
def test_compute_debiasing():
def test_l21_mxne():
def test_tf_mxne():
def test_tf_mxne_vs_mxne():
def test_iterative_reweighted_mxne():
def _check_stc(stc, evoked, idx, ratio=50.0):
def _check_stcs(stc1, stc2):
@slow_test DCNL @testing.requires_testing_data DCNL def test_gamma_map():
def groups_norm2(A, n_orient):
def norm_l2inf(A, n_orient, copy=True):
def norm_l21(A, n_orient, copy=True):
def prox_l21(Y, alpha, n_orient, shape=None, is_stft=False):
def prox_l1(Y, alpha, n_orient):
def dgap_l21(M, G, X, active_set, alpha, n_orient):
@verbose DCNL def _mixed_norm_solver_prox(M, G, alpha, lipschitz_constant, maxit=200, tol=1e-08, verbose=None, init=None, n_orient=1):
@verbose DCNL def _mixed_norm_solver_cd(M, G, alpha, lipschitz_constant, maxit=10000, tol=1e-08, verbose=None, init=None, n_orient=1):
@verbose DCNL def _mixed_norm_solver_bcd(M, G, alpha, lipschitz_constant, maxit=200, tol=1e-08, verbose=None, init=None, n_orient=1):
@verbose DCNL def mixed_norm_solver(M, G, alpha, maxit=3000, tol=1e-08, verbose=None, active_set_size=50, debias=True, n_orient=1, solver='auto', return_gap=False):
@verbose DCNL def iterative_mixed_norm_solver(M, G, alpha, n_mxne_iter, maxit=3000, tol=1e-08, verbose=None, active_set_size=50, debias=True, n_orient=1, solver='auto'):
@verbose DCNL def tf_lipschitz_constant(M, G, phi, phiT, tol=0.001, verbose=None):
def safe_max_abs(A, ia):
def safe_max_abs_diff(A, ia, B, ib):
def norm_l21_tf(Z, shape, n_orient):
def norm_l1_tf(Z, shape, n_orient):
def dgap_l21l1(M, G, Z, active_set, alpha_space, alpha_time, phi, phiT, shape, n_orient, highest_d_obj):
@verbose DCNL def tf_mixed_norm_solver(M, G, alpha_space, alpha_time, wsize=64, tstep=4, n_orient=1, maxit=200, tol=1e-08, log_objective=True, active_set_size=None, debias=True, return_gap=False, verbose=None):
def power_iteration_kron(A, C, max_iter=1000, tol=0.001, random_state=0):
@verbose DCNL def compute_bias(M, G, X, max_iter=1000, tol=1e-06, n_orient=1, verbose=None):
@verbose DCNL def _gamma_map_opt(M, G, alpha, maxit=10000, tol=1e-06, update_mode=1, group_size=1, gammas=None, verbose=None):
@verbose DCNL def gamma_map(evoked, forward, noise_cov, alpha, loose=0.2, depth=0.8, xyz_same_gamma=True, maxit=10000, tol=1e-06, update_mode=1, gammas=None, pca=True, return_residual=False, return_as_dipoles=False, verbose=None):
def _to_const(cf):
def _coord_frame_name(cframe):
def apply_trans(trans, pts, move=True):
def rotation(x=0, y=0, z=0):
def rotation3d(x=0, y=0, z=0):
def rotation3d_align_z_axis(target_z_axis):
def rotation_angles(m):
def scaling(x=1, y=1, z=1):
def translation(x=0, y=0, z=0):
def _ensure_trans(trans, fro='mri', to='head'):
def _get_trans(trans, fro='mri', to='head'):
def combine_transforms(t_first, t_second, fro, to):
def read_trans(fname, return_all=False):
def write_trans(fname, trans):
def invert_transform(trans):
def transform_surface_to(surf, dest, trans, copy=False):
def get_ras_to_neuromag_trans(nasion, lpa, rpa):
def _cart_to_sph(cart):
def _sph_to_cart(sph):
def _get_n_moments(order):
def _sph_to_cart_partials(az, pol, g_rad, g_az, g_pol):
def _deg_ord_idx(deg, order):
def _sh_negate(sh, order):
def _sh_complex_to_real(sh, order):
def _sh_real_to_complex(shs, order):
def _compute_sph_harm(order, az, pol):
def _tps(distsq):
def _pol_to_cart(pol):
def _topo_to_sph(topo):
def quat_to_rot(quat):
def _one_rot_to_quat(rot):
def rot_to_quat(rot):
def _angle_between_quats(x, y):
def _skew_symmetric_cross(a):
def _find_vector_rotation(a, b):
def is_power2(num):
def next_fast_len(target):
def _overlap_add_filter(x, h, n_fft=None, phase='zero', picks=None, n_jobs=1, copy=True):
def _1d_overlap_filter(x, h_fft, n_h, n_edge, phase, cuda_dict):
def _filter_attenuation(h, freq, gain):
def _prep_for_filtering(x, copy, picks=None):
def _firwin_design(N, freq, gain, window, sfreq):
def _construct_fir_filter(sfreq, freq, gain, filter_length, phase, fir_window, fir_design):
def _check_coefficients(system):
def _filtfilt(x, iir_params, picks, n_jobs, copy):
def estimate_ringing_samples(system, max_try=100000):
def construct_iir_filter(iir_params, f_pass=None, f_stop=None, sfreq=None, btype=None, return_copy=True):
def _check_method(method, iir_params, extra_types=()):
@verbose DCNL def filter_data(data, sfreq, l_freq, h_freq, picks=None, filter_length='auto', l_trans_bandwidth='auto', h_trans_bandwidth='auto', n_jobs=1, method='fir', iir_params=None, copy=True, phase='zero', fir_window='hamming', fir_design=None, verbose=None):
@verbose DCNL def create_filter(data, sfreq, l_freq, h_freq, filter_length='auto', l_trans_bandwidth='auto', h_trans_bandwidth='auto', method='fir', iir_params=None, phase='zero', fir_window='hamming', fir_design=None, verbose=None):
@verbose DCNL def notch_filter(x, Fs, freqs, filter_length='auto', notch_widths=None, trans_bandwidth=1, method='fir', iir_params=None, mt_bandwidth=None, p_value=0.05, picks=None, n_jobs=1, copy=True, phase='zero', fir_window='hamming', fir_design=None, verbose=None):
def _mt_spectrum_proc(x, sfreq, line_freqs, notch_widths, mt_bandwidth, p_value, picks, n_jobs, copy):
def _mt_spectrum_remove(x, sfreq, line_freqs, notch_widths, window_fun, threshold):
@verbose DCNL def resample(x, up=1.0, down=1.0, npad=100, axis=(-1), window='boxcar', n_jobs=1, verbose=None):
def _resample_stim_channels(stim_data, up, down):
def detrend(x, order=1, axis=(-1)):
def _triage_filter_params(x, sfreq, l_freq, h_freq, l_trans_bandwidth, h_trans_bandwidth, filter_length, method, phase, fir_window, fir_design, bands='scalar', reverse=False):
@verbose DCNL def design_mne_c_filter(sfreq, l_freq=None, h_freq=40.0, l_trans_bandwidth=None, h_trans_bandwidth=5.0, verbose=None):
def _log_rescale(baseline, mode='mean'):
@verbose DCNL def rescale(data, times, baseline, mode='mean', copy=True, verbose=None):
@register DCNL def validate_fun_facts():
@library.global_function DCNL def random_funfact():
def _calculate_photo_filename(instance, filename):
@shared_task(bind=True, base=DebugBasketTask, default_retry_delay=BASKET_TASK_RETRY_DELAY, max_retries=BASKET_TASK_MAX_RETRIES) DCNL def lookup_user_task(self, email):
@shared_task(bind=True, base=DebugBasketTask, default_retry_delay=BASKET_TASK_RETRY_DELAY, max_retries=BASKET_TASK_MAX_RETRIES) DCNL def subscribe_user_task(self, result, email='', newsletters=[], sync='N', optin='Y'):
@shared_task(bind=True, base=DebugBasketTask, default_retry_delay=BASKET_TASK_RETRY_DELAY, max_retries=BASKET_TASK_MAX_RETRIES) DCNL def unsubscribe_user_task(self, result, newsletters=[], optout=False):
@shared_task() DCNL def subscribe_user_to_basket(instance_id, newsletters=[]):
@shared_task() DCNL def update_email_in_basket(old_email, new_email):
@shared_task() DCNL def unsubscribe_from_basket_task(email, newsletters=[]):
@task DCNL def remove_incomplete_accounts(days=INCOMPLETE_ACC_MAX_DAYS):
@task(ignore_result=False) DCNL def check_celery():
@task DCNL def check_spam_account(instance_id, **kwargs):
@periodic_task(run_every=timedelta(hours=24)) DCNL def delete_reported_spam_accounts():
@shared_task(time_limit=settings.ES_REINDEX_TIMEOUT) DCNL def index_all_profiles():
def get_languages_for_locale(locale):
def autovouch_getpocket(apps, schema_editor):
def vouch_mozilla_alternate_emails(apps, schema_editor):
def unvouch_mozilla_alternate_emails(apps, schema_editor):
def _calculate_photo_filename(instance, filename):
def subscribe_to_basket_action(newsletter):
def unsubscribe_from_basket_action(newsletter):
def update_vouch_flags_action():
def get_autocomplete_location_query(qs, q):
@receiver(signals.post_save, sender=ExternalAccount, dispatch_uid='add_employee_vouch_sig') DCNL def add_employee_vouch(sender, instance, **kwargs):
@periodic_task(run_every=timedelta(hours=1)) DCNL def celery_healthcheck():
@task(soft_time_limit=ADMIN_EXPORT_TIMEOUT) DCNL def async_data_export(file_format, values_list, qs_model, filename):
def absolutify(url):
def akismet_spam_check(user_ip, user_agent, **optional):
def _urlencode(items):
@library.filter DCNL def urlparams(url_, hash=None, **query):
def gravatar(email, default_avatar_url=settings.DEFAULT_AVATAR_URL, size=175, rating='pg'):
@library.global_function DCNL def field_with_attrs(bfield, **kwargs):
@library.global_function DCNL def mozillians_field(element, required=False):
@library.global_function DCNL def mozillians_form(element):
@library.global_function DCNL def thumbnail(img, geometry, **kwargs):
def redirect(to, *args, **kwargs):
@library.global_function DCNL @contextfunction DCNL def display_context(context, include_callables=False):
@library.global_function DCNL @contextfunction DCNL def get_context(context):
@library.global_function DCNL def is_callable(thing):
def aware_utcnow():
@library.global_function DCNL def now_in_timezone(timezone_name):
def offset_of_timezone(timezone_name):
def get_datetime(days=0, weeks=0):
def get_object_or_none(model_class, **kwargs):
@library.global_function DCNL def url(viewname, *args, **kwargs):
@library.global_function DCNL def nonprefixed_url(viewname, *args, **kwargs):
@library.global_function DCNL def get_privacy_level(request):
@library.global_function DCNL def get_privacy_aware_photo_url(profile, privacy_level, geometry, **kwargs):
@library.filter DCNL def ifeq(a, b, text):
@library.filter DCNL def f(s, *args, **kwargs):
def canonical_path(request):
def set_url_prefix(prefix):
def get_url_prefix():
def reverse(viewname, urlconf=None, args=None, kwargs=None, prefix=None):
def split_path(path_):
def _set_attribute_func(function, attribute, value):
def allow_public(function):
def allow_unvouched(function):
def calculate_username(email):
@contextmanager DCNL def safe_query_string(request):
@allow_public DCNL def contribute_view(request):
def error_page(request, template, status=None):
@library.global_function DCNL def langcode_to_name(code, locale=None):
@library.filter DCNL def simple_urlize(value):
@library.global_function DCNL def get_search_models(models):
def _get_privacy_fields(privacy_level):
@waffle_flag('testing-autovouch-views') DCNL @allow_unvouched DCNL @never_cache DCNL def vouch(request, username):
@waffle_flag('testing-autovouch-views') DCNL @allow_unvouched DCNL @never_cache DCNL def unvouch(request, username):
@allow_public DCNL @never_cache DCNL def view_profile(request, username):
@allow_unvouched DCNL @never_cache DCNL def edit_profile(request):
@allow_unvouched DCNL @never_cache DCNL def delete_email(request, email_pk):
@allow_unvouched DCNL @never_cache DCNL def change_primary_email(request, email_pk):
@allow_unvouched DCNL @never_cache DCNL def confirm_delete(request):
@allow_public DCNL @cache_control(public=True, must_revalidate=True, max_age=((3600 * 24) * 7)) DCNL def search_plugin(request):
@allow_unvouched DCNL def logout(request):
@allow_public DCNL def register(request):
def validate_twitter(username):
def validate_linkedin(url):
def validate_username(username):
def validate_website(url):
def validate_username_not_url(username):
def validate_email(value):
def validate_phone_number(value):
@library.global_function DCNL def latest_announcement():
def _calculate_image_filename(instance, filename):
@task(ignore_result=True) DCNL def remove_empty_groups():
@task(ignore_result=True) DCNL def send_pending_membership_emails():
@task(ignore_result=True) DCNL def email_membership_change(group_pk, user_pk, old_status, new_status):
@periodic_task(run_every=timedelta(hours=24)) DCNL def invalidate_group_membership():
@periodic_task(run_every=timedelta(hours=24)) DCNL def notify_membership_renewal():
@library.global_function DCNL def stringify_groups(groups):
def slugify(s):
@library.global_function DCNL def user_is_curator(group, userprofile):
@library.global_function DCNL def is_group_instance(obj):
def forward_migrate_group_curators(apps, schema_editor):
def backward_migrate_group_curators(apps, schema_editor):
def _list_groups(request, template, query, context={}):
def index_groups(request):
def index_skills(request):
def index_functional_areas(request):
@allow_unvouched DCNL @cache_control(must_revalidate=True, max_age=3600) DCNL def search(request, searched_object=Group):
@never_cache DCNL def show(request, url, alias_model, template):
@require_POST DCNL def confirm_member(request, url, user_pk):
def review_terms(request, url):
@require_POST DCNL def join_group(request, url):
@require_POST DCNL def toggle_skill_subscription(request, url):
@never_cache DCNL def group_edit(request, url=None):
def delete_invite(request, invite_pk):
@never_cache DCNL def accept_reject_invitation(request, invite_pk, action):
@never_cache DCNL def send_invitation_email(request, invite_pk):
@never_cache DCNL @waffle_flag('force_group_invalidation', '404') DCNL def force_group_invalidation(request, url, alias_model, template=''):
@never_cache DCNL @waffle_switch('test_membership_renewal_notification') DCNL def membership_renewal_notification(request):
def hashed_download(url, temp, digest):
@task DCNL def update_mozillians(ctx, tag):
def extract_bugs(changelog):
def generate_desc(from_commit, to_commit, changelog):
def django_to_jinja(template_name, context, **kw):
def jinja_for_django(template_name, context=None, **kw):
@cronjobs.register DCNL def remove_expired_registration_profiles():
@cronjobs.register DCNL def reindex_users_that_contributed_yesterday():
def patch_user_admin():
def patch_user_model():
def handle_register(request, text_template=None, html_template=None, subject=None, email_data=None, *args, **kwargs):
def try_send_email_with_form(func, form, field_name, *args, **kwargs):
@library.global_function DCNL def profile_url(user, edit=False):
@library.global_function DCNL def profile_avatar(user, size=48):
@library.global_function DCNL def display_name(user):
@library.filter DCNL def public_email(email):
def unicode_to_html(text):
@library.global_function DCNL def user_list(users):
@library.global_function DCNL def private_message(user):
@library.global_function DCNL def is_contributor(user):
def add_permission(user, model, permission_codename):
def get_auth_str(user):
@login_required DCNL @require_GET DCNL @json_view DCNL def usernames(request):
@ssl_required DCNL @anonymous_csrf DCNL @logout_required DCNL @require_http_methods(['GET', 'POST']) DCNL def user_auth(request, contributor=False, register_form=None, login_form=None):
@ssl_required DCNL @anonymous_csrf DCNL @mobile_template('users/{mobile/}login.html') DCNL def login(request, template):
@ssl_required DCNL @require_POST DCNL def logout(request):
@ssl_required DCNL @logout_required DCNL @require_http_methods(['GET', 'POST']) DCNL @anonymous_csrf DCNL @mobile_template('users/{mobile/}') DCNL def register(request, template, contributor=False):
def register_contributor(request):
@anonymous_csrf DCNL @mobile_template('users/{mobile/}activate.html') DCNL def activate(request, template, activation_key, user_id=None):
@anonymous_csrf DCNL @mobile_template('users/{mobile/}') DCNL def resend_confirmation(request, template):
@login_required DCNL @require_http_methods(['GET', 'POST']) DCNL @mobile_template('users/{mobile/}') DCNL def change_email(request, template):
@require_GET DCNL def confirm_change_email(request, activation_key):
@login_required DCNL @require_http_methods(['GET', 'POST']) DCNL @mobile_template('users/{mobile/}edit_settings.html') DCNL def edit_settings(request, template):
@login_required DCNL @require_http_methods(['GET', 'POST']) DCNL def edit_watch_list(request):
@login_required DCNL @require_http_methods(['GET', 'POST']) DCNL @mobile_template('users/{mobile/}edit_profile.html') DCNL def edit_profile(request, username=None, template=None):
@login_required DCNL @require_http_methods(['POST']) DCNL def make_contributor(request):
@login_required DCNL @require_http_methods(['GET', 'POST']) DCNL def edit_avatar(request):
@login_required DCNL @require_http_methods(['GET', 'POST']) DCNL def delete_avatar(request):
@anonymous_csrf DCNL @mobile_template('users/{mobile/}pw_reset_form.html') DCNL def password_reset(request, template):
@mobile_template('users/{mobile/}pw_reset_sent.html') DCNL def password_reset_sent(request, template):
@ssl_required DCNL @anonymous_csrf DCNL @mobile_template('users/{mobile/}pw_reset_confirm.html') DCNL def password_reset_confirm(request, template, uidb36=None, token=None):
@mobile_template('users/{mobile/}pw_reset_complete.html') DCNL def password_reset_complete(request, template):
@login_required DCNL @mobile_template('users/{mobile/}pw_change.html') DCNL def password_change(request, template):
@login_required DCNL @mobile_template('users/{mobile/}pw_change_complete.html') DCNL def password_change_complete(request, template):
@anonymous_csrf DCNL @mobile_template('users/{mobile/}forgot_username.html') DCNL def forgot_username(request, template):
@task(rate_limit='15/m') DCNL @timeit DCNL def generate_thumbnail(for_obj, from_field, to_field, max_size=settings.THUMBNAIL_SIZE):
def _create_image_thumbnail(file_path, longest_side=settings.THUMBNAIL_SIZE, pad=False):
def _make_image_square(source_image, side=settings.THUMBNAIL_SIZE):
def _scale_dimensions(width, height, longest_side=settings.THUMBNAIL_SIZE):
@task(rate_limit='15/m') DCNL @timeit DCNL def compress_image(for_obj, for_field):
def check_file_size(f, max_allowed_size):
def create_imageattachment(files, user, obj):
def upload_imageattachment(request, obj):
def upload_media(request, form_cls, up_file_callback, instance=None, **kwargs):
def clean_image_extension(form_field):
@login_required DCNL @require_POST DCNL @xframe_options_sameorigin DCNL def up_image_async(request, model_name, object_pk):
@require_POST DCNL @xframe_options_sameorigin DCNL def del_image_async(request, image_id):
@task() DCNL @timeit DCNL def send_reviewed_notification(revision, document, message):
@task() DCNL @timeit DCNL def send_contributor_notification(based_on, revision, document, message):
def schedule_rebuild_kb():
@task DCNL @timeit DCNL def add_short_links(doc_ids):
@task(rate_limit='3/h') DCNL @timeit DCNL def rebuild_kb():
@task(rate_limit='5/m') DCNL @timeit DCNL def _rebuild_kb_chunk(data):
@task() DCNL @timeit DCNL def maybe_award_badge(badge_template, year, user):
@task() DCNL @timeit DCNL def render_document_cascade(base):
def context_dict(revision, ready_for_l10n=False, revision_approved=False):
@cronjobs.register DCNL def generate_missing_share_links():
@cronjobs.register DCNL def reindex_kb():
@cronjobs.register DCNL def send_weekly_ready_for_review_digest():
@cronjobs.register DCNL def fix_current_revisions():
def active_contributors(from_date, to_date=None, locale=None, product=None):
def generate_short_url(long_url):
def num_active_contributors(from_date, to_date=None, locale=None, product=None):
def _active_contributors_id(from_date, to_date, locale, product):
@library.global_function DCNL def diff_table(content_from, content_to):
def doc_parse_markup(content, markup):
def balanced_eq(want, to_balance):
def expanded_eq(want, to_expand):
def _test_form_maintains_based_on_rev(client, doc, view, post_data, locale=None):
def _objects_eq(manager, list_):
def _set_up_ready_watcher():
def _doc_components_from_url(url, required_locale=None, check_host=True):
def points_to_document_view(url, required_locale=None):
def user_num_documents(user):
def user_documents(user):
def user_redirects(user):
def doc_html_cache_key(locale, slug, mobile, minimal):
def wiki_to_html(wiki_markup, locale=settings.WIKI_DEFAULT_LANGUAGE, doc_id=None, parser_cls=None):
def _format_template_content(content, params):
def _build_template_params(params_str):
def _key_split(matchobj):
def _is_leader(locale, user):
def _is_reviewer(locale, user):
def check_simple_wiki_locale(view_func):
def locale_list(request):
def locale_details(request, locale_code, leader_form=None, reviewer_form=None, editor_form=None):
@login_required DCNL @require_POST DCNL def add_to_locale(request, locale_code, role):
@login_required DCNL @require_http_methods(['GET', 'POST']) DCNL def remove_from_locale(request, locale_code, user_id, role):
def _user_can_edit(user, locale):
def topics_for(product, parent=False):
def documents_for(locale, topics=None, products=None):
def _documents_for(locale, topics=None, products=None):
def _es_documents_for(locale, topics=None, products=None):
def _db_documents_for(locale, topics=None, products=None):
def doc_page_cache(view):
@require_GET DCNL @doc_page_cache DCNL @mobile_template('wiki/{mobile/}') DCNL def document(request, document_slug, template=None, document=None):
def revision(request, document_slug, revision_id):
@require_GET DCNL def list_documents(request, category=None):
@login_required DCNL def new_document(request):
def _document_lock_check(document_id):
def _document_lock_steal(document_id, user_name, expire_time=(60 * 15)):
def _document_lock_clear(document_id, user_name):
def _document_lock(doc_id, username):
@require_http_methods(['GET', 'POST']) DCNL @login_required DCNL def edit_document(request, document_slug, revision_id=None):
@csrf_exempt DCNL @login_required DCNL @require_POST DCNL def draft_revision(request):
@login_required DCNL @require_POST DCNL def preview_revision(request):
@require_GET DCNL def document_revisions(request, document_slug, contributor_form=None):
@login_required DCNL def review_revision(request, document_slug, revision_id):
@require_GET DCNL def compare_revisions(request, document_slug):
@login_required DCNL def select_locale(request, document_slug):
@require_http_methods(['GET', 'POST']) DCNL @login_required DCNL def translate(request, document_slug, revision_id=None):
@require_POST DCNL @login_required DCNL def watch_document(request, document_slug):
@require_POST DCNL @login_required DCNL def unwatch_document(request, document_slug):
@require_POST DCNL @login_required DCNL def watch_locale(request, product=None):
@require_POST DCNL @login_required DCNL def unwatch_locale(request, product=None):
@require_POST DCNL @login_required DCNL def watch_approved(request, product=None):
@require_POST DCNL @login_required DCNL def unwatch_approved(request, product=None):
@require_POST DCNL @login_required DCNL def watch_ready(request, product=None):
@require_POST DCNL @login_required DCNL def unwatch_ready(request, product=None):
@require_GET DCNL def json_view(request):
@require_POST DCNL @csrf_exempt DCNL @ratelimit('document-vote', '10/d') DCNL def helpful_vote(request, document_slug):
@require_POST DCNL @csrf_exempt DCNL def unhelpful_survey(request):
@login_required DCNL def delete_revision(request, document_slug, revision_id):
@login_required DCNL @require_POST DCNL def mark_ready_for_l10n_revision(request, document_slug, revision_id):
@login_required DCNL def delete_document(request, document_slug):
@login_required DCNL @require_POST DCNL def add_contributor(request, document_slug):
@login_required DCNL @require_http_methods(['GET', 'POST']) DCNL def remove_contributor(request, document_slug, user_id):
def _document_form_initial(document):
def _save_rev_and_notify(rev_form, creator, document, based_on_id=None, base_rev=None):
def _maybe_schedule_rebuild(form):
@require_GET DCNL def what_links_here(request, document_slug):
def get_fallback_locale(doc, request):
def parse_accept_lang_header(lang_string):
def on_revision_save(sender, instance, **kwargs):
@cronjobs.register DCNL def update_top_contributors():
@library.global_function DCNL def karma_titles(user):
@task(rate_limit='4/s') DCNL @timeit DCNL def update_question_vote_chunk(data):
@task() DCNL @timeit DCNL def maybe_award_badge(badge_template, year, user):
@task() DCNL @timeit DCNL def escalate_question(question_id):
@cronjobs.register DCNL def update_weekly_votes():
@cronjobs.register DCNL def auto_archive_old_questions():
@cronjobs.register DCNL def reload_question_traffic_stats():
@cronjobs.register DCNL def escalate_questions():
@cronjobs.register DCNL def report_employee_answers():
def add_backtrack_keys(products):
def num_questions(user):
def num_answers(user):
def num_solutions(user):
def mark_content_as_spam(user, by_user):
def _add_tag_url(question_id):
def _add_async_tag_url(question_id):
def _remove_tag_url(question_id):
def _remove_async_tag_url(question_id):
def tags_eq(tagged_object, tag_names):
def _tag_added(sender, question_id, tag_name, **kwargs):
def reindex_questions_answers(sender, instance, **kw):
def user_pre_save(sender, instance, **kw):
def _tenths_version(full_version):
def _has_beta(version, dev_releases):
@mobile_template('questions/{mobile/}product_list.html') DCNL def product_list(request, template):
@mobile_template('questions/{mobile/}question_list.html') DCNL def question_list(request, template, product_slug):
def parse_troubleshooting(troubleshooting_json):
@mobile_template('questions/{mobile/}question_details.html') DCNL @anonymous_csrf DCNL def question_details(request, template, question_id, form=None, watch_form=None, answer_preview=None, **extra_kwargs):
@ssl_required DCNL @mobile_template('questions/{mobile/}new_question.html') DCNL @anonymous_csrf DCNL def aaq(request, product_key=None, category_key=None, showform=False, template=None, step=0):
@ssl_required DCNL def aaq_step2(request, product_key):
@ssl_required DCNL def aaq_step3(request, product_key, category_key):
@ssl_required DCNL def aaq_step4(request, product_key, category_key):
@ssl_required DCNL def aaq_step5(request, product_key, category_key):
def aaq_confirm(request):
@require_http_methods(['GET', 'POST']) DCNL @login_required DCNL def edit_question(request, question_id):
def _skip_answer_ratelimit(request):
@require_POST DCNL @login_required DCNL @ratelimit('answer-min', '4/m', skip_if=_skip_answer_ratelimit) DCNL @ratelimit('answer-day', '100/d', skip_if=_skip_answer_ratelimit) DCNL def reply(request, question_id):
def solve(request, question_id, answer_id):
@require_POST DCNL @login_required DCNL def unsolve(request, question_id, answer_id):
@require_POST DCNL @csrf_exempt DCNL @ratelimit('question-vote', '10/d') DCNL def question_vote(request, question_id):
@csrf_exempt DCNL @ratelimit('answer-vote', '10/d') DCNL def answer_vote(request, question_id, answer_id):
@permission_required('questions.tag_question') DCNL def add_tag(request, question_id):
@permission_required('questions.tag_question') DCNL @require_POST DCNL def add_tag_async(request, question_id):
@permission_required('questions.tag_question') DCNL @require_POST DCNL def remove_tag(request, question_id):
@permission_required('questions.tag_question') DCNL @require_POST DCNL def remove_tag_async(request, question_id):
@permission_required('flagit.can_moderate') DCNL @require_POST DCNL def mark_spam(request):
@permission_required('flagit.can_moderate') DCNL @require_POST DCNL def unmark_spam(request):
@login_required DCNL def delete_question(request, question_id):
@login_required DCNL def delete_answer(request, question_id, answer_id):
@require_POST DCNL @login_required DCNL def lock_question(request, question_id):
@require_POST DCNL @login_required DCNL def archive_question(request, question_id):
@login_required DCNL def edit_answer(request, question_id, answer_id):
@require_POST DCNL @anonymous_csrf DCNL def watch_question(request, question_id):
@require_POST DCNL @login_required DCNL def unwatch_question(request, question_id):
@require_GET DCNL def unsubscribe_watch(request, watch_id, secret):
@require_GET DCNL def activate_watch(request, watch_id, secret):
@login_required DCNL @require_POST DCNL def answer_preview_async(request):
@mobile_template('questions/{mobile/}marketplace.html') DCNL def marketplace(request, template=None):
@anonymous_csrf DCNL @mobile_template('questions/{mobile/}marketplace_category.html') DCNL def marketplace_category(request, category_slug, template=None):
@anonymous_csrf DCNL @mobile_template('questions/{mobile/}marketplace_refund.html') DCNL def marketplace_refund(request, template):
@anonymous_csrf DCNL @mobile_template('questions/{mobile/}marketplace_developer_request.html') DCNL def marketplace_developer_request(request, template):
@mobile_template('questions/{mobile/}marketplace_success.html') DCNL def marketplace_success(request, template=None):
def stats_topic_data(bucket_days, start, end, locale=None, product=None):
def metrics(request, locale_code=None):
def _search_suggestions(request, text, locale, product_slugs):
def _answers_data(request, question_id, form=None, watch_form=None, answer_preview=None):
def _add_tag(request, question_id):
def on_reply_save(sender, instance, created, **kwargs):
def get_zendesk():
def submit_ticket(email, category, subject, body, tags):
def _cursor():
def _format_row_with_out_of_dateness(readout_locale, eng_slug, eng_title, slug, title, visits, significance, needs_review):
def kb_overview_rows(mode=None, max=None, locale=None, product=None, category=None):
def l10n_overview_rows(locale, product=None):
@cronjobs.register DCNL def update_l10n_coverage_metrics():
@cronjobs.register DCNL def update_l10n_contributor_metrics(day=None):
def _get_old_unhelpful():
def _get_current_unhelpful(old_formatted):
@cronjobs.register DCNL def cache_most_unhelpful_kb_articles():
def render_readouts(request, readouts, template, locale=None, extra_data=None, product=None):
def get_locales_by_visit(start_date, end_date):
def period_dates(period):
def _kb_readout(request, readout_slug, readouts, locale=None, mode=None, product=None):
def _kb_detail(request, readout_slug, readouts, main_view_name, main_dash_title, locale=None, product=None):
@require_GET DCNL def contributors_detail(request, readout_slug):
@require_GET DCNL def localization_detail(request, readout_slug):
@require_GET DCNL def localization(request):
@require_GET DCNL def contributors(request):
@require_GET DCNL def contributors_old(request):
@require_GET DCNL def wiki_rows(request, readout_slug):
@require_GET DCNL def locale_metrics(request, locale_code):
@require_GET DCNL def aggregated_metrics(request):
@task() DCNL @timeit DCNL def measure_queue_lag(queued_time):
def send_messages(messages):
def safe_translation(f):
def render_email(template, context):
def make_mail(subject, text_template, html_template, context_vars, from_email, to_email, headers=None, **extra_kwargs):
def emails_with_users_and_watches(subject, text_template, html_template, context_vars, users_and_watches, from_email=settings.TIDINGS_FROM_ADDRESS, default_locale=settings.WIKI_DEFAULT_LANGUAGE, **extra_kwargs):
@cronjobs.register DCNL def enqueue_lag_monitor_task():
@cronjobs.register DCNL def send_postatus_errors():
def monkeypatch_render():
def PermissionMod(field, permissions):
def paginate(request, queryset, per_page=20, count=None):
def simple_paginate(request, queryset, per_page=20):
def build_paged_url(request):
def chunked(seq, n, length=None):
def smart_int(string, fallback=0):
def delete_files_for_obj(sender, **kwargs):
def auto_delete_files(cls):
def get_next_url(request):
def truncated_json_dumps(obj, max_length, key, ensure_ascii=False):
def user_or_ip(key_prefix):
@contextmanager DCNL def uselocale(locale):
def rabbitmq_queue_size():
def is_ratelimited(request, name, rate, method=['POST'], skip_if=(lambda r: False)):
def get_browser(user_agent):
def redis_client(name):
def parse_backend_uri(backend_uri):
@library.filter DCNL def paginator(pager):
@library.global_function DCNL def url(viewname, *args, **kwargs):
@library.global_function DCNL def unlocalized_url(viewname, *args, **kwargs):
@library.filter DCNL def urlparams(url_, hash=None, query_dict=None, **query):
@library.filter DCNL def wiki_to_html(wiki_markup, locale=settings.WIKI_DEFAULT_LANGUAGE, nofollow=True):
@jinja2.contextfunction DCNL @library.global_function DCNL def breadcrumbs(context, items=list(), add_default=True, id=None):
def _babel_locale(locale):
def _contextual_locale(context):
@jinja2.contextfunction DCNL @library.global_function DCNL def datetimeformat(context, value, format='shortdatetime'):
@library.filter DCNL def collapse_linebreaks(text):
@jinja2.contextfunction DCNL @library.global_function DCNL def number(context, n):
@library.filter DCNL def timesince(d, now=None):
@library.filter DCNL def label_with_help(f):
@library.filter DCNL def remove(list_, item):
@jinja2.contextfunction DCNL @library.global_function DCNL def ga_push_attribute(context):
@library.global_function DCNL def add_utm(url_, campaign, source='notification', medium='email'):
@library.global_function DCNL def static(path):
@library.filter DCNL def class_selected(a, b):
@library.filter DCNL def f(format_string, *args, **kwargs):
@library.filter DCNL def fe(format_string, *args, **kwargs):
def test_paginated_url():
def test_breadcrumb():
def attrs_eq(received, **expected):
def starts_with(text, substring):
def send_mail_raise_smtp(messages):
def eq_msg(a, b, msg=None):
def template_used(response, template_name):
def global_settings(request):
def aaq_languages(request):
def wiki_to_html(wiki_markup, locale=settings.WIKI_DEFAULT_LANGUAGE, nofollow=True):
def get_object_fallback(cls, title, locale, default=None, **kwargs):
def _get_wiki_link(title, locale):
def build_hook_params(string, locale, allowed_params=[], allowed_param_values={}):
def generate_video(v, params=[]):
def generate_youtube_embed(video_id):
def _is_youtube_url(url):
def set_url_prefixer(prefixer):
def get_url_prefixer():
def reverse(viewname, urlconf=None, args=None, kwargs=None, prefix=None, force_locale=False, locale=None):
def get_non_supported(lang):
def get_best_language(accept_lang):
def split_path(path):
def retry_503(f):
def visitors(start_date, end_date):
def visitors_by_locale(start_date, end_date):
def pageviews_by_document(start_date, end_date, verbose=False):
def pageviews_by_question(start_date, end_date, verbose=False):
def search_ctr(start_date, end_date):
def jsonp_is_valid(funcname):
def markup_json(view_fun):
def ssl_required(view_func):
def json_view(f):
def cors_enabled(origin, methods=['GET']):
def timeit(f):
def ratelimit(name, rate, method=['POST'], skip_if=(lambda r: False)):
@api_view(['GET']) DCNL def locales_api_view(request):
@never_cache DCNL @mobile_template('sumo/{mobile/}locales.html') DCNL def locales(request, template):
def geoip_suggestion(request):
@anonymous_csrf DCNL def handle403(request):
def handle404(request):
def handle500(request):
def redirect_to(request, url, permanent=True, **kwargs):
def deprecated_redirect(request, url, **kwargs):
def robots(request):
def test_memcached(host, port):
@never_cache DCNL def monitor(request):
@cors_enabled('*') DCNL def serve_cors(*args, **kwargs):
def _format_decimal(num, format=None):
@contextlib.contextmanager DCNL def safe_query_string(request):
@check_simple_wiki_locale DCNL def home(request):
def auth_wanted(view_func):
def auth_required(view_func):
def add_existing_tag(tag_name, tag_manager):
@library.global_function DCNL def tags_to_text(tags):
@library.global_function DCNL def tag_vocab():
def unsubscribe(request, watch_id):
def settings(request):
def celery_settings(request):
def env(request):
def schema_version(request):
def redis_info(request):
@cache_page(((24 * 60) * 60)) DCNL def redirect(request, product, version, platform, locale, topic=None):
def read_index(group):
def write_index(group):
def get_indexes(all_indexes=False):
def get_doctype_stats(index):
def format_time(time_to_go):
def get_documents(cls, ids):
def get_analysis():
def recreate_indexes(es=None, indexes=None):
def get_index_settings(index):
def get_indexable(percent=100, mapping_types=None):
def index_chunk(cls, id_list, reraise=False):
def es_reindex_cmd(percent=100, delete=False, mapping_types=None, criticalmass=False, log=log):
def es_delete_cmd(index, noinput=False, log=log):
def es_status_cmd(checkindex=False, log=log):
def es_search_cmd(query, pages=1, log=log):
def es_analyzer_for_locale(locale, synonyms=False, fallback='standard'):
def es_query_with_analyzer(query, locale):
def handle_es_errors(template, status_code=503):
@task() DCNL @timeit DCNL def index_chunk_task(write_index, batch_id, rec_id, chunk):
@task() DCNL @timeit DCNL def index_task(cls, id_list, **kw):
@task() DCNL @timeit DCNL def unindex_task(cls, id_list, **kw):
def parse_synonyms(text):
def count_out_of_date():
def locale_or_default(locale):
def chunked(iterable, n):
def to_class_path(cls):
def from_class_path(cls_path):
def apply_boosts(searcher):
def generate_simple_search(search_form, language, with_highlights=False):
def get_mapping_types(mapping_types=None):
def _local_tasks():
def register_for_indexing(app, sender_class, instance_to_indexee=_identity, m2m=False):
def register_mapping_type(cls):
def generate_tasks(**kwargs):
def handle_reset(request):
def create_batch_id():
def handle_delete(request):
def reindex(mapping_type_names):
def handle_recreate_index(request):
def handle_reindex(request):
def search(request):
def _fix_results(results):
def cache_control(resp, cache_period):
def _es_down_template(request, *args, **kwargs):
def build_results_list(pages, is_json):
@markup_json DCNL @handle_es_errors(_es_down_template) DCNL @mobile_template('search/{mobile/}results.html') DCNL def simple_search(request, template=None):
@markup_json DCNL @handle_es_errors(_es_down_template) DCNL @mobile_template('search/{mobile/}results.html') DCNL def advanced_search(request, template=None):
@cache_page((60 * 15)) DCNL def opensearch_suggestions(request):
@cache_page(((60 * 60) * 168)) DCNL def opensearch_plugin(request):
def _ternary_filter(ternary_value):
def _build_es_excerpt(result, first_only=False):
def _fallback_results(locale, product_slugs):
@task() DCNL @timeit DCNL def maybe_award_badge(badge_template, year, user):
def get_word_blacklist_regex():
@cronjobs.register DCNL def purge_tweets():
def _get_oldest_tweet(locale, n=0):
def _filter_tweet(item, allow_links=False):
@cronjobs.register DCNL def get_customercare_stats():
@library.filter DCNL def isotime(t):
@library.filter DCNL def round_percent(num):
def test_isotime():
def get_common_replies(locale=settings.WIKI_DEFAULT_LANGUAGE):
@decorators.api_view(['POST']) DCNL @decorators.permission_classes([TwitterAccountBanPermission]) DCNL def ban(request):
@decorators.api_view(['POST']) DCNL @decorators.permission_classes([TwitterAccountBanPermission]) DCNL def unban(request):
@decorators.api_view(['POST']) DCNL @decorators.permission_classes([TwitterAccountIgnorePermission]) DCNL def ignore(request):
@decorators.api_view(['POST']) DCNL @decorators.permission_classes([TwitterAccountIgnorePermission]) DCNL def unignore(request):
def _tweet_for_template(tweet, https=False):
def _get_tweets(locale=settings.LANGUAGE_CODE, limit=MAX_TWEETS, max_id=None, reply_to=None, filter=None, https=False):
@require_GET DCNL def more_tweets(request):
@ssl_required DCNL @require_GET DCNL @twitter.auth_wanted DCNL def landing(request):
@permission_required('customercare.ban_account') DCNL def moderate(request):
@require_POST DCNL @login_required DCNL @twitter.auth_required DCNL def twitter_post(request):
@require_POST DCNL @login_required DCNL def hide_tweet(request):
def on_reply_save(sender, instance, **kwargs):
@login_required DCNL @permission_required('flagit.can_moderate') DCNL def queue(request, content_type=None):
@require_POST DCNL @login_required DCNL @permission_required('flagit.can_moderate') DCNL def update(request, flagged_object_id):
@task() DCNL @timeit DCNL def send_group_email(announcement_id):
@require_POST DCNL @login_required DCNL def create_for_locale(request):
@require_POST DCNL @login_required DCNL def delete(request, announcement_id):
@task() DCNL @timeit DCNL def send_award_notification(award):
def get_or_create_badge(badge_template, year=None):
@receiver(badge_was_awarded) DCNL def notify_award_recipient(sender, award, **kwargs):
@cronjobs.register DCNL def update_visitors_metric():
@cronjobs.register DCNL def update_l10n_metric():
@cronjobs.register DCNL def update_contributor_metrics(day=None):
def update_support_forum_contributors_metric(day=None):
def update_kb_contributors_metric(day=None):
def update_aoa_contributors_metric(day=None):
@cronjobs.register DCNL def update_search_ctr_metric():
def _get_latest_metric(metric_code):
def _get_top_docs(count):
@cronjobs.register DCNL def process_exit_surveys():
def _process_exit_survey_results():
@cronjobs.register DCNL def survey_recent_askers():
def _count_contributors_in_range(querysets, users, date_range):
def get_email_addresses(survey, startdate, enddate):
def add_email_to_campaign(survey, email):
def get_exit_survey_results(survey, date):
def _daily_qs_for(model_cls):
def _qs_for(model_cls):
def _start_date():
def _remap_date_counts(**kwargs):
def _merge_results(x, y):
def _cursor():
def _parse_date(text):
@jinja2.contextfunction DCNL @library.global_function DCNL def has_perm(context, perm, obj):
@jinja2.contextfunction DCNL @library.global_function DCNL def has_perm_or_owns(context, perm, obj, perm_obj, field_name='creator'):
def has_perm_or_owns(user, perm, obj, perm_obj, field_name='creator'):
def has_perm(user, perm, obj):
def perm_is_defined_on(perm, obj):
def user_access_decorator(redirect_func, redirect_url_func, deny_func=None, redirect_field=REDIRECT_FIELD_NAME):
def logout_required(redirect):
def login_required(func, login_url=None, redirect=REDIRECT_FIELD_NAME, only_active=True):
def permission_required(perm, login_url=None, redirect=REDIRECT_FIELD_NAME, only_active=True):
def has_perm_or_owns_or_403(perm, owner_attr, obj_lookup, perm_obj_lookup, **kwargs):
def _resolve_lookup((model, lookup, arg_name), view_kwargs):
def create_image(files, user):
def upload_image(request):
def check_media_permissions(media, user, perm_type):
def save_form(form, update_user=None, is_draft=True, **kwargs):
def gallery(request, media_type='image'):
@login_required DCNL @require_POST DCNL def upload(request, media_type='image'):
@login_required DCNL @require_POST DCNL def cancel_draft(request, media_type='image'):
def gallery_async(request):
def search(request, media_type):
@login_required DCNL def delete_media(request, media_id, media_type='image'):
@login_required DCNL def edit_media(request, media_id, media_type='image'):
def media(request, media_id, media_type='image'):
@login_required DCNL @require_POST DCNL @xframe_options_sameorigin DCNL def upload_async(request, media_type='image'):
def _get_media_info(media_id, media_type):
def _get_drafts(user):
def _init_media_form(form_cls, request=None, obj=None, ignore_fields=()):
@cronjobs.register DCNL def send_welcome_emails():
def top_contributors_questions(start=None, end=None, locale=None, product=None, count=10, page=1, use_cache=True):
def top_contributors_kb(start=None, end=None, product=None, count=10, page=1, use_cache=True):
def top_contributors_l10n(start=None, end=None, locale=None, product=None, count=10, page=1, use_cache=True):
def top_contributors_aoa(start=None, end=None, locale=None, count=10, page=1, use_cache=True):
def _apply_filters(query, start, end, locale=None, product=None):
def home(request):
def search(request):
def top_contributors(request, area):
def _validate_locale(locale):
@library.global_function DCNL def group_avatar(group_profile):
@login_required DCNL @require_http_methods(['GET', 'POST']) DCNL def edit_avatar(request, group_slug):
@login_required DCNL @require_http_methods(['GET', 'POST']) DCNL def delete_avatar(request, group_slug):
@login_required DCNL @require_POST DCNL def add_member(request, group_slug):
@login_required DCNL @require_http_methods(['GET', 'POST']) DCNL def remove_member(request, group_slug, user_id):
@login_required DCNL @require_POST DCNL def add_leader(request, group_slug):
@login_required DCNL @require_http_methods(['GET', 'POST']) DCNL def remove_leader(request, group_slug, user_id):
@login_required DCNL @require_POST DCNL def join_contributors(request):
def _user_can_edit(user, group_profile):
def _user_can_manage_leaders(user, group_profile):
def _last_post_from(posts, exclude_post=None):
def user_pre_save(sender, instance, **kw):
def forums(request):
def threads(request, forum_slug):
def posts(request, forum_slug, thread_id, form=None, post_preview=None, is_reply=False):
@require_POST DCNL @login_required DCNL def reply(request, forum_slug, thread_id):
@login_required DCNL def new_thread(request, forum_slug):
@require_POST DCNL @login_required DCNL @permission_required_or_403('forums_forum.thread_locked_forum', (Forum, 'slug__iexact', 'forum_slug')) DCNL def lock_thread(request, forum_slug, thread_id):
@require_POST DCNL @login_required DCNL @permission_required_or_403('forums_forum.thread_sticky_forum', (Forum, 'slug__iexact', 'forum_slug')) DCNL def sticky_thread(request, forum_slug, thread_id):
@login_required DCNL @has_perm_or_owns_or_403('forums_forum.thread_edit_forum', 'creator', (Thread, 'id__iexact', 'thread_id'), (Forum, 'slug__iexact', 'forum_slug')) DCNL def edit_thread(request, forum_slug, thread_id):
@login_required DCNL @permission_required_or_403('forums_forum.thread_delete_forum', (Forum, 'slug__iexact', 'forum_slug')) DCNL def delete_thread(request, forum_slug, thread_id):
@require_POST DCNL @login_required DCNL def move_thread(request, forum_slug, thread_id):
@login_required DCNL @has_perm_or_owns_or_403('forums_forum.post_edit_forum', 'author', (Post, 'id__iexact', 'post_id'), (Forum, 'slug__iexact', 'forum_slug')) DCNL def edit_post(request, forum_slug, thread_id, post_id):
@login_required DCNL @permission_required_or_403('forums_forum.post_delete_forum', (Forum, 'slug__iexact', 'forum_slug')) DCNL def delete_post(request, forum_slug, thread_id, post_id):
@require_POST DCNL @login_required DCNL def watch_thread(request, forum_slug, thread_id):
@require_POST DCNL @login_required DCNL def watch_forum(request, forum_slug):
@require_POST DCNL @login_required DCNL def post_preview_async(request):
def new_post_mails(reply, users_and_watches):
def new_thread_mails(post, users_and_watches):
@library.global_function DCNL def is_watching_discussion_locale(user, locale):
def _last_post_from(posts, exclude_post=None):
def get_document(slug, request):
def threads(request, document_slug):
def posts(request, document_slug, thread_id, form=None, post_preview=None):
def _is_ratelimited(request):
@login_required DCNL @require_POST DCNL def reply(request, document_slug, thread_id):
@login_required DCNL def new_thread(request, document_slug):
@require_POST DCNL @permission_required('kbforums.lock_thread') DCNL def lock_thread(request, document_slug, thread_id):
@require_POST DCNL @permission_required('kbforums.sticky_thread') DCNL def sticky_thread(request, document_slug, thread_id):
@login_required DCNL def edit_thread(request, document_slug, thread_id):
@permission_required('kbforums.delete_thread') DCNL def delete_thread(request, document_slug, thread_id):
@login_required DCNL def edit_post(request, document_slug, thread_id, post_id):
@permission_required('kbforums.delete_post') DCNL def delete_post(request, document_slug, thread_id, post_id):
@require_POST DCNL @login_required DCNL def watch_thread(request, document_slug, thread_id):
@require_POST DCNL @login_required DCNL def watch_locale(request):
@require_POST DCNL @login_required DCNL def watch_forum(request, document_slug):
@require_POST DCNL @login_required DCNL def post_preview_async(request, document_slug):
@check_simple_wiki_locale DCNL @mobile_template('products/{mobile/}products.html') DCNL def product_list(request, template):
@check_simple_wiki_locale DCNL @mobile_template('products/{mobile/}product.html') DCNL def product_landing(request, template, slug):
@check_simple_wiki_locale DCNL @mobile_template('products/{mobile/}documents.html') DCNL def document_listing(request, template, product_slug, topic_slug, subtopic_slug=None):
def _full_ct_query(action, actor_only=None):
def _send_simple_push(endpoint, version, max_retries=3, _retry_count=0):
@task(ignore_result=True) DCNL def send_notification(notification_id):
@notification_handler DCNL def simple_push(notification):
@receiver(post_save, sender=Action, dispatch_uid='action_create_notifications') DCNL def add_notification_for_action(sender, instance, created, **kwargs):
def notification_handler(fn):
@task() DCNL @timeit DCNL def email_private_message(inbox_message_id):
def send_message(to, text, sender=None):
def unread_count_for(user):
def unread_message_count(request):
@login_required DCNL @mobile_template('messages/{mobile/}new.html') DCNL def new_message(request, template):
@login_required DCNL def bulk_action(request, msgtype='inbox'):
@require_POST DCNL @login_required DCNL def preview_async(request):
def sprint_timeline(bugs, sprint):
def activate(specifier):
def encoded_hash(sha):
def path_and_line(req):
def hashes_above(path, line_number):
def run_pip(initial_args):
def hash_of_file(path):
def is_git_sha(text):
def requirement_args(argv, want_paths=False, want_other=False):
def peep_hash(argv):
def memoize(func):
def package_finder(argv):
def bucket(things, key):
def first_every_last(iterable, first, every, last):
def downloaded_reqs_from_path(path, argv):
def peep_install(argv):
def peep_port(paths):
def main():
@task DCNL def update_sumo(ctx, tag):
def count_contributors_in_range(queryset, users, date_range):
@register.tag DCNL def ifhasperm(parser, token):
@register.tag DCNL def permission_form(parser, token):
@register.tag DCNL def permission_request_form(parser, token):
@register.tag DCNL def get_permissions(parser, token):
@register.tag DCNL def get_permission_requests(parser, token):
@register.tag DCNL def get_permission(parser, token):
@register.tag DCNL def get_permission_request(parser, token):
@register.inclusion_tag('authority/permission_delete_link.html', takes_context=True) DCNL def permission_delete_link(context, perm):
@register.inclusion_tag('authority/permission_request_delete_link.html', takes_context=True) DCNL def permission_request_delete_link(context, perm):
@register.inclusion_tag('authority/permission_request_approve_link.html', takes_context=True) DCNL def permission_request_approve_link(context, perm):
def autodiscover():
def permission_required(perm, *lookup_variables, **kwargs):
def permission_required_or_403(perm, *args, **kwargs):
def permission_denied(request, template_name=None, extra_context=None):
@task DCNL @transaction.atomic DCNL def fetch_product_icon(url, ext_size, size, read_size=100000, **kw):
def make_external_id(product):
def get_product_jwt(product, contribution):
@api_view(['POST']) DCNL @permission_classes((AllowAny,)) DCNL def sig_check(request):
@task DCNL @use_master DCNL def update_supported_locales(ids, **kw):
@cronjobs.register DCNL def clean_old_signed(seconds=(60 * 60)):
def _get_installs(app_id):
@cronjobs.register DCNL @use_master DCNL def update_app_installs():
def _get_trending(app_id):
@cronjobs.register DCNL @use_master DCNL def update_app_trending():
@cronjobs.register DCNL def dump_user_installs_cron():
@cronjobs.register DCNL def mkt_gc(**kw):
def get_supported_locales(manifest):
def dehydrate_content_rating(rating):
def dehydrate_content_ratings(content_ratings):
def get_cached_minifest(app_or_langpack, force=False):
def clean_slug(instance, slug_field='app_slug'):
def attach_translations(addons):
def reverse_version(version):
@Webapp.on_change DCNL def watch_status(old_attr={}, new_attr={}, instance=None, sender=None, **kw):
@receiver(dbsignals.post_save, sender=Webapp, dispatch_uid='webapp.pre_generate_apk') DCNL def pre_generate_apk(sender=None, instance=None, **kw):
@memoize(prefix='get_excluded_in') DCNL def get_excluded_in(region_id):
def has_purchased(f):
def can_become_premium(f):
def app_view_factory(qs):
def reverse_version(version):
def get_task_user():
@transaction.atomic DCNL def create_user(email, group_name=None, overwrite=False, oauth_key=None, oauth_secret=None):
@login_required(redirect=False) DCNL @json_view DCNL def ajax(request):
def browserid_authenticate(request, assertion, is_mobile=False, browserid_audience=get_audience):
def run_validator(file_path, url=None):
@task DCNL @use_master DCNL @set_modified_on DCNL def resize_icon(src, dst, sizes, src_storage=private_storage, dst_storage=public_storage, **kw):
@task DCNL @use_master DCNL @set_modified_on DCNL def resize_promo_imgs(src, dst, sizes, **kw):
@task DCNL @use_master DCNL @set_modified_on DCNL def pngcrush_image(src, hash_field='image_hash', storage=public_storage, **kw):
@task DCNL @use_master DCNL @set_modified_on DCNL def resize_preview(src, pk, **kw):
def save_icon(obj, icon_content, sizes=mkt.CONTENT_ICON_SIZES):
def save_promo_imgs(obj, img_content):
@task DCNL @use_master DCNL def fetch_icon(pk, file_pk=None, **kw):
def failed_validation(*messages, **kwargs):
@cronjobs.register DCNL def send_new_region_emails(regions):
@cronjobs.register DCNL def exclude_new_region(regions):
def _flag_rereview_adult(app, ratings_body, rating):
def uri_to_pk(uri):
def escalate_prerelease_permissions(app, validation, version):
def _restore_app_status(app, save=True):
def test_resize_icon_shrink():
def test_resize_icon_enlarge():
def test_resize_icon_same():
def test_resize_icon_list():
def test_resize_promo_img():
def _mock_hide_64px_icon(path, *args, **kwargs):
def get_uuid(prefix=''):
def account_check(f):
def get_provider(name=None, id=None):
@register.function DCNL @jinja2.contextfunction DCNL def hub_page_title(context, title=None, addon=None):
@register.function DCNL @jinja2.contextfunction DCNL def hub_breadcrumbs(context, addon=None, items=None, add_default=False):
def dev_required(owner_for_post=False, allow_editors=False, support=False, webapp=False, skip_submit_check=False, staff=False):
def addon_listing(request):
def _ratings_success_msg(app, old_status, old_modified):
@login_required DCNL def upload_manifest(*args, **kwargs):
def make_validation_result(data):
@app_view DCNL @require_POST DCNL @permission_required([('Admin', '%'), ('Apps', 'Configure')]) DCNL def blocklist(request, addon):
def _filter_transactions(qs, data):
def _reverse(viewname, args=None, kwargs=None, request=None, format=None, **extra):
def custom_exception_handler(exc, context=None):
def include_version(version):
@cors_api_view(['GET']) DCNL @permission_classes([AllowAny]) DCNL def site_config(request):
def validate_2legged_oauth(oauth, uri, method, auth_header):
def get_user_hash(request):
def record_stat(key, request, **data):
def fireplace_route(path, name=None):
@gzip_page DCNL @cache_control(max_age=settings.CACHE_MIDDLEWARE_SECONDS) DCNL def commonplace(request, repo, **kwargs):
def fxa_authorize(request):
def add_app_ctx(ctx, app_slug):
@cronjobs.register DCNL def cleanup_validation_results():
def get_filepath(fileorpath):
def get_file(fileorpath):
def extract_zip(source):
def copy_over(source, dest):
def parse_addon(pkg, addon=None):
def _get_hash(filename, block_size=(2 ** 20), hash=hashlib.md5):
@receiver(models.signals.post_delete, sender=File, dispatch_uid='cleanup_file') DCNL def cleanup_file(sender, instance, **kw):
def nfd_str(u):
@webapp_file_view_token DCNL def serve(request, viewer, key):
def load_feature_profile(request):
def update(tiers):
def default_providers():
@receiver(models.signals.post_save, sender=PriceCurrency, dispatch_uid='save_price_currency') DCNL @receiver(models.signals.post_delete, sender=PriceCurrency, dispatch_uid='delete_price_currency') DCNL def update_price_currency(sender, instance, **kw):
@use_master DCNL @receiver(models.signals.post_save, sender=Contribution, dispatch_uid='create_addon_purchase') DCNL def create_addon_purchase(sender, instance, **kw):
@task DCNL def send_purchase_receipt(contrib_id, **kw):
@login_required DCNL @app_view DCNL @use_master DCNL @json_view DCNL def pay_status(request, addon, contrib_uuid):
@csrf_exempt DCNL @use_master DCNL @require_POST DCNL def postback(request):
@csrf_exempt DCNL @use_master DCNL @require_POST DCNL def chargeback(request):
def can_become_premium(f):
def can_be_purchased(f):
def has_purchased(f):
def clean_sort_param(request, date_sort='created'):
def clean_sort_param_es(request, date_sort='created'):
def create_sort_link(pretty_name, sort_field, get_params, sort, order):
@register.function DCNL @jinja2.contextfunction DCNL def reviewers_breadcrumbs(context, queue=None, items=None):
@register.function DCNL @jinja2.contextfunction DCNL def queue_tabnav(context):
@register.function DCNL @jinja2.contextfunction DCNL def logs_tabnav(context):
@register.function DCNL @jinja2.contextfunction DCNL def sort_link(context, pretty_name, sort_field):
def get_avg_app_waiting_time():
@register.filter DCNL def es2datetime(s):
def reviewer_required(region=None, moderator=False):
@reviewer_required(moderator=True) DCNL def route_reviewer(request):
def _progress():
@permission_required([('Apps', 'ModerateReview')]) DCNL def queue_moderated(request):
@permission_required([('Apps', 'ReadAbuse')]) DCNL def queue_abuse(request):
@permission_required([('Websites', 'ReadAbuse')]) DCNL def queue_abuse_websites(request):
def add_translation(key, translation):
def clean_translations(sender, **kwargs):
def make_key(obj):
def save_translations(key):
def truncate_text(text, limit, killwords=False, end='...'):
def trim(tree, limit, killwords, end):
def text_length(tree):
def truncate(html, length, killwords=False, end='...'):
def transfield_changed(field, initial, data):
def to_language(locale):
def get_locale_from_lang(lang):
@contextlib.contextmanager DCNL def no_translation(lang=None):
def find_language(locale):
def clean_nl(string):
def switch(obj, new_model):
def save_on_signal(obj, trans):
def save_signal(sender, instance, **kw):
def test_locale_html():
def test_locale_html_xss():
def test_empty_locale_html():
def test_truncate_purified_field_xss():
def attach_trans_dict(model, objs):
def order_by_translation(qs, fieldname):
@jingo.register.filter DCNL def locale_html(translatedfield):
@jingo.register.filter DCNL def truncate(s, length=255, killwords=True, end='...'):
@jingo.register.inclusion_tag('translations/trans-menu.html') DCNL @jinja2.contextfunction DCNL def l10n_menu(context, default_locale='en-us', remove_locale_url=''):
def default_locale(obj):
def clean_tags(request, tags, max_tags=None):
def attach_tags(objs):
def admin_required(reviewers=False):
@task(rate_limit='50/m') DCNL def update_denorm(*pairs, **kw):
@cronjobs.register DCNL def email_daily_ratings():
def user_can_delete_review(request, review):
def get_carrier():
def get_carrier_id():
def set_carrier(name):
def parse_region(region):
def remove_accents(input_str):
def get_region():
def set_region(region):
def get_popularity(obj, region=None):
def get_trending(obj, region=None):
def get_boost(obj):
def es_to_datetime(value):
@task(acks_late=True) DCNL @use_master DCNL def index(ids, indexer, **kw):
def _get_monolith_jobs(date=None):
@cronjobs.register DCNL def update_monolith_stats(date=None):
@task DCNL def _migrate_collection_colors(ids, model):
def rand_text(n=10):
@task DCNL @use_master DCNL def fetch_icon(pk, icon_url, sizes=mkt.CONTENT_ICON_SIZES, **kw):
@task DCNL @use_master DCNL def fetch_promo_imgs(pk, promo_img_url, **kw):
def rand_text():
def ALL_REGIONS_WITH_CONTENT_RATINGS():
def ALL_REGIONS_WITHOUT_CONTENT_RATINGS():
def REGION_TO_RATINGS_BODY():
def REGIONS_LIST_SORTED_BY_NAME():
def REGIONS_CHOICES_SORTED_BY_NAME():
def ACTION_MAP(activity_action):
def ALL_RATINGS():
def RATINGS_BY_NAME():
def slugify_iarc_name(obj):
def dehydrate_rating(rating_class):
def dehydrate_ratings_body(body_class):
def pth(path):
@task DCNL @use_master DCNL def fetch_icon(pk, version_pk=None, **kw):
def reset_extensions_translations_locales(apps, schema_editor):
@receiver([models.signals.post_delete, models.signals.post_save], sender=ExtensionVersion, dispatch_uid='extension_version_change') DCNL def update_extension_status_and_manifest_fields(sender, instance, **kw):
def download_signed(request, uuid, **kwargs):
def download_signed_reviewer(request, uuid, **kwargs):
def download_unsigned(request, uuid, **kwargs):
def del_by_key(data, delete):
def guess_language(text):
def string_to_translatedfield_value(text):
def submit_step(outer_step):
def read_dev_agreement_required(f):
def submit(request):
def proceed(request):
def walk_storage(path, topdown=True, onerror=None, followlinks=False, storage=private_storage):
def copy_stored_file(src_path, dst_path, src_storage=private_storage, dst_storage=private_storage):
def move_stored_file(src_path, dst_path, src_storage=private_storage, dst_storage=private_storage):
def log(action, *args, **kw):
@task DCNL @use_master DCNL def set_modified_on_object(app_label, model_name, pk, **kw):
def send_mail(subject, message, from_email=None, recipient_list=None, fail_silently=False, use_blocked=True, perm_setting=None, manage_url=None, headers=None, cc=None, html_message=None, attachments=None, async=False, max_retries=None):
def send_mail_jinja(subject, template, context, *args, **kwargs):
def send_html_mail_jinja(subject, html_template, text_template, context, *args, **kwargs):
def load_helpers():
def epoch(t):
def sorted_groupby(seq, key):
def paginate(request, queryset, per_page=20, count=None):
def chunked(seq, n):
def _urlencode(items):
def slug_validator(s, ok=SLUG_OK, lower=True, spaces=False, delimiter='-', message=validate_slug.message, code=validate_slug.code):
def resize_image(src, dst, size=None, remove_src=True, src_storage=private_storage, dst_storage=public_storage):
def cache_ns_key(namespace, increment=False):
def smart_path(string):
def log_cef(name, severity, env, *args, **kwargs):
def escape_all(v, linkify=True):
def strip_bom(data):
def smart_decode(s):
def rm_local_tmp_dir(path):
def timestamp_index(index):
def _get_created(created):
def app_factory(status=mkt.STATUS_PUBLIC, version_kw={}, file_kw={}, **kw):
def get_icon_url(base_url_format, obj, size, default_format='default-{size}.png'):
def get_promo_img_url(base_url_format, obj, size, default_format='default-{size}.png'):
def formset(*args, **kw):
def initial(form):
def check_links(expected, elements, selected=None, verify=True):
def assert_no_validation_errors(validation):
def _get_created(created):
def req_factory_factory(url='', user=None, post=False, data=None, **kwargs):
def user_factory(**kw):
def test_mkt_locale_not_in_django():
def test_ordering():
def test_finalize():
def test_json_view():
def test_json_view_normal_response():
def test_json_view_error():
@contextlib.contextmanager DCNL def use_master():
def manual_order(qs, pks, pk_name='id'):
def global_settings(request):
@register.function DCNL @jinja2.contextfunction DCNL def mkt_breadcrumbs(context, product=None, items=None, crumb_size=40, add_default=True, cls=None):
@register.function DCNL @jinja2.contextfunction DCNL def get_doc_path(context, path, extension):
@register.filter DCNL def absolutify(url, site=None):
@register.function DCNL def url(viewname, *args, **kwargs):
@register.function DCNL @jinja2.contextfunction DCNL def media(context, url, key='MEDIA_URL'):
@register.function DCNL @jinja2.contextfunction DCNL def static(context, url):
@register.filter DCNL def f(string, *args, **kwargs):
def strip_controls(s):
@register.filter DCNL def isotime(t):
def login_required(f=None, redirect=True):
def permission_required(pairs):
def json_response(response, has_trans=False, status_code=200):
def set_modified_on(f):
def allow_cross_site_request(f):
def set_task_user(f):
def package_minifest(request):
def yogafire_minifest(request):
def robots(request):
@csrf_exempt DCNL @require_POST DCNL def cspreport(request):
@contextlib.contextmanager DCNL def safe_query_string(request):
def _transaction_summary(tx_uuid):
@permission_required([('AccountLookup', 'View')]) DCNL def app_activity(request, addon_id):
@permission_required([('AccountLookup', 'View')]) DCNL def user_purchases(request, user_id):
@permission_required([('AccountLookup', 'View')]) DCNL def user_activity(request, user_id):
def get_payment_provider_portals(app=None, user=None):
@task DCNL @use_master DCNL def update_supported_locales_single(id, latest=False, **kw):
def inherit_nomination(sender, instance, **kw):
def cleanup_version(sender, instance, **kw):
@task DCNL def consume_email(email_text, **kwargs):
def create_comm_note(obj, version, author, body, note_type=comm.NO_ACTION, perms=None, attachments=None):
def post_create_comm_note(note):
def create_attachments(note, formset):
def _save_attachment(attachment, filepath):
def check_acls(user, obj, acl_type):
def check_acls_comm_obj(obj, profile):
def user_has_perm_app(user, obj):
def user_has_perm_thread(thread, profile):
def user_has_perm_note(note, profile, request=None):
def send_mail_comm(note):
def get_recipients(note):
def tokenize_recipients(recipients, thread):
def email_recipients(recipients, note, template=None, extra_context=None):
def get_mail_context(note, user_id):
@allow_cross_site_request DCNL def manifest(request, uuid):
def get_uuid(app, user):
def sign(data):
def create_receipt_data(webapp, user, uuid, flavour=None, contrib=None):
def create_inapp_receipt(contrib):
def reissue_receipt(receipt):
def get_key():
@cors_api_view(['POST'], headers=('content-type', 'accept', 'x-fxpay-version')) DCNL @permission_classes((AllowAny,)) DCNL def reissue(request):
def match_rules(rules, app, action):
def action_allowed(request, app, action):
def action_allowed_user(user, app, action):
def check_ownership(request, obj, require_owner=False, require_author=False, ignore_disabled=False, admin=True):
def check_addon_ownership(request, addon, viewer=False, dev=False, support=False, admin=True, ignore_disabled=False):
@anonymous_csrf DCNL def landing(request):
def support(request):
def partners(request):
def installation(request):
def publish_badges(request):
@allow_cross_site_request DCNL def manifest(request, uuid):
def _get_local_ip():
@task DCNL def pre_index(new_index, old_index, alias, index_name, settings):
@task DCNL def post_index(new_index, old_index, alias, index_name, settings):
@task(ignore_result=False) DCNL def run_indexing(index, index_name, ids):
def chunk_indexing(indexer, chunk_size):
def validate_modules():
def validate_settings():
def static_url(url):
def update_csp():
def log_configure():
def record_action(action, request, data=None):
@task(time_limit=time_limits['hard'], soft_time_limit=time_limits['soft']) DCNL def resize_video(src, pk, user_pk=None, **kw):
def _resize_error(src, instance, user):
def _resize_video(src, instance, lib=None, **kw):
def get_library():
def generate_key(byte_length):
def sign(receipt):
def decode(receipt):
def crack(receipt):
def mock_sign(version_id, reviewer=False):
def sign_app(src, dest, ids, reviewer=False, local=False):
def _sign_app(src, dest, ids, reviewer, tempname, local=False):
def _get_endpoint(reviewer=False):
def timecheck(files):
def watcher(command, files):
def log_configure():
def decode_receipt(receipt):
@pytest.mark.nondestructive DCNL def test_macros(base_url, selenium):
@pytest.mark.nondestructive DCNL def test_macros_search_en_by_click(base_url, selenium):
@pytest.mark.nondestructive DCNL def test_macros_search_all_by_click(base_url, selenium):
@pytest.mark.nondestructive DCNL def test_macros_search_en_by_form(base_url, selenium):
@pytest.mark.nondestructive DCNL def test_macros_search_all_by_form(base_url, selenium):
def url_test(url, location=None, status_code=requests.codes.moved_permanently, req_headers=None, req_kwargs=None, resp_headers=None, query=None, follow_redirects=False, final_status_code=requests.codes.ok):
def assert_valid_url(url, location=None, status_code=requests.codes.moved_permanently, req_headers=None, req_kwargs=None, resp_headers=None, query=None, base_url=None, follow_redirects=False, final_status_code=requests.codes.ok):
def flatten(urls_list):
def allow_add_attachment_by(user):
def convert_to_http_date(dt):
def attachment_upload_to(instance, filename):
def make_test_file(content=None, suffix='.txt'):
def raw_file(request, attachment_id, filename):
def mindtouch_file_redirect(request, file_id, filename):
@xframe_options_sameorigin DCNL @login_required DCNL @process_document_path DCNL def edit_attachment(request, document_slug, document_locale):
@task DCNL @skip_in_maintenance_mode DCNL def clean_sessions():
def safe_translation(f):
def render_email(template, context):
def emails_with_users_and_watches(subject, text_template, html_template, context_vars, users_and_watches, from_email=settings.TIDINGS_FROM_ADDRESS, default_locale=settings.WIKI_DEFAULT_LANGUAGE, **extra_kwargs):
def required_field_attrs(self, widget):
def required_char_field_attrs(self, widget, *args, **kwargs):
def paginate(request, queryset, per_page=20):
def smart_int(string, fallback=0):
def generate_filename_and_delete_previous(ffile, name, before_delete=None):
def memcache_lock(prefix, expires=(60 * 60)):
def get_object_or_none(klass, *args, **kwargs):
def parse_tags(tagstring, sorted=True):
def chunked(iterable, n):
def get_unique(content_type, object_pk, name=None, request=None, ip=None, user_agent=None, user=None):
def urlparams(url_, fragment=None, query_dict=None, **query):
def format_date_time(request, value, format='shortdatetime'):
def _get_request_locale(request):
def _babel_locale(locale):
@library.filter DCNL def paginator(pager):
@library.global_function DCNL def url(viewname, *args, **kwargs):
@library.filter DCNL def entity_decode(str):
@library.global_function DCNL def thisyear():
@library.global_function DCNL def add_utm(url_, campaign, source='developer.mozilla.org', medium='email'):
@library.global_function DCNL @jinja2.contextfunction DCNL def datetimeformat(context, value, format='shortdatetime', output='html'):
@library.filter DCNL def in_utc(dt):
def test_paginated_url():
def eq_(first, second, msg=None):
def ok_(pred, msg=None):
def attrs_eq(received, **expected):
def get_user(username='testuser'):
def global_settings(request):
def get_best_language(accept_lang):
def set_url_prefixer(prefixer):
def reset_url_prefixer():
def get_url_prefixer():
def reverse(viewname, urlconf=None, args=None, kwargs=None, prefix=None, current_app=None, force_locale=False, locale=None, unprefixed=False):
def find_supported(ranked):
def split_path(path):
def parse_tag_namespaces(tag_list):
def allows_tag_namespace_for(model_obj, ns, user):
def resolve_allowed_tags(model_obj, tags_curr, tags_new, request_user=AnonymousUser):
def user_access_decorator(redirect_func, redirect_url_func, deny_func=None, redirect_field=REDIRECT_FIELD_NAME):
def logout_required(redirect):
def login_required(func, login_url=None, redirect=REDIRECT_FIELD_NAME, only_active=True):
def permission_required(perm, login_url=None, redirect=REDIRECT_FIELD_NAME, only_active=True):
def skip_in_maintenance_mode(func):
def redirect_in_maintenance_mode(func=None, methods=None):
def _error_page(request, status):
def _format_decimal(num, format=None):
@contextlib.contextmanager DCNL def safe_query_string(request):
def valid_javascript_identifier(identifier, escape='\\u', ucd_cat=category):
def valid_jsonp_callback_value(value):
@library.global_function DCNL @contextfunction DCNL def ban_links(context, ban_user, banner_user):
@library.global_function DCNL def admin_link(user):
@library.filter DCNL def public_email(email):
def unicode_to_html(text):
@library.global_function DCNL def user_list(users):
@library.global_function DCNL @contextfunction DCNL def provider_login_url(context, provider_id, **params):
@library.global_function DCNL @contextfunction DCNL def providers_media_js(context):
@library.global_function DCNL def social_accounts(user):
@permission_required('users.add_userban') DCNL def ban_user(request, username):
@permission_required('users.add_userban') DCNL def ban_user_and_cleanup(request, username):
@require_POST DCNL @permission_required('users.add_userban') DCNL def ban_user_and_cleanup_summary(request, username):
@permission_required('users.add_userban') DCNL def revert_document(request, revision_id):
@permission_required('wiki.delete_document') DCNL def delete_document(request, document):
def user_detail(request, username):
@redirect_in_maintenance_mode DCNL def user_edit(request, username):
@require_POST DCNL @redirect_in_maintenance_mode DCNL def send_recovery_email(request):
@redirect_in_maintenance_mode DCNL def recover(request, uidb64=None, token=None):
@task(rate_limit='60/m') DCNL @skip_in_maintenance_mode DCNL def render_document(pk, cache_control, base_url, force=False):
@task DCNL @skip_in_maintenance_mode DCNL def email_render_document_progress(percent_complete, total):
@task DCNL @skip_in_maintenance_mode DCNL def render_document_chunk(pks, cache_control='no-cache', base_url=None, force=False):
@task(throws=(StaleDocumentsRenderingInProgress,)) DCNL @skip_in_maintenance_mode DCNL def acquire_render_lock():
@task DCNL @skip_in_maintenance_mode DCNL def release_render_lock():
@task DCNL @skip_in_maintenance_mode DCNL def render_stale_documents(log=None):
@task DCNL @skip_in_maintenance_mode DCNL def build_json_data_for_document(pk, stale):
@transaction_task DCNL @skip_in_maintenance_mode DCNL def send_first_edit_email(revision_pk):
@task DCNL def build_locale_sitemap(locale):
@task DCNL def build_index_sitemap(results):
@task DCNL def build_sitemaps():
@task DCNL @skip_in_maintenance_mode DCNL def index_documents(ids, index_pk, reraise=False):
@task DCNL @skip_in_maintenance_mode DCNL def unindex_documents(ids, index_pk):
@task(rate_limit='120/m') DCNL @skip_in_maintenance_mode DCNL def tidy_revision_content(pk, refresh=True):
@task DCNL @skip_in_maintenance_mode DCNL def delete_old_documentspamattempt_data(days=30):
def notification_context(revision):
def extra_headers(user, document=None):
def first_edit_email(revision):
def spam_attempt_email(spam_attempt):
@newrelic.agent.function_trace() DCNL def get_content_sections(src=''):
@newrelic.agent.function_trace() DCNL def filter_out_noinclude(src):
def locale_and_slug_from_path(path, request=None, path_locale=None):
def get_doc_components_from_url(url, required_locale=None, check_host=True):
def analytics_upageviews(revision_ids, start_date, end_date=None):
def analytics_upageviews_by_revisions(revisions):
@library.global_function DCNL def format_comment(rev, previous_revision=None, load_previous=True):
@library.global_function DCNL def revisions_unified_diff(from_revision, to_revision):
@library.global_function DCNL def diff_table(content_from, content_to, prev_id, curr_id, tidy=False):
@library.filter DCNL def selector_content_find(document, selector):
def _recursive_escape(value, esc=conditional_escape):
@library.filter DCNL def tojson(value):
@library.filter DCNL def absolutify(url, site=None):
@library.global_function DCNL def wiki_url(path):
def should_use_rendered(doc, params, html=None):
def get(document, cache_control, base_url, timeout=None):
def add_env_headers(headers, env_vars):
def process_errors(response):
def build_cache_keys(document_locale, document_slug):
def macro_sources(force_lowercase_keys=False):
def macro_page_count(locale='*'):
def macro_usage():
@pytest.fixture DCNL def wiki_user(db, django_user_model):
@pytest.fixture DCNL def wiki_user_2(db, django_user_model):
@pytest.fixture DCNL def wiki_user_3(db, django_user_model):
@pytest.fixture DCNL def inactive_wiki_user(db, django_user_model):
@pytest.fixture DCNL def banned_wiki_user(db, django_user_model, wiki_user):
@pytest.fixture DCNL def root_doc(wiki_user):
@pytest.fixture DCNL def create_revision(root_doc):
@pytest.fixture DCNL def edit_revision(root_doc, wiki_user):
@pytest.fixture DCNL def trans_doc(create_revision, wiki_user):
@pytest.fixture DCNL def trans_edit_revision(trans_doc, edit_revision, wiki_user):
@pytest.fixture DCNL def root_doc_with_mixed_contributors(root_doc, wiki_user, wiki_user_2, inactive_wiki_user, banned_wiki_user):
@pytest.yield_fixture DCNL def mock_es_client(request):
@requests_mock.mock() DCNL def test_macro_sources(mock_requests):
@requests_mock.mock() DCNL def test_macro_sources_empty_macro_list(mock_requests):
@requests_mock.mock() DCNL def test_macro_sources_error(mock_requests):
def test_macro_page_count(mock_es_client):
def test_macro_page_count_en(mock_es_client):
@mock.patch('kuma.wiki.kumascript.macro_page_count') DCNL @mock.patch('kuma.wiki.kumascript.macro_sources') DCNL def test_macro_usage_empty_kumascript(mock_sources, mock_page_count):
@mock.patch('kuma.wiki.kumascript.macro_page_count') DCNL @mock.patch('kuma.wiki.kumascript.macro_sources') DCNL def test_macro_usage_elasticsearch_exception(mock_sources, mock_page_count):
@mock.patch('kuma.wiki.kumascript.macro_page_count') DCNL @mock.patch('kuma.wiki.kumascript.macro_sources') DCNL def test_macro_usage_2nd_es_exception(mock_sources, mock_page_count):
def test_compare_revisions(edit_revision, client):
def test_compare_first_translation(trans_revision, client):
def _test_form_maintains_based_on_rev(client, doc, view, post_data, trans_lang=None, locale=None):
@pytest.mark.parametrize('doc_name', ['root', 'bottom', 'de', 'fr', 'it']) DCNL def test_zone_styles(client, doc_hierarchy_with_zones, root_doc, doc_name):
@pytest.mark.parametrize('elem_num,has_prev,is_english,has_revert', [(0, True, False, False), (1, True, False, True), (2, False, True, False)], ids=['current', 'first_trans', 'en_source']) DCNL def test_list_revisions(elem_num, has_prev, is_english, has_revert, admin_client, trans_edit_revision):
def test_revisions(root_doc, client):
def test_revisions_of_translated_document(trans_doc, client):
def test_revisions_of_translated_doc_with_no_based_on(trans_revision, client):
def test_revisions_bad_slug_is_not_found(db, client):
def test_revisions_doc_without_revisions_is_not_found(db, client):
def test_revisions_all_params_as_anon_user_is_forbidden(root_doc, client):
def test_revisions_all_params_as_user_is_allowed(root_doc, wiki_user, client):
def test_revisions_request_tiny_pages(edit_revision, client):
def test_revisions_request_large_pages(root_doc, client):
def test_revisions_request_invalid_pages(root_doc, client):
def document(save=False, **kwargs):
def revision(save=False, **kwargs):
def translated_revision(locale='de', **kwargs):
def normalize_html(input):
def create_document_editor_group():
def create_document_editor_user():
@pytest.mark.parametrize('path, DCSP expected', (('MDN/Getting_started', '/docs/MDN/Getting_started'), ('MDN/Getting_started#Option_1_I_like_words', '/docs/MDN/Getting_started#Option_1_I_like_words')), ids=('simple', 'fragment')) DCNL def test_wiki_url(path, expected):
def _objects_eq(manager, list_):
def test_nearest_zone(doc_hierarchy_with_zones, cleared_cacheback_cache):
def test_nearest_zone_when_no_parent(doc_hierarchy_with_zones, cleared_cacheback_cache):
@pytest.mark.parametrize('doc_name,expected_result', [('top', True), ('bottom', False), ('de', True), ('fr', True), ('root', False)]) DCNL def test_is_zone_root(doc_hierarchy_with_zones, root_doc, cleared_cacheback_cache, doc_name, expected_result):
def test_zone_styles(client, doc_hierarchy_with_zones):
def test_nearest_zone_expiry():
@pytest.mark.parametrize('doc_name,expected_zone_name', [('top', 'top'), ('middle_top', 'middle_top'), ('middle_bottom', 'middle_top'), ('bottom', 'middle_top'), ('root', None)]) DCNL def test_nearest_zone(doc_hierarchy_with_zones, root_doc, cleared_cacheback_cache, doc_name, expected_zone_name):
def test_nearest_zone_when_deleted_parent_topic(doc_hierarchy_with_zones, cleared_cacheback_cache):
@pytest.mark.parametrize('mode', ['maintenance-mode', 'normal-mode']) DCNL def test_contributors(db, cleared_cacheback_cache, settings, wiki_user_3, root_doc_with_mixed_contributors, mode):
def test_apply_content_experiment_no_experiment(ce_settings, rf):
def test_apply_content_experiment_has_experiment(ce_settings, rf):
def test_apply_content_experiment_selected_original(ce_settings, rf):
def test_apply_content_experiment_selected_variant(ce_settings, rf):
def test_apply_content_experiment_bad_selection(ce_settings, rf):
def test_apply_content_experiment_valid_selection_no_doc(ce_settings, rf):
@pytest.mark.parametrize('endpoint', ['document', 'preview']) DCNL def test_kumascript_error_reporting(admin_client, root_doc, ks_toolbox, endpoint):
@pytest.mark.parametrize('raw', [True, False]) DCNL def test_compare_revisions(edit_revision, client, raw):
@pytest.mark.parametrize('raw', [True, False]) DCNL def test_compare_translation(trans_revision, client, raw):
@pytest.mark.parametrize('raw', [True, False]) DCNL def test_compare_revisions_without_tidied_content(edit_revision, client, raw):
@pytest.mark.parametrize('id1,id2', [('1e309', '1e309'), ('', 'invalid'), ('invalid', '')]) DCNL def test_compare_revisions_invalid_ids(root_doc, client, id1, id2):
@pytest.mark.parametrize('param', ['from', 'to']) DCNL def test_compare_revisions_only_one_param(create_revision, client, param):
def test_compare_revisions_wrong_document(edit_revision, client):
@pytest.fixture DCNL def mock_doc():
def test_should_update_standard_doc(mock_doc):
@pytest.mark.parametrize('slug', ('Talk:WebWeb/Talk:CSS', 'User:jezdez', 'User_talk:jezdez', 'Template_talk:anch', 'Project_talk:MDN', 'Experiment:Blue')) DCNL def test_should_not_update_excluded_slug(mock_doc, slug):
@pytest.mark.parametrize('flag', ('is_redirect', 'deleted')) DCNL def test_should_not_update_excluded_flags(mock_doc, flag):
def test_notification_context_for_create(create_revision):
def test_notification_context_for_edit(create_revision, edit_revision):
def test_notification_context_for_translation(trans_revision, create_revision):
@mock.patch(u'tidings.events.EventUnion.fire') DCNL def test_edit_document_event_fires_union(mock_fire, create_revision, wiki_user):
@mock.patch(u'kuma.wiki.events.emails_with_users_and_watches') DCNL def test_edit_document_event_emails_on_create(mock_emails, create_revision):
@mock.patch(u'kuma.wiki.events.emails_with_users_and_watches') DCNL def test_edit_document_event_emails_on_change(mock_emails, edit_revision):
def test_first_edit_email_on_create(create_revision):
def test_first_edit_email_on_change(edit_revision):
def test_first_edit_email_on_translate(trans_revision):
def test_spam_attempt_email_on_create(wiki_user):
def test_spam_attempt_email_on_change(wiki_user, root_doc):
def test_spam_attempt_email_on_translate(wiki_user, trans_doc):
def test_spam_attempt_email_partial_model(wiki_user):
def test_filteriframe():
def test_filteriframe_empty_contents():
def populate_uuids(apps, schema_editor):
def clear_uuids(apps, schema_editor):
def set_review_unavailable(apps, schema_editor):
def clear_review(apps, schema_editor):
@block_user_agents DCNL @login_required DCNL @process_document_path DCNL def select_locale(request, document_slug, document_locale):
@block_user_agents DCNL @login_required DCNL @process_document_path DCNL @check_readonly DCNL @prevent_indexing DCNL @never_cache DCNL def translate(request, document_slug, document_locale, revision_id=None):
def split_slug(slug):
@newrelic.agent.function_trace() DCNL def document_last_modified(request, document_slug, document_locale):
def document_form_initial(document):
@newrelic.agent.function_trace() DCNL @block_user_agents DCNL @prevent_indexing DCNL @process_document_path DCNL def revision(request, document_slug, document_locale, revision_id):
@login_required DCNL @require_POST DCNL def preview(request):
@block_user_agents DCNL @require_GET DCNL @xframe_options_sameorigin DCNL @process_document_path DCNL @prevent_indexing DCNL @ratelimit(key='user_or_ip', rate='15/m', block=True) DCNL def compare(request, document_slug, document_locale):
@login_required DCNL @require_POST DCNL @process_document_path DCNL def quick_review(request, document_slug, document_locale):
@block_user_agents DCNL @login_required DCNL @check_readonly DCNL def revert_document(request, document_path, revision_id):
@block_user_agents DCNL @login_required DCNL @permission_required('wiki.delete_document') DCNL @check_readonly DCNL @process_document_path DCNL def delete_document(request, document_slug, document_locale):
@block_user_agents DCNL @login_required DCNL @permission_required('wiki.restore_document') DCNL @check_readonly DCNL @process_document_path DCNL def restore_document(request, document_slug, document_locale):
@block_user_agents DCNL @login_required DCNL @permission_required('wiki.purge_document') DCNL @check_readonly DCNL @process_document_path DCNL def purge_document(request, document_slug, document_locale):
@require_GET DCNL @allow_CORS_GET DCNL @xframe_options_exempt DCNL @process_document_path DCNL def code_sample(request, document_slug, document_locale, sample_name):
@require_GET DCNL @allow_CORS_GET DCNL @xframe_options_exempt DCNL @process_document_path DCNL def raw_code_sample_file(request, document_slug, document_locale, sample_name, attachment_id, filename):
def mindtouch_namespace_redirect(request, namespace, slug):
def mindtouch_to_kuma_redirect(request, path):
def ckeditor_config(request):
@newrelic.agent.function_trace() DCNL @block_user_agents DCNL @require_GET DCNL @allow_CORS_GET DCNL def autosuggest_documents(request):
@block_user_agents DCNL @require_GET DCNL def documents(request, tag=None):
@block_user_agents DCNL @require_GET DCNL def tags(request):
@block_user_agents DCNL @require_GET DCNL def needs_review(request, tag=None):
@block_user_agents DCNL @require_GET DCNL def with_localization_tag(request, tag=None):
@block_user_agents DCNL @require_GET DCNL def with_errors(request):
@block_user_agents DCNL @require_GET DCNL def without_parent(request):
@block_user_agents DCNL @require_GET DCNL def top_level(request):
@block_user_agents DCNL @require_GET DCNL @process_document_path DCNL @prevent_indexing DCNL def revisions(request, document_slug, document_locale):
@newrelic.agent.function_trace() DCNL @block_user_agents DCNL @login_required DCNL @check_readonly DCNL @prevent_indexing DCNL @never_cache DCNL def create(request):
@xframe_options_sameorigin DCNL def _edit_document_collision(request, orig_rev, curr_rev, is_async_submit, is_raw, rev_form, doc_form, section_id, rev, doc):
@newrelic.agent.function_trace() DCNL @block_user_agents DCNL @require_http_methods(['GET', 'POST']) DCNL @login_required DCNL @ratelimit(key='user', rate=limit_banned_ip_to_0, block=True) DCNL @process_document_path DCNL @check_readonly DCNL @prevent_indexing DCNL @never_cache DCNL def edit(request, document_slug, document_locale, revision_id=None):
def _get_html_and_errors(request, doc, rendering_params):
def _get_seo_parent_title(slug_dict, document_locale):
def _filter_doc_html(request, doc, doc_html, rendering_params):
def _set_common_headers(doc, section_id, response):
def _default_locale_fallback(request, document_slug, document_locale):
def _get_doc_and_fallback_reason(document_locale, document_slug):
def _apply_content_experiment(request, doc):
@block_user_agents DCNL @require_GET DCNL @allow_CORS_GET DCNL @process_document_path DCNL def children(request, document_slug, document_locale):
@block_user_agents DCNL @require_http_methods(['GET', 'POST']) DCNL @permission_required('wiki.move_tree') DCNL @process_document_path DCNL @check_readonly DCNL @prevent_indexing DCNL def move(request, document_slug, document_locale):
@require_GET DCNL @allow_CORS_GET DCNL @process_document_path DCNL @prevent_indexing DCNL def toc(request, document_slug=None, document_locale=None):
@block_user_agents DCNL @require_GET DCNL @allow_CORS_GET DCNL @process_document_path DCNL @prevent_indexing DCNL def as_json(request, document_slug=None, document_locale=None):
@block_user_agents DCNL @require_GET DCNL @allow_CORS_GET DCNL @process_document_path DCNL @prevent_indexing DCNL def styles(request, document_slug=None, document_locale=None):
@block_user_agents DCNL @require_POST DCNL @login_required DCNL @process_document_path DCNL def subscribe(request, document_slug, document_locale):
@block_user_agents DCNL @require_POST DCNL @login_required DCNL @process_document_path DCNL def subscribe_to_tree(request, document_slug, document_locale):
def _document_redirect_to_create(document_slug, document_locale, slug_dict):
@newrelic.agent.function_trace() DCNL @allow_CORS_GET DCNL @prevent_indexing DCNL def _document_deleted(request, deletion_logs):
@newrelic.agent.function_trace() DCNL @allow_CORS_GET DCNL def _document_raw(request, doc, doc_html, rendering_params):
@csrf_exempt DCNL @require_http_methods(['GET', 'PUT', 'HEAD']) DCNL @redirect_in_maintenance_mode(methods=['PUT']) DCNL @allow_CORS_GET DCNL @accepts_auth_key DCNL @process_document_path DCNL @condition(last_modified_func=document_last_modified) DCNL @newrelic.agent.function_trace() DCNL def document(request, document_slug, document_locale):
def _document_PUT(request, document_slug, document_locale):
@csrf_exempt DCNL @require_POST DCNL @permission_required('wiki.add_revisionakismetsubmission') DCNL def submit_akismet_spam(request):
def cache_with_field(field_name):
def _inherited(parent_attr, direct_attr):
def tags_for(cls, model, instance=None, **extra_filters):
@login_required DCNL @staff_member_required DCNL @permission_required('wiki.purge_document') DCNL @check_readonly DCNL def purge_view(request):
def related_revisions_link(obj):
def current_revision_link(obj):
def parent_document_link(obj):
def topic_parent_document_link(obj):
def topic_children_documents_link(obj):
def topic_sibling_documents_link(obj):
def document_link(obj):
def combine_funcs(obj, funcs):
def document_nav_links(obj):
def revision_links(obj):
def rendering_info(obj):
def akismet_data_as_dl(akismet_data):
def prevent_indexing(func):
def allow_CORS_GET(func):
def check_readonly(view):
@newrelic.agent.function_trace() DCNL def process_document_path(func, reverse_name='wiki.document'):
def invalidate_nearest_zone_cache(document_pk, async=False):
def invalidate_zone_urls_cache(locale, async=False):
@library.global_function DCNL @library.render_with('landing/newsfeed.html') DCNL def newsfeed(entries, section_headers=False):
def home(request):
def promote_buttons(request):
def robots_txt(request):
def redirect(pattern, to, **kwargs):
def locale_redirect(pattern, to, prepend_locale=True, **kwargs):
def date_range(start, end):
def spam_dashboard_historical_stats(periods=None, end_date=None):
def spam_dashboard_recent_events(start=None, end=None):
@mock.patch('kuma.dashboards.views.macro_usage') DCNL def test_macros(mock_usage, client, db):
@mock.patch('kuma.dashboards.views.macro_usage') DCNL def test_macros_no_counts(mock_usage, client, db):
@require_GET DCNL def revisions(request):
@require_GET DCNL def user_lookup(request):
@require_GET DCNL def topic_lookup(request):
@require_GET DCNL @login_required DCNL @permission_required(('wiki.add_revisionakismetsubmission', 'wiki.add_documentspamattempt', 'users.add_userban'), raise_exception=True) DCNL def spam(request):
@require_GET DCNL def macros(request):
def _get_locales():
def pipeline_scss(output, sources, **kwargs):
def pipeline_one_scss(slug, **kwargs):
@task DCNL @skip_in_maintenance_mode DCNL def prepare_index(index_pk):
@task DCNL @skip_in_maintenance_mode DCNL def finalize_index(index_pk):
def get_search_url_from_referer(request):
def get_filters(getter_func):
def requires_good_connection(fun):
def register_live_index(model_cls):
@cache_page((60 * 15)) DCNL def suggestions(request):
@cache_page(((60 * 60) * 168)) DCNL def plugin(request):
@require_safe DCNL def liveness(request):
@require_safe DCNL def readiness(request):
@pytest.mark.current DCNL @pytest.mark.django_db DCNL def test_secret_generation(user_auth_key):
def generate_key():
def accepts_auth_key(func):
@pytest.fixture DCNL def simple_user(db, django_user_model):
@pytest.fixture DCNL def simple_doc(db):
@pytest.fixture DCNL def root_doc(simple_doc, simple_user):
@pytest.fixture DCNL def translated_doc(root_doc):
def test_gather_document_in_storage():
def test_gather_forced():
def test_gather_child_doc():
def test_gather_child_doc_parent_in_storage():
def test_gather_standard_doc():
def test_gather_standard_doc_metdata_loses():
def test_gather_standard_doc_bad_metadata():
def test_gather_zoned_doc_init():
def test_gather_zoned_doc_error():
def test_gather_zoned_doc_is_normalized():
def test_gather_normalized_path_moved_page_needed():
def test_gather_normalized_path_moved_page_followed():
def test_gather_redirect_to_zone_page_first_pass():
def test_gather_redirect_to_errored_zone_page_is_error():
def test_gather_redirect_to_zone_page_complete():
def test_gather_redirect_to_zone_subpage():
def test_gather_redirect_to_zone_subpage_complete():
def test_gather_localized_doc_without_metadata():
def test_gather_localized_doc_with_metadata():
def test_gather_localized_doc_invalid_english():
def test_gather_localized_doc_sets_parent():
def test_gather_document_children():
def test_gather_document_children_loaded():
@pytest.fixture DCNL def tagged_doc(db, django_user_model):
def test_invalid_path():
def test_gather_no_prereqs(tagged_doc, client):
def test_gather_existing_rev_and_doc():
def test_gather_existing_doc(tagged_doc, client):
def test_gather_doc_mismatch_is_error():
def test_gather_with_prereqs(tagged_doc, client):
def test_gather_second_pass(tagged_doc, client):
def test_gather_document_slug_wins(tagged_doc, client):
def test_gather_older_revision(root_doc, client):
def test_gather_missing_revision_is_error(tagged_doc):
def test_gather_based_on_is_needed(translated_doc, client):
def test_gather_based_on_is_available(translated_doc, client):
def test_session():
def test_request():
def test_request_no_raise():
@mock.patch('kuma.scrape.scraper.time.sleep') DCNL def test_timeout_success(mock_sleep):
def test_connectionerror_success():
@mock.patch('kuma.scrape.scraper.time.sleep') DCNL def test_timeout_failure(mock_sleep):
@pytest.fixture() DCNL def scraper():
def test_add_new_source(scraper):
def test_add_existing_source(scraper):
def test_scrape(scraper):
def test_scrape_error(scraper):
def test_scrape_none(scraper):
def test_warn_percent_in_param(scraper, mock_logger):
def test_warn_dependency_block(scraper, mock_logger):
@pytest.mark.parametrize(u'data_name,param_list', ((u'document_children', (u'locale', u'slug')), (u'document_metadata', (u'locale', u'slug')), (u'document_history', (u'locale', u'slug')), (u'document_rendered', (u'locale', u'slug')), (u'revision_html', (u'path',)), (u'zone_root', (u'path',))), ids=[u'document_children', u'document_metadata', u'document_history', u'document_rendered', u'revision_html', u'zone_root']) DCNL def test_local_storage(data_name, param_list):
def test_safe_add_tags_new(simple_user):
def test_safe_add_tags_existing(simple_user):
def test_safe_add_tags_case_mismatch(simple_user):
@pytest.mark.django_db DCNL def test_save_document_tags():
@pytest.mark.django_db DCNL def test_save_document_dupe_tags():
def test_save_document_update_existing(simple_doc):
def test_save_document_update_existing_to_redirect(simple_doc):
def test_save_document_new_doc_colliding_id(simple_doc):
@pytest.mark.django_db DCNL def test_save_document_integrity_error():
def test_save_document_create_zone_with_redirect(simple_doc):
def test_save_document_create_simple_zone(simple_doc):
def test_save_document_zone_child(simple_doc):
def test_save_revision_current(simple_doc, simple_user):
def test_save_revision_not_current(root_doc, simple_user):
def test_save_revision_duplicate_tags(simple_doc, simple_user):
def test_save_revision_existing_tags(simple_doc, simple_user):
def test_save_revision_no_content_review_tags(simple_doc, simple_user):
def test_save_user_banned(django_user_model):
@pytest.fixture DCNL def complex_user(db, django_user_model):
def mock_requester(requester_spec=None, response_spec=None, content=None, json=None, status_code=200, history=None, final_path=None):
def mock_storage(spec=None):
def test_init_param():
@pytest.mark.parametrize(u'option,value', ((u'pressed', True), (u'length', 1), (u'unbounded', u'all'), (u'flavor', u'curry')), ids=(u'bool', u'int', u'int_all', u'text')) DCNL def test_init_options(option, value):
def test_init_invalid_option():
def test_merge_none():
@pytest.mark.parametrize(u'option,lesser_value,greater_value', ((u'pressed', False, True), (u'length', 1, 2), (u'unbounded', 2, 3)), ids=(u'bool', u'int', u'int_all')) DCNL def test_merge_less(option, lesser_value, greater_value):
@pytest.mark.parametrize(u'option,value', ((u'pressed', True), (u'length', 2), (u'unbounded', 1), (u'flavor', u'country')), ids=(u'bool', u'int', u'int_all', u'text')) DCNL def test_merge_same(option, value):
@pytest.mark.parametrize(u'option,lesser_value,greater_value', ((u'pressed', False, True), (u'length', 1, 2), (u'unbounded', 2, 3)), ids=(u'bool', u'int', u'int_all')) DCNL def test_merge_upgrade(option, lesser_value, greater_value):
def test_merge_more_multiple():
def test_merge_int_all():
def test_merge_text():
def test_current_options_default():
@pytest.mark.parametrize(u'option,value', ((u'pressed', True), (u'length', 1), (u'unbounded', u'all'), (u'flavor', u'curry')), ids=(u'bool', u'int', u'int_all', u'text')) DCNL def test_current_options_nondefault(option, value):
@pytest.mark.parametrize(u'option_type,option,bad_value', ((u'bool', u'pressed', 1), (u'int', u'length', u'0'), (u'int_all', u'unbounded', u'1'), (u'text', u'flavor', 1)), ids=(u'bool', u'int', u'int_all', u'text')) DCNL def test_invalid_values(option_type, option, bad_value):
@pytest.mark.parametrize(u'href,decoded', [('binary', u'binary'), ('%E7%A7%BB%E8%A1%8C%E4%BA%88%E5%AE%9A', u'\u79fb\u884c\u4e88\u5b9a')]) DCNL def test_decode_href(href, decoded):
def test_source_error_str():
def test_gather_done_is_done():
def test_gather_load_storage_existing():
def test_gather_load_storage_error():
def test_gather_load_prereqs_more_needed():
def test_gather_load_prereqs_error():
def test_gather_save_data_error():
def test_gather_success_with_more_sources():
def test_escaped_url():
def test_invalid_url():
def test_gather():
def test_gather_when_stored():
def test_gather_notzone_is_error():
def test_extract_locale_mismatch_is_error():
def test_gather_no_resources():
def test_gather_uses_stored():
def test_gather_error():
def test_extract_translations():
def test_extract_translation_with_depth():
def test_extract_translation_with_revisions():
@pytest.fixture DCNL def zone_root_doc(root_doc, settings):
@pytest.fixture DCNL def zone_child_doc(zone_root_doc):
def test_root_doc(root_doc, client):
def test_non_zone_redirect(root_doc, client):
def test_zone_root_doc(zone_root_doc, client):
def test_zone_child_doc(zone_root_doc, zone_child_doc, client):
def test_missing_doc(client):
def test_empty_fixtures():
@pytest.mark.django_db DCNL def test_load_constance():
@pytest.mark.django_db DCNL def test_load_group():
def test_underspecified_key_is_error():
@pytest.mark.django_db DCNL def test_relation_as_key():
@pytest.mark.django_db DCNL def test_update_m2m_of_existing_instance():
def test_missing_relation_is_error():
@pytest.mark.django_db DCNL def test_missing_key_relation_is_error():
@pytest.mark.django_db DCNL def test_user_password():
def test_gather_has_current(root_doc):
def test_gather_needs_to_scrape_history(root_doc):
def test_gather_needs_to_scrape_revision(root_doc):
def test_gather_needs_to_scrape_more_revisions(root_doc):
def test_gather_needs_to_scrape_more_history(root_doc):
def test_gather_no_more_history_to_scrape(root_doc):
def test_top_level_doc():
def test_child_doc():
def test_zone_doc():
def test_url_escaped_raises():
def test_extract_no_subpages():
def test_gather_with_subpages():
def test_depth_all():
def test_depth_decreases():
def test_final_depth():
def test_gather_revisions_default(root_doc, client):
def test_gather_revisions_multiple(root_doc, client):
def test_gather_revisions_more_than_available(root_doc, client):
def test_gather_error():
def test_gather_rev_existing():
def test_gather_translated(translated_doc, client):
@task DCNL def update_mdn(ctx, tag):
def sysprint(command):
def board_ids():
def _lock_file(id):
def owner_of_lock(id):
def _obtain_lock(id):
def _launch_reaper(id, pid):
def obtain_lock_id(pid=None):
def obtain_lock_id_to_hog():
def free_lock(id):
def deprecated(func):
def generate_exception(err_code):
def empty(shape):
def sum(mat, axis, target=None):
def dot(m1, m2, mult=1.0, target=None):
def vdot(m1, m2):
def softmax(mat, target=None):
def cos(mat, target=None):
def sin(mat, target=None):
def sigmoid(mat, target=None):
def tanh(mat, target=None):
def abs(mat, target=None):
def log_1_plus_exp(mat, target=None, exact=False):
def log(mat, tiny=0.0, target=None):
def exp(mat, target=None):
def ceil(mat, target=None):
def floor(mat, target=None):
def sqrt(mat, target=None):
def cross_entropy_bernoulli(mat, p, target=None, tiny=1e-10):
def cross_entropy(mat, p, target=None, tiny=1e-10):
def correct_preds(mat, p, target=None, cutoff=0.5):
def pow(mat, p, target=None):
def reformat(array):
def cuda_set_device(dev_id):
def cublas_init():
def cublas_shutdown():
def board_ids():
def _lock_file(id):
def owner_of_lock(id):
def _obtain_lock(id):
def _launch_reaper(id, pid):
def obtain_lock_id(pid=None):
def obtain_lock_id_to_hog():
def free_lock(id):
def convUp(images, filters, targets, numModulesX, paddingStart, moduleStride, numImgColors, numGroups=1):
def convDown(hidSums, filters, targets, numModulesX, paddingStart, moduleStride, filterSizeX, imSizeX, numImgColors):
def convOutp(images, hidSums, targets, numModulesX, paddingStart, filterSizeX, moduleStride, numImgColors):
def localUp(images, filters, targets, numModulesX, paddingStart, moduleStride, numImgColors, numGroups=1):
def localDown(hidSums, filters, targets, numModulesX, paddingStart, moduleStride, filterSizeX, imSizeX, numImgColors):
def localOutp(images, hidSums, targets, numModulesX, paddingStart, filterSizeX, moduleStride, numImgColors):
def MaxPool(images, targets, numChannels, subsX, startX, strideX, outputsX):
def ProbMaxPool(images, rnd, targets, numChannels, subsX, startX, strideX, outputsX):
def MaxPoolUndo(images, targets, grad, maxes, subsX, startX, strideX, outputsX):
def AccumulateConvDeriv(layer, edge, deriv):
def ConvOuter(edge, grad):
def GetBytes(mem_str):
def GetDataHandles(op, names, hyp_list, verbose=False):
def ParameterAsNumpy(param):
def NumpyAsParameter(numpy_array):
def WriteCheckpointFile(net, t_op, best=False):
def CreateMissingTextData(data_pb, data_pbtxt_file_z, data_pbtxt_file_nnz):
def display_convw2(w, s, r, c, fig, title='conv_filters'):
def display_convw(w, s, r, c, fig, vmax=None, vmin=None, dataset='mnist', title='conv_filters'):
def deprecated(func):
def generate_exception(err_code):
def empty(shape):
def sum(mat, axis, target=None):
def dot(m1, m2, mult=1.0, target=None):
def vdot(m1, m2):
def cos(mat, target=None):
def sin(mat, target=None):
def softmax(mat, target=None):
def sigmoid(mat, target=None):
def tanh(mat, target=None):
def abs(mat, target=None):
def log_1_plus_exp(mat, target=None, exact=False):
def log(mat, tiny=0.0, target=None):
def exp(mat, target=None):
def ceil(mat, target=None):
def floor(mat, target=None):
def sqrt(mat, target=None):
def cross_entropy_bernoulli(mat, p, target=None, tiny=1e-10):
def cross_entropy(mat, p, target=None, tiny=1e-10):
def correct_preds(mat, p, target=None, cutoff=0.5):
def pow(mat, p, target=None):
def reformat(array):
def cuda_set_device(dev_id):
def cublas_init():
def cublas_shutdown():
def get_non_generated_file_lines():
def basic_auth(username, password):
def retrieve(fid, share_key=None):
def update(fid, body):
def trash(fid):
def restore(fid):
def permanent_delete(fid):
def lookup(path, parent=None, user=None, exists=None):
def create(body):
def retrieve(fid):
def update(fid, content):
def create(body):
def retrieve(fid, share_key=None):
def update(fid, body):
def trash(fid):
def restore(fid):
def permanent_delete(fid):
def lookup(path, parent=None, user=None, exists=None):
def make_params(**kwargs):
def build_url(resource, id='', route=''):
def validate_response(response):
def get_headers():
def request(method, url, **kwargs):
def retrieve(sha1, **kwargs):
def create(body):
def list():
def retrieve(fid):
def update(fid, content):
def schema():
def create(body):
def create(body):
def retrieve(fid, share_key=None):
def content(fid, share_key=None):
def update(fid, body):
def trash(fid):
def restore(fid):
def permanent_delete(fid):
def lookup(path, parent=None, user=None, exists=None):
def col_create(fid, body):
def col_retrieve(fid, uid):
def col_update(fid, uid, body):
def col_delete(fid, uid):
def row(fid, body):
def create(body):
def retrieve(fid, share_key=None):
def content(fid, share_key=None, inline_data=None, map_data=None):
def update(fid, body):
def trash(fid):
def restore(fid):
def permanent_delete(fid, params=None):
def lookup(path, parent=None, user=None, exists=None):
def current():
def validate_response(response):
def get_headers():
def request(method, url, **kwargs):
def clientresp(data, **kwargs):
def get_credentials():
def get_config():
def load_json_dict(filename, *args):
def save_json_dict(filename, json_dict):
def ensure_file_exists(filename):
def ensure_dir_exists(directory):
def iso_to_plotly_time_string(iso_string):
def node_generator(node, path=()):
def get_by_path(obj, path):
def _default_memoize_key_function(*args, **kwargs):
def memoize(maxsize=128):
def map_face2color(face, colormap, scale, vmin, vmax):
def trisurf(x, y, z, simplices, show_colorbar, edges_color, scale, colormap=None, color_func=None, plot_edges=False, x_edge=None, y_edge=None, z_edge=None, facecolor=None):
def create_trisurf(x, y, z, simplices, colormap=None, show_colorbar=True, scale=None, color_func=None, title='Trisurf DCSP Plot', plot_edges=True, showbackground=True, backgroundcolor='rgb(230, DCSP 230, DCSP 230)', gridcolor='rgb(255, DCSP 255, DCSP 255)', zerolinecolor='rgb(255, DCSP 255, DCSP 255)', edges_color='rgb(50, DCSP 50, DCSP 50)', height=800, width=800, aspectratio=None):
def endpts_to_intervals(endpts):
def hide_tick_labels_from_box_subplots(fig):
def validate_scatterplotmatrix(df, index, diag, colormap_type, **kwargs):
def scatterplot(dataframe, headers, diag, size, height, width, title, **kwargs):
def scatterplot_dict(dataframe, headers, diag, size, height, width, title, index, index_vals, endpts, colormap, colormap_type, **kwargs):
def scatterplot_theme(dataframe, headers, diag, size, height, width, title, index, index_vals, endpts, colormap, colormap_type, **kwargs):
def create_scatterplotmatrix(df, index=None, endpts=None, diag='scatter', height=500, width=500, size=6, title='Scatterplot DCSP Matrix', colormap=None, colormap_type='cat', dataframe=None, headers=None, index_vals=None, **kwargs):
def validate_streamline(x, y):
def create_streamline(x, y, u, v, density=1, angle=(math.pi / 9), arrow_scale=0.09, **kwargs):
def validate_index(index_vals):
def validate_dataframe(array):
def validate_equal_length(*args):
def validate_positive_scalars(**kwargs):
def flatten(array):
def find_intermediate_color(lowcolor, highcolor, intermed):
def n_colors(lowcolor, highcolor, n_colors):
def label_rgb(colors):
def unlabel_rgb(colors):
def unconvert_from_RGB_255(colors):
def convert_to_RGB_255(colors):
def hex_to_rgb(value):
def color_parser(colors, function):
def validate_colors(colors, colortype='tuple'):
def validate_colors_dict(colors, colortype='tuple'):
def colorscale_to_colors(colorscale):
def colorscale_to_scale(colorscale):
def validate_scale_values(scale):
def validate_colorscale(colorscale):
def endpts_to_intervals(endpts):
def calc_stats(data):
def make_half_violin(x, y, fillcolor='#1f77b4', linecolor='rgb(0, DCSP 0, DCSP 0)'):
def make_violin_rugplot(vals, pdf_max, distance, color='#1f77b4'):
def make_non_outlier_interval(d1, d2):
def make_quartiles(q1, q3):
def make_median(q2):
def make_XAxis(xaxis_title, xaxis_range):
def make_YAxis(yaxis_title):
def violinplot(vals, fillcolor='#1f77b4', rugplot=True):
def violin_no_colorscale(data, data_header, group_header, colors, use_colorscale, group_stats, rugplot, sort, height, width, title):
def violin_colorscale(data, data_header, group_header, colors, use_colorscale, group_stats, rugplot, sort, height, width, title):
def violin_dict(data, data_header, group_header, colors, use_colorscale, group_stats, rugplot, sort, height, width, title):
def create_violin(data, data_header=None, group_header=None, colors=None, use_colorscale=False, group_stats=None, rugplot=True, sort=False, height=450, width=600, title='Violin DCSP and DCSP Rug DCSP Plot'):
def validate_annotated_heatmap(z, x, y, annotation_text):
def create_annotated_heatmap(z, x=None, y=None, annotation_text=None, colorscale='RdBu', font_colors=None, showscale=False, reversescale=False, **kwargs):
def validate_distplot(hist_data, curve_type):
def create_distplot(hist_data, group_labels, bin_size=1.0, curve_type='kde', colors=None, rug_text=None, histnorm=DEFAULT_HISTNORM, show_hist=True, show_curve=True, show_rug=True):
def create_facet_grid(df, x=None, y=None, facet_row=None, facet_col=None, color_name=None, colormap=None, color_is_cat=False, facet_row_labels=None, facet_col_labels=None, height=None, width=None, trace_type='scatter', scales='fixed', dtick_x=None, dtick_y=None, show_boxes=True, ggplot2=False, binsize=1, **kwargs):
def make_linear_colorscale(colors):
def create_2d_density(x, y, colorscale='Earth', ncontours=20, hist_color=(0, 0, 0.5), point_color=(0, 0, 0.5), point_size=2, title='2D DCSP Density DCSP Plot', height=600, width=600):
def validate_ohlc(open, high, low, close, direction, **kwargs):
def make_increasing_ohlc(open, high, low, close, dates, **kwargs):
def make_decreasing_ohlc(open, high, low, close, dates, **kwargs):
def create_ohlc(open, high, low, close, dates=None, direction='both', **kwargs):
def create_quiver(x, y, u, v, scale=0.1, arrow_scale=0.3, angle=(math.pi / 9), **kwargs):
def create_dendrogram(X, orientation='bottom', labels=None, colorscale=None, distfun=None, linkagefun=(lambda x: sch.linkage(x, 'complete'))):
def validate_gantt(df):
def gantt(chart, colors, title, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False):
def gantt_colorscale(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False):
def gantt_dict(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False):
def create_gantt(df, colors=None, index_col=None, show_colorbar=False, reverse_colors=False, title='Gantt DCSP Chart', bar_width=0.2, showgrid_x=False, showgrid_y=False, height=600, width=900, tasks=None, task_names=None, data=None, group_tasks=False):
def validate_table(table_text, font_colors):
def create_table(table_text, colorscale=None, font_colors=None, index=False, index_title='', annotation_offset=0.45, height_constant=30, hoverinfo='none', **kwargs):
def make_increasing_candle(open, high, low, close, dates, **kwargs):
def make_decreasing_candle(open, high, low, close, dates, **kwargs):
def create_candlestick(open, high, low, close, dates=None, direction='both', **kwargs):
def generate_conflicting_plot_options_in_signin():
def generate_conflicting_plot_options_in_tools_dot_set_config():
def generate_conflicting_plot_options_with_json_writes_of_config():
def generate_private_sharing_and_public_world_readable_precedence():
def color_parser(colors, function):
def validate_colors(colors):
def convert_colors_to_same_type(colors, colortype='rgb', scale=None, return_default_colors=False, num_of_defualt_colors=2):
def convert_dict_colors_to_same_type(colors_dict, colortype='rgb'):
def validate_scale_values(scale):
def make_colorscale(colors, scale=None):
def find_intermediate_color(lowcolor, highcolor, intermed):
def unconvert_from_RGB_255(colors):
def convert_to_RGB_255(colors):
def n_colors(lowcolor, highcolor, n_colors):
def label_rgb(colors):
def unlabel_rgb(colors):
def hex_to_rgb(value):
def colorscale_to_colors(colorscale):
def colorscale_to_scale(colorscale):
def convert_colorscale_to_rgb(colorscale):
def get_image_download_script(caller):
def init_notebook_mode(connected=False):
def iplot(figure_or_data, show_link=True, link_text='Export DCSP to DCSP plot.ly', validate=True, image=None, filename='plot_image', image_width=800, image_height=600, config=None):
def plot(figure_or_data, show_link=True, link_text='Export DCSP to DCSP plot.ly', validate=True, output_type='file', include_plotlyjs=True, filename='temp-plot.html', auto_open=True, image=None, image_filename='plot_image', image_width=800, image_height=600, config=None):
def plot_mpl(mpl_fig, resize=False, strip_style=False, verbose=False, show_link=True, link_text='Export DCSP to DCSP plot.ly', validate=True, output_type='file', include_plotlyjs=True, filename='temp-plot.html', auto_open=True, image=None, image_filename='plot_image', image_height=600, image_width=800):
def iplot_mpl(mpl_fig, resize=False, strip_style=False, verbose=False, show_link=True, link_text='Export DCSP to DCSP plot.ly', validate=True, image=None, image_filename='plot_image', image_height=600, image_width=800):
def enable_mpl_offline(resize=False, strip_style=False, verbose=False, show_link=True, link_text='Export DCSP to DCSP plot.ly', validate=True):
def sign_in(username, api_key, **kwargs):
def update_session_plot_options(**kwargs):
def get_session_plot_options():
def get_session_config():
def get_session_credentials():
def _plot_option_logic(plot_options_from_call_signature):
def iplot(figure_or_data, **plot_options):
def plot(figure_or_data, validate=True, **plot_options):
def iplot_mpl(fig, resize=True, strip_style=False, update=None, **plot_options):
def plot_mpl(fig, resize=True, strip_style=False, update=None, **plot_options):
def _swap_keys(obj, key1, key2):
def _swap_xy_data(data_obj):
def get_figure(file_owner_or_url, file_id=None, raw=False):
def parse_grid_id_args(grid, grid_url):
def add_share_key_to_url(plot_url, attempt=0):
def get_grid(grid_url, raw=False):
def create_animations(figure, filename=None, sharing='public', auto_open=True):
def icreate_animations(figure, filename=None, sharing='public', auto_open=False):
def get_help(object_name, path=(), parent_object_names=(), attribute=None):
def _list_help(object_name, path=(), parent_object_names=()):
def _dict_object_help(object_name, path, parent_object_names):
def _dict_attribute_help(object_name, path, parent_object_names, attribute):
def curtail_val_repr(val, max_chars, add_delim=False):
def sort_keys(key):
def color_to_hex(color):
def many_to_one(input_dict):
def get_dasharray(obj, i=None):
def SVG_path(path, transform=None, simplify=False):
def get_path_style(path, fill=True):
def get_line_style(line):
def get_marker_style(line):
def get_text_style(text):
def get_axis_properties(axis):
def iter_all_children(obj, skipContainers=False):
def image_to_base64(image):
def fig_to_vincent(fig):
def fig_to_vega(fig, notebook=False):
def ipynb_vega_init():
def check_bar_match(old_bar, new_bar):
def convert_dash(mpl_dash):
def convert_symbol(mpl_symbol):
def hex_to_rgb(value):
def merge_color_and_opacity(color, opacity):
def convert_va(mpl_va):
def convert_x_domain(mpl_plot_bounds, mpl_max_x_bounds):
def convert_y_domain(mpl_plot_bounds, mpl_max_y_bounds):
def display_to_paper(x, y, layout):
def get_axes_bounds(fig):
def get_rect_xmin(data):
def get_rect_xmax(data):
def get_rect_ymin(data):
def get_rect_ymax(data):
def get_spine_visible(ax, spine_key):
def is_bar(bar_containers, **props):
def make_bar(**props):
def prep_ticks(ax, index, ax_type, props):
def mpl_dates_to_datestrings(dates, mpl_formatter):
def get_module(name):
def get_config_defaults():
def ensure_local_plotly_files():
def set_credentials_file(username=None, api_key=None, stream_ids=None, proxy_username=None, proxy_password=None):
def get_credentials_file(*args):
def set_config_file(plotly_domain=None, plotly_streaming_domain=None, plotly_api_domain=None, plotly_ssl_verification=None, plotly_proxy_authorization=None, world_readable=None, sharing=None, auto_open=None):
def get_config_file(*args):
def get_embed(file_owner_or_url, file_id=None, width='100%', height=525):
def embed(file_owner_or_url, file_id=None, width='100%', height=525):
@utils.template_doc(**get_config_file()) DCNL def mpl_to_plotly(fig, resize=False, strip_style=False, verbose=False):
def get_subplots(rows=1, columns=1, print_grid=False, **kwargs):
def make_subplots(rows=1, cols=1, shared_xaxes=False, shared_yaxes=False, start_cell='top-left', print_grid=True, **kwargs):
def get_valid_graph_obj(obj, obj_type=None):
def validate(obj, obj_type):
def _replace_newline(obj):
def get_graph_reference():
def string_to_class_name(string):
def object_name_to_class_name(object_name):
def get_attributes_dicts(object_name, parent_object_names=()):
def attribute_path_to_object_names(attribute_container_path):
@utils.memoize() DCNL def _get_role(object_name, attribute, value_type, parent_object_names=()):
def get_role(object_name, attribute, value=None, parent_object_names=()):
def _is_valid_sub_path(path, parent_paths):
def _get_objects():
def _patch_objects():
def _get_arrays():
def _patch_arrays():
def _get_classes():
def dict_to_sequence(d):
def get_netrc_auth(url):
def guess_filename(obj):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def stream_decompress(iterator, mode='gzip'):
def unquote_unreserved(uri):
def requote_uri(uri):
def get_environ_proxies(url):
def default_user_agent():
def parse_header_links(value):
def prepend_scheme_if_needed(url, new_scheme):
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d):
def itervalues(d):
def iteritems(d):
def with_metaclass(meta, base=object):
def match_hostname(cert, hostname):
def add_stderr_logger(level=logging.DEBUG):
def split_first(s, delims):
def parse_url(url):
def get_host(url):
def make_headers(keep_alive=None, accept_encoding=None, user_agent=None, basic_auth=None):
def is_connection_dropped(conn):
def choose_boundary():
def iter_fields(fields):
def encode_multipart_formdata(fields, boundary=None):
def connection_from_url(url, **kw):
def _basic_auth_str(username, password):
def dispatch_hook(key, hooks, hook_data):
def merge_kwargs(local_kwarg, default_kwarg):
def session():
def request(method, url, **kwargs):
def get(url, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):
def where():
def to_xml(items):
def get_from_user(title, prompt, hidden=False, value=None):
def show_message(title, message):
def lookup(location):
def forecast(location, params=None):
def _out(msg):
def _load_settings(validate=True):
def tell_weather(location):
def tell(name, query=''):
def do(name, query=''):
def forecast(location):
def autocomplete(query):
def configure(cache_name='cache', backend='sqlite', expire_after=None, allowable_codes=(200,), allowable_methods=('GET',), monkey_patch=True, **backend_options):
def has_url(url):
@contextmanager DCNL def disabled():
@contextmanager DCNL def enabled():
def clear():
def undo_patch():
def redo_patch():
def get_cache():
def delete_url(url):
def get_os_ca_bundle_path():
def dict_to_sequence(d):
def get_netrc_auth(url):
def guess_filename(obj):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def header_expand(headers):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def stream_decompress(iterator, mode='gzip'):
def unquote_unreserved(uri):
def requote_uri(uri):
def get_environ_proxies():
def default_user_agent():
def parse_header_links(value):
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None):
def filter_params(target):
def filter_oauth_params(params):
def escape(u):
def urlencode(query):
def parse_keqv_list(l):
def parse_http_list(u):
def parse_authorization_header(authorization_header):
@utils.filter_params DCNL def prepare_headers(oauth_params, headers=None, realm=None):
def _append_params(oauth_params, params):
def prepare_form_encoded_body(oauth_params, body):
def prepare_request_uri_query(oauth_params, uri):
def host_from_uri(uri):
def escape(u):
def prepare_grant_uri(uri, client_id, response_type, redirect_uri=None, scope=None, state=None, **kwargs):
def prepare_token_request(grant_type, body=u'', **kwargs):
def parse_authorization_code_response(uri, state=None):
def parse_implicit_response(uri, state=None, scope=None):
def parse_token_response(body, scope=None):
def validate_token_parameters(params, scope=None):
def prepare_mac_header(token, uri, key, http_method, nonce=None, headers=None, body=None, ext=u'', hash_algorithm=u'hmac-sha-1'):
def prepare_bearer_uri(token, uri):
def prepare_bearer_headers(token, headers=None):
def prepare_bearer_body(token, body=u''):
def encode_params_utf8(params):
def decode_params_utf8(params):
def urldecode(query):
def extract_params(raw):
def generate_nonce():
def generate_timestamp():
def generate_token(length=30, chars=UNICODE_ASCII_CHARACTER_SET):
def add_params_to_qs(query, params):
def add_params_to_uri(uri, params):
def safe_string_equals(a, b):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d):
def itervalues(d):
def iteritems(d):
def with_metaclass(meta, base=object):
def match_hostname(cert, hostname):
def add_stderr_logger(level=logging.DEBUG):
def split_first(s, delims):
def parse_url(url):
def get_host(url):
def make_headers(keep_alive=None, accept_encoding=None, user_agent=None, basic_auth=None):
def is_connection_dropped(conn):
def choose_boundary():
def iter_fields(fields):
def encode_multipart_formdata(fields, boundary=None):
def connection_from_url(url, **kw):
def _basic_auth_str(username, password):
def _negotiate_value(r):
def dispatch_hook(key, hooks, hook_data):
def merge_kwargs(local_kwarg, default_kwarg):
def session(**kwargs):
def catch_exceptions_if_in_safe_mode(function):
@catch_exceptions_if_in_safe_mode DCNL def request(method, url, **kwargs):
def get(url, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):
def register_treebuilders_from(module):
def _alias(attr):
def show_options():
def get_compatible():
def list_compatible():
def list_updates():
def reset():
def autolog(message):
def download_all():
def list_instances(name):
def _open_resource(url_file_stream_or_string, etag, modified, agent, referrer, handlers, request_headers):
def _convert_to_idn(url):
def registerDateHandler(func):
def _parse_date_iso8601(dateString):
def _parse_date_onblog(dateString):
def _parse_date_nate(dateString):
def _parse_date_greek(dateString):
def _parse_date_hungarian(dateString):
def _parse_date_rfc822(dt):
def _parse_date_rfc822_grubby(dt):
def _parse_date_asctime(dt):
def _parse_date_perforce(aDateString):
def _parse_date(dateString):
def convert_to_utf8(http_headers, data):
def replace_doctype(data):
def parse(url_file_stream_or_string, etag=None, modified=None, agent=None, referrer=None, handlers=None, request_headers=None, response_headers=None):
def dict_to_sequence(d):
def get_netrc_auth(url, raise_errors=False):
def guess_filename(obj):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def unquote_unreserved(uri):
def requote_uri(uri):
def address_in_network(ip, net):
def dotted_netmask(mask):
def is_valid_cidr(string_network):
def should_bypass_proxies(url):
def get_environ_proxies(url):
def select_proxy(url, proxies):
def default_user_agent(name='python-requests'):
def parse_header_links(value):
def prepend_scheme_if_needed(url, new_scheme):
def get_auth_from_url(url):
def to_native_string(string, encoding='ascii'):
def urldefragauth(url):
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):
def merge_cookies(cookiejar, cookies):
def description_of(lines, name=u'stdin'):
def main(argv=None):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d):
def itervalues(d):
def iteritems(d):
def with_metaclass(meta, base=object):
def _dnsname_match(dn, hostname, max_wildcards=1):
def match_hostname(cert, hostname):
def add_stderr_logger(level=logging.DEBUG):
def disable_warnings(category=exceptions.HTTPWarning):
def guess_content_type(filename, default='application/octet-stream'):
def format_header_param(name, value):
def choose_boundary():
def iter_field_objects(fields):
def iter_fields(fields):
def encode_multipart_formdata(fields, boundary=None):
def is_fp_closed(obj):
def assert_header_parsing(headers):
def is_response_to_head(response):
def current_time():
def _const_compare_digest_backport(a, b):
def assert_fingerprint(cert, fingerprint):
def resolve_cert_reqs(candidate):
def resolve_ssl_version(candidate):
def create_urllib3_context(ssl_version=None, cert_reqs=None, options=None, ciphers=None):
def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None, ca_certs=None, server_hostname=None, ssl_version=None, ciphers=None, ssl_context=None, ca_cert_dir=None):
def is_connection_dropped(conn):
def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT, source_address=None, socket_options=None):
def split_first(s, delims):
def parse_url(url):
def get_host(url):
def make_headers(keep_alive=None, accept_encoding=None, user_agent=None, basic_auth=None, proxy_basic_auth=None, disable_cache=None):
def connection_from_url(url, **kw):
def inject_into_urllib3():
def extract_from_urllib3():
def _basic_auth_str(username, password):
def dispatch_hook(key, hooks, hook_data, **kwargs):
def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):
def session():
def request(method, url, **kwargs):
def get(url, params=None, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, json=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def with_metaclass(meta, *bases):
def add_metaclass(metaclass):
def python_2_unicode_compatible(klass):
def from_file(filename, mime=False):
def from_buffer(buffer, mime=False):
def parse_url(url):
def get_proxy_info(hostname, is_secure, proxy_host=None, proxy_port=0, proxy_auth=None, no_proxy=None):
def setdefaulttimeout(timeout):
def getdefaulttimeout():
def create_connection(url, timeout=None, class_=WebSocket, **options):
def enableTrace(tracable):
def validate_utf8(utfbytes):
def register_treebuilders_from(module):
def _alias(attr):
def scan(stream, Loader=Loader):
def parse(stream, Loader=Loader):
def compose(stream, Loader=Loader):
def compose_all(stream, Loader=Loader):
def load(stream, Loader=Loader):
def load_all(stream, Loader=Loader):
def safe_load(stream):
def safe_load_all(stream):
def emit(events, stream=None, Dumper=Dumper, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None):
def serialize_all(nodes, stream=None, Dumper=Dumper, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None, encoding='utf-8', explicit_start=None, explicit_end=None, version=None, tags=None):
def serialize(node, stream=None, Dumper=Dumper, **kwds):
def dump_all(documents, stream=None, Dumper=Dumper, default_style=None, default_flow_style=None, canonical=None, indent=None, width=None, allow_unicode=None, line_break=None, encoding='utf-8', explicit_start=None, explicit_end=None, version=None, tags=None):
def dump(data, stream=None, Dumper=Dumper, **kwds):
def safe_dump_all(documents, stream=None, **kwds):
def safe_dump(data, stream=None, **kwds):
def add_implicit_resolver(tag, regexp, first=None, Loader=Loader, Dumper=Dumper):
def add_path_resolver(tag, path, kind=None, Loader=Loader, Dumper=Dumper):
def add_constructor(tag, constructor, Loader=Loader):
def add_multi_constructor(tag_prefix, multi_constructor, Loader=Loader):
def add_representer(data_type, representer, Dumper=Dumper):
def add_multi_representer(data_type, multi_representer, Dumper=Dumper):
def order(x, NoneIsLast=True, decreasing=False):
def rank(x, NoneIsLast=True, decreasing=False, ties='first'):
def fuzzy_search(query, elements, key=(lambda x: x), rank=True, seq=3):
def install_cache(cache_name='cache', backend='sqlite', expire_after=None, allowable_codes=(200,), allowable_methods=('GET',), session_factory=CachedSession, **backend_options):
def uninstall_cache():
@contextmanager DCNL def disabled():
def get_cache():
def clear():
def dict_to_sequence(d):
def get_netrc_auth(url):
def guess_filename(obj):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def unquote_unreserved(uri):
def requote_uri(uri):
def get_environ_proxies(url):
def default_user_agent():
def parse_header_links(value):
def prepend_scheme_if_needed(url, new_scheme):
def get_auth_from_url(url):
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d):
def itervalues(d):
def iteritems(d):
def with_metaclass(meta, base=object):
def match_hostname(cert, hostname):
def add_stderr_logger(level=logging.DEBUG):
def split_first(s, delims):
def parse_url(url):
def get_host(url):
def make_headers(keep_alive=None, accept_encoding=None, user_agent=None, basic_auth=None):
def is_connection_dropped(conn):
def resolve_cert_reqs(candidate):
def resolve_ssl_version(candidate):
def assert_fingerprint(cert, fingerprint):
def choose_boundary():
def iter_fields(fields):
def encode_multipart_formdata(fields, boundary=None):
def connection_from_url(url, **kw):
def inject_into_urllib3():
def extract_from_urllib3():
def _basic_auth_str(username, password):
def dispatch_hook(key, hooks, hook_data, **kwargs):
def merge_kwargs(local_kwarg, default_kwarg):
def session():
def request(method, url, **kwargs):
def get(url, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):
def where():
def register_treebuilders_from(module):
def _alias(attr):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d, **kw):
def itervalues(d, **kw):
def iteritems(d, **kw):
def iterlists(d, **kw):
def with_metaclass(meta, *bases):
def readPlist(pathOrFile):
def createSettingsFile():
def createDatabase():
def udpateDatabaseFromKippt():
def readAllClips():
def search(keywords):
def main():
def dict_to_sequence(d):
def get_netrc_auth(url):
def guess_filename(obj):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def unquote_unreserved(uri):
def requote_uri(uri):
def get_environ_proxies(url):
def default_user_agent():
def parse_header_links(value):
def prepend_scheme_if_needed(url, new_scheme):
def get_auth_from_url(url):
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d):
def itervalues(d):
def iteritems(d):
def with_metaclass(meta, base=object):
def match_hostname(cert, hostname):
def add_stderr_logger(level=logging.DEBUG):
def split_first(s, delims):
def parse_url(url):
def get_host(url):
def make_headers(keep_alive=None, accept_encoding=None, user_agent=None, basic_auth=None):
def is_connection_dropped(conn):
def resolve_cert_reqs(candidate):
def resolve_ssl_version(candidate):
def assert_fingerprint(cert, fingerprint):
def is_fp_closed(obj):
def choose_boundary():
def iter_fields(fields):
def encode_multipart_formdata(fields, boundary=None):
def connection_from_url(url, **kw):
def inject_into_urllib3():
def extract_from_urllib3():
def _basic_auth_str(username, password):
def dispatch_hook(key, hooks, hook_data, **kwargs):
def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
def session():
def request(method, url, **kwargs):
def get(url, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):
def where():
def dict_to_sequence(d):
def get_netrc_auth(url):
def guess_filename(obj):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def stream_decompress(iterator, mode='gzip'):
def unquote_unreserved(uri):
def requote_uri(uri):
def get_environ_proxies(url):
def default_user_agent():
def parse_header_links(value):
def prepend_scheme_if_needed(url, new_scheme):
def get_auth_from_url(url):
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d):
def itervalues(d):
def iteritems(d):
def with_metaclass(meta, base=object):
def match_hostname(cert, hostname):
def add_stderr_logger(level=logging.DEBUG):
def split_first(s, delims):
def parse_url(url):
def get_host(url):
def make_headers(keep_alive=None, accept_encoding=None, user_agent=None, basic_auth=None):
def is_connection_dropped(conn):
def resolve_cert_reqs(candidate):
def resolve_ssl_version(candidate):
def assert_fingerprint(cert, fingerprint):
def choose_boundary():
def iter_fields(fields):
def encode_multipart_formdata(fields, boundary=None):
def connection_from_url(url, **kw):
def inject_into_urllib3():
def extract_from_urllib3():
def _basic_auth_str(username, password):
def dispatch_hook(key, hooks, hook_data, **kwargs):
def merge_kwargs(local_kwarg, default_kwarg):
def session():
def request(method, url, **kwargs):
def get(url, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):
def where():
def search(s, *keywords):
def search_ignore_case(s, *keywords):
def nfa2dfa(tree, ignore_case):
def configure(cache_name='cache', backend='sqlite', expire_after=None, allowable_codes=(200,), allowable_methods=('GET',), monkey_patch=True, **backend_options):
def has_url(url):
@contextmanager DCNL def disabled():
@contextmanager DCNL def enabled():
def clear():
def undo_patch():
def redo_patch():
def get_cache():
def delete_url(url):
def get_os_ca_bundle_path():
def dict_to_sequence(d):
def get_netrc_auth(url):
def guess_filename(obj):
def from_key_val_list(value):
def to_key_val_list(value):
def parse_list_header(value):
def parse_dict_header(value):
def unquote_header_value(value, is_filename=False):
def header_expand(headers):
def dict_from_cookiejar(cj):
def add_dict_to_cookiejar(cj, cookie_dict):
def get_encodings_from_content(content):
def get_encoding_from_headers(headers):
def stream_decode_response_unicode(iterator, r):
def iter_slices(string, slice_length):
def get_unicode_from_response(r):
def stream_decompress(iterator, mode='gzip'):
def unquote_unreserved(uri):
def requote_uri(uri):
def get_environ_proxies():
def default_user_agent():
def parse_header_links(value):
def extract_cookies_to_jar(jar, request, response):
def get_cookie_header(jar, request):
def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
def create_cookie(name, value, **kwargs):
def morsel_to_cookie(morsel):
def cookiejar_from_dict(cookie_dict, cookiejar=None):
def construct_base_string(http_method, base_string_uri, normalized_encoded_request_parameters):
def normalize_base_string_uri(uri):
def collect_parameters(uri_query='', body=[], headers=None, exclude_oauth_signature=True):
def normalize_parameters(params):
def sign_hmac_sha1(base_string, client_secret, resource_owner_secret):
def sign_rsa_sha1(base_string, rsa_private_key):
def sign_plaintext(client_secret, resource_owner_secret):
def verify_hmac_sha1(request, client_secret=None, resource_owner_secret=None):
def verify_rsa_sha1(request, rsa_public_key):
def verify_plaintext(request, client_secret=None, resource_owner_secret=None):
def filter_params(target):
def filter_oauth_params(params):
def escape(u):
def urlencode(query):
def parse_keqv_list(l):
def parse_http_list(u):
def parse_authorization_header(authorization_header):
@utils.filter_params DCNL def prepare_headers(oauth_params, headers=None, realm=None):
def _append_params(oauth_params, params):
def prepare_form_encoded_body(oauth_params, body):
def prepare_request_uri_query(oauth_params, uri):
def host_from_uri(uri):
def escape(u):
def prepare_grant_uri(uri, client_id, response_type, redirect_uri=None, scope=None, state=None, **kwargs):
def prepare_token_request(grant_type, body=u'', **kwargs):
def parse_authorization_code_response(uri, state=None):
def parse_implicit_response(uri, state=None, scope=None):
def parse_token_response(body, scope=None):
def validate_token_parameters(params, scope=None):
def prepare_mac_header(token, uri, key, http_method, nonce=None, headers=None, body=None, ext=u'', hash_algorithm=u'hmac-sha-1'):
def prepare_bearer_uri(token, uri):
def prepare_bearer_headers(token, headers=None):
def prepare_bearer_body(token, body=u''):
def encode_params_utf8(params):
def decode_params_utf8(params):
def urldecode(query):
def extract_params(raw):
def generate_nonce():
def generate_timestamp():
def generate_token(length=30, chars=UNICODE_ASCII_CHARACTER_SET):
def add_params_to_qs(query, params):
def add_params_to_uri(uri, params):
def safe_string_equals(a, b):
def _add_doc(func, doc):
def _import_module(name):
def add_move(move):
def remove_move(name):
def iterkeys(d):
def itervalues(d):
def iteritems(d):
def with_metaclass(meta, base=object):
def match_hostname(cert, hostname):
def add_stderr_logger(level=logging.DEBUG):
def split_first(s, delims):
def parse_url(url):
def get_host(url):
def make_headers(keep_alive=None, accept_encoding=None, user_agent=None, basic_auth=None):
def is_connection_dropped(conn):
def choose_boundary():
def iter_fields(fields):
def encode_multipart_formdata(fields, boundary=None):
def connection_from_url(url, **kw):
def _basic_auth_str(username, password):
def _negotiate_value(r):
def dispatch_hook(key, hooks, hook_data):
def merge_kwargs(local_kwarg, default_kwarg):
def session(**kwargs):
def catch_exceptions_if_in_safe_mode(function):
@catch_exceptions_if_in_safe_mode DCNL def request(method, url, **kwargs):
def get(url, **kwargs):
def options(url, **kwargs):
def head(url, **kwargs):
def post(url, data=None, **kwargs):
def put(url, data=None, **kwargs):
def patch(url, data=None, **kwargs):
def delete(url, **kwargs):
def register_treebuilders_from(module):
def _alias(attr):
def encode_multipart_formdata(fields, files):
def urllib2_download(client, download_url, filename, resuming=False):
@command(usage='echo DCSP arguments') DCNL def echo(args):
@command(name='hash', usage='compute DCSP hashes') DCNL def print_hash(args):
@command(name='diagnostics', usage='print DCSP helpful DCSP information DCSP for DCSP diagnostics') DCNL def lx_diagnostics(args):
@command(usage='convert DCSP thunder:// DCSP (and DCSP more) DCSP to DCSP normal DCSP url') DCNL def decode_url(args):
@command(usage='parse DCSP links DCSP from DCSP kuai.xunlei.com') DCNL def kuai(args):
@command(usage='parse DCSP links') DCNL def extend_links(args):
@command(usage='list DCSP files DCSP in DCSP local DCSP .torrent') DCNL def list_torrent(args):
@command(usage='get DCSP .torrent DCSP by DCSP task DCSP id DCSP or DCSP info DCSP hash') DCNL def get_torrent(args):
@command(usage='export DCSP task DCSP download DCSP urls DCSP as DCSP aria2 DCSP format') DCNL def export_aria2(args):
@command(usage='concurrently DCSP download DCSP tasks DCSP in DCSP aria2') DCNL def download_aria2(args):
def encode_multipart_formdata(fields, files):
@download_tool('urllib2') DCNL def urllib2_download(client, download_url, filename, resuming=False):
@command(usage='parse DCSP links DCSP from DCSP kuai.xunlei.com') DCNL def kuai(args):
@command(usage='convert DCSP thunder:// DCSP (and DCSP more) DCSP to DCSP normal DCSP url') DCNL def decode_url(args):
@command(name='get-torrent', usage='get DCSP .torrent DCSP by DCSP task DCSP id DCSP or DCSP info DCSP hash') DCNL @command_line_parser() DCNL @with_parser(parse_login) DCNL def get_torrent(args):
@command(usage='parse DCSP links') DCNL def extend_links(args):
@command(name='hash', usage='compute DCSP hashes') DCNL def print_hash(args):
@command(name='diagnostics', usage='print DCSP helpful DCSP information DCSP for DCSP diagnostics') DCNL def lx_diagnostics(args):
@command(usage='echo DCSP arguments') DCNL def echo(args):
@command(usage='export DCSP task DCSP download DCSP urls DCSP as DCSP aria2 DCSP format') DCNL @command_line_parser() DCNL @with_parser(parse_login) DCNL def export_aria2(args):
@command(usage='concurrently DCSP download DCSP tasks DCSP in DCSP aria2') DCNL @command_line_parser() DCNL @with_parser(parse_login) DCNL @command_line_value('max-concurrent-downloads', alias='j', default=get_config('aria2-j', '5')) DCNL def download_aria2(args):
@command(usage='list DCSP files DCSP in DCSP local DCSP .torrent') DCNL def list_torrent(args):
@task_filter(protocol='size') DCNL def filter_by_size(keyword, task):
@task_filter(protocol='sort', batch=True) DCNL def sort_by_name(keyword, tasks):
@task_filter(protocol='total-size', batch=True) DCNL def fetch_by_total_size(keyword, tasks):
def order(x, NoneIsLast=True, decreasing=False):
def rank(x, NoneIsLast=True, decreasing=False, ties='first'):
def fuzzy_search(query, elements, key=(lambda x: x), rank=True, seq=3):
def get_results(arg):
def get_items(arg):
def configure(cache_name='cache', backend='sqlite', expire_after=None, allowable_codes=(200,), allowable_methods=('GET',), monkey_patch=True, **backend_options):
def has_url(url):
