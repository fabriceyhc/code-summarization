test computing crossspectral density from epochs
test computing csd on artificial data
test computing crossspectral density from ndarray
test computing csd on artificial data
test stft and istft tight frame property
test yulewalker against statsmodels
test fitting ar model on raw data
test input checker for stockwell
test stockwell power itc
test stockwell transform
test stockwell functions
test morlet with and without zero mean
test the tobedeprecated timefrequency transform psd and itc
test dpss tapers
test tfr multitaper
test tfr cropping
test tfr io capacities
test tfr plotting
test tfr splitting reappending channel types
test compute tfr function
test computation of dpss windows
test multitaper psd computation
aux function
ensure n fft n per seg and n overlap make sense
check psd data pull arrays from inst
compute power spectral density psd using welch s method dcnl parameters dcnl x array shape n times dcnl the data to compute psd from dcnl sfreq float dcnl the sampling frequency dcnl fmin float dcnl the lower frequency of interest dcnl fmax float dcnl the upper frequency of interest dcnl n fft int dcnl the length of fft used must be n per seg default 256 dcnl the segments will be zeropadded if n fft n per seg dcnl n overlap int dcnl the number of points of overlap between segments will be adjusted dcnl to be < n per seg the default value is 0 dcnl n per seg int | none dcnl length of each welch segment the smaller it is with respect to the dcnl signal length the smoother are the psds defaults to none which sets dcnl n per seg equal to n fft dcnl n jobs int dcnl number of cpus to use in the computation dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl psds ndarray shape n freqs or dcnl the power spectral densities all dimensions up to the last will dcnl be the same as input dcnl freqs ndarray shape n freqs dcnl the frequencies dcnl notes dcnl versionadded 0 14 0
compute the power spectral density psd using welch s method dcnl calculates periodigrams for a sliding window over the dcnl time dimension then averages them together for each channel epoch dcnl parameters dcnl inst instance of epochs or raw or evoked dcnl the data for psd calculation dcnl fmin float dcnl min frequency of interest dcnl fmax float dcnl max frequency of interest dcnl tmin float | none dcnl min time of interest dcnl tmax float | none dcnl max time of interest dcnl n fft int dcnl the length of fft used must be n per seg default 256 dcnl the segments will be zeropadded if n fft n per seg dcnl if n per seg is none n fft must be number of time points dcnl in the data dcnl n overlap int dcnl the number of points of overlap between segments will be adjusted dcnl to be < n per seg the default value is 0 dcnl n per seg int | none dcnl length of each welch segment the smaller it is with respect to the dcnl signal length the smoother are the psds defaults to none which sets dcnl n per seg equal to n fft dcnl picks arraylike of int | none dcnl the selection of channels to include in the computation dcnl if none take all channels dcnl proj bool dcnl apply ssp projection vectors if inst is ndarray this is not used dcnl n jobs int dcnl number of cpus to use in the computation dcnl reject by annotation bool dcnl whether to omit bad segments from the data while computing the dcnl psd if true annotated segments with a description that starts dcnl with bad are omitted has no effect if inst is an epochs or dcnl evoked object defaults to true dcnl versionadded 0 15 0 dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl psds ndarray shape n freqs dcnl the power spectral densities if input is of type raw dcnl then psds will be shape n channels n freqs if input is type epochs dcnl then psds will be shape n epochs n channels n freqs dcnl freqs ndarray shape n freqs dcnl the frequencies dcnl see also dcnl mne io raw plot psd mne epochs plot psd psd multitaper dcnl csd epochs psd array welch dcnl notes dcnl versionadded 0 12 0
compute the power spectral density psd using multitapers dcnl calculates spectral density for orthogonal tapers then averages them dcnl together for each channel epoch see 1 for a description of the tapers dcnl and 2 for the general method dcnl parameters dcnl inst instance of epochs or raw or evoked dcnl the data for psd calculation dcnl fmin float dcnl min frequency of interest dcnl fmax float dcnl max frequency of interest dcnl tmin float | none dcnl min time of interest dcnl tmax float | none dcnl max time of interest dcnl bandwidth float dcnl the bandwidth of the multi taper windowing function in hz the default dcnl value is a window halfbandwidth of 4 dcnl adaptive bool dcnl use adaptive weights to combine the tapered spectra into psd dcnl slow use n jobs 1 to speed up computation dcnl low bias bool dcnl only use tapers with more than 90 spectral concentration within dcnl bandwidth dcnl normalization str dcnl either full or length default if full the psd will dcnl be normalized by the sampling rate as well as the length of dcnl the signal as in nitime dcnl picks arraylike of int | none dcnl the selection of channels to include in the computation dcnl if none take all channels dcnl proj bool dcnl apply ssp projection vectors if inst is ndarray this is not used dcnl n jobs int dcnl number of cpus to use in the computation dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl psds ndarray shape n freqs dcnl the power spectral densities if input is of type raw dcnl then psds will be shape n channels n freqs if input is type epochs dcnl then psds will be shape n epochs n channels n freqs dcnl freqs ndarray shape n freqs dcnl the frequencies dcnl references dcnl 1 slepian d prolate spheroidal wave functions fourier analysis dcnl and uncertainty v the discrete case bell system technical dcnl journal vol 57 1978 dcnl 2 percival d b and walden a t spectral analysis for physical dcnl applications multitaper and conventional univariate techniques dcnl cambridge university press 1993 dcnl see also dcnl mne io raw plot psd mne epochs plot psd psd welch csd epochs dcnl psd array multitaper dcnl notes dcnl versionadded 0 12 0
compute yulewalker adapted from statsmodels dcnl operates inplace
fit an ar model to raw data and creates the corresponding iir filter dcnl the computed filter is fitted to data from all of the picked channels dcnl with frequency response given by the standard iir formula dcnl math dcnl h e^ jw frac 1 a0 + a1e^ jw + + ane^ jnw dcnl parameters dcnl raw raw object dcnl an instance of raw dcnl order int dcnl order of the fir filter dcnl picks arraylike of int | none dcnl indices of selected channels if none meg and eeg channels are used dcnl tmin float dcnl the beginning of time interval in seconds dcnl tmax float dcnl the end of time interval in seconds dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl b ndarray dcnl numerator filter coefficients dcnl a ndarray dcnl denominator filter coefficients
aux function
precompute stockwell gausian windows in the freq domain
compute st based on ali moukadem matlab code used in tests
aux function
compute power and intertrial coherence using stockwell s transform dcnl see 1 2 3 4 for more information dcnl parameters dcnl data ndarray dcnl the signal to transform any dimensionality supported as long dcnl as the last dimension is time dcnl sfreq float dcnl the sampling frequency dcnl fmin none float dcnl the minimum frequency to include if none defaults to the minimum fft dcnl frequency greater than zero dcnl fmax none float dcnl the maximum frequency to include if none defaults to the maximum fft dcnl n fft int | none dcnl the length of the windows used for fft if none it defaults to the dcnl next power of 2 larger than the signal length dcnl width float dcnl the width of the gaussian window if < 1 increased temporal dcnl resolution if 1 increased frequency resolution defaults to 1 dcnl classical stransform dcnl decim int dcnl the decimation factor on the time axis to reduce memory usage dcnl return itc bool dcnl return intertrial coherence itc as well as averaged power dcnl n jobs int dcnl number of parallel jobs to use dcnl returns dcnl st power ndarray dcnl the multitaper power of the stockwell transformed data dcnl the last two dimensions are frequency and time dcnl itc ndarray dcnl the intertrial coherence only returned if return itc is true dcnl freqs ndarray dcnl the frequencies dcnl references dcnl 1 stockwell r g why use the stransform ams pseudodifferential dcnl operators partial differential equations and timefrequency dcnl analysis 52 2007 279309 dcnl 2 moukadem a bouguila z abdeslam d o and dieterlen a dcnl stockwell transform optimization applied on the detection of split in dcnl heart sounds 2014 signal processing conference eusipco 2013 dcnl proceedings of the 22nd european pages 20152019 dcnl 3 wheat k cornelissen p l frost s j and peter c hansen dcnl 2010 during visual word recognition phonology is accessed dcnl within 100 ms and may be mediated by a speech production dcnl code evidence from magnetoencephalography the journal of dcnl neuroscience 30 15 52295233 dcnl 4 k a jones and b porjesz and d chorlian and m rangaswamy and c dcnl kamarajan and a padmanabhapillai and a stimus and h begleiter dcnl 2006 stransform timefrequency analysis of p300 reveals deficits in dcnl individuals diagnosed with alcoholism dcnl clinical neurophysiology 117 21282143 dcnl see also dcnl mne time frequency tfr stockwell dcnl mne time frequency tfr multitaper dcnl mne time frequency tfr array multitaper dcnl mne time frequency tfr morlet dcnl mne time frequency tfr array morlet
timefrequency representation tfr using stockwell transform dcnl parameters dcnl inst epochs | evoked dcnl the epochs or evoked object dcnl fmin none float dcnl the minimum frequency to include if none defaults to the minimum fft dcnl frequency greater than zero dcnl fmax none float dcnl the maximum frequency to include if none defaults to the maximum fft dcnl n fft int | none dcnl the length of the windows used for fft if none it defaults to the dcnl next power of 2 larger than the signal length dcnl width float dcnl the width of the gaussian window if < 1 increased temporal dcnl resolution if 1 increased frequency resolution defaults to 1 dcnl classical stransform dcnl decim int dcnl the decimation factor on the time axis to reduce memory usage dcnl return itc bool dcnl return intertrial coherence itc as well as averaged power dcnl n jobs int dcnl the number of jobs to run in parallel over channels dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl power averagetfr dcnl the averaged power dcnl itc averagetfr dcnl the intertrial coherence only returned if return itc is true dcnl see also dcnl mne time frequency tfr array stockwell dcnl mne time frequency tfr multitaper dcnl mne time frequency tfr array multitaper dcnl mne time frequency tfr morlet dcnl mne time frequency tfr array morlet dcnl notes dcnl versionadded 0 9 0
get description of brainstorm bst resting dataset
get description of brainstorm bst phantom ctf dataset
get description of brainstorm bst raw dataset
get description of brainstorm bst auditory dataset
get description of brainstorm bst phantom elekta dataset
get the version of the dataset
get a dataset path
update path
aux function
get a dataset version
check for dataset presence
download all datasets used in examples and tutorials
fetch the hcpmmp parcellation dcnl this will download and install the hcpmmp parcellation 1 files for dcnl freesurfer s fsaverage 2 to the specified directory dcnl parameters dcnl subjects dir str | none dcnl the subjects directory to use the file will be placed in dcnl subjects dir + fsaverage label dcnl verbose bool str int or none dcnl if not none override default verbose level see mne verbose dcnl notes dcnl use of this parcellation is subject to terms of use on the dcnl hcpmmp webpage <https balsa wustl edu wn56 dcnl references dcnl 1 glasser mf et al 2016 a multimodal parcellation of human dcnl cerebral cortex nature 536 171178 dcnl 2 mills k 2016 hcpmmp1 0 projected on fsaverage dcnl https figshare com articles hcpmmp1 0 projected on fsaverage 3498446 2
get path to local copy of visual 92 categories dataset dcnl note the dataset contains four fiffiles the trigger files and the t1 dcnl mri image this dataset is rather big in size more than 5 gb dcnl parameters dcnl path none | str dcnl location of where to look for the visual 92 categories data storing dcnl location if none the environment variable or config parameter dcnl mne datasets visual 92 categories path is used if it doesn t exist dcnl the mnepython examples directory is used if the dcnl visual 92 categories dataset is not found under the given path e g dcnl as mnepython examples mnevisual 92 categoriesdata the data dcnl will be automatically downloaded to the specified folder dcnl force update bool dcnl force update of the dataset even if a local copy exists dcnl update path bool | none dcnl if true set the mne datasets visual 92 categories path in mnepython dcnl config to the given path if none the user is prompted dcnl verbose bool str int or none dcnl if not none override default verbose level see mne verbose dcnl returns dcnl path list of str dcnl local path to the given data file this path is contained inside a list dcnl of length one for compatibility dcnl notes dcnl the visual 92 categories dataset is documented in the following publication dcnl radoslaw m cichy dimitrios pantazis aude oliva 2014 resolving dcnl human object recognition in space and time doi 10 1038 nn 3635
get dataset version
test simple dataset functions
test megsim url handling
test dataset url handling
get path to local copy of eegmmi dataset url dcnl this is a lowlevel function useful for getting a local copy of a dcnl remote eegbci dataset 1 which is available at physionet 2 dcnl parameters dcnl url str dcnl the dataset to use dcnl path none | str dcnl location of where to look for the eegbci data storing location dcnl if none the environment variable or config parameter dcnl mne datasets eegbci path is used if it doesn t exist the dcnl ~ mne data directory is used if the eegbci dataset dcnl is not found under the given path the data dcnl will be automatically downloaded to the specified folder dcnl force update bool dcnl force update of the dataset even if a local copy exists dcnl update path bool | none dcnl if true set the mne datasets eegbci path in mnepython dcnl config to the given path if none the user is prompted dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl returns dcnl path list of str dcnl local path to the given data file this path is contained inside a list dcnl of length one for compatibility dcnl notes dcnl for example one could do dcnl from mne datasets import eegbci dcnl url http www physionet org physiobank database eegmmidb dcnl eegbci data path url os getenv home + datasets doctest +skip dcnl this would download the given eegbci data file to the datasets folder dcnl and prompt the user to save the datasets path to the mnepython config dcnl if it isn t there already dcnl references dcnl 1 schalk g mcfarland d j hinterberger t birbaumer n dcnl wolpaw j r 2004 bci2000 a generalpurpose braincomputer dcnl interface bci system ieee tbme 51 6 10341043 dcnl 2 goldberger al amaral lan glass l hausdorff jm ivanov pch dcnl mark rg mietus je moody gb peng ck stanley he 2000 dcnl physiobank physiotoolkit and physionet components of a new dcnl research resource for complex physiologic signals dcnl circulation 101 23 e215e220
get paths to local copies of eegbci dataset files dcnl this will fetch data for the eegbci dataset 1 which is also dcnl available at physionet 2 dcnl parameters dcnl subject int dcnl the subject to use can be in the range of 1109 inclusive dcnl runs int | list of int dcnl the runs to use the runs correspond to dcnl run task dcnl 1 baseline eyes open dcnl 2 baseline eyes closed dcnl 3 7 11 motor execution left vs right hand dcnl 4 8 12 motor imagery left vs right hand dcnl 5 9 13 motor execution hands vs feet dcnl 6 10 14 motor imagery hands vs feet dcnl path none | str dcnl location of where to look for the eegbci data storing location dcnl if none the environment variable or config parameter dcnl mne datasets eegbci path is used if it doesn t exist the dcnl ~ mne data directory is used if the eegbci dataset dcnl is not found under the given path the data dcnl will be automatically downloaded to the specified folder dcnl force update bool dcnl force update of the dataset even if a local copy exists dcnl update path bool | none dcnl if true set the mne datasets eegbci path in mnepython dcnl config to the given path if none the user is prompted dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl paths list dcnl list of local data paths of the given type dcnl notes dcnl for example one could do dcnl from mne datasets import eegbci dcnl eegbci load data 1 4 10 14 os getenv home + datasets doctest +skip dcnl this would download runs 4 10 and 14 hand foot motor imagery runs from dcnl subject 1 in the eegbci dataset to the datasets folder and prompt the dcnl user to save the datasets path to the mnepython config if it isn t dcnl there already dcnl references dcnl 1 schalk g mcfarland d j hinterberger t birbaumer n dcnl wolpaw j r 2004 bci2000 a generalpurpose braincomputer dcnl interface bci system ieee tbme 51 6 10341043 dcnl 2 goldberger al amaral lan glass l hausdorff jm ivanov pch dcnl mark rg mietus je moody gb peng ck stanley he 2000 dcnl physiobank physiotoolkit and physionet components of a new dcnl research resource for complex physiologic signals dcnl circulation 101 23 e215e220
get path to local copy of megsim dataset url dcnl this is a lowlevel function useful for getting a local copy of a dcnl remote megsim dataset 1 dcnl parameters dcnl url str dcnl the dataset to use dcnl path none | str dcnl location of where to look for the megsim data storing location dcnl if none the environment variable or config parameter dcnl mne datasets megsim path is used if it doesn t exist the dcnl ~ mne data directory is used if the megsim dataset dcnl is not found under the given path the data dcnl will be automatically downloaded to the specified folder dcnl force update bool dcnl force update of the dataset even if a local copy exists dcnl update path bool | none dcnl if true set the mne datasets megsim path in mnepython dcnl config to the given path if none the user is prompted dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl returns dcnl path list of str dcnl local paths to the given data files if url was a fif file this dcnl will be a list of length 1 if it was a zip file it may potentially dcnl be many files dcnl notes dcnl for example one could do dcnl from mne datasets import megsim dcnl url http cobre mrn org megsim simdata neuromag visual m87174545 vis sim1a 4mm 30na neuro rn fif dcnl megsim data path url os getenv home + datasets doctest +skip dcnl and this would download the given megsim data file to the datasets dcnl folder and prompt the user to save the datasets path to the mnepython dcnl config if it isn t there already dcnl references dcnl 1 aine cj sanfratello l ranken d best e macarthur ja wallace t dcnl gilliam k donahue ch montano r bryant je scott a stephen jm dcnl 2012 megsim a web portal for testing meg analysis methods using dcnl realistic simulated and empirical data neuroinform 10 141158
get path to local copy of megsim dataset type dcnl the megsim dataset is described in 1 dcnl parameters dcnl condition str dcnl the condition to use either visual auditory or somatosensory dcnl data format str dcnl the data format either raw evoked or singletrial dcnl data type str dcnl the type of data either experimental or simulation dcnl path none | str dcnl location of where to look for the megsim data storing location dcnl if none the environment variable or config parameter dcnl mne datasets megsim path is used if it doesn t exist the dcnl ~ mne data directory is used if the megsim dataset dcnl is not found under the given path the data dcnl will be automatically downloaded to the specified folder dcnl force update bool dcnl force update of the dataset even if a local copy exists dcnl update path bool | none dcnl if true set the mne datasets megsim path in mnepython dcnl config to the given path if none the user is prompted dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl returns dcnl paths list dcnl list of local data paths of the given type dcnl notes dcnl for example one could do dcnl from mne datasets import megsim dcnl megsim load data visual raw experimental os getenv home + datasets doctest +skip dcnl and this would download the raw visual experimental megsim dataset to the dcnl datasets folder and prompt the user to save the datasets path to the dcnl mnepython config if it isn t there already dcnl references dcnl 1 aine cj sanfratello l ranken d best e macarthur ja wallace t dcnl gilliam k donahue ch montano r bryant je scott a stephen jm dcnl 2012 megsim a web portal for testing meg analysis methods using dcnl realistic simulated and empirical data neuroinform 10 141158
match megsim data files
download all megsim datasets
test chpi logging and adjustment
test reading and writing head position quaternion parameters
test getting hpi info
compare estimated chpi positions
decimate raw data with aliasing in chpifitting compatible way
test calculation of chpi positions
comparing estimated chpi positions with mf results one second
comparing estimated chpi positions with mf results smaller steps
test calculation of chpi positions with simulated data
test computing just chpi locations
test subtraction of chpi signals
test annotation class
test raw data getter with annotation reject
test fixing stim sti016 for neuromag
test adding events to a raw file
test event merging
test io for events
test find events in raw file
test pick events in a events ndarray
test making events of a fixed length
test defining response events
test acqparserfif
test averaging with acqparserfif vs elekta software
test loading helmet surfaces
test loading the head surface
test cross product with lots of elements
test nearest neighbor searches
test reading and creating morph maps
test reading and writing of freesurfer surface mesh files
test reading curvature data
test triangular surface decimation
test mnec filter design
test our ringing estimation function
test our private overlapadd filtering function
test iir filter stability check
test notch filters
test resampling
test resampling of stim channels
test low band highpass and bandstop filters plus resampling
test filter auto parameters
test cudabased filtering
test zeroth and first order detrending
test our twopoint interpolator
compare dipole results for equivalence
check dipole sizes
test io for dip files
test dipole fitting with ctf data
test dipole fitting
test dipole fitting with a fixed position
test len and indexing of dipole objects
test dipole min dist to inner skull
compute dipole depth
test dipole fitting to submm accuracy
test reading a fixedposition dipole from xfit
helper to test roundtrip io for fixed dipoles
test getting phantom dipole locations
test confidence limits
test that module imports are necessary
test parsing of ave file
helper to check docstring returns list of incorrect results
test module docstring formatting
test that there are no tabs in our source files
test that public functions and classes are documented
helper to get the n ch n times data array
helper to check the snr of a set of channels
helper to assert channel snr of a certain level dcnl mostly useful for operations like maxwell filtering that modify dcnl meg channels while leaving eeg and others intact
assert actual and desired arrays are within some snr tolerance
helper for sorting
assert a nonstandard naming scheme was used while saving or loading dcnl parameters dcnl warns list dcnl list of warnings from warnings catch warnings record true dcnl fname str dcnl filename that should appear in the warning message dcnl n warn int dcnl number of warnings that should have naming convention errors
helper to compare bem surfaces
helper to compare bem solutions
test reading and writing of bem surfaces and solutions
test making a sphere model
test bem model creation from python with i o
test making a bem solution from python with i o
test fitting a sphere to digitization points
test computing bem from flash images
test rendering fif files for mne report
test adding figures images to section
test rendering mri for mne report
test rendering mri without bem for mne report
test adding html str to mne report
test adding a slider with a series of images to mne report
test report input validation
test spatial connectivity between hemispheres
test volume stcs
test stc expansion
test consistency of tmin tstep data shape1 and times
test stc attributes
test io for stc files
test io for stc files using hdf5
test io for w files
test arithmetic for stc files
test stc methods lh data rh data bin center of mass resample
test extraction of label time courses from stc
test morphing of data
fft that adds an additional dimension by repeating result
test applying linear time transform to data
test applying linear time transform to data
test spatiotemporal connectivity from triangles
test spatiotemporal connectivity from source spaces
test stc pandas exporter
test peak getter
test source estimate from mixed source space
test evoked decimation
test savgol filtering
test evoked hashing
test io for evoked data fif + gz with integer and str args
test for shifting of time scale
test for resampling of evoked data
test for detrending evoked data
test evoked pandas exporter
test ssp proj operations
test peak getter
test channelsdropping functionality
test channelpicking functionality
test equalization of channels
test evoked arithmetic
test creating evoked from array
test time as index
test evoked splitting reappending channel types
test evoked baseline
test estimation with meg< head mismatch
test covariance ordering
check that we get the same result under reordering
test ad hoc cov creation and i o
test io for noise covariance matrices
test estimation from raw typically empty room
test estimation from raw with regularization
test estimation from raw with triggers
test arithmetic with noise covariance matrices
test cov regularization
test whitening of evoked data
test cov rank estimation
test rescaling covs
test probabilistic low rank estimators
test automated regularization
test tps warping
test converting trans txt to trans fif
test reading and writing of trans files
test the coordinate transformation from ras to neuromag
convert using old function
convert using old function
test conversion between sphere and cartesian
transform polar coordinates to cartesian
test helper transform function from polar to cartesian
convert using old function
test topo to sphere conversion
test conversion between rotation angles and transformation matrix
test rotation3d align z axis
test combining transforms
test quaternion calculations
test basic rotation matrix math
test sos filtfilt replacement
test spherical harmonic functions
get data
test hierarchical access
test movement averaging algorithm
test epochs rejection
test epochs decimation
test base epochs class
test savgol filtering
test epoch hashing
test event order
test epochs initialization with bad baseline parameters
test combining event ids in epochs compared to events
test epoch selection via multiple partial keys
test epochs when events are at the beginning or the end of the file
test epochs from raw files with io as fif file
test handling projection apply proj in raw or in epochs
test arithmetic of evoked data
test io of evoked data made from epochs
test calculation and read write of standard error
test of epochs rejection
test preload of epochs
test of indexing and slicing operations
test of average obtained vs c code
test of crop of epochs
test of resample of epochs
test detrending of epochs
test of bootstrapping of epochs
test copy epochs
test the iterator for epochs evoked
test subtraction of evoked from epochs
test epoch count equalization and condition combining
test accessing epochs by event name and on missing for rare events
test epochs pandas exporter
test ssp proj methods from projmixin class
test delayed projection on epochs
test dropping of epochs
test that subselecting epochs or making less epochs is equivalent
test membership api
test channelsdropping functionality
test channelpicking functionality
test equalization of channels
test handling of invalid events ids
test adding channels
test creating epochs from array
test concatenate epochs
test epoch splitting reappending channel types
test the compatibility of the epoch object with seeg and ecog data
test default event id tmax tmin values are working correctly
check line endings for a directory
test line endings of mnepython
test coreg coregister fiducials
test creating fsaverage and scaling it
test fit matched points fitting two matching sets of points
test fit point cloud fitting a set of points to a point cloud
test mutable default
test dealing with bad projection application
helper to count warnings
test sensitivity map computation
test ssp computation on epochs
test ssp computation on raw
test eeg average reference projection
test checking whether an eeg average reference exists
test checking whether a recording needs an eeg average reference
compute a label from the nonzero sources in an stc object dcnl parameters dcnl stc sourceestimate dcnl the source estimates dcnl src sourcespaces | str | none dcnl the source space over which the source estimates are defined dcnl if it s a string it should the subject name e g fsaverage dcnl can be none if stc subject is not none dcnl smooth int dcnl number of smoothing iterations dcnl subjects dir str | none dcnl path to subjects dir if it is not set in the environment dcnl returns dcnl labels list of labels | list of list of labels dcnl the generated labels if connected is false it returns dcnl a list of labels one per hemisphere if no label is available dcnl in a hemisphere none is returned if connected is true dcnl it returns for each hemisphere a list of connected labels dcnl ordered in decreasing order depending of the maximum value in the stc dcnl if no label is available in an hemisphere an empty list is returned
test label copying
test label subject name extraction
test label addition
test label in src
test io for label + stc files
test io of label files
make sure two sets of labels are equal
test i o from and to annot files
test reading labels from freesurfer parcellation
test reading labels from parc by comparing with mne annot2labels
test writing freesurfer parcellation from labels
test splitting labels
test stc to label
test intersubject label morphing
test generation of circular source labels
test label sign flip computation
test computing the center of mass of a label
test decorator for buggy mkl issues
test infoshowing utility
test getting a call line
test object size estimation
test get inst data
test misc utilities
test mayavi version check
test run tests if main functionality
test dictionary hashing and comparison functions
test md5sum calculation
test tempdir
test rank estimation
test logging to file
test mnepython config file support
test show fiff
test deprecated function
helper to test url retrieval
test file downloading over http
test file downloading over ftp
test optimized sum of squares
test sizeof fmt
test url to local path
test checking type integrity checks of picks
test anscombe s quartett
test checking the create of time create slices
test safe time masking
test random permutation function
test decorator for copying docstrings
test decorator for reusing function docstring as method docstrings
test doc launching
test reading of selections
test mgz header reading
test adding patch info to source space
test adding distances to source space with a dist limit
test adding distances to source space
test setting up and reading writing discrete source spaces
test setting up volume source spaces
test setting up other volume source spaces
test efficient vertex neighboring triangles for surfaces
test efficient normal accumulation for surfaces
test setting up ico oct and all source spaces
test reading of source space meshes
test reading and writing of source spaces
test conversion of vertices to mni coordinates
test equivalence of vert to mni for nibabel and freesurfer
test reading volume label names
test generating a source space from volume label
test reading volumes from a mixed source space
test combining source spaces
test morphing of source spaces
test returning a morphed source space to the original subject
read channel selection from file dcnl by default the selections used in mne browse raw are supported dcnl additional selections can be added by specifying a selection file e g dcnl produced using mne browse raw using the fname parameter dcnl the name parameter can be a string or a list of string the returned dcnl selection will be the combination of all selections in the file where dcnl at least one element in name is a substring of the selection name in dcnl the file for example name temporal rightfrontal will produce dcnl a combination of lefttemporal righttemporal and dcnl rightfrontal dcnl the included selections are dcnl vertex dcnl lefttemporal dcnl righttemporal dcnl leftparietal dcnl rightparietal dcnl leftoccipital dcnl rightoccipital dcnl leftfrontal dcnl rightfrontal dcnl parameters dcnl name str or list of str dcnl name of the selection if is a list the selections are combined dcnl fname str dcnl filename of the selection file if none builtin selections are used dcnl info instance of info dcnl measurement info file which will be used to determine the spacing dcnl of channel names to return e g meg 0111 for old neuromag dcnl systems and meg0111 for new ones dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl sel list of string dcnl list with channel names in the selection
divide channels to regions by positions
make a separation between left and right lobe evenly
warn about a bug
apply neuromag maxfilter to raw data dcnl needs maxfilter license maxfilter has to be in path dcnl parameters dcnl in fname string dcnl input file name dcnl out fname string dcnl output file name dcnl origin arraylike or string dcnl head origin in mm if none it will be estimated from headshape points dcnl frame string device or head dcnl coordinate frame for head center dcnl bad string list or none dcnl list of static bad channels can be a list with channel names or a dcnl string with channels names or logical channel numbers dcnl autobad string on off n dcnl sets automated bad channel detection on or off dcnl skip string or a list of floattuples or none dcnl skips raw data sequences time intervals pairs in sec dcnl e g 0 30 120 150 dcnl force bool dcnl ignore program warnings dcnl st bool dcnl apply the timedomain maxst extension dcnl st buflen float dcnl maxst buffer length in sec disabled if st is false dcnl st corr float dcnl maxst subspace correlation limit disabled if st is false dcnl mv trans string filename or default or none dcnl transforms the data into the coil definitions of in fname or into the dcnl default frame none don t use option dcnl mv comp bool or inter dcnl estimates and compensates head movements in continuous raw data dcnl mv headpos bool dcnl estimates and stores head position parameters but does not compensate dcnl movements disabled if mv comp is false dcnl mv hp string or none dcnl stores head position data in an ascii file dcnl disabled if mv comp is false dcnl mv hpistep float or none dcnl sets head position update interval in ms disabled if mv comp is false dcnl mv hpisubt string amp base off or none dcnl subtracts hpi signals sine amplitudes amp + baseline or switch off dcnl disabled if mv comp is false dcnl mv hpicons bool dcnl check initial consistency isotrak vs hpifit dcnl disabled if mv comp is false dcnl linefreq int 50 60 or none dcnl sets the basic line interference frequency 50 or 60 hz dcnl none do not use line filter dcnl cal string dcnl path to calibration file dcnl ctc string dcnl path to crosstalk compensation file dcnl mx args string dcnl additional command line arguments to pass to maxfilter dcnl overwrite bool dcnl overwrite output file if it already exists dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl origin string dcnl head origin in selected coordinate frame
return window which has length as much as parameter start end
modify original data by using parameter data
eliminate stimulation s artifacts from instance dcnl note this function operates inplace consider passing dcnl inst copy if this is not desired dcnl parameters dcnl inst instance of raw or epochs or evoked dcnl the data dcnl events array shape n events 3 dcnl the list of events required only when inst is raw dcnl event id int dcnl the id of the events generating the stimulation artifacts dcnl if none read all events required only when inst is raw dcnl tmin float dcnl start time of the interpolation window in seconds dcnl tmax float dcnl end time of the interpolation window in seconds dcnl mode linear | window dcnl way to fill the artifacted time interval dcnl linear does linear interpolation dcnl window applies a 1 hanning window dcnl stim channel str | none dcnl stim channel to use dcnl returns dcnl inst instance of raw or evoked or epochs dcnl instance with modified data
test the peak detection method
test recovery of full data when no source is rejected
test recovery ica rank reduction
test ica resetting
test ica on raw and epochs
test additional ica functionality
test run ica function
test ica data raw buffer rejection
test running ica twice
test fit params for ica
test exception when unsupported channels are used
test that eog channel is included when performing ica
test max pca components none
test n components none
test n components and max pca components none
test find ecg peaks
test computation of ecg ssp projectors
test computation of eog ssp projectors
test computation of exg projectors using parallelization
generate ground truth and testing data
test basic ctps functionality
test round trip reading writing of fine calibration dat file
test fix stim artifact
generate data
test eeglab vs mne python infomax code
centers and norms x in place dcnl parameters dcnl x ndarray dcnl array with an axis of observations statistical units measured on dcnl random variables dcnl axis int optional dcnl axis along which the mean and variance are calculated
test the infomax algorithm blowup condition
test the infomax algorithm on very simple data
test the infomax algorithm when user provides an initial weights matrix
test nonsquare infomax
test find eog peaks
get data
test init of xdawn
test xdawn fit
test xdawn apply and transform
test xdawn with regularization
test xdawntransformer
check the dof
read and crop
test movement compensation
test maxwell filtering on kit bti and ctf files
test spherical harmonic conversions
test multipolar moment basis calculation using sensor information
test maxwell filter basic version
test processing of maxwell filtered data
test maxwell filter reconstruction of bad channels
test maxwell filter tsss spatiotemporal processing
test tsssonly processing
test maxwell filter fine calibration
test maxwell filter regularization
helper to check regularization
test maxwell filter crosstalk cancellation
test maxwell filter head translation
helper to assert a minimum shielding factor using emptyroom power
test maxwell filter shielding factor using empty room
test maxwell filter using all options
test triux system support
aux function dcnl use this function when preparing rejection parameters dcnl instead of directly deleting keys
compute ssp pca projections for ecg or eog artifacts dcnl note raw data must be preloaded dcnl parameters dcnl mode string ecg or eog dcnl what type of events to detect dcnl raw mne io raw dcnl raw input file dcnl raw event mne io raw or none dcnl raw file to use for event detection if none raw is used dcnl tmin float dcnl time before event in seconds dcnl tmax float dcnl time after event in seconds dcnl n grad int dcnl number of ssp vectors for gradiometers dcnl n mag int dcnl number of ssp vectors for magnetometers dcnl n eeg int dcnl number of ssp vectors for eeg dcnl l freq float | none dcnl filter low cutoff frequency in hz dcnl h freq float | none dcnl filter high cutoff frequency in hz dcnl average bool dcnl compute ssp after averaging dcnl filter length str | int | none dcnl number of taps to use for filtering dcnl n jobs int dcnl number of jobs to run in parallel dcnl ch name string or none dcnl channel to use for ecg event detection dcnl reject dict | none dcnl epoch rejection configuration see epochs dcnl flat dict | none dcnl epoch flat configuration see epochs dcnl bads list dcnl list with additional bad channels dcnl avg ref bool dcnl add eeg average reference proj dcnl no proj bool dcnl exclude the ssp projectors currently in the fiff file dcnl event id int dcnl id to use for events dcnl exg l freq float dcnl low pass frequency applied for filtering exg channel dcnl exg h freq float dcnl high pass frequency applied for filtering exg channel dcnl tstart float dcnl start artifact detection after tstart seconds dcnl qrs threshold float | str dcnl between 0 and 1 qrs detection threshold can also be auto to dcnl automatically choose the threshold that generates a reasonable dcnl number of heartbeats 40160 beats min only for ecg dcnl filter method str dcnl method for filtering iir or fft dcnl iir params dict | none dcnl dictionary of parameters to use for iir filtering dcnl see mne filter construct iir filter for details if iir params dcnl is none and method iir 4th order butterworth will be used dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl proj list dcnl computed ssp projectors dcnl events ndarray dcnl detected events
compute ssp pca projections for ecg artifacts dcnl note raw data must be preloaded dcnl parameters dcnl raw mne io raw dcnl raw input file dcnl raw event mne io raw or none dcnl raw file to use for event detection if none raw is used dcnl tmin float dcnl time before event in seconds dcnl tmax float dcnl time after event in seconds dcnl n grad int dcnl number of ssp vectors for gradiometers dcnl n mag int dcnl number of ssp vectors for magnetometers dcnl n eeg int dcnl number of ssp vectors for eeg dcnl l freq float | none dcnl filter low cutoff frequency in hz dcnl h freq float | none dcnl filter high cutoff frequency in hz dcnl average bool dcnl compute ssp after averaging dcnl filter length str | int | none dcnl number of taps to use for filtering dcnl n jobs int dcnl number of jobs to run in parallel dcnl ch name string or none dcnl channel to use for ecg detection required if no ecg found dcnl reject dict | none dcnl epoch rejection configuration see epochs dcnl flat dict | none dcnl epoch flat configuration see epochs dcnl bads list dcnl list with additional bad channels dcnl avg ref bool dcnl add eeg average reference proj dcnl no proj bool dcnl exclude the ssp projectors currently in the fiff file dcnl event id int dcnl id to use for events dcnl ecg l freq float dcnl low pass frequency applied for filtering ecg channel dcnl ecg h freq float dcnl high pass frequency applied for filtering ecg channel dcnl tstart float dcnl start artifact detection after tstart seconds dcnl qrs threshold float | str dcnl between 0 and 1 qrs detection threshold can also be auto to dcnl automatically choose the threshold that generates a reasonable dcnl number of heartbeats 40160 beats min dcnl filter method str dcnl method for filtering iir or fft dcnl iir params dict | none dcnl dictionary of parameters to use for iir filtering dcnl see mne filter construct iir filter for details if iir params dcnl is none and method iir 4th order butterworth will be used dcnl copy bool dcnl if false filtering raw data is done in place defaults to true dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl proj list dcnl computed ssp projectors dcnl ecg events ndarray dcnl detected ecg events
compute ssp pca projections for eog artifacts dcnl note raw data must be preloaded dcnl parameters dcnl raw mne io raw dcnl raw input file dcnl raw event mne io raw or none dcnl raw file to use for event detection if none raw is used dcnl tmin float dcnl time before event in seconds dcnl tmax float dcnl time after event in seconds dcnl n grad int dcnl number of ssp vectors for gradiometers dcnl n mag int dcnl number of ssp vectors for magnetometers dcnl n eeg int dcnl number of ssp vectors for eeg dcnl l freq float | none dcnl filter low cutoff frequency in hz dcnl h freq float | none dcnl filter high cutoff frequency in hz dcnl average bool dcnl compute ssp after averaging dcnl filter length str | int | none dcnl number of taps to use for filtering dcnl n jobs int dcnl number of jobs to run in parallel dcnl reject dict | none dcnl epoch rejection configuration see epochs dcnl flat dict | none dcnl epoch flat configuration see epochs dcnl bads list dcnl list with additional bad channels dcnl avg ref bool dcnl add eeg average reference proj dcnl no proj bool dcnl exclude the ssp projectors currently in the fiff file dcnl event id int dcnl id to use for events dcnl eog l freq float dcnl low pass frequency applied for filtering e0g channel dcnl eog h freq float dcnl high pass frequency applied for filtering e0g channel dcnl tstart float dcnl start artifact detection after tstart seconds dcnl filter method str dcnl method for filtering iir or fft dcnl iir params dict | none dcnl dictionary of parameters to use for iir filtering dcnl see mne filter construct iir filter for details if iir params dcnl is none and method iir 4th order butterworth will be used dcnl ch name str | none dcnl if not none specify eog channel name dcnl copy bool dcnl if false filtering raw data is done in place defaults to true dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl proj list dcnl computed ssp projectors dcnl eog events ndarray dcnl detected eog events
reconstruct pseudo continuous signal from epochs
least square estimation of evoked response from epochs data dcnl parameters dcnl epochs data array shape n channels n times dcnl the epochs data to estimate evoked dcnl events array shape n events 3 dcnl the events typically returned by the read events function dcnl if some events don t match the events of interest as specified dcnl by event id they will be ignored dcnl tmin float dcnl start time before event dcnl sfreq float dcnl sampling frequency dcnl returns dcnl evokeds array shape n class n components n times dcnl an concatenated array of evoked data for each event type dcnl toeplitz array shape n class n components n channels dcnl an concatenated array of toeplitz matrix for each event type
fit filters and coefs using xdawn algorithm dcnl xdawn is a spatial filtering method designed to improve the signal dcnl to signal + noise ratio ssnr of the event related responses xdawn was dcnl originally designed for p300 evoked potential by enhancing the target dcnl response with respect to the nontarget response this implementation is a dcnl generalization to any type of event related response dcnl parameters dcnl epochs data array shape n epochs n channels n times dcnl the epochs data dcnl y array shape n epochs dcnl the epochs class dcnl n components int default 2 dcnl the number of components to decompose the signals signals dcnl reg float | str | none default none dcnl if not none allow regularization for covariance estimation dcnl if float shrinkage covariance is used 0 < shrinkage < 1 dcnl if str optimal shrinkage using ledoitwolf shrinkage ledoit wolf dcnl or oracle approximating shrinkage oas dcnl signal cov none | covariance | array shape n channels n channels dcnl the signal covariance used for whitening of the data dcnl if none the covariance is estimated from the epochs signal dcnl events array shape n epochs 3 dcnl the epochs events used to correct for epochs overlap dcnl tmin float dcnl epochs starting time only used if events is passed to correct for dcnl epochs overlap dcnl sfreq float dcnl sampling frequency only used if events is passed to correct for dcnl epochs overlap dcnl returns dcnl filters array shape n channels n channels dcnl the xdawn components used to decompose the data for each event type dcnl patterns array shape n channels n channels dcnl the xdawn patterns used to restore the signals for each event type dcnl evokeds array shape n class n components n times dcnl the independent evoked responses per condition
run extended infomax ica decomposition on raw data dcnl parameters dcnl data np ndarray shape n samples n features dcnl the whitened data to unmix dcnl weights np ndarray shape n features n features dcnl the initialized unmixing matrix dcnl defaults to none which means the identity matrix is used dcnl l rate float dcnl this quantity indicates the relative size of the change in weights dcnl defaults to 0 01 log n features 2 dcnl note smaller learning rates will slow down the ica procedure dcnl block int dcnl the block size of randomly chosen data segments dcnl defaults to floor sqrt n times 3 dcnl w change float dcnl the change at which to stop iteration defaults to 1e12 dcnl anneal deg float dcnl the angle in degrees at which the learning rate will be reduced dcnl defaults to 60 0 dcnl anneal step float dcnl the factor by which the learning rate will be reduced once dcnl anneal deg is exceeded l rate anneal step dcnl defaults to 0 9 dcnl extended bool dcnl whether to use the extended infomax algorithm or not dcnl defaults to true dcnl n subgauss int dcnl the number of subgaussian components only considered for extended dcnl infomax defaults to 1 dcnl kurt size int dcnl the window size for kurtosis estimation only considered for extended dcnl infomax defaults to 6000 dcnl ext blocks int dcnl only considered for extended infomax if positive denotes the number dcnl of blocks after which to recompute the kurtosis which is used to dcnl estimate the signs of the sources in this case the number of dcnl subgaussian sources is automatically determined dcnl if negative the number of subgaussian sources to be used is fixed dcnl and equal to n subgauss in this case the kurtosis is not estimated dcnl defaults to 1 dcnl max iter int dcnl the maximum number of iterations defaults to 200 dcnl random state int | np random randomstate dcnl if random state is an int use random state to seed the random number dcnl generator if random state is already a np random randomstate instance dcnl use random state as random number generator dcnl blowup float dcnl the maximum difference allowed between two successive estimations of dcnl the unmixing matrix defaults to 10000 dcnl blowup fac float dcnl the factor by which the learning rate will be reduced if the difference dcnl between two successive estimations of the unmixing matrix exceededs dcnl blowup l rate blowup fac defaults to 0 5 dcnl n small angle int | none dcnl the maximum number of allowed steps in which the angle between two dcnl successive estimations of the unmixing matrix is less than dcnl anneal deg if none this parameter is not taken into account to dcnl stop the iterations defaults to 20 dcnl use bias bool dcnl this quantity indicates if the bias should be computed dcnl defaults to true dcnl verbose bool str int or none dcnl if not none override default verbosity level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl unmixing matrix np ndarray shape n features n features dcnl the linear unmixing operator dcnl references dcnl 1 a j bell t j sejnowski an informationmaximization approach to dcnl blind separation and blind deconvolution neural computation 7 6 dcnl 11291159 1995 dcnl 2 t w lee m girolami t j sejnowski independent component dcnl analysis using an extended infomax algorithm for mixed subgaussian dcnl and supergaussian sources neural computation 11 2 417441 1999
locate eog artifacts dcnl parameters dcnl raw instance of raw dcnl the raw data dcnl event id int dcnl the index to assign to found events dcnl l freq float dcnl low cutoff frequency in hz dcnl h freq float dcnl high cutoff frequency in hz dcnl filter length str | int | none dcnl number of taps to use for filtering dcnl ch name str | none dcnl if not none use specified channel s for eog dcnl tstart float dcnl start detection after tstart seconds dcnl reject by annotation bool dcnl whether to omit data that is annotated as bad dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl eog events array dcnl events
find eog events
get eog channel index
conveniently generate epochs around eog artifact events dcnl parameters dcnl raw instance of raw dcnl the raw data dcnl ch name str dcnl the name of the channel to use for eog peak detection dcnl the argument is mandatory if the dataset contains no eog channels dcnl event id int dcnl the index to assign to found events dcnl picks arraylike of int | none default dcnl indices of channels to include if none all channels dcnl are used dcnl tmin float dcnl start time before event dcnl tmax float dcnl end time after event dcnl l freq float dcnl low pass frequency dcnl h freq float dcnl high pass frequency dcnl reject dict | none dcnl rejection parameters based on peaktopeak amplitude dcnl valid keys are grad | mag | eeg | eog | ecg dcnl if reject is none then no rejection is done example dcnl reject dict grad 4000e13 t m gradiometers dcnl mag 4e12 t magnetometers dcnl eeg 40e6 v eeg channels dcnl eog 250e6 v eog channels dcnl flat dict | none dcnl rejection parameters based on flatness of signal dcnl valid keys are grad | mag | eeg | eog | ecg and values dcnl are floats that set the minimum acceptable peaktopeak amplitude dcnl if flat is none then no rejection is done dcnl baseline tuple or list of length 2 or none dcnl the time interval to apply rescaling baseline correction dcnl if none do not apply it if baseline is a b dcnl the interval is between a s and b s dcnl if a is none the beginning of the data is used dcnl and if b is none then b is set to the end of the interval dcnl if baseline is equal ot none none all the time dcnl interval is used if none no correction is applied dcnl preload bool dcnl preload epochs or not dcnl reject by annotation bool dcnl whether to reject based on annotations if true default segments dcnl whose description begins with bad are not used for finding dcnl artifacts and epochs overlapping with them are rejected if false no dcnl rejection based on annotations is performed dcnl versionadded 0 14 0 dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl eog epochs instance of epochs dcnl data epoched around eog events
compute normalized phase angles dcnl parameters dcnl data ndarray shape n epochs n sources n times dcnl the data to compute the phase angles for dcnl returns dcnl phase angles ndarray shape n epochs n sources n times dcnl the normalized phase angles
compute crosstrialphasestatistics 1 dcnl note it is assumed that the sources are already dcnl appropriately filtered dcnl parameters dcnl data ndarray shape n epochs n channels n times dcnl any kind of data of dimensions trials traces features dcnl is raw bool dcnl if true it is assumed that data haven t been transformed to hilbert dcnl space and phase angles haven t been normalized defaults to true dcnl returns dcnl ks dynamics ndarray shape n sources n times dcnl the kuiper statistics dcnl pk dynamics ndarray shape n sources n times dcnl the normalized kuiper index for ica sources and dcnl time slices dcnl phase angles ndarray shape n epochs n sources n times | none dcnl the phase values for epochs sources and time slices if is raw dcnl is false none is returned dcnl references dcnl 1 dammers j schiek m boers f silex c zvyagintsev dcnl m pietrzyk u mathiak k 2008 integration of amplitude dcnl and phase statistics for complete artifact removal in independent dcnl components of neuromagnetic recordings biomedical dcnl engineering ieee transactions on 55 10 23532362
kuiper s test of uniform distribution dcnl parameters dcnl data ndarray shape n sources | n sources n times dcnl empirical distribution dcnl dtype str | obj dcnl the data type to be used dcnl returns dcnl ks ndarray dcnl kuiper s statistic dcnl pk ndarray dcnl normalized probability of kuiper s statistic 0 1
test for statistical significance against uniform distribution dcnl parameters dcnl d float dcnl the kuiper distance value dcnl n eff int dcnl the effective number of elements dcnl dtype str | obj dcnl the data type to be used defaults to double precision floats dcnl returns dcnl pk norm float dcnl the normalized kuiper value such that 0 < pk norm < 1 dcnl references dcnl 1 stephens ma 1970 journal of the royal statistical society ser b dcnl vol 32 pp 115122 dcnl 2 kuiper nh 1962 proceedings of the koninklijke nederlands akademie dcnl van wetenschappen ser vol 63 pp 3847
aux function
get the score functions
check for channels in picks that are not considered valid channels dcnl accepted channels are the data channels dcnl seeg ecog eeg hbo hbr mag and grad and eog dcnl this prevents the program from crashing without dcnl feedback when a bad channel is provided to ica whitening
aux function
find ecg peaks from one selected ica source dcnl parameters dcnl raw instance of raw dcnl raw object to draw sources from dcnl ecg source ndarray dcnl ica source resembling ecg to find peaks from dcnl event id int dcnl the index to assign to found events dcnl tstart float dcnl start detection after tstart seconds useful when beginning dcnl of run is noisy dcnl l freq float dcnl low pass frequency dcnl h freq float dcnl high pass frequency dcnl qrs threshold float | str dcnl between 0 and 1 qrs detection threshold can also be auto to dcnl automatically choose the threshold that generates a reasonable dcnl number of heartbeats 40160 beats min dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl ecg events array dcnl events dcnl ch ecg string dcnl name of channel used dcnl average pulse float dcnl estimated average pulse
locate eog artifacts from one selected ica source dcnl parameters dcnl raw instance of raw dcnl the raw data dcnl eog source ndarray dcnl ica source resembling eog to find peaks from dcnl event id int dcnl the index to assign to found events dcnl l freq float dcnl low cutoff frequency in hz dcnl h freq float dcnl high cutoff frequency in hz dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl eog events array dcnl events
aux function
aux function
check variance accounted for by each component in supplied data dcnl parameters dcnl ica ica dcnl instance of mne preprocessing ica dcnl inst raw | epochs | evoked dcnl data to explain with ica instance of raw epochs or evoked dcnl normalize bool dcnl whether to normalize the variance dcnl returns dcnl var array dcnl variance explained by each component
change the order of components in ica solution
aux function
aux function
write an ica object dcnl parameters dcnl fid file dcnl the file descriptor dcnl ica dcnl the instance of ica to write
restore ica solution from fif file dcnl parameters dcnl fname str dcnl absolute path to fif file containing ica matrices dcnl the file name should end with ica fif or ica fif gz dcnl returns dcnl ica instance of ica dcnl the ica estimator
aux function
run ica decomposition on raw data and identify artifact sources dcnl this function implements an automated artifact removal work flow dcnl hints and caveats dcnl it is highly recommended to bandpass filter ecg and eog dcnl data and pass them instead of the channel names as ecg ch and eog ch dcnl arguments dcnl please check your results detection by kurtosis and variance dcnl can be powerful but misclassification of brain signals as dcnl noise cannot be precluded if you are not sure set those to none dcnl consider using shorter times for start find and stop find than dcnl for start and stop it can save you much time dcnl example invocation taking advantage of defaults dcnl ica run ica raw n components 9 start find 10000 stop find 12000 dcnl ecg ch meg 1531 eog ch eog 061 dcnl parameters dcnl raw instance of raw dcnl the raw data to decompose dcnl n components int | float | none dcnl the number of components used for ica decomposition if int it must be dcnl smaller then max pca components if none all pca components will be dcnl used if float between 0 and 1 components can will be selected by the dcnl cumulative percentage of explained variance dcnl max pca components int | none dcnl the number of components used for pca decomposition if none no dcnl dimension reduction will be applied and max pca components will equal dcnl the number of channels supplied on decomposing data dcnl n pca components dcnl the number of pca components used after ica recomposition the ensuing dcnl attribute allows to balance noise reduction against potential loss of dcnl features due to dimensionality reduction if greater than dcnl self n components the next n pca components minus dcnl n components pca components will be added before restoring the dcnl sensor space data the attribute gets updated each time the according dcnl parameter for in pick sources raw or pick sources epochs is changed dcnl noise cov none | instance of mne cov covariance dcnl noise covariance used for whitening if none channels are just dcnl zscored dcnl random state none | int | instance of np random randomstate dcnl np random randomstate to initialize the fastica estimation dcnl as the estimation is nondeterministic it can be useful to dcnl fix the seed to have reproducible results dcnl picks arraylike of int dcnl channels to be included this selection remains throughout the dcnl initialized ica solution if none only good data channels are used dcnl start int | float | none dcnl first sample to include for decomposition if float data will be dcnl interpreted as time in seconds if none data will be used from the dcnl first sample dcnl stop int | float | none dcnl last sample to not include for decomposition if float data will be dcnl interpreted as time in seconds if none data will be used to the dcnl last sample dcnl start find int | float | none dcnl first sample to include for artifact search if float data will be dcnl interpreted as time in seconds if none data will be used from the dcnl first sample dcnl stop find int | float | none dcnl last sample to not include for artifact search if float data will be dcnl interpreted as time in seconds if none data will be used to the last dcnl sample dcnl ecg ch str | ndarray | none dcnl the target argument passed to ica find sources raw either the dcnl name of the ecg channel or the ecg time series if none this step dcnl will be skipped dcnl ecg score func str | callable dcnl the score func argument passed to ica find sources raw either dcnl the name of function supported by ica or a custom function dcnl ecg criterion float | int | listlike | slice dcnl the indices of the sorted skewness scores if float sources with dcnl scores smaller than the criterion will be dropped else the scores dcnl sorted in descending order will be indexed accordingly dcnl e g range 2 would return the two sources with the highest score dcnl if none this step will be skipped dcnl eog ch list | str | ndarray | none dcnl the target argument or the list of target arguments subsequently dcnl passed to ica find sources raw either the name of the vertical eog dcnl channel or the corresponding eog time series if none this step dcnl will be skipped dcnl eog score func str | callable dcnl the score func argument passed to ica find sources raw either dcnl the name of function supported by ica or a custom function dcnl eog criterion float | int | listlike | slice dcnl the indices of the sorted skewness scores if float sources with dcnl scores smaller than the criterion will be dropped else the scores dcnl sorted in descending order will be indexed accordingly dcnl e g range 2 would return the two sources with the highest score dcnl if none this step will be skipped dcnl skew criterion float | int | listlike | slice dcnl the indices of the sorted skewness scores if float sources with dcnl scores smaller than the criterion will be dropped else the scores dcnl sorted in descending order will be indexed accordingly dcnl e g range 2 would return the two sources with the highest score dcnl if none this step will be skipped dcnl kurt criterion float | int | listlike | slice dcnl the indices of the sorted skewness scores if float sources with dcnl scores smaller than the criterion will be dropped else the scores dcnl sorted in descending order will be indexed accordingly dcnl e g range 2 would return the two sources with the highest score dcnl if none this step will be skipped dcnl var criterion float | int | listlike | slice dcnl the indices of the sorted skewness scores if float sources with dcnl scores smaller than the criterion will be dropped else the scores dcnl sorted in descending order will be indexed accordingly dcnl e g range 2 would return the two sources with the highest score dcnl if none this step will be skipped dcnl add nodes list of ica nodes dcnl additional list if tuples carrying the following parameters dcnl name str target str | array score func callable dcnl criterion float | int | listlike | slice this parameter is a dcnl generalization of the artifact specific parameters above and has dcnl the same structure example dcnl add nodes ecg phase lock ecg 01 my phase lock function 0 5 dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl ica instance of ica dcnl the ica object with detected artifact sources marked for exclusion
optionally bandpass filter the data
compute correlations between template and target components
customize ica plot components for corrmap
find similar independent components across subjects by map similarity dcnl corrmap viola et al 2009 clin neurophysiol identifies the best group dcnl match to a supplied template typically feed it a list of fitted icas and dcnl a template ic for example the blink for the first subject to identify dcnl specific ics across subjects dcnl the specific procedure consists of two iterations in a first step the dcnl maps best correlating with the template are identified in the next step dcnl the analysis is repeated with the mean of the maps identified in the first dcnl stage dcnl run with plot and show set to true and label false to find dcnl good parameters then run with labelling enabled to apply the dcnl labelling in the ic objects running with both plot and labels dcnl off does nothing dcnl outputs a list of fitted icas with the indices of the marked ics in a dcnl specified field dcnl the original corrmap website www debener de corrmap corrmapplugin1 html dcnl parameters dcnl icas list of mne preprocessing ica dcnl a list of fitted ica objects dcnl template tuple | np ndarray shape n components dcnl either a tuple with two elements int int representing the list dcnl indices of the set from which the template should be chosen and the dcnl template e g if template 1 0 the first ic of the 2nd ica object dcnl is used dcnl or a numpy array whose size corresponds to each ic map from the dcnl supplied maps in which case this map is chosen as the template dcnl threshold auto | list of float | float dcnl correlation threshold for identifying ics dcnl if auto search for the best map by trying all correlations between dcnl 0 6 and 0 95 in the original proposal lower values are considered dcnl but this is not yet implemented dcnl if list of floats search for the best map in the specified range of dcnl correlation strengths as correlation values must be between 0 and 1 dcnl if float 0 select ics correlating better than this dcnl if float 1 use find outliers to identify ics within subjects not in dcnl original corrmap dcnl defaults to auto dcnl label none | str dcnl if not none categorised ics are stored in a dictionary labels dcnl under the given name preexisting entries will be appended to dcnl excluding repeats not overwritten if none a dry run is performed dcnl and the supplied ics are not changed dcnl ch type mag | grad | planar1 | planar2 | eeg dcnl the channel type to plot defaults to eeg dcnl plot bool dcnl should constructed template and selected maps be plotted defaults dcnl to true dcnl show bool dcnl show figures if true dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl outlines head | dict | none dcnl the outlines to be drawn if head a head scheme will be drawn if dcnl dict each key refers to a tuple of x and y positions the values in dcnl mask pos will serve as image mask if none nothing will be drawn dcnl defaults to head if dict the autoshrink bool field will dcnl trigger automated shrinking of the positions due to points outside the dcnl outline moreover a matplotlib patch object can be passed for dcnl advanced masking options either directly or as a function that returns dcnl patches required for multiaxis plots dcnl layout none | layout | list of layout dcnl layout instance specifying sensor positions does not need to be dcnl specified for neuromag data or a list of layout if projections dcnl are from different sensor types dcnl sensors bool | str dcnl add markers for sensor locations to the plot accepts matplotlib plot dcnl format string e g r+ for red plusses if true a circle will be dcnl used via add artist defaults to true dcnl contours int | array of float dcnl the number of contour lines to draw if 0 no contours will be drawn dcnl when an integer matplotlib ticker locator is used to find suitable dcnl values for the contour thresholds may sometimes be inaccurate use dcnl array for accuracy if an array the values represent the levels for dcnl the contours defaults to 6 dcnl cmap none | matplotlib colormap dcnl colormap for the plot if none defaults to reds r for norm data dcnl otherwise to rdbu r dcnl returns dcnl template fig fig dcnl figure showing the template dcnl labelled ics fig dcnl figure showing the labelled ics in all ica decompositions
read fine calibration information from a dat file dcnl the fine calibration typically includes improved sensor locations dcnl calibration coefficients and gradiometer imbalance information dcnl parameters dcnl fname str dcnl the filename dcnl returns dcnl calibration dict dcnl fine calibration information
write fine calibration information to a dat file dcnl parameters dcnl fname str dcnl the filename to write out dcnl calibration dict dcnl fine calibration information
find outliers based on iterated zscoring dcnl this procedure compares the absolute zscore against the threshold dcnl after excluding local outliers the comparison is repeated until no dcnl local outlier is present any more dcnl parameters dcnl x np ndarray of float shape n elemenets dcnl the scores for which to find outliers dcnl threshold float dcnl the value above which a feature is classified as outlier dcnl max iter int dcnl the maximum number of iterations dcnl returns dcnl bad idx np ndarray of int shape n features dcnl the outlier indices
detect qrs component in ecg channels dcnl qrs is the main wave on the heart beat dcnl parameters dcnl sfreq float dcnl sampling rate dcnl ecg array dcnl ecg signal dcnl thresh value float | str dcnl qrs detection threshold can also be auto for automatic dcnl selection of threshold dcnl levels float dcnl number of std from mean to include for detection dcnl n thresh int dcnl max number of crossings dcnl l freq float dcnl low pass frequency dcnl h freq float dcnl high pass frequency dcnl tstart float dcnl start detection after tstart seconds dcnl filter length str | int | none dcnl number of taps to use for filtering dcnl returns dcnl events array dcnl indices of ecg peaks
find ecg peaks dcnl parameters dcnl raw instance of raw dcnl the raw data dcnl event id int dcnl the index to assign to found events dcnl ch name none | str dcnl the name of the channel to use for ecg peak detection dcnl if none default a synthetic ecg channel is created from dcnl cross channel average synthetic channel can only be created from dcnl meg channels dcnl tstart float dcnl start detection after tstart seconds useful when beginning dcnl of run is noisy dcnl l freq float dcnl low pass frequency dcnl h freq float dcnl high pass frequency dcnl qrs threshold float | str dcnl between 0 and 1 qrs detection threshold can also be auto to dcnl automatically choose the threshold that generates a reasonable dcnl number of heartbeats 40160 beats min dcnl filter length str | int | none dcnl number of taps to use for filtering dcnl return ecg bool dcnl return ecg channel if synthesized defaults to false if true and dcnl and ecg exists this will yield none dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl ecg events array dcnl events dcnl ch ecg string dcnl name of channel used dcnl average pulse float dcnl estimated average pulse
get ecg channel index if no channel found returns none
conveniently generate epochs around ecg artifact events dcnl parameters dcnl raw instance of raw dcnl the raw data dcnl ch name none | str dcnl the name of the channel to use for ecg peak detection dcnl if none default ecg channel is used if present if none and no dcnl ecg channel is present a synthetic ecg channel is created from dcnl cross channel average synthetic channel can only be created from dcnl meg channels dcnl event id int dcnl the index to assign to found events dcnl picks arraylike of int | none default dcnl indices of channels to include if none all channels are used dcnl tmin float dcnl start time before event dcnl tmax float dcnl end time after event dcnl l freq float dcnl low pass frequency dcnl h freq float dcnl high pass frequency dcnl reject dict | none dcnl rejection parameters based on peaktopeak amplitude dcnl valid keys are grad | mag | eeg | eog | ecg dcnl if reject is none then no rejection is done example dcnl reject dict grad 4000e13 t m gradiometers dcnl mag 4e12 t magnetometers dcnl eeg 40e6 v eeg channels dcnl eog 250e6 v eog channels dcnl flat dict | none dcnl rejection parameters based on flatness of signal dcnl valid keys are grad | mag | eeg | eog | ecg and values dcnl are floats that set the minimum acceptable peaktopeak amplitude dcnl if flat is none then no rejection is done dcnl baseline tuple | list of length 2 | none dcnl the time interval to apply rescaling baseline correction dcnl if none do not apply it if baseline is a b dcnl the interval is between a s and b s dcnl if a is none the beginning of the data is used dcnl and if b is none then b is set to the end of the interval dcnl if baseline is equal to none none all the time dcnl interval is used if none no correction is applied dcnl preload bool dcnl preload epochs or not dcnl keep ecg bool dcnl when ecg is synthetically created after picking should it be added dcnl to the epochs must be false when synthetic channel is not used dcnl defaults to false dcnl reject by annotation bool dcnl whether to reject based on annotations if true default epochs dcnl overlapping with segments whose description begins with bad are dcnl rejected if false no rejection based on annotations is performed dcnl versionadded 0 14 0 dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl ecg epochs instance of epochs dcnl data epoched around ecg rpeaks
create ecg signal from cross channel average
noisetolerant fast peakfinding algorithm dcnl parameters dcnl x0 1d array dcnl a real vector from the maxima will be found required dcnl thresh float dcnl the amount above surrounding data for a peak to be dcnl identified default max x0 min x0 4 larger values mean dcnl the algorithm is more selective in finding peaks dcnl extrema 1 1 dcnl 1 if maxima are desired 1 if minima are desired dcnl default maxima 1 dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl peak loc array dcnl the indices of the identified peaks in x0 dcnl peak mag array dcnl the magnitude of the identified peaks dcnl note dcnl if repeated values are found the first is identified as the peak dcnl conversion from initial matlab code from dcnl nathanael c yoder ncyoder purdue edu dcnl example dcnl t 0 0001 10 dcnl x 12 sin 10 2 pi t 3 sin 1 2 pi t +randn 1 numel t dcnl x 1250 1255 max x dcnl peak finder x
plot figure and create a binary image
magic scaling helper dcnl keeps fontsize and artist sizes constant dcnl 0 5 current font 4pt dcnl 2 0 current font + 4pt dcnl xxx it s unclear why this works but good to go for most cases
auxiliary function to iterate over views in trans fig
identify bad file naming patterns and highlight them in the toc
get fname without
assign class names to toc elements to allow toggling with buttons
parallel process in batch mode
build an image encoded in base64
iterate sagittal slices
iterate axial slices
iterate coronal slices
auxiliary function for parallel processing of mri slices
build a html image from a slice array
build an html slider for a given slices range and a slices klass
ensure valid scale value is passed
ensure fmt is valid
auxiliary function for recursive search of the directory
fix the global ids after reordering in render toc
read a fixed dipole fif file
read dip file from neuromag xfit or mne dcnl parameters dcnl fname str dcnl the name of the dip or fif file dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl dipole instance of dipole or dipolefixed dcnl the dipole dcnl see also dcnl dipole dcnl dipolefixed dcnl fit dipole
read a dipole text file
compute the forward solution and do other nice stuff
make a guess space inside a sphere or bem surface
calculate the residual sum of squares
calculate the goodness of fit from the forward svd
fit the dipole moment once the location is known
compute the residual
fit a single dipole to the given whitened projected data
surface fitting constraint
sphere fitting constraint
fit a single bit of data
fit a data using a fixed position
fit a dipole dcnl parameters dcnl evoked instance of evoked dcnl the dataset to fit dcnl cov str | instance of covariance dcnl the noise covariance dcnl bem str | instance of conductormodel dcnl the bem filename str or conductor model dcnl trans str | none dcnl the head< mri transform filename must be provided unless bem dcnl is a sphere model dcnl min dist float dcnl minimum distance in milimeters from the dipole to the inner skull dcnl must be positive note that because this is a constraint passed to dcnl a solver it is not strict but close i e for a min dist 5 the dcnl fits could be 4 9 mm from the inner skull dcnl n jobs int dcnl number of jobs to run in parallel used in field computation dcnl and fitting dcnl pos ndarray shape 3 | none dcnl position of the dipole to use if none default sequential dcnl fitting different position and orientation for each time instance dcnl is performed if a position in head coords is given as an array dcnl the position is fixed during fitting dcnl versionadded 0 12 dcnl ori ndarray shape 3 | none dcnl orientation of the dipole to use if none default the dcnl orientation is free to change as a function of time if an dcnl orientation in head coordinates is given as an array pos dcnl must also be provided and the routine computes the amplitude and dcnl goodness of fit of the dipole at the given position and orientation dcnl for each time instant dcnl versionadded 0 12 dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl dip instance of dipole or dipolefixed dcnl the dipole fits a class mne dipolefixed is returned if dcnl pos and ori are both not none otherwise a dcnl class mne dipole is returned dcnl residual ndarray shape n meeg channels n times dcnl the good meeg data channels with the fitted dipolar activity dcnl removed dcnl see also dcnl mne beamformer rap music dcnl dipole dcnl dipolefixed dcnl read dipole dcnl notes dcnl versionadded 0 9 0
get standard phantom dipole locations and orientations dcnl parameters dcnl kind str dcnl get the information for the given system dcnl vectorview default dcnl the neuromag vectorview phantom dcnl otaniemi dcnl the older neuromag phantom used at otaniemi dcnl returns dcnl pos ndarray shape n dipoles 3 dcnl the dipole positions dcnl ori ndarray shape n dipoles 3 dcnl the dipole orientations dcnl notes dcnl the elekta phantoms have a radius of 79 5mm and hpi coil locations dcnl in the xyplane at the axis extrema e g 79 5 0 0 79 5
concatenate a list of dipoles
blend two colors in hsv space dcnl parameters dcnl color 1 color 2 none | tuple dcnl rgba tuples with values between 0 and 1 none if no color is available dcnl if both colors are none the output is none if only one is none the dcnl output is the other color dcnl returns dcnl color none | tuple dcnl rgba tuple of the combined color saturation value and alpha are dcnl averaged whereas the new hue is determined as angle half way between dcnl the two input colors hues
create n colors in hsv space that occupy a gradient in value dcnl parameters dcnl color tuple dcnl rgba tuple with values between 0 and 1 dcnl n int 2 dcnl number of colors on the gradient dcnl returns dcnl colors tuple of tuples len n dcnl n rgba tuples that occupy a gradient in value low to high but share dcnl saturation and hue with the input color
produce a list of n unique rgba color tuples based on a colormap dcnl parameters dcnl n int dcnl number of colors dcnl bytes bool dcnl return colors as integers values between 0 and 255 instead of floats dcnl between 0 and 1 dcnl cmap str dcnl which colormap to use dcnl returns dcnl colors array shape n 4 dcnl rgba color values
read freesurfer label file dcnl parameters dcnl filename string dcnl path to label file dcnl subject str | none dcnl name of the subject the data are defined for dcnl it is good practice to set this attribute to avoid combining dcnl incompatible labels and sourceestimates e g ones from other dcnl subjects note that due to file specification limitations the dcnl subject name isn t saved to or loaded from files written to disk dcnl color none | matplotlib color dcnl default label color and alpha e g 1 0 0 1 for red dcnl note that due to file specification limitations the color isn t saved dcnl to or loaded from files written to disk dcnl returns dcnl label label dcnl instance of label object with attributes dcnl comment comment from the first line of the label file dcnl vertices vertex indices 0 based column 1 dcnl pos locations in meters columns 2 4 divided by 1000 dcnl values values at the vertices column 5 dcnl see also dcnl read labels from annot
write a freesurfer label dcnl parameters dcnl filename string dcnl path to label file to produce dcnl label label dcnl the label object to save dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl notes dcnl note that due to file specification limitations the label s subject and dcnl color attributes are not saved to disk dcnl see also dcnl write labels to annot
get label and subject information prior to label spliting
split label into contiguous regions i e connected components dcnl parameters dcnl label to split label | str dcnl label which is to be split label object or path to a label file dcnl subject none | str dcnl subject which this label belongs to needed to locate surface file dcnl should only be specified if it is not specified in the label dcnl subjects dir none | str dcnl path to subjects dir if it is not set in the environment dcnl returns dcnl labels list of label dcnl the contiguous labels in order of decending size
split a label into two or more parts dcnl parameters dcnl label label | str dcnl label which is to be split label object or path to a label file dcnl parts int 2 | tuple of str dcnl a sequence of strings specifying label names for the new labels from dcnl posterior to anterior or the number of new labels to create default dcnl is 2 if a number is specified names of the new labels will be the dcnl input label s name with div1 div2 etc appended dcnl subject none | str dcnl subject which this label belongs to needed to locate surface file dcnl should only be specified if it is not specified in the label dcnl subjects dir none | str dcnl path to subjects dir if it is not set in the environment dcnl freesurfer bool dcnl by default false split label uses an algorithm that is dcnl slightly optimized for performance and numerical precision set dcnl freesurfer to true in order to replicate label splits from dcnl freesurfer s mris divide parcellation dcnl returns dcnl labels list of label len n parts dcnl the labels starting from the lowest to the highest end of the dcnl projection axis dcnl notes dcnl works by finding the label s principal eigenaxis on the spherical surface dcnl projecting all label vertex coordinates onto this axis and dividing them at dcnl regular spatial intervals
compute sign for label averaging dcnl parameters dcnl label label dcnl a label dcnl src list of dict dcnl the source space over which the label is defined dcnl returns dcnl flip array dcnl sign flip vector contains 1 or 1
compute a label from the nonzero sources in an stc object dcnl parameters dcnl stc sourceestimate dcnl the source estimates dcnl src sourcespaces | str | none dcnl the source space over which the source estimates are defined dcnl if it s a string it should the subject name e g fsaverage dcnl can be none if stc subject is not none dcnl smooth bool dcnl fill in vertices on the cortical surface that are not in the source dcnl space based on the closest source space vertex requires dcnl src to be a sourcespace dcnl connected bool dcnl if true a list of connected labels will be returned in each dcnl hemisphere the labels are ordered in decreasing order depending dcnl of the maximum value in the stc dcnl subjects dir str | none dcnl path to subjects dir if it is not set in the environment dcnl returns dcnl labels list of labels | list of list of labels dcnl the generated labels if connected is false it returns dcnl a list of labels one per hemisphere if no label is available dcnl in a hemisphere none is returned if connected is true dcnl it returns for each hemisphere a list of connected labels dcnl ordered in decreasing order depending of the maximum value in the stc dcnl if no label is available in an hemisphere an empty list is returned
find all vertices wihin a maximum geodesic distance from source dcnl parameters dcnl graph scipy sparse csr matrix dcnl sparse matrix with distances between adjacent vertices dcnl sources list of int dcnl source vertices dcnl max dist float dcnl maximum geodesic distance dcnl returns dcnl verts array dcnl vertices within max dist dcnl dist array dcnl distances from source vertex
parallelize grow labels
generate circular labels in source space with region growing dcnl this function generates a number of labels in source space by growing dcnl regions starting from the vertices defined in seeds for each seed a dcnl label is generated containing all vertices within a maximum geodesic dcnl distance on the white matter surface from the seed dcnl note extents and hemis can either be arrays with the same length as dcnl seeds which allows using a different extent and hemisphere for each dcnl label or integers in which case the same extent and hemisphere is dcnl used for each label dcnl parameters dcnl subject string dcnl name of the subject as in subjects dir dcnl seeds int | list dcnl seed or list of seeds each seed can be either a vertex number or dcnl a list of vertex numbers dcnl extents array | float dcnl extents radius in mm of the labels dcnl hemis array | int dcnl hemispheres to use for the labels 0 left 1 right dcnl subjects dir string dcnl path to subjects dir if not set in the environment dcnl n jobs int dcnl number of jobs to run in parallel likely only useful if tens dcnl or hundreds of labels are being expanded simultaneously does not dcnl apply with overlap false dcnl overlap bool dcnl produce overlapping labels if true default the resulting labels dcnl can be overlapping if false each label will be grown one step at a dcnl time and occupied territory will not be invaded dcnl names none | list of str dcnl assign names to the new labels list needs to have the same length as dcnl seeds dcnl surface string dcnl the surface used to grow the labels defaults to the white surface dcnl returns dcnl labels list of label dcnl the labels comment attribute contains information on the seed dcnl vertex and extent the values attribute contains distance from the dcnl seed in millimeters
grow labels while ensuring that they don t overlap
read a freesurfer annotation from a annot file dcnl note copied from pysurfer dcnl parameters dcnl fname str dcnl path to annotation file dcnl returns dcnl annot numpy array shape n verts dcnl annotation id at each vertex dcnl ctab numpy array shape n entries 5 dcnl rgba + label id colortable array dcnl names list of str dcnl list of region names as stored in the annot file
get the annot filenames and hemispheres
read labels from a freesurfer annotation file dcnl note only cortical labels will be returned dcnl parameters dcnl subject str dcnl the subject for which to read the parcellation for dcnl parc str dcnl the parcellation to use e g aparc or aparc a2009s dcnl hemi str dcnl the hemisphere to read the parcellation for can be lh rh dcnl or both dcnl surf name str dcnl surface used to obtain vertex locations e g white pial dcnl annot fname str or none dcnl filename of the annot file if not none only this file is read dcnl and parc and hemi are ignored dcnl regexp str dcnl regular expression or substring to select particular labels from the dcnl parcellation e g superior will return all labels in which this dcnl substring is contained dcnl subjects dir string or none dcnl path to subjects dir if it is not set in the environment dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl labels list of label dcnl the labels sorted by label name ascending
write a freesurfer annotation to a annot file dcnl parameters dcnl fname str dcnl path to annotation file dcnl annot numpy array shape n verts dcnl annotation id at each vertex note ids must be computed from dcnl rgba colors otherwise the mapping will be invalid dcnl ctab numpy array shape n entries 4 dcnl rgba colortable array dcnl names list of str dcnl list of region names to be stored in the annot file
create a freesurfer annotation from a list of labels dcnl parameters dcnl labels list with instances of mne label dcnl the labels to create a parcellation from dcnl subject str | none dcnl the subject for which to write the parcellation for dcnl parc str | none dcnl the parcellation name to use dcnl overwrite bool dcnl overwrite files if they already exist dcnl subjects dir string or none dcnl path to subjects dir if it is not set in the environment dcnl annot fname str | none dcnl filename of the annot file if not none only this file is written dcnl and parc and subject are ignored dcnl colormap str dcnl colormap to use to generate label colors for labels that do not dcnl have a color specified dcnl hemi both | lh | rh dcnl the hemisphere s for which to write annot files only applies if dcnl annot fname is not specified default is both dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl notes dcnl vertices that are not covered by any of the labels are assigned to a label dcnl named unknown
read maxfilterformatted head position parameters dcnl parameters dcnl fname str dcnl the filename to read this can be produced by e g dcnl maxfilter headpos <name pos dcnl returns dcnl pos array shape n 10 dcnl the position and quaternion parameters from chpi fitting dcnl see also dcnl write head pos dcnl head pos to trans rot t dcnl notes dcnl versionadded 0 12
write maxfilterformatted head position parameters dcnl parameters dcnl fname str dcnl the filename to write dcnl pos array shape n 10 dcnl the position and quaternion parameters from chpi fitting dcnl see also dcnl read head pos dcnl head pos to trans rot t dcnl notes dcnl versionadded 0 12
convert maxfilterformatted head position quaternions dcnl parameters dcnl quats ndarray shape n 10 dcnl maxfilterformatted position and quaternion parameters dcnl returns dcnl translation ndarray shape n 3 dcnl translations at each time point dcnl rotation ndarray shape n 3 3 dcnl rotations at each time point dcnl t ndarray shape n dcnl the time points dcnl see also dcnl read head pos dcnl write head pos
get hpi information from raw
get hpi fit locations from raw
project data onto right eigenvectors of whitened forward
fit a single bit of data x0 pos
compute objective function
constrain our 3 quaternion rot params ignoring w to have norm < 1
fit rotation and translation quaternion parameters for chpi coils
compute device to head transform allowing for permutiatons of points
generate hpi structure for hpi localization dcnl returns dcnl hpi dict dcnl dictionary of parameters representing the chpi system and needed to dcnl perform head localization
format log messages
fit amplitudes for each channel from each of the n chpi sinusoids dcnl returns dcnl sin fit ndarray shape n freqs n channels or none dcnl the sin amplitudes matching each chpi frequency dcnl or none if this time window should be skipped
calculate location of hpi coils in device coords for 1 time window dcnl parameters dcnl raw instance of raw dcnl raw data with chpi information dcnl t win list shape 2 dcnl time window to fit if none entire data run is used dcnl initial dev rrs ndarry shape n chpi 3 || none dcnl initial guess on hpi locations if none 0 0 0 is used for each hpi dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl coil dev rrs ndarray shape n chpi 3 dcnl fit locations of each chpi coil in device coordinates
calculate head positions using chpi coils dcnl parameters dcnl raw instance of raw dcnl raw data with chpi information dcnl t step min float dcnl minimum time step to use if correlations are sufficiently high dcnl t step max will be used dcnl t step max float dcnl maximum time step to use dcnl t window float dcnl time window to use to estimate the head positions dcnl dist limit float dcnl minimum distance m to accept for coil position fitting dcnl gof limit float dcnl minimum goodness of fit to accept dcnl use distances bool dcnl use dist limit to choose good coils based on pairwise distancs dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl quats ndarray shape n 10 dcnl the t q1 q2 q3 x y z gof err v for each fit dcnl notes dcnl the number of time points n will depend on the velocity of head dcnl movements as well as t step max and t step min dcnl see also dcnl read head pos dcnl write head pos
calculate locations of each chpi coils over time dcnl parameters dcnl raw instance of raw dcnl raw data with chpi information dcnl t step min float dcnl minimum time step to use if correlations are sufficiently high dcnl t step max will be used dcnl t step max float dcnl maximum time step to use dcnl t window float dcnl time window to use to estimate the head positions dcnl dist limit float dcnl minimum distance m to accept for coil position fitting dcnl gof limit float dcnl minimum goodness of fit to accept dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl time ndarray shape n 1 dcnl the start time of each fitting interval dcnl chpi digs ndarray shape n 1 dcnl array of dig structures containing the chpi locations includes dcnl goodness of fit for each chpi dcnl notes dcnl the number of time points n will depend on the velocity of head dcnl movements as well as t step max and t step min dcnl see also dcnl read head pos dcnl write head pos
remove chpi and line noise from data dcnl note this function will only work properly if chpi was on dcnl during the recording dcnl parameters dcnl raw instance of raw dcnl raw data with chpi information must be preloaded operates inplace dcnl include line bool dcnl if true also filter line noise dcnl t step float dcnl time step to use for estimation default is 0 01 10 ms dcnl t window float dcnl time window to use to estimate the amplitudes default is dcnl 0 2 200 ms dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl raw instance of raw dcnl the raw data dcnl notes dcnl chpi signals are in general not stationary because head movements act dcnl like amplitude modulators on chpi signals thus it is recommended to dcnl to use this procedure which uses an iterative fitting method to dcnl remove chpi signals as opposed to notch filtering dcnl versionadded 0 12
get the freesurfer lut
convert a label to a lut id number
patch information in a source space dcnl generate the patch information from the nearest vector in dcnl a source space for vertex in the source space it provides dcnl the list of neighboring vertices in the high resolution dcnl triangulation dcnl parameters dcnl s dict dcnl the source space
read the source spaces from a fif file dcnl parameters dcnl fid file descriptor dcnl an open file descriptor dcnl tree dict dcnl the fif tree structure if source is a file id dcnl patch stats bool optional default false dcnl calculate and add cortical patch statistics to the surfaces dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl src sourcespaces dcnl the source spaces
read the source spaces from a fif file dcnl parameters dcnl fname str dcnl the name of the file which should end with src fif or dcnl src fif gz dcnl patch stats bool optional default false dcnl calculate and add cortical patch statistics to the surfaces dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl src sourcespaces dcnl the source spaces dcnl see also dcnl write source spaces setup source space setup volume source space
read one source space
add more info on surface
return the hemisphere id for a source space dcnl parameters dcnl src dict dcnl the source space to investigate dcnl returns dcnl hemi int dcnl deduced hemisphere id
find vertex numbers and indices from label dcnl parameters dcnl label label dcnl source space label dcnl src dict dcnl source space dcnl returns dcnl vertices list of length 2 dcnl vertex numbers for lh and rh dcnl src sel array of int len idx len vertices0 + len vertices1 dcnl indices of the selected vertices in sourse space
write the source spaces to a fif file dcnl parameters dcnl fid file descriptor dcnl an open file descriptor dcnl src list dcnl the list of source spaces dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more
write source spaces to a file dcnl parameters dcnl fname str dcnl the name of the file which should end with src fif or dcnl src fif gz dcnl src sourcespaces dcnl the source spaces as returned by read source spaces dcnl overwrite bool dcnl if true the destination file if it exists will be overwritten dcnl if false default an error will be raised if the file exists dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl see also dcnl read source spaces
write one source space
convert the array of vertices for a hemisphere to mni coordinates dcnl parameters dcnl vertices int or list of int dcnl vertex number s to convert dcnl hemis int or list of int dcnl hemisphere s the vertices belong to dcnl subject string dcnl name of the subject to load surfaces from dcnl subjects dir string or none dcnl path to subjects dir if it is not set in the environment dcnl mode string | none dcnl either nibabel or freesurfer for the software to use to dcnl obtain the transforms if none nibabel is tried first falling dcnl back to freesurfer if it fails results should be equivalent with dcnl either option but nibabel may be quicker and more pythonic dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl coordinates n vertices x 3 array of float dcnl the mni coordinates in mm of the vertices dcnl notes dcnl this function requires either nibabel in python or freesurfer dcnl with utility mri info to be correctly installed
read mni transform from freesurfer talairach xfm file dcnl adapted from freesurfer mfiles altered to deal with norig dcnl and torig correctly
check spacing parameter
set up bilateral hemisphere surfacebased source space with subsampling dcnl parameters dcnl subject str dcnl subject to process dcnl spacing str dcnl the spacing to use can be ico for a recursively subdivided dcnl icosahedron oct for a recursively subdivided octahedron dcnl or all for all points dcnl surface str dcnl the surface to use dcnl subjects dir string or none dcnl path to subjects dir if it is not set in the environment dcnl add dist bool dcnl add distance and patch information to the source space this takes some dcnl time so precomputing it is recommended dcnl n jobs int dcnl number of jobs to run in parallel will use at most 2 jobs dcnl one for each hemisphere dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl src list dcnl the source space for each hemisphere dcnl see also dcnl setup volume source space
set up a volume source space with grid spacing or discrete source space dcnl parameters dcnl subject str | none dcnl subject to process if none the path to the mri volume must be dcnl absolute defaults to none dcnl pos float | dict dcnl positions to use for sources if float a grid will be constructed dcnl with the spacing given by pos in mm generating a volume source dcnl space if dict pos rr and pos nn will be used as the source dcnl space locations in meters and normals respectively creating a dcnl discrete source space note for a discrete source space pos is dcnl a dict mri must be none dcnl mri str | none dcnl the filename of an mri volume mgh or mgz to create the dcnl interpolation matrix over source estimates obtained in the dcnl volume source space can then be morphed onto the mri volume dcnl using this interpolator if pos is a dict this can be none dcnl sphere array like length 4 dcnl define spherical source space bounds using origin and radius given dcnl by ox oy oz rad in mm only used if bem and surface are dcnl both none dcnl bem str | none dcnl define source space bounds using a bem file specifically the inner dcnl skull surface dcnl surface str | dict | none dcnl define source space bounds using a freesurfer surface file can dcnl also be a dictionary with entries rr and tris such as dcnl those returned by func mne read surface dcnl mindist float dcnl exclude points closer than this distance mm to the bounding surface dcnl exclude float dcnl exclude points closer than this distance mm from the center of mass dcnl of the bounding surface dcnl subjects dir string or none dcnl path to subjects dir if it is not set in the environment dcnl volume label str | list | none dcnl region of interest corresponding with freesurfer lookup table dcnl add interpolator bool dcnl if true and mri is not none then an interpolation matrix dcnl will be produced dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl src list dcnl the source space note that this list will have length 1 for dcnl compatibility reasons as most functions expect source spaces dcnl to be provided as lists dcnl see also dcnl setup source space dcnl notes dcnl to create a discrete source space pos must be a dict mri must be dcnl none and volume label must be none to create a whole brain volume dcnl source space pos must be a float and mri must be provided to create dcnl a volume source space from label pos must be a float volume label dcnl must be provided and mri must refer to a mgh or mgz file with values dcnl corresponding to the freesurfer lookuptable typically aseg mgz
make a transformation from mri voxel to mri surface ras i e mri
use a discrete set of source locs oris to make src space dcnl parameters dcnl pos dict dcnl must have entries rr and nn data should be in meters dcnl coord frame str dcnl the coordinate frame in which the positions are given default mri dcnl the frame must be one defined in transforms py str to frame dcnl returns dcnl src dict dcnl the source space
make a source space which covers the volume bounded by surf
get mri header using nibabel
adapted from nibabel to quickly extract header info
compute a sparse matrix to interpolate the data into an mri volume
remove all source space points closer than a given limit in mm
check whether points are outside a surface dcnl parameters dcnl rr ndarray dcnl nx3 array of points to check dcnl surf dict dcnl surface with entries rr and tris dcnl returns dcnl outside ndarray dcnl 1d logical array of size n for which points are outside the surface
ensure we have a source space
compute intersource distances along the cortical surface dcnl this function will also try to add patch info for the source space dcnl it will only occur if the dist limit is sufficiently high that all dcnl points on the surface are within dist limit of a point in the dcnl source space dcnl parameters dcnl src instance of sourcespaces dcnl the source spaces to compute distances for dcnl dist limit float dcnl the upper limit of distances to include in meters dcnl note if limit < np inf scipy 0 13 bleeding edge as of dcnl 10 2013 must be installed dcnl n jobs int dcnl number of jobs to run in parallel will only use up to as many dcnl cores as there are source spaces dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl src instance of sourcespaces dcnl the original source spaces with distance information added dcnl the distances are stored in srcn dist dcnl note this function operates inplace dcnl notes dcnl requires scipy 0 11 0 13 for dist limit < np inf dcnl this function can be memory and cpuintensive on a highend machine dcnl 2012 running 6 jobs in parallel an ico5 10242 per hemi source space dcnl takes about 10 minutes to compute all distances dist limit np inf dcnl with dist limit 0 007 computing distances takes about 1 minute dcnl we recommend computing distances once per source space and then saving dcnl the source space to disk as the computed distances will automatically be dcnl stored along with the source space data for future use
compute source space distances in chunks
return a list of names and colors of segmented volumes dcnl parameters dcnl mgz fname str dcnl filename to read typically aseg mgz or some variant in the freesurfer dcnl pipeline dcnl return colors bool dcnl if true returns also the labels colors dcnl returns dcnl label names list of str dcnl the names of segmented volumes included in this mgz file dcnl label colors list of str dcnl the rgb colors of the labels included in this mgz file dcnl notes dcnl versionadded 0 9 0
return a list of label of segmented volumes included in the src space dcnl parameters dcnl src instance of sourcespaces dcnl the source space containing the volume regions dcnl subject str dcnl subject name dcnl subjects dir str dcnl freesurfer folder of the subjects dcnl returns dcnl labels aseg list of label dcnl list of label of segmented volumes included in src space
get a hemisphere from a given source space
get a nearestneigbor vertex match for a given hemi src dcnl the to neighbor tri can optionally be passed in to avoid recomputation dcnl if it s already available
morph an existing source space to a different subject dcnl warning this can be used in place of morphing source estimates for dcnl multiple subjects but there may be consequences in terms dcnl of dipole topology dcnl parameters dcnl src from instance of sourcespaces dcnl surface source spaces to morph dcnl subject to str dcnl the destination subject dcnl surf str dcnl the brain surface to use for the new source space dcnl subject from str | none dcnl the from subject for most source spaces this shouldn t need dcnl to be provided since it is stored in the source space itself dcnl subjects dir string or none dcnl path to subjects dir if it is not set in the environment dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl src instance of sourcespaces dcnl the morphed source spaces dcnl notes dcnl versionadded 0 10 0
get the reordering indices for a morphed source space dcnl parameters dcnl vertices list dcnl the vertices for the left and right hemispheres dcnl src from instance of sourcespaces dcnl the original source space dcnl subject from str dcnl the source subject dcnl subject to str dcnl the destination subject dcnl subjects dir string or none dcnl path to subjects dir if it is not set in the environment dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl data idx ndarray shape n vertices dcnl the array used to reshape the data dcnl from vertices list dcnl the right and left hemisphere vertex numbers for the from subject
compare two source spaces dcnl note this function is also used by forward tests test make forward py
read projections from a fif file dcnl parameters dcnl fname string dcnl the name of file containing the projections vectors it should end with dcnl proj fif or proj fif gz dcnl returns dcnl projs list dcnl the list of projection vectors dcnl see also dcnl write proj
write projections to a fif file dcnl parameters dcnl fname string dcnl the name of file containing the projections vectors it should end with dcnl proj fif or proj fif gz dcnl projs list dcnl the list of projection vectors dcnl see also dcnl read proj
compute ssp spatial space projection vectors on epochs dcnl parameters dcnl epochs instance of epochs dcnl the epochs containing the artifact dcnl n grad int dcnl number of vectors for gradiometers dcnl n mag int dcnl number of vectors for magnetometers dcnl n eeg int dcnl number of vectors for eeg channels dcnl n jobs int dcnl number of jobs to use to compute covariance dcnl desc prefix str | none dcnl the description prefix to use if none one will be created based on dcnl the event id tmin and tmax dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl projs list dcnl list of projection vectors dcnl see also dcnl compute proj raw compute proj evoked
compute epochs covariance
compute ssp spatial space projection vectors on evoked dcnl parameters dcnl evoked instance of evoked dcnl the evoked obtained by averaging the artifact dcnl n grad int dcnl number of vectors for gradiometers dcnl n mag int dcnl number of vectors for magnetometers dcnl n eeg int dcnl number of vectors for eeg channels dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl projs list dcnl list of projection vectors dcnl see also dcnl compute proj raw compute proj epochs
compute ssp spatial space projection vectors on raw dcnl parameters dcnl raw instance of raw dcnl a raw object to use the data from dcnl start float dcnl time in sec to start computing ssp dcnl stop float dcnl time in sec to stop computing ssp dcnl none will go to the end of the file dcnl duration float dcnl duration in sec to chunk data into for ssp dcnl if duration is none data will not be chunked dcnl n grad int dcnl number of vectors for gradiometers dcnl n mag int dcnl number of vectors for magnetometers dcnl n eeg int dcnl number of vectors for eeg channels dcnl reject dict | none dcnl epoch rejection configuration see epochs dcnl flat dict | none dcnl epoch flat configuration see epochs dcnl n jobs int dcnl number of jobs to use to compute covariance dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl projs list dcnl list of projection vectors dcnl see also dcnl compute proj epochs compute proj evoked
compute sensitivity map dcnl such maps are used to know how much sources are visible by a type dcnl of sensor and how much projections shadow some sources dcnl parameters dcnl fwd forward dcnl the forward operator dcnl projs list dcnl list of projection vectors dcnl ch type grad | mag | eeg dcnl the type of sensors to use dcnl mode str dcnl the type of sensitivity map computed see manual should be free dcnl fixed ratio radiality angle remaining or dampening dcnl corresponding to the argument map 1 2 3 4 5 6 and 7 of the dcnl command mne sensitivity map dcnl exclude list of string | str dcnl list of channels to exclude if empty do not exclude any default dcnl if bads exclude channels in fwd info bads dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl stc sourceestimate | volsourceestimate dcnl the sensitivity map as a sourceestimate or volsourceestimate instance dcnl for visualization
split epochs
match event ids using hid selection dcnl parameters dcnl event id dict dcnl the event id dictionary dcnl keys list | str dcnl the event id or subset for hid or list of such items dcnl returns dcnl use keys list dcnl the full keys that fit the selection criteria
check for a valid baseline
compute drop log stats dcnl parameters dcnl drop log list of lists dcnl epoch drop log from epochs drop log dcnl ignore list dcnl the drop reasons to ignore dcnl returns dcnl perc float dcnl total percentage of epochs dropped
collapse event ids from an epochs instance into a new event id dcnl parameters dcnl epochs instance of epochs dcnl the epochs to operate on dcnl old event ids str or list dcnl conditions to collapse together dcnl new event id dict or int dcnl a oneelement dict or a single integer for the new dcnl condition note that for safety this cannot be any dcnl existing id in epochs event id values dcnl copy bool dcnl whether to return a new instance or modify in place dcnl notes dcnl this for example if epochs event id was left 1 right 2 dcnl combine event ids epochs left right directional 12 dcnl would create a directional entry in epochs event id replacing dcnl left and right combining their trials
equalize the number of trials in multiple epoch instances dcnl it tries to make the remaining epochs occurring as close as possible in dcnl time this method works based on the idea that if there happened to be some dcnl timevarying like on the scale of minutes noise characteristics during dcnl a recording they could be compensated for to some extent in the dcnl equalization process this method thus seeks to reduce any of those effects dcnl by minimizing the differences in the times of the events in the two sets of dcnl epochs for example if one had event times 1 2 3 4 120 121 and the dcnl other one had 3 5 4 5 120 5 121 5 it would remove events at times dcnl 1 2 in the first epochs and not 120 121 dcnl note that this operates on the epochs instances inplace dcnl example dcnl equalize epoch counts epochs1 epochs2 dcnl parameters dcnl epochs list list of epochs instances dcnl the epochs instances to equalize trial counts for dcnl method str dcnl if truncate events will be truncated from the end of each event dcnl list if mintime timing differences between each event list will be dcnl minimized
get indices to drop from multiple event timing lists
fix bug on old scipy
find a boolean mask to minimize timing differences
test if data segment e is good according to reject and flat dcnl if full report true it will give true false as well as a list of all dcnl offending channels
read a single fif file
read epochs from a fif file dcnl parameters dcnl fname str dcnl the name of the file which should end with epo fif or epo fif gz dcnl proj bool | delayed dcnl apply ssp projection vectors if proj is delayed and reject is not dcnl none the single epochs will be projected before the rejection dcnl decision but used in unprojected state if they are kept dcnl this way deciding which projection vectors are good can be postponed dcnl to the evoked stage without resulting in lower epoch counts and dcnl without producing results different from early ssp application dcnl given comparable parameters note that in this case baselining dcnl detrending and temporal decimation will be postponed dcnl if proj is false no projections will be applied which is the dcnl recommended value if ssps are not used for cleaning the data dcnl preload bool dcnl if true read all epochs from disk immediately if false epochs will dcnl be read on demand dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl epochs instance of epochs dcnl the epochs
compute epochs selected by bootstrapping dcnl parameters dcnl epochs epochs instance dcnl epochs data to be bootstrapped dcnl random state none | int | np random randomstate dcnl to specify the random generator state dcnl returns dcnl epochs epochs instance dcnl the bootstrap samples
aux function
concatenate channels info and data from two epochs objects dcnl parameters dcnl epochs list list of epochs dcnl epochs object to concatenate dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more defaults to dcnl true if any of the input epochs have verbose true dcnl returns dcnl epochs instance of epochs dcnl concatenated epochs
compare infos
auxiliary function for concatenating epochs
finish concatenation for epochs not read from disk
concatenate a list of epochs into one epochs object dcnl parameters dcnl epochs list list dcnl list of epochs instances to concatenate in order dcnl returns dcnl epochs instance of epochs dcnl the result of the concatenation first epochs instance passed in dcnl notes dcnl versionadded 0 9 0
check indices parameter
generate indices parameter for seed based connectivity analysis dcnl parameters dcnl seeds array of int | int dcnl seed indices dcnl targets array of int | int dcnl indices of signals for which to compute connectivity dcnl returns dcnl indices tuple of arrays dcnl the indices parameter used for connectivity computation
simulate a sourceestimate generator
test frequencydomain connectivity methods
test connectivity indexing methods
test phase slope index psi estimation
estimate connectivity for one epoch see spectral connectivity
generate lists with at most n epochs
test if a method implements the required interface
get and or verify the data sizes and time scales
check constrution of connectivity estimators
compute frequency and timefrequencydomain connectivity measures dcnl the connectivity method s are specified using the method parameter dcnl all methods are based on estimates of the cross and power spectral dcnl densities csd psd sxy and sxx syy dcnl the spectral densities can be estimated using a multitaper method with dcnl digital prolate spheroidal sequence dpss windows a discrete fourier dcnl transform with hanning windows or a continuous wavelet transform using dcnl morlet wavelets the spectral estimation mode is specified using the dcnl mode parameter dcnl by default the connectivity between all signals is computed only dcnl connections corresponding to the lowertriangular part of the dcnl connectivity matrix if one is only interested in the connectivity dcnl between some signals the indices parameter can be used for example dcnl to compute the connectivity between the signal with index 0 and signals dcnl 2 3 4 a total of 3 connections one can use the following dcnl indices np array 0 0 0 row indices dcnl np array 2 3 4 col indices dcnl con flat spectral connectivity data method coh dcnl indices indices dcnl in this case con flat shape 3 n freqs the connectivity scores are dcnl in the same order as defined indices dcnl supported connectivity measures dcnl the connectivity method s is specified using the method parameter the dcnl following methods are supported note e denotes average over dcnl epochs multiple measures can be computed at once by using a list tuple dcnl e g coh pli to compute coherence and pli dcnl coh coherence given by dcnl | esxy | dcnl c dcnl sqrt esxx esyy dcnl cohy coherency given by dcnl esxy dcnl c dcnl sqrt esxx esyy dcnl imcoh imaginary coherence 1 given by dcnl im esxy dcnl c dcnl sqrt esxx esyy dcnl plv phaselocking value plv 2 given by dcnl plv |esxy |sxy|| dcnl ppc pairwise phase consistency ppc an unbiased estimator dcnl of squared plv 3 dcnl pli phase lag index pli 4 given by dcnl pli |esign im sxy | dcnl pli2 unbiased unbiased estimator of squared pli 5 dcnl wpli weighted phase lag index wpli 5 given by dcnl |eim sxy | dcnl wpli dcnl e|im sxy | dcnl wpli2 debiased debiased estimator of squared wpli 5 dcnl parameters dcnl data arraylike shape n epochs n signals n times | epochs dcnl the data from which to compute connectivity note that it is also dcnl possible to combine multiple signals by providing a list of tuples dcnl e g data arr 0 stc 0 arr 1 stc 1 arr 2 stc 2 dcnl corresponds to 3 epochs and arr could be an array with the same dcnl number of time points as stc the arraylike object can also dcnl be a list generator of array shape n signals n times dcnl or a list generator of sourceestimate or volsourceestimate objects dcnl method string | list of string dcnl connectivity measure s to compute dcnl indices tuple of arrays | none dcnl two arrays with indices of connections for which to compute dcnl connectivity if none all connections are computed dcnl sfreq float dcnl the sampling frequency dcnl mode str dcnl spectrum estimation mode can be either multitaper fourier or dcnl cwt morlet dcnl fmin float | tuple of floats dcnl the lower frequency of interest multiple bands are defined using dcnl a tuple e g 8 20 for two bands with 8hz and 20hz lower freq dcnl if none the frequency corresponding to an epoch length of 5 cycles dcnl is used dcnl fmax float | tuple of floats dcnl the upper frequency of interest multiple bands are dedined using dcnl a tuple e g 13 30 for two band with 13hz and 30hz upper freq dcnl fskip int dcnl omit every fskip + 1 th frequency bin to decimate in frequency dcnl domain dcnl faverage boolean dcnl average connectivity scores for each frequency band if true dcnl the output freqs will be a list with arrays of the frequencies dcnl that were averaged dcnl tmin float | none dcnl time to start connectivity estimation note when data is an array dcnl the first sample is assumed to be at time 0 for other types dcnl epochs etc the time information contained in the object is used dcnl to compute the time indices dcnl tmax float | none dcnl time to end connectivity estimation note when data is an array dcnl the first sample is assumed to be at time 0 for other types dcnl epochs etc the time information contained in the object is used dcnl to compute the time indices dcnl mt bandwidth float | none dcnl the bandwidth of the multitaper windowing function in hz dcnl only used in multitaper mode dcnl mt adaptive bool dcnl use adaptive weights to combine the tapered spectra into psd dcnl only used in multitaper mode dcnl mt low bias bool dcnl only use tapers with more than 90 spectral concentration within dcnl bandwidth only used in multitaper mode dcnl cwt frequencies array dcnl array of frequencies of interest only used in cwt morlet mode dcnl cwt n cycles float | array of float dcnl number of cycles fixed number or one per frequency only used in dcnl cwt morlet mode dcnl block size int dcnl how many connections to compute at once higher numbers are faster dcnl but require more memory dcnl n jobs int dcnl how many epochs to process in parallel dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl con array | list of arrays dcnl computed connectivity measure s the shape of each array is either dcnl n signals n signals n frequencies mode multitaper or fourier dcnl n signals n signals n frequencies n times mode cwt morlet dcnl when indices is none or dcnl n con n frequencies mode multitaper or fourier dcnl n con n frequencies n times mode cwt morlet dcnl when indices is specified and n con len indices0 dcnl freqs array dcnl frequency points at which the connectivity was computed dcnl times array dcnl time points for which the connectivity was computed dcnl n epochs int dcnl number of epochs used for computation dcnl n tapers int dcnl the number of dpss tapers used only defined in multitaper mode dcnl otherwise none is returned dcnl references dcnl 1 nolte et al identifying true brain interaction from eeg data using dcnl the imaginary part of coherency clinical neurophysiology vol 115 dcnl no 10 pp 22922307 oct 2004 dcnl 2 lachaux et al measuring phase synchrony in brain signals human dcnl brain mapping vol 8 no 4 pp 194208 jan 1999 dcnl 3 vinck et al the pairwise phase consistency a biasfree measure of dcnl rhythmic neuronal synchronization neuroimage vol 51 no 1 dcnl pp 112122 may 2010 dcnl 4 stam et al phase lag index assessment of functional connectivity dcnl from multi channel eeg and meg with diminished bias from common dcnl sources human brain mapping vol 28 no 11 pp 11781193 dcnl nov 2007 dcnl 5 vinck et al an improved index of phasesynchronization for dcnl electrophysiological data in the presence of volumeconduction dcnl noise and samplesize bias neuroimage vol 55 no 4 dcnl pp 15481565 apr 2011
check and precompute dimensions of results data
prepare timefrequency decomposition
compute the phase slope index psi connectivity measure dcnl the psi is an effective connectivity measure i e a measure which can dcnl give an indication of the direction of the information flow causality dcnl for two time series and one computes the psi between the first and the dcnl second time series as follows dcnl indices np array 0 np array 1 dcnl psi phase slope index data indices indices dcnl a positive value means that time series 0 is ahead of time series 1 and dcnl a negative value means the opposite dcnl the psi is computed from the coherency see spectral connectivity details dcnl can be found in 1 dcnl references dcnl 1 nolte et al robustly estimating the flow direction of information in dcnl complex physical systems physical review letters vol 100 no 23 dcnl pp 14 jun 2008 dcnl parameters dcnl data arraylike shape n epochs n signals n times dcnl can also be a list generator of array shape n signals n times dcnl list generator of sourceestimate or epochs dcnl the data from which to compute connectivity note that it is also dcnl possible to combine multiple signals by providing a list of tuples dcnl e g data arr 0 stc 0 arr 1 stc 1 arr 2 stc 2 dcnl corresponds to 3 epochs and arr could be an array with the same dcnl number of time points as stc dcnl indices tuple of arrays | none dcnl two arrays with indices of connections for which to compute dcnl connectivity if none all connections are computed dcnl sfreq float dcnl the sampling frequency dcnl mode str dcnl spectrum estimation mode can be either multitaper fourier or dcnl cwt morlet dcnl fmin float | tuple of floats dcnl the lower frequency of interest multiple bands are defined using dcnl a tuple e g 8 20 for two bands with 8hz and 20hz lower freq dcnl if none the frequency corresponding to an epoch length of 5 cycles dcnl is used dcnl fmax float | tuple of floats dcnl the upper frequency of interest multiple bands are dedined using dcnl a tuple e g 13 30 for two band with 13hz and 30hz upper freq dcnl tmin float | none dcnl time to start connectivity estimation dcnl tmax float | none dcnl time to end connectivity estimation dcnl mt bandwidth float | none dcnl the bandwidth of the multitaper windowing function in hz dcnl only used in multitaper mode dcnl mt adaptive bool dcnl use adaptive weights to combine the tapered spectra into psd dcnl only used in multitaper mode dcnl mt low bias bool dcnl only use tapers with more than 90 spectral concentration within dcnl bandwidth only used in multitaper mode dcnl cwt frequencies array dcnl array of frequencies of interest only used in cwt morlet mode dcnl cwt n cycles float | array of float dcnl number of cycles fixed number or one per frequency only used in dcnl cwt morlet mode dcnl block size int dcnl how many connections to compute at once higher numbers are faster dcnl but require more memory dcnl n jobs int dcnl how many epochs to process in parallel dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl psi array dcnl computed connectivity measure s the shape of each array is either dcnl n signals n signals n bands mode multitaper or fourier dcnl n signals n signals n bands n times mode cwt morlet dcnl when indices is none or dcnl n con n bands mode multitaper or fourier dcnl n con n bands n times mode cwt morlet dcnl when indices is specified and n con len indices0 dcnl freqs array dcnl frequency points at which the connectivity was computed dcnl times array dcnl time points for which the connectivity was computed dcnl n epochs int dcnl number of epochs used for computation dcnl n tapers int dcnl the number of dpss tapers used only defined in multitaper mode dcnl otherwise none is returned
check decimation parameters
get all evoked entries
get evoked data aspect
get info in evoked file
make grand average of a list evoked data dcnl the function interpolates bad channels based on interpolate bads dcnl parameter if interpolate bads is true the grand average dcnl file will contain good channels and the bad channels interpolated dcnl from the good meg eeg channels dcnl the grand average nave attribute will be equal the number dcnl of evoked datasets used to calculate the grand average dcnl note grand average evoked shall not be used for source localization dcnl parameters dcnl all evoked list of evoked data dcnl the evoked datasets dcnl interpolate bads bool dcnl if true bad meg and eeg channels are interpolated dcnl returns dcnl grand average evoked dcnl the grand average data dcnl notes dcnl versionadded 0 9 0
merge evoked data by weighted addition or subtraction dcnl data should have the same channels and the same time instants dcnl subtraction can be performed by passing negative weights e g 1 1 dcnl parameters dcnl all evoked list of evoked dcnl the evoked datasets dcnl weights list of float | str dcnl the weights to apply to the data of each evoked instance dcnl can also be nave to weight according to evoked nave dcnl or equal to use equal weighting each weighted as 1 n dcnl returns dcnl evoked evoked dcnl the new evoked data dcnl notes dcnl versionadded 0 9 0
read evoked dataset s dcnl parameters dcnl fname string dcnl the file name which should end with ave fif or ave fif gz dcnl condition int or str | list of int or str | none dcnl the index or list of indices of the evoked dataset to read fif files dcnl can contain multiple datasets if none all datasets are returned as a dcnl list dcnl baseline none default or tuple of length 2 dcnl the time interval to apply baseline correction if none do not apply dcnl it if baseline is a b the interval is between a s and b s dcnl if a is none the beginning of the data is used and if b is none then b dcnl is set to the end of the interval if baseline is equal to none none dcnl all the time interval is used correction is applied by computing mean dcnl of the baseline period and subtracting it from the data the baseline dcnl a b includes both endpoints i e all timepoints t such that dcnl a < t < b dcnl kind str dcnl either average or standard error the type of data to read dcnl proj bool dcnl if false available projectors won t be applied to the data dcnl allow maxshield bool | str default false dcnl if true allow loading of data that has been recorded with internal dcnl active compensation maxshield data recorded with maxshield should dcnl generally not be loaded directly but should first be processed using dcnl sss tsss to remove the compensation signals that may also affect brain dcnl activity can also be yes to load without eliciting a warning dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl evoked evoked if condition is int or str or list of evoked if dcnl condition is none or list dcnl the evoked dataset s dcnl see also dcnl write evokeds
read evoked data from a fif file
write an evoked dataset to a file dcnl parameters dcnl fname string dcnl the file name which should end with ave fif or ave fif gz dcnl evoked evoked instance or list of evoked instances dcnl the evoked dataset or list of evoked datasets to save in one file dcnl note that the measurement info from the first evoked instance is used dcnl so be sure that information matches dcnl see also dcnl read evokeds
write evoked data
get featureindex and time of maximum signal from 2d array dcnl note this is a getter not a finder for nonevoked type dcnl data and continuous signals please use proper peak detection algorithms dcnl parameters dcnl data instance of numpy ndarray n locations n times dcnl the data either evoked in sensor or source space dcnl times instance of numpy ndarray n times dcnl the times in seconds dcnl tmin float | none dcnl the minimum point in time to be considered for peak getting dcnl tmax float | none dcnl the maximum point in time to be considered for peak getting dcnl mode pos neg abs dcnl how to deal with the sign of the data if pos only positive dcnl values will be considered if neg only negative values will dcnl be considered if abs absolute values will be considered dcnl defaults to abs dcnl returns dcnl max loc int dcnl the index of the feature with the maximum value dcnl max time int dcnl the time point of the maximum response index
make a duplicate
check to make sure the coils are in the correct coordinate frame
parallel wrapper for do lin field coeff to compute linear coefficients dcnl parameters dcnl surf dict dcnl dict containing information for one surface of the bem dcnl mult float dcnl multiplier for particular bem surface iso skull approach discussed in dcnl mosher et al 1999 and hamalainen and sarvas 1989 section iii dcnl rmag ndarray shape n integration pts 3 dcnl 3d positions of meg coil integration points from coil rmag dcnl cosmag ndarray shape n integration pts 3 dcnl direction of the meg coil integration points from coil cosmag dcnl ws ndarray shape n integration pts dcnl weights for meg coil integration points dcnl bins ndarray shape n integration points dcnl the sensor assignments for each rmag cosmag w dcnl n jobs int dcnl number of jobs to run in parallel dcnl returns dcnl coeff list dcnl linear coefficients with lead fields for each bem vertex on each sensor
compute field coefficients parallelfriendly dcnl see section iv of mosher et al 1999 specifically equation 35 dcnl parameters dcnl bem rr ndarray shape n bem vertices 3 dcnl positions on one bem surface in 3space 2562 bem vertices for bem with dcnl 5120 triangles ico4 dcnl tris ndarray shape n bem vertices 3 dcnl vertex indices for each triangle referring to bem rr dcnl tn ndarray shape n bem vertices 3 dcnl triangle unit normal vectors dcnl ta ndarray shape n bem vertices dcnl triangle areas dcnl rmag ndarray shape n sensor pts 3 dcnl 3d positions of meg coil integration points from coil rmag dcnl cosmag ndarray shape n sensor pts 3 dcnl direction of the meg coil integration points from coil cosmag dcnl ws ndarray shape n sensor pts dcnl weights for meg coil integration points dcnl bins ndarray shape n sensor pts dcnl the sensor assignments for each rmag cosmag w dcnl returns dcnl coeff ndarray shape n meg sensors n bem vertices dcnl linear coefficients with effect of each bem vertex on each sensor
concatenate meg coil parameters
set up for computing the solution at a set of meg coils dcnl parameters dcnl bem dict dcnl bem information dcnl coils list of dict len n meg sensors dcnl meg sensor information dicts dcnl coord frame int dcnl class constant identifying coordinate frame dcnl mults ndarray shape 1 n bem vertices dcnl multiplier for every vertex in bem dcnl n jobs int dcnl number of jobs to run in parallel dcnl returns dcnl sol ndarray shape n meg sensors n bem vertices dcnl meg solution
set up for computing the solution at a set of eeg electrodes dcnl parameters dcnl bem dict dcnl bem information dcnl els list of dict len n eeg sensors dcnl list of eeg sensor information dicts dcnl mults ndarray shape 1 n bem vertices dcnl multiplier for every vertex in bem dcnl returns dcnl sol ndarray shape n eeg sensors n bem vertices dcnl eeg solution
get the correct compensator for ctf coils
compute the infinite medium potential in all 3 directions dcnl parameters dcnl mri rr ndarray shape n dipole vertices 3 dcnl chunk of 3d dipole positions in mri coordinates dcnl bem rr ndarray shape n bem vertices 3 dcnl 3d vertex positions for one bem surface dcnl mri q ndarray shape 3 3 dcnl 3x3 head mri transform i e head mri t dot np eye 3 dcnl returns dcnl ndarray shape n dipole vertices 3 n bem vertices
compute infinitemedium magnetic field at one meg sensor dcnl this operates on all dipoles in all 3 basis directions dcnl parameters dcnl rr ndarray shape n source points 3 dcnl 3d dipole source positions dcnl rmag ndarray shape n sensor points 3 dcnl 3d positions of 1 meg coil s integration points from coil rmag dcnl cosmag ndarray shape n sensor points 3 dcnl direction of 1 meg coil s integration points from coil cosmag dcnl returns dcnl ndarray shape n dipoles 3 n integration pts dcnl magnetic field from all dipoles at each meg sensor integration point
calculate the magnetic field or electric potential forward solution dcnl the code is very similar between eeg and meg potentials so combine them dcnl this does the work of fwd comp field which wraps to fwd bem field dcnl and fwd bem pot els in mnec dcnl parameters dcnl rr ndarray shape n dipoles 3 dcnl 3d dipole source positions dcnl mri rr ndarray shape n dipoles 3 dcnl 3d source positions in mri coordinates dcnl mri q dcnl 3x3 head mri transform i e head mri t dot np eye 3 dcnl coils list of dict len sensors dcnl list of sensors where each element contains sensor specific information dcnl solution ndarray shape n sensors n bem rr dcnl comes from bem specify coils dcnl bem rr ndarray shape n bem vertices 3 dcnl 3d vertex positions for all surfaces in the bem dcnl n jobs int dcnl number of jobs to run in parallel dcnl coil type str dcnl meg or eeg dcnl returns dcnl b ndarray shape n dipoles 3 n sensors dcnl forward solution for a set of sensors
calculate primary currents in a set of meg coils dcnl see mosher et al 1999 section ii for discussion of primary vs volume dcnl currents dcnl parameters dcnl rr ndarray shape n dipoles 3 dcnl 3d dipole source positions in head coordinates dcnl coils list of dict dcnl list of meg coils where each element contains coil specific information dcnl returns dcnl pc ndarray shape n sources n meg sensors dcnl primary current for set of meg coils due to all sources
calculate infinite potentials for meg or eeg sensors using chunks dcnl parameters dcnl mri rr ndarray shape n dipoles 3 dcnl 3d dipole source positions in mri coordinates dcnl bem rr ndarray shape n bem vertices 3 dcnl 3d vertex positions for all surfaces in the bem dcnl mri q dcnl 3x3 head mri transform i e head mri t dot np eye 3 dcnl sol ndarray shape n sensors subset n bem vertices subset dcnl comes from bem specify coils dcnl returns dcnl b ndarray n dipoles 3 n sensors dcnl forward solution for sensors due to volume currents
do potential or field for spherical model
compute field for spherical model using jukka sarvas field computation dcnl jukka sarvas basic mathematical and electromagnetic concepts of the dcnl biomagnetic inverse problem phys med biol 1987 vol 32 1 1122 dcnl the formulas have been manipulated for efficient computation dcnl by matti hamalainen february 1990
calculate the eeg in the sphere model
compute an meg forward solution for a set of magnetic dipoles
precompute and store some things that are used for both meg and eeg dcnl calculation includes multiplication factors coordinate transforms dcnl compensations and forward solutions all are stored in modified fwd data dcnl parameters dcnl rr ndarray shape n dipoles 3 dcnl 3d dipole source positions in head coordinates dcnl bem dict dcnl boundary element model information dcnl fwd data dict dcnl dict containing sensor information gets updated here with bem and dcnl sensor information for later forward calculations dcnl n jobs int dcnl number of jobs to run in parallel dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more
compute meg and eeg forward solutions for all sensor types dcnl parameters dcnl rr ndarray shape n dipoles 3 dcnl 3d dipole positions in head coordinates dcnl fd dict dcnl dict containing forward data after update in prep field computation dcnl n jobs int dcnl number of jobs to run in parallel dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl bs list dcnl each element contains ndarray shape 3 n dipoles n sensors where dcnl n sensors depends on which channel types are requested meg and or eeg
compute the meg and eeg forward solutions dcnl this effectively combines compute forward meg and compute forward eeg dcnl from mnec dcnl parameters dcnl rr ndarray shape n sources 3 dcnl 3d dipole in head coordinates dcnl bem dict dcnl boundary element model information for all surfaces dcnl coils list list dcnl list of meg and or eeg sensor information dicts dcnl ccoils list list dcnl optional list of meg compensation information dcnl coil types list of str dcnl sensor types may contain meg and or eeg dcnl n jobs int dcnl number of jobs to run in parallel dcnl infos list len 2 dcnl infos0 is meg info infos1 is eeg info dcnl returns dcnl bs list of ndarray dcnl each element contains ndarray shape 3 n dipoles n sensors where dcnl n sensors depends on which channel types are requested meg and or eeg
test forwards
test basic magnetic dipole forward calculation
test making fwd using kit bti and ctf compensated files
test making meeg forward solution from python
test making a forward solution with a sphere model
test making the forward solution for a mixed source space
test forwardprojecting dipoles
test legendre polynomial derivative equivalence
test legendre table calculation
test interpolation of eeg field onto head
test interpolation of meg field onto helmet | head
test making a m eeg field map onto helmet head
helper to test as meg type evoked
test interpolation of data on to virtual channels
helper to compare two potentially converted forward solutions
test converting forward solution between different representations
test io for forward solutions
test projection of source space data to sensor space
test restriction of source space to source sourceestimate
test restriction of source space to label
test averaging forward solutions
read a coil definition file dcnl parameters dcnl elekta defs bool dcnl if true prepend elekta s coil definitions for numerical dcnl integration from abramowitz and stegun section 25 4 62 dcnl note that this will likely cause duplicate coil definitions dcnl so the first matching coil should be selected for optimal dcnl integration parameters dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl res list of dict dcnl the coils it is a dictionary with valid keys dcnl cosmag | coil class | coord frame | rmag | type | dcnl chname | accuracy dcnl cosmag contains the direction of the coils and rmag contains the dcnl position vector
read a coil def file
create a coil definition using templates transform if necessary
create an electrode definition transform coords if necessary
create a set of meg coils in the head coordinate frame
transform original device meg coil positions
create a set of eeg electrodes in the head coordinate frame
set up a bem for forward computation
prepare meg coil definitions for forward calculation dcnl parameters dcnl info instance of info dcnl the measurement information dictionary dcnl accurate bool dcnl if true default then use accurate coil definitions more dcnl integration points dcnl exclude list of str | str dcnl list of channels to exclude if bads exclude channels in dcnl info bads dcnl ignore ref bool dcnl if true ignore compensation coils dcnl elekta defs bool dcnl if true use elekta s coil definitions which use different integration dcnl point geometry false by default dcnl head frame bool dcnl if true default use head frame coords otherwise use device frame dcnl do es bool dcnl if true compute and store ex ey ez and r0 exey dcnl do picking bool dcnl if true pick info and return it dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl megcoils list of dict dcnl information for each prepped meg coil dcnl compcoils list of dict dcnl information for each prepped meg coil dcnl megnames list of str dcnl name of each prepped meg coil dcnl meginfo instance of info dcnl information subselected for just the set of meg coils
prepare eeg electrode definitions for forward calculation dcnl parameters dcnl info instance of info dcnl the measurement information dictionary dcnl exclude list of str | str dcnl list of channels to exclude if bads exclude channels in dcnl info bads dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl eegels list of dict dcnl information for each prepped eeg electrode dcnl eegnames list of str dcnl name of each prepped eeg electrode
prepare for forward computation
calculate a forward solution for a subject dcnl parameters dcnl info instance of mne info | str dcnl if str then it should be a filename to a raw epochs or evoked dcnl file with measurement information if dict should be an info dcnl dict such as one from raw epochs or evoked dcnl trans dict | str | none dcnl either a transformation filename usually made using mne analyze dcnl or an info dict usually opened using read trans dcnl if string an ending of fif or fif gz will be assumed to dcnl be in fif format any other ending will be assumed to be a text dcnl file with a 4x4 transformation matrix like the trans mnec dcnl option can be none to use the identity transform dcnl src str | instance of sourcespaces dcnl if string should be a source space filename can also be an dcnl instance of loaded or generated sourcespaces dcnl bem dict | str dcnl filename of the bem e g sample512051205120bemsol fif to dcnl use or a loaded sphere model dict dcnl meg bool dcnl if true default include meg computations dcnl eeg bool dcnl if true default include eeg computations dcnl mindist float dcnl minimum distance of sources from inner skull surface in mm dcnl ignore ref bool dcnl if true do not include reference channels in compensation this dcnl option should be true for kit files since forward computation dcnl with reference channels is not currently supported dcnl n jobs int dcnl number of jobs to run in parallel dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl fwd instance of forward dcnl the forward solution dcnl see also dcnl convert forward solution dcnl notes dcnl the grad option from mnec to compute gradients is not implemented dcnl here dcnl to create a fixedorientation forward solution use this function dcnl followed by func mne convert forward solution
convert dipole object to source estimate and calculate forward operator dcnl the instance of dipole is converted to a discrete source space dcnl which is then combined with a bem or a sphere model and dcnl the sensor information in info to form a forward operator dcnl the source estimate object with the forward operator can be projected to dcnl sensorspace using func mne simulation simulate evoked dcnl note if the unique time points of the dipole object are unevenly dcnl spaced the first output will be a list of singletimepoint dcnl source estimates dcnl parameters dcnl dipole instance of dipole dcnl dipole object containing position orientation and amplitude of dcnl one or more dipoles multiple simultaneous dipoles may be defined by dcnl assigning them identical times dcnl bem str | dict dcnl the bem filename str or a loaded sphere model dict dcnl info instance of info dcnl the measurement information dictionary it is sensorinformation etc dcnl e g from a real data file dcnl trans str | none dcnl the head< mri transform filename must be provided unless bem dcnl is a sphere model dcnl n jobs int dcnl number of jobs to run in parallel used in making forward solution dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl fwd instance of forward dcnl the forward solution corresponding to the source estimate s dcnl stc instance of volsourceestimate | list of volsourceestimate dcnl the dipoles converted to a discrete set of points and associated dcnl time courses if the time points of the dipole are unevenly spaced dcnl a list of singletimepoint source estimates are returned dcnl see also dcnl mne simulation simulate evoked dcnl notes dcnl versionadded 0 12 0
convert forward solution matrices to dicts
compute the next legendre polynomial and its derivatives
get legendre polynomials expanded about x
get legendre polynomial derivatives expanded about x
return a generated lut of legendre derivative polynomial coeffs
lead field dot products using legendre polynomial p n series
lead field dot products using legendre polynomial p n series dcnl parameters dcnl beta array shape n points n points 1 dcnl coefficients of the integration dcnl ctheta array shape n points n points 1 dcnl cosine of the angle between the sensor integration points dcnl lut fun callable dcnl lookup table for evaluating legendre polynomials dcnl n fact array dcnl coefficients in the integration sum dcnl volume integral bool dcnl if true compute volume integral dcnl returns dcnl sums array shape 4 n points n points dcnl the results
lead field dot product computation for m eeg in the sphere model dcnl parameters dcnl r float dcnl the integration radius it is used to calculate beta as dcnl beta r r lr1 lr2 dcnl rr1 array shape n points x 3 dcnl normalized position vectors of integrations points in first sensor dcnl rr2s list dcnl normalized position vector of integration points in second sensor dcnl lr1 array shape n points x 1 dcnl magnitude of position vector of integration points in first sensor dcnl lr2s list dcnl magnitude of position vector of integration points in second sensor dcnl cosmags1 array shape n points x 1 dcnl direction of integration points in first sensor dcnl cosmags2s list dcnl direction of integration points in second sensor dcnl w1 array shape n points x 1 | none dcnl weights of integration points in the first sensor dcnl w2s list dcnl weights of integration points in the second sensor dcnl volume integral bool dcnl if true compute volume integral dcnl lut callable dcnl lookup table for evaluating legendre polynomials dcnl n fact array dcnl coefficients in the integration sum dcnl ch type str dcnl the channel type it can be meg or eeg dcnl returns dcnl result float dcnl the integration sum
perform the lead field dot product integrations dcnl parameters dcnl intrad float dcnl the integration radius it is used to calculate beta as dcnl beta intrad intrad r1 r2 dcnl volume bool dcnl if true perform volume integral dcnl coils list of dict dcnl the coils dcnl r0 array shape 3 x 1 dcnl the origin of the sphere dcnl ch type str dcnl the channel type it can be meg or eeg dcnl lut callable dcnl lookup table for evaluating legendre polynomials dcnl n fact array dcnl coefficients in the integration sum dcnl n jobs int dcnl number of jobs to run in parallel dcnl returns dcnl products array shape n coils n coils dcnl the integration products
parallelize
compute lead field dot product integrations between two coil sets dcnl the code is a direct translation of mnec code found in dcnl mne map data lead dots c dcnl parameters dcnl intrad float dcnl the integration radius it is used to calculate beta as dcnl beta intrad intrad r1 r2 dcnl volume bool dcnl if true compute volume integral dcnl coils1 list of dict dcnl the original coils dcnl coils2 list of dict dcnl the coils to which data is being mapped dcnl r0 array shape 3 x 1 dcnl the origin of the sphere dcnl ch type str dcnl the channel type it can be meg or eeg dcnl lut callable dcnl lookup table for evaluating legendre polynomials dcnl n fact array dcnl coefficients in the integration sum dcnl returns dcnl products array shape n coils n coils dcnl the integration products
compute the map construction products dcnl parameters dcnl intrad float dcnl the integration radius it is used to calculate beta as dcnl beta intrad intrad r1 r2 dcnl volume bool dcnl if true compute a volume integral dcnl coils list of dict dcnl the coils dcnl surf dict dcnl the surface on which the field is interpolated dcnl sel array dcnl indices of the surface vertices to select dcnl r0 array shape 3 x 1 dcnl the origin of the sphere dcnl ch type str dcnl the channel type it can be meg or eeg dcnl lut callable dcnl lookup table for legendre polynomials dcnl n fact array dcnl coefficients in the integration sum dcnl n jobs int dcnl number of jobs to run in parallel dcnl returns dcnl products array shape n coils n coils dcnl the integration products
parallelize dcnl parameters dcnl refl array | none dcnl if ch type is eeg the magnitude of position vector of the dcnl virtual reference never used dcnl lsurf array dcnl magnitude of position vector of the surface points dcnl rlens list of arrays of length n coils dcnl magnitude of position vector dcnl this nn array shape n vertices 3 dcnl surface normals dcnl cosmags list of array dcnl direction of the integration points in the coils dcnl ws list of array dcnl integration weights of the coils dcnl volume bool dcnl if true compute volume integral dcnl lut callable dcnl lookup table for evaluating legendre polynomials dcnl n fact array dcnl coefficients in the integration sum dcnl ch type str dcnl meg or eeg dcnl idx array shape n coils x 1 dcnl index of coil dcnl returns dcnl products array shape n coils n coils dcnl the integration products
construct a block diagonal from a packed structure dcnl you have to try it on a matrix to see what it s doing dcnl if a is not sparse then returns a sparse block diagonal bd dcnl diagonalized from the dcnl elements in a dcnl a is ma x na comprising bdn na n blocks of submatrices dcnl each submatrix is ma x n and these submatrices are dcnl placed down the diagonal of the matrix dcnl if a is already sparse then the operation is reversed yielding dcnl a block dcnl row matrix where each set of n columns corresponds to a block element dcnl from the block diagonal dcnl parameters dcnl a array dcnl the matrix dcnl n int dcnl the block size dcnl returns dcnl bd sparse matrix dcnl the block diagonal matrix
construct an inverse block diagonal from a packed structure dcnl you have to try it on a matrix to see what it s doing dcnl a is ma x na comprising bdn na n blocks of submatrices dcnl each submatrix is ma x n and the inverses of these submatrices dcnl are placed down the diagonal of the matrix dcnl parameters dcnl a array dcnl the matrix dcnl n int dcnl the block size dcnl returns dcnl bd sparse matrix dcnl the block diagonal matrix
check we have an appropriate tag
read all interesting stuff for one forward solution
read light measurement info from forward operator dcnl parameters dcnl tree tree dcnl fif tree structure dcnl fid file id dcnl the file id dcnl returns dcnl info instance of info dcnl the measurement info
get subject id from inverse operator
merge loaded meg and eeg forward dicts into one dict
read a forward solution a k a lead field dcnl parameters dcnl fname string dcnl the file name which should end with fwd fif or fwd fif gz dcnl force fixed bool optional default false dcnl force fixed source orientation mode dcnl surf ori bool optional default false dcnl use surfacebased source coordinate system note that force fixed true dcnl implies surf ori true dcnl include list optional dcnl list of names of channels to include if empty all channels dcnl are included dcnl exclude list optional dcnl list of names of channels to exclude if empty include all dcnl channels dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl fwd instance of forward dcnl the forward solution dcnl see also dcnl write forward solution make forward solution
convert forward solution between different source orientations dcnl parameters dcnl fwd forward dcnl the forward solution to modify dcnl surf ori bool optional default false dcnl use surfacebased source coordinate system note that force fixed true dcnl implies surf ori true dcnl force fixed bool optional default false dcnl force fixed source orientation mode dcnl copy bool dcnl whether to return a new instance or modify in place dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl fwd forward dcnl the modified forward solution
write forward solution to a file dcnl parameters dcnl fname str dcnl file name to save the forward solution to it should end with fwd fif dcnl or fwd fif gz dcnl fwd forward dcnl forward solution dcnl overwrite bool dcnl if true overwrite destination file if it exists dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl see also dcnl read forward solution
convert the forward solution to fixed ori from free
check if the forward operator is fixed orientation
write measurement info stored in forward solution dcnl parameters dcnl fid file id dcnl the file id dcnl info instance of info dcnl the measurement info
compute orientation prior dcnl parameters dcnl forward dict dcnl forward operator dcnl loose float in 0 1 or none dcnl the loose orientation parameter dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl orient prior array dcnl orientation priors
restrict gain matrix entries for optimal depth weighting
compute weighting for depth prior
select the vertex indices of a source space using a source estimate
fill the measurement info of a raw or evoked object
apply forward model and return data times ch names
project source space currents to sensor space using a forward operator dcnl the sensor space data is computed for all channels present in fwd use dcnl pick channels forward or pick types forward to restrict the solution to a dcnl subset of channels dcnl the function returns an evoked object which is constructed from dcnl evoked template the evoked template should be from the same meg system on dcnl which the original data was acquired an exception will be raised if the dcnl forward operator contains channels that are not present in the template dcnl parameters dcnl fwd forward dcnl forward operator to use has to be fixedorientation dcnl stc sourceestimate dcnl the source estimate from which the sensor space data is computed dcnl info instance of info dcnl measurement info to generate the evoked dcnl start int optional dcnl index of first time sample index not time is seconds dcnl stop int optional dcnl index of first time sample not to include index not time is seconds dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl evoked evoked dcnl evoked object with computed sensor space data dcnl see also dcnl apply forward raw compute sensor space data and return a raw object
project source space currents to sensor space using a forward operator dcnl the sensor space data is computed for all channels present in fwd use dcnl pick channels forward or pick types forward to restrict the solution to a dcnl subset of channels dcnl the function returns a raw object which is constructed using provided dcnl info the info object should be from the same meg system on which the dcnl original data was acquired an exception will be raised if the forward dcnl operator contains channels that are not present in the info dcnl parameters dcnl fwd forward dcnl forward operator to use has to be fixedorientation dcnl stc sourceestimate dcnl the source estimate from which the sensor space data is computed dcnl info instance of info dcnl the measurement info dcnl start int optional dcnl index of first time sample index not time is seconds dcnl stop int optional dcnl index of first time sample not to include index not time is seconds dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl raw raw object dcnl raw object with computed sensor space data dcnl see also dcnl apply forward compute sensor space data and return an evoked object
restrict forward operator to active sources in a source estimate dcnl parameters dcnl fwd forward dcnl forward operator dcnl stc sourceestimate dcnl source estimate dcnl returns dcnl fwd out dict dcnl restricted forward operator dcnl see also dcnl restrict forward to label
restrict forward operator to labels dcnl parameters dcnl fwd forward dcnl forward operator dcnl labels label object | list dcnl label object or list of label objects dcnl returns dcnl fwd out dict dcnl restricted forward operator dcnl see also dcnl restrict forward to stc
calculate a forward solution for a subject using mnec routines dcnl this is kept around for testing purposes dcnl this function wraps to mne do forward solution so the mne dcnl commandline tools must be installed and accessible from python dcnl parameters dcnl subject str dcnl name of the subject dcnl meas raw | epochs | evoked | str dcnl if raw or epochs a temporary evoked file will be created and dcnl saved to a temporary directory if str then it should be a dcnl filename to a file with measurement information the mne dcnl commandline tools can understand i e raw or evoked dcnl fname str | none dcnl destination forward solution filename if none the solution dcnl will be created in a temporary directory loaded and deleted dcnl src str | none dcnl source space name if none the mne default is used dcnl spacing str dcnl the spacing to use can be for spacing in mm ico for a dcnl recursively subdivided icosahedron or oct for a recursively dcnl subdivided octahedron e g spacing ico4 default is 7 mm dcnl mindist float | str | none dcnl minimum distance of sources from inner skull surface in mm dcnl if none the mne default value is used if string all dcnl indicates to include all points dcnl bem str | none dcnl name of the bem to use e g sample512051205120 if none dcnl default the mne default will be used dcnl mri str | none dcnl the name of the trans file in fif format dcnl if none trans must not be none dcnl trans dict | str | none dcnl file name of the trans file in text format dcnl if none mri must not be none dcnl eeg bool dcnl if true default include eeg computations dcnl meg bool dcnl if true default include meg computations dcnl fixed bool dcnl if true make a fixedorientation forward solution default dcnl false note that fixedorientation inverses can still be dcnl created from freeorientation forward solutions dcnl grad bool dcnl if true compute the gradient of the field with respect to the dcnl dipole coordinates as well default false dcnl mricoord bool dcnl if true calculate in mri coordinates default false dcnl overwrite bool dcnl if true the destination file if it exists will be overwritten dcnl if false default an error will be raised if the file exists dcnl subjects dir none | str dcnl override the subjects dir environment variable dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl see also dcnl make forward solution dcnl returns dcnl fwd forward dcnl the generated forward solution
average forward solutions dcnl parameters dcnl fwds list of forward dcnl forward solutions to average each entry dict should be a dcnl forward solution dcnl weights array | none dcnl weights to apply to each forward solution in averaging if none dcnl forward solutions will be equally weighted weights must be dcnl nonnegative and will be adjusted to sum to one dcnl returns dcnl fwd forward dcnl the averaged forward solution
determine if the coil is axial
create adhoc noise covariance
set up dot products
do the hairy computations
find mapping from one set of channels to another dcnl parameters dcnl info from instance of info dcnl the measurement data to interpolate from dcnl info to instance of info dcnl the measurement info to interpolate to dcnl mode str dcnl either accurate or fast determines the quality of the dcnl legendre polynomial expansion used fast should be sufficient dcnl for most applications dcnl returns dcnl mapping array dcnl a mapping matrix of shape len pick to x len pick from
compute virtual evoked using interpolated fields in mag grad channels dcnl parameters dcnl evoked instance of mne evoked dcnl the evoked object dcnl ch type str dcnl the destination channel type it can be mag or grad dcnl mode str dcnl either accurate or fast determines the quality of the dcnl legendre polynomial expansion used fast should be sufficient dcnl for most applications dcnl returns dcnl evoked instance of mne evoked dcnl the transformed evoked object containing only virtual channels
remap m eeg data to a surface dcnl parameters dcnl info instance of info dcnl measurement info dcnl surf dict dcnl the surface to map the data to the required fields are rr dcnl nn and coord frame must be in head coordinates dcnl ch type str dcnl must be either meg or eeg determines the type of field dcnl trans none | dict dcnl if none no transformation applied should be a head< mri dcnl transformation dcnl mode str dcnl either accurate or fast determines the quality of the dcnl legendre polynomial expansion used fast should be sufficient dcnl for most applications dcnl n jobs int dcnl number of permutations to run in parallel requires joblib package dcnl origin arraylike shape 3 | str dcnl origin of internal and external multipolar moment space in head dcnl coords and in meters the default is auto which means dcnl a headdigitizationbased origin fit dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl mapping array dcnl a n vertices x n sensors array that remaps the meg or eeg data dcnl as new data np dot mapping data
compute surface maps used for field display in 3d dcnl parameters dcnl evoked evoked | epochs | raw dcnl the measurement file need to have info attribute dcnl trans str | auto | none dcnl the full path to the trans fif file produced during dcnl coregistration if present or found using auto dcnl the maps will be in mri coordinates dcnl if none map for eeg data will not be available dcnl subject str | none dcnl the subject name corresponding to freesurfer environment dcnl variable subject if none map for eeg data will not be available dcnl subjects dir str dcnl the path to the freesurfer subjects reconstructions dcnl it corresponds to freesurfer environment variable subjects dir dcnl ch type none | eeg | meg dcnl if none a map for each available channel type will be returned dcnl else only the specified type will be used dcnl mode str dcnl either accurate or fast determines the quality of the dcnl legendre polynomial expansion used fast should be sufficient dcnl for most applications dcnl meg surf str dcnl should be helmet or head to specify in which surface dcnl to compute the meg field map the default value is helmet dcnl origin arraylike shape 3 | str dcnl origin of internal and external multipolar moment space in head dcnl coords and in meters can be auto which means dcnl a headdigitizationbased origin fit default is 0 0 0 04 dcnl versionadded 0 11 dcnl n jobs int dcnl the number of jobs to run in parallel dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl versionadded 0 11 dcnl returns dcnl surf maps list dcnl the surface maps to be used for field plots the list contains dcnl separate ones for meg and eeg if both meg and eeg are present
select some events dcnl parameters dcnl events ndarray dcnl array as returned by mne find events dcnl include int | list | none dcnl a event id to include or a list of them dcnl if none all events are included dcnl exclude int | list | none dcnl a event id to exclude or a list of them dcnl if none no event is excluded if include is not none dcnl the exclude parameter is ignored dcnl step bool dcnl if true default is false events have a step format according dcnl to the argument output step in the function find events dcnl in this case the two last columns are considered in inclusion dcnl exclusion criteria dcnl returns dcnl events array shape n events 3 dcnl the list of events
define new events by cooccurrence of existing events dcnl this function can be used to evaluate events depending on the dcnl temporal lag to another event for example this can be used to dcnl analyze evoked responses which were followed by a button press within dcnl a defined time window dcnl parameters dcnl events ndarray dcnl array as returned by mne find events dcnl reference id int dcnl the reference event the event defining the epoch of interest dcnl target id int dcnl the target event the event cooccurring in within a certain time dcnl window around the reference event dcnl sfreq float dcnl the sampling frequency of the data dcnl tmin float dcnl the lower limit in seconds from the target event dcnl tmax float dcnl the upper limit border in seconds from the target event dcnl new id int dcnl new id for the new event dcnl fill na int | none dcnl fill event to be inserted if target is not available within the time dcnl window specified if none the null events will be dropped dcnl returns dcnl new events ndarray dcnl the new defined events dcnl lag ndarray dcnl time lag between reference and target in milliseconds
aux function
read events from fif or text file dcnl see ref tut epoching and averaging as well as ref ex read events dcnl for more information about events dcnl parameters dcnl filename string dcnl name of the input file dcnl if the extension is fif events are read assuming dcnl the file is in fif format otherwise e g eve dcnl lst txt events are read as coming from text dcnl note that new format event files do not contain dcnl the time column used to be the second column dcnl include int | list | none dcnl a event id to include or a list of them dcnl if none all events are included dcnl exclude int | list | none dcnl a event id to exclude or a list of them dcnl if none no event is excluded if include is not none dcnl the exclude parameter is ignored dcnl mask int | none dcnl the value of the digital mask to apply to the stim channel values dcnl if none default no masking is performed dcnl mask type and | not and dcnl the type of operation between the mask and the trigger dcnl choose and for mnec masking behavior the default not and dcnl will change to and in 0 16 dcnl versionadded 0 13 dcnl returns dcnl events array shape n events 3 dcnl the list of events dcnl see also dcnl find events write events dcnl notes dcnl this function will discard the offset line i e first line with zero dcnl event number if it is present in a text file dcnl for more information on mask and mask type see dcnl func mne find events
write events to file dcnl parameters dcnl filename string dcnl name of the output file dcnl if the extension is fif events are written in dcnl binary fif format otherwise e g eve lst dcnl txt events are written as plain text dcnl note that new format event files do not contain dcnl the time column used to be the second column dcnl event list array shape n events 3 dcnl the list of events dcnl see also dcnl read events
find all steps in data from a stim channel dcnl parameters dcnl raw raw object dcnl the raw data dcnl pad start none | int dcnl values to assume outside of the stim channel e g if pad start 0 and dcnl the stim channel starts with value 5 an event of 0 0 5 will be dcnl inserted at the beginning with none no steps will be inserted dcnl pad stop none | int dcnl values to assume outside of the stim channel see pad start dcnl merge int dcnl merge steps occurring in neighboring samples the integer value dcnl indicates over how many samples events should be merged and the sign dcnl indicates in which direction they should be merged negative means dcnl towards the earlier event positive towards the later event dcnl stim channel none | string | list of string dcnl name of the stim channel or all the stim channels dcnl affected by the trigger if none the config variables dcnl mne stim channel mne stim channel 1 mne stim channel 2 dcnl etc are read if these are not found it will default to dcnl sti101 or sti 014 whichever is present dcnl returns dcnl steps array shape n samples 3 dcnl for each step in the stim channel the values sample v from v to dcnl the first column contains the event time in samples the first sample dcnl with the new value the second column contains the stim channel value dcnl before the step and the third column contains value after the step dcnl see also dcnl find events more sophisticated options for finding events in a raw file
help find events
find events from raw file dcnl see ref tut epoching and averaging as well as ref ex read events dcnl for more information about events dcnl parameters dcnl raw raw object dcnl the raw data dcnl stim channel none | string | list of string dcnl name of the stim channel or all the stim channels dcnl affected by the trigger if none the config variables dcnl mne stim channel mne stim channel 1 mne stim channel 2 dcnl etc are read if these are not found it will fall back to dcnl sti 014 if present then fall back to the first channel of type dcnl stim if present dcnl output onset | offset | step dcnl whether to report when events start when events end or both dcnl consecutive bool | increasing dcnl if true consider instances where the value of the events dcnl channel changes without first returning to zero as multiple dcnl events if false report only instances where the value of the dcnl events channel changes from to zero if increasing report dcnl adjacent events only when the second event code is greater than dcnl the first dcnl min duration float dcnl the minimum duration of a change in the events channel required dcnl to consider it as an event in seconds dcnl shortest event int dcnl minimum number of samples an event must last default is 2 if the dcnl duration is less than this an exception will be raised dcnl mask int | none dcnl the value of the digital mask to apply to the stim channel values dcnl if none default no masking is performed dcnl uint cast bool dcnl if true default false do a cast to uint16 on the channel dcnl data this can be used to fix a bug with sti101 and sti014 in dcnl neuromag acquisition setups that use channel sti016 channel 16 dcnl turns data into e g 32768 similar to mne fix stim14 32 dcnl in mnec dcnl versionadded 0 12 dcnl mask type and | not and dcnl the type of operation between the mask and the trigger dcnl choose and for mnec masking behavior the default not and dcnl will change to and in 0 16 dcnl versionadded 0 13 dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl events array shape n events 3 dcnl all events that were found the first column contains the event time dcnl in samples and the third column contains the event id for output dcnl onset or step the second column contains the value of the stim dcnl channel immediately before the event step for output offset dcnl the second column contains the value of the stim channel after the dcnl event offset dcnl see also dcnl find stim steps find all the steps in the stim channel dcnl read events read events from disk dcnl write events write events to disk dcnl notes dcnl warning if you are working with downsampled data events computed dcnl before decimation are no longer valid please recompute dcnl your events after decimation but note this reduces the dcnl precision of event timing dcnl examples dcnl consider data with a stim channel that looks like dcnl 0 32 32 33 32 0 dcnl by default find events returns all samples at which the value of the dcnl stim channel increases dcnl print find events raw doctest +skip dcnl 1 0 32 dcnl 3 32 33 dcnl if consecutive is false find events only returns the samples at which dcnl the stim channel changes from zero to a nonzero value dcnl print find events raw consecutive false doctest +skip dcnl 1 0 32 dcnl if consecutive is true find events returns samples at which the dcnl event changes regardless of whether it first returns to zero dcnl print find events raw consecutive true doctest +skip dcnl 1 0 32 dcnl 3 32 33 dcnl 4 33 32 dcnl if output is offset find events returns the last sample of each event dcnl instead of the first one dcnl print find events raw consecutive true doctest +skip dcnl output offset dcnl 2 33 32 dcnl 3 32 33 dcnl 4 0 32 dcnl if output is step find events returns the samples at which an event dcnl starts or ends dcnl print find events raw consecutive true doctest +skip dcnl output step dcnl 1 0 32 dcnl 3 32 33 dcnl 4 33 32 dcnl 5 32 0 dcnl to ignore spurious events it is also possible to specify a minimum dcnl event duration assuming our events channel has a sample rate of dcnl 1000 hz dcnl print find events raw consecutive true doctest +skip dcnl min duration 0 002 dcnl 1 0 32 dcnl for the digital mask if mask type is set to and it will take the dcnl binary representation of the digital mask e g 5 00000101 and will dcnl allow the values to pass where mask is one e g dcnl 7 0000111 < trigger value dcnl 37 0100101 < mask dcnl 5 0000101 dcnl for the digital mask if mask type is set to not and it will take the dcnl binary representation of the digital mask e g 5 00000101 and will dcnl block the values where mask is one e g dcnl 7 0000111 < trigger value dcnl 37 0100101 < mask dcnl 2 0000010
mask digital trigger values
merge a set of events dcnl parameters dcnl events array shape n events in 3 dcnl events dcnl ids array of int dcnl the ids of events to merge dcnl new id int dcnl the new id dcnl replace events bool dcnl if true default old event ids are replaced otherwise dcnl new events will be added to the old event list dcnl returns dcnl new events array shape n events out 3 dcnl the new events dcnl examples dcnl here is quick example of the behavior dcnl events 134 0 1 341 0 2 502 0 3 dcnl merge events events 1 2 12 replace events true dcnl array 134 0 12 dcnl 341 0 12 dcnl 502 0 3 dcnl merge events events 1 2 12 replace events false dcnl array 134 0 1 dcnl 134 0 12 dcnl 341 0 2 dcnl 341 0 12 dcnl 502 0 3 dcnl notes dcnl rather than merging events you can use hierarchical event id dcnl in epochs for example here dcnl event id auditory left 1 auditory right 2 dcnl and the condition auditory would correspond to either 1 or 2
shift an event dcnl parameters dcnl events array shape n events 3 dcnl the events dcnl ids array int dcnl the ids of events to shift dcnl tshift float dcnl timeshift event use positive value tshift for forward shifting dcnl the event and negative value for backward shift dcnl sfreq float dcnl the sampling frequency of the data dcnl returns dcnl new events array dcnl the new events
make a set of events separated by a fixed duration dcnl parameters dcnl raw instance of raw dcnl a raw object to use the data from dcnl id int dcnl the id to use dcnl start float dcnl time of first event dcnl stop float | none dcnl maximum time of last event if none events extend to the end dcnl of the recording dcnl duration float dcnl the duration to separate events by dcnl first samp bool dcnl if true default times will have raw first samp added to them as dcnl in func mne find events this behavior is not desirable if the dcnl returned events will be combined with event times that already dcnl have raw first samp added to them e g event times that come dcnl from func mne find events dcnl returns dcnl new events array dcnl the new events
concatenate event lists to be compatible with concatenate raws dcnl this is useful for example if you processed and or changed dcnl events in raw files separately before combining them using dcnl func mne concatenate raws dcnl parameters dcnl events list of arrays dcnl list of event arrays typically each extracted from a dcnl corresponding raw file that is being concatenated dcnl first samps list or array of int dcnl first sample numbers of the raw files concatenated dcnl last samps list or array of int dcnl last sample numbers of the raw files concatenated dcnl returns dcnl events array dcnl the concatenated events dcnl see also dcnl mne concatenate raws
parse a config file like ave and cov files dcnl parameters dcnl fname string dcnl config file name dcnl returns dcnl conditions list of dict dcnl each condition is indexed by the event type dcnl a condition contains as keys dcnl tmin tmax name grad reject mag reject dcnl eeg reject eog reject
read rejection parameters from cov or ave config file dcnl parameters dcnl fname str dcnl filename to read
read flat channel rejection parameters from cov or ave config file
perform a 1way anova dcnl the oneway anova tests the null hypothesis that 2 or more groups have dcnl the same population mean the test is applied to samples from two or dcnl more groups possibly with differing sizes dcnl parameters dcnl sample1 sample2 array like dcnl the sample measurements should be given as arguments dcnl returns dcnl fvalue float dcnl the computed fvalue of the test dcnl pvalue float dcnl the associated pvalue from the fdistribution dcnl notes dcnl the anova test has important assumptions that must be satisfied in order dcnl for the associated pvalue to be valid dcnl 1 the samples are independent dcnl 2 each sample is from a normally distributed population dcnl 3 the population standard deviations of the groups are all equal this dcnl property is known as homocedasticity dcnl if these assumptions are not true for a given set of data it may still be dcnl possible to use the kruskalwallis htest stats kruskal although with dcnl some loss of power dcnl the algorithm is from heiman2 pp 3947 dcnl see scipy stats f oneway that should give the same results while dcnl being less efficient dcnl references dcnl 1 lowry richard concepts and applications of inferential dcnl statistics chapter 14 dcnl http faculty vassar edu lowry ch14pt1 html dcnl 2 heiman g w research methods in statistics 2002
call scipy stats f oneway but return only fvalue
map effects to indices
henson s factor coding see num2binvec
set up contrasts
compute fvalue thesholds for a twoway anova dcnl parameters dcnl n subjects int dcnl the number of subjects to be analyzed dcnl factor levels listlike dcnl the number of levels per factor dcnl effects str dcnl a string denoting the effect to be returned the following dcnl mapping is currently supported dcnl a main effect of a dcnl b main effect of b dcnl a b interaction effect dcnl a+b both main effects dcnl a b all three effects dcnl pvalue float dcnl the pvalue to be thresholded dcnl returns dcnl f threshold list | float dcnl list of fvalues for each effect if the number of effects dcnl requested 2 else float dcnl see also dcnl f oneway dcnl f mway rm dcnl notes dcnl versionadded 0 10
compute mway repeated measures anova for fully balanced designs dcnl parameters dcnl data ndarray dcnl 3d array where the first two dimensions are compliant dcnl with a subjects x conditions scheme where the first dcnl factor repeats slowest dcnl a1b1 a1b2 a2b1 a2b2 dcnl subject 1 1 34 2 53 0 97 1 74 dcnl subject dcnl subject k 2 45 7 90 3 09 4 76 dcnl the last dimensions is thought to carry the observations dcnl for mass univariate analysis dcnl factor levels listlike dcnl the number of levels per factor dcnl effects str | list dcnl a string denoting the effect to be returned the following dcnl mapping is currently supported example with 2 factors dcnl a main effect of a dcnl b main effect of b dcnl a b interaction effect dcnl a+b both main effects dcnl a b all three effects dcnl all all effects equals a b in a 2 way design dcnl if list effect names are used a b a b dcnl alpha float dcnl the significance threshold dcnl correction bool dcnl the correction method to be employed if one factor has more than two dcnl levels if true sphericity correction using the greenhousegeisser dcnl method will be applied dcnl return pvals bool dcnl if true return p values corresponding to f values dcnl returns dcnl f vals ndarray dcnl an array of f values with length corresponding to the number dcnl of effects estimated the shape depends on the number of effects dcnl estimated dcnl p vals ndarray dcnl if not requested via return pvals defaults to an empty array dcnl see also dcnl f oneway dcnl f threshold mway rm dcnl notes dcnl versionadded 0 10
ndim permutations with repetitions of a b dcnl returns an array with all the possible permutations with repetitions of dcnl 0 1 in ndim dimensions the array is shaped as 2 ndim ndim and is dcnl ordered with the last index changing fastest for examble for ndim 3 dcnl examples dcnl bin perm rep 3 dcnl array 0 0 0 dcnl 0 0 1 dcnl 0 1 0 dcnl 0 1 1 dcnl 1 0 0 dcnl 1 0 1 dcnl 1 1 0 dcnl 1 1 1
aux function for permutation t test for parallel comp
one sample paired sample permutation test based on a tstatistic dcnl this function can perform the test on one variable or dcnl simultaneously on multiple variables when applying the test to multiple dcnl variables the tmax method is used for adjusting the pvalues of each dcnl variable for multiple comparisons like bonferroni correction this method dcnl adjusts pvalues in a way that controls the familywise error rate dcnl however the permutation method will be more dcnl powerful than bonferroni correction when different variables in the test dcnl are correlated dcnl parameters dcnl x array of shape n samples x n tests dcnl data of size number of samples aka number of observations times dcnl number of tests aka number of variables dcnl n permutations int or all dcnl number of permutations if n permutations is all all possible dcnl permutations are tested 2 n samples it s the exact test that dcnl can be untractable when the number of samples is big e g 20 dcnl if n permutations 2 n samples then the exact test is performed dcnl tail 1 or 0 or 1 default 0 dcnl if tail is 1 the alternative hypothesis is that the dcnl mean of the data is greater than 0 upper tailed test if tail is 0 dcnl the alternative hypothesis is that the mean of the data is different dcnl than 0 two tailed test if tail is 1 the alternative hypothesis dcnl is that the mean of the data is less than 0 lower tailed test dcnl n jobs int dcnl number of cpus to use for computation dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl t obs array of shape n tests dcnl tstatistic observed for all variables dcnl p values array of shape n tests dcnl pvalues for all the tests aka variables dcnl h0 array of shape n permutations dcnl tstatistic obtained by permutations and tmax trick for multiple dcnl comparison dcnl notes dcnl a reference among many in field of neuroimaging dcnl nichols t e holmes a p 2002 nonparametric permutation tests dcnl for functional neuroimaging a primer with examples dcnl human brain mapping 15 125 dcnl overview of standard nonparametric randomization and permutation dcnl testing applied to neuroimaging data e g fmri dcnl doi http dx doi org 10 1002 hbm 1058
form spatial clusters using neighbor lists dcnl this is equivalent to get components with n times 1 with a properly dcnl reconfigured connectivity matrix formed as neighbors list
reassign cluster numbers
directly calculate connectivity dcnl this uses knowledge that time points are dcnl only connected to adjacent neighbors for data organized as time x space dcnl this algorithm time increases linearly with the number of time points dcnl compared to with the square for the standard graph algorithm dcnl this algorithm creates clusters for each time point using a method more dcnl efficient than the standard graph method but otherwise equivalent then dcnl combines these clusters across time points in a reasonable way
directly calculate connectivity dcnl this uses knowledge that time points are dcnl only connected to adjacent neighbors for data organized as time x space dcnl this algorithm time increases linearly with the number of time points dcnl compared to with the square for the standard graph algorithm
choose the most efficient version
get connected components from a mask and a connectivity matrix
find all clusters which are above below a certain threshold dcnl when doing a twotailed test tail 0 only points with the same dcnl sign will be clustered together dcnl parameters dcnl x 1d array dcnl data dcnl threshold float | dict dcnl where to threshold the statistic should be negative for tail 1 dcnl and positive for tail 0 or 1 can also be an dict for dcnl thresholdfree cluster enhancement dcnl tail 1 | 0 | 1 dcnl type of comparison dcnl connectivity sparse matrix in coo format none or list dcnl defines connectivity between features the matrix is assumed to dcnl be symmetric and only the upper triangular half is used dcnl if connectivity is a list it is assumed that each entry stores the dcnl indices of the spatial neighbors in a spatiotemporal dataset x dcnl default is none i e a regular lattice connectivity dcnl max step int dcnl if connectivity is a list this defines the maximal number of steps dcnl between vertices along the second dimension typically time to be dcnl considered connected dcnl include 1d bool array or none dcnl mask to apply to the data of points to cluster if none all points dcnl are used dcnl partitions array of int or none dcnl an array same size as x of integers indicating which points belong dcnl to each partition dcnl t power float dcnl power to raise the statistical values usually tvalues by before dcnl summing sign will be retained note that t power 0 will give a dcnl count of nodes in each cluster t power 1 will weight each node by dcnl its statistical score dcnl show info bool dcnl if true display information about thresholds used for tfce should dcnl only be done for the standard permutation dcnl returns dcnl clusters list of slices or list of arrays boolean masks dcnl we use slices for 1d signals and mask to multidimensional dcnl arrays dcnl sums array dcnl sum of x values in clusters
deal with partitions and pass the work to find clusters 1dir
actually call the clustering algorithm
convert to the old format of clusters which were bool arrays
convert to the old format of clusters which were bool arrays
get pvalues from stats values given an h0 distribution dcnl for each stat compute a pvalue as percentile of its statistics dcnl within all statistics in surrogate data
perform ttest with variance adjustment and no pvalue calculation dcnl parameters dcnl x array dcnl array to return tvalues for dcnl sigma float dcnl the variance estate will be given by var + sigma max var or dcnl var + sigma depending on method by default this is 0 no dcnl adjustment see notes for details dcnl method str dcnl if relative the minimum variance estimate will be sigma max var dcnl if absolute the minimum variance estimate will be sigma dcnl returns dcnl t array dcnl tvalues potentially adjusted using the hat method dcnl notes dcnl one can use the conversion dcnl threshold scipy stats distributions t ppf p thresh n samples 1 dcnl to convert a desired pvalue threshold to tvalue threshold don t forget dcnl that for twotailed tests p thresh in the above should be divided by 2 dcnl to use the hat adjustment method a value of sigma 1e3 may be a dcnl reasonable choice see ridgway et al 2012 the problem of low variance dcnl voxels in statistical parametric mapping a new hat avoids a haircut dcnl neuroimage 2012 feb 1 59 3 213141
clusterlevel statistical permutation test dcnl for a list of ndarrays of data e g 2d for time series or 3d for dcnl timefrequency power values calculate some statistics corrected for dcnl multiple comparisons using permutations and cluster level correction dcnl each element of the list x contains the data for one group of dcnl observations randomized data are generated with random partitions dcnl of the data dcnl parameters dcnl x list dcnl list of ndarrays containing the data each element of x contains dcnl the samples for one group first dimension of each element is the dcnl number of samples observations in this group the other dimensions dcnl are for the size of the observations for example if x x1 x2 dcnl with x1 shape 20 50 4 and x2 shape 17 50 4 one has dcnl 2 groups with respectively 20 and 17 observations in each dcnl each data point is of shape 50 4 dcnl threshold float | dict | none dcnl if threshold is none it will choose a tthreshold equivalent to dcnl p < 0 05 for the given number of withinsubject observations dcnl if a dict is used then thresholdfree cluster enhancement tfce dcnl will be used dcnl n permutations int dcnl the number of permutations to compute dcnl tail 1 or 0 or 1 default 0 dcnl if tail is 1 the statistic is thresholded above threshold dcnl if tail is 1 the statistic is thresholded below threshold dcnl if tail is 0 the statistic is thresholded on both sides of dcnl the distribution dcnl stat fun callable dcnl function called to calculate statistics must accept 1darrays as dcnl arguments default scipy stats f oneway dcnl connectivity sparse matrix dcnl defines connectivity between features the matrix is assumed to dcnl be symmetric and only the upper triangular half is used dcnl default is none i e a regular lattice connectivity dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl n jobs int dcnl number of permutations to run in parallel requires joblib package dcnl seed int or none dcnl seed the random number generator for results reproducibility dcnl max step int dcnl when connectivity is a n vertices x n vertices matrix specify the dcnl maximum number of steps between vertices along the second dimension dcnl typically time to be considered connected this is not used for full dcnl or none connectivity matrices dcnl exclude boolean array or none dcnl mask to apply to the data to exclude certain points from clustering dcnl e g medial wall vertices should be the same shape as x if none dcnl no points are excluded dcnl step down p float dcnl to perform a stepdowninjumps test pass a pvalue for clusters to dcnl exclude from each successive iteration default is zero perform no dcnl stepdown test since no clusters will be smaller than this value dcnl setting this to a reasonable value e g 0 05 can increase sensitivity dcnl but costs computation time dcnl t power float dcnl power to raise the statistical values usually fvalues by before dcnl summing sign will be retained note that t power 0 will give a dcnl count of nodes in each cluster t power 1 will weight each node by dcnl its statistical score dcnl out type str dcnl for arrays with connectivity this sets the output format for clusters dcnl if mask it will pass back a list of boolean mask arrays dcnl if indices it will pass back a list of lists where each list is the dcnl set of vertices in a given cluster note that the latter may use far dcnl less memory for large datasets dcnl check disjoint bool dcnl if true the connectivity matrix or list will be examined to dcnl determine of it can be separated into disjoint sets in some cases dcnl usually with connectivity as a list and many time points this dcnl can lead to faster clustering but results should be identical dcnl buffer size int or none dcnl the statistics will be computed for blocks of variables of size dcnl buffer size at a time this is option significantly reduces the dcnl memory requirements when n jobs 1 and memory sharing between dcnl processes is enabled see set cache dir as x will be shared dcnl between processes and each process only needs to allocate space dcnl for a small block of variables dcnl returns dcnl t obs array of shape n tests dcnl tstatistic observed for all variables dcnl clusters list dcnl list type defined by out type above dcnl cluster pv array dcnl pvalue for each cluster dcnl h0 array of shape n permutations dcnl max cluster level stats observed under permutation dcnl notes dcnl reference dcnl cluster permutation algorithm as described in dcnl maris oostenveld 2007 dcnl nonparametric statistical testing of eeg and megdata dcnl journal of neuroscience methods vol 164 no 1 pp 177190 dcnl doi 10 1016 j jneumeth 2007 03 024
nonparametric clusterlevel 1 sample ttest dcnl from a array of observations e g signal amplitudes or power spectrum dcnl estimates etc calculate if the observed mean significantly deviates dcnl from 0 the procedure uses a cluster analysis with permutation test dcnl for calculating corrected pvalues randomized data are generated with dcnl random sign flips dcnl parameters dcnl x array shape n samples p q or n samples p dcnl array where the first dimension corresponds to the dcnl samples observations xk can be a 1d or 2d array time series dcnl or tf image associated to the kth observation dcnl threshold float | dict | none dcnl if threshold is none it will choose a tthreshold equivalent to dcnl p < 0 05 for the given number of withinsubject observations dcnl if a dict is used then thresholdfree cluster enhancement tfce dcnl will be used dcnl n permutations int dcnl the number of permutations to compute dcnl tail 1 or 0 or 1 default 0 dcnl if tail is 1 the statistic is thresholded above threshold dcnl if tail is 1 the statistic is thresholded below threshold dcnl if tail is 0 the statistic is thresholded on both sides of dcnl the distribution dcnl stat fun function dcnl function used to compute the statistical map dcnl connectivity sparse matrix or none dcnl defines connectivity between features the matrix is assumed to dcnl be symmetric and only the upper triangular half is used dcnl this matrix must be square with dimension n vertices n times or dcnl n vertices default is none i e a regular lattice connectivity dcnl use square n vertices matrix for datasets with a large temporal dcnl extent to save on memory and computation time dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl n jobs int dcnl number of permutations to run in parallel requires joblib package dcnl seed int or none dcnl seed the random number generator for results reproducibility dcnl note that if n permutations 2^ n samples or 2^ n samples1 for dcnl twotailed tests this value will be ignored since an exact test dcnl full permutation test will be performed dcnl max step int dcnl when connectivity is a n vertices x n vertices matrix specify the dcnl maximum number of steps between vertices along the second dimension dcnl typically time to be considered connected this is not used for full dcnl or none connectivity matrices dcnl exclude boolean array or none dcnl mask to apply to the data to exclude certain points from clustering dcnl e g medial wall vertices should be the same shape as x if none dcnl no points are excluded dcnl step down p float dcnl to perform a stepdowninjumps test pass a pvalue for clusters to dcnl exclude from each successive iteration default is zero perform no dcnl stepdown test since no clusters will be smaller than this value dcnl setting this to a reasonable value e g 0 05 can increase sensitivity dcnl but costs computation time dcnl t power float dcnl power to raise the statistical values usually tvalues by before dcnl summing sign will be retained note that t power 0 will give a dcnl count of nodes in each cluster t power 1 will weight each node by dcnl its statistical score dcnl out type str dcnl for arrays with connectivity this sets the output format for clusters dcnl if mask it will pass back a list of boolean mask arrays dcnl if indices it will pass back a list of lists where each list is the dcnl set of vertices in a given cluster note that the latter may use far dcnl less memory for large datasets dcnl check disjoint bool dcnl if true the connectivity matrix or list will be examined to dcnl determine of it can be separated into disjoint sets in some cases dcnl usually with connectivity as a list and many time points this dcnl can lead to faster clustering but results should be identical dcnl buffer size int or none dcnl the statistics will be computed for blocks of variables of size dcnl buffer size at a time this is option significantly reduces the dcnl memory requirements when n jobs 1 and memory sharing between dcnl processes is enabled see set cache dir as x will be shared dcnl between processes and each process only needs to allocate space dcnl for a small block of variables dcnl returns dcnl t obs array of shape n tests dcnl tstatistic observed for all variables dcnl clusters list dcnl list type defined by out type above dcnl cluster pv array dcnl pvalue for each cluster dcnl h0 array of shape n permutations dcnl max cluster level stats observed under permutation dcnl notes dcnl reference dcnl cluster permutation algorithm as described in dcnl maris oostenveld 2007 dcnl nonparametric statistical testing of eeg and megdata dcnl journal of neuroscience methods vol 164 no 1 pp 177190 dcnl doi 10 1016 j jneumeth 2007 03 024
nonparametric clusterlevel 1 sample ttest for spatiotemporal data dcnl this function provides a convenient wrapper for data organized in the form dcnl observations x time x space to use permutation cluster 1samp test dcnl parameters dcnl x array dcnl array of shape observations x time x vertices dcnl threshold float | dict | none dcnl if threshold is none it will choose a tthreshold equivalent to dcnl p < 0 05 for the given number of withinsubject observations dcnl if a dict is used then thresholdfree cluster enhancement tfce dcnl will be used dcnl n permutations int dcnl the number of permutations to compute dcnl tail 1 or 0 or 1 default 0 dcnl if tail is 1 the statistic is thresholded above threshold dcnl if tail is 1 the statistic is thresholded below threshold dcnl if tail is 0 the statistic is thresholded on both sides of dcnl the distribution dcnl stat fun function dcnl function used to compute the statistical map dcnl connectivity sparse matrix or none dcnl defines connectivity between features the matrix is assumed to dcnl be symmetric and only the upper triangular half is used dcnl this matrix must be square with dimension n vertices n times or dcnl n vertices default is none i e a regular lattice connectivity dcnl use square n vertices matrix for datasets with a large temporal dcnl extent to save on memory and computation time dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl n jobs int dcnl number of permutations to run in parallel requires joblib package dcnl seed int or none dcnl seed the random number generator for results reproducibility dcnl note that if n permutations 2^ n samples or 2^ n samples1 for dcnl twotailed tests this value will be ignored since an exact test dcnl full permutation test will be performed dcnl max step int dcnl when connectivity is a n vertices x n vertices matrix specify the dcnl maximum number of steps between vertices along the second dimension dcnl typically time to be considered connected this is not used for full dcnl or none connectivity matrices dcnl spatial exclude list of int or none dcnl list of spatial indices to exclude from clustering dcnl step down p float dcnl to perform a stepdowninjumps test pass a pvalue for clusters to dcnl exclude from each successive iteration default is zero perform no dcnl stepdown test since no clusters will be smaller than this value dcnl setting this to a reasonable value e g 0 05 can increase sensitivity dcnl but costs computation time dcnl t power float dcnl power to raise the statistical values usually tvalues by before dcnl summing sign will be retained note that t power 0 will give a dcnl count of nodes in each cluster t power 1 will weight each node by dcnl its statistical score dcnl out type str dcnl for arrays with connectivity this sets the output format for clusters dcnl if mask it will pass back a list of boolean mask arrays dcnl if indices it will pass back a list of lists where each list is the dcnl set of vertices in a given cluster note that the latter may use far dcnl less memory for large datasets dcnl check disjoint bool dcnl if true the connectivity matrix or list will be examined to dcnl determine of it can be separated into disjoint sets in some cases dcnl usually with connectivity as a list and many time points this dcnl can lead to faster clustering but results should be identical dcnl buffer size int or none dcnl the statistics will be computed for blocks of variables of size dcnl buffer size at a time this is option significantly reduces the dcnl memory requirements when n jobs 1 and memory sharing between dcnl processes is enabled see set cache dir as x will be shared dcnl between processes and each process only needs to allocate space dcnl for a small block of variables dcnl returns dcnl t obs array of shape n tests dcnl tstatistic observed for all variables dcnl clusters list dcnl list type defined by out type above dcnl cluster pv array dcnl pvalue for each cluster dcnl h0 array of shape n permutations dcnl max cluster level stats observed under permutation dcnl notes dcnl reference dcnl cluster permutation algorithm as described in dcnl maris oostenveld 2007 dcnl nonparametric statistical testing of eeg and megdata dcnl journal of neuroscience methods vol 164 no 1 pp 177190 dcnl doi 10 1016 j jneumeth 2007 03 024 dcnl tfce originally described in smith nichols 2009 dcnl thresholdfree cluster enhancement addressing problems of dcnl smoothing threshold dependence and localisation in cluster dcnl inference neuroimage 44 2009 8398
nonparametric clusterlevel test for spatiotemporal data dcnl this function provides a convenient wrapper for data organized in the form dcnl observations x time x space to use permutation cluster test dcnl parameters dcnl x list of arrays dcnl array of shape observations time vertices in each group dcnl threshold float dcnl the threshold for the statistic dcnl n permutations int dcnl see permutation cluster test dcnl tail 1 or 0 or 1 default 0 dcnl see permutation cluster test dcnl stat fun function dcnl function called to calculate statistics must accept 1darrays as dcnl arguments default scipy stats f oneway dcnl connectivity sparse matrix or none dcnl defines connectivity between features the matrix is assumed to dcnl be symmetric and only the upper triangular half is used dcnl default is none i e a regular lattice connectivity dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl n jobs int dcnl number of permutations to run in parallel requires joblib package dcnl seed int or none dcnl seed the random number generator for results reproducibility dcnl max step int dcnl when connectivity is a n vertices x n vertices matrix specify the dcnl maximum number of steps between vertices along the second dimension dcnl typically time to be considered connected this is not used for full dcnl or none connectivity matrices dcnl spatial exclude list of int or none dcnl list of spatial indices to exclude from clustering dcnl step down p float dcnl to perform a stepdowninjumps test pass a pvalue for clusters to dcnl exclude from each successive iteration default is zero perform no dcnl stepdown test since no clusters will be smaller than this value dcnl setting this to a reasonable value e g 0 05 can increase sensitivity dcnl but costs computation time dcnl t power float dcnl power to raise the statistical values usually fvalues by before dcnl summing sign will be retained note that t power 0 will give a dcnl count of nodes in each cluster t power 1 will weight each node by dcnl its statistical score dcnl out type str dcnl for arrays with connectivity this sets the output format for clusters dcnl if mask it will pass back a list of boolean mask arrays dcnl if indices it will pass back a list of lists where each list is the dcnl set of vertices in a given cluster note that the latter may use far dcnl less memory for large datasets dcnl check disjoint bool dcnl if true the connectivity matrix or list will be examined to dcnl determine of it can be separated into disjoint sets in some cases dcnl usually with connectivity as a list and many time points this dcnl can lead to faster clustering but results should be identical dcnl buffer size int or none dcnl the statistics will be computed for blocks of variables of size dcnl buffer size at a time this is option significantly reduces the dcnl memory requirements when n jobs 1 and memory sharing between dcnl processes is enabled see set cache dir as x will be shared dcnl between processes and each process only needs to allocate space dcnl for a small block of variables dcnl returns dcnl t obs array of shape n tests dcnl tstatistic observed for all variables dcnl clusters list dcnl list type defined by out type above dcnl cluster pv array dcnl pvalue for each cluster dcnl h0 array of shape n permutations dcnl max cluster level stats observed under permutation dcnl notes dcnl reference dcnl cluster permutation algorithm as described in dcnl maris oostenveld 2007 dcnl nonparametric statistical testing of eeg and megdata dcnl journal of neuroscience methods vol 164 no 1 pp 177190 dcnl doi 10 1016 j jneumeth 2007 03 024
compute mask to apply to a spatiotemporal connectivity matrix dcnl this can be used to include or exclude certain spatial coordinates dcnl this is useful for excluding certain regions from analysis e g dcnl medial wall vertices dcnl parameters dcnl n times int dcnl number of time points dcnl n vertices int dcnl number of spatial points dcnl vertices list or array of int dcnl vertex numbers to set dcnl set as bool dcnl if true all points except vertices are set to false inclusion dcnl if false all points except vertices are set to true exclusion dcnl returns dcnl mask array of bool dcnl a n times n vertices array of boolean values for masking
specify disjoint subsets e g hemispheres based on connectivity
reshape cluster masks or indices to be of the correct shape
assemble summary sourceestimate from spatiotemporal cluster results dcnl this helps visualizing results from spatiotemporalclustering dcnl permutation tests dcnl parameters dcnl clu tuple dcnl the output from clustering permutation tests dcnl p thresh float dcnl the significance threshold for inclusion of clusters dcnl tstep float dcnl the temporal difference between two time samples dcnl tmin float | int dcnl the time of the first sample dcnl subject str dcnl the name of the subject dcnl vertices list of arrays | none dcnl the vertex numbers associated with the source space locations defaults dcnl to none if none equals np arange 10242 np arange 10242 dcnl returns dcnl out instance of sourceestimate dcnl a summary of the clusters the first time point in this sourceestimate dcnl object is the summation of all the clusters subsequent time points dcnl contain each individual cluster the magnitude of the activity dcnl corresponds to the length the cluster spans in time in samples
test ordinary least squares regression
test regression without overlap correction on real data
test regression with overlap correction
generate testing data
test anova effects parsing
test 2way anova
test ttest based on permutations
test pval correction for multi comparison fdr and bonferroni
test use of cache dir
test cluster level permutations with step down p
test cluster level permutations tests
test cluster level permutations ttest
test cluster level permutations with connectivity matrix
test cluster level permutations with and without connectivity
test spatiotemporal cluster permutations
return tvalues
test cluster summary stcs
no frills empirical cdf used in fdrcorrection
pvalue correction with false discovery rate fdr dcnl correction for multiple comparison using fdr dcnl this covers benjamini hochberg for independent or positively correlated and dcnl benjamini yekutieli for general or negatively correlated tests dcnl parameters dcnl pvals array like dcnl set of pvalues of the individual tests dcnl alpha float dcnl error rate dcnl method indep | negcorr dcnl if indep it implements benjamini hochberg for independent or if dcnl negcorr it corresponds to benjamini yekutieli dcnl returns dcnl reject array bool dcnl true if a hypothesis is rejected false if not dcnl pval corrected array dcnl pvalues adjusted for multiple hypothesis testing to limit fdr dcnl notes dcnl reference dcnl genovese cr lazar na nichols t dcnl thresholding of statistical maps in functional neuroimaging using the false dcnl discovery rate neuroimage 2002 apr 15 4 8708
pvalue correction with bonferroni method dcnl parameters dcnl pval array like dcnl set of pvalues of the individual tests dcnl alpha float dcnl error rate dcnl returns dcnl reject array bool dcnl true if a hypothesis is rejected false if not dcnl pval corrected array dcnl pvalues adjusted for multiple hypothesis testing to limit fdr
fit ordinary least squares regression ols dcnl parameters dcnl inst instance of epochs | iterable of sourceestimate dcnl the data to be regressed contains all the trials sensors and time dcnl points for the regression for source estimates accepts either a list dcnl or a generator object dcnl design matrix ndarray shape n observations n regressors dcnl the regressors to be used must be a 2d array with as many rows as dcnl the first dimension of data the first column of this matrix will dcnl typically consist of ones intercept column dcnl names listlike | none dcnl optional parameter to name the regressors if provided the length must dcnl correspond to the number of columns present in regressors dcnl including the intercept if present dcnl otherwise the default names are x0 x1 x2 xn for n regressors dcnl returns dcnl results dict of namedtuple dcnl for each regressor key a namedtuple is provided with the dcnl following attributes dcnl beta regression coefficients dcnl stderr standard error of regression coefficients dcnl t val t statistics beta stderr dcnl p val twosided pvalue of t statistic under the t distribution dcnl mlog10 p val log10 transformed pvalue dcnl the tuple members are numpy arrays the shape of each numpy array is dcnl the shape of the data minus the first dimension e g if the shape of dcnl the original data was n observations n channels n timepoints dcnl then the shape of each of the arrays will be dcnl n channels n timepoints
aux function
estimate regressionbased evoked potentials fields by linear modeling dcnl this models the full m eeg time course including correction for dcnl overlapping potentials and allowing for continuous scalar predictors dcnl internally this constructs a predictor matrix x of size dcnl n samples n conds window length solving the linear system dcnl y bx and returning b as evokedlike time series split by dcnl condition see 1 dcnl parameters dcnl raw instance of raw dcnl a raw object note be very careful about data that is not dcnl downsampled as the resulting matrices can be enormous and easily dcnl overload your computer typically 100 hz sampling rate is dcnl appropriate or using the decim keyword see below dcnl events ndarray of int shape n events 3 dcnl an array where the first column corresponds to samples in raw dcnl and the last to integer codes in event id dcnl event id dict | none dcnl as in epochs a dictionary where the values may be integers or dcnl iterables of integers corresponding to the 3rd column of dcnl events and the keys are condition names dcnl if none uses all events in the events array dcnl tmin float | dict dcnl if float gives the lower limit in seconds for the time window for dcnl which all event types effects are estimated if a dict can be used to dcnl specify time windows for specific event types keys correspond to keys dcnl in event id and or covariates for missing values the default 1 is dcnl used dcnl tmax float | dict dcnl if float gives the upper limit in seconds for the time window for dcnl which all event types effects are estimated if a dict can be used to dcnl specify time windows for specific event types keys correspond to keys dcnl in event id and or covariates for missing values the default 1 is dcnl used dcnl covariates dictlike | none dcnl if dictlike e g a pandas dataframe values have to be arraylike dcnl and of the same length as the rows in events keys correspond dcnl to additional event types conditions to be estimated and are matched dcnl with the time points given by the first column of events if dcnl none only binary events from event id are used dcnl reject none | dict dcnl for cleaning raw data before the regression is performed set up dcnl rejection parameters based on peaktopeak amplitude in continuously dcnl selected subepochs if none no rejection is done dcnl if dict keys are types grad | mag | eeg | eog | ecg dcnl and values are the maximal peaktopeak values to select rejected dcnl epochs e g dcnl reject dict grad 4000e12 t m gradiometers dcnl mag 4e11 t magnetometers dcnl eeg 40e5 v eeg channels dcnl eog 250e5 v eog channels dcnl flat none | dict dcnl or cleaning raw data before the regression is performed set up dcnl rejection parameters based on flatness of the signal if none no dcnl rejection is done if a dict keys are grad | mag | dcnl eeg | eog | ecg and values are minimal peaktopeak values to dcnl select rejected epochs dcnl tstep float dcnl length of windows for peaktopeak detection for raw data cleaning dcnl decim int dcnl decimate by choosing only a subsample of data points highly dcnl recommended for data recorded at high sampling frequencies as dcnl otherwise huge intermediate matrices have to be created and inverted dcnl picks none | list dcnl list of indices of channels to be included if none defaults to all dcnl meg and eeg channels dcnl solver str | function dcnl either a function which takes as its inputs the sparse predictor dcnl matrix x and the observation matrix y and returns the coefficient dcnl matrix b or a string dcnl x is of shape n times n predictors time window length dcnl y is of shape n channels n times dcnl if str must be cholesky in which case the solver used is dcnl linalg solve dot x t x dot x t y dcnl returns dcnl evokeds dict dcnl a dict where the keys correspond to conditions and the values are dcnl evoked objects with the erf ps these can be used exactly like any dcnl other evoked object including e g plotting or statistics dcnl references dcnl 1 smith n j kutas m 2015 regressionbased estimation of erp dcnl waveforms ii nonlinear effects overlap correction and practical dcnl considerations psychophysiology 52 2 169189
prepare events and data primarily for linear regression raw
build predictor matrix and metadata e g condition time windows
remove empty and contaminated points from data predictor matrices
create a dictionary of evoked objects dcnl these will be created from a coefs matrix and condition durations
approximate joint diagonalization based on pham s algorithm dcnl this is a direct implementation of the pham s ajd algorithm 1 dcnl parameters dcnl x ndarray shape n epochs n channels n channels dcnl a set of covariance matrices to diagonalize dcnl eps float defaults to 1e6 dcnl the tolerance for stoping criterion dcnl max iter int defaults to 1000 dcnl the maximum number of iteration to reach convergence dcnl returns dcnl v ndarray shape n channels n channels dcnl the diagonalizer dcnl d ndarray shape n epochs n channels n channels dcnl the set of quasi diagonal matrices dcnl references dcnl 1 pham dinh tuan joint approximate diagonalization of positive dcnl definite hermitian matrices siam journal on matrix analysis and dcnl applications 22 no 4 2001 11361152
set the default cv depending on whether clf is classifier regressor
check whether an object has the methods required by sklearn
retrieve the inverse functions of an pipeline or an estimator
retrieve the coefficients of an estimator ending with a linear model dcnl this is typically useful to retrieve spatial filters or spatial dcnl patterns of decoding models 1 dcnl parameters dcnl estimator object | none dcnl an estimator from scikitlearn dcnl attr str dcnl the name of the coefficient attribute to retrieve typically dcnl filters default or patterns dcnl inverse transform bool dcnl if true returns the coefficients after inverse transforming them with dcnl the transformer steps of the estimator dcnl returns dcnl coef array dcnl the coefficients dcnl references dcnl 1 haufe s meinecke f gorgen k dahne s haynes j d dcnl blankertz b biessmann f 2014 on the interpretation of weight dcnl vectors of linear models in multivariate neuroimaging neuroimage 87 dcnl 96110 doi 10 1016 j neuroimage 2013 10 067
evaluate a score by crossvalidation dcnl parameters dcnl estimator estimator object implementing fit dcnl the object to use to fit the data dcnl x arraylike shape n samples n dimensional features dcnl the data to fit can be for example a list or an array at least 2d dcnl y arraylike shape n samples n targets dcnl the target variable to try to predict in the case of dcnl supervised learning dcnl groups arraylike with shape n samples dcnl group labels for the samples used while splitting the dataset into dcnl train test set dcnl scoring string callable | none dcnl a string see model evaluation documentation or dcnl a scorer callable object function with signature dcnl scorer estimator x y dcnl cv int crossvalidation generator | iterable dcnl determines the crossvalidation splitting strategy dcnl possible inputs for cv are dcnl none to use the default 3fold cross validation dcnl integer to specify the number of folds in a stratified kfold dcnl an object to be used as a crossvalidation generator dcnl an iterable yielding train test splits dcnl for integer none inputs if the estimator is a classifier and y is dcnl either binary or multiclass dcnl class sklearn model selection stratifiedkfold is used in all dcnl other cases class sklearn model selection kfold is used dcnl n jobs integer optional dcnl the number of cpus to use to do the computation 1 means dcnl all cpus dcnl verbose integer optional dcnl the verbosity level dcnl fit params dict optional dcnl parameters to pass to the fit method of the estimator dcnl pre dispatch int or string optional dcnl controls the number of jobs that get dispatched during parallel dcnl execution reducing this number can be useful to avoid an dcnl explosion of memory consumption when more jobs get dispatched dcnl than cpus can process this parameter can be dcnl none in which case all the jobs are immediately dcnl created and spawned use this for lightweight and dcnl fastrunning jobs to avoid delays due to ondemand dcnl spawning of the jobs dcnl an int giving the exact number of total jobs that are dcnl spawned dcnl a string giving an expression as a function of n jobs dcnl as in 2 n jobs dcnl returns dcnl scores array of float shape n splits | shape n splits n scores dcnl array of scores of the estimator for each run of the cross validation
fit estimator and compute scores for a given dataset split
compute the score of an estimator on a given test set dcnl this code is the same as sklearn model selection validation score dcnl but accepts to output arrays instead of floats
reshape epochs and apply function
simulate data according to an instantaneous mixin model dcnl data are simulated in the statistical source space where one source is dcnl modulated according to a target variable before being mixed with a dcnl random mixing matrix
test common spatial patterns algorithm on epochs
test common spatial patterns algorithm using regularized covariance
test if csp works in a pipeline
test if approximate joint diagonalization implementation obtains same dcnl results as the matlab implementation by pham dinhtuan
test eventmatched spatial filters
test slidingestimator
test generalizingestimator
generate some testing data dcnl parameters dcnl n samples int dcnl the number of samples dcnl n features int dcnl the number of features dcnl n targets int dcnl the number of targets dcnl returns dcnl x ndarray shape n samples n features dcnl the measured data dcnl y ndarray shape n samples n targets dcnl the latent variables generating the data dcnl a ndarray shape n features n targets dcnl the forward model mapping the latent variables y to the measured dcnl data x
test the retrieval of linear coefficients filters and patterns from dcnl simple and pipeline estimators
test linearmodel class for computing filters and patterns
test cross val multiscore for computing scores on decoding over time
test signals that are rank deficient
test that timedelaying w times and samples works properly
test model prep and fitting
test that the fast solving works like ridge
test methods of scaler
test methods of filterestimator
test methods of psdestimator
test vectorizer
test unsupervised spatial filter
test methods of temporalfilter
test time generalization decoding
test timedecoding
compute eventmatched spatial filter on epochs dcnl this version of ems 1 operates on the entire time course no time dcnl window needs to be specified the result is a spatial filter at each dcnl time point and a corresponding time course intuitively the result dcnl gives the similarity between the filter at each time point and the dcnl data vector sensors at that time point dcnl note ems only works for binary classification dcnl note the present function applies a leaveoneout crossvalidation dcnl following schurger et al s paper however we recommend using dcnl a stratified kfold crossvalidation indeed leaveoneout tends dcnl to overfit and cannot be used to estimate the variance of the dcnl prediction within a given fold dcnl note because of the leaveoneout this function needs an equal dcnl number of epochs in each of the two conditions dcnl parameters dcnl epochs instance of mne epochs dcnl the epochs dcnl conditions list of str | none defaults to none dcnl if a list of strings strings must match the epochs event id s key as dcnl well as the number of conditions supported by the objective function dcnl if none keys in epochs event id are used dcnl picks arraylike of int | none defaults to none dcnl channels to be included if none only good data channels are used dcnl n jobs int defaults to 1 dcnl number of jobs to run in parallel dcnl verbose bool str int or none defaults to self verbose dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl cv crossvalidation object | str | none defaults to leaveoneout dcnl the crossvalidation scheme dcnl returns dcnl surrogate trials ndarray shape n trials 2 n times dcnl the trial surrogates dcnl mean spatial filter ndarray shape n channels n times dcnl the set of spatial filters dcnl conditions ndarray shape n classes dcnl the conditions used values correspond to original event ids dcnl references dcnl 1 aaron schurger sebastien marti and stanislas dehaene reducing dcnl multisensor data to a single time course that reveals experimental dcnl effects bmc neuroscience 2013 14 122
compute the default diff objective function
run ems
return a zero or meanpadded input time series dcnl parameters dcnl x array shape n times n epochs n features dcnl the time series to pad dcnl n delays int dcnl the number of delays dcnl fill mean bool dcnl if true the fill value will be the mean along the time dimension dcnl of the feature if false the fill value will be zero dcnl returns dcnl padded array shape n padded n epochs n features dcnl the padded data where n padded n times + n delays 1
return a timelagged input time series dcnl parameters dcnl x array shape n times n epochs n features dcnl the time series to delay dcnl tmin int | float dcnl the starting lag negative values correspond to times in the past dcnl tmax int | float dcnl the ending lag positive values correspond to times in the future dcnl must be tmin dcnl sfreq int | float dcnl the sampling frequency of the series defaults to 1 0 dcnl newaxis int dcnl the axis in the output array that corresponds to time delays dcnl defaults to 0 for the first axis dcnl fill mean bool dcnl if true the fill value will be the mean along the time dimension dcnl of the feature if false the fill value will be zero dcnl axis int dcnl the axis corresponding to the time dimension dcnl returns dcnl delayed array shape n delays dcnl the delayed data it has the same shape as x with an extra dimension dcnl created at newaxis that corresponds to each delay dcnl examples dcnl tmin tmax 0 2 0 1 dcnl sfreq 10 dcnl x np arange 1 6 dcnl x del delay time series x tmin tmax sfreq dcnl print x del dcnl 0 0 1 2 3 dcnl 0 1 2 3 4 dcnl 1 2 3 4 5 dcnl 2 3 4 5 0
convert a tmin tmax in seconds to delays
find the slice to be taken in order to remove missing values
check delayer input parameters for future custom delay support
convert x del to a sklearncompatible shape
compute the auto and crosscorrelations
fit the model using correlation matrices
aux function of generalizationacrosstime dcnl run classifiers predictions loop across time samples dcnl parameters dcnl x ndarray shape n epochs n features n times dcnl tobefitted data dcnl estimators list of arraylike shape n times n folds dcnl list of array of scikitlearn classifiers fitted in crossvalidation dcnl cv splits list of tuples dcnl list of tuples of train and test array generated from cv dcnl train times list dcnl list of list of slices selecting data from x from which is prediction dcnl is generated dcnl predict method str dcnl specifies prediction method for the estimator dcnl predict mode crossvalidation meanprediction dcnl indicates how predictions are achieved with regards to the cross dcnl validation procedure dcnl crossvalidation estimates a single prediction per sample based dcnl on the unique independent classifier fitted in the cross dcnl validation dcnl meanprediction estimates k predictions per sample based on dcnl each of the kfold crossvalidation classifiers and average dcnl these predictions into a single estimate per sample dcnl default crossvalidation dcnl n orig epochs int dcnl original number of predicted epochs before slice definition note dcnl that the number of epochs may have been cropped if the cross validation dcnl is not deterministic e g with shufflesplit we may only predict a dcnl subset of epochs dcnl test epochs list of slices dcnl list of slices to select the tested epoched in the cv
initialize the predictions for each train test time points dcnl parameters dcnl n train int dcnl number of training time point i e estimators dcnl n test list of int dcnl list of number of testing time points for each estimator dcnl n orig epochs int dcnl number of epochs passed to gat predict dcnl n dim int dcnl number of dimensionality of y pred see np shape clf predict x dcnl returns dcnl y pred np array shape n train n test n orig epochs n dim dcnl empty array dcnl notes dcnl the y pred variable can only be initialized after the first dcnl prediction because we can t know whether it is a a categorical output or a dcnl set of probabilistic estimates if all train time points have the same dcnl number of testing time points then y pred is a matrix else it is an array dcnl of arrays
loop across chunks of testing slices
aux function of generalizationacrosstime dcnl format mne data into scikitlearn x and y dcnl parameters dcnl epochs instance of epochs dcnl the epochs dcnl y ndarray shape n epochs | list shape n epochs | none dcnl tobefitted model if y is none y epochs events dcnl picks arraylike of int | none dcnl the channels indices to include if none the data dcnl channels in info except bad channels are used dcnl returns dcnl x ndarray shape n epochs n selected chans n times dcnl tobefitted data dcnl y ndarray shape n epochs dcnl tobefitted model dcnl picks arraylike of int | none dcnl the channels indices to include if none the data dcnl channels in info except bad channels are used
aux function of generalizationacrosstime dcnl fit each classifier dcnl parameters dcnl clf scikitlearn classifier dcnl the classifier object dcnl x chunk ndarray shape n epochs n features n times dcnl tobefitted data dcnl y list | array shape n epochs dcnl tobefitted model dcnl slices list | array shape n training slice dcnl list of training slices indicating time sample relative to x dcnl cv splits list of tuples dcnl list of train test tuples generated from cv split dcnl returns dcnl estimators list of lists of estimators dcnl list of fitted scikitlearn classifiers corresponding to each training dcnl slice
aux function of generalizationacrosstime dcnl define the slices on which to train each classifier the user either define dcnl the time slices manually in window slices or s he passes optional params dcnl to set them from window start window stop window step and dcnl window length dcnl parameters dcnl times ndarray shape n times dcnl array of times from mne epochs dcnl window dict keys start stop step length dcnl either train or test times dcnl returns dcnl window dict dcnl dictionary to set training and testing times dcnl see also dcnl generalizationacrosstime
aux function to define time as the last training time point
aux function of generalizationacrosstime dcnl predict each classifier if multiple classifiers are passed average dcnl prediction across all classifiers to result in a single prediction per dcnl classifier dcnl parameters dcnl estimators ndarray shape n folds | shape 1 dcnl array of scikitlearn classifiers to predict data dcnl x ndarray shape n epochs n features n times dcnl tobepredicted data dcnl vectorize times bool dcnl if true x can be vectorized to predict all times points at once dcnl predict method str dcnl name of the method used to make predictions from the estimator for dcnl example both predict proba and predict are supported for dcnl sklearn linear model logisticregression note that the scorer must be dcnl adapted to the prediction outputs of the method defaults to predict dcnl returns dcnl y pred ndarray shape n epochs m prediction dimensions dcnl classifier s prediction for each trial
smart chunking to avoid memory overload dcnl the parallelization is performed across time samples to avoid overheads dcnl the x data is splitted into large chunks of different time sizes to dcnl avoid duplicating the memory load to each job we only pass the time dcnl samples that are required by each job the indices of the training times dcnl must be adjusted accordingly
aux function to fit slidingestimator in parallel dcnl fit a clone estimator to each slice of data dcnl parameters dcnl base estimator object dcnl the base estimator to iteratively fit on a subset of the dataset dcnl x array shape n samples nd features n estimators dcnl the target data the feature dimension can be multidimensional e g dcnl x shape n samples n features 1 n features 2 n estimators dcnl y array shape n sample dcnl the target values dcnl returns dcnl estimators list of estimators dcnl the fitted estimators
aux function to transform slidingestimator in parallel dcnl applies transform predict decision function etc for each slice of data dcnl parameters dcnl estimators list of estimators dcnl the fitted estimators dcnl x array shape n samples nd features n estimators dcnl the target data the feature dimension can be multidimensional e g dcnl x shape n samples n features 1 n features 2 n estimators dcnl method str dcnl the estimator method to use e g predict transform dcnl returns dcnl y pred array shape n samples n estimators n classes n classes1 2 dcnl the transformations for each slice of data
aux function to slidingestimator to initialize y pred
aux function to score slidingestimator in parallel dcnl predict and score each slice of data dcnl parameters dcnl estimators list shape n tasks dcnl the fitted estimators dcnl x array shape n samples nd features n tasks dcnl the target data the feature dimension can be multidimensional e g dcnl x shape n samples n features 1 n features 2 n tasks dcnl scoring callable string or none dcnl if scoring is none default the predictions are internally dcnl generated by estimator score else we must first get the dcnl predictions to pass them to adhoc scorer dcnl y array shape n samples | n samples n targets dcnl the target values dcnl returns dcnl score array shape n tasks dcnl the score for each task slice of data
check that an estimator has the method attribute dcnl if method transform and estimator does not have transform use dcnl predict instead
transform the dataset dcnl this will apply each estimator to all slices of the data dcnl parameters dcnl x array shape n samples nd features n slices dcnl the training input samples for each data slice a clone estimator dcnl is fitted independently the feature dimension can be multidimensional dcnl e g x shape n samples n features 1 n features 2 n estimators dcnl returns dcnl xt array shape n samples n slices dcnl the transformed values generated by each estimator
aux function to generalizingestimator to initialize y pred
score generalizingestimator in parallel dcnl predict and score each slice of data dcnl parameters dcnl estimators list of estimators dcnl the fitted estimators dcnl scoring callable string or none dcnl if scoring is none default the predictions are internally dcnl generated by estimator score else we must first get the dcnl predictions to pass them to adhoc scorer dcnl x array shape n samples nd features n slices dcnl the target data the feature dimension can be multidimensional e g dcnl x shape n samples n features 1 n features 2 n estimators dcnl y array shape n samples | n samples n targets dcnl the target values dcnl returns dcnl score array shape n estimators n slices dcnl the score for each slice of data
return parallel instance with delayed function dcnl util function to use joblib only if available dcnl parameters dcnl func callable dcnl a function dcnl n jobs int dcnl number of jobs to run in parallel dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more info or debug dcnl will print parallel status others will not dcnl max nbytes int str or none dcnl threshold on the minimum size of arrays passed to the workers that dcnl triggers automated memmory mapping can be an int in bytes dcnl or a humanreadable string e g 1m for 1 megabyte dcnl use none to disable memmaping of large arrays use auto to dcnl use the value set using mne set memmap min size dcnl pre dispatch int or string optional dcnl controls the number of jobs that get dispatched during parallel dcnl execution reducing this number can be useful to avoid an dcnl explosion of memory consumption when more jobs get dispatched dcnl than cpus can process this parameter can be dcnl none in which case all the jobs are immediately dcnl created and spawned use this for lightweight and dcnl fastrunning jobs to avoid delays due to ondemand dcnl spawning of the jobs dcnl an int giving the exact number of total jobs that are dcnl spawned dcnl a string giving an expression as a function of n jobs dcnl as in 2 n jobs dcnl returns dcnl parallel instance of joblib parallel or list dcnl the parallel object dcnl my func callable dcnl func if not parallel or delayed func dcnl n jobs int dcnl number of jobs 0
check n jobs in particular for negative values dcnl parameters dcnl n jobs int dcnl the number of jobs dcnl allow cuda bool dcnl allow n jobs to be cuda default false dcnl returns dcnl n jobs int dcnl the checked number of jobs always positive or cuda if dcnl applicable
handle vmin and vmax parameters
show a figure while suppressing warnings dcnl parameters dcnl show bool dcnl show the figure dcnl kwargs dict dcnl extra arguments for func matplotlib pyplot show
adjust subplot parameters to give specified padding dcnl note for plotting please use this function instead of dcnl plt tight layout dcnl parameters dcnl pad float dcnl padding between the figure edge and the edges of subplots as a dcnl fraction of the fontsize dcnl h pad float dcnl padding height between edges of adjacent subplots dcnl defaults to pad inches dcnl w pad float dcnl padding width between edges of adjacent subplots dcnl defaults to pad inches dcnl fig instance of figure dcnl figure to apply changes to
handle interactive ssp selection
validate whether input is a list array of axes
return a colormap similar to that used by mne analyze dcnl parameters dcnl limits list or array of length 3 or 6 dcnl bounds for the colormap which will be mirrored across zero if length dcnl 3 or completely specified and potentially asymmetric if length 6 dcnl format str dcnl type of colormap to return if matplotlib will return a dcnl matplotlib colors linearsegmentedcolormap if mayavi will dcnl return an rgba array of shape 256 4 dcnl returns dcnl cmap instance of matplotlib pyplot colormap | array dcnl a teal blue gray red yellow colormap dcnl notes dcnl for this will return a colormap that will display correctly for data dcnl that are scaled by the plotting function to span fmax fmax dcnl examples dcnl the following code will plot a stc using standard mne limits dcnl colormap mne viz mne analyze colormap limits 5 10 15 dcnl brain stc plot fsaverage inflated rh colormap dcnl brain scale data colormap fmin 15 fmid 0 fmax 15 transparent false
toggle options projectors dialog
perform operations when proj boxes clicked
customize help dialogs text
toggle options projectors dialog
set figure layout shared with raw and epoch plots
compare the contents of two fiff files using diff and show fiff dcnl parameters dcnl fname 1 str dcnl first file to compare dcnl fname 2 str dcnl second file to compare dcnl fname out str | none dcnl filename to store the resulting diff if none a temporary dcnl file will be created dcnl show bool dcnl if true show the resulting diff in a new tab in a web browser dcnl indent str dcnl how to indent the lines dcnl read limit int dcnl max number of bytes of data to read from a tag can be np inf dcnl to always read all data helps test read completion dcnl max str int dcnl max number of characters of string representation to print for dcnl each tag s data dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl fname out str dcnl the filename used for storing the diff could be useful for dcnl when a temporary file is used
make matplotlib figure with no toolbar
resize
interpret scroll events
deal with the vertical shift of the viewport
deal with changed time value
handle radio buttons in selection dialog
find out active radio button
set active button
set radio button
deal with change of channel group
handle clicks on vertical scrollbar using selections
interpret key presses
initialize the annotation figure
add new description on button press
handle mouse clicks
color channels in selection topomap when selecting bads
find all indices when using selections
draw vertical line
select bad channels onpick returns updated bads list
draw help window
handle key press in dialog
compute viewport height and adjust offsets
fake a click at a relative point within axes
add a background image to a plot dcnl adds the image specified in im to the dcnl figure fig this is generally meant to dcnl be done with topo plots though it could work dcnl for any plot dcnl note this modifies the figure and or axes dcnl in place dcnl parameters dcnl fig plt figure dcnl the figure you wish to add a bg image to dcnl im array shape m n 3 4 dcnl a background image for the figure this must be a valid input to dcnl matplotlib pyplot imshow defaults to none dcnl set ratios none | str dcnl set the aspect ratio of any axes in fig dcnl to the value in set ratios defaults to none dcnl which does nothing to axes dcnl returns dcnl ax im instance of the created matplotlib axis object dcnl corresponding to the image you added dcnl notes dcnl versionadded 0 9 0
find peaks from evoked data dcnl returns npeaks biggest peaks as a list of time points
return a list of times for topomaps
plot sensors positions dcnl parameters dcnl info instance of info dcnl info structure containing the channel locations dcnl kind str dcnl whether to plot the sensors as 3d topomap or as an interactive dcnl sensor selection dialog available options topomap 3d select dcnl if select a set of channels can be selected interactively by using dcnl lasso selector or clicking while holding control key the selected dcnl channels are returned along with the figure instance defaults to dcnl topomap dcnl ch type none | str dcnl the channel type to plot available options mag grad eeg dcnl seeg ecog all if all all the available mag grad eeg dcnl seeg and ecog channels are plotted if none default then channels dcnl are chosen in the order given above dcnl title str | none dcnl title for the figure if none default equals to dcnl sensor positions s ch type dcnl show names bool | array of str dcnl whether to display all channel names if an array only the channel dcnl names in the array are shown defaults to false dcnl ch groups position | array of shape ch groups picks | none dcnl channel groups for coloring the sensors if none default default dcnl coloring scheme is used if position the sensors are divided dcnl into 8 regions see order kwarg of func mne viz plot raw if dcnl array the channels are divided by picks given in the array dcnl versionadded 0 13 0 dcnl to sphere bool dcnl whether to project the 3d locations to a sphere when false the dcnl sensor array appears similar as to looking downwards straight above the dcnl subject s head has no effect when kind 3d defaults to true dcnl versionadded 0 14 0 dcnl axes instance of axes | instance of axes3d | none dcnl axes to draw the sensors to if kind 3d axes must be an instance dcnl of axes3d if none default a new axes will be created dcnl versionadded 0 13 0 dcnl block bool dcnl whether to halt program execution until the figure is closed defaults dcnl to false dcnl versionadded 0 13 0 dcnl show bool dcnl show figure if true defaults to true dcnl returns dcnl fig instance of matplotlib figure dcnl figure containing the sensor topography dcnl selection list dcnl a list of selected channels only returned if kind select dcnl see also dcnl mne viz plot layout dcnl notes dcnl this function plots the sensor locations from the info structure using dcnl matplotlib for drawing the sensors using mayavi see dcnl func mne viz plot alignment dcnl versionadded 0 12 0
pick a channel in plot sensors
listen for sensor plotter close event
plot sensors
compute scalings for each channel type automatically dcnl parameters dcnl scalings dict dcnl the scalings for each channel type if any values are dcnl auto this will automatically compute a reasonable dcnl scaling for that channel type any values that aren t dcnl auto will not be changed dcnl inst instance of raw or epochs dcnl the data for which you want to compute scalings if data dcnl is not preloaded this will read a subset of times epochs dcnl up to 100mb in size in order to compute scalings dcnl returns dcnl scalings dict dcnl a scalings dictionary with updated values
set color map interactivity
handle annotation span selector
set up annotations for plotting in raw browser
set up colors for annotations
clean up on annotation dialog close
handle hover event
remove annotation line from the view
modify annotation
handle drawn annotations
handle keys in annotation dialog
handle annotation radio buttons
set butterfly view of raw plotter
fix call for old mpl
handle decim parameter for plotters
generate 3x3 array of fiducial coordinates
plot head positions dcnl parameters dcnl pos ndarray shape n pos 10 dcnl the head position data dcnl mode str dcnl can be traces default to show position and quaternion traces dcnl or field to show the position as a vector field over time dcnl the field mode requires matplotlib 1 4+ dcnl cmap matplotlib colormap dcnl colormap to use for the trace plot default is viridis dcnl direction str dcnl can be any combination of x y or z default z to show dcnl directional axes in field mode dcnl show bool dcnl show figure if true defaults to true dcnl returns dcnl fig instance of matplotlib figure figure dcnl the figure
plot meg eeg fields on head surface and helmet in 3d dcnl parameters dcnl evoked instance of mne evoked dcnl the evoked object dcnl surf maps list dcnl the surface mapping information obtained with make field map dcnl time float | none dcnl the time point at which the field map shall be displayed if none dcnl the average peak latency across sensor types is used dcnl time label str dcnl how to print info about the time instant visualized dcnl n jobs int dcnl number of jobs to run in parallel dcnl returns dcnl fig instance of mlab figure dcnl the mayavi figure
create mayavi mesh from mne surf
plot bem contours on anatomical slices dcnl parameters dcnl mri fname str dcnl the name of the file containing anatomical data dcnl surf fnames list of str dcnl the filenames for the bem surfaces in the format dcnl inner skull surf outer skull surf outer skin surf dcnl orientation str dcnl coronal or transverse or sagittal dcnl slices list of int dcnl slice indices dcnl show bool dcnl call pyplot show at the end dcnl img output none | tuple dcnl if tuple width and height images will be produced instead of a dcnl single figure with many axes this mode is designed to reduce the dcnl substantial overhead associated with making tens to hundreds dcnl of matplotlib axes instead opting to reuse a single axes instance dcnl returns dcnl fig instance of matplotlib figure figure | list dcnl the figure will instead be a list of png images if dcnl img output is a tuple
plot head sensor and source space alignment in 3d dcnl parameters dcnl info dict dcnl the measurement info dcnl trans str | auto | dict | none dcnl the full path to the head< mri transform trans fif file dcnl produced during coregistration if trans is none an identity matrix dcnl is assumed dcnl subject str | none dcnl the subject name corresponding to freesurfer environment dcnl variable subject can be omitted if src is provided dcnl subjects dir str dcnl the path to the freesurfer subjects reconstructions dcnl it corresponds to freesurfer environment variable subjects dir dcnl source str | list dcnl type to load common choices would be bem head or dcnl outer skin if list the sources are looked up in the given order dcnl and first found surface is used we first try loading dcnl subjects dir subject bem subject source fif and then look for dcnl subject source fif in the same directory for outer skin dcnl the subjects bem and bem flash folders are searched defaults to bem dcnl note for single layer bems it is recommended to use head dcnl coord frame str dcnl coordinate frame to use head meg or mri dcnl meg sensors bool | str | list dcnl can be helmet equivalent to false or sensors to show the meg dcnl helmet or sensors respectively or a combination of the two like dcnl helmet sensors equivalent to true default or dcnl eeg sensors bool | str | list dcnl can be original default equivalent to true or projected to dcnl show eeg sensors in their digitized locations or projected onto the dcnl scalp or a list of these options including equivalent of dcnl false dcnl dig bool | fiducials dcnl if true plot the digitization points fiducials to plot fiducial dcnl points only dcnl ref meg bool dcnl if true default false include reference meg sensors dcnl ecog sensors bool dcnl if true default show ecog sensors dcnl head bool | none dcnl if true show head surface can also be none which will show the dcnl head surface for meg and eeg but hide it if ecog sensors are dcnl present dcnl brain bool | str | none dcnl if true show the brain surfaces can also be a str for dcnl surface type e g pial same as true or none true for ecog dcnl false otherwise dcnl skull bool | str | list of str | list of dict dcnl whether to plot skull surface if string common choices would be dcnl inner skull or outer skull can also be a list to plot dcnl multiple skull surfaces if a list of dicts each dict must dcnl contain the complete surface info such as you get from dcnl func mne make bem model true is an alias of outer skull dcnl the subjects bem and bem flash folders are searched for the surf dcnl files defaults to false dcnl src instance of sourcespaces | none dcnl if not none also plot the source space points dcnl versionadded 0 14 dcnl mri fiducials bool | str dcnl plot mri fiducials default false if true look for a file with dcnl the canonical name bem subject fiducials fif if str it dcnl should provide the full path to the fiducials file dcnl versionadded 0 14 dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl fig instance of mlab figure dcnl the mayavi figure
plot head sensor and source space alignment in 3d dcnl parameters dcnl info dict dcnl the measurement info dcnl trans str | auto | dict | none dcnl the full path to the head< mri transform trans fif file dcnl produced during coregistration if trans is none an identity matrix dcnl is assumed dcnl subject str | none dcnl the subject name corresponding to freesurfer environment dcnl variable subject can be omitted if src is provided dcnl subjects dir str | none dcnl the path to the freesurfer subjects reconstructions dcnl it corresponds to freesurfer environment variable subjects dir dcnl surfaces str | list dcnl surfaces to plot supported values head outer skin dcnl outer skull inner skull brain pial white inflated dcnl defaults to head dcnl note for single layer bems it is recommended to use brain dcnl coord frame str dcnl coordinate frame to use head meg or mri dcnl meg str | list | bool dcnl can be helmet sensors or ref to show the meg helmet sensors or dcnl reference sensors respectively or a combination like dcnl helmet sensors true translates to dcnl helmet sensors ref dcnl eeg bool | str | list dcnl can be original default equivalent to true or projected to dcnl show eeg sensors in their digitized locations or projected onto the dcnl scalp or a list of these options including equivalent of dcnl false dcnl dig bool | fiducials dcnl if true plot the digitization points fiducials to plot fiducial dcnl points only dcnl ecog bool dcnl if true default show ecog sensors dcnl src instance of sourcespaces | none dcnl if not none also plot the source space points dcnl mri fiducials bool | str dcnl plot mri fiducials default false if true look for a file with dcnl the canonical name bem subject fiducials fif if str it dcnl should provide the full path to the fiducials file dcnl bem list of dict | instance of conductormodel | none dcnl can be either the bem surfaces list of dict a bem solution or a dcnl sphere model if none we first try loading dcnl subjects dir subject bem subject source fif and then look for dcnl subject source fif in the same directory for outer skin dcnl the subjects bem and bem flash folders are searched defaults to none dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl fig instance of mlab figure dcnl the mayavi figure dcnl see also dcnl mne viz plot bem dcnl notes dcnl this function serves the purpose of checking the validity of the many dcnl different steps of source reconstruction dcnl transform matrix keywords trans meg and mri fiducials dcnl bem surfaces keywords bem and surfaces dcnl sphere conductor model keywords bem and surfaces and dcnl source space keywords surfaces and src dcnl versionadded 0 15
make tris given a number of vertices of a circlelike obj
get the sensor shape vertices
convert limits values or percentiles to control points dcnl note if using mne generate cmap control points for a directly dcnl mirrored cmap for simplicity i e no normalization is computed to account dcnl for a 2tailed mne cmap dcnl parameters dcnl clim str | dict dcnl desired limits use to set cmap control points dcnl returns dcnl ctrl pts list length 3 dcnl array of floats corresponding to values to use as cmap control points dcnl colormap str dcnl the colormap
handle time label string and units
handle key presses for time viewer slider
smooth source estimate data and plot with mpl
plot source estimate using mpl
plot sourceestimates with pysurfer dcnl note pysurfer currently needs the subjects dir environment variable dcnl which will automatically be set by this function plotting multiple dcnl sourceestimates with different values for subjects dir will cause dcnl pysurfer to use the wrong freesurfer surfaces when using methods of dcnl the returned brain object it is therefore recommended to set the dcnl subjects dir environment variable or always use the same value for dcnl subjects dir within the same python session dcnl by default this function uses mayavi to plot the source estimates if dcnl mayavi is not installed the plotting is done with matplotlib much slower dcnl decimated source space by default dcnl parameters dcnl stc sourceestimates dcnl the source estimates to plot dcnl subject str | none dcnl the subject name corresponding to freesurfer environment dcnl variable subject if none stc subject will be used if that dcnl is none the environment will be used dcnl surface str dcnl the type of surface inflated white etc dcnl hemi str lh | rh | split | both dcnl the hemisphere to display dcnl colormap str | np ndarray of float shape n colors 3 | 4 dcnl name of colormap to use or a custom look up table if array must dcnl be n x 3 or n x 4 array for with rgb or rgba values between dcnl 0 and 255 if auto either hot or mne will be chosen dcnl based on whether lims or pos lims are specified in clim dcnl time label str | callable | none dcnl format of the time label a format string a function that maps dcnl floating point time values to strings or none for no label the dcnl default is time 0 2f ms dcnl smoothing steps int dcnl the amount of smoothing dcnl transparent bool | none dcnl if true use a linear transparency between fmin and fmid dcnl none will choose automatically based on colormap type has no effect dcnl with mpl backend dcnl alpha float dcnl alpha value to apply globally to the overlay has no effect with mpl dcnl backend dcnl time viewer bool dcnl display time viewer gui dcnl subjects dir str dcnl the path to the freesurfer subjects reconstructions dcnl it corresponds to freesurfer environment variable subjects dir dcnl figure instance of mayavi core scene scene | instance of matplotlib figure figure | list | int | none dcnl if none a new figure will be created if multiple views or a dcnl split view is requested this must be a list of the appropriate dcnl length if int is provided it will be used to identify the mayavi dcnl figure by it s id or create a new figure with the given id if an dcnl instance of matplotlib figure mpl backend is used for plotting dcnl views str | list dcnl view to use see surfer brain supported views lat med fos dcnl cau dor ven fro par using multiple views is not dcnl supported for mpl backend dcnl colorbar bool dcnl if true display colorbar on scene not available on mpl backend dcnl clim str | dict dcnl colorbar properties specification if auto set clim automatically dcnl based on data percentiles if dict should contain dcnl kind str dcnl flag to specify type of limits value or percent dcnl lims list | np ndarray | tuple of float 3 elements dcnl note only use this if colormap is not mne dcnl left middle and right bound for colormap dcnl pos lims list | np ndarray | tuple of float 3 elements dcnl note only use this if colormap is mne dcnl left middle and right bound for colormap positive values dcnl will be mirrored directly across zero during colormap dcnl construction to obtain negative control points dcnl cortex str or tuple dcnl specifies how binarized curvature values are rendered dcnl either the name of a preset pysurfer cortex colorscheme one of dcnl classic bone low contrast or high contrast or the name of dcnl mayavi colormap or a tuple with values colormap min max reverse dcnl to fully specify the curvature colors has no effect with mpl backend dcnl size float or pair of floats dcnl the size of the window in pixels can be one number to specify dcnl a square window or the width height of a rectangular window dcnl has no effect with mpl backend dcnl background matplotlib color dcnl color of the background of the display window dcnl foreground matplotlib color dcnl color of the foreground of the display window has no effect with mpl dcnl backend dcnl initial time float | none dcnl the time to display on the plot initially none to display the dcnl first time sample default dcnl time unit s | ms dcnl whether time is represented in seconds s default or dcnl milliseconds ms dcnl backend auto | mayavi | matplotlib dcnl which backend to use if auto default tries to plot with dcnl mayavi but resorts to matplotlib if mayavi is not available dcnl versionadded 0 15 0 dcnl spacing str dcnl the spacing to use for the source space can be ico for a dcnl recursively subdivided icosahedron oct for a recursively dcnl subdivided octahedron or all for all points in general you can dcnl speed up the plotting by selecting a sparser source space has no dcnl effect with mayavi backend defaults to oct6 dcnl versionadded 0 15 0 dcnl returns dcnl figure surfer viz brain | matplotlib figure figure dcnl an instance of surfer viz brain from pysurfer or matplotlib figure
plot source estimates obtained with sparse solver dcnl active dipoles are represented in a glass brain dcnl if the same source is active in multiple source estimates it is dcnl displayed with a sphere otherwise with a cone in 3d dcnl parameters dcnl src dict dcnl the source space dcnl stcs instance of sourceestimate or list of instances of sourceestimate dcnl the source estimates up to 3 dcnl colors list dcnl list of colors dcnl linewidth int dcnl line width in 2d plot dcnl fontsize int dcnl font size dcnl bgcolor tuple of length 3 dcnl background color in 3d dcnl opacity float in 0 1 dcnl opacity of brain mesh dcnl brain color tuple of length 3 dcnl brain color dcnl show bool dcnl show figures if true dcnl high resolution bool dcnl if true plot on the original nondownsampled cortical mesh dcnl fig name dcnl mayavi figure name dcnl fig number dcnl matplotlib figure number dcnl labels ndarray or list of ndarrays dcnl labels to show sources in clusters sources with the same dcnl label and the waveforms within each cluster are presented in dcnl the same color labels should be a list of ndarrays when dcnl stcs is a list ie one label for each stc dcnl modes list dcnl should be a list with each entry being cone or sphere dcnl to specify how the dipoles should be shown dcnl scale factors list dcnl list of floating point scale factors for the markers dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl kwargs kwargs dcnl keyword arguments to pass to mlab triangular mesh dcnl returns dcnl surface instance of mlab surface dcnl the triangular mesh surface
plot dipole locations dcnl if mode is set to cone or sphere only the location of the first dcnl time point of each dipole is shown else use the show all parameter dcnl the option mode orthoview was added in version 0 14 dcnl parameters dcnl dipoles list of instances of dipole | dipole dcnl the dipoles to plot dcnl trans dict dcnl the mri to head trans dcnl subject str dcnl the subject name corresponding to freesurfer environment dcnl variable subject dcnl subjects dir none | str dcnl the path to the freesurfer subjects reconstructions dcnl it corresponds to freesurfer environment variable subjects dir dcnl the default is none dcnl mode str dcnl currently only orthoview is supported dcnl versionadded 0 14 0 dcnl coord frame str dcnl coordinate frame to use head or mri defaults to mri dcnl versionadded 0 14 0 dcnl idx int | gof | amplitude dcnl index of the initially plotted dipole can also be gof to plot the dcnl dipole with highest goodness of fit value or amplitude to plot the dcnl dipole with the highest amplitude the dipoles can also be browsed dcnl through using up down arrow keys or mouse scroll defaults to gof dcnl only used if mode equals orthoview dcnl versionadded 0 14 0 dcnl show all bool dcnl whether to always plot all the dipoles if true default the active dcnl dipole is plotted as a red dot and it s location determines the shown dcnl mri slices the the nonactive dipoles are plotted as small blue dots dcnl if false only the active dipole is plotted dcnl only used if mode equals orthoview dcnl versionadded 0 14 0 dcnl ax instance of matplotlib axes3d | none dcnl axes to plot into if none default axes will be created dcnl only used if mode equals orthoview dcnl versionadded 0 14 0 dcnl block bool dcnl whether to halt program execution until the figure is closed defaults dcnl to false dcnl only used if mode equals orthoview dcnl versionadded 0 14 0 dcnl show bool dcnl show figure if true defaults to true dcnl only used if mode equals orthoview dcnl versionadded 0 14 0 dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl fig instance of mlab figure or matplotlib figure dcnl the mayavi figure or matplotlib figure dcnl notes dcnl versionadded 0 9 0
take a snapshot of a mayavi scene and project channels onto 2d coords dcnl note that this will take the raw values for 3d coordinates of each channel dcnl without applying any transforms if brain images are flipped up dn upon dcnl using imshow check your matplotlib backend as this behavior changes dcnl parameters dcnl fig instance of mayavi scene dcnl the figure on which you ve plotted electrodes using dcnl func mne viz plot alignment dcnl montage instance of digmontage or info | dict of ch xyz mappings dcnl the digital montage for the electrodes plotted in the scene if info dcnl channel positions will be pulled from the loc field of chs dcnl hide sensors bool dcnl whether to remove the spheres in the scene before taking a snapshot dcnl returns dcnl xy array shape n channels 2 dcnl the 2d location of each channel on the image of the current scene view dcnl im array shape m n 3 dcnl the screenshot of the current scene view
convert 3d points to a 2d perspective using a mayavi scene
return the 4x4 matrix to transform xyz space to the current view dcnl this is a concatenation of the model view and perspective transforms
return the 4x4 matrix to convert view coordinates to display coordinates dcnl it s assumed that the view should take up the entire window and that the dcnl origin of the window is in the upper left corner
plot dipoles on top of mri slices in 3d
plot dipoles
handle dipole plotter scroll key event
create layout arranging nodes on a circle dcnl parameters dcnl node names list of str dcnl node names dcnl node order list of str dcnl list with node names defining the order in which the nodes are dcnl arranged must have the elements as node names but the order can be dcnl different the nodes are arranged clockwise starting at start pos dcnl degrees dcnl start pos float dcnl angle in degrees that defines where the first node is plotted dcnl start between bool dcnl if true the layout starts with the position between the nodes this is dcnl the same as adding 180 len node names to start pos dcnl group boundaries none | arraylike dcnl list of of boundaries between groups at which point a group sep will dcnl be inserted e g 0 len node names 2 will create two groups dcnl group sep float dcnl group separation angle in degrees see group boundaries dcnl returns dcnl node angles array shape len node names dcnl node angles in degrees
isolate connections around a single node when user left clicks a node dcnl on right click resets all connections
visualize connectivity as a circular graph dcnl note this code is based on the circle graph example by nicolas p rougier dcnl http www labri fr perso nrougier coding dcnl parameters dcnl con array dcnl connectivity scores can be a square matrix or a 1d array if a 1d dcnl array is provided indices has to be used to define the connection dcnl indices dcnl node names list of str dcnl node names the order corresponds to the order in con dcnl indices tuple of arrays | none dcnl two arrays with indices of connections for which the connections dcnl strenghts are defined in con only needed if con is a 1d array dcnl n lines int | none dcnl if not none only the n lines strongest connections strength abs con dcnl are drawn dcnl node angles array shape len node names | none dcnl array with node positions in degrees if none the nodes are equally dcnl spaced on the circle see mne viz circular layout dcnl node width float | none dcnl width of each node in degrees if none the minimum angle between any dcnl two nodes is used as the width dcnl node colors list of tuples | list of str dcnl list with the color to use for each node if fewer colors than nodes dcnl are provided the colors will be repeated any color supported by dcnl matplotlib can be used e g rgba tuples named colors dcnl facecolor str dcnl color to use for background see matplotlib colors dcnl textcolor str dcnl color to use for text see matplotlib colors dcnl node edgecolor str dcnl color to use for lines around nodes see matplotlib colors dcnl linewidth float dcnl line width to use for connections dcnl colormap str dcnl colormap to use for coloring the connections dcnl vmin float | none dcnl minimum value for colormap if none it is determined automatically dcnl vmax float | none dcnl maximum value for colormap if none it is determined automatically dcnl colorbar bool dcnl display a colorbar or not dcnl title str dcnl the figure title dcnl colorbar size float dcnl size of the colorbar dcnl colorbar pos 2tuple dcnl position of the colorbar dcnl fontsize title int dcnl font size to use for title dcnl fontsize names int dcnl font size to use for node names dcnl fontsize colorbar int dcnl font size to use for colorbar dcnl padding float dcnl space to add around figure to accommodate long labels dcnl fig none | instance of matplotlib pyplot figure dcnl the figure to use if none a new figure with the specified background dcnl color will be created dcnl subplot int | 3tuple dcnl location of the subplot when creating figures with multiple plots e g dcnl 121 or 1 2 1 for 1 row 2 columns plot 1 see dcnl matplotlib pyplot subplot dcnl interactive bool dcnl when enabled leftclick on a node to show only connections to that dcnl node rightclick shows all connections dcnl node linewidth float dcnl line with for nodes dcnl show bool dcnl show figure if true dcnl returns dcnl fig instance of matplotlib pyplot figure dcnl the figure handle dcnl axes instance of matplotlib axes polaraxessubplot dcnl the subplot handle
get raw data
get events
test filter plotting
test plotting of covariances
test plotting of bem contours
test plotting events
test plotting of source spectrogram
test plotting snr estimate
test plotting dipole amplitudes
get raw data
get events
get picks
get epochs
test plotting of ica solutions
test plotting of ica properties
test plotting of ica panel
test plotting of ica cleaning
test plotting of ica scores
test plotting of components as instances of raw and epochs
test topomap plotting
test plotting of tfr data
get raw data
get events
helper for testing interactive annotations
test plotting of raw data
test plotting ref meg
test annotation mode of the plotter
test filtering of raw plots
test plotting of raw psds
test plotting of sensor array
get picks
get epochs
get epochs with delayed ssp
test plotting of evoked
get events
get picks
get epochs
get epochs with delayed ssp
test plotting of erp topography
test plotting of epochs image topography
test plotting of tfr data
test plotting montages
test plotting of head positions
test plotting of sparse source estimates
test plotting evoked field
test plotting of trans fif files and meg sensor layouts
test functionality for determing control points
test plotting source estimates with matplotlib
test mpl dipole plotting
test snapshot brain montage
get picks
get epochs
get epochs with delayed ssp
test epoch plotting
test plotting of epochs image
test plotting a drop log
test plotting epochs psd +topomap
test plotting connectivity circle
aux function for testing gat viz
test gat matrix plot
test gat diagonal plot
test gat times plot
test gat plot times chance level
test gat diagonal plot
test mne analyze colormap
test the clickableimage class
test adding background image to a figure
test autoscaling of channels for quick plotting
test validation of axes
plot a montage dcnl parameters dcnl montage instance of montage or digmontage dcnl the montage to visualize dcnl scale factor float dcnl determines the size of the points dcnl show names bool dcnl whether to show the channel names dcnl kind str dcnl whether to plot the montage as 3d or topomap default dcnl show bool dcnl show figure if true dcnl returns dcnl fig instance of matplotlib figure figure dcnl the figure object
prepare topo plot
update topomaps
plot topographic maps of ssp projections dcnl parameters dcnl projs list of projection dcnl the projections dcnl layout none | layout | list of layout dcnl layout instance specifying sensor positions does not need to be dcnl specified for neuromag data or a list of layout if projections dcnl are from different sensor types dcnl cmap matplotlib colormap | colormap bool | interactive | none dcnl colormap to use if tuple the first value indicates the colormap to dcnl use and the second value is a boolean defining interactivity in dcnl interactive mode only works if colorbar true the colors are dcnl adjustable by clicking and dragging the colorbar with left and right dcnl mouse button left mouse button moves the scale up and down and right dcnl mouse button adjusts the range hitting space bar resets the range up dcnl and down arrows can be used to change the colormap if none default dcnl reds is used for all positive data otherwise defaults to rdbu r dcnl if interactive translates to none true dcnl sensors bool | str dcnl add markers for sensor locations to the plot accepts matplotlib plot dcnl format string e g r+ for red plusses if true a circle will be dcnl used via add artist defaults to true dcnl colorbar bool dcnl plot a colorbar dcnl res int dcnl the resolution of the topomap image n pixels along each side dcnl size scalar dcnl side length of the topomaps in inches only applies when plotting dcnl multiple topomaps at a time dcnl show bool dcnl show figure if true dcnl outlines head | skirt | dict | none dcnl the outlines to be drawn if head the default head scheme will be dcnl drawn if skirt the head scheme will be drawn but sensors are dcnl allowed to be plotted outside of the head circle if dict each key dcnl refers to a tuple of x and y positions the values in mask pos will dcnl serve as image mask and the autoshrink bool field will trigger dcnl automated shrinking of the positions due to points outside the outline dcnl alternatively a matplotlib patch object can be passed for advanced dcnl masking options either directly or as a function that returns patches dcnl required for multiaxis plots if none nothing will be drawn dcnl defaults to head dcnl contours int | array of float dcnl the number of contour lines to draw if 0 no contours will be drawn dcnl when an integer matplotlib ticker locator is used to find suitable dcnl values for the contour thresholds may sometimes be inaccurate use dcnl array for accuracy if an array the values represent the levels for dcnl the contours defaults to 6 dcnl image interp str dcnl the image interpolation to be used all matplotlib options are dcnl accepted dcnl axes instance of axes | list | none dcnl the axes to plot to if list the list must be a list of axes of dcnl the same length as the number of projectors if instance of axes dcnl there must be only one projector defaults to none dcnl returns dcnl fig instance of matplotlib figure dcnl figure distributing one image per channel across sensor topography dcnl notes dcnl versionadded 0 9 0
check or create outlines for topoplot
draw the outlines for a topomap
plot sensors
plot a topographic map as image dcnl parameters dcnl data array shape n chan dcnl the data values to plot dcnl pos array shape n chan 2 | instance of info dcnl location information for the data points channels dcnl if an array for each data point the x and y coordinates dcnl if an info object it must contain only one data type and dcnl exactly len data data channels and the x y coordinates will dcnl be inferred from this info object dcnl vmin float | callable | none dcnl the value specifying the lower bound of the color range dcnl if none and vmax is none vmax is used else np min data dcnl if callable the output equals vmin data defaults to none dcnl vmax float | callable | none dcnl the value specifying the upper bound of the color range dcnl if none the maximum absolute value is used if callable the output dcnl equals vmax data defaults to none dcnl cmap matplotlib colormap | none dcnl colormap to use if none reds is used for all positive data dcnl otherwise defaults to rdbu r dcnl sensors bool | str dcnl add markers for sensor locations to the plot accepts matplotlib plot dcnl format string e g r+ for red plusses if true default circles dcnl will be used dcnl res int dcnl the resolution of the topomap image n pixels along each side dcnl axes instance of axes | none dcnl the axes to plot to if none the current axes will be used dcnl names list | none dcnl list of channel names if none channel names are not plotted dcnl show names bool | callable dcnl if true show channel names on top of the map if a callable is dcnl passed channel names will be formatted using the callable e g to dcnl delete the prefix meg from all channel names pass the function dcnl lambda x x replace meg if mask is not none only dcnl significant sensors will be shown dcnl if true a list of names must be provided see names keyword dcnl mask ndarray of bool shape n channels n times | none dcnl the channels to be marked as significant at a given time point dcnl indices set to true will be considered defaults to none dcnl mask params dict | none dcnl additional plotting parameters for plotting significant sensors dcnl default none equals dcnl dict marker o markerfacecolor w markeredgecolor k dcnl linewidth 0 markersize 4 dcnl outlines head | skirt | dict | none dcnl the outlines to be drawn if head the default head scheme will be dcnl drawn if skirt the head scheme will be drawn but sensors are dcnl allowed to be plotted outside of the head circle if dict each key dcnl refers to a tuple of x and y positions the values in mask pos will dcnl serve as image mask and the autoshrink bool field will trigger dcnl automated shrinking of the positions due to points outside the outline dcnl alternatively a matplotlib patch object can be passed for advanced dcnl masking options either directly or as a function that returns patches dcnl required for multiaxes plots if none nothing will be drawn dcnl defaults to head dcnl image mask ndarray of bool shape res res | none dcnl the image mask to cover the interpolated surface if none it will be dcnl computed from the outline dcnl contours int | array of float dcnl the number of contour lines to draw if 0 no contours will be drawn dcnl if an array the values represent the levels for the contours the dcnl values are in uv for eeg ft for magnetometers and ft m for dcnl gradiometers defaults to 6 dcnl image interp str dcnl the image interpolation to be used all matplotlib options are dcnl accepted dcnl show bool dcnl show figure if true dcnl head pos dict | none dcnl if none default the sensors are positioned such that they span dcnl the head circle if dict can have entries center tuple and dcnl scale tuple for what the center and scale of the head should be dcnl relative to the electrode locations dcnl onselect callable | none dcnl handle for a function that is called when the user selects a set of dcnl channels by rectangle selection matplotlib rectangleselector if dcnl none interactive selection is disabled defaults to none dcnl returns dcnl im matplotlib image axesimage dcnl the interpolated data dcnl cn matplotlib contour contourset dcnl the fieldlines
make an image mask
check if points are inside a contour
plot single ica map to axes
project unmixing matrix on interpolated sensor topogrpahy dcnl parameters dcnl ica instance of mne preprocessing ica dcnl the ica solution dcnl picks int | arraylike | none dcnl the indices of the sources to be plotted dcnl if none all are plotted in batches of 20 dcnl ch type mag | grad | planar1 | planar2 | eeg | none dcnl the channel type to plot for grad the gradiometers are dcnl collected in pairs and the rms for each pair is plotted dcnl if none then channels are chosen in the order given above dcnl res int dcnl the resolution of the topomap image n pixels along each side dcnl layout none | layout dcnl layout instance specifying sensor positions does not need to dcnl be specified for neuromag data if possible the correct layout is dcnl inferred from the data dcnl vmin float | callable | none dcnl the value specifying the lower bound of the color range dcnl if none and vmax is none vmax is used else np min data dcnl if callable the output equals vmin data defaults to none dcnl vmax float | callable | none dcnl the value specifying the upper bound of the color range dcnl if none the maximum absolute value is used if callable the output dcnl equals vmax data defaults to none dcnl cmap matplotlib colormap | colormap bool | interactive | none dcnl colormap to use if tuple the first value indicates the colormap to dcnl use and the second value is a boolean defining interactivity in dcnl interactive mode the colors are adjustable by clicking and dragging the dcnl colorbar with left and right mouse button left mouse button moves the dcnl scale up and down and right mouse button adjusts the range hitting dcnl space bar resets the range up and down arrows can be used to change dcnl the colormap if none reds is used for all positive data dcnl otherwise defaults to rdbu r if interactive translates to dcnl none true defaults to rdbu r dcnl warning interactive mode works smoothly only for a small amount dcnl of topomaps dcnl sensors bool | str dcnl add markers for sensor locations to the plot accepts matplotlib dcnl plot format string e g r+ for red plusses if true default dcnl circles will be used dcnl colorbar bool dcnl plot a colorbar dcnl title str | none dcnl title to use dcnl show bool dcnl show figure if true dcnl outlines head | skirt | dict | none dcnl the outlines to be drawn if head the default head scheme will be dcnl drawn if skirt the head scheme will be drawn but sensors are dcnl allowed to be plotted outside of the head circle if dict each key dcnl refers to a tuple of x and y positions the values in mask pos will dcnl serve as image mask and the autoshrink bool field will trigger dcnl automated shrinking of the positions due to points outside the outline dcnl alternatively a matplotlib patch object can be passed for advanced dcnl masking options either directly or as a function that returns patches dcnl required for multiaxis plots if none nothing will be drawn dcnl defaults to head dcnl contours int | array of float dcnl the number of contour lines to draw if 0 no contours will be drawn dcnl when an integer matplotlib ticker locator is used to find suitable dcnl values for the contour thresholds may sometimes be inaccurate use dcnl array for accuracy if an array the values represent the levels for dcnl the contours defaults to 6 dcnl image interp str dcnl the image interpolation to be used all matplotlib options are dcnl accepted dcnl head pos dict | none dcnl if none default the sensors are positioned such that they span dcnl the head circle if dict can have entries center tuple and dcnl scale tuple for what the center and scale of the head should be dcnl relative to the electrode locations dcnl inst raw | epochs | none dcnl to be able to see component properties after clicking on component dcnl topomap you need to pass relevant data instances of raw or epochs dcnl for example the data that ica was trained on this takes effect dcnl only when running matplotlib in interactive mode dcnl returns dcnl fig instance of matplotlib pyplot figure or list dcnl the figure object s
plot topographic maps of specific timefrequency intervals of tfr data dcnl parameters dcnl tfr avereagetfr dcnl the avereagetfr object dcnl tmin none | float dcnl the first time instant to display if none the first time point dcnl available is used dcnl tmax none | float dcnl the last time instant to display if none the last time point dcnl available is used dcnl fmin none | float dcnl the first frequency to display if none the first frequency dcnl available is used dcnl fmax none | float dcnl the last frequency to display if none the last frequency dcnl available is used dcnl ch type mag | grad | planar1 | planar2 | eeg | none dcnl the channel type to plot for grad the gradiometers are dcnl collected in pairs and the rms for each pair is plotted dcnl if none then channels are chosen in the order given above dcnl baseline tuple or list of length 2 dcnl the time interval to apply rescaling baseline correction dcnl if none do not apply it if baseline is a b dcnl the interval is between a s and b s dcnl if a is none the beginning of the data is used dcnl and if b is none then b is set to the end of the interval dcnl if baseline is equal to none none all the time dcnl interval is used dcnl mode logratio | ratio | zscore | mean | percent dcnl do baseline correction with ratio power is divided by mean dcnl power during baseline or zscore power is divided by standard dcnl deviation of power during baseline after subtracting the mean dcnl power power mean power baseline std power baseline dcnl if none baseline no correction will be performed dcnl layout none | layout dcnl layout instance specifying sensor positions does not need to dcnl be specified for neuromag data if possible the correct layout dcnl file is inferred from the data if no appropriate layout file dcnl was found the layout is automatically generated from the sensor dcnl locations dcnl vmin float | callable | none dcnl the value specifying the lower bound of the color range dcnl if none and vmax is none vmax is used else np min data or in case dcnl data contains only positive values 0 if callable the output equals dcnl vmin data defaults to none dcnl vmax float | callable | none dcnl the value specifying the upper bound of the color range if none the dcnl maximum value is used if callable the output equals vmax data dcnl defaults to none dcnl cmap matplotlib colormap | colormap bool | interactive | none dcnl colormap to use if tuple the first value indicates the colormap to dcnl use and the second value is a boolean defining interactivity in dcnl interactive mode the colors are adjustable by clicking and dragging the dcnl colorbar with left and right mouse button left mouse button moves the dcnl scale up and down and right mouse button adjusts the range hitting dcnl space bar resets the range up and down arrows can be used to change dcnl the colormap if none default reds is used for all positive data dcnl otherwise defaults to rdbu r if interactive translates to dcnl none true dcnl sensors bool | str dcnl add markers for sensor locations to the plot accepts matplotlib dcnl plot format string e g r+ for red plusses if true default dcnl circles will be used dcnl colorbar bool dcnl plot a colorbar dcnl unit str | none dcnl the unit of the channel type used for colorbar labels dcnl res int dcnl the resolution of the topomap image n pixels along each side dcnl size float dcnl side length per topomap in inches only applies when plotting multiple dcnl topomaps at a time dcnl cbar fmt str dcnl string format for colorbar values dcnl show names bool | callable dcnl if true show channel names on top of the map if a callable is dcnl passed channel names will be formatted using the callable e g to dcnl delete the prefix meg from all channel names pass the function dcnl lambda x x replace meg if mask is not none only dcnl significant sensors will be shown dcnl title str | none dcnl title if none default no title is displayed dcnl axes instance of axis | none dcnl the axes to plot to if none the axes is defined automatically dcnl show bool dcnl show figure if true dcnl outlines head | skirt | dict | none dcnl the outlines to be drawn if head the default head scheme will be dcnl drawn if skirt the head scheme will be drawn but sensors are dcnl allowed to be plotted outside of the head circle if dict each key dcnl refers to a tuple of x and y positions the values in mask pos will dcnl serve as image mask and the autoshrink bool field will trigger dcnl automated shrinking of the positions due to points outside the outline dcnl alternatively a matplotlib patch object can be passed for advanced dcnl masking options either directly or as a function that returns patches dcnl required for multiaxis plots if none nothing will be drawn dcnl defaults to head dcnl head pos dict | none dcnl if none default the sensors are positioned such that they span dcnl the head circle if dict can have entries center tuple and dcnl scale tuple for what the center and scale of the head should be dcnl relative to the electrode locations dcnl contours int | array of float dcnl the number of contour lines to draw if 0 no contours will be drawn dcnl when an integer matplotlib ticker locator is used to find suitable dcnl values for the contour thresholds may sometimes be inaccurate use dcnl array for accuracy if an array the values represent the levels for dcnl the contours if colorbar true the ticks in colorbar correspond to the dcnl contour levels defaults to 6 dcnl returns dcnl fig matplotlib figure figure dcnl the figure containing the topography
plot topographic maps of specific time points of evoked data dcnl parameters dcnl evoked evoked dcnl the evoked object dcnl times float | array of floats | auto | peaks | interactive dcnl the time point s to plot if auto the number of axes determines dcnl the amount of time point s if axes is also none at most 10 dcnl topographies will be shown with a regular time spacing between the dcnl first and last time instant if peaks finds time points dcnl automatically by checking for local maxima in global field power if dcnl interactive the time can be set interactively at runtime by using a dcnl slider dcnl ch type mag | grad | planar1 | planar2 | eeg | none dcnl the channel type to plot for grad the gradiometers are collected in dcnl pairs and the rms for each pair is plotted dcnl if none then channels are chosen in the order given above dcnl layout none | layout dcnl layout instance specifying sensor positions does not need to dcnl be specified for neuromag data if possible the correct layout file dcnl is inferred from the data if no appropriate layout file was found the dcnl layout is automatically generated from the sensor locations dcnl vmin float | callable | none dcnl the value specifying the lower bound of the color range dcnl if none and vmax is none vmax is used else np min data dcnl if callable the output equals vmin data defaults to none dcnl vmax float | callable | none dcnl the value specifying the upper bound of the color range dcnl if none the maximum absolute value is used if callable the output dcnl equals vmax data defaults to none dcnl cmap matplotlib colormap | colormap bool | interactive | none dcnl colormap to use if tuple the first value indicates the colormap to dcnl use and the second value is a boolean defining interactivity in dcnl interactive mode the colors are adjustable by clicking and dragging the dcnl colorbar with left and right mouse button left mouse button moves the dcnl scale up and down and right mouse button adjusts the range zoom dcnl the mouse scroll can also be used to adjust the range hitting space dcnl bar resets the range up and down arrows can be used to change the dcnl colormap if none default reds is used for all positive data dcnl otherwise defaults to rdbu r if interactive translates to dcnl none true dcnl warning interactive mode works smoothly only for a small amount dcnl of topomaps interactive mode is disabled by default for more than dcnl 2 topomaps dcnl sensors bool | str dcnl add markers for sensor locations to the plot accepts matplotlib plot dcnl format string e g r+ for red plusses if true default dcnl circles will be used dcnl colorbar bool dcnl plot a colorbar dcnl scale dict | float | none dcnl scale the data for plotting if none defaults to 1e6 for eeg 1e13 dcnl for grad and 1e15 for mag dcnl scale time float | none dcnl scale the time labels defaults to 1e3 ms dcnl unit dict | str | none dcnl the unit of the channel type used for colorbar label if dcnl scale is none the unit is automatically determined dcnl res int dcnl the resolution of the topomap image n pixels along each side dcnl size float dcnl side length per topomap in inches dcnl cbar fmt str dcnl string format for colorbar values dcnl time format str dcnl string format for topomap values defaults to 01d ms dcnl proj bool | interactive dcnl if true ssp projections are applied before display if interactive dcnl a check box for reversible selection of ssp projection vectors will dcnl be show dcnl show bool dcnl show figure if true dcnl show names bool | callable dcnl if true show channel names on top of the map if a callable is dcnl passed channel names will be formatted using the callable e g to dcnl delete the prefix meg from all channel names pass the function dcnl lambda x x replace meg if mask is not none only dcnl significant sensors will be shown dcnl title str | none dcnl title if none default no title is displayed dcnl mask ndarray of bool shape n channels n times | none dcnl the channels to be marked as significant at a given time point dcnl indices set to true will be considered defaults to none dcnl mask params dict | none dcnl additional plotting parameters for plotting significant sensors dcnl default none equals dcnl dict marker o markerfacecolor w markeredgecolor k dcnl linewidth 0 markersize 4 dcnl outlines head | skirt | dict | none dcnl the outlines to be drawn if head the default head scheme will be dcnl drawn if skirt the head scheme will be drawn but sensors are dcnl allowed to be plotted outside of the head circle if dict each key dcnl refers to a tuple of x and y positions the values in mask pos will dcnl serve as image mask and the autoshrink bool field will trigger dcnl automated shrinking of the positions due to points outside the outline dcnl alternatively a matplotlib patch object can be passed for advanced dcnl masking options either directly or as a function that returns patches dcnl required for multiaxis plots if none nothing will be drawn dcnl defaults to head dcnl contours int | array of float dcnl the number of contour lines to draw if 0 no contours will be drawn dcnl when an integer matplotlib ticker locator is used to find suitable dcnl values for the contour thresholds may sometimes be inaccurate use dcnl array for accuracy if an array the values represent the levels for dcnl the contours the values are in uv for eeg ft for magnetometers and dcnl ft m for gradiometers if colorbar true the ticks in colorbar dcnl correspond to the contour levels defaults to 6 dcnl image interp str dcnl the image interpolation to be used all matplotlib options are dcnl accepted dcnl average float | none dcnl the time window around a given time to be used for averaging seconds dcnl for example 0 01 would translate into window that starts 5 ms before dcnl and ends 5 ms after a given time point defaults to none which means dcnl no averaging dcnl head pos dict | none dcnl if none default the sensors are positioned such that they span dcnl the head circle if dict can have entries center tuple and dcnl scale tuple for what the center and scale of the head should be dcnl relative to the electrode locations dcnl axes instance of axes | list | none dcnl the axes to plot to if list the list must be a list of axes of the dcnl same length as times unless times is none if instance of dcnl axes times must be a float or a list of one float dcnl defaults to none dcnl returns dcnl fig instance of matplotlib figure figure dcnl the figure
resize colorbar
handle selection in interactive topomap
plot topomap multi cbar
plot the topomap of the power spectral density across epochs dcnl parameters dcnl epochs instance of epochs dcnl the epochs object dcnl bands list of tuple | none dcnl the lower and upper frequency and the name for that band if none dcnl default expands to dcnl bands 0 4 delta 4 8 theta 8 12 alpha dcnl 12 30 beta 30 45 gamma dcnl vmin float | callable | none dcnl the value specifying the lower bound of the color range dcnl if none np min data is used if callable the output equals dcnl vmin data dcnl vmax float | callable | none dcnl the value specifying the upper bound of the color range dcnl if none the maximum absolute value is used if callable the output dcnl equals vmax data defaults to none dcnl tmin float | none dcnl start time to consider dcnl tmax float | none dcnl end time to consider dcnl proj bool dcnl apply projection dcnl bandwidth float dcnl the bandwidth of the multi taper windowing function in hz the default dcnl value is a window halfbandwidth of 4 hz dcnl adaptive bool dcnl use adaptive weights to combine the tapered spectra into psd dcnl slow use n jobs 1 to speed up computation dcnl low bias bool dcnl only use tapers with more than 90 spectral concentration within dcnl bandwidth dcnl normalization str dcnl either full or length default if full the psd will dcnl be normalized by the sampling rate as well as the length of dcnl the signal as in nitime dcnl ch type mag | grad | planar1 | planar2 | eeg | none dcnl the channel type to plot for grad the gradiometers are collected in dcnl pairs and the rms for each pair is plotted if none then first dcnl available channel type from order given above is used defaults to dcnl none dcnl layout none | layout dcnl layout instance specifying sensor positions does not need to dcnl be specified for neuromag data if possible the correct layout dcnl file is inferred from the data if no appropriate layout file was dcnl found the layout is automatically generated from the sensor dcnl locations dcnl cmap matplotlib colormap | colormap bool | interactive | none dcnl colormap to use if tuple the first value indicates the colormap to dcnl use and the second value is a boolean defining interactivity in dcnl interactive mode the colors are adjustable by clicking and dragging the dcnl colorbar with left and right mouse button left mouse button moves the dcnl scale up and down and right mouse button adjusts the range hitting dcnl space bar resets the range up and down arrows can be used to change dcnl the colormap if none default reds is used for all positive data dcnl otherwise defaults to rdbu r if interactive translates to dcnl none true dcnl agg fun callable dcnl the function used to aggregate over frequencies dcnl defaults to np sum if normalize is true else np mean dcnl db bool dcnl if true transform data to decibels with 10 np log10 data dcnl following the application of agg fun only valid if normalize is dcnl false dcnl n jobs int dcnl number of jobs to run in parallel dcnl normalize bool dcnl if true each band will be divided by the total power defaults to dcnl false dcnl cbar fmt str dcnl the colorbar format defaults to 0 3f dcnl outlines head | skirt | dict | none dcnl the outlines to be drawn if head the default head scheme will be dcnl drawn if skirt the head scheme will be drawn but sensors are dcnl allowed to be plotted outside of the head circle if dict each key dcnl refers to a tuple of x and y positions the values in mask pos will dcnl serve as image mask and the autoshrink bool field will trigger dcnl automated shrinking of the positions due to points outside the outline dcnl alternatively a matplotlib patch object can be passed for advanced dcnl masking options either directly or as a function that returns patches dcnl required for multiaxis plots if none nothing will be drawn dcnl defaults to head dcnl axes list of axes | none dcnl list of axes to plot consecutive topographies to if none the axes dcnl will be created automatically defaults to none dcnl show bool dcnl show figure if true dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl fig instance of matplotlib figure dcnl figure distributing one image per channel across sensor topography
plot spatial maps of psds dcnl parameters dcnl psds np ndarray of float shape n channels n freqs dcnl power spectral densities dcnl freqs np ndarray of float shape n freqs dcnl frequencies used to compute psds dcnl pos numpy ndarray of float shape n sensors 2 dcnl the positions of the sensors dcnl agg fun callable dcnl the function used to aggregate over frequencies dcnl defaults to np sum if normalize is true else np mean dcnl vmin float | callable | none dcnl the value specifying the lower bound of the color range dcnl if none np min data is used if callable the output equals dcnl vmin data dcnl vmax float | callable | none dcnl the value specifying the upper bound of the color range dcnl if none the maximum absolute value is used if callable the output dcnl equals vmax data defaults to none dcnl bands list of tuple | none dcnl the lower and upper frequency and the name for that band if none dcnl default expands to dcnl bands 0 4 delta 4 8 theta 8 12 alpha dcnl 12 30 beta 30 45 gamma dcnl cmap matplotlib colormap | colormap bool | interactive | none dcnl colormap to use if tuple the first value indicates the colormap to dcnl use and the second value is a boolean defining interactivity in dcnl interactive mode the colors are adjustable by clicking and dragging the dcnl colorbar with left and right mouse button left mouse button moves the dcnl scale up and down and right mouse button adjusts the range hitting dcnl space bar resets the range up and down arrows can be used to change dcnl the colormap if none default reds is used for all positive data dcnl otherwise defaults to rdbu r if interactive translates to dcnl none true dcnl db bool dcnl if true transform data to decibels with 10 np log10 data dcnl following the application of agg fun only valid if normalize is dcnl false dcnl normalize bool dcnl if true each band will be divided by the total power defaults to dcnl false dcnl cbar fmt str dcnl the colorbar format defaults to 0 3f dcnl outlines head | skirt | dict | none dcnl the outlines to be drawn if head the default head scheme will be dcnl drawn if skirt the head scheme will be drawn but sensors are dcnl allowed to be plotted outside of the head circle if dict each key dcnl refers to a tuple of x and y positions the values in mask pos will dcnl serve as image mask and the autoshrink bool field will trigger dcnl automated shrinking of the positions due to points outside the outline dcnl alternatively a matplotlib patch object can be passed for advanced dcnl masking options either directly or as a function that returns patches dcnl required for multiaxis plots if none nothing will be drawn dcnl defaults to head dcnl axes list of axes | none dcnl list of axes to plot consecutive topographies to if none the axes dcnl will be created automatically defaults to none dcnl show bool dcnl show figure if true dcnl returns dcnl fig instance of matplotlib figure dcnl figure distributing one image per channel across sensor topography
plot the sensor positions dcnl parameters dcnl layout none | layout dcnl layout instance specifying sensor positions dcnl picks arraylike dcnl indices of the channels to show if none default all the channels dcnl are shown dcnl show bool dcnl show figure if true defaults to true dcnl returns dcnl fig instance of matplotlib figure dcnl figure containing the sensor topography dcnl notes dcnl versionadded 0 12 0
handle drawing average tfr over channels called from topomap
prepare the topomap
hide axis frame for topomaps
initialize animated topomap
update animated topomap
pause or continue the animation on mouse click
handle key presses for the animation
make animation of evoked data as topomap timeseries dcnl animation can be paused resumed with left mouse button dcnl left and right arrow keys can be used to move backward or forward in dcnl time dcnl parameters dcnl evoked instance of evoked dcnl the evoked data dcnl ch type str | none dcnl channel type to plot accepted data types mag grad eeg dcnl if none first available channel type from mag grad eeg is dcnl used defaults to none dcnl times array of floats | none dcnl the time points to plot if none 10 evenly spaced samples are dcnl calculated over the evoked time series defaults to none dcnl frame rate int | none dcnl frame rate for the animation in hz if none frame rate sfreq 10 dcnl defaults to none dcnl butterfly bool dcnl whether to plot the data as butterfly plot under the topomap dcnl defaults to false dcnl blit bool dcnl whether to use blit to optimize drawing in general it is recommended dcnl to use blit in combination with show true if you intend to save dcnl the animation it is better to disable blit for macosx blit is always dcnl disabled defaults to true dcnl show bool dcnl whether to show the animation defaults to true dcnl returns dcnl fig instance of matplotlib figure dcnl the figure dcnl anim instance of matplotlib funcanimation dcnl animation of the topomap dcnl notes dcnl versionadded 0 12 0
set correct contour levels
plot a generalizationacrosstime object dcnl predict each classifier if multiple classifiers are passed average dcnl prediction across all classifier to result in a single prediction per dcnl classifier dcnl parameters dcnl gat instance of mne decoding generalizationacrosstime dcnl the gat object dcnl title str | none dcnl figure title defaults to none dcnl vmin float | none dcnl min color value for scores if none sets to min gat scores dcnl defaults to none dcnl vmax float | none dcnl max color value for scores if none sets to max gat scores dcnl defaults to none dcnl tlim arraylike 4 | none dcnl the temporal boundaries if none expands to dcnl tmin train tmax train tmin test tmax test defaults to none dcnl ax object | none dcnl plot pointer if none generate new figure defaults to none dcnl cmap str | cmap object dcnl the color map to be used defaults to rdbu r dcnl show bool dcnl if true the figure will be shown defaults to true dcnl colorbar bool dcnl if true the colorbar of the figure is displayed defaults to true dcnl xlabel bool dcnl if true the xlabel is displayed defaults to true dcnl ylabel bool dcnl if true the ylabel is displayed defaults to true dcnl returns dcnl fig instance of matplotlib figure figure dcnl the figure
plot the generalizationacrosstime results dcnl plot the scores of the classifier trained at train time dcnl parameters dcnl gat instance of mne decoding generalizationacrosstime dcnl the gat object dcnl train time diagonal | float | list or array of float dcnl plot a 1d array of a portion of gat scores dcnl if set to diagonal plots the gat scores of classifiers dcnl trained and tested at identical times dcnl if set to float | list or array of float plots scores of the dcnl classifier s trained at a specific training time s dcnl default to diagonal dcnl title str | none dcnl figure title defaults to none dcnl xmin float | none optional dcnl min time value defaults to none dcnl xmax float | none optional dcnl max time value defaults to none dcnl ymin float | none optional dcnl min score value if none sets to min scores defaults to none dcnl ymax float | none optional dcnl max score value if none sets to max scores defaults to none dcnl ax object | none dcnl plot pointer if none generate new figure defaults to none dcnl show bool optional dcnl if true the figure will be shown defaults to true dcnl color str dcnl score line color defaults to steelblue dcnl xlabel bool dcnl if true the xlabel is displayed defaults to true dcnl ylabel bool dcnl if true the ylabel is displayed defaults to true dcnl legend bool dcnl if true a legend is displayed defaults to true dcnl chance bool | float dcnl plot chance level if true chance level is estimated from the type dcnl of scorer defaults to none dcnl label str dcnl score label used in the legend defaults to classif score dcnl returns dcnl fig instance of matplotlib figure figure dcnl the figure
plot a unique score 1d array
get the chance level
plot event related potential fields image dcnl parameters dcnl epochs instance of epochs dcnl the epochs dcnl picks int | arraylike of int | none dcnl the indices of the channels to consider if none the first dcnl five good channels are plotted dcnl sigma float dcnl the standard deviation of the gaussian smoothing to apply along dcnl the epoch axis to apply in the image if 0 no smoothing is applied dcnl vmin float dcnl the min value in the image the unit is uv for eeg channels dcnl ft for magnetometers and ft cm for gradiometers dcnl vmax float dcnl the max value in the image the unit is uv for eeg channels dcnl ft for magnetometers and ft cm for gradiometers dcnl colorbar bool dcnl display or not a colorbar dcnl order none | array of int | callable dcnl if not none order is used to reorder the epochs on the yaxis dcnl of the image if it s an array of int it should be of length dcnl the number of good epochs if it s a callable the arguments dcnl passed are the times vector and the data as 2d array dcnl data shape1 len times dcnl show bool dcnl show figure if true dcnl units dict | none dcnl the units of the channel types used for axes lables if none dcnl defaults to units dict eeg uv grad ft cm mag ft dcnl scalings dict | none dcnl the scalings of the channel types to be applied for plotting dcnl if none defaults to scalings dict eeg 1e6 grad 1e13 mag 1e15 dcnl eog 1e6 dcnl cmap matplotlib colormap | colormap bool | interactive dcnl colormap if tuple the first value indicates the colormap to use and dcnl the second value is a boolean defining interactivity in interactive dcnl mode the colors are adjustable by clicking and dragging the colorbar dcnl with left and right mouse button left mouse button moves the scale up dcnl and down and right mouse button adjusts the range hitting space bar dcnl resets the scale up and down arrows can be used to change the dcnl colormap if interactive translates to rdbu r true defaults to dcnl rdbu r dcnl fig matplotlib figure | none dcnl figure instance to draw the image to figure must contain two axes for dcnl drawing the single trials and evoked responses if none a new figure is dcnl created defaults to none dcnl axes list of matplotlib axes | none dcnl list of axes instances to draw the image erp and colorbar to dcnl must be of length three if colorbar is true with the last list element dcnl being the colorbar axes or two if colorbar is false if both fig and dcnl axes are passed an error is raised defaults to none dcnl overlay times arraylike shape n epochs | none dcnl if not none the parameter is interpreted as time instants in seconds dcnl and is added to the image it is typically useful to display reaction dcnl times note that it is defined with respect to the order dcnl of epochs such that overlay times0 corresponds to epochs0 dcnl returns dcnl figs lists of matplotlib figures dcnl one figure per channel displayed
show the channel stats based on a drop log from epochs dcnl parameters dcnl drop log list of lists dcnl epoch drop log from epochs drop log dcnl threshold float dcnl the percentage threshold to use to decide whether or not to dcnl plot default is zero always plot dcnl n max plot int dcnl maximum number of channels to show stats for dcnl subject str dcnl the subject name to use in the title of the plot dcnl color tuple | str dcnl color to use for the bars dcnl width float dcnl width of the bars dcnl ignore list dcnl the drop reasons to ignore dcnl show bool dcnl show figure if true dcnl returns dcnl fig instance of matplotlib figure figure dcnl the figure
handle drawing epochs axes
handle epochs navigation click
handle epochs axes click
visualize epochs dcnl bad epochs can be marked with a left click on top of the epoch bad dcnl channels can be selected by clicking the channel name on the left side of dcnl the main axes calling this function drops all the selected bad epochs as dcnl well as bad epochs marked beforehand with rejection parameters dcnl parameters dcnl epochs instance of epochs dcnl the epochs object dcnl picks arraylike of int | none dcnl channels to be included if none only good data channels are used dcnl defaults to none dcnl scalings dict | auto | none dcnl scaling factors for the traces if any fields in scalings are auto dcnl the scaling factor is set to match the 99 5th percentile of a subset of dcnl the corresponding data if scalings auto all scalings fields are dcnl set to auto if any fields are auto and data is not preloaded dcnl a subset of epochs up to 100mb will be loaded if none defaults to dcnl dict mag 1e12 grad 4e11 eeg 20e6 eog 150e6 ecg 5e4 dcnl emg 1e3 ref meg 1e12 misc 1e3 stim 1 resp 1 chpi 1e4 dcnl n epochs int dcnl the number of epochs per view defaults to 20 dcnl n channels int dcnl the number of channels per view defaults to 20 dcnl title str | none dcnl the title of the window if none epochs name will be displayed dcnl defaults to none dcnl events none array shape n events 3 dcnl events to show with vertical bars if events are provided the epoch dcnl numbers are not shown to prevent overlap you can toggle epoch dcnl numbering through options press o key you can use dcnl func mne viz plot events as a legend for the colors by default the dcnl coloring scheme is the same dcnl warning if the epochs have been resampled the events no longer dcnl align with the data dcnl versionadded 0 14 0 dcnl event colors none dict dcnl dictionary of event id value and its associated color if none dcnl colors are automatically drawn from a default list cycled through if dcnl number of events longer than list of default colors uses the same dcnl coloring scheme as func mne viz plot events dcnl versionadded 0 14 0 dcnl show bool dcnl show figure if true defaults to true dcnl block bool dcnl whether to halt program execution until the figure is closed dcnl useful for rejecting bad trials on the fly by clicking on an epoch dcnl defaults to false dcnl decim int | auto dcnl amount to decimate the data during display for speed purposes dcnl you should only decimate if the data are sufficiently lowpassed dcnl otherwise aliasing can occur the auto mode default uses dcnl the decimation that results in a sampling rate at least three times dcnl larger than info lowpass e g a 40 hz lowpass will result in dcnl at least a 120 hz displayed sample rate dcnl versionadded 0 15 dcnl returns dcnl fig instance of matplotlib figure figure dcnl the figure dcnl notes dcnl the arrow keys up down left right can be used to navigate between dcnl channels and epochs and the scaling can be adjusted with and + or dcnl keys but this depends on the backend matplotlib is configured to use dcnl e g mpl use tkagg should work full screen mode can be toggled dcnl with f11 key the amount of epochs and channels per view can be adjusted dcnl with home end and page down page up keys these can also be set through dcnl options dialog by pressing o key h key plots a histogram of dcnl peaktopeak values along with the used rejection thresholds butterfly dcnl plot can be toggled with b key right mouse click adds a vertical line dcnl to the plot click help button at bottom left corner of the plotter to dcnl view all the options dcnl versionadded 0 10 0
plot the power spectral density across epochs dcnl parameters dcnl epochs instance of epochs dcnl the epochs object dcnl fmin float dcnl start frequency to consider dcnl fmax float dcnl end frequency to consider dcnl tmin float | none dcnl start time to consider dcnl tmax float | none dcnl end time to consider dcnl proj bool dcnl apply projection dcnl bandwidth float dcnl the bandwidth of the multi taper windowing function in hz the default dcnl value is a window halfbandwidth of 4 dcnl adaptive bool dcnl use adaptive weights to combine the tapered spectra into psd dcnl slow use n jobs 1 to speed up computation dcnl low bias bool dcnl only use tapers with more than 90 spectral concentration within dcnl bandwidth dcnl normalization str dcnl either full or length default if full the psd will dcnl be normalized by the sampling rate as well as the length of dcnl the signal as in nitime dcnl picks arraylike of int | none dcnl list of channels to use dcnl ax instance of matplotlib axes | none dcnl axes to plot into if none axes will be created dcnl color str | tuple dcnl a matplotlibcompatible color to use dcnl area mode str | none dcnl mode for plotting area if std the mean + 1 std across channels dcnl will be plotted if range the min and max across channels will be dcnl plotted bad channels will be excluded from these calculations dcnl if none no area will be plotted dcnl area alpha float dcnl alpha for the area dcnl db bool dcnl if true transform data to decibels dcnl n jobs int dcnl number of jobs to run in parallel dcnl show bool dcnl show figure if true dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl fig instance of matplotlib figure dcnl figure distributing one image per channel across sensor topography
set up the mne browse epochs window
set up the projectors for epochs browser
plot concatenated epochs
deal with proj changed
handle picks
deal with horizontal shift of the viewport
plot vertical lines
select drop bad epochs
select bad channels
handle scroll events
handle mouse click events
handle key presses
set up butterfly plot
add a channel name on click
drop selected bad epochs called on closing of the plot
handle resize event
change the amount of channels and epochs per view
toggle axis labels
open the option window
handle close event from settings dialog
plott histogram of peaktopeak values
handle click on labels returns channel name and idx
draw event lines
deal with changed proj
deal with time or proj changed
select or drop bad channels onpick
plot raw data dcnl parameters dcnl raw instance of raw dcnl the raw data to plot dcnl events array | none dcnl events to show with vertical bars dcnl duration float dcnl time window sec to plot the lesser of this value and the duration dcnl of the raw file will be used dcnl start float dcnl initial time to show can be changed dynamically once plotted if dcnl show first samp is true then it is taken relative to dcnl raw first samp dcnl n channels int dcnl number of channels to plot at once defaults to 20 has no effect if dcnl order is position selection or butterfly dcnl bgcolor color object dcnl color of the background dcnl color dict | color object | none dcnl color for the data traces if none defaults to dcnl dict mag darkblue grad b eeg k eog k ecg m dcnl emg k ref meg steelblue misc k stim k dcnl resp k chpi k dcnl bad color color object dcnl color to make bad channels dcnl event color color object | dict dcnl color to use for events can also be a dict with dcnl event number color pairings use event number 1 for dcnl any event numbers in the events list that are not in the dictionary dcnl scalings dict | none dcnl scaling factors for the traces if any fields in scalings are auto dcnl the scaling factor is set to match the 99 5th percentile of a subset of dcnl the corresponding data if scalings auto all scalings fields are dcnl set to auto if any fields are auto and data is not preloaded a dcnl subset of times up to 100mb will be loaded if none defaults to dcnl dict mag 1e12 grad 4e11 eeg 20e6 eog 150e6 ecg 5e4 dcnl emg 1e3 ref meg 1e12 misc 1e3 stim 1 dcnl resp 1 chpi 1e4 dcnl remove dc bool dcnl if true remove dc component when plotting data dcnl order array of int | none dcnl order in which to plot data if the array is shorter than the number of dcnl channels only the given channels are plotted if none default all dcnl channels are plotted if group by is position or dcnl selection the order parameter is used only for selecting the dcnl channels to be plotted dcnl show options bool dcnl if true a dialog for options related to projection is shown dcnl title str | none dcnl the title of the window if none and either the filename of the dcnl raw object or <unknown will be displayed as title dcnl show bool dcnl show figure if true dcnl block bool dcnl whether to halt program execution until the figure is closed dcnl useful for setting bad channels on the fly by clicking on a line dcnl may not work on all systems platforms dcnl highpass float | none dcnl highpass to apply when displaying data dcnl lowpass float | none dcnl lowpass to apply when displaying data dcnl filtorder int dcnl filtering order note that for efficiency and simplicity dcnl filtering during plotting uses forwardbackward iir filtering dcnl so the effective filter order will be twice filtorder dcnl filtering the lines for display may also produce some edge dcnl artifacts at the left and right edges of the signals dcnl during display filtering requires scipy 0 10 dcnl clipping str | none dcnl if none channels are allowed to exceed their designated bounds in dcnl the plot if clamp then values are clamped to the appropriate dcnl range for display creating steplike artifacts if transparent dcnl then excessive values are not shown creating gaps in the traces dcnl show first samp bool dcnl if true show time axis relative to the raw first samp dcnl proj bool dcnl whether to apply projectors prior to plotting default is true dcnl individual projectors can be enabled disabled interactively see dcnl notes this argument only affects the plot use raw apply proj dcnl to modify the data stored in the raw object dcnl group by str dcnl how to group channels type groups by channel type dcnl original plots in the order of ch names selection uses dcnl elekta s channel groupings only works for neuromag data dcnl position groups the channels by the positions of the sensors dcnl selection and position modes allow custom selections by dcnl using lasso selector on the topomap pressing ctrl key while dcnl selecting allows appending to the current selection channels marked as dcnl bad appear with red edges on the topomap type and original dcnl groups the channels by type in butterfly mode whereas selection dcnl and position use regional grouping type and original dcnl modes are overrided with order keyword dcnl butterfly bool dcnl whether to start in butterfly mode defaults to false dcnl decim int | auto dcnl amount to decimate the data during display for speed purposes dcnl you should only decimate if the data are sufficiently lowpassed dcnl otherwise aliasing can occur the auto mode default uses dcnl the decimation that results in a sampling rate least three times dcnl larger than min info lowpass lowpass e g a 40 hz lowpass dcnl will result in at least a 120 hz displayed sample rate dcnl returns dcnl fig instance of matplotlib figure figure dcnl raw traces dcnl notes dcnl the arrow keys up down left right can typically be used to navigate dcnl between channels and time ranges but this depends on the backend dcnl matplotlib is configured to use e g mpl use tkagg should work the dcnl scaling can be adjusted with and + or keys the viewport dimensions dcnl can be adjusted with page up page down and home end keys full screen mode dcnl can be to toggled with f11 key to mark or unmark a channel as bad click dcnl on the rather flat segments of a channel s time series the changes will be dcnl reflected immediately in the raw object s raw info bads entry dcnl if projectors are present a button labelled proj in the lower right dcnl corner of the plot window opens a secondary control window which allows dcnl enabling disabling specific projectors individually this provides a means dcnl of interactively observing how each projector would affect the raw data if dcnl it were applied dcnl annotation mode is toggled by pressing a and butterfly mode by pressing dcnl b
handle scroll in selection dialog
handle keys in selection dialog
handle closing of raw browser with selections
select bad channels
set psd plot params
convert psds to db if necessary and appropriate units
plot the power spectral density across channels dcnl parameters dcnl raw instance of io raw dcnl the raw instance to use dcnl tmin float dcnl start time for calculations dcnl tmax float dcnl end time for calculations dcnl fmin float dcnl start frequency to consider dcnl fmax float dcnl end frequency to consider dcnl proj bool dcnl apply projection dcnl n fft int | none dcnl number of points to use in welch fft calculations dcnl default is none which uses the minimum of 2048 and the dcnl number of time points dcnl picks arraylike of int | none dcnl list of channels to use cannot be none if ax is supplied if both dcnl picks and ax are none separate subplots will be created for dcnl each standard channel type mag grad and eeg dcnl ax instance of matplotlib axes | none dcnl axes to plot into if none axes will be created dcnl color str | tuple dcnl a matplotlibcompatible color to use has no effect when dcnl spatial colors true dcnl area mode str | none dcnl mode for plotting area if std the mean + 1 std across channels dcnl will be plotted if range the min and max across channels will be dcnl plotted bad channels will be excluded from these calculations dcnl if none no area will be plotted if average false no area is plotted dcnl area alpha float dcnl alpha for the area dcnl n overlap int dcnl the number of points of overlap between blocks the default value dcnl is 0 no overlap dcnl db bool dcnl if true transform data to decibels if false plot amplitudes dcnl average bool dcnl if false the psds of all channels is displayed no averaging dcnl is done and parameters area mode and area alpha are ignored when dcnl false it is possible to paint an area hold left mouse button and dcnl drag to plot a topomap dcnl show bool dcnl show figure if true dcnl n jobs int dcnl number of jobs to run in parallel dcnl line alpha float | none dcnl alpha for the psd line can be none default to use 1 0 when dcnl average true and 0 1 when average false dcnl spatial colors bool dcnl whether to use spatial colors only used when average false dcnl xscale str dcnl can be linear default or log dcnl reject by annotation bool dcnl whether to omit bad segments from the data while computing the dcnl psd if true annotated segments with a description that starts dcnl with bad are omitted has no effect if inst is an epochs or dcnl evoked object defaults to true dcnl versionadded 0 15 0 dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl fig instance of matplotlib figure dcnl figure with frequency spectra of the data channels
set up the mne browse raw window
plot raw traces
plot channelwise frequency spectra as topography dcnl parameters dcnl raw instance of io raw dcnl the raw instance to use dcnl tmin float dcnl start time for calculations defaults to zero dcnl tmax float | none dcnl end time for calculations if none default the end of data is used dcnl fmin float dcnl start frequency to consider defaults to zero dcnl fmax float dcnl end frequency to consider defaults to 100 dcnl proj bool dcnl apply projection defaults to false dcnl n fft int dcnl number of points to use in welch fft calculations defaults to 2048 dcnl n overlap int dcnl the number of points of overlap between blocks defaults to 0 dcnl no overlap dcnl layout instance of layout | none dcnl layout instance specifying sensor positions does not need to be dcnl specified for neuromag data if none default the correct layout is dcnl inferred from the data dcnl color str | tuple dcnl a matplotlibcompatible color to use for the curves defaults to white dcnl fig facecolor str | tuple dcnl a matplotlibcompatible color to use for the figure background dcnl defaults to black dcnl axis facecolor str | tuple dcnl a matplotlibcompatible color to use for the axis background dcnl defaults to black dcnl db bool dcnl if true transform data to decibels defaults to true dcnl show bool dcnl show figure if true defaults to true dcnl block bool dcnl whether to halt program execution until the figure is closed dcnl may not work on all systems platforms defaults to false dcnl n jobs int dcnl number of jobs to run in parallel defaults to 1 dcnl axes instance of matplotlib axes | none dcnl axes to plot into if none axes will be created dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl fig instance of matplotlib figure dcnl figure distributing one image per channel across sensor topography
set custom selection by lasso selector
organize browser selections
add a channel name on click
only draw once for picking
draw topomaps from the selected area
remove lines from evoked plot as topomap is closed
transform x y z values into rgb colors
plot color channel legends for butterfly plots with spatial colors
aux function for plot evoked and plot evoked image cf docstrings dcnl extra param is dcnl plot type str value butterfly | image dcnl the type of graph to plot butterfly plots each channel as a line dcnl x axis time y axis amplitude image plots a 2d image where dcnl color depicts the amplitude of each channel at a given time point dcnl x axis time y axis channel in image mode the plot is not dcnl interactive
plot data as butterfly plot
set up spatial colors
plot images
plot evoked data using butteryfly plots dcnl left click to a line shows the channel name selecting an area by clicking dcnl and holding left mouse button plots a topographic map of the painted area dcnl note if bad channels are not excluded they are shown in red dcnl parameters dcnl evoked instance of evoked dcnl the evoked data dcnl picks arraylike of int | none dcnl the indices of channels to plot if none show all dcnl exclude list of str | bads dcnl channels names to exclude from being shown if bads the dcnl bad channels are excluded dcnl unit bool dcnl scale plot with channel si unit dcnl show bool dcnl show figure if true dcnl ylim dict | none dcnl ylim for plots after scaling has been applied e g dcnl ylim dict eeg 20 20 dcnl valid keys are eeg mag grad misc if none the ylim parameter dcnl for each channel equals the pyplot default dcnl xlim tight | tuple | none dcnl xlim for plots dcnl proj bool | interactive dcnl if true ssp projections are applied before display if interactive dcnl a check box for reversible selection of ssp projection vectors will dcnl be shown dcnl hline list of floats | none dcnl the values at which to show an horizontal line dcnl units dict | none dcnl the units of the channel types used for axes lables if none dcnl defaults to dict eeg uv grad ft cm mag ft dcnl scalings dict | none dcnl the scalings of the channel types to be applied for plotting if none dcnl defaults to dict eeg 1e6 grad 1e13 mag 1e15 dcnl titles dict | none dcnl the titles associated with the channels if none defaults to dcnl dict eeg eeg grad gradiometers mag magnetometers dcnl axes instance of axis | list | none dcnl the axes to plot to if list the list must be a list of axes of dcnl the same length as the number of channel types if instance of dcnl axes there must be only one channel type plotted dcnl gfp bool | only dcnl plot gfp in green if true or only if only then the individual dcnl channel traces will not be shown dcnl window title str | none dcnl the title to put at the top of the figure dcnl spatial colors bool dcnl if true the lines are color coded by mapping physical sensor dcnl coordinates into color values spatially similar channels will have dcnl similar colors bad channels will be dotted if false the good dcnl channels are plotted black and bad channels red defaults to false dcnl zorder str | callable dcnl which channels to put in the front or back only matters if dcnl spatial colors is used dcnl if str must be std or unsorted defaults to unsorted if dcnl std data with the lowest standard deviation weakest effects will dcnl be put in front so that they are not obscured by those with stronger dcnl effects if unsorted channels are zsorted as in the evoked dcnl instance dcnl if callable must take one argument a numpy array of the same dcnl dimensionality as the evoked raw data and return a list of dcnl unique integers corresponding to the number of channels dcnl versionadded 0 13 0 dcnl selectable bool dcnl whether to use interactive features if true default it is possible dcnl to paint an area to draw topomaps when false the interactive features dcnl are disabled disabling interactive features reduces memory consumption dcnl and is useful when using axes parameter to draw multiaxes figures dcnl versionadded 0 13 0 dcnl returns dcnl fig instance of matplotlib figure figure dcnl figure containing the butterfly plots
plot 2d topography of evoked responses dcnl clicking on the plot of an individual sensor opens a new figure showing dcnl the evoked response for the selected sensor dcnl parameters dcnl evoked list of evoked | evoked dcnl the evoked response to plot dcnl layout instance of layout | none dcnl layout instance specifying sensor positions does not need to dcnl be specified for neuromag data if possible the correct layout is dcnl inferred from the data dcnl layout scale float dcnl scaling factor for adjusting the relative size of the layout dcnl on the canvas dcnl color list of color objects | color object | none dcnl everything matplotlib accepts to specify colors if not listlike dcnl the color specified will be repeated if none colors are dcnl automatically drawn dcnl border str dcnl matplotlib borders style to be used for each sensor plot dcnl ylim dict | none dcnl ylim for plots after scaling has been applied the value dcnl determines the upper and lower subplot limits e g dcnl ylim dict eeg 20 20 valid keys are eeg mag grad misc dcnl if none the ylim parameter for each channel is determined by dcnl the maximum absolute peak dcnl scalings dict | none dcnl the scalings of the channel types to be applied for plotting if none dcnl defaults to dict eeg 1e6 grad 1e13 mag 1e15 dcnl title str dcnl title of the figure dcnl proj bool | interactive dcnl if true ssp projections are applied before display if interactive dcnl a check box for reversible selection of ssp projection vectors will dcnl be shown dcnl vline list of floats | none dcnl the values at which to show a vertical line dcnl fig facecolor str | obj dcnl the figure face color defaults to black dcnl note the parameter will be removed in version v0 16 dcnl use background color parameter instead dcnl fig background none | numpy ndarray dcnl a background image for the figure this must work with a call to dcnl plt imshow defaults to none dcnl axis facecolor str | obj dcnl the face color to be used for each sensor plot defaults to black dcnl note the parameter will be removed in version v0 16 dcnl use background color parameter instead dcnl font color str | obj dcnl the color of text in the colorbar and title defaults to white dcnl note the parameter will be removed in version v0 16 dcnl use background color parameter instead dcnl merge grads bool dcnl whether to use rms value of gradiometer pairs only works for neuromag dcnl data defaults to false dcnl legend bool | int | string | tuple dcnl if true create a legend based on evoked comment if false disable the dcnl legend otherwise the legend is created and the parameter value is dcnl passed as the location parameter to the matplotlib legend call it can dcnl be an integer e g 0 corresponds to upper right corner of the plot dcnl a string e g upper right or a tuple x y coordinates of the dcnl lower left corner of the legend in the axes coordinate system dcnl see matplotlib documentation for more details dcnl axes instance of matplotlib axes | none dcnl axes to plot into if none axes will be created dcnl background color str | obj dcnl background color typically k black or w white dcnl it will be set to w by default in v0 16 dcnl versionadded 0 15 0 dcnl show bool dcnl show figure if true dcnl returns dcnl fig instance of matplotlib figure figure dcnl images of evoked responses at sensor locations
make animation of evoked data as topomap timeseries dcnl the animation can be paused resumed with left mouse button dcnl left and right arrow keys can be used to move backward or forward in dcnl time dcnl parameters dcnl evoked instance of evoked dcnl the evoked data dcnl ch type str | none dcnl channel type to plot accepted data types mag grad eeg dcnl if none first available channel type from mag grad eeg is dcnl used defaults to none dcnl times array of floats | none dcnl the time points to plot if none 10 evenly spaced samples are dcnl calculated over the evoked time series defaults to none dcnl frame rate int | none dcnl frame rate for the animation in hz if none frame rate sfreq 10 dcnl defaults to none dcnl butterfly bool dcnl whether to plot the data as butterfly plot under the topomap dcnl defaults to false dcnl blit bool dcnl whether to use blit to optimize drawing in general it is recommended dcnl to use blit in combination with show true if you intend to save dcnl the animation it is better to disable blit defaults to true dcnl show bool dcnl whether to show the animation defaults to true dcnl returns dcnl fig instance of matplotlib figure dcnl the figure dcnl anim instance of matplotlib funcanimation dcnl animation of the topomap dcnl notes dcnl versionadded 0 12 0
plot evoked data as images dcnl parameters dcnl evoked instance of evoked dcnl the evoked data dcnl picks arraylike of int | none dcnl the indices of channels to plot if none show all dcnl exclude list of str | bads dcnl channels names to exclude from being shown if bads the dcnl bad channels are excluded dcnl unit bool dcnl scale plot with channel si unit dcnl show bool dcnl show figure if true dcnl clim dict | none dcnl clim for plots after scaling has been applied e g dcnl clim dict eeg 20 20 dcnl valid keys are eeg mag grad misc if none the clim parameter dcnl for each channel equals the pyplot default dcnl xlim tight | tuple | none dcnl xlim for plots dcnl proj bool | interactive dcnl if true ssp projections are applied before display if interactive dcnl a check box for reversible selection of ssp projection vectors will dcnl be shown dcnl units dict | none dcnl the units of the channel types used for axes lables if none dcnl defaults to dict eeg uv grad ft cm mag ft dcnl scalings dict | none dcnl the scalings of the channel types to be applied for plotting if none dcnl defaults to dict eeg 1e6 grad 1e13 mag 1e15 dcnl titles dict | none dcnl the titles associated with the channels if none defaults to dcnl dict eeg eeg grad gradiometers mag magnetometers dcnl axes instance of axis | list | none dcnl the axes to plot to if list the list must be a list of axes of dcnl the same length as the number of channel types if instance of dcnl axes there must be only one channel type plotted dcnl cmap matplotlib colormap | colormap bool | interactive dcnl colormap if tuple the first value indicates the colormap to use and dcnl the second value is a boolean defining interactivity in interactive dcnl mode the colors are adjustable by clicking and dragging the colorbar dcnl with left and right mouse button left mouse button moves the scale up dcnl and down and right mouse button adjusts the range hitting space bar dcnl resets the scale up and down arrows can be used to change the dcnl colormap if interactive translates to rdbu r true dcnl defaults to rdbu r dcnl returns dcnl fig instance of matplotlib figure figure dcnl figure containing the images
update the plot evoked lines
plot whitened evoked response dcnl plots the whitened evoked response and the whitened gfp as described in dcnl 1 if one single covariance object is passed the gfp panel bottom dcnl will depict different sensor types if multiple covariance objects are dcnl passed as a list the left column will display the whitened evoked dcnl responses for each channel based on the whitener from the noise covariance dcnl that has the highest loglikelihood the left column will depict the dcnl whitened gfps based on each estimator separately for each sensor type dcnl instead of numbers of channels the gfp display shows the estimated rank dcnl note the rank estimation will be printed by the logger for each noise dcnl covariance estimator that is passed dcnl parameters dcnl evoked instance of mne evoked dcnl the evoked response dcnl noise cov list | instance of covariance | str dcnl the noise covariance as computed by mne cov compute covariance dcnl show bool dcnl show figure if true dcnl returns dcnl fig instance of matplotlib figure figure dcnl the figure object containing the plot dcnl references dcnl 1 engemann d and gramfort a 2015 automated model selection in dcnl covariance estimation and spatial whitening of meg and eeg dcnl signals vol 108 328342 neuroimage
help plot evoked white dcnl additional parameters dcnl scalings dict | none dcnl the rescaling method to be applied to improve the accuracy of rank dcnl estimaiton if dict it will override the following default values dcnl used if none dcnl dict mag 1e12 grad 1e11 eeg 1e5 dcnl note theses values were tested on different datests across various dcnl conditions you should not need to update them dcnl rank dict of int | none dcnl dict of ints where keys are eeg mag or grad if none dcnl the rank is detected automatically defaults to none note dcnl the rank estimation will be printed by the logger for each noise dcnl covariance estimator that is passed
plot a data snr estimate dcnl parameters dcnl evoked instance of evoked dcnl the evoked instance this should probably be baselinecorrected dcnl inv instance of inverseoperator dcnl the minimumnorm inverse operator dcnl show bool dcnl show figure if true dcnl returns dcnl fig instance of matplotlib figure figure dcnl the figure object containing the plot dcnl notes dcnl versionadded 0 9 0
connect time series and topolots
plot evoked data as butterfly plot and add topomaps for time points dcnl parameters dcnl evoked instance of evoked dcnl the evoked instance dcnl times float | array of floats | auto | peaks dcnl the time point s to plot if auto 5 evenly spaced topographies dcnl between the first and last time instant will be shown if peaks dcnl finds time points automatically by checking for 3 local maxima in dcnl global field power defaults to peaks dcnl title str | none dcnl the title if none suppress printing channel type if an empty dcnl string a default title is created defaults to dcnl picks arraylike of int | none dcnl the indices of channels to plot if none show all defaults to none dcnl exclude none | list of str | bads dcnl channels names to exclude from being shown if bads the dcnl bad channels are excluded defaults to none dcnl show bool dcnl show figure if true defaults to true dcnl ts args none | dict dcnl a dict of kwargs that are forwarded to evoked plot to dcnl style the butterfly plot if they are not in this dict the following dcnl defaults are passed spatial colors true zorder std dcnl axes show exclude are illegal dcnl if none no customizable arguments will be passed dcnl defaults to none dcnl topomap args none | dict dcnl a dict of kwargs that are forwarded to evoked plot topomap to dcnl style the topomaps if it is not in this dict outlines skirt dcnl will be passed axes show times colorbar are illegal dcnl if none no customizable arguments will be passed dcnl defaults to none dcnl returns dcnl fig instance of matplotlib figure figure | list dcnl the figure object containing the plot if evoked has multiple dcnl channel types a list of figures one for each channel type is dcnl returned dcnl notes dcnl versionadded 0 12 0
calculate the ci parametric confidence interval for arr dcnl aux function for plot compare evokeds
set linestyles and colors for plot compare evokeds
truncate the y axis in plot compare evokeds
plot evoked time courses for one or multiple channels and conditions dcnl this function is useful for comparing erp fs at a specific location it dcnl plots evoked data or if supplied with a list dict of lists of evoked dcnl instances grand averages plus confidence intervals dcnl parameters dcnl evokeds instance of mne evoked | list | dict dcnl if a single evoked instance it is plotted as a time series dcnl if a dict whose values are evoked objects the contents are plotted as dcnl single time series each and the keys are used as condition labels dcnl if a list of evokeds the contents are plotted with indices as labels dcnl if a dict list of lists the unweighted mean is plotted as a time dcnl series and the parametric confidence interval is plotted as a shaded dcnl area all instances must have the same shape channel numbers time dcnl points etc dcnl if dict keys must be of type str dcnl picks int | list of int dcnl if int or list of int the indices of the sensors to average and plot dcnl must all be of the same channel type dcnl if the selected channels are gradiometers the corresponding pairs dcnl will be selected dcnl if multiple channel types are selected one figure will be returned for dcnl each channel type dcnl if an empty list gfp will be set to true and the global field dcnl power plotted dcnl gfp bool dcnl if true the channel type wise gfp is plotted dcnl if picks is an empty list default this is set to true dcnl colors list | dict | none dcnl if a list will be sequentially used for line colors dcnl if a dict can map evoked keys or separated hed tags to dcnl conditions dcnl for example if evokeds is a dict with the keys aud l aud r dcnl vis l vis r colors can be dict aud r vis b to map both dcnl aud l and aud r to the color red and both visual conditions to blue dcnl if none default a sequence of desaturated colors is used dcnl linestyles list | dict dcnl if a list will be sequentially and repeatedly used for evoked plot dcnl linestyles dcnl if a dict can map the evoked keys or separated hed tags to dcnl conditions dcnl for example if evokeds is a dict with the keys aud l aud r dcnl vis l vis r linestyles can be dict l r to map both dcnl aud l and vis l to dashed lines and both rightside conditions to dcnl straight lines dcnl styles dict | none dcnl if a dict keys must map to evoked keys or conditions and values must dcnl be a dict of legal inputs to matplotlib pyplot plot these dcnl parameters will be passed to the line plot call of the corresponding dcnl condition overriding defaults dcnl e g if evokeds is a dict with the keys aud l aud r dcnl vis l vis r styles can be aud l linewidth 1 to set dcnl the linewidth for aud l to 1 note that hed separated tags are dcnl not supported dcnl vlines list of int dcnl a list of integers corresponding to the positions in seconds dcnl at which to plot dashed vertical lines dcnl ci float | none dcnl if not none and evokeds is a list dict of lists a confidence dcnl interval is drawn around the individual time series this value dcnl determines the ci width e g if this value is 95 the default dcnl the 95 parametric confidence interval is drawn dcnl if none no shaded confidence band is plotted dcnl truncate yaxis bool dcnl if true the left y axis is truncated to half the max value and dcnl rounded to 25 to reduce visual clutter defaults to true dcnl ylim dict | none dcnl ylim for plots after scaling has been applied e g dcnl ylim dict eeg 20 20 dcnl valid keys are eeg mag grad misc if none the ylim parameter dcnl for each channel equals the pyplot default dcnl invert y bool dcnl if true negative values are plotted up as is sometimes done dcnl for erps out of tradition defaults to false dcnl axes none | matplotlib pyplot axes instance | list of axes dcnl what axes to plot to if none a new axes is created dcnl when plotting multiple channel types can also be a list of axes one dcnl per channel type dcnl title none | str dcnl if str will be plotted as figure title if none the channel dcnl names will be shown dcnl show bool dcnl if true show the figure dcnl returns dcnl fig figure | list of figures dcnl the figure s in which the plot is drawn
plot estimated latent sources given the unmixing matrix dcnl typical usecases dcnl 1 plot evolution of latent sources over time based on raw input dcnl 2 plot latent source around event related time windows epochs input dcnl 3 plot timelocking in ica space evoked input dcnl parameters dcnl ica instance of mne preprocessing ica dcnl the ica solution dcnl inst instance of mne io raw mne epochs mne evoked dcnl the object to plot the sources from dcnl picks int | array like of int | none dcnl the components to be displayed if none plot will show the dcnl sources in the order as fitted dcnl exclude array like of int dcnl the components marked for exclusion if none default ica exclude dcnl will be used dcnl start int dcnl xaxis start index if none from the beginning dcnl stop int dcnl xaxis stop index if none next 20 are shown in case of evoked to the dcnl end dcnl title str | none dcnl the figure title if none a default is provided dcnl show bool dcnl show figure if true dcnl block bool dcnl whether to halt program execution until the figure is closed dcnl useful for interactive selection of components in raw and epoch dcnl plotter for evoked this parameter has no effect defaults to false dcnl show first samp bool dcnl if true show time axis relative to the raw first samp dcnl returns dcnl fig instance of pyplot figure dcnl the figure dcnl notes dcnl for raw and epoch instances it is possible to select components for dcnl exclusion by clicking on the line the selected components are added to dcnl ica exclude on close dcnl versionadded 0 10 0
create main figure and axes layout used by plot ica properties
display component properties dcnl properties include the topography epochs image erp erf power dcnl spectrum and epoch variance dcnl parameters dcnl ica instance of mne preprocessing ica dcnl the ica solution dcnl inst instance of epochs or raw dcnl the data to use in plotting properties dcnl picks int | arraylike of int | none dcnl the components to be displayed if none plot will show the first dcnl five sources if more than one components were chosen in the picks dcnl each one will be plotted in a separate figure defaults to none dcnl axes list of matplotlib axes | none dcnl list of five matplotlib axes to use in plotting topomap axis dcnl image axis erp axis spectrum axis variance axis if none a new dcnl figure with relevant axes is created defaults to none dcnl db bool dcnl whether to plot spectrum in db defaults to true dcnl plot std bool | float dcnl whether to plot standard deviation in erp erf and spectrum plots dcnl defaults to true which plots one standard deviation above below dcnl if set to float allows to control how many standard deviations are dcnl plotted for example 2 5 will plot 2 5 standard deviation above below dcnl topomap args dict | none dcnl dictionary of arguments to plot topomap if none doesn t pass any dcnl additional arguments defaults to none dcnl image args dict | none dcnl dictionary of arguments to plot epochs image if none doesn t pass dcnl any additional arguments defaults to none dcnl psd args dict | none dcnl dictionary of arguments to psd multitaper if none doesn t pass dcnl any additional arguments defaults to none dcnl figsize arraylike of size 2 | none dcnl allows to control size of the figure if none the figure size dcnl defauls to 7 6 dcnl show bool dcnl show figure if true dcnl returns dcnl fig list dcnl list of matplotlib figures dcnl notes dcnl versionadded 0 13
plot average over epochs in ica space dcnl parameters dcnl evoked instance of mne evoked dcnl the evoked to be used dcnl picks int | array like of int | none dcnl the components to be displayed if none plot will show the dcnl sources in the order as fitted dcnl exclude array like of int dcnl the components marked for exclusion if none default ica exclude dcnl will be used dcnl title str dcnl the figure title dcnl show bool dcnl show figure if true dcnl labels none | dict dcnl the ica labels attribute
plot scores related to detected components dcnl use this function to asses how well your score describes outlier dcnl sources and how well you were detecting them dcnl parameters dcnl ica instance of mne preprocessing ica dcnl the ica object dcnl scores array like of float shape n ica components | list of arrays dcnl scores based on arbitrary metric to characterize ica components dcnl exclude array like of int dcnl the components marked for exclusion if none default ica exclude dcnl will be used dcnl labels str | list | ecg | eog | none dcnl the labels to consider for the axes tests defaults to none dcnl if list should match the outer shape of scores dcnl if ecg or eog the labels attributes will be looked up dcnl note that is used internally for sublabels specifying ecg and dcnl eog channels dcnl axhline float dcnl draw horizontal line to e g visualize rejection threshold dcnl title str dcnl the figure title dcnl figsize tuple of int | none dcnl the figure size if none it gets set automatically dcnl show bool dcnl show figure if true dcnl returns dcnl fig instance of matplotlib pyplot figure dcnl the figure object
overlay of raw and cleaned signals given the unmixing matrix dcnl this method helps visualizing signal quality and artifact rejection dcnl parameters dcnl ica instance of mne preprocessing ica dcnl the ica object dcnl inst instance of mne io raw or mne evoked dcnl the signals to be compared given the ica solution if raw input dcnl the raw data are displayed before and after cleaning in a second dcnl panel the cross channel average will be displayed since dipolar dcnl sources will be canceled out this display is sensitive to dcnl artifacts if evoked input butterfly plots for clean and raw dcnl signals will be superimposed dcnl exclude array like of int dcnl the components marked for exclusion if none default ica exclude dcnl will be used dcnl picks arraylike of int | none default dcnl indices of channels to include if none all channels dcnl are used that were included on fitting dcnl start int dcnl xaxis start index if none from the beginning dcnl stop int dcnl xaxis stop index if none to the end dcnl title str dcnl the figure title dcnl show bool dcnl show figure if true dcnl returns dcnl fig instance of pyplot figure dcnl the figure
plot evoked after and before ica cleaning dcnl parameters dcnl ica instance of mne preprocessing ica dcnl the ica object dcnl epochs instance of mne epochs dcnl the epochs to be regarded dcnl show bool dcnl show figure if true dcnl returns dcnl fig instance of pyplot figure
plot evoked after and before ica cleaning dcnl parameters dcnl ica instance of mne preprocessing ica dcnl the ica object dcnl epochs instance of mne epochs dcnl the epochs to be regarded dcnl show bool dcnl if true all open plots will be shown dcnl returns dcnl fig instance of pyplot figure
plot the ica components as raw array
prepare the data on horizontal shift of the viewport
select components on click
exclude the selected components on close
plot the components as epochs
prepare the data on horizontal shift
exclude the selected components on close
plot independent components on click to label
plot covariance data dcnl parameters dcnl cov instance of covariance dcnl the covariance matrix dcnl info dict dcnl measurement info dcnl exclude list of string | str dcnl list of channels to exclude if empty do not exclude any channel dcnl if bads exclude info bads dcnl colorbar bool dcnl show colorbar or not dcnl proj bool dcnl apply projections or not dcnl show svd bool dcnl plot also singular values of the noise covariance for each sensor dcnl type we show square roots ie standard deviations dcnl show bool dcnl show figure if true dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl fig cov instance of matplotlib pyplot figure dcnl the covariance plot dcnl fig svd instance of matplotlib pyplot figure | none dcnl the svd spectra plot of the covariance
plot source power in timefreqency grid dcnl parameters dcnl stcs list of sourceestimate dcnl source power for consecutive time windows one sourceestimate object dcnl should be provided for each frequency bin dcnl freq bins list of tuples of float dcnl start and end points of frequency bins of interest dcnl tmin float dcnl minimum time instant to show dcnl tmax float dcnl maximum time instant to show dcnl source index int | none dcnl index of source for which the spectrogram will be plotted if none dcnl the source with the largest activation will be selected dcnl colorbar bool dcnl if true a colorbar will be added to the plot dcnl show bool dcnl show figure if true
plot bem contours on anatomical slices dcnl parameters dcnl mri fname str dcnl the name of the file containing anatomical data dcnl surfaces list of str str tuples dcnl a list containing the bem surfaces to plot as filename color tuples dcnl colors should be matplotlibcompatible dcnl src none | sourcespaces dcnl sourcespaces object for plotting individual sources dcnl orientation str dcnl coronal or axial or sagittal dcnl slices list of int dcnl slice indices dcnl show bool dcnl show figure if true dcnl returns dcnl fig instance of matplotlib figure figure dcnl the figure
plot bem contours on anatomical slices dcnl parameters dcnl subject str dcnl subject name dcnl subjects dir str | none dcnl path to the subjects dir if none the path is obtained by using dcnl the environment variable subjects dir dcnl orientation str dcnl coronal or axial or sagittal dcnl slices list of int dcnl slice indices dcnl brain surfaces none | str | list of str dcnl one or more brain surface to plot optional entries should correspond dcnl to files in the subject s surf directory e g white dcnl src none | sourcespaces | str dcnl sourcespaces instance or path to a source space to plot individual dcnl sources as scatterplot only sources lying in the shown slices will be dcnl visible sources that lie between visible slices are not shown path dcnl can be absolute or relative to the subject s bem folder dcnl show bool dcnl show figure if true dcnl returns dcnl fig instance of matplotlib figure figure dcnl the figure dcnl see also dcnl mne viz plot alignment
plot events to get a visual display of the paradigm dcnl parameters dcnl events array shape n events 3 dcnl the events dcnl sfreq float | none dcnl the sample frequency if none data will be displayed in samples not dcnl seconds dcnl first samp int dcnl the index of the first sample typically the raw first samp dcnl attribute it is needed for recordings on a neuromag dcnl system as the events are defined relative to the system dcnl start and not to the beginning of the recording dcnl color dict | none dcnl dictionary of event id value and its associated color if none dcnl colors are automatically drawn from a default list cycled through if dcnl number of events longer than list of default colors dcnl event id dict | none dcnl dictionary of event label e g aud l and its associated dcnl event id value label used to plot a legend if none no legend is dcnl drawn dcnl axes instance of matplotlib axes axessubplot dcnl the subplot handle dcnl equal spacing bool dcnl use equal spacing between events in yaxis dcnl show bool dcnl show figure if true dcnl returns dcnl fig matplotlib figure figure dcnl the figure object containing the plot dcnl notes dcnl versionadded 0 9 0
get our press callback
plot the amplitude traces of a set of dipoles dcnl parameters dcnl dipoles list of instance of dipoles dcnl the dipoles whose amplitudes should be shown dcnl colors list of colors | none dcnl color to plot with each dipole if none default colors are used dcnl show bool dcnl show figure if true dcnl returns dcnl fig matplotlib figure figure dcnl the figure object containing the plot dcnl notes dcnl versionadded 0 9 0
adjust some properties of axes dcnl parameters dcnl axes list dcnl list of axes to process dcnl remove spines list of str dcnl which axis spines to remove dcnl grid bool dcnl turn grid on true or off false
create approximately spaced ticks between lims
get reasonable frequency limits
check for valid fscale
plot properties of a filter dcnl parameters dcnl h dict or ndarray dcnl an iir dict or 1d ndarray of coefficients for fir filter dcnl sfreq float dcnl sample rate of the data hz dcnl freq arraylike or none dcnl the ideal response frequencies to plot must be in ascending order dcnl if none default do not plot the ideal response dcnl gain arraylike or none dcnl the ideal response gains to plot dcnl if none default do not plot the ideal response dcnl title str | none dcnl the title to use if none default deteremine the title based dcnl on the type of the system dcnl color color object dcnl the color to use default 1f77b4 dcnl flim tuple or none dcnl if not none the xaxis frequency limits hz to use dcnl if none freq will be used if none default and freq is none dcnl 0 1 sfreq 2 will be used dcnl fscale str dcnl frequency scaling to use can be log default or linear dcnl alim tuple dcnl the yaxis amplitude limits db to use default 60 10 dcnl show bool dcnl show figure if true default dcnl returns dcnl fig matplotlib figure figure dcnl the figure containing the plots dcnl see also dcnl mne filter create filter dcnl plot ideal filter dcnl notes dcnl versionadded 0 14
plot an ideal filter response dcnl parameters dcnl freq arraylike dcnl the ideal response frequencies to plot must be in ascending order dcnl gain arraylike or none dcnl the ideal response gains to plot dcnl axes instance of matplotlib axes axessubplot | none dcnl the subplot handle with none default axes are created dcnl title str dcnl the title to use default dcnl flim tuple or none dcnl if not none the xaxis frequency limits hz to use dcnl if none default freq used dcnl fscale str dcnl frequency scaling to use can be log default or linear dcnl alim tuple dcnl if not none default the yaxis limits db to use dcnl color color object dcnl the color to use default r dcnl alpha float dcnl the alpha to use default 0 5 dcnl linestyle str dcnl the line style to use default dcnl show bool dcnl show figure if true default dcnl returns dcnl fig instance of matplotlib figure figure dcnl the figure dcnl see also dcnl plot filter dcnl notes dcnl versionadded 0 14 dcnl examples dcnl plot a simple ideal bandpass filter dcnl from mne viz import plot ideal filter dcnl freq 0 1 40 50 dcnl gain 0 1 1 0 dcnl plot ideal filter freq gain flim 0 1 100 doctest +ellipsis dcnl <matplotlib figure figure object at
handle event colors
create iterator over channel positions dcnl this function returns a generator that unpacks into dcnl a series of matplotlib axis objects and data channel dcnl indices both corresponding to the sensor positions dcnl of the related layout passed or inferred from the channel info dcnl iter topography hence allows to conveniently realize custom dcnl topography plots dcnl parameters dcnl info instance of info dcnl the measurement info dcnl layout instance of mne layout layout | none dcnl the layout to use if none layout will be guessed dcnl on pick callable | none dcnl the callback function to be invoked on clicking one dcnl of the axes is supposed to instantiate the following dcnl api function axis channel index dcnl fig matplotlib figure figure | none dcnl the figure object to be considered if none a new dcnl figure will be created dcnl fig facecolor str | obj dcnl the figure face color defaults to black dcnl axis facecolor str | obj dcnl the axis face color defaults to black dcnl axis spinecolor str | obj dcnl the axis spine color defaults to black in other words dcnl the color of the axis edge lines dcnl layout scale float | none dcnl scaling factor for adjusting the relative size of the layout dcnl on the canvas if none nothing will be scaled dcnl returns dcnl a generator that can be unpacked into dcnl ax matplotlib axis axis dcnl the current axis of the topo plot dcnl ch dx int dcnl the related channel index
iterate over topography dcnl has the same parameters as iter topography plus dcnl unified bool dcnl if false default multiple matplotlib axes will be used dcnl if true a single axis will be constructed the former is dcnl useful for custom plotting the latter for speed
plot on sensor layout
onpick callback that shows a single channel in a new figure
compute scale factors for a unified plot
check the vlim
show timefrequency map as twodimensional image
show multiple tfrs on topo using a single axes
show time series on topo split across multiple axes
show multiple time series on topo using a single axes
plot erfimage on sensor topography
plot erfimage topography using a single axis
plot 2d topography of evoked responses dcnl clicking on the plot of an individual sensor opens a new figure showing dcnl the evoked response for the selected sensor dcnl parameters dcnl evoked list of evoked | evoked dcnl the evoked response to plot dcnl layout instance of layout | none dcnl layout instance specifying sensor positions does not need to dcnl be specified for neuromag data if possible the correct layout is dcnl inferred from the data dcnl layout scale float dcnl scaling factor for adjusting the relative size of the layout dcnl on the canvas dcnl color list of color objects | color object | none dcnl everything matplotlib accepts to specify colors if not listlike dcnl the color specified will be repeated if none colors are dcnl automatically drawn dcnl border str dcnl matplotlib borders style to be used for each sensor plot dcnl ylim dict | none dcnl ylim for plots after scaling has been applied the value dcnl determines the upper and lower subplot limits e g dcnl ylim dict eeg 20 20 valid keys are eeg mag grad if none dcnl the ylim parameter for each channel is determined by the maximum dcnl absolute peak dcnl scalings dict | none dcnl the scalings of the channel types to be applied for plotting if none dcnl defaults to dict eeg 1e6 grad 1e13 mag 1e15 dcnl title str dcnl title of the figure dcnl proj bool | interactive dcnl if true ssp projections are applied before display if interactive dcnl a check box for reversible selection of ssp projection vectors will dcnl be shown dcnl vline list of floats | none dcnl the values at which to show a vertical line dcnl hline list of floats | none dcnl the values at which to show a horizontal line dcnl fig facecolor str | obj dcnl the figure face color defaults to black dcnl fig background none | array dcnl a background image for the figure this must be a valid input to dcnl matplotlib pyplot imshow defaults to none dcnl axis facecolor str | obj dcnl the face color to be used for each sensor plot defaults to black dcnl font color str | obj dcnl the color of text in the colorbar and title defaults to white dcnl merge grads bool dcnl whether to use rms value of gradiometer pairs only works for neuromag dcnl data defaults to false dcnl legend bool | int | string | tuple dcnl if true create a legend based on evoked comment if false disable the dcnl legend otherwise the legend is created and the parameter value is dcnl passed as the location parameter to the matplotlib legend call it can dcnl be an integer e g 0 corresponds to upper right corner of the plot dcnl a string e g upper right or a tuple x y coordinates of the dcnl lower left corner of the legend in the axes coordinate system dcnl see matplotlib documentation for more details dcnl axes instance of matplotlib axes | none dcnl axes to plot into if none axes will be created dcnl show bool dcnl show figure if true dcnl returns dcnl fig instance of matplotlib figure figure dcnl images of evoked responses at sensor locations
update topo sensor plots
plot event related potential fields image on topographies dcnl parameters dcnl epochs instance of epochs dcnl the epochs dcnl layout instance of layout dcnl system specific sensor positions dcnl sigma float dcnl the standard deviation of the gaussian smoothing to apply along dcnl the epoch axis to apply in the image if 0 no smoothing is applied dcnl vmin float dcnl the min value in the image the unit is uv for eeg channels dcnl ft for magnetometers and ft cm for gradiometers dcnl vmax float dcnl the max value in the image the unit is uv for eeg channels dcnl ft for magnetometers and ft cm for gradiometers dcnl colorbar bool dcnl display or not a colorbar dcnl order none | array of int | callable dcnl if not none order is used to reorder the epochs on the yaxis dcnl of the image if it s an array of int it should be of length dcnl the number of good epochs if it s a callable the arguments dcnl passed are the times vector and the data as 2d array dcnl data shape1 len times dcnl cmap instance of matplotlib pyplot colormap dcnl colors to be mapped to the values dcnl layout scale float dcnl scaling factor for adjusting the relative size of the layout dcnl on the canvas dcnl title str dcnl title of the figure dcnl scalings dict | none dcnl the scalings of the channel types to be applied for plotting if dcnl none defaults to dict eeg 1e6 grad 1e13 mag 1e15 dcnl border str dcnl matplotlib borders style to be used for each sensor plot dcnl fig facecolor str | obj dcnl the figure face color defaults to black dcnl fig background none | array dcnl a background image for the figure this must be a valid input to dcnl matplotlib pyplot imshow defaults to none dcnl font color str | obj dcnl the color of tick labels in the colorbar defaults to white dcnl show bool dcnl show figure if true dcnl returns dcnl fig instance of matplotlib figure dcnl figure distributing one image per channel across sensor topography
return integer part of given number
julian calendar date to julian date dcnl the input and output are for the proleptic julian calendar dcnl i e no consideration of historical usage of the calendar is dcnl made dcnl parameters dcnl year int dcnl year as an integer dcnl month int dcnl month as an integer dcnl day int dcnl day as an integer dcnl returns dcnl jd int dcnl julian date
julian calendar date for the given julian date dcnl the input and output are for the proleptic julian calendar dcnl i e no consideration of historical usage of the calendar is dcnl made dcnl parameters dcnl jd int dcnl the julian date dcnl returns dcnl y m d int int int dcnl three element tuple containing year month day
helper to check if h5py is installed
helper to create a titled group in h5py
helper to create a titled dataset in h5py
write python object to hdf5 format using h5py dcnl parameters dcnl fname str dcnl filename to use dcnl data object dcnl object to write can be of any of these types dcnl ndarray dict list tuple int float str dcnl note that dict objects must only have str keys it is recommended dcnl to use ndarrays where possible as it is handled most efficiently dcnl overwrite true | false | update dcnl if true overwrite file if it exists if update appends the title dcnl to the file or replace value if title exists dcnl compression int dcnl compression level to use 09 to compress data using gzip dcnl title str dcnl the toplevel directory name to use typically it is useful to make dcnl this your package name e g mnepython dcnl slash error | replace dcnl whether to replace forwardslashes in any key found nested within dcnl keys in data this does not apply to the top level name title dcnl if error is not allowed in any lowerlevel keys
read python object from hdf5 format using h5py dcnl parameters dcnl fname str dcnl file to load dcnl title str dcnl the toplevel directory name to use typically it is useful to make dcnl this your package name e g mnepython dcnl slash ignore | replace dcnl whether to replace the string fwdslash with the value this does dcnl not apply to the top level name title if ignore nothing will be dcnl replaced dcnl returns dcnl data object dcnl the loaded data can be of any type supported by write hdf5
sort and return keys of dict
compute all differences between two python variables dcnl parameters dcnl a object dcnl currently supported dict list tuple ndarray int str bytes dcnl float dcnl b object dcnl must be same type as x1 dcnl pre str dcnl string to prepend to each line dcnl returns dcnl diffs str dcnl a string representation of the differences
add documentation to a function
import module returning the module after the last dot
add an item to six moves
remove item from six moves
return an iterator over the keys of a dictionary
return an iterator over the values of a dictionary
return an iterator over the key value pairs of a dictionary
return an iterator over the key values pairs of a dictionary
create a base class with a metaclass
class decorator for creating a class with a metaclass
decorator caller converts a caller function into a decorator dcnl decorator caller func decorates a function using a caller
context manager decorator
given a string and index return line column
returns fieldtrip data type and string representation of the given dcnl object if possible
get a signature object for the passed callable
test generation of source estimate
test generation of sparse source estimate
test generation of source estimate single hemi
test generation of sparse source estimate
helper to make a stc
helper to get some starting data
test simulation of raw data with sphere model
test simulation of raw data with bem
test simulation of raw data with chpi
test simulation of evoked data
test simulation metrics
check that stcs are compatible
calculate matrix similarities dcnl parameters dcnl stc1 sourceestimate dcnl first source estimate for comparison dcnl stc2 sourceestimate dcnl second source estimate for comparison dcnl metric str dcnl metric to calculate rms or cosine dcnl returns dcnl score float | array dcnl calculated metric dcnl notes dcnl metric calculation has multiple options dcnl rms root mean square of difference between stc data matrices dcnl cosine normalized correlation of all elements in stc data matrices dcnl versionadded 0 10 0
log channel information
generate noisy evoked data dcnl note no projections from info will be present in the dcnl output evoked you can use e g dcnl func evoked add proj <mne evoked add proj or dcnl func evoked set eeg reference <mne evoked set eeg reference dcnl to add them afterward as necessary dcnl parameters dcnl fwd forward dcnl a forward solution dcnl stc sourceestimate object dcnl the source time courses dcnl info dict dcnl measurement info to generate the evoked dcnl cov covariance object dcnl the noise covariance dcnl nave int dcnl number of averaged epochs defaults to 30 dcnl versionadded 0 15 0 dcnl tmin float | none dcnl start of time interval to estimate snr if none first time point dcnl is used tmin is deprecated and will be removed in 0 16 dcnl tmax float | none dcnl start of time interval to estimate snr if none last time point dcnl is used tmax is deprecated and will be removed in 0 16 dcnl iir filter none | array dcnl iir filter coefficients denominator e g 1 1 0 2 dcnl random state none | int | np random randomstate dcnl to specify the random generator state dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl snr float dcnl signal to noise ratio in db it corresponds to dcnl 10 log10 var signal var noise dcnl snr is deprecated and will be removed in 0 16 dcnl returns dcnl evoked evoked object dcnl the simulated evoked data dcnl see also dcnl simulate raw dcnl simulate stc dcnl simulate sparse stc dcnl notes dcnl to make the equivalence between snr and nave when the snr is given dcnl instead of nave dcnl nave 1 10 actual snr snr 20 2 dcnl where actual snr is the snr to the generated noise before scaling dcnl versionadded 0 10 0
create noise as a multivariate gaussian dcnl the spatial covariance of the noise is given from the cov matrix dcnl parameters dcnl evoked evoked object dcnl an instance of evoked used as template dcnl cov covariance object dcnl the noise covariance dcnl iir filter none | array dcnl iir filter coefficients denominator dcnl random state none | int | np random randomstate dcnl to specify the random generator state dcnl returns dcnl noise evoked object dcnl an instance of evoked dcnl notes dcnl versionadded 0 10 0
create spatially colored and temporally iirfiltered noise
add noise to evoked object with specified snr dcnl snr is computed in the interval from tmin to tmax dcnl parameters dcnl evoked evoked object dcnl an instance of evoked with signal dcnl noise evoked object dcnl an instance of evoked with noise dcnl snr float dcnl signal to noise ratio in db it corresponds to dcnl 10 log10 var signal var noise dcnl tmin float dcnl start time before event dcnl tmax float dcnl end time after event dcnl returns dcnl evoked noise evoked object dcnl an instance of evoked corrupted by noise
select source positions using a label dcnl parameters dcnl src list of dict dcnl the source space dcnl label label dcnl the label read with mne read label dcnl random state none | int | np random randomstate dcnl to specify the random generator state dcnl location str dcnl the label location to choose can be random default or center dcnl to use func mne label center of mass restricting to vertices dcnl both in the label and in the source space note that for center dcnl mode the label values are used as weights dcnl versionadded 0 13 dcnl subject string | none dcnl the subject the label is defined for dcnl only used with location center dcnl versionadded 0 13 dcnl subjects dir str or none dcnl path to the subjects dir if none the path is obtained by using dcnl the environment variable subjects dir dcnl only used with location center dcnl versionadded 0 13 dcnl surf str dcnl the surface to use for euclidean distance center of mass dcnl finding the default here is sphere which finds the center dcnl of mass on the spherical surface to help avoid potential issues dcnl with cortical folding dcnl versionadded 0 13 dcnl returns dcnl lh vertno list dcnl selected source coefficients on the left hemisphere dcnl rh vertno list dcnl selected source coefficients on the right hemisphere
generate sparse n dipoles sources time courses from data fun dcnl this function randomly selects n dipoles vertices in the whole dcnl cortex or one single vertex randomly in or in the center of each dcnl label if labels is not none it uses data fun to generate dcnl waveforms for each vertex dcnl parameters dcnl src instance of sourcespaces dcnl the source space dcnl n dipoles int dcnl number of dipoles to simulate dcnl times array dcnl time array dcnl data fun callable dcnl function to generate the waveforms the default is a 100 nam 10 hz dcnl sinusoid as 1e7 np sin 20 pi t the function should take dcnl as input the array of time samples in seconds and return an array of dcnl the same length containing the time courses dcnl labels none | list of labels dcnl the labels the default is none otherwise its size must be n dipoles dcnl random state none | int | np random randomstate dcnl to specify the random generator state dcnl location str dcnl the label location to choose can be random default or center dcnl to use func mne label center of mass note that for center dcnl mode the label values are used as weights dcnl versionadded 0 13 dcnl subject string | none dcnl the subject the label is defined for dcnl only used with location center dcnl versionadded 0 13 dcnl subjects dir str or none dcnl path to the subjects dir if none the path is obtained by using dcnl the environment variable subjects dir dcnl only used with location center dcnl versionadded 0 13 dcnl surf str dcnl the surface to use for euclidean distance center of mass dcnl finding the default here is sphere which finds the center dcnl of mass on the spherical surface to help avoid potential issues dcnl with cortical folding dcnl versionadded 0 13 dcnl returns dcnl stc sourceestimate dcnl the generated source time courses dcnl see also dcnl simulate raw dcnl simulate evoked dcnl simulate stc dcnl notes dcnl versionadded 0 10 0
simulate sources time courses from waveforms and labels dcnl this function generates a source estimate with extended sources by dcnl filling the labels with the waveforms given in stc data dcnl parameters dcnl src instance of sourcespaces dcnl the source space dcnl labels list of labels dcnl the labels dcnl stc data array shape len labels x n times dcnl the waveforms dcnl tmin float dcnl the beginning of the timeseries dcnl tstep float dcnl the time step 1 sampling frequency dcnl value fun function | none dcnl function to apply to the label values to obtain the waveform dcnl scaling for each vertex in the label if none default uniform dcnl scaling is used dcnl returns dcnl stc sourceestimate dcnl the generated source time courses dcnl see also dcnl simulate raw dcnl simulate evoked dcnl simulate sparse stc
get the slice
read a noise covariance from a fif file dcnl parameters dcnl fname string dcnl the name of file containing the covariance matrix it should end with dcnl cov fif or cov fif gz dcnl verbose bool str int or none default none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl cov covariance dcnl the noise covariance matrix dcnl see also dcnl write cov compute covariance compute raw covariance
create an ad hoc noise covariance dcnl parameters dcnl info instance of info dcnl measurement info dcnl verbose bool str int or none default none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl cov instance of covariance dcnl the ad hoc diagonal noise covariance for the m eeg data channels dcnl notes dcnl this uses values of 5 ft cm 20 ft and 0 2 uv for gradiometers dcnl magnetometers and eeg channels respectively dcnl versionadded 0 9 0
check to see if there are enough samples for reliable cov calc
estimate noise covariance matrix from a continuous segment of raw data dcnl it is typically useful to estimate a noise covariance from empty room dcnl data or time intervals before starting the stimulation dcnl note this function will dcnl 1 partition the data into evenly spaced equallength dcnl epochs dcnl 2 load them into memory dcnl 3 subtract the mean across all time points and epochs dcnl for each channel dcnl 4 process the class epochs by dcnl func compute covariance dcnl this will produce a slightly different result compared to dcnl using func make fixed length events class epochs and dcnl func compute covariance directly since that would with dcnl the recommended baseline correction subtract the mean across dcnl time for each epoch instead of across epochs for each dcnl channel dcnl parameters dcnl raw instance of raw dcnl raw data dcnl tmin float dcnl beginning of time interval in seconds defaults to 0 dcnl tmax float | none default none dcnl end of time interval in seconds if none default use the end of the dcnl recording dcnl tstep float default 0 2 dcnl length of data chunks for artefact rejection in seconds dcnl can also be none to use a single epoch of tmax tmin dcnl duration this can use a lot of memory for large raw dcnl instances dcnl reject dict | none default none dcnl rejection parameters based on peaktopeak amplitude dcnl valid keys are grad | mag | eeg | eog | ecg dcnl if reject is none then no rejection is done example dcnl reject dict grad 4000e13 t m gradiometers dcnl mag 4e12 t magnetometers dcnl eeg 40e6 v eeg channels dcnl eog 250e6 v eog channels dcnl flat dict | none default none dcnl rejection parameters based on flatness of signal dcnl valid keys are grad | mag | eeg | eog | ecg and values dcnl are floats that set the minimum acceptable peaktopeak amplitude dcnl if flat is none then no rejection is done dcnl picks arraylike of int | none default none dcnl indices of channels to include if none data channels are used dcnl method str | list | none default empirical dcnl the method used for covariance estimation dcnl see func mne compute covariance dcnl versionadded 0 12 dcnl method params dict | none default none dcnl additional parameters to the estimation procedure dcnl see func mne compute covariance dcnl versionadded 0 12 dcnl cv int | sklearn cross validation object default 3 dcnl the cross validation method defaults to 3 which will dcnl internally trigger a default 3fold shuffle split dcnl versionadded 0 12 dcnl scalings dict | none default none dcnl defaults to dict mag 1e15 grad 1e13 eeg 1e6 dcnl these defaults will scale magnetometers and gradiometers dcnl at the same unit dcnl versionadded 0 12 dcnl n jobs int default 1 dcnl number of jobs to run in parallel dcnl versionadded 0 12 dcnl return estimators bool default false dcnl whether to return all estimators or the best only considered if dcnl method equals auto or is a list of str defaults to false dcnl versionadded 0 12 dcnl reject by annotation bool dcnl whether to reject based on annotations if true default epochs dcnl overlapping with segments whose description begins with bad are dcnl rejected if false no rejection based on annotations is performed dcnl versionadded 0 14 0 dcnl verbose bool | str | int | none default none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl cov instance of covariance | list dcnl the computed covariance if method equals auto or is a list of str dcnl and return estimators equals true a list of covariance estimators is dcnl returned sorted by loglikelihood from high to low i e from best dcnl to worst dcnl see also dcnl compute covariance estimate noise covariance matrix from epochs
estimate noise covariance matrix from epochs dcnl the noise covariance is typically estimated on prestim periods dcnl when the stim onset is defined from events dcnl if the covariance is computed for multiple event types events dcnl with different ids the following two options can be used and combined dcnl 1 either an epochs object for each event type is created and dcnl a list of epochs is passed to this function dcnl 2 an epochs object is created for multiple events and passed dcnl to this function dcnl note baseline correction should be used when creating the epochs dcnl otherwise the computed covariance matrix will be inaccurate dcnl note for multiple event types it is also possible to create a dcnl single epochs object with events obtained using dcnl merge events however the resulting covariance matrix dcnl will only be correct if keep sample mean is true dcnl note the covariance can be unstable if the number of samples is dcnl not sufficient in that case it is common to regularize a dcnl covariance estimate the method parameter of this dcnl function allows to regularize the covariance in an dcnl automated way it also allows to select between different dcnl alternative estimation algorithms which themselves achieve dcnl regularization details are described in 1 dcnl parameters dcnl epochs instance of epochs or a list of epochs objects dcnl the epochs dcnl keep sample mean bool default true dcnl if false the average response over epochs is computed for dcnl each event type and subtracted during the covariance dcnl computation this is useful if the evoked response from a dcnl previous stimulus extends into the baseline period of the next dcnl note this option is only implemented for method empirical dcnl tmin float | none default none dcnl start time for baseline if none start at first sample dcnl tmax float | none default none dcnl end time for baseline if none end at last sample dcnl projs list of projection | none default none dcnl list of projectors to use in covariance calculation or none dcnl to indicate that the projectors from the epochs should be dcnl inherited if none then projectors from all epochs must match dcnl method str | list | none default empirical dcnl the method used for covariance estimation if empirical default dcnl the sample covariance will be computed a list can be passed to run a dcnl set of the different methods dcnl if auto or a list of methods the best estimator will be determined dcnl based on loglikelihood and crossvalidation on unseen data as dcnl described in 1 valid methods are dcnl empirical the empirical or sample covariance dcnl diagonal fixed a diagonal regularization as in dcnl mne cov regularize see mne manual dcnl ledoit wolf the ledoitwolf estimator 2 dcnl shrunk like ledoit wolf with crossvalidation for dcnl optimal alpha see scikitlearn documentation on covariance dcnl estimation dcnl pca probabilistic pca with low rank 3 dcnl factor analysis factor analysis with low rank 4 dcnl if auto this expands to dcnl shrunk diagonal fixed empirical factor analysis dcnl note ledoit wolf and pca are similar to dcnl shrunk and factor analysis respectively they are not dcnl included to avoid redundancy in most cases shrunk and dcnl factor analysis represent more appropriate default dcnl choices dcnl the auto mode is not recommended if there are many dcnl segments of data since computation can take a long time dcnl versionadded 0 9 0 dcnl method params dict | none default none dcnl additional parameters to the estimation procedure only considered if dcnl method is not none keys must correspond to the value s of method dcnl if none default expands to dcnl empirical store precision false assume centered true dcnl diagonal fixed grad 0 01 mag 0 01 eeg 0 0 dcnl store precision false dcnl assume centered true dcnl ledoit wolf store precision false assume centered true dcnl shrunk shrinkage np logspace 4 0 30 dcnl store precision false assume centered true dcnl pca iter n components none dcnl factor analysis iter n components none dcnl cv int | sklearn cross validation object default 3 dcnl the cross validation method defaults to 3 which will dcnl internally trigger a default 3fold shuffle split dcnl scalings dict | none default none dcnl defaults to dict mag 1e15 grad 1e13 eeg 1e6 dcnl these defaults will scale magnetometers and gradiometers dcnl at the same unit dcnl n jobs int default 1 dcnl number of jobs to run in parallel dcnl return estimators bool default false dcnl whether to return all estimators or the best only considered if dcnl method equals auto or is a list of str defaults to false dcnl on mismatch str dcnl what to do when the meg< head transformations do not match between dcnl epochs if raise default an error is raised if warn then a dcnl warning is emitted if ignore then nothing is printed having dcnl mismatched transforms can in some cases lead to unexpected or dcnl unstable results in covariance calculation e g when data dcnl have been processed with maxwell filtering but not transformed dcnl to the same head position dcnl verbose bool | str | int | or none default none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl cov instance of covariance | list dcnl the computed covariance if method equals auto or is a list of str dcnl and return estimators equals true a list of covariance estimators is dcnl returned sorted by loglikelihood from high to low i e from best dcnl to worst dcnl see also dcnl compute raw covariance estimate noise covariance from raw data dcnl references dcnl 1 engemann d and gramfort a 2015 automated model selection in dcnl covariance estimation and spatial whitening of meg and eeg dcnl signals vol 108 328342 neuroimage dcnl 2 ledoit o wolf m 2004 a wellconditioned estimator for dcnl largedimensional covariance matrices journal of multivariate dcnl analysis 88 2 365 411 dcnl 3 tipping m e bishop c m 1999 probabilistic principal dcnl component analysis journal of the royal statistical society dcnl series b statistical methodology 61 3 611 622 dcnl 4 barber d 2012 bayesian reasoning and machine learning dcnl cambridge university press algorithm 21 1
compute covariance auto mode
compute the log det of a symmetric matrix
compute the gaussian log likelihood of x under the model in est
compute cross validation
compute latent variable models
prepare special cov estimators
write a noise covariance matrix dcnl parameters dcnl fname string dcnl the name of the file it should end with cov fif or cov fif gz dcnl cov covariance dcnl the noise covariance matrix dcnl see also dcnl read cov
aux function
get whitener params for a set of channels
prepare noise covariance matrix dcnl parameters dcnl noise cov instance of covariance dcnl the noise covariance to process dcnl info dict dcnl the measurement info used to get channel types and bad channels dcnl ch names list dcnl the channel names to be considered dcnl rank none | int | dict dcnl specified rank of the noise covariance matrix if none the rank is dcnl detected automatically if int the rank is specified for the meg dcnl channels a dictionary with entries eeg and or meg can be used dcnl to specify the rank for each modality dcnl scalings dict | none dcnl data will be rescaled before rank estimation to improve accuracy dcnl if dict it will override the following dict default if none dcnl dict mag 1e12 grad 1e11 eeg 1e5 dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl cov instance of covariance dcnl a copy of the covariance with the good channels subselected dcnl and parameters updated
regularize noise covariance matrix dcnl this method works by adding a constant to the diagonal for each dcnl channel type separately special care is taken to keep the dcnl rank of the data constant dcnl note this function is kept for reasons of backwardcompatibility dcnl please consider explicitly using the method parameter in dcnl func mne compute covariance to directly combine estimation dcnl with regularization in a datadriven fashion dcnl see the faq <http martinos org mne dev faq html howshouldiregularizethecovariancematrix dcnl for more information dcnl parameters dcnl cov covariance dcnl the noise covariance matrix dcnl info dict dcnl the measurement info used to get channel types and bad channels dcnl mag float default 0 1 dcnl regularization factor for meg magnetometers dcnl grad float default 0 1 dcnl regularization factor for meg gradiometers dcnl eeg float default 0 1 dcnl regularization factor for eeg dcnl exclude list | bads default bads dcnl list of channels to mark as bad if bads bads channels dcnl are extracted from both info bads and cov bads dcnl proj bool default true dcnl apply or not projections to keep rank of data dcnl verbose bool | str | int | none default none dcnl if not none override default verbose level see func mne verbose dcnl returns dcnl reg cov covariance dcnl the regularized covariance matrix dcnl see also dcnl mne compute covariance
compute a regularized covariance from data using sklearn dcnl parameters dcnl data ndarray shape n channels n times dcnl data for covariance estimation dcnl reg float | str | none default none dcnl if not none allow regularization for covariance estimation dcnl if float shrinkage covariance is used 0 < shrinkage < 1 dcnl if str optimal shrinkage using ledoitwolf shrinkage ledoit wolf dcnl or oracle approximating shrinkage oas dcnl returns dcnl cov ndarray shape n channels n channels dcnl the covariance matrix
compute whitening matrix dcnl parameters dcnl noise cov covariance dcnl the noise covariance dcnl info dict dcnl the measurement info dcnl picks arraylike of int | none dcnl the channels indices to include if none the data dcnl channels in info except bad channels are used dcnl rank none | int | dict dcnl specified rank of the noise covariance matrix if none the rank is dcnl detected automatically if int the rank is specified for the meg dcnl channels a dictionary with entries eeg and or meg can be used dcnl to specify the rank for each modality dcnl scalings dict | none dcnl the rescaling method to be applied see documentation of dcnl prepare noise cov for details dcnl return rank bool dcnl if true return the rank used to compute the whitener dcnl versionadded 0 15 dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl w 2d array dcnl the whitening matrix dcnl ch names list dcnl the channel names
whiten evoked data using given noise covariance dcnl parameters dcnl evoked instance of evoked dcnl the evoked data dcnl noise cov instance of covariance dcnl the noise covariance dcnl picks arraylike of int | none dcnl the channel indices to whiten can be none to whiten meg and eeg dcnl data dcnl diag bool default false dcnl if true whiten using only the diagonal of the covariance dcnl rank none | int | dict default none dcnl specified rank of the noise covariance matrix if none the rank is dcnl detected automatically if int the rank is specified for the meg dcnl channels a dictionary with entries eeg and or meg can be used dcnl to specify the rank for each modality dcnl scalings dict | none default none dcnl to achieve reliable rank estimation on multiple sensors dcnl sensors have to be rescaled this parameter controls the dcnl rescaling if dict it will override the dcnl following default dict default if none dcnl dict mag 1e12 grad 1e11 eeg 1e5 dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl evoked white instance of evoked dcnl the whitened evoked data
get whitening matrix for a set of data
read a noise covariance matrix
write a noise covariance matrix
scale data typedependently for estimation
scale resulting data after estimation
aux function
estimate rank for m eeg data dcnl parameters dcnl data np ndarray of float shape n channels n samples dcnl the m eeg signals dcnl info info dcnl the measurment info dcnl scalings dict | norm | np ndarray | none dcnl the rescaling method to be applied if dict it will override the dcnl following default dict dcnl dict mag 1e15 grad 1e13 eeg 1e6 dcnl if norm data will be scaled by channelwise norms if array dcnl prespecified norms will be used if none no scaling will be applied dcnl tol float | str dcnl tolerance see estimate rank dcnl return singular bool dcnl if true also return the singular values that were used dcnl to determine the rank dcnl returns dcnl rank int dcnl estimated rank of the data dcnl s array dcnl if return singular is true the singular values that were dcnl thresholded to determine the rank are also returned
estimate rank of m eeg covariance data given the covariance dcnl parameters dcnl data np ndarray of float shape n channels n channels dcnl the m eeg covariance dcnl info info dcnl the measurment info dcnl scalings dict | norm | np ndarray | none dcnl the rescaling method to be applied if dict it will override the dcnl following default dict dcnl dict mag 1e12 grad 1e11 eeg 1e5 dcnl if norm data will be scaled by channelwise norms if array dcnl prespecified norms will be used if none no scaling will be applied dcnl tol float | str dcnl tolerance see estimate rank dcnl return singular bool dcnl if true also return the singular values that were used dcnl to determine the rank dcnl returns dcnl rank int dcnl estimated rank of the data dcnl s array dcnl if return singular is true the singular values that were dcnl thresholded to determine the rank are also returned
format mm data
get the freesurfer home directory dcnl returns dcnl fs home none | str dcnl the freesurfer home path or none if the user cancels dcnl notes dcnl if freesurfer home can t be found the user is prompted with a file dialog dcnl if specified successfully the resulting path is stored with dcnl mne set config
set the freesurfer home environment variable dcnl returns dcnl success bool dcnl true if the environment variable could be set false if freesurfer home dcnl could not be found dcnl notes dcnl if freesurfer home can t be found the user is prompted with a file dialog dcnl if specified successfully the resulting path is stored with dcnl mne set config
check freesurfer home path dcnl return str describing problem or none if the path is okay
check mne root path dcnl return str describing problem or none if the path is okay
initialize gui depending on testing mode
create a new kit marker file by interpolating two marker files dcnl notes dcnl the functionality in this gui is also part of func kit2fiff
coregister an mri with a subject s head shape dcnl the recommended way to use the gui is through bash with dcnl codeblock bash dcnl mne coreg dcnl parameters dcnl tabbed bool dcnl combine the data source panel and the coregistration panel into a dcnl single panel with tabs dcnl split bool dcnl split the main panels with a movable splitter good for qt4 but dcnl unnecessary for wx backend dcnl scene width int | none dcnl specify a minimum width for the 3d scene in pixels dcnl default is none which uses mne coreg scene width config value dcnl which defaults to 500 dcnl inst none | str dcnl path to an instance file containing the digitizer data compatible for dcnl raw epochs and evoked files dcnl subject none | str dcnl name of the mri subject dcnl subjects dir none | path dcnl override the subjects dir environment variable dcnl sys environ subjects dir dcnl guess mri subject bool dcnl when selecting a new head shape file guess the subject s name based dcnl on the filename and change the mri subject accordingly default true dcnl scene height int | none dcnl specify a minimum height for the 3d scene in pixels dcnl default is none which uses mne coreg scene width config value dcnl which defaults to 400 dcnl head opacity float | none dcnl the opacity of the head surface in the range 0 1 dcnl default is none which uses mne coreg head opacity config value dcnl which defaults to 1 dcnl head high res bool | none dcnl use a high resolution head surface dcnl default is none which uses mne coreg head high res config value dcnl which defaults to true dcnl trans str | none dcnl the transform file to use dcnl scrollable bool dcnl make the coregistration panel vertically scrollable default true dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl notes dcnl step by step instructions for the coregistrations can be accessed as dcnl slides for subjects with structural mri dcnl <http www slideshare net mnepython mnepythoncoregistration and for dcnl subjects for which no mri is available dcnl <http www slideshare net mnepython mnepythonscalemri
set the fiducials for an mri subject dcnl parameters dcnl subject str dcnl name of the mri subject dcnl fid file none | str dcnl load a fiducials file different form the subject s default dcnl subjects dir subject bem subject fiducials fif dcnl subjects dir none | str dcnl overrule the subjects dir environment variable dcnl notes dcnl all parameters are optional since they can be set through the gui dcnl the functionality in this gui is also part of func coregistration
convert kit files to the fiff format dcnl the recommended way to use the gui is through bash with dcnl mne kit2fiff
test kit2fiff model
test kit2fiff gui
test surfacesource
test fiducialssource
test digsource
test subjectselector
test subjectselector
test coregmodel
test coregframe
test coregmodel with the fsaverage brain data
test combinemarkersmodel traits model
test mriheadwithfiducialsmodel traits model
generate view for coregpanel
create a view for the coregframe dcnl parameters dcnl tabbed bool dcnl combine the data source panel and the coregistration panel into a dcnl single panel with tabs dcnl split bool dcnl split the main panels with a movable splitter good for qt4 but dcnl unnecessary for wx backend dcnl scene width int dcnl specify a minimum width for the 3d scene in pixels dcnl scrollable bool dcnl make the coregistration panel vertically scrollable default true dcnl returns dcnl view traits view dcnl view object for the coregframe
determine if we re running tests
read and format tooltips return a dict
calculate spherical spline g function between points on a sphere dcnl parameters dcnl cosang arraylike of float shape n channels n channels dcnl cosine of angles between pairs of points on a spherical surface this dcnl is equivalent to the dot product of unit vectors dcnl stiffness float dcnl stiffness of the spline dcnl num lterms int dcnl number of legendre terms to evaluate dcnl returns dcnl g np ndrarray of float shape n channels n channels dcnl the g matrix
compute interpolation matrix based on spherical splines dcnl implementation based on 1 dcnl parameters dcnl pos from np ndarray of float shape n good sensors 3 dcnl the positions to interpoloate from dcnl pos to np ndarray of float shape n bad sensors 3 dcnl the positions to interpoloate dcnl alpha float dcnl regularization parameter defaults to 1e5 dcnl returns dcnl interpolation np ndarray of float shape len pos from len pos to dcnl the interpolation matrix that maps good signals to the location dcnl of bad signals dcnl references dcnl 1 perrin f pernier j bertrand o and echallier jf 1989 dcnl spherical splines for scalp potential and current density mapping dcnl electroencephalography clinical neurophysiology feb 72 2 1847
dot product of channel mapping matrix to channel data
interpolate bad eeg channels dcnl operates in place dcnl parameters dcnl inst mne io raw mne epochs or mne evoked dcnl the data to interpolate must be preloaded
interpolate bad channels from data in good channels dcnl parameters dcnl inst mne io raw mne epochs or mne evoked dcnl the data to interpolate must be preloaded dcnl mode str dcnl either accurate or fast determines the quality of the dcnl legendre polynomial expansion used for interpolation fast should dcnl be sufficient for most applications dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more
educated guess for the helmet type based on channels
check whether a certain channel type is in an info object dcnl parameters dcnl info instance of info dcnl the measurement information dcnl ch type str dcnl the channel type to be checked for dcnl returns dcnl has ch type bool dcnl whether the channel type is present or not
choose a single channel type usually for plotting dcnl usually used in plotting to plot a single datatype e g look for mags dcnl then grads then to plot
equalize channel picks for a collection of mnepython objects dcnl parameters dcnl candidates list dcnl list raw | epochs | evoked | averagetfr dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl notes dcnl this function operates inplace
ensure type change is compatible with projectors
rename channels dcnl parameters dcnl info dict dcnl measurement info dcnl mapping dict | callable dcnl a dictionary mapping the old channel to a new channel name dcnl e g eeg061 eeg161 can also be a callable function dcnl that takes and returns a string new in version 0 10 0
unpack mat files in python
parse fieldtrip neighbors mat file dcnl more information on these neighbor definitions can be found on the dcnl related fieldtrip documentation pages dcnl http fieldtrip fcdonders nl template neighbours dcnl parameters dcnl fname str dcnl the file name example neuromag306mag neuromag306planar dcnl ctf275 biosemi64 etc dcnl picks arraylike of int shape n channels dcnl the indices of the channels to include must match the template dcnl defaults to none dcnl returns dcnl ch connectivity scipy sparse matrix shape n channels n channels dcnl the connectivity matrix dcnl ch names list dcnl the list of channel names present in connectivity matrix dcnl see also dcnl find ch connectivity dcnl notes dcnl this function is closely related to find ch connectivity in case you dcnl don t know the correct file for the neighbor definitions the use of dcnl find ch connectivity is preferred
compute sensor connectivity matrix dcnl parameters dcnl ch names list of str dcnl the channel names dcnl neighbors list of list dcnl a list of list of channel names the neighbors to dcnl which the channels in ch names are connected with dcnl must be of the same length as ch names dcnl returns dcnl ch connectivity scipy sparse matrix dcnl the connectivity matrix
find the connectivity matrix for the given channels dcnl this function tries to infer the appropriate connectivity matrix template dcnl for the given channels if a template is not found the connectivity matrix dcnl is computed using delaunay triangulation based on 2d sensor locations dcnl parameters dcnl info instance of info dcnl the measurement info dcnl ch type str | none dcnl the channel type for computing the connectivity matrix currently dcnl supports mag grad eeg and none if none the info must contain dcnl only one channel type dcnl returns dcnl ch connectivity scipy sparse matrix shape n channels n channels dcnl the connectivity matrix dcnl ch names list dcnl the list of channel names present in connectivity matrix dcnl see also dcnl read ch connectivity dcnl notes dcnl versionadded 0 15
compute channel connectivity matrix using delaunay triangulations dcnl parameters dcnl info instance of mne measuerment info info dcnl the measurement info dcnl ch type str dcnl the channel type for computing the connectivity matrix currently dcnl supports mag grad and eeg dcnl returns dcnl ch connectivity scipy sparse matrix shape n channels n channels dcnl the connectivity matrix dcnl ch names list dcnl the list of channel names present in connectivity matrix
fix magnetometer coil types dcnl parameters dcnl info dict dcnl the info dict to correct corrections are done inplace dcnl notes dcnl this function changes magnetometer coil types 3022 t1 sq20483n and dcnl 3023 t2 sq20483a to 3024 t3 sq20950n in the channel definition dcnl records in the info structure dcnl neuromag vectorview systems can contain magnetometers with two dcnl different coil sizes 3022 and 3023 vs 3024 the systems dcnl incorporating coils of type 3024 were introduced last and are used at dcnl the majority of meg sites at some sites with 3024 magnetometers dcnl the data files have still defined the magnetometers to be of type dcnl 3022 to ensure compatibility with older versions of neuromag software dcnl in the mne software as well as in the present version of neuromag dcnl software coil type 3024 is fully supported therefore it is now safe dcnl to upgrade the data files to use the true coil type dcnl note the effect of the difference between the coil sizes on the dcnl current estimates computed by the mne software is very small dcnl therefore the use of mne fix mag coil types is not mandatory
find t1 t2 magnetometer coil types
get channel info for inferring acquisition device
helper to make test info
test io with lout files
test io with lay files
test mapping of coordinates in 3d space to 2d
test creation of eeg layout
test creation of grid layout
test finding layout
test calculation of box sizes
test creation of a layout from 2d points
helper function to load data
test interpolation
test making montages
test reading eeglab locs
test read dig montage
test applying digmontage to inst
test fif dig montage support
test egi mff xml dig montage support
test setting a montage
check roundtrip writing
test rename channels
test set channel types
test reading channel connectivity templates
test get set functions for sensor positions
test computing the connectivity matrix
get a list of all builtin montages dcnl returns dcnl montages list dcnl names of all builtin montages that can be loaded with dcnl func read montage
read a generic builtin montage dcnl individualized digitized electrode positions should be read in using dcnl func read dig montage dcnl in most cases you should only need to set the kind parameter to load one dcnl of the builtin montages see notes dcnl parameters dcnl kind str dcnl the name of the montage file without the file extension e g dcnl kind easycapm10 for easycapm10 txt files with extensions dcnl elc txt csd elp hpts sfp loc locs and dcnl eloc or bvef are supported dcnl ch names list of str | none dcnl if not all electrodes defined in the montage are present in the eeg dcnl data use this parameter to select a subset of electrode positions to dcnl load if none default all defined electrode positions are returned dcnl note ch names are compared to channel names in the montage dcnl file after converting them both to upper case if a match is dcnl found the letter case in the original ch names is used dcnl in the returned montage dcnl path str | none dcnl the path of the folder containing the montage file defaults to the dcnl mne channels data montages folder in your mnepython installation dcnl unit m | cm | mm dcnl unit of the input file if not m default coordinates will be dcnl rescaled to m dcnl transform bool dcnl if true points will be transformed to neuromag space the fidicuals dcnl nasion lpa rpa must be specified in the montage file useful dcnl for points captured using polhemus fastscan default is false dcnl returns dcnl montage instance of montage dcnl the montage dcnl see also dcnl digmontage dcnl montage dcnl read dig montage dcnl notes dcnl builtin montages are not scaled or transformed by default dcnl montages can contain fiducial points in addition to electrode channels dcnl e g biosemi64 contains 67 locations in the following table the dcnl number of channels and fiducials is given in parentheses in the description dcnl column e g 64+3 means 64 channels and 3 fiducials dcnl valid kind arguments are dcnl kind description dcnl standard 1005 electrodes are named and positioned according to the dcnl international 1005 system 343+3 locations dcnl standard 1020 electrodes are named and positioned according to the dcnl international 1020 system 94+3 locations dcnl standard alphabetic electrodes are named with letternumber combinations dcnl a1 b2 f4 65+3 locations dcnl standard postfixed electrodes are named according to the international dcnl 1020 system using postfixes for intermediate dcnl positions 100+3 locations dcnl standard prefixed electrodes are named according to the international dcnl 1020 system using prefixes for intermediate dcnl positions 74+3 locations dcnl standard primed electrodes are named according to the international dcnl 1020 system using prime marks and for dcnl intermediate positions 100+3 locations dcnl biosemi16 biosemi cap with 16 electrodes 16+3 locations dcnl biosemi32 biosemi cap with 32 electrodes 32+3 locations dcnl biosemi64 biosemi cap with 64 electrodes 64+3 locations dcnl biosemi128 biosemi cap with 128 electrodes 128+3 locations dcnl biosemi160 biosemi cap with 160 electrodes 160+3 locations dcnl biosemi256 biosemi cap with 256 electrodes 256+3 locations dcnl easycapm1 easycap with 1005 electrode names 74 locations dcnl easycapm10 easycap with numbered electrodes 61 locations dcnl egi 256 geodesic sensor net 256 locations dcnl gsnhydrocel32 hydrocel geodesic sensor net and cz 33+3 locations dcnl gsnhydrocel64 1 0 hydrocel geodesic sensor net 64+3 locations dcnl gsnhydrocel65 1 0 hydrocel geodesic sensor net and cz 65+3 locations dcnl gsnhydrocel128 hydrocel geodesic sensor net 128+3 locations dcnl gsnhydrocel129 hydrocel geodesic sensor net and cz 129+3 locations dcnl gsnhydrocel256 hydrocel geodesic sensor net 256+3 locations dcnl gsnhydrocel257 hydrocel geodesic sensor net and cz 257+3 locations dcnl 105 egi129 462+3 locations dcnl mgh60 the older 60channel cap used at dcnl mgh 60+3 locations dcnl mgh70 the newer 70channel brainvision cap used at dcnl mgh 70+3 locations dcnl versionadded 0 9 0
check coordinate frames
read subjectspecific digitization montage from a file dcnl parameters dcnl hsp none | str | array shape n points 3 dcnl if str this corresponds to the filename of the headshape points dcnl this is typically used with the polhemus fastscan system dcnl if numpy array this corresponds to an array of positions of the dcnl headshape points in 3d these points are assumed to be in the native dcnl digitizer space and will be rescaled according to the unit parameter dcnl hpi none | str | array shape n hpi 3 dcnl if str this corresponds to the filename of head position indicator dcnl hpi points if numpy array this corresponds to an array dcnl of hpi points these points are in device space and are only dcnl necessary if computation of a dev head t by the dcnl class digmontage is required dcnl elp none | str | array shape n fids + n hpi 3 dcnl if str this corresponds to the filename of electrode position dcnl points this is typically used with the polhemus fastscan system dcnl if numpy array this corresponds to an array of digitizer points in dcnl the same order these points are assumed to be in the native digitizer dcnl space and will be rescaled according to the unit parameter dcnl point names none | list dcnl a list of point names for elp required if elp is defined dcnl typically this would be like dcnl nasion lpa rpa chpi001 chpi002 chpi003 dcnl unit auto | m | cm | mm dcnl unit of the digitizer files hsp and elp if not m coordinates will dcnl be rescaled to m default is auto which assumes m for hsp and dcnl elp files and mm for txt files corresponding to the known dcnl polhemus export formats dcnl fif str | none dcnl fif file from which to read digitization locations dcnl if str filename all other arguments are ignored dcnl versionadded 0 12 dcnl egi str | none dcnl egi mff xml coordinates file from which to read digitization locations dcnl if str filename all other arguments are ignored dcnl versionadded 0 14 dcnl transform bool dcnl if true default points will be transformed to neuromag space dcnl using meth digmontage transform to head dcnl the fidicuals nasion lpa and rpa must be specified dcnl this is useful for points captured using a device that does dcnl not automatically convert points to neuromag head coordinates dcnl e g polhemus fastscan dcnl dev head t bool dcnl if true a devtohead transformation matrix will be added to the dcnl montage using meth digmontage compute dev head t dcnl to get a proper dev head t the hpi and the elp points dcnl must be in the same order if false default no transformation dcnl will be added to the montage dcnl returns dcnl montage instance of digmontage dcnl the digitizer montage dcnl see also dcnl digmontage dcnl montage dcnl read montage dcnl notes dcnl all digitized points will be transformed to headbased coordinate system dcnl if transform is true and fiducials are present dcnl versionadded 0 9 0
apply montage to data dcnl with a montage this function will replace the eeg channel names and dcnl locations with the values specified for the particular montage dcnl with a digmontage this function will replace the digitizer info with dcnl the values specified for the particular montage dcnl usually a montage is expected to contain the positions of all eeg dcnl electrodes and a warning is raised when this is not the case dcnl parameters dcnl info instance of info dcnl the measurement info to update dcnl montage instance of montage | instance of digmontage dcnl the montage to apply dcnl update ch names bool dcnl if true overwrite the info channel names with the ones from montage dcnl defaults to false dcnl notes dcnl this function will change the info variable in place
aux function
aux function
read layout from a file dcnl parameters dcnl kind str dcnl the name of the lout file e g kind vectorviewall for dcnl vectorviewall lout dcnl path str | none dcnl the path of the folder containing the layout file defaults to the dcnl mne channels data layouts folder inside your mnepython installation dcnl scale bool dcnl apply useful scaling for out the box plotting using layout pos dcnl defaults to true dcnl returns dcnl layout instance of layout dcnl the layout dcnl see also dcnl layout save
create lout file from eeg electrode digitization dcnl parameters dcnl info instance of info dcnl measurement info e g raw info dcnl radius float dcnl viewport radius as a fraction of main figure height defaults to 0 5 dcnl width float | none dcnl width of sensor axes as a fraction of main figure height by default dcnl this will be the maximum width possible without axes overlapping dcnl height float | none dcnl height of sensor axes as a fraction of main figure height by default dcnl this will be the maximum height possible withough axes overlapping dcnl exclude list of string | str dcnl list of channels to exclude if empty do not exclude any dcnl if bads exclude channels in info bads default dcnl returns dcnl layout layout dcnl the generated layout dcnl see also dcnl make grid layout generate 2d layout
generate lout file for custom data i e ica sources dcnl parameters dcnl info instance of info | none dcnl measurement info e g raw info if none default names will be dcnl employed dcnl picks arraylike of int | none dcnl the indices of the channels to be included if none al misc channels dcnl will be included dcnl n col int | none dcnl number of columns to generate if none a square grid will be produced dcnl returns dcnl layout layout dcnl the generated layout dcnl see also dcnl make eeg layout generate 2d layout
choose a layout based on the channels in the info chs field dcnl parameters dcnl info instance of info dcnl the measurement info dcnl ch type mag grad meg eeg | none dcnl the channel type for selecting single channel layouts dcnl defaults to none note this argument will only be considered for dcnl vectorview type layout use meg to force using the full layout dcnl in situations where the info does only contain one sensor type dcnl exclude list of string | str dcnl list of channels to exclude if empty do not exclude any dcnl if bads exclude channels in info bads default dcnl returns dcnl layout layout instance | none dcnl none if layout not found
determine the kit layout dcnl parameters dcnl info info dcnl info object dcnl n grads int dcnl number of kitgradiometers in the info dcnl returns dcnl kit layout str dcnl one of kitad kit157 or kitumd
given a series of points calculate an appropriate box size dcnl parameters dcnl points array shape n points 2 dcnl the centers of the axes as a list of x y coordinate pairs normally dcnl these are points in the range 0 1 centered at 0 5 dcnl width float | none dcnl an optional box width to enforce when set only the box height will be dcnl calculated by the function dcnl height float | none dcnl an optional box height to enforce when set only the box width will be dcnl calculated by the function dcnl padding float dcnl portion of the box to reserve for padding the value can range between dcnl 0 0 boxes will touch default to 1 0 boxes consist of only padding dcnl returns dcnl width float dcnl width of the box dcnl height float dcnl height of the box
guess the e meg layout and return appropriate topomap coordinates dcnl parameters dcnl info instance of info dcnl measurement info dcnl picks list of int dcnl channel indices to generate topomap coords for dcnl layout none | instance of layout dcnl enforce using a specific layout with none a new map is generated dcnl with none a layout is chosen based on the channels in the chs dcnl parameter dcnl returns dcnl coords array shape n chs 2 dcnl 2 dimensional coordinates for each sensor for a topomap plot
make a 2 dimensional sensor map from sensor positions in an info dict dcnl the default is to use the electrode locations the fallback option is to dcnl attempt using digitization points of kind fiffv point eeg this only works dcnl with eeg and requires an equal number of digitization points and sensors dcnl parameters dcnl info instance of info dcnl the measurement info dcnl picks list of int dcnl the channel indices to generate topomap coords for dcnl ignore overlap bool dcnl whether to ignore overlapping positions in the layout if false and dcnl positions overlap an error is thrown dcnl to sphere bool dcnl if true the radial distance of spherical coordinates is ignored in dcnl effect fitting the xyzcoordinates to a sphere defaults to true dcnl returns dcnl locs array shape n sensors 2 dcnl an array of positions of the 2 dimensional map
transform xycoordinates to sphere dcnl parameters dcnl pos arraylike shape n channels 2 dcnl xyoordinates to transform dcnl eegs list of int dcnl indices of eeg channels that are included when calculating the sphere dcnl returns dcnl coords array shape n channels 3 dcnl xyzcoordinates
find the picks for pairing grad channels dcnl parameters dcnl info instance of info dcnl an info dictionary containing channel information dcnl layout layout | none dcnl the layout if available defaults to none dcnl topomap coords bool dcnl return the coordinates for a topomap plot along with the picks if dcnl false only picks are returned defaults to true dcnl exclude list of str | str dcnl list of channels to exclude if empty do not exclude any default dcnl if bads exclude channels in info bads defaults to bads dcnl raise error bool dcnl whether to raise an error when no pairs are found if false raises a dcnl warning dcnl returns dcnl picks array of int dcnl picks for the grad channels ordered in pairs dcnl coords array shape n grad channels 3 dcnl coordinates for a topomap plot optional only returned if dcnl topomap coords true
find the indexes for pairing grad channels dcnl parameters dcnl ch names list of str dcnl a list of channel names dcnl returns dcnl indexes list of int dcnl indexes of the grad channels ordered in pairs
merge data from channel pairs using the rms or mean dcnl parameters dcnl data array shape n channels n times dcnl data for channels ordered in pairs dcnl method str dcnl can be rms or mean dcnl returns dcnl data array shape n channels 2 n times dcnl the root mean square or mean for each pair
generate a custom 2d layout from xy points dcnl generates a 2d layout for plotting with plot topo methods and dcnl functions xy points will be normalized between 0 and 1 where dcnl normalization extremes will be either the min max of xy or dcnl the width height of bg image dcnl parameters dcnl xy ndarray n x 2 dcnl the xy coordinates of sensor locations dcnl w float dcnl the width of each sensor s axis between 0 and 1 dcnl h float dcnl the height of each sensor s axis between 0 and 1 dcnl pad float dcnl portion of the box to reserve for padding the value can range between dcnl 0 0 boxes will touch default to 1 0 boxes consist of only padding dcnl ch names list dcnl the names of each channel must be a list of strings with one dcnl string per channel dcnl ch indices list dcnl index of each channel must be a collection of unique integers dcnl one index per channel dcnl name string dcnl the name of this layout type dcnl bg image str | ndarray dcnl the image over which sensor axes will be plotted either a path to an dcnl image file or an array that can be plotted with plt imshow if dcnl provided xy points will be normalized by the width height of this dcnl image if not xy points will be normalized by their own min max dcnl normalize bool dcnl whether to normalize the coordinates to run from 0 to 1 defaults to dcnl true dcnl returns dcnl layout layout dcnl a layout object that can be plotted with plot topo dcnl functions and methods dcnl see also dcnl make eeg layout make grid layout dcnl notes dcnl versionadded 0 9 0
deal with scikitcuda namespace change
get the amount of free memory for cuda operations dcnl returns dcnl memory str dcnl the amount of available memory as a humanreadable string
initialize cuda functionality dcnl this function attempts to load the necessary interfaces dcnl hardware connectivity to run cudabased filtering this dcnl function should only need to be run once per session dcnl if the config var set via mne set config or in env dcnl mne use cuda true this function will be executed when dcnl the first cuda setup is performed if this variable is not dcnl set this function can be manually executed
set up repeated cuda fft multiplication with a given filter dcnl parameters dcnl n jobs int | str dcnl if n jobs cuda the function will attempt to set up for cuda dcnl fft multiplication dcnl h fft array dcnl the filtering function that will be used repeatedly dcnl if n jobs cuda this function will be shortened since cuda dcnl assumes ffts of real signals are half the length of the signal dcnl and turned into a gpuarray dcnl returns dcnl n jobs int dcnl sets n jobs 1 if n jobs cuda was passed in otherwise dcnl original n jobs is passed dcnl cuda dict dict dcnl dictionary with the following cudarelated variables dcnl use cuda bool dcnl whether cuda should be used dcnl fft plan instance of fftplan dcnl fft plan to use in calculating the fft dcnl ifft plan instance of fftplan dcnl fft plan to use in calculating the ifft dcnl x fft instance of gpuarray dcnl empty allocated gpu space for storing the result of the dcnl frequencydomain multiplication dcnl x instance of gpuarray dcnl empty allocated gpu space for the data to filter dcnl h fft array | instance of gpuarray dcnl this will either be a gpuarray if cuda enabled or np ndarray dcnl if cuda is enabled h fft will be modified appropriately for use dcnl with filter fft multiply dcnl notes dcnl this function is designed to be used with fft multiply repeated
do fft multiplication by a filter function possibly using cuda dcnl parameters dcnl h fft 1d array or gpuarray dcnl the filtering array to apply dcnl x 1d array dcnl the array to filter dcnl cuda dict dict dcnl dictionary constructed using setup cuda multiply repeated dcnl returns dcnl x 1d array dcnl filtered version of x
set up cuda fft resampling dcnl parameters dcnl n jobs int | str dcnl if n jobs cuda the function will attempt to set up for cuda dcnl fft resampling dcnl w array dcnl the filtering function to be used during resampling dcnl if n jobs cuda this function will be shortened since cuda dcnl assumes ffts of real signals are half the length of the signal dcnl and turned into a gpuarray dcnl new len int dcnl the size of the array following resampling dcnl returns dcnl n jobs int dcnl sets n jobs 1 if n jobs cuda was passed in otherwise dcnl original n jobs is passed dcnl cuda dict dict dcnl dictionary with the following cudarelated variables dcnl use cuda bool dcnl whether cuda should be used dcnl fft plan instance of fftplan dcnl fft plan to use in calculating the fft dcnl ifft plan instance of fftplan dcnl fft plan to use in calculating the ifft dcnl x fft instance of gpuarray dcnl empty allocated gpu space for storing the result of the dcnl frequencydomain multiplication dcnl x instance of gpuarray dcnl empty allocated gpu space for the data to resample dcnl w array | instance of gpuarray dcnl this will either be a gpuarray if cuda enabled or np ndarray dcnl if cuda is enabled w will be modified appropriately for use dcnl with filter fft multiply dcnl notes dcnl this function is designed to be used with fft resample
do fft resampling with a filter function possibly using cuda dcnl parameters dcnl x 1d array dcnl the array to resample will be converted to float64 if necessary dcnl w 1d array or gpuarray dcnl the filtering function to apply dcnl new len int dcnl the size of the output array before removing padding dcnl npads tuple of int dcnl amount of padding to apply to the start and end of the dcnl signal before resampling dcnl to removes tuple of int dcnl number of samples to remove after resampling dcnl cuda dict dict dcnl dictionary constructed using setup cuda multiply repeated dcnl returns dcnl x 1d array dcnl filtered version of x
pad vector x
prepare inverse operator and params for spectral tfr analysis
compute source space induced power in given frequency bands dcnl parameters dcnl epochs instance of epochs dcnl the epochs dcnl inverse operator instance of inverse operator dcnl the inverse operator dcnl bands dict dcnl example bands dict alpha 8 9 dcnl label label dcnl restricts the source estimates to a given label dcnl lambda2 float dcnl the regularization parameter of the minimum norm dcnl method mne | dspm | sloreta dcnl use mininum norm dspm or sloreta dcnl nave int dcnl the number of averages used to scale the noise covariance matrix dcnl n cycles float | array of float dcnl number of cycles fixed number or one per frequency dcnl df float dcnl delta frequency within bands dcnl use fft bool dcnl do convolutions in time or frequency domain with fft dcnl decim int dcnl temporal decimation factor dcnl baseline none default or tuple of length 2 dcnl the time interval to apply baseline correction if none do not apply dcnl it if baseline is a b the interval is between a s and b s dcnl if a is none the beginning of the data is used and if b is none then b dcnl is set to the end of the interval if baseline is equal to none none dcnl all the time interval is used dcnl baseline mode none | logratio | zscore dcnl do baseline correction with ratio power is divided by mean dcnl power during baseline or zscore power is divided by standard dcnl deviation of power during baseline after subtracting the mean dcnl power power mean power baseline std power baseline dcnl pca bool dcnl if true the true dimension of data is estimated before running dcnl the timefrequency transforms it reduces the computation times dcnl e g with a dataset that was maxfiltered true dim is 64 dcnl n jobs int dcnl number of jobs to run in parallel dcnl prepared bool dcnl if true do not call prepare inverse operator dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl stcs dict with a sourceestimate or volsourceestimate for each band dcnl the estimated source space induced power estimates
prepare tfr source localization
aux function for induced power and plv
compute single trial tfrs either itc power or raw tfr
aux function for source induced power
compute induced power and phase lock dcnl computation can optionaly be restricted in a label dcnl parameters dcnl epochs instance of epochs dcnl the epochs dcnl inverse operator instance of inverseoperator dcnl the inverse operator dcnl frequencies array dcnl array of frequencies of interest dcnl label label dcnl restricts the source estimates to a given label dcnl lambda2 float dcnl the regularization parameter of the minimum norm dcnl method mne | dspm | sloreta dcnl use mininum norm dspm or sloreta dcnl nave int dcnl the number of averages used to scale the noise covariance matrix dcnl n cycles float | array of float dcnl number of cycles fixed number or one per frequency dcnl decim int dcnl temporal decimation factor dcnl use fft bool dcnl do convolutions in time or frequency domain with fft dcnl pick ori none | normal dcnl if normal rather than pooling the orientations by taking the norm dcnl only the radial component is kept this is only implemented dcnl when working with loose orientations dcnl baseline none default or tuple of length 2 dcnl the time interval to apply baseline correction dcnl if none do not apply it if baseline is a b dcnl the interval is between a s and b s dcnl if a is none the beginning of the data is used dcnl and if b is none then b is set to the end of the interval dcnl if baseline is equal ot none none all the time dcnl interval is used dcnl baseline mode none | ratio | zscore | mean | percent | logratio | zlogratio dcnl do baseline correction with ratio power is divided by mean dcnl power during baseline or zscore power is divided by standard dcnl deviation of power during baseline after subtracting the mean dcnl power power mean power baseline std power baseline mean dcnl simply subtracts the mean power percent is the same as applying ratio dcnl then mean logratio is the same as mean but then rendered in logscale dcnl zlogratio is the same as zscore but data is rendered in logscale dcnl first dcnl if none no baseline correction is applied dcnl pca bool dcnl if true the true dimension of data is estimated before running dcnl the timefrequency transforms it reduces the computation times dcnl e g with a dataset that was maxfiltered true dim is 64 dcnl n jobs int dcnl number of jobs to run in parallel dcnl zero mean bool dcnl make sure the wavelets are zero mean dcnl prepared bool dcnl if true do not call prepare inverse operator dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more
compute source power spectrum density psd dcnl parameters dcnl raw instance of raw dcnl the raw data dcnl inverse operator instance of inverseoperator dcnl the inverse operator dcnl lambda2 float dcnl the regularization parameter dcnl method mne | dspm | sloreta dcnl use mininum norm dspm or sloreta dcnl tmin float | none dcnl the beginning of the time interval of interest in seconds if none dcnl start from the beginning of the file dcnl tmax float | none dcnl the end of the time interval of interest in seconds if none dcnl stop at the end of the file dcnl fmin float dcnl the lower frequency of interest dcnl fmax float dcnl the upper frequency of interest dcnl n fft int dcnl window size for the fft should be a power of 2 dcnl overlap float dcnl the overlap fraction between windows should be between 0 and 1 dcnl 0 means no overlap dcnl pick ori none | normal dcnl if normal rather than pooling the orientations by taking the norm dcnl only the radial component is kept this is only implemented dcnl when working with loose orientations dcnl label label dcnl restricts the source estimates to a given label dcnl nave int dcnl the number of averages used to scale the noise covariance matrix dcnl pca bool dcnl if true the true dimension of data is estimated before running dcnl the timefrequency transforms it reduces the computation times dcnl e g with a dataset that was maxfiltered true dim is 64 dcnl prepared bool dcnl if true do not call prepare inverse operator dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl stc sourceestimate | volsourceestimate dcnl the psd in db of each of the sources
generate compute source psd epochs
compute source power spectrum density psd from epochs dcnl this uses the multitaper method to compute the psd dcnl parameters dcnl epochs instance of epochs dcnl the raw data dcnl inverse operator instance of inverseoperator dcnl the inverse operator dcnl lambda2 float dcnl the regularization parameter dcnl method mne | dspm | sloreta dcnl use mininum norm dspm or sloreta dcnl fmin float dcnl the lower frequency of interest dcnl fmax float dcnl the upper frequency of interest dcnl pick ori none | normal dcnl if normal rather than pooling the orientations by taking the norm dcnl only the radial component is kept this is only implemented dcnl when working with loose orientations dcnl label label dcnl restricts the source estimates to a given label dcnl nave int dcnl the number of averages used to scale the noise covariance matrix dcnl pca bool dcnl if true the true dimension of data is estimated before running dcnl the timefrequency transforms it reduces the computation times dcnl e g with a dataset that was maxfiltered true dim is 64 dcnl inv split int or none dcnl split inverse operator into inv split parts in order to save memory dcnl bandwidth float dcnl the bandwidth of the multi taper windowing function in hz dcnl adaptive bool dcnl use adaptive weights to combine the tapered spectra into psd dcnl slow use n jobs 1 to speed up computation dcnl low bias bool dcnl only use tapers with more than 90 spectral concentration within dcnl bandwidth dcnl return generator bool dcnl return a generator object instead of a list this allows iterating dcnl over the stcs without having to keep them all in memory dcnl n jobs int dcnl number of parallel jobs to use only used if adaptive true dcnl prepared bool dcnl if true do not call prepare inverse operator dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl stcs list or generator object of sourceestimate | volsourceestimate dcnl the source space psds for each epoch
return data channel indices to be used knowing an inverse operator dcnl unlike pick channels this respects the order of ch names
read the inverse operator decomposition from a fif file dcnl parameters dcnl fname string dcnl the name of the fif file which ends with inv fif or inv fif gz dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl inv instance of inverseoperator dcnl the inverse operator dcnl see also dcnl write inverse operator make inverse operator
write an inverse operator to a fif file dcnl parameters dcnl fname string dcnl the name of the fif file which ends with inv fif or inv fif gz dcnl inv dict dcnl the inverse operator dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl see also dcnl read inverse operator
compute the three cartesian components of a vector or matrix together dcnl parameters dcnl vec 2d array of shape 3 n x p dcnl input x1 y1 z1 x n y n z n where x1 z n dcnl can be vectors dcnl returns dcnl comb array dcnl output vector sqrt x1^2+y1^2+z1^2 sqrt x n^2+y n^2+z n^2
check that channels in inverse operator are measurements
prepare an inverse operator for actually computing the inverse dcnl parameters dcnl orig dict dcnl the inverse operator structure read from a file dcnl nave int dcnl number of averages scales the noise covariance dcnl lambda2 float dcnl the regularization factor recommended to be 1 snr 2 dcnl method mne | dspm | sloreta dcnl use mininum norm dspm or sloreta dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl inv instance of inverseoperator dcnl prepared inverse operator
assemble the kernel
check the method
check pick ori
check for eeg ref
get subject id from inverse operator
apply inverse operator to evoked data dcnl parameters dcnl evoked evoked object dcnl evoked data dcnl inverse operator instance of inverseoperator dcnl inverse operator returned from mne read inverse operator dcnl prepare inverse operator or make inverse operator dcnl lambda2 float dcnl the regularization parameter dcnl method mne | dspm | sloreta dcnl use mininum norm dspm or sloreta dcnl pick ori none | normal dcnl if normal rather than pooling the orientations by taking the norm dcnl only the radial component is kept this is only implemented dcnl when working with loose orientations dcnl prepared bool dcnl if true do not call prepare inverse operator dcnl label label | none dcnl restricts the source estimates to a given label if none dcnl source estimates will be computed for the entire source space dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl stc sourceestimate | volsourceestimate dcnl the source estimates dcnl see also dcnl apply inverse raw apply inverse operator to raw object dcnl apply inverse epochs apply inverse operator to epochs object
apply inverse operator to raw data dcnl parameters dcnl raw raw object dcnl raw data dcnl inverse operator dict dcnl inverse operator returned from mne read inverse operator dcnl prepare inverse operator or make inverse operator dcnl lambda2 float dcnl the regularization parameter dcnl method mne | dspm | sloreta dcnl use mininum norm dspm or sloreta dcnl label label | none dcnl restricts the source estimates to a given label if none dcnl source estimates will be computed for the entire source space dcnl start int dcnl index of first time sample index not time is seconds dcnl stop int dcnl index of first time sample not to include index not time is seconds dcnl nave int dcnl number of averages used to regularize the solution dcnl set to 1 on raw data dcnl time func callable dcnl linear function applied to sensor space time series dcnl pick ori none | normal dcnl if normal rather than pooling the orientations by taking the norm dcnl only the radial component is kept this is only implemented dcnl when working with loose orientations dcnl buffer size int or none dcnl if not none the computation of the inverse and the combination of the dcnl current components is performed in segments of length buffer size dcnl samples while slightly slower this is useful for long datasets as it dcnl reduces the memory requirements by approx a factor of 3 assuming dcnl buffer size << data length dcnl note that this setting has no effect for fixedorientation inverse dcnl operators dcnl prepared bool dcnl if true do not call prepare inverse operator dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl stc sourceestimate | volsourceestimate dcnl the source estimates dcnl see also dcnl apply inverse epochs apply inverse operator to epochs object dcnl apply inverse apply inverse operator to evoked object
generate for apply inverse epochs
apply inverse operator to epochs dcnl parameters dcnl epochs epochs object dcnl single trial epochs dcnl inverse operator dict dcnl inverse operator returned from mne read inverse operator dcnl prepare inverse operator or make inverse operator dcnl lambda2 float dcnl the regularization parameter dcnl method mne | dspm | sloreta dcnl use mininum norm dspm or sloreta dcnl label label | none dcnl restricts the source estimates to a given label if none dcnl source estimates will be computed for the entire source space dcnl nave int dcnl number of averages used to regularize the solution dcnl set to 1 on single epoch by default dcnl pick ori none | normal dcnl if normal rather than pooling the orientations by taking the norm dcnl only the radial component is kept this is only implemented dcnl when working with loose orientations dcnl return generator bool dcnl return a generator object instead of a list this allows iterating dcnl over the stcs without having to keep them all in memory dcnl prepared bool dcnl if true do not call prepare inverse operator dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl stc list of sourceestimate or volsourceestimate dcnl the source estimates for all epochs dcnl see also dcnl apply inverse raw apply inverse operator to raw object dcnl apply inverse apply inverse operator to evoked object
prepare forward solution for inverse solvers
assemble inverse operator dcnl parameters dcnl info dict dcnl the measurement info to specify the channels to include dcnl bad channels in info bads are not used dcnl forward dict dcnl forward operator dcnl noise cov instance of covariance dcnl the noise covariance matrix dcnl loose none | float in 0 1 dcnl value that weights the source variances of the dipole components dcnl defining the tangent space of the cortical surfaces requires surface dcnl based free orientation forward solutions dcnl depth none | float in 0 1 dcnl depth weighting coefficients if none no depth weighting is performed dcnl fixed bool dcnl use fixed source orientations normal to the cortical mantle if true dcnl the loose parameter is ignored dcnl limit depth chs bool dcnl if true use only grad channels in depth weighting equivalent to mne dcnl c code if grad chanels aren t present only mag channels will be dcnl used if no mag then eeg if false use all channels dcnl rank none | int | dict dcnl specified rank of the noise covariance matrix if none the rank is dcnl detected automatically if int the rank is specified for the meg dcnl channels a dictionary with entries eeg and or meg can be used dcnl to specify the rank for each modality dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl returns dcnl inv instance of inverseoperator dcnl inverse operator dcnl notes dcnl for different sets of options loose depth fixed to work dcnl the forward operator must have been loaded using a certain configuration dcnl i e with force fixed and surf ori set appropriately for dcnl example given the desired inverse type with representative choices dcnl of loose 0 2 and depth 0 8 shown in the table in various dcnl places as these are the defaults for those parameters dcnl | inverse desired | forward parameters allowed | dcnl | | loose | depth | fixed | force fixed | surf ori | dcnl | | loose constraint | 0 2 | 0 8 | false | false | true | dcnl | | depth weighted | | | | | | dcnl | | loose constraint | 0 2 | none | false | false | true | dcnl | | free orientation | none | 0 8 | false | false | true | dcnl | | depth weighted | | | | | | dcnl | | free orientation | none | none | false | false | true | false | dcnl | | fixed constraint | none | 0 8 | true | false | true | dcnl | | depth weighted | | | | | | dcnl | | fixed constraint | none | none | true | true | true | dcnl also note that if the source space as stored in the forward solution dcnl has patch statistics computed these are used to improve the depth dcnl weighting thus slightly different results are to be expected with dcnl and without this information
compute the rank of a linear inverse operator mne dspm etc dcnl parameters dcnl inv dict dcnl the inverse operator dcnl returns dcnl rank int dcnl the rank of the inverse operator
estimate the snr as a function of time for evoked data dcnl parameters dcnl evoked instance of evoked dcnl evoked instance dcnl inv instance of inverseoperator dcnl the inverse operator dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl returns dcnl snr ndarray shape n times dcnl the snr estimated from the whitened data dcnl snr est ndarray shape n times dcnl the snr estimated using the mismatch between the unregularized dcnl solution and the regularized solution dcnl notes dcnl snr est is estimated by using different amounts of inverse dcnl regularization and checking the mismatch between predicted and dcnl measured whitened data dcnl in more detail given our whitened inverse obtained from svd dcnl math dcnl tilde m r^ frac 1 2 v gamma u^t dcnl the values in the diagonal matrix math gamma are expressed in terms dcnl of the chosen regularization math lambda approx frac 1 rm snr ^2 dcnl and singular values math lambda k as dcnl math dcnl gamma k frac 1 lambda k frac lambda k^2 lambda k^2 + lambda^2 dcnl we also know that our predicted data is given by dcnl math dcnl hat x t g hat j t c^ frac 1 2 u pi w t dcnl and thus our predicted whitened data is just dcnl math dcnl hat w t u pi w t dcnl where math pi is diagonal with entries entries dcnl math dcnl lambda k gamma k frac lambda k^2 lambda k^2 + lambda^2 dcnl if we use no regularization note that math pi is just the dcnl identity matrix here we test the squared magnitude of the difference dcnl between unregularized solution and regularized solutions choosing the dcnl biggest regularization that achieves a math chi^2 test significance dcnl of 0 001 dcnl versionadded 0 9 0
test snr calculation
test time freq with mne inverse computation
test source psd computation in label
test multitaper source psd computation in label from epochs
read meg forward
read eeg forward
get evoked data
compare two python objects
compare inverses
compare inverse io
test mne inverse warning without average eeg projection
test mne inverse computation precomputed and nonprecomputed
test mne inverse computation is immune to channel reorderings
test mne inverse application
test mne inverse computation fixed orientation
test mne inverse computation free orientation
test mne inverse computation with diagonal noise cov
test mne inverse operator with a specified noise cov rank
test mne inverse computation on volume source space
test io of inverse operator
test mne with precomputed inverse operator on raw
test mne with fixedorientation inverse operator on raw
test mne with precomputed inverse operator on epochs
test mne inverse computation given a mismatch of bad channels
test computation of psfs and ctfs for linear estimators
get a usable dict
pick out correct lead field components
compute pointspread functions psfs for linear estimators dcnl compute pointspread functions psf in labels for a combination of inverse dcnl operator and forward solution psfs are computed for test sources that are dcnl perpendicular to cortical surface dcnl parameters dcnl inverse operator instance of inverseoperator dcnl inverse operator dcnl forward dict dcnl forward solution note bad channels not included in forward dcnl solution will not be used in psf computation dcnl labels list of label dcnl labels for which psfs shall be computed dcnl method mne | dspm | sloreta dcnl inverse method for which psfs shall be computed for apply inverse dcnl lambda2 float dcnl the regularization parameter for apply inverse dcnl pick ori none | normal dcnl if normal rather than pooling the orientations by taking the norm dcnl only the radial component is kept this is only implemented dcnl when working with loose orientations for apply inverse dcnl mode mean | sum | svd | dcnl psfs can be computed for different summary measures with labels dcnl sum or mean sum or means of subleadfields for labels dcnl this corresponds to situations where labels can be assumed to be dcnl homogeneously activated dcnl svd svd components of subleadfields for labels dcnl this is better suited for situations where activation patterns are dcnl assumed to be more variable dcnl subleadfields are the parts of the forward solutions that belong to dcnl vertices within invidual labels dcnl n svd comp integer dcnl number of svd components for which psfs will be computed and output dcnl irrelevant for sum and mean explained variances within dcnl subleadfields are shown in screen output dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl stc psf sourceestimate dcnl the psfs for the specified labels dcnl if mode svd n svd comp components per label are created dcnl i e n svd comp successive time points in mne analyze dcnl the last sample is the summed psf across all labels dcnl scaling of psfs is arbitrary and may differ greatly among methods dcnl especially for mne compared to noisenormalized estimates dcnl evoked fwd evoked dcnl forward solutions corresponding to psfs in stc psf dcnl if mode svd n svd comp components per label are created dcnl i e n svd comp successive time points in mne analyze dcnl the last sample is the summed forward solution across all labels dcnl sum is taken across summary measures
get inverse matrix from an inverse operator dcnl currently works only for fixed loose orientation constraints dcnl for loose orientation constraint the ctfs are computed for the radial dcnl component pick ori normal dcnl parameters dcnl inverse operator instance of inverseoperator dcnl the inverse operator dcnl forward dict dcnl the forward operator dcnl method mne | dspm | sloreta dcnl inverse methods for apply inverse dcnl labels list of label | none dcnl labels for which ctfs shall be computed if none inverse matrix for dcnl all vertices will be returned dcnl lambda2 float dcnl the regularization parameter for apply inverse dcnl pick ori none | normal dcnl pick ori none | normal dcnl if normal rather than pooling the orientations by taking the norm dcnl only the radial component is kept this is only implemented dcnl when working with loose orientations for apply inverse dcnl determines whether whole inverse matrix g will have one or three rows dcnl per vertex this will also affect summary measures for labels dcnl mode mean | sum | svd dcnl ctfs can be computed for different summary measures with labels dcnl sum or mean sum or means of subinverse for labels dcnl this corresponds to situations where labels can be assumed to be dcnl homogeneously activated dcnl svd svd components of subinverse for labels dcnl this is better suited for situations where activation patterns are dcnl assumed to be more variable dcnl subinverse is the part of the inverse matrix that belongs to dcnl vertices within invidual labels dcnl n svd comp int dcnl number of svd components for which ctfs will be computed and output dcnl irrelevant for sum and mean explained variances within dcnl subinverses are shown in screen output dcnl returns dcnl invmat ndarray dcnl inverse matrix associated with inverse operator and specified dcnl parameters dcnl label singvals list of ndarray dcnl singular values of svd for subinverses dcnl provides information about how well labels are represented by chosen dcnl components explained variances within subinverses are shown in dcnl screen output
compute crosstalk functions ctfs for linear estimators dcnl compute crosstalk functions ctf in labels for a combination of inverse dcnl operator and forward solution ctfs are computed for test sources that are dcnl perpendicular to cortical surface dcnl parameters dcnl inverse operator instance of inverseoperator dcnl inverse operator dcnl forward dict dcnl forward solution note bad channels not included in forward dcnl solution will not be used in ctf computation dcnl labels list of label dcnl labels for which ctfs shall be computed dcnl method mne | dspm | sloreta dcnl inverse method for which ctfs shall be computed dcnl lambda2 float dcnl the regularization parameter dcnl signed bool dcnl if true ctfs will be written as signed source estimates if false dcnl absolute unsigned values will be written dcnl mode mean | sum | svd dcnl ctfs can be computed for different summary measures with labels dcnl sum or mean sum or means of subinverses for labels dcnl this corresponds to situations where labels can be assumed to be dcnl homogeneously activated dcnl svd svd components of subinverses for labels dcnl this is better suited for situations where activation patterns are dcnl assumed to be more variable subinverse is the part of the inverse dcnl matrix that belongs to vertices within invidual labels dcnl n svd comp int dcnl number of svd components for which ctfs will be computed and output dcnl irrelevant for sum and mean explained variances within dcnl subinverses are shown in screen output dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl stc ctf sourceestimate dcnl the ctfs for the specified labels dcnl if mode svd n svd comp components per label are created dcnl i e n svd comp successive time points in mne analyze dcnl the last sample is the summed ctf across all labels
convert a list of spatiotemporal dipoles into a sourceestimate dcnl parameters dcnl dipoles dipole | list of instances of dipole dcnl the dipoles to convert dcnl src instance of sourcespaces dcnl the source space used to generate the forward operator dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl stc sourceestimate dcnl the source estimate
mixednorm estimate mxne and iterative reweighted mxne irmxne dcnl compute l1 l2 mixednorm solution 1 or l0 5 l2 2 mixednorm dcnl solution on evoked data dcnl parameters dcnl evoked instance of evoked or list of instances of evoked dcnl evoked data to invert dcnl forward dict dcnl forward operator dcnl noise cov instance of covariance dcnl noise covariance to compute whitener dcnl alpha float dcnl regularization parameter dcnl loose float in 0 1 dcnl value that weights the source variances of the dipole components dcnl that are parallel tangential to the cortical surface if loose dcnl is 0 or none then the solution is computed with fixed orientation dcnl if loose is 1 it corresponds to free orientations dcnl depth none | float in 0 1 dcnl depth weighting coefficients if none no depth weighting is performed dcnl maxit int dcnl maximum number of iterations dcnl tol float dcnl tolerance parameter dcnl active set size int | none dcnl size of active set increment if none no active set strategy is used dcnl pca bool dcnl if true the rank of the data is reduced to true dimension dcnl debias bool dcnl remove coefficient amplitude bias due to l1 penalty dcnl time pca bool or int dcnl if true the rank of the concatenated epochs is reduced to dcnl its true dimension if is int the rank is limited to this value dcnl weights none | array | sourceestimate dcnl weight for penalty in mixed norm can be none a dcnl 1d array with shape n sources or a sourceestimate e g obtained dcnl with wmne dspm or fmri dcnl weights min float dcnl do not consider in the estimation sources for which weights dcnl is less than weights min dcnl solver prox | cd | bcd | auto dcnl the algorithm to use for the optimization prox stands for dcnl proximal interations using the fista algorithm cd uses dcnl coordinate descent and bcd applies block coordinate descent dcnl cd is only available for fixed orientation dcnl n mxne iter int dcnl the number of mxne iterations if 1 iterative reweighting dcnl is applied dcnl return residual bool dcnl if true the residual is returned as an evoked instance dcnl return as dipoles bool dcnl if true the sources are returned as a list of dipole instances dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl stc sourceestimate | list of sourceestimate dcnl source time courses for each evoked data passed as input dcnl residual instance of evoked dcnl the residual a k a data not explained by the sources dcnl only returned if return residual is true dcnl see also dcnl tf mixed norm dcnl references dcnl 1 a gramfort m kowalski m hamalainen dcnl mixednorm estimates for the m eeg inverse problem using accelerated dcnl gradient methods physics in medicine and biology 2012 dcnl http dx doi org 10 1088 00319155 57 7 1937 dcnl 2 d strohmeier y bekhti j haueisen a gramfort dcnl the iterative reweighted mixednorm estimate for spatiotemporal dcnl meg eeg source reconstruction ieee transactions of medical imaging dcnl volume 35 10 pp 22182228 2016
window evoked size in seconds
timefrequency mixednorm estimate tfmxne dcnl compute l1 l2 + l1 mixednorm solution on timefrequency dcnl dictionary works with evoked data 1 2 dcnl parameters dcnl evoked instance of evoked dcnl evoked data to invert dcnl forward dict dcnl forward operator dcnl noise cov instance of covariance dcnl noise covariance to compute whitener dcnl alpha space float in 0 100 dcnl regularization parameter for spatial sparsity if larger than 100 dcnl then no source will be active dcnl alpha time float in 0 100 dcnl regularization parameter for temporal sparsity it set to 0 dcnl no temporal regularization is applied it this case tfmxne is dcnl equivalent to mxne with l21 norm dcnl loose float in 0 1 dcnl value that weights the source variances of the dipole components dcnl that are parallel tangential to the cortical surface if loose dcnl is 0 or none then the solution is computed with fixed orientation dcnl if loose is 1 it corresponds to free orientations dcnl depth none | float in 0 1 dcnl depth weighting coefficients if none no depth weighting is performed dcnl maxit int dcnl maximum number of iterations dcnl tol float dcnl tolerance parameter dcnl weights none | array | sourceestimate dcnl weight for penalty in mixed norm can be none or dcnl 1d array of length n sources or a sourceestimate e g obtained dcnl with wmne or dspm or fmri dcnl weights min float dcnl do not consider in the estimation sources for which weights dcnl is less than weights min dcnl pca bool dcnl if true the rank of the data is reduced to true dimension dcnl debias bool dcnl remove coefficient amplitude bias due to l1 penalty dcnl wsize int dcnl length of the stft window in samples must be a multiple of 4 dcnl tstep int dcnl step between successive windows in samples must be a multiple of 2 dcnl a divider of wsize and smaller than wsize 2 default wsize 2 dcnl window float or float float dcnl length of time window used to take care of edge artifacts in seconds dcnl it can be one float or float if the values are different for left dcnl and right window length dcnl return residual bool dcnl if true the residual is returned as an evoked instance dcnl return as dipoles bool dcnl if true the sources are returned as a list of dipole instances dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl stc instance of sourceestimate dcnl source time courses dcnl residual instance of evoked dcnl the residual a k a data not explained by the sources dcnl only returned if return residual is true dcnl see also dcnl mixed norm dcnl references dcnl 1 a gramfort d strohmeier j haueisen m hamalainen m kowalski dcnl timefrequency mixednorm estimates sparse m eeg imaging with dcnl nonstationary source activations dcnl neuroimage volume 70 pp 410422 15 april 2013 dcnl doi 10 1016 j neuroimage 2012 12 051 dcnl 2 a gramfort d strohmeier j haueisen m hamalainen m kowalski dcnl functional brain imaging with m eeg using structured sparsity in dcnl timefrequency dictionaries dcnl proceedings information processing in medical imaging dcnl lecture notes in computer science volume 6801 2011 pp 600611 2011 dcnl doi 10 1007 9783642220920 49
helper to check correctness
test tf mxne inverse computation
test source amplitude debiasing
test convergence of mxne solver
test convergence of tfmxne solver
test equivalence of tfmxne with alpha time 0 and mxne
test convergence of irmxne solver
helper to check correctness
helper to check correctness
test gamma map inverse
compute squared l2 norms of groups inplace
l2inf norm
l21 norm
proximity operator for l21 norm dcnl l2 over columns and l1 over rows groups contain n orient rows dcnl it can eventually take into account the negative frequencies dcnl when a complex value is passed and is stft true dcnl parameters dcnl y array shape n sources n coefs dcnl the input data dcnl alpha float dcnl the regularization parameter dcnl n orient int dcnl number of dipoles per locations typically 1 or 3 dcnl shape none | tuple dcnl shape of tf coefficients matrix dcnl is stft bool dcnl if true y contains tf coefficients dcnl returns dcnl y array shape n sources n coefs dcnl the output data dcnl active set array of bool shape n sources dcnl mask of active sources dcnl example dcnl y np tile np array 0 4 3 0 0 dtype np float 2 1 dcnl y np r y np zeros like y dcnl print y dcnl 0 4 3 0 0 dcnl 0 4 3 0 0 dcnl 0 0 0 0 0 dcnl 0 0 0 0 0 dcnl yp active set prox l21 y 2 2 dcnl print yp dcnl 0 2 86862915 2 15147186 0 0 dcnl 0 2 86862915 2 15147186 0 0 dcnl print active set dcnl true true false false
proximity operator for l1 norm with multiple orientation support dcnl please note that this function computes a softthresholding if dcnl n orient 1 and a block softthresholding l2 over orientation and dcnl l1 over position space + time if n orient 3 see also 1 dcnl parameters dcnl y array shape n sources n coefs dcnl the input data dcnl alpha float dcnl the regularization parameter dcnl n orient int dcnl number of dipoles per locations typically 1 or 3 dcnl returns dcnl y array shape n sources n coefs dcnl the output data dcnl active set array of bool shape n sources dcnl mask of active sources dcnl references dcnl 1 a gramfort d strohmeier j haueisen m hamalainen m kowalski dcnl timefrequency mixednorm estimates sparse m eeg imaging with dcnl nonstationary source activations dcnl neuroimage volume 70 pp 410422 15 april 2013 dcnl doi 10 1016 j neuroimage 2012 12 051 dcnl example dcnl y np tile np array 1 2 3 2 0 dtype np float 2 1 dcnl y np r y np zeros like y dcnl print y dcnl 1 2 3 2 0 dcnl 1 2 3 2 0 dcnl 0 0 0 0 0 dcnl 0 0 0 0 0 dcnl yp active set prox l1 y 2 2 dcnl print yp dcnl 0 0 58578644 1 58578644 0 58578644 0 dcnl 0 0 58578644 1 58578644 0 58578644 0 dcnl print active set dcnl true true false false
duality gap for the mixed norm inverse problem dcnl parameters dcnl m array shape n sensors n times dcnl the data dcnl g array shape n sensors n active dcnl the gain matrix a k a lead field dcnl x array shape n active n times dcnl sources dcnl active set array of bool shape n sources dcnl mask of active sources dcnl alpha float dcnl the regularization parameter dcnl n orient int dcnl number of dipoles per locations typically 1 or 3 dcnl returns dcnl gap float dcnl dual gap dcnl p obj float dcnl primal objective dcnl d obj float dcnl dual objective gap p obj d obj dcnl r array shape n sensors n times dcnl current residual m g x dcnl references dcnl 1 a gramfort m kowalski m hamalainen dcnl mixednorm estimates for the m eeg inverse problem using accelerated dcnl gradient methods physics in medicine and biology 2012 dcnl http dx doi org 10 1088 00319155 57 7 1937
solve l21 inverse problem with proximal iterations and fista
solve l21 inverse problem with coordinate descent
solve l21 inverse problem with block coordinate descent
solve l1 l2 mixednorm inverse problem with active set strategy dcnl parameters dcnl m array shape n sensors n times dcnl the data dcnl g array shape n sensors n dipoles dcnl the gain matrix a k a lead field dcnl alpha float dcnl the regularization parameter it should be between 0 and 100 dcnl a value of 100 will lead to an empty active set no active source dcnl maxit int dcnl the number of iterations dcnl tol float dcnl tolerance on dual gap for convergence checking dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl active set size int dcnl size of active set increase at each iteration dcnl debias bool dcnl debias source estimates dcnl n orient int dcnl the number of orientation 1 fixed or 3 free or loose dcnl solver prox | cd | bcd | auto dcnl the algorithm to use for the optimization dcnl return gap bool dcnl return final duality gap dcnl returns dcnl x array shape n active n times dcnl the source estimates dcnl active set array dcnl the mask of active sources dcnl e list dcnl the value of the objective function over the iterations dcnl gap float dcnl final duality gap returned only if return gap is true dcnl references dcnl 1 a gramfort m kowalski m hamalainen dcnl mixednorm estimates for the m eeg inverse problem using accelerated dcnl gradient methods physics in medicine and biology 2012 dcnl http dx doi org 10 1088 00319155 57 7 1937 dcnl 2 d strohmeier y bekhti j haueisen a gramfort dcnl the iterative reweighted mixednorm estimate for spatiotemporal dcnl meg eeg source reconstruction ieee transactions of medical imaging dcnl volume 35 10 pp 22182228 15 april 2013
solve l0 5 l2 mixednorm inverse problem with active set strategy dcnl parameters dcnl m array shape n sensors n times dcnl the data dcnl g array shape n sensors n dipoles dcnl the gain matrix a k a lead field dcnl alpha float dcnl the regularization parameter it should be between 0 and 100 dcnl a value of 100 will lead to an empty active set no active source dcnl n mxne iter int dcnl the number of mxne iterations if 1 iterative reweighting dcnl is applied dcnl maxit int dcnl the number of iterations dcnl tol float dcnl tolerance on dual gap for convergence checking dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl active set size int dcnl size of active set increase at each iteration dcnl debias bool dcnl debias source estimates dcnl n orient int dcnl the number of orientation 1 fixed or 3 free or loose dcnl solver prox | cd | bcd | auto dcnl the algorithm to use for the optimization dcnl returns dcnl x array shape n active n times dcnl the source estimates dcnl active set array dcnl the mask of active sources dcnl e list dcnl the value of the objective function over the iterations dcnl references dcnl 1 d strohmeier y bekhti j haueisen a gramfort dcnl the iterative reweighted mixednorm estimate for spatiotemporal dcnl meg eeg source reconstruction ieee transactions of medical imaging dcnl volume 35 10 pp 22182228 2016
compute lipschitz constant for fista dcnl it uses a power iteration method
compute np max np abs aia possible with empty a
compute np max np abs a possible with empty a
l21 norm for tf
l1 norm for tf
duality gap for the timefrequency mixed norm inverse problem dcnl parameters dcnl m array shape n sensors n times dcnl the data dcnl g array shape n sensors n sources dcnl gain matrix a k a lead field dcnl z array shape n active n coefs dcnl sources in tf domain dcnl active set array of bool shape n sources dcnl mask of active sources dcnl alpha space float dcnl the spatial regularization parameter dcnl alpha time float dcnl the temporal regularization parameter the higher it is the smoother dcnl will be the estimated time series dcnl phi instance of phi dcnl the tf operator dcnl phit instance of phit dcnl the transpose of the tf operator dcnl shape tuple dcnl shape of tf coefficients matrix dcnl n orient int dcnl number of dipoles per locations typically 1 or 3 dcnl highest d obj float dcnl the highest value of the dual objective so far dcnl returns dcnl gap float dcnl dual gap dcnl p obj float dcnl primal objective dcnl d obj float dcnl dual objective gap p obj d obj dcnl r array shape n sensors n times dcnl current residual m g x dcnl references dcnl 1 a gramfort m kowalski m hamalainen dcnl mixednorm estimates for the m eeg inverse problem using accelerated dcnl gradient methods physics in medicine and biology 2012 dcnl http dx doi org 10 1088 00319155 57 7 1937 dcnl 2 j wang j ye dcnl twolayer feature reduction for sparsegroup lasso via decomposition of dcnl convex sets advances in neural information processing systems nips dcnl vol 27 pp 21322140 2014
solve tf l21+l1 inverse solver with bcd and active set approach dcnl parameters dcnl m array shape n sensors n times dcnl the data dcnl g array shape n sensors n dipoles dcnl the gain matrix a k a lead field dcnl alpha space float dcnl the spatial regularization parameter dcnl alpha time float dcnl the temporal regularization parameter the higher it is the smoother dcnl will be the estimated time series dcnl wsize int dcnl length of the stft window in samples must be a multiple of 4 dcnl tstep int dcnl step between successive windows in samples must be a multiple of 2 dcnl a divider of wsize and smaller than wsize 2 default wsize 2 dcnl n orient int dcnl the number of orientation 1 fixed or 3 free or loose dcnl maxit int dcnl the number of iterations dcnl tol float dcnl if absolute difference between estimates at 2 successive iterations dcnl is lower than tol the convergence is reached dcnl log objective bool dcnl if true the value of the minimized objective function is computed dcnl and stored at every 10th iteration dcnl debias bool dcnl debias source estimates dcnl return gap bool dcnl return final duality gap dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl x array shape n active n times dcnl the source estimates dcnl active set array dcnl the mask of active sources dcnl e list dcnl the value of the objective function at each iteration if log objective dcnl is false it will be empty dcnl gap float dcnl final duality gap returned only if return gap is true dcnl references dcnl 1 a gramfort d strohmeier j haueisen m hamalainen m kowalski dcnl timefrequency mixednorm estimates sparse m eeg imaging with dcnl nonstationary source activations dcnl neuroimage volume 70 pp 410422 15 april 2013 dcnl doi 10 1016 j neuroimage 2012 12 051 dcnl 2 a gramfort d strohmeier j haueisen m hamalainen m kowalski dcnl functional brain imaging with m eeg using structured sparsity in dcnl timefrequency dictionaries dcnl proceedings information processing in medical imaging dcnl lecture notes in computer science volume 6801 2011 pp 600611 2011 dcnl doi 10 1007 9783642220920 49
find the largest singular value for the matrix kron c t a dcnl it uses power iterations dcnl parameters dcnl a array dcnl an array dcnl c array dcnl an array dcnl max iter int dcnl maximum number of iterations dcnl random state int | randomstate | none dcnl random state for random number generation dcnl returns dcnl l float dcnl largest singular value dcnl notes dcnl http en wikipedia org wiki power iteration
compute scaling to correct amplitude bias dcnl it solves the following optimization problem using fista dcnl min 1 2 || m gdx ||fro ^2 dcnl s t d 1 and d is a diagonal matrix dcnl reference for the fista algorithm dcnl amir beck and marc teboulle dcnl a fast iterative shrinkagethresholding algorithm for linear inverse dcnl problems siam j imaging sci 2 1 183202 20 pages dcnl http epubs siam org doi abs 10 1137 080716542 dcnl parameters dcnl m array dcnl measurement data dcnl g array dcnl leadfield matrix dcnl x array dcnl reconstructed time courses with amplitude bias dcnl max iter int dcnl maximum number of iterations dcnl tol float dcnl the tolerance on convergence dcnl n orient int dcnl the number of orientations 1 for fixed and 3 otherwise dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl d array dcnl debiasing weights
hierarchical bayes gammamap dcnl parameters dcnl m array shape n sensors n times dcnl observation dcnl g array shape n sensors n sources dcnl forward operator dcnl alpha float dcnl regularization parameter noise variance dcnl maxit int dcnl maximum number of iterations dcnl tol float dcnl tolerance parameter for convergence dcnl group size int dcnl number of consecutive sources which use the same gamma dcnl update mode int dcnl update mode 1 mackay update default 3 modified mackay update dcnl gammas array shape n sources dcnl initial values for posterior variances gammas if none a dcnl variance of 1 0 is used dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl x array shape n active n times dcnl estimated source time courses dcnl active set array shape n active dcnl indices of active sources
hierarchical bayes gammamap sparse source localization method dcnl models each source time course using a zeromean gaussian prior with an dcnl unknown variance gamma parameter during estimation most gammas are dcnl driven to zero resulting in a sparse source estimate as in dcnl 1 and 2 dcnl for fixedorientation forward operators a separate gamma is used for each dcnl source time course while for freeorientation forward operators the same dcnl gamma is used for the three source time courses at each source space point dcnl separate gammas can be used in this case by using xyz same gamma false dcnl parameters dcnl evoked instance of evoked dcnl evoked data to invert dcnl forward dict dcnl forward operator dcnl noise cov instance of covariance dcnl noise covariance to compute whitener dcnl alpha float dcnl regularization parameter noise variance dcnl loose float in 0 1 dcnl value that weights the source variances of the dipole components dcnl that are parallel tangential to the cortical surface if loose dcnl is 0 or none then the solution is computed with fixed orientation dcnl if loose is 1 it corresponds to free orientations dcnl depth none | float in 0 1 dcnl depth weighting coefficients if none no depth weighting is performed dcnl xyz same gamma bool dcnl use same gamma for xyz current components at each source space point dcnl recommended for freeorientation forward solutions dcnl maxit int dcnl maximum number of iterations dcnl tol float dcnl tolerance parameter for convergence dcnl update mode int dcnl update mode 1 mackay update default 2 modified mackay update dcnl gammas array shape n sources dcnl initial values for posterior variances gammas if none a dcnl variance of 1 0 is used dcnl pca bool dcnl if true the rank of the data is reduced to the true dimension dcnl return residual bool dcnl if true the residual is returned as an evoked instance dcnl return as dipoles bool dcnl if true the sources are returned as a list of dipole instances dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl stc instance of sourceestimate dcnl source time courses dcnl residual instance of evoked dcnl the residual a k a data not explained by the sources dcnl only returned if return residual is true dcnl references dcnl 1 wipf et al analysis of empirical bayesian methods for dcnl neuroelectromagnetic source localization advances in neural dcnl information process systems 2007 dcnl 2 d wipf s nagarajan dcnl a unified bayesian framework for meg eeg source imaging dcnl neuroimage volume 44 number 3 pp 947966 feb 2009 dcnl doi 10 1016 j neuroimage 2008 02 059
convert string or int coord frame into int
map integers to humanreadable verbose names
apply a transform matrix to an array of points dcnl parameters dcnl trans array shape 4 4 | instance of transform dcnl transform matrix dcnl pts array shape 3 | n 3 dcnl array with coordinates for one or n points dcnl move bool dcnl if true default apply translation dcnl returns dcnl transformed pts shape 3 | n 3 dcnl transformed point s
create an array with a 4 dimensional rotation matrix dcnl parameters dcnl x y z scalar dcnl rotation around the origin in rad dcnl returns dcnl r array shape 4 4 dcnl the rotation matrix
create an array with a 3 dimensional rotation matrix dcnl parameters dcnl x y z scalar dcnl rotation around the origin in rad dcnl returns dcnl r array shape 3 3 dcnl the rotation matrix
compute a rotation matrix to align 0 0 1 with supplied target z axis dcnl parameters dcnl target z axis array shape 1 3 dcnl z axis computed matrix r will map 0 0 1 to target z axis dcnl returns dcnl r array shape 3 3 dcnl the rotation matrix
find rotation angles from a transformation matrix dcnl parameters dcnl m array shape 3 3 dcnl rotation matrix only the top left 3 x 3 partition is accessed dcnl returns dcnl x y z float dcnl rotation around x y and z axes
create an array with a scaling matrix dcnl parameters dcnl x y z scalar dcnl scaling factors dcnl returns dcnl s array shape 4 4 dcnl the scaling matrix
create an array with a translation matrix dcnl parameters dcnl x y z scalar dcnl translation parameters dcnl returns dcnl m array shape 4 4 dcnl the translation matrix
ensure we have the proper transform
get mri head t from mri to head from mri filename
combine two transforms dcnl parameters dcnl t first dict dcnl first transform dcnl t second dict dcnl second transform dcnl fro int dcnl from coordinate frame dcnl to int dcnl to coordinate frame dcnl returns dcnl trans dict dcnl combined transformation
read a trans fif file dcnl parameters dcnl fname str dcnl the name of the file dcnl return all bool dcnl if true return all transformations in the file dcnl false default will only return the first dcnl versionadded 0 15 dcnl returns dcnl trans dict | list of dict dcnl the transformation dictionary from the fif file dcnl see also dcnl write trans dcnl mne transforms transform
write a trans fif file dcnl parameters dcnl fname str dcnl the name of the file which should end in trans fif dcnl trans dict dcnl trans file data as returned by read trans dcnl see also dcnl read trans
invert a transformation between coordinate systems dcnl parameters dcnl trans dict dcnl transform to invert dcnl returns dcnl inv trans dict dcnl inverse transform
transform surface to the desired coordinate system dcnl parameters dcnl surf dict dcnl surface dcnl dest meg | mri | head | int dcnl destination coordinate system can be an integer for using dcnl fiff types dcnl trans dict dcnl transformation dcnl copy bool dcnl if false default operate inplace dcnl returns dcnl res dict dcnl transformed source space
construct a transformation matrix to the mne head coordinate system dcnl construct a transformation matrix from an arbitrary ras coordinate system dcnl to the mne head coordinate system in which the x axis passes through the dcnl two preauricular points and the y axis passes through the nasion and is dcnl normal to the x axis see mne manual pg 97 dcnl parameters dcnl nasion array like shape 3 dcnl nasion point coordinate dcnl lpa array like shape 3 dcnl left periauricular point coordinate dcnl rpa array like shape 3 dcnl right periauricular point coordinate dcnl returns dcnl trans numpy array shape 4 4 dcnl transformation matrix to mne head space
convert cartesian coordinates to spherical coordinates dcnl parameters dcnl cart pts ndarray shape n points 3 dcnl array containing points in cartesian coordinates x y z dcnl returns dcnl sph pts ndarray shape n points 3 dcnl array containing points in spherical coordinates rad azimuth polar
convert spherical coordinates to cartesion coordinates
compute the number of multipolar moments spherical harmonics dcnl equivalent to 1 eq 32 dcnl note this count excludes degree 0 for order 0 dcnl parameters dcnl order arraylike dcnl expansion orders often int order ext order dcnl returns dcnl m ndarray dcnl number of moments due to each order
convert spherical partial derivatives to cartesian coords dcnl note because we are dealing with partial derivatives this calculation is dcnl not a static transformation the transformation matrix itself is dependent dcnl on azimuth and polar coord dcnl see the spherical coordinate sytem section here dcnl wikipedia org wiki vector fields in cylindrical and spherical coordinates dcnl parameters dcnl az ndarray shape n points dcnl array containing spherical coordinates points azimuth dcnl pol ndarray shape n points dcnl array containing spherical coordinates points polar dcnl sph grads ndarray shape n points 3 dcnl array containing partial derivatives at each spherical coordinate dcnl radius azimuth polar dcnl returns dcnl cart grads ndarray shape n points 3 dcnl array containing partial derivatives in cartesian coordinates x y z
get the index into s in or s out given a degree and order
get the negative spherical harmonic from a positive one
convert complex to real basis functions dcnl parameters dcnl sh arraylike dcnl spherical harmonics must be from order 0 even if negative orders dcnl are used dcnl order int dcnl order usually m of multipolar moment dcnl returns dcnl real sh arraylike dcnl the real version of the spherical harmonics dcnl notes dcnl this does not include the condonshortely phase
convert real spherical harmonic pair to complex dcnl parameters dcnl shs ndarray shape 2 dcnl the real spherical harmonics at order order dcnl order int dcnl order usually m of multipolar moment dcnl returns dcnl sh arraylike shape dcnl the complex version of the spherical harmonics
compute complex spherical harmonics of spherical coordinates
thinplate function r 2 np log r
transform polar coordinates to cartesian
convert 2d topo coordinates to spherical coordinates
convert a set of quaternions to rotations dcnl parameters dcnl quat array shape 3 dcnl q1 q2 and q3 x y z parameters of a unit quaternion dcnl returns dcnl rot array shape 3 3 dcnl the corresponding rotation matrices dcnl see also dcnl rot to quat
convert a rotation matrix to quaternions
convert a set of rotations to quaternions dcnl parameters dcnl rot array shape 3 3 dcnl the rotation matrices to convert dcnl returns dcnl quat array shape 3 dcnl the q1 q2 and q3 x y z parameters of the corresponding dcnl unit quaternions dcnl see also dcnl quat to rot
compute the ang between two quaternions w 3element representations
compute the skewsymmetric cross product of a vector
find the rotation matrix that maps unit vector a to b
test if number is a power of 2 dcnl parameters dcnl num int dcnl number dcnl returns dcnl b bool dcnl true if is power of 2 dcnl examples dcnl is power2 2 3 dcnl true dcnl is power2 5 dcnl false
find the next fast size of input data to fft for zeropadding etc dcnl scipy s fftpack has efficient functions for radix 2 3 4 5 so this dcnl returns the next composite of the prime factors 2 3 and 5 which is dcnl greater than or equal to target these are also known as 5smooth dcnl numbers regular numbers or hamming numbers dcnl parameters dcnl target int dcnl length to start searching from must be a positive integer dcnl returns dcnl out int dcnl the first 5smooth number greater than or equal to target dcnl notes dcnl copied from scipy with minor modifications
filter the signal x using h with overlapadd ffts dcnl parameters dcnl x array shape n signals n times dcnl signals to filter dcnl h 1d array dcnl filter impulse response fir filter coefficients must be odd length dcnl if phase linear dcnl n fft int dcnl length of the fft if none the best size is determined automatically dcnl phase str dcnl if zero the delay for the filter is compensated and it must be dcnl an oddlength symmetric filter if linear the response is dcnl uncompensated if zerodouble the filter is applied in the dcnl forward and reverse directions if minimum a minimumphase dcnl filter will be used dcnl picks arraylike of int | none dcnl indices of channels to filter if none all channels will be dcnl filtered only supported for 2d n channels n times and 3d dcnl n epochs n channels n times data dcnl n jobs int | str dcnl number of jobs to run in parallel can be cuda if scikits cuda dcnl is installed properly and cuda is initialized dcnl copy bool dcnl if true a copy of x filtered is returned otherwise it operates dcnl on x in place dcnl returns dcnl xf array shape n signals n times dcnl x filtered
do onedimensional overlapadd fft fir filtering
compute minimum attenuation at stop frequency
set up array as 2d for filtering ease
construct a fir filter using firwin
filter signal using gain control points in the frequency domain dcnl the filter impulse response is constructed from a hann window window dcnl used in firwin2 function to avoid ripples in the frequency response dcnl windowing is a smoothing in frequency domain dcnl if x is multidimensional this operates along the last dimension dcnl parameters dcnl fs float dcnl sampling rate in hz dcnl freq 1d array dcnl frequency sampling points in hz dcnl gain 1d array dcnl filter gain at frequency sampling points dcnl must be all 0 and 1 for fir design firwin dcnl filter length int dcnl length of the filter to use must be odd length if phase zero dcnl phase str dcnl if zero the delay for the filter is compensated and it must be dcnl an oddlength symmetric filter if linear the response is dcnl uncompensated if zerodouble the filter is applied in the dcnl forward and reverse directions if minimum a minimumphase dcnl filter will be used dcnl fir window str dcnl the window to use in fir design can be hamming default dcnl hann or blackman dcnl fir design str dcnl can be firwin2 or firwin dcnl returns dcnl xf array dcnl x filtered
check for filter stability
call filtfilt
estimate filter ringing dcnl parameters dcnl system tuple | ndarray dcnl a tuple of b a or ndarray of secondorder sections coefficients dcnl max try int dcnl approximate maximum number of samples to try dcnl this will be changed to a multple of 1000 dcnl returns dcnl n int dcnl the approximate ringing
use iir parameters to get filtering coefficients dcnl this function works like a wrapper for iirdesign and iirfilter in dcnl scipy signal to make filter coefficients for iir filtering it also dcnl estimates the number of padding samples based on the filter ringing dcnl it creates a new iir params dict or updates the one passed to the dcnl function with the filter coefficients b and a and an estimate dcnl of the padding necessary padlen so iir filtering can be performed dcnl note as of 0 14 secondorder sections will be used in filter dcnl design by default replacing output ba by dcnl output sos to help ensure filter stability and dcnl reduce numerical error secondorder sections filtering dcnl requires scipy 16 0 dcnl parameters dcnl iir params dict dcnl dictionary of parameters to use for iir filtering dcnl if iir params sos exists it will be used as dcnl secondorder sections to perform iir filtering dcnl versionadded 0 13 dcnl otherwise if iir params b and iir params a dcnl exist these will be used as coefficients to perform iir dcnl filtering dcnl otherwise if iir params order and dcnl iir params ftype exist these will be used with dcnl scipy signal iirfilter to make a filter dcnl otherwise if iir params gpass and dcnl iir params gstop exist these will be used with dcnl scipy signal iirdesign to design a filter dcnl iir params padlen defines the number of samples to pad dcnl and an estimate will be calculated if it is not given dcnl see notes for more details dcnl iir params output defines the system output kind when dcnl designing filters either sos or ba for 0 13 the dcnl default is ba but will change to sos in 0 14 dcnl f pass float or list of float dcnl frequency for the passband lowpass and highpass filters should dcnl be a float bandpass should be a 2element list of float dcnl f stop float or list of float dcnl stopband frequency same size as f pass not used if order is dcnl specified in iir params dcnl sfreq float | none dcnl the sample rate dcnl btype str dcnl type of filter should be lowpass highpass or bandpass dcnl or analogous string representations known to dcnl func scipy signal iirfilter dcnl return copy bool dcnl if false the sos b a and padlen entries in dcnl iir params will be set inplace if they weren t already dcnl otherwise a new iir params instance will be created and dcnl returned with these entries dcnl returns dcnl iir params dict dcnl updated iir params dict with the entries set only if they didn t dcnl exist before for sos or b a and padlen for dcnl iir filtering dcnl see also dcnl mne filter filter data dcnl mne io raw filter dcnl notes dcnl this function triages calls to func scipy signal iirfilter and dcnl func scipy signal iirdesign based on the input arguments see dcnl linked functions for more details dcnl examples dcnl iir params can have several forms consider constructing a lowpass dcnl filter at 40 hz with 1000 hz sampling rate dcnl in the most basic 2parameter form of iir params the order of the dcnl filter n and the type of filtering ftype are specified to get dcnl coefficients for a 4thorder butterworth filter this would be dcnl iir params dict order 4 ftype butter output sos doctest +skip dcnl iir params construct iir filter iir params 40 none 1000 low return copy false doctest +skip dcnl print 2 len iir params sos iir params padlen doctest +skip dcnl 4 82 dcnl filters can also be constructed using filter design methods to get a dcnl 40 hz chebyshev type 1 lowpass with specific gain characteristics in the dcnl pass and stop bands assuming the desired stop band is at 45 hz this dcnl would be a filter with much longer ringing dcnl iir params dict ftype cheby1 gpass 3 gstop 20 output sos doctest +skip dcnl iir params construct iir filter iir params 40 50 1000 low doctest +skip dcnl print 2 len iir params sos iir params padlen doctest +skip dcnl 6 439 dcnl padding and or filter coefficients can also be manually specified for dcnl a 10sample moving window with no padding during filtering for example dcnl one can just do dcnl iir params dict b np ones 10 a 1 0 padlen 0 dcnl iir params construct iir filter iir params return copy false dcnl print iir params b iir params a iir params padlen dcnl array 1 1 1 1 1 1 1 1 1 1 1 0 0 dcnl for more information see the tutorials ref tut background filtering dcnl and ref tut artifacts filter
parse method arguments
filter a subset of channels dcnl applies a zerophase lowpass highpass bandpass or bandstop dcnl filter to the channels selected by picks dcnl l freq and h freq are the frequencies below which and above dcnl which respectively to filter out of the data thus the uses are dcnl l freq < h freq bandpass filter dcnl l freq h freq bandstop filter dcnl l freq is not none and h freq is none highpass filter dcnl l freq is none and h freq is not none lowpass filter dcnl note if n jobs 1 more memory is required as dcnl len picks n times additional time points need to dcnl be temporaily stored in memory dcnl parameters dcnl data ndarray shape n times dcnl the data to filter dcnl sfreq float dcnl the sample frequency in hz dcnl l freq float | none dcnl low cutoff frequency in hz if none the data are only lowpassed dcnl h freq float | none dcnl high cutoff frequency in hz if none the data are only dcnl highpassed dcnl picks arraylike of int | none dcnl indices of channels to filter if none all channels will be dcnl filtered currently this is only supported for dcnl 2d n channels n times and 3d n epochs n channels n times dcnl arrays dcnl filter length str | int dcnl length of the fir filter to use if applicable dcnl auto default the filter length is chosen based dcnl on the size of the transition regions 6 6 times the reciprocal dcnl of the shortest transition band for fir window hamming dcnl and fir design firwin2 and half that for firwin dcnl str a humanreadable time in dcnl units of s or ms e g 10s or 5500ms will be dcnl converted to that number of samples if phase zero or dcnl the shortest poweroftwo length at least that duration for dcnl phase zerodouble dcnl int specified length in samples for fir design firwin dcnl this should not be used dcnl l trans bandwidth float | str dcnl width of the transition band at the low cutoff frequency in hz dcnl high pass or cutoff 1 in bandpass can be auto dcnl default in 0 14 to use a multiple of l freq dcnl min max l freq 0 25 2 l freq dcnl only used for method fir dcnl h trans bandwidth float | str dcnl width of the transition band at the high cutoff frequency in hz dcnl low pass or cutoff 2 in bandpass can be auto dcnl default in 0 14 to use a multiple of h freq dcnl min max h freq 0 25 2 info sfreq 2 h freq dcnl only used for method fir dcnl n jobs int | str dcnl number of jobs to run in parallel can be cuda if scikits cuda dcnl is installed properly cuda is initialized and method fir dcnl method str dcnl fir will use overlapadd fir filtering iir will use iir dcnl forwardbackward filtering via filtfilt dcnl iir params dict | none dcnl dictionary of parameters to use for iir filtering dcnl see mne filter construct iir filter for details if iir params dcnl is none and method iir 4th order butterworth will be used dcnl copy bool dcnl if true a copy of x filtered is returned otherwise it operates dcnl on x in place dcnl phase str dcnl phase of the filter only used if method fir dcnl by default a symmetric linearphase fir filter is constructed dcnl if phase zero default the delay of this filter dcnl is compensated for if phase zerodouble then this filter dcnl is applied twice once forward and once backward if minimum dcnl then a minimumphase causal filter will be used dcnl versionadded 0 13 dcnl fir window str dcnl the window to use in fir design can be hamming default dcnl hann default in 0 13 or blackman dcnl versionadded 0 13 dcnl fir design str dcnl can be firwin default in 0 16 to use dcnl func scipy signal firwin or firwin2 default in 0 15 and dcnl before to use func scipy signal firwin2 firwin uses a dcnl timedomain design technique that generally gives improved dcnl attenuation using fewer samples than firwin2 dcnl versionadded 0 15 dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more defaults to dcnl self verbose dcnl returns dcnl data ndarray shape n times dcnl the filtered data dcnl see also dcnl construct iir filter dcnl create filter dcnl mne io raw filter dcnl notch filter dcnl resample dcnl notes dcnl for more information see the tutorials ref tut background filtering dcnl and ref tut artifacts filter and func mne filter create filter
create a fir or iir filter dcnl l freq and h freq are the frequencies below which and above dcnl which respectively to filter out of the data thus the uses are dcnl l freq < h freq bandpass filter dcnl l freq h freq bandstop filter dcnl l freq is not none and h freq is none highpass filter dcnl l freq is none and h freq is not none lowpass filter dcnl parameters dcnl data ndarray shape n times dcnl the data that will be filtered this is used for sanity checking dcnl only dcnl sfreq float dcnl the sample frequency in hz dcnl l freq float | none dcnl low cutoff frequency in hz if none the data are only lowpassed dcnl h freq float | none dcnl high cutoff frequency in hz if none the data are only dcnl highpassed dcnl filter length str | int dcnl length of the fir filter to use if applicable dcnl auto default the filter length is chosen based dcnl on the size of the transition regions 6 6 times the reciprocal dcnl of the shortest transition band for fir window hamming dcnl and fir design firwin2 and half that for firwin dcnl str a humanreadable time in dcnl units of s or ms e g 10s or 5500ms will be dcnl converted to that number of samples if phase zero or dcnl the shortest poweroftwo length at least that duration for dcnl phase zerodouble dcnl int specified length in samples for fir design firwin dcnl this should not be used dcnl l trans bandwidth float | str dcnl width of the transition band at the low cutoff frequency in hz dcnl high pass or cutoff 1 in bandpass can be auto dcnl default to use a multiple of l freq dcnl min max l freq 0 25 2 l freq dcnl only used for method fir dcnl h trans bandwidth float | str dcnl width of the transition band at the high cutoff frequency in hz dcnl low pass or cutoff 2 in bandpass can be auto dcnl default in 0 14 to use a multiple of h freq dcnl min max h freq 0 25 2 info sfreq 2 h freq dcnl only used for method fir dcnl method str dcnl fir will use overlapadd fir filtering iir will use iir dcnl forwardbackward filtering via filtfilt dcnl iir params dict | none dcnl dictionary of parameters to use for iir filtering dcnl see mne filter construct iir filter for details if iir params dcnl is none and method iir 4th order butterworth will be used dcnl phase str dcnl phase of the filter only used if method fir dcnl by default a symmetric linearphase fir filter is constructed dcnl if phase zero default the delay of this filter dcnl is compensated for if phase zerodouble then this filter dcnl is applied twice once forward and once backward if minimum dcnl then a minimumphase causal filter will be used dcnl versionadded 0 13 dcnl fir window str dcnl the window to use in fir design can be hamming default dcnl hann or blackman dcnl versionadded 0 13 dcnl fir design str dcnl can be firwin default in 0 16 to use dcnl func scipy signal firwin or firwin2 default in 0 15 and dcnl before to use func scipy signal firwin2 firwin uses a dcnl timedomain design technique that generally gives improved dcnl attenuation using fewer samples than firwin2 dcnl versionadded 0 15 dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more defaults to dcnl self verbose dcnl returns dcnl filt array or dict dcnl will be an array of fir coefficients for method fir and dict dcnl with iir parameters for method iir dcnl see also dcnl filter data dcnl notes dcnl the 6 db point for all filters is in the middle of the transition band dcnl bandpass filter dcnl the frequency response is approximately given by dcnl 1| dcnl |h| | | | dcnl 0| | | dcnl 0 fs1 fp1 fp2 fs2 nyq dcnl where dcnl fs1 fp1 l trans bandwidth in hz dcnl fs2 fp2 + h trans bandwidth in hz dcnl bandstop filter dcnl the frequency response is approximately given by dcnl 1| dcnl |h| | dcnl 0| dcnl 0 fp1 fs1 fs2 fp2 nyq dcnl where fs1 fp1 + l trans bandwidth and dcnl fs2 fp2 h trans bandwidth dcnl multiple stop bands can be specified using arrays dcnl lowpass filter dcnl the frequency response is approximately given by dcnl 1| dcnl |h| | dcnl 0| dcnl 0 fp fstop nyq dcnl where fstop fp + trans bandwidth dcnl highpass filter dcnl the frequency response is approximately given by dcnl 1| dcnl |h| | dcnl 0| dcnl 0 fstop fp nyq dcnl where fstop fp trans bandwidth dcnl versionadded 0 14
notch filter for the signal x dcnl applies a zerophase notch filter to the signal x operating on the last dcnl dimension dcnl parameters dcnl x array dcnl signal to filter dcnl fs float dcnl sampling rate in hz dcnl freqs float | array of float | none dcnl frequencies to notch filter in hz e g np arange 60 241 60 dcnl none can only be used with the mode spectrum fit where an f dcnl test is used to find sinusoidal components dcnl filter length str | int dcnl length of the fir filter to use if applicable dcnl auto default the filter length is chosen based dcnl on the size of the transition regions 6 6 times the reciprocal dcnl of the shortest transition band for fir window hamming dcnl and fir design firwin2 and half that for firwin dcnl str a humanreadable time in dcnl units of s or ms e g 10s or 5500ms will be dcnl converted to that number of samples if phase zero or dcnl the shortest poweroftwo length at least that duration for dcnl phase zerodouble dcnl int specified length in samples for fir design firwin dcnl this should not be used dcnl notch widths float | array of float | none dcnl width of the stop band centred at each freq in freqs in hz dcnl if none freqs 200 is used dcnl trans bandwidth float dcnl width of the transition band in hz dcnl only used for method fir dcnl method str dcnl fir will use overlapadd fir filtering iir will use iir dcnl forwardbackward filtering via filtfilt spectrum fit will dcnl use multitaper estimation of sinusoidal components if freqs none dcnl and method spectrum fit significant sinusoidal components dcnl are detected using an f test and noted by logging dcnl iir params dict | none dcnl dictionary of parameters to use for iir filtering dcnl see mne filter construct iir filter for details if iir params dcnl is none and method iir 4th order butterworth will be used dcnl mt bandwidth float | none dcnl the bandwidth of the multitaper windowing function in hz dcnl only used in spectrum fit mode dcnl p value float dcnl pvalue to use in ftest thresholding to determine significant dcnl sinusoidal components to remove when method spectrum fit and dcnl freqs none note that this will be bonferroni corrected for the dcnl number of frequencies so large pvalues may be justified dcnl picks arraylike of int | none dcnl indices of channels to filter if none all channels will be dcnl filtered only supported for 2d n channels n times and 3d dcnl n epochs n channels n times data dcnl n jobs int | str dcnl number of jobs to run in parallel can be cuda if scikits cuda dcnl is installed properly cuda is initialized and method fir dcnl copy bool dcnl if true a copy of x filtered is returned otherwise it operates dcnl on x in place dcnl phase str dcnl phase of the filter only used if method fir dcnl by default a symmetric linearphase fir filter is constructed dcnl if phase zero default the delay of this filter dcnl is compensated for if phase zerodouble then this filter dcnl is applied twice once forward and once backward if minimum dcnl then a minimumphase causal filter will be used dcnl versionadded 0 13 dcnl fir window str dcnl the window to use in fir design can be hamming default dcnl hann default in 0 13 or blackman dcnl versionadded 0 13 dcnl fir design str dcnl can be firwin default in 0 16 to use dcnl func scipy signal firwin or firwin2 default in 0 15 and dcnl before to use func scipy signal firwin2 firwin uses a dcnl timedomain design technique that generally gives improved dcnl attenuation using fewer samples than firwin2 dcnl versionadded 0 15 dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl xf array dcnl x filtered dcnl see also dcnl filter data dcnl resample dcnl notes dcnl the frequency response is approximately given by dcnl 1| dcnl |h| | dcnl 0| dcnl 0 fp1 freq fp2 nyq dcnl for each freq in freqs where fp1 freq trans bandwidth 2 and dcnl fs2 freq + trans bandwidth 2 dcnl references dcnl multitaper removal is inspired by code from the chronux toolbox see dcnl www chronux org and the book observed brain dynamics by partha mitra dcnl hemant bokil oxford university press new york 2008 please dcnl cite this in publications if method spectrum fit is used
call mt spectrum remove
use mtspectrum to remove line frequencies dcnl based on chronux if line freqs is specified all freqs within notch width dcnl of each line freq is set to zero
resample an array dcnl operates along the last dimension of the array dcnl parameters dcnl x nd array dcnl signal to resample dcnl up float dcnl factor to upsample by dcnl down float dcnl factor to downsample by dcnl npad int | str dcnl number of samples to use at the beginning and end for padding dcnl can be auto to pad to the next highest power of 2 dcnl axis int dcnl axis along which to resample default is the last axis dcnl window string or tuple dcnl see func scipy signal resample for description dcnl n jobs int | str dcnl number of jobs to run in parallel can be cuda if scikits cuda dcnl is installed properly and cuda is initialized dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl xf array dcnl x resampled dcnl notes dcnl this uses hopefully intelligent edge padding and frequencydomain dcnl windowing improve scipy signal resample s resampling method which dcnl we have adapted for our use here choices of npad and window have dcnl important consequences and the default choices should work well dcnl for most natural signals dcnl resampling arguments are broken into up and down components for future dcnl compatibility in case we decide to use an upfirdn implementation the dcnl current implementation is functionally equivalent to passing dcnl up up down and down 1
resample stim channels carefully dcnl parameters dcnl stim data array shape n samples or n stim channels n samples dcnl stim channels to resample dcnl up float dcnl factor to upsample by dcnl down float dcnl factor to downsample by dcnl returns dcnl stim resampled array shape n stim channels n samples resampled dcnl the resampled stim channels dcnl note dcnl the approach taken here is equivalent to the approach in the ccode dcnl see the decimate stimch function in mne mne browse raw save c
detrend the array x dcnl parameters dcnl x nd array dcnl signal to detrend dcnl order int dcnl fit order currently must be 0 or 1 dcnl axis integer dcnl axis of the array to operate on dcnl returns dcnl xf array dcnl x detrended dcnl examples dcnl as in scipy signal detrend dcnl randgen np random randomstate 9 dcnl npoints int 1e3 dcnl noise randgen randn npoints dcnl x 3 + 2 np linspace 0 1 npoints + noise dcnl detrend x noise max < 0 01 dcnl true
validate and automate filter parameter selection
create a fir filter like that used by mnec dcnl parameters dcnl sfreq float dcnl the sample frequency dcnl l freq float | none dcnl the low filter frequency in hz default none dcnl can be none to avoid highpassing dcnl h freq float dcnl the high filter frequency in hz default 40 dcnl can be none to avoid lowpassing dcnl l trans bandwidth float | none dcnl low transition bandwidthin hz can be none default to use 3 samples dcnl h trans bandwidth float dcnl high transition bandwidth in hz dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more defaults to dcnl self verbose dcnl returns dcnl h ndarray shape 8193 dcnl the linearphase symmetric fir filter coefficients dcnl notes dcnl this function is provided mostly for reference purposes dcnl mnec uses a frequencydomain filter design technique by creating a dcnl linearphase filter of length 8193 in the frequency domain the dcnl 4197 frequencies are directly constructed with zeroes in the stopband dcnl and ones in the passband with squared cosine ramps in between
log the rescaling method
rescale baseline correct data dcnl parameters dcnl data array dcnl it can be of any shape the only constraint is that the last dcnl dimension should be time dcnl times 1d array dcnl time instants is seconds dcnl baseline tuple or list of length 2 or none dcnl the time interval to apply rescaling baseline correction dcnl if none do not apply it if baseline is bmin bmax dcnl the interval is between bmin s and bmax s dcnl if bmin is none the beginning of the data is used dcnl and if bmax is none then bmax is set to the end of the dcnl interval if baseline is none none the entire time dcnl interval is used if baseline is none no correction is applied dcnl mode none | ratio | zscore | mean | percent | logratio | zlogratio dcnl do baseline correction with ratio power is divided by mean dcnl power during baseline or zscore power is divided by standard dcnl deviation of power during baseline after subtracting the mean dcnl power power mean power baseline std power baseline mean dcnl simply subtracts the mean power percent is the same as applying ratio dcnl then mean logratio is the same as mean but then rendered in logscale dcnl zlogratio is the same as zscore but data is rendered in logscale dcnl first dcnl if none no baseline correction is applied dcnl copy bool dcnl whether to return a new instance or modify in place dcnl verbose bool str int or none dcnl if not none override default verbose level see func mne verbose dcnl and ref logging documentation <tut logging for more dcnl returns dcnl data scaled array dcnl array of same shape as data after rescaling
validate all published facts and unpublish those failing
returns random funfact or none
generate a unique filename for uploaded photo
task responsible for getting information about a user in basket
subscribes a user to basket newsletters dcnl the email to subscribe is provided either from the result of the lookup task dcnl or from the profile of the user
removes a user from the basket subscription
subscribe a user to basket dcnl this task subscribes a user to basket if not already subscribed dcnl and then updates his data on the phonebook dataextension the task dcnl retries on failure at most basket task max retries times and if it dcnl finally doesn t complete successfully it emails the dcnl settings basket managers with details
update user emails in basket dcnl this task is triggered when users change their email dcnl the task checks whether the user is already subscribed with the old email dcnl if there is a subscription we remove it and we register the new email
remove user from basket task dcnl this task unsubscribes a user from the mozillians newsletter
remove incomplete accounts older than incomplete acc max days old
dummy celery task to check that everything runs smoothly
task to check if profile is spam according to akismet
task to automatically delete spam accounts
task to rebuild es index without downtime
this method returns available languages localized in locale dcnl if a language cannnot be localized return reference language dcnl translated dictionaries get cached in available languages dcnl we use babel to get translated language names
vouch all users with a getpocket email
vouch all users with a mozilla email address as alternate
vouches cannot be removed do nothing please
generate a unique filename for uploaded photo
subscribe to basket action
unsubscribe from basket action
update can vouch is vouched flag action
return qs if istartswith filter exists else allback to icontains
add a vouch if an alternate email address is a mozilla address
ping healthchecks io periodically to monitor celery celerybeat health
task to export data from admin site and store it to s3
takes a url and prepends the site url
checks for spam content against akismet api
a unicodesafe urlencoder
add a fragment and or query paramaters to a url dcnl new query params will be appended to exising parameters except duplicate dcnl names which will be replaced
return the gravatar url for an email address
allows templates to dynamically add html attributes to bound dcnl fields from django forms dcnl copied from bedrock
renders fields in jinja2 dcnl takes a field and renders the appropriate elements
renders forms in jinja2 dcnl takes a form and renders the appropriate elements
proxy to solr s get thumbnail
redirect with locale support
return a markedup chunk of content containing the items dcnl in the template context if settings debug is true dcnl otherwise returns an empty string dcnl by default callables are omitted pass include callables true dcnl to include them dcnl the format of the result is dcnl <dl class jinjacontext dcnl <dt key< dt <dd value< dd dcnl <dt key< dt <dd value< dd dcnl < dl dcnl repr is applied to the values to format them dcnl example usage dcnl display context dcnl display context include callables true
provide access to the jinja class context object in case dcnl you want to do more complicated things with it typically dcnl display context is easier to use dcnl if settings debug is not true returns an empty dictionary dcnl example usage dcnl set context get context dcnl for k v in context|dictsort dcnl if not is callable v dcnl k v <br dcnl endif dcnl endfor
return true if thing is callable dcnl see get context for example usage
return timezoneaware now same way django does it but regardless dcnl of settings use tz this is a separate method so it can be easily dcnl mocked to test the other methods
return the current time expressed in the named timezone
return offset from utc of named time zone in minutes as of now dcnl this is time in specified time zone time utc so if the time dcnl zone is 5 hours ahead of utc it returns 300
return a datetime object given an offset in days and or weeks dcnl the offset can be either positive or negative
identical to get object or 404 except instead of returning http404 dcnl this returns none
helper for django s reverse in templates
helper for django s reverse in templates that doesn t prepend l10n prefix
helper to get the privacy level of the request user
returns privacy aware profile photo url
return text if a b
uses str format for string interpolation dcnl note always converts to s to text type before interpolation dcnl 0 arguments and x arguments |f positional x keyword dcnl positional arguments and keyword arguments
the canonical path can be overridden with a template variable like dcnl l10n utils render request template name canonical path firefox
set the prefix for the current thread
get the prefix for the current thread or none
wraps django s reverse to prepend the correct locale
split the requested path into locale path dcnl locale will be empty if it isn t found
helper to set attributes to func and methods
allow view to be accessed by anonymous users
allow view to be accessed by unvouched users
calculate username from email address
turn the query string into a unicode and asciisafe string dcnl we need unicode so it can be combined with a reversed url but it dcnl has to be ascii to go in a location header iri to uri seems like dcnl a good compromise
generate a contribute json
render error templates found in the root templates directory dcnl if no status parameter is explcitedly passed this function assumes dcnl your http status code is the same as your template name i e passing dcnl a template 404 will render 404 html with the http status code 404
return the language name for the code in locale dcnl if locale is none return in current activated language
converts a string to a clickable link if the string is legitimate dcnl url address it returns a clickable link otherwise returns the dcnl string itself
generates get params to specify models
helper which returns a dict with privacy fields set to privacy level
automatically vouch username dcnl this must be behind a waffle flag and activated only for testing dcnl purposes
automatically remove all vouches from username dcnl this must be behind a waffle flag and activated only for testing dcnl purposes
view a profile by username
edit user profile view
delete alternate email address
change primary email address
display a confirmation page asking the user if they want to dcnl leave
render an opensearch plugin
view that logs out the user and redirects to home page
registers users dcnl pulls out an invite code if it exists and auto validates the user dcnl if so singlepurpose view
return a twitter username given or http s strings
return the linkedin username from the url or the link
validate username dcnl import modules here to prevent dependency breaking
validate and return a properly formatted website url
validate that a username is not a url
validate that a username is email like
validate that a phone number is in international format 515 characters
return the latest published announcement or none
generate a unique filename for uploaded image
remove empty groups
for each curated group that has pending memberships that the curators have dcnl not yet been emailed about send to all the curators an email with the count dcnl of all pending memberships and a link to view and manage the requests
email user that their group membership status has changed dcnl old status and new status can either be a valid value for groupmembership status dcnl or none if we re going from or to a state where there is no groupmembership dcnl record e g if they re being removed from a group dcnl this is queued from group add member and group remove member
for groups with defined invalidation days we need to invalidate dcnl user membership after timedelta
for groups with defined invalidation days we need to notify users dcnl 2 weeks prior invalidation that the membership is expiring
change a list of group or skills objects into a dcnl spacedelimited string
slugify function that dumbs down but preserves nonlatin chars
check if a user is curator in the specific group
check if the obj is of group type
migrate forwards all the data for the foreignkey curator dcnl to the m2m field curators
do nothing please
lists groups from given query
lists all public groups in use on mozillians dcnl doesn t list functional areas invisible groups and groups with dcnl no vouched members
lists all public skills in use on mozillians
lists all functional areas
simple wildcard search for a group using a get parameter dcnl used for group skill autocompletion
list all members in this group
add a member to a group who has requested membership
review group terms page
user request to join group
toggle the current user s membership of a group
add or edit a group if there is a url we are editing
delete an invite to join a group
accept or reject group invitation
send group invitation email
view to help test different scenarios dcnl forces an immediate invalidation in the case that a group is dcnl set to expire its memberships
view to help test membership renewal notification dcnl manually spawn a task to send membership renewal notifications to the users
download url to temp make sure it has the sha256 digest dcnl and return its path
do typical mozillians update
takes output from git log oneline and extracts bug numbers
figures out a good description based on what we re pushing out
we monkeypatch django admin s render to response to work in our jinja dcnl environment we have an admin base site html template that django s dcnl templates inherit but instead of rendering html it renders the django dcnl pieces into a jinja template we get all of django s html but wrapped in dcnl our normal site structure
if you want to use some built in logic or a contrib app but need to dcnl override the templates to work with jinja replace the object s dcnl render to response function with this one that will render a jinja dcnl template through django s functions an example can be found in the users dcnl app
cleanup expired registration profiles and users that not activated
update the users in es that contributed yesterday dcnl the idea is to update the last contribution date field
prevent user objects from being deleted even by superusers
add a more accurate user get absolute url
handle to help registration
send an email by calling func catch smtpexception and place errors in dcnl form
return a url to the user s profile
return a url to the user s avatar
return a display name if set else the username
email address publicly displayable email
turns all unicode into html entities e g 69 e
turn a list of users into a list of links to their profiles
return a link to private message the user
return whether the user is in the registered as contributor group
add a permission to a user dcnl creates the permission if it doesn t exist
creates an auth string based on username token
an api to provide autocomplete data for user names
try to log the user in or register a user dcnl posts from these forms do not come back to this view but instead go to the dcnl login and register views which may redirect back to this in case of error
try to log the user in
log the user out
register a new user dcnl param contributor if true this is for registering a new contributor
register a new user from the superheroes page
activate a user account
resend confirmation email
change user s email send confirmation first
confirm the new email for the user
edit user settings
edit watch list
edit user profile
adds the logged in user to the contributor group
edit user avatar
delete user avatar
password reset form dcnl based on django contrib auth views this view sends the email
password reset email sent dcnl based on django contrib auth views this view shows a success message after dcnl email is sent
view that checks the hash in a password reset link and presents a dcnl form for entering a new password dcnl based on django contrib auth views
password reset complete dcnl based on django contrib auth views show a success message
change password form page
change password complete page
forgot username form page dcnl on post this view sends an email with the username
generate a thumbnail given a model instance with from and to fields dcnl optionally specify a max size
returns a thumbnail file with a set longest side
pads a rectangular image with transparency to make it square
returns a tuple width height both smaller than longest side and dcnl preserves scale
compress an image of given field for given object
check the file size of f is less than max allowed size dcnl raise filetoolargeerror if the check fails
given an uploaded file a user and an object it creates an imageattachment dcnl owned by user and attached to obj
uploads image attachments see upload media dcnl attaches images to the given object using the create imageattachment dcnl callback
uploads media files and returns a list with information about each media dcnl name url thumbnail url width height dcnl args dcnl request object dcnl form class used to instantiate and validate form for upload dcnl callback to save the file given its content and creator dcnl extra kwargs will all be passed to the callback
ensure only images of certain extensions can be uploaded
upload all images in request files
delete an image given its object id
send notification of review to the revision creator
send notification of review to the contributors of revisions
try to schedule a kb rebuild if we re allowed to
create short url s for a list of docs
rerender all documents in the kb in chunks
rerender a chunk of documents dcnl note don t use host components when making redirects to wiki pages those dcnl redirects won t be autopruned when they re 404s
award the specific badge to the user if they ve earned it
given a document render it and all documents that may be affected
return a dict that fills in the blanks in kb notification templates
generate share links for documents that may be missing them
reindex wiki document
sends out the weekly ready for review digest email
fixes documents that have the current revision set incorrectly
return active kb contributors for the specified parameters dcnl an active kb contributor is a user that has created or reviewed a dcnl revision in the given time period dcnl arg from date start date for contributions to be included dcnl arg to date end date for contributions to be included dcnl arg locale optional locale to filter on dcnl arg product optional only count documents for a product
return a shortned url for a given long url via bitly s api dcnl arg long url url to shorten
return number of active kb contributors for the specified parameters dcnl an active kb contributor is a user that has created or reviewed a dcnl revision in the given time period dcnl arg from date start date for contributions to be included dcnl arg to date end date for contributions to be included dcnl arg locale optional locale to filter on dcnl arg product optional only count documents for a product
return the set of ids for the top contributors based on the params dcnl an active kb contributor is a user that has created or reviewed a dcnl revision in the given time period dcnl arg from date start date for contributions to be included dcnl arg to date end date for contributions to be included dcnl arg locale optional locale to filter on dcnl arg product optional only count documents for a product
creates an html diff of the passed in content from and content to
create a doc with given content and parse given markup
run to balance through the expander to get its tags balanced and dcnl assert the result is want
balance and expand the fors in to expand and assert equality with dcnl want
confirm that the based on value set in the revision created by an edit dcnl or translate form is the current revision of the document as of when the dcnl form was first loaded even if other revisions have been approved in the dcnl meantime
assert that the objects contained by manager are those in list
make a user who watches for revision readiness
return locale path slug if url is a document false otherwise dcnl if url doesn t even point to the document view raise notdocumentview
return whether a url reverses to the document view dcnl to limit the universe of discourse to a certain locale pass in a dcnl required locale
count the number of documents a user has contributed to
return the documents a user has contributed to
return the redirects a user has contributed to
returns the cache key for the document html
wiki markup html with the wiki app s enhanced parser
formats a template s content using passed in arguments
builds a dictionary from a given list of raw strings passed in by the dcnl user dcnl example syntax it handles dcnl one two turns into 1 one 2 two dcnl 12 blah turns into 12 blah dcnl name value turns into name value
expands a key a+b+c syntax into <span class key a< span + dcnl more explicitly it takes a regex matching key ctrl+alt+del and returns dcnl <span class key ctrl< span + <span class key alt< span + dcnl <span class key del< span
checks if the user is a leader for the given locale dcnl returns false if the locale doesn t exist this will should only happen dcnl if we forgot to insert a new locale when enabling it or during testing
checks if the user is a reviewer for the given locale dcnl returns false if the locale doesn t exist this will should only happen dcnl if we forgot to insert a new locale when enabling it or during testing
a view decorator that redirects configured locales to faq wiki page
list the support kb locales
show the locale details page
add a user to the locale role
remove a user from the locale role
can the given user edit the given locale members
returns a list of topics that apply to passed in product dcnl arg product a product instance dcnl arg parent optional limit to topics with the given parent
returns a tuple of lists of articles that apply to topics and products dcnl the first item in the tuple is the list of articles for the locale dcnl specified the second item is the list of fallback articles in enus dcnl that aren t localized to the specified locale if the specified locale dcnl is enus the second item will be none dcnl arg locale the locale dcnl arg topics optional a list of topic instances dcnl arg products optional a list of product instances dcnl the articles are returned as a list of dicts with the following keys dcnl id dcnl document title dcnl url dcnl document parent id
returns a list of articles that apply to passed in topics and products
es implementation of documents for
db implementation of documents for
decorator that caches the document page html
view a wiki document
view a wiki document revision
list wiki documents
create a new wiki document
check for a lock on a document dcnl returns the username of the user that has the page locked or none if dcnl no user has a lock
lock a document for a user dcnl note that this does not check if the page is already locked and simply dcnl sets the lock on the page
remove a lock from a document dcnl this would be used to indicate the given user no longer wants the page dcnl locked so the lock should be cleared dcnl if the user parameter does not match the current lock the lock remains dcnl in place dcnl returns true if the lock was removed false otherwise
if there is no lock take one return the current state of the lock
create a new revision of a wiki document or edit document metadata
create a draft revision dcnl user can have only one draft revision for a translated document store the draft with dcnl parent document user and locale get the parent document from the based on revision
create an html fragment preview of the posted wiki syntax
list all the revisions of a given document
review a revision of a wiki document
compare two wiki document revisions dcnl the ids are passed as query string parameters to and from
select a locale to translate the document to
create a new translation of a wiki document dcnl document slug is for the default locale dcnl translation is to the request language code
start watching a document for edits
stop watching a document for edits
start watching a locale for revisions ready for review
stop watching a locale for revisions ready for review
start watching approved revisions in a locale for a given product
stop watching approved revisions for a given product
start watching readyforl10n revisions for given product
stop watching readyforl10n revisions for a given product
return some basic document info in a json blob
vote for helpful not helpful document
ajax only view unhelpful vote survey processing
delete a revision
mark a revision as ready for l10n
delete a revision
add a contributor to a document
remove a contributor from a document
return a dict with the document data pertinent for the form
save the given revisionform and send notifications
try to schedule a kb rebuild if a title or slug has changed
list all documents that link to a document
get best fallback local based on locale mapping
parses the lang string which is the body of an http acceptlanguage dcnl header and returns a list of lang ordered by q values dcnl any format errors in lang string results in an empty list being returned
handle the revision save signal dcnl we award the kb badge on 10 approved enus edits dcnl we award the l10n badge on 10 approved translation edits
update the top contributor lists and titles
return a list of titles for a given user
update num votes past week for a number of questions
award the specific badge to the user if they ve earned it
escalate a question to zendesk by submitting a ticket
keep the num votes past week value accurate
archive all questions that were created over 180 days ago
reload question views from the analytics
escalate questions needing attention dcnl escalate questions where the status is needs attention and dcnl still have no replies after 24 hours but not that are older dcnl than 25 hours this runs every hour
send an email about employee answered questions dcnl we report on the users in the support forum tracked group dcnl we send the email to the users in the support forum metrics group
insert key keys so we can go from product or category back to key
returns the number of questions a user has
returns the number of answers a user has
returns the number of solutions a user has
flag all the questions and answers of the user as spam dcnl arg user the user whose content should be marked as spam dcnl arg by user the user requesting to mark the content as spam
return the url to add tag for question 1 an untagged question
return the url to add tag async for question 1 an untagged question
return url to remove tag for question 2 tagged colorless green
return url to remove tag async on q 2 tagged colorless green
assert that the names of the tags on tagged object are tag names
signal handler for new tag on question
when a question is saved we need to reindex it s answers dcnl this is needed because the solution may have changed
when a user s username is changed we must reindex the questions dcnl they participated in
return the major and minor version numbers from a full version string dcnl don t return bugfix version beta status or anything futher if there is dcnl no major or minor version in the string return
returns true if the version has a beta release dcnl for example if dcnl dev releases u 4 0rc2 u 20110318 dcnl u 5 0b1 u 20110520 dcnl u 5 0b2 u 20110520 dcnl u 5 0b3 u 20110601 dcnl and you pass 5 0 it return true since there are 5 0 betas in the dcnl dev releases dict if you pass 6 0 it returns false
view to select a product to see related questions
view the list of questions
normalizes the troubleshooting data from question dcnl returns a normalized version or none if something was wrong dcnl this does not try very hard to fix bad data
view the answers to a question
ask a new question
step 2 the product is selected
step 3 the product and category is selected
step 4 search query entered
step 5 show full question form
aaq confirm email step for new users
edit a question
exclude image uploading and deleting from the reply rate limiting dcnl also exclude users with the questions bypass ratelimit permission
post a new answer to a question
accept an answer as the solution to the question
accept an answer as the solution to the question
i have this problem too
vote for helpful not helpful answers
add a caseinsensitive tag to question dcnl if the question already has the tag do nothing
add a caseinsensitive tag to question asyncronously return empty dcnl if the question already has the tag do nothing
remove a caseinsensitive tag from question dcnl expects a post with the tag name embedded in a field name like dcnl removetagtagnamehere if question doesn t have that tag do nothing
remove a caseinsensitive tag from question dcnl if question doesn t have that tag do nothing return value is json
mark a question or an answer as spam
mark a question or an answer as spam
delete a question
delete an answer
lock or unlock a question
archive or unarchive a question
edit an answer
start watching a question for replies or solution
stop watching a question
stop watching a question for anonymous users
activate watching a question
create an html fragment preview of the posted wiki syntax
aaq landing page for marketplace
aaq category page handles form post that submits ticket
form page that handles refund requests for marketplace
form page that handles developer requests for marketplace
confirmation of ticket submitted successfully
gets a zero filled histogram for each question topic dcnl uses elastic search
the support forum metrics dashboard
return an iterable of the most relevant wiki pages and questions dcnl arg text full text to search on dcnl arg locale locale to limit to dcnl arg product slugs list of product slugs to filter articles on dcnl desktop mobile dcnl items are dicts of dcnl type dcnl search summary dcnl title dcnl url dcnl object dcnl returns up to 3 wiki pages then up to 3 questions
return a map of the minimal info necessary to draw an answers page
add a named tag to a question creating it first if appropriate dcnl tag name caseinsensitive must be in request post tagname dcnl if there is no such tag and the user is not allowed to make new tags raise dcnl tag doesnotexist if no tag name is provided return none otherwise dcnl return the canonicalized tag name
handle the reply save signal dcnl we award the support forum badge on 30 answers
instantiate and return a zendesk client
submit a marketplace ticket to zendesk dcnl arg email user s email address dcnl arg category issue s category dcnl arg subject issue s subject dcnl arg body issue s description
return a db cursor for reading
format a row for a readout that has the trafficlightstyle dcnl categorization of how seriously out of date a translation is
return the iterable of dicts needed to draw the new kb dashboard overview
return the iterable of dicts needed to draw the overview table
calculate and store the l10n metrics for each locale product dcnl the metrics are dcnl percent localized of top 20 articles dcnl percent localized of all articles
update the number of active contributors for each locale product dcnl an active contributor is defined as a user that created or reviewed a dcnl revision in the previous calendar month
gets the data from 2 weeks ago and formats it as output so that we can dcnl get a percent change
gets the data for the past week and formats it as return value
calculate and save the most unhelpful kb articles in the past month
render a readouts possibly with overview page dcnl use the given template pass the template the given readouts limit the dcnl considered data to the given locale and pass along anything in the dcnl extra data dict to the template in addition to the standard data
get a list of locale visits tuples sorted descending by visits
return when each period begins and ends
instantiate and return the readout with the given slug dcnl raise http404 if there is no such readout
show all the rows for the given kb article statistics table
show all the rows for the given contributor dashboard table
show all the rows for the given localizer dashboard table
render aggregate data about articles in a nondefault locale
render aggregate data about the articles in the default locale
render aggregate data about the articles in the default locale
return the table contents html for the given readout and mode
the kb metrics dashboard for a specific locale
the aggregated all locales kb metrics dashboard
a task that measures the time it was sitting in the queue dcnl it saves the data to graphite via statsd
sends a a bunch of emailmessages
call f which has first argument locale if f raises an dcnl exception indicative of a bad localization of a string try again in dcnl settings wiki default language dcnl the translation system will be manipulated so that calls to gettext and dcnl friends will use the appropriate language dcnl nb this means f will be called up to two times
renders a template in the currently set locale dcnl falls back to wiki default language in case of error
return an instance of emailmultialternative with both plaintext and dcnl html versions
return iterable of emailmessages with user and watch values substituted dcnl a convenience function for generating emails by repeatedly dcnl rendering a django template with the given context vars plus a dcnl user and watches key for each pair in dcnl users and watches dcnl note dcnl this is a localeaware rewrite of the same function in djangotidings dcnl it s kind of goofyi ain t gonna lie dcnl arg subject lazy gettext subject string dcnl arg text template path to text template file dcnl arg html template path to html template file dcnl arg context vars a map which becomes the context passed in to the dcnl template and the subject string dcnl arg from email the from email address dcnl arg default local the local to default to if not user profile locale dcnl arg extra kwargs additional kwargs to pass into emailmessage constructor dcnl returns generator of emailmessage objects
fires a task that measures the queue lag
looks at postatus file and sends an email with errors
monkeypatches django shortcuts render for jinja2 kungfu action dcnl note dcnl only call this in a testing context
takes a class and modifies it to conditionally hide based on permissions
get a paginator abstracting some common paging actions
get a simplepaginator page
build the url for the paginator
yield successive nsized chunks from seq dcnl if length isn t specifed it is calculated from len seq dcnl for group in chunked range 8 3 dcnl print group dcnl 0 1 2 dcnl 3 4 5 dcnl 6 7
convert a string to int with fallback for invalid strings or types
signal receiver of a model class and instance deletes its files
deletes all filefields when model instances are deleted dcnl meant to be used on model classes dcnl django disabled autodeletion of files when deleting a model in dcnl ticket 6456 to prevent dataloss
given a request object looks for the best possible next url dcnl useful for e g redirects back to original page after a post request
dump an object to json and ensure the dump is less than max length dcnl the truncation will happen by truncating objkey if key is not dcnl long enough to achieve the goal an exception will be thrown dcnl if ensure ascii is true the value returned will be only ascii dcnl even if that means representing unicode characters as escape sequences if dcnl false a unicode string will be returned without escape sequences the dcnl default is false this is the same as the ensure ascii paramater on dcnl json dumps
used for generating rate limiting keys returns a function to pass on dcnl to rate limit the function return returns a key with ip address for dcnl anonymous users and pks for authenticated users dcnl examples dcnl anonymous uip <key prefix 127 0 0 1 dcnl authenticated uip <key prefix 17859
context manager for setting locale and returning to previous locale dcnl this is useful for when doing translations for things run by dcnl celery workers or out of the http request handling path example dcnl with uselocale xx dcnl subj subject of my email dcnl msg render email email template email kwargs dcnl mail send mail subj msg dcnl in kitsune you can get the right locale from profile locale and dcnl also request language code dcnl if kitsune is handling an http request already you don t have to dcnl run uselocalethe locale will already be set correctly
returns the rabbitmq queue size dcnl two things to know about the queue size dcnl 1 it s not 100 accurate but the size is generally near that dcnl number dcnl 2 i can t think of a second thing but that first thing is dcnl pretty important
reimplement ratelimit helpers is ratelimited with sumospecific details dcnl always check for the bypass rate limit permission dcnl log times when users are rate limited dcnl always uses user or ip for the rate limit key
get browser name from user agent
get a redis client dcnl uses the name argument to lookup the connection string in the dcnl settings redis backend dict
converts the backend uri into a cache scheme db memcached etc a dcnl host and any extra params that are required for the backend returns a dcnl scheme host params tuple
render list of pages
helper for django s reverse in templates dcnl uses sumo s localeaware reverse
helper for django s reverse in templates dcnl uses django s default reverse
add a fragment and or query parameters to a url dcnl new query params will be appended to exising parameters except duplicate dcnl names which will be replaced
wiki markup html jinja2 markup object
show a list of breadcrumbs if url is none it won t be a link dcnl accepts url label
return the babel locale code given a normal one
return locale from the context falling back to a default if invalid
returns a formatted date time using babel s locale settings uses the dcnl timezone from settings py if the user has not been authenticated
replace consecutive crs and or lfs with single crlfs dcnl crs or lfs with nothing but whitespace between them are still considered dcnl consecutive dcnl as a nice side effect also strips trailing whitespace from lines that are dcnl followed by line breaks
return the localized representation of an integer or decimal dcnl for none print nothing
take two datetime objects and return the time between d and now as a dcnl nicely formatted string e g 10 minutes if d is none or occurs after dcnl now return dcnl units used are years months weeks days hours and minutes seconds and dcnl microseconds are ignored just one unit is displayed for example dcnl 2 weeks and 1 year are possible outputs but 2 weeks 3 days and 1 dcnl year 5 months are not dcnl adapted from django utils timesince to have better i18n not assuming dcnl commas as list separators and including ago so order of words isn t dcnl assumed show only one time unit and include seconds
print the label tag for a form field including the help text dcnl value as a title attribute
removes an item from a list
return the json for the datagapush attribute dcnl this is used to defined custom variables and other special tracking with dcnl google analytics
add the utm tracking parameters to a url
generate a url for the specified static file
return class selected if a b otherwise return
uses str format for string interpolation dcnl 0 arguments and x arguments |f positional x keyword dcnl positional arguments and keyword arguments
format a safe string with potentially unsafe arguments returns a safe string
avoid duplicating page param in pagination
make sure breadcrumb links start with
compares received s attributes with expected s kwargs
assert text starts with substring
patch email utils send messages with this in your tests to check what dcnl happens when an email fails to send
shorthand for assert a b s r r msg a b
asserts a given template was used with caveats dcnl first off this is a gross simplification of what the django dcnl asserttemplateused testcase method does this does not work as a dcnl context manager and it doesn t handle a lot of the pseudoresponse dcnl cases dcnl however it does work with jinja2 templates provided that dcnl monkeypatch render has patched django shortcuts render to dcnl add the information required dcnl also it s not tied to testcase dcnl also it uses fewer characters to invoke for example dcnl self asserttemplateused resp new user html dcnl assert template used resp new user html dcnl arg response httpresponse object dcnl arg template name the template in question dcnl returns whether the template was used
adds settings to the context
adds the list of aaq languages to the context
wiki markup html
return an instance of cls matching title and locale or fall dcnl back to the default locale dcnl when falling back to the default locale follow any wiki redirects dcnl internally dcnl if the fallback fails the return value is default dcnl you may pass in additional kwargs which go straight to the query
checks the page exists and returns its url or the url to create it dcnl return value is a dict found boolean url string dcnl found is false if the document does not exist
parses a string of the form sometitle|opt1|opt2 arg2|opt3 dcnl builds a list of items and returns relevant parameters in a dict
takes a video object and returns html markup for embedding it
takes a youtube video id and returns the embed markup
returns true if the url is to youtube
set the prefixer for the current thread
get the prefixer for the current thread or none
wraps django s reverse to prepend the correct locale dcnl force locale ordinarily if get url prefixer returns none we return dcnl an unlocalized url which will be localized via redirect when visited dcnl set force locale to true to force the insertion of a default locale dcnl when there is no set prefixer if you are writing a test and simply dcnl wish to avoid localeurlmiddleware s initial 301 when passing in an dcnl unprefixed url it is probably easier to substitute localizingclient dcnl for any uses of django test client client and forgo this kwarg dcnl locale by default reverse prepends the current locale if set or dcnl the default locale if force locale true to override this behavior dcnl and have it prepend a different locale pass in the locale parameter dcnl with the desired locale when passing a locale the force locale is dcnl not used and is implicitly true
find known nonsupported locales with fallbacks
given an acceptlanguage header return the bestmatching language
split the requested path into locale path dcnl locale will be empty if it isn t found
call f if f raises an http 503 exception try again once dcnl this is what google analytics recommends dcnl https developers google com analytics devguides config mgmt v3 errors
return the number of daily unique visitors for a given date range dcnl returns a dict with daily numbers dcnl u 20120122 404971 dcnl u 20120123 434618 dcnl u 20120124 501687
return the number of unique visits by locale in a given date range dcnl returns a dict with visits for each locale dcnl u enus 7683415 dcnl u de 1293052 dcnl u es 830521
return the number of pageviews by document in a given date range dcnl only returns enus documents for now since that s what we did with dcnl webtrends dcnl returns a dict with pageviews for each document dcnl <document id <pageviews dcnl 1 42 dcnl 7 1337
return the number of pageviews by question in a given date range dcnl returns a dict with pageviews for each document dcnl question id <pageviews dcnl 1 42 dcnl 7 1337
return search click through rate based on goal 11 in google analytics dcnl returns a dict with daily numbers dcnl u 20120122 74 8 dcnl u 20120123 73 6 dcnl u 20120124 76 2
returns whether the jsonp function name is valid dcnl arg funcname the name of the jsonp function dcnl returns true or false
marks up the request object with json bits dcnl is json whether or not this is a json request dcnl json callback the json callback function to wrap with dcnl content type the content type to return dcnl further this verifies the json callback if there is one and if it s not dcnl valid it returns an error response
a view decorator that enforces https dcnl if settings session cookie secure is false it won t enforce anything
ensure the response content is wellformed json dcnl views wrapped in json view can return jsonserializable python objects dcnl like lists and dicts and the decorator will serialize the output and set dcnl the correct contenttype dcnl views may also throw known exceptions like http404 permissiondenied dcnl etc and json view will convert the response to a standard json error dcnl format and set the status code and content type
a simple decorator to enable cors
a decorator that records the function execution time to statsd
reimplement ratelimit decorators ratelimit using a sumospecic is ratelimited dcnl this discards a lot of the flexibility of the original and in turn is a lot simpler
api endpoint listing all supported locales
the locale switcher page
ajax view to return the localized text for geoip locale change suggestion dcnl takes one parameter from the querystring dcnl locales a form encoded list of locales to translate to dcnl example url localize locales es locales enus
a 403 message that looks nicer than the normal apache forbidden page
a handler for 404s
a 500 message that looks nicer than the normal apache error page
like django s redirect to except that url is passed to reverse
redirect with an interstitial page telling folks to update their dcnl bookmarks
generate a robots txt
connect to memcached dcnl returns true if test passed false if test failed
view for services monitor
a wrapper around django views static serve that adds cors headers
returns the string of a number formatted for the current language dcnl uses django s translation get language to find the current language from dcnl the request dcnl falls back to the default language if babel does not support the current
turn the query string into a unicode and asciisafe string dcnl we need unicode so it can be combined with a reversed url but it has to be dcnl ascii to go in a location header iri to uri seems like a good compromise
the home page
twitter sessions are ssl only so redirect to ssl if needed dcnl don t redirect if twitter cookie secure is false
return a httpresponsebadrequest if not authed
add a tag that already exists to an object return the normalized name dcnl given a tag name and a taggablemanager have the manager add the tag of dcnl that name the tag is matched caseinsensitively if there is no such tag dcnl raise tag doesnotexist dcnl return the canonically cased name of the tag
converts a list of tag objects into a commaseparated slug list
returns the tag vocabulary as a json object
unsubscribe from i e delete the watch of id watch id dcnl expects an s querystring parameter matching the watch s secret dcnl get will result in a confirmation page or a failure page if the secret is dcnl wrong post will actually delete the watch again if the secret is dcnl correct dcnl the templates assume use of the jinja templating engine and the presence of dcnl a base html template containing a content block dcnl if you aren t using jinja you can replace the templates with your own dcnl django templates
admin view that displays the django settings
admin view that displays the celery configuration
admin view that displays env info
admin view that displays the current schema version
admin view that displays redis info+config output for all backends
redirect inproduct urls to the right place
gets the name of the read index for a group
gets the name of the write index for a group
query es to get a list of indexes that actually exist dcnl returns a dict like index name document count
returns a dict of name count for documents indexed dcnl for example dcnl get doctype stats dcnl questions question 14216 forums thread 419 wiki document 759 dcnl throws elasticsearch exceptions connectionerror if there is a dcnl connection error including a timeout dcnl throws elasticsearch exceptions notfound if the index doesn t exist
returns minutes and seconds string for given time in seconds
returns a list of es documents with specified ids and doctype dcnl arg cls the mapping type class with a search to use dcnl arg ids the list of ids to retrieve documents for dcnl returns list of documents as dicts
generate all our custom analyzers tokenizers and filters dcnl these are variants of the snowball analyzer for various languages dcnl but could also include custom analyzers if the need arises
deletes indexes and recreates them dcnl arg es an es object to use defaults to calling get es dcnl arg indexes a list of indexes to recreate defaults to all write dcnl indexes
returns es settings for this index
returns a list of class iterable for all the things to index dcnl arg percent defaults to 100 allows you to specify how much of dcnl each doctype you want to index this is useful for dcnl development where doing a full reindex takes an hour dcnl arg mapping types the list of mapping types to index
index a chunk of documents dcnl arg cls the mappingtype class dcnl arg id list iterable of ids of that mappingtype to index dcnl arg reraise false if you want errors to be swallowed and true dcnl if you want errors to be thrown
rebuild elasticsearch indexes dcnl arg percent 1 to 100the percentage of the db to index dcnl arg delete whether or not to wipe the index before reindexing dcnl arg mapping types list of mapping types to index dcnl arg criticalmass whether or not to index just a critical mass of dcnl things dcnl arg log the logger to use
deletes an index
shows elastic search index status
simulates a front page search dcnl note dcnl this doesn t simulate an advanced searchjust a front dcnl page search
pick an appropriate analyzer for a given locale dcnl if no analyzer is defined for locale return fallback instead dcnl which defaults to es analyzer named standard dcnl if synonyms is true this will return a synonymusing analyzer dcnl if that makes sense in particular it doesn t make sense to use dcnl synonyms with the fallback analyzer
transform a query dict to use analyzer actions for the right fields
handles elasticsearch exceptions for views dcnl wrap the entire view in this and don t worry about elasticsearch exceptions dcnl again dcnl arg template template path string or function to generate the template dcnl path string for html requests dcnl arg status code status code to return dcnl returns contenttypeappropriate httpresponse
index a chunk of things dcnl arg write index the name of the index to index to dcnl arg batch id the name for the batch this chunk belongs to dcnl arg rec id the id for the record for this task dcnl arg chunk a class id list of things to index
index documents specified by cls and ids
unindex documents specified by cls and ids
parse synonyms from user entered text dcnl the input should look something like dcnl foo bar dcnl baz qux flob glork dcnl returns a set of 2tuples from words to words from words dcnl and to words will be strings dcnl throws a synonymparseerror if any errors are found
count number of synonyms that differ between the database and es dcnl returns a 2tuple where the first element is the number of synonyms dcnl that are in the db but not in es and the second element is the dcnl number of synonyms in es that are not in the db
return locale or if locale isn t a known locale a default dcnl default is taken from django s language code setting
returns chunks of n length of iterable dcnl if len iterable n 0 then the last chunk will have length dcnl less than n dcnl example dcnl chunked 1 2 3 4 5 2 dcnl 1 2 3 4 5
returns class path for a class dcnl takes a class and returns the class path which is composed of the dcnl module plus the class name this can be reversed later to get the dcnl class using from class path dcnl returns string dcnl from kitsune search models import record dcnl to class path record dcnl kitsune search models record
returns the class dcnl takes a class path and returns the class for it dcnl returns varies dcnl from class path kitsune search models record dcnl <record
returns searcher with boosts applied
generates an s given a form dcnl arg search form a validated simplesearch form dcnl arg language the language code dcnl arg with highlights whether or not to ask for highlights dcnl returns a fully formed s
returns a list of mappingtypes
create and return the threadlocal set of indexing tasks
registers a model for signalbased liveindexing dcnl as data changes in the database we need to update the relevant dcnl documents in the index this function registers django model dcnl classes with the appropriate signals and update delete routines dcnl such that our index stays uptodate dcnl arg app a bit of uid we use to build the signal handlers dcnl dispatch uids this is prepended to the sender class dcnl model name elastic and the signal name so it should dcnl combine with those to make something unique for this reason dcnl the app name is usually a good choice yielding something like dcnl wiki taggeditem elastic post save dcnl arg sender class the class to listen for saves and deletes on dcnl arg instance to indexee a callable which takes the signalling dcnl instance and returns the model instance to be indexed the dcnl returned instance should be a subclass of searchmixin if the dcnl callable returns none no indexing is performed dcnl default a callable which returns the sender itself dcnl arg m2m true if this is a m2m model and false otherwise dcnl examples dcnl registers mymodel for indexing post save creates new dcnl documents in the index pre delete removes documents dcnl from the index dcnl register for indexing mymodel some app dcnl registers relatedmodel for indexing relatedmodel is related dcnl to some model in the sense that the document in the index is dcnl composed of data from some model and it s related dcnl relatedmodel instance because of that when we update dcnl relatedmodel instances we need to update the associated dcnl document in the index for the related model dcnl this registers the relatedmodel for indexing post save and dcnl pre delete update the associated document in the index for dcnl the related model the related model instance is determined dcnl by the instance to indexee function dcnl register for indexing relatedmodel some app dcnl instance to indexee lambda r r my model
class decorator for registering mappingtypes for search
goes through thread local index update tasks set and generates dcnl celery tasks for all tasks in the set dcnl because this works off of a set it naturally dedupes the tasks dcnl so if four tasks get tossed into the set that are identical we dcnl execute it only once
resets records
returns a batch id
deletes an index
reindex all instances of a given mapping type with celery tasks dcnl arg mapping type names list of mapping types to reindex
deletes an index recreates it and reindexes it
caculates and kicks off indexing tasks
render the admin view containing search tools
fixes up the s results for better templating dcnl 1 extract the results dict from the defaultmappingtype dcnl and returns that as a dict dcnl 2 turns datestamps into python datetime objects dcnl note this abuses elasticutils defaultmappingtype by using dcnl the private results dict
inserts cache expires headers
returns the appropriate elasticsearch is down template
takes a paginated search and returns results list dcnl handles wiki documents questions and contributor forum posts dcnl arg pages paginated s dcnl arg is json whether or not this is generated results for json output dcnl returns list of dicts
elasticsearchspecific simple search view dcnl this view is for end user searching of the knowledge base and dcnl support forum filtering options are limited to dcnl product product firefox for example for only firefox results dcnl document type w 2 for example for support forum questions only
elasticsearchspecific advanced search view
a simple search view that returns opensearch suggestions
render an opensearch plugin
return a search query given a ternary yes or ternary no dcnl behavior for ternary off is undefined
return concatenated search excerpts dcnl arg result the result object from the queryset results dcnl arg first only true if we should show only the first bit false dcnl if we should show all bits
return the top 20 articles by votes for the given product s
award the specific badge to the user if they ve earned it
make a regex that looks kind of like r  foo|bar|baz  dcnl this is a function so that it isn t calculated at import time dcnl and so can be tested more easily dcnl this doesn t use raw strings r because the mismatched parens dcnl were confusing my syntax highlighter which was confusing me
periodically purge old tweets for each locale dcnl this does a lot of deletes on master so it shouldn t run too frequently dcnl probably once every hour or more
returns the nth oldest tweet per locale defaults to newest
apply some filters to an incoming tweet dcnl may modify tweet if none is returned tweet will be discarded dcnl used to exclude replies and such from incoming tweets
generate customer care stats from the replies table dcnl this gets cached in redis as a sorted list of contributors stored as json dcnl example top contributor data dcnl twitter username username1 dcnl avatar http twitter com path to the avatar png dcnl avatar https https twitter com path to the avatar png dcnl all 5211 dcnl 1m 230 dcnl 1w 33 dcnl 1d 3
date time format according to iso 8601
return a customercareformat percentage from a number
test isotime helper
returns the common replies dcnl parses the kb article with the replies puts them in a list of dicts dcnl the kb article should have the following wiki syntax structure dcnl category 1 dcnl reply 1 dcnl reply goes here http example com kbarticle dcnl reply 2 dcnl another reply here dcnl category 2 dcnl reply 3 dcnl and another reply dcnl which results in the following html dcnl <h1 id w category1 category 1< h1 dcnl <h2 id w snippet1 reply 1< h2 dcnl <p reply goes here <a href http example com kbarticle dcnl http example com kbarticle< a dcnl < p dcnl <h2 id w snippet2 reply 2< h2 dcnl <p another reply here dcnl < p dcnl <h1 id w category2 category 2< h1 dcnl <h2 id w snippet3 reply 3< h2 dcnl <p and another reply dcnl < p dcnl the resulting list returned would be dcnl title category 1 dcnl responses dcnl title reply 1 dcnl response reply goes here http example com kbarticle dcnl title reply 2 dcnl response another reply here dcnl title category 2 dcnl responses dcnl title reply 3 dcnl response and another reply
bans a twitter account from using the aoa tool
unbans a twitter account from using the aoa tool
